<METHOD_START> @ Test public void void ( ) java.lang.Exception { UrlFilenameViewController org.springframework.web.servlet.mvc.UrlFilenameViewController = new UrlFilenameViewController ( ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.web.servlet.mvc.ModelAndView = org.springframework.web.servlet.mvc.UrlFilenameViewController . handleRequest ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ModelAndView . getViewName ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UrlFilenameViewController org.springframework.web.servlet.mvc.UrlFilenameViewController = new UrlFilenameViewController ( ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.web.servlet.mvc.ModelAndView = org.springframework.web.servlet.mvc.UrlFilenameViewController . handleRequest ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ModelAndView . getViewName ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UrlFilenameViewController org.springframework.web.servlet.mvc.UrlFilenameViewController = new UrlFilenameViewController ( ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.web.servlet.mvc.ModelAndView = org.springframework.web.servlet.mvc.UrlFilenameViewController . handleRequest ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ModelAndView . getViewName ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UrlFilenameViewController org.springframework.web.servlet.mvc.UrlFilenameViewController = new UrlFilenameViewController ( ) ; org.springframework.web.servlet.mvc.UrlFilenameViewController . setPrefix ( STRING ) ; org.springframework.web.servlet.mvc.UrlFilenameViewController . setSuffix ( STRING ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.web.servlet.mvc.ModelAndView = org.springframework.web.servlet.mvc.UrlFilenameViewController . handleRequest ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ModelAndView . getViewName ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UrlFilenameViewController org.springframework.web.servlet.mvc.UrlFilenameViewController = new UrlFilenameViewController ( ) ; org.springframework.web.servlet.mvc.UrlFilenameViewController . setPrefix ( STRING ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.web.servlet.mvc.ModelAndView = org.springframework.web.servlet.mvc.UrlFilenameViewController . handleRequest ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ModelAndView . getViewName ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UrlFilenameViewController org.springframework.web.servlet.mvc.UrlFilenameViewController = new UrlFilenameViewController ( ) ; org.springframework.web.servlet.mvc.UrlFilenameViewController . setSuffix ( STRING ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.web.servlet.mvc.ModelAndView = org.springframework.web.servlet.mvc.UrlFilenameViewController . handleRequest ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ModelAndView . getViewName ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UrlFilenameViewController org.springframework.web.servlet.mvc.UrlFilenameViewController = new UrlFilenameViewController ( ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.web.servlet.mvc.ModelAndView = org.springframework.web.servlet.mvc.UrlFilenameViewController . handleRequest ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ModelAndView . getViewName ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UrlFilenameViewController org.springframework.web.servlet.mvc.UrlFilenameViewController = new UrlFilenameViewController ( ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; void ( org.springframework.web.servlet.mvc.MockHttpServletRequest , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.web.servlet.mvc.ModelAndView = org.springframework.web.servlet.mvc.UrlFilenameViewController . handleRequest ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ModelAndView . getViewName ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UrlFilenameViewController org.springframework.web.servlet.mvc.UrlFilenameViewController = new UrlFilenameViewController ( ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; void ( org.springframework.web.servlet.mvc.MockHttpServletRequest , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.web.servlet.mvc.ModelAndView = org.springframework.web.servlet.mvc.UrlFilenameViewController . handleRequest ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ModelAndView . getViewName ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UrlFilenameViewController org.springframework.web.servlet.mvc.UrlFilenameViewController = new UrlFilenameViewController ( ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.MockHttpServletRequest . setContextPath ( STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.web.servlet.mvc.ModelAndView = org.springframework.web.servlet.mvc.UrlFilenameViewController . handleRequest ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ModelAndView . getViewName ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UrlFilenameViewController org.springframework.web.servlet.mvc.UrlFilenameViewController = new UrlFilenameViewController ( ) ; org.springframework.web.servlet.mvc.UrlFilenameViewController . setPrefix ( null ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.UrlFilenameViewController . getPrefix ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.mvc.UrlFilenameViewController . getPrefix ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UrlFilenameViewController org.springframework.web.servlet.mvc.UrlFilenameViewController = new UrlFilenameViewController ( ) ; org.springframework.web.servlet.mvc.UrlFilenameViewController . setSuffix ( null ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.UrlFilenameViewController . getSuffix ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.mvc.UrlFilenameViewController . getSuffix ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UrlFilenameViewController org.springframework.web.servlet.mvc.UrlFilenameViewController = new UrlFilenameViewController ( ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.web.servlet.mvc.ModelAndView = org.springframework.web.servlet.mvc.UrlFilenameViewController . handleRequest ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ModelAndView . getViewName ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UrlFilenameViewController org.springframework.web.servlet.mvc.UrlFilenameViewController = new UrlFilenameViewController ( ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.MockHttpServletRequest . setAttribute ( DispatcherServlet . INPUT_FLASH_MAP_ATTRIBUTE , new ModelMap ( STRING , STRING ) ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.web.servlet.mvc.ModelAndView = org.springframework.web.servlet.mvc.UrlFilenameViewController . handleRequest ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ModelAndView . getViewName ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.web.servlet.mvc.MockHttpServletRequest , java.lang.String java.lang.String ) { java.lang.String java.lang.String = this . org.springframework.web.servlet.mvc.PathMatcher . extractPathWithinPattern ( java.lang.String , org.springframework.web.servlet.mvc.MockHttpServletRequest . getRequestURI ( ) ) ; org.springframework.web.servlet.mvc.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , java.lang.String ) ; }  <METHOD_END>
