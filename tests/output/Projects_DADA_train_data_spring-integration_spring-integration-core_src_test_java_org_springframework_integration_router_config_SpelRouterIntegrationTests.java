<METHOD_START> @ Test public void void ( ) { org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean = new org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean ( NUMBER ) ; org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean = new org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean ( NUMBER ) ; org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean = new org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean ( NUMBER ) ; org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean = new org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean ( NUMBER ) ; Message < ? > org.springframework.integration.router.config.Message<?> = MessageBuilder . withPayload ( org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean ) . build ( ) ; Message < ? > org.springframework.integration.router.config.Message<?> = MessageBuilder . withPayload ( org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean ) . build ( ) ; Message < ? > org.springframework.integration.router.config.Message<?> = MessageBuilder . withPayload ( org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean ) . build ( ) ; Message < ? > org.springframework.integration.router.config.Message<?> = MessageBuilder . withPayload ( org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean ) . build ( ) ; this . org.springframework.integration.router.config.MessageChannel . send ( org.springframework.integration.router.config.Message<> ) ; this . org.springframework.integration.router.config.MessageChannel . send ( org.springframework.integration.router.config.Message<> ) ; this . org.springframework.integration.router.config.MessageChannel . send ( org.springframework.integration.router.config.Message<> ) ; this . org.springframework.integration.router.config.MessageChannel . send ( org.springframework.integration.router.config.Message<> ) ; assertEquals ( org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean , org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean , org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean , org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean , org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertNull ( org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.router.config.MessageChannel . send ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; this . org.springframework.integration.router.config.MessageChannel . send ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; this . org.springframework.integration.router.config.MessageChannel . send ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; this . org.springframework.integration.router.config.MessageChannel . send ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; this . org.springframework.integration.router.config.MessageChannel . send ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean . org.springframework.integration.router.config.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean . org.springframework.integration.router.config.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertNull ( org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean . org.springframework.integration.router.config.QueueChannel . receive ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean . org.springframework.integration.router.config.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean . org.springframework.integration.router.config.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean . org.springframework.integration.router.config.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertNull ( org.springframework.integration.router.config.SpelRouterIntegrationTests.TestBean . org.springframework.integration.router.config.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.router.config.MessageChannel org.springframework.integration.router.config.MessageChannel ( int int ) { return ( int == NUMBER ) ? org.springframework.integration.router.config.QueueChannel : org.springframework.integration.router.config.QueueChannel ; }  <METHOD_END>
