<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; Errors org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; ValidationUtils . invokeValidator ( null , org.springframework.validation.TestBean , org.springframework.validation.Errors ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; ValidationUtils . invokeValidator ( new org.springframework.validation.ValidationUtilsTests.EmptyValidator ( ) , org.springframework.validation.TestBean , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; Errors org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; ValidationUtils . invokeValidator ( new org.springframework.validation.ValidationUtilsTests.EmptyValidator ( ) , org.springframework.validation.TestBean , org.springframework.validation.Errors ) ; assertTrue ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( STRING ) ; Validator org.springframework.validation.Validator = new org.springframework.validation.ValidationUtilsTests.EmptyValidator ( ) ; org.springframework.validation.TestBean . setName ( STRING ) ; Errors org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean , org.springframework.validation.Errors ) ; assertFalse ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; org.springframework.validation.TestBean . setName ( STRING ) ; org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean , org.springframework.validation.Errors ) ; assertFalse ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; Errors org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; Validator org.springframework.validation.Validator = new org.springframework.validation.ValidationUtilsTests.EmptyValidator ( ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean , org.springframework.validation.Errors ) ; assertTrue ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( STRING ) ; Errors org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; Validator org.springframework.validation.Validator = new org.springframework.validation.ValidationUtilsTests.EmptyValidator ( ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean , org.springframework.validation.Errors ) ; assertTrue ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; Errors org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; ValidationUtils . rejectIfEmpty ( org.springframework.validation.Errors , STRING , STRING , new java.lang.Object [] { STRING } ) ; assertTrue ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getArguments ( ) [ NUMBER ] ) ; org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; ValidationUtils . rejectIfEmpty ( org.springframework.validation.Errors , STRING , STRING , new java.lang.Object [] { STRING } , STRING ) ; assertTrue ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getArguments ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getDefaultMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; Validator org.springframework.validation.Validator = new org.springframework.validation.ValidationUtilsTests.EmptyOrWhitespaceValidator ( ) ; Errors org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean , org.springframework.validation.Errors ) ; assertTrue ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; org.springframework.validation.TestBean . setName ( STRING ) ; org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean , org.springframework.validation.Errors ) ; assertTrue ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; org.springframework.validation.TestBean . setName ( STRING ) ; org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean , org.springframework.validation.Errors ) ; assertTrue ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; org.springframework.validation.TestBean . setName ( STRING ) ; org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean , org.springframework.validation.Errors ) ; assertFalse ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; org.springframework.validation.TestBean . setName ( STRING ) ; Errors org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; ValidationUtils . rejectIfEmptyOrWhitespace ( org.springframework.validation.Errors , STRING , STRING , new java.lang.Object [] { STRING } ) ; assertTrue ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getArguments ( ) [ NUMBER ] ) ; org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; ValidationUtils . rejectIfEmptyOrWhitespace ( org.springframework.validation.Errors , STRING , STRING , new java.lang.Object [] { STRING } , STRING ) ; assertTrue ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getArguments ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getDefaultMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return TestBean .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.validation.Errors ) { ValidationUtils . rejectIfEmpty ( org.springframework.validation.Errors , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return TestBean .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.validation.Errors ) { ValidationUtils . rejectIfEmptyOrWhitespace ( org.springframework.validation.Errors , STRING , STRING , STRING ) ; }  <METHOD_END>
