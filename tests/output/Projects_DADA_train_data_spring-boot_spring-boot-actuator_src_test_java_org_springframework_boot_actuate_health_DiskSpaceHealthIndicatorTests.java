<METHOD_START> @ Before public void void ( ) java.lang.Exception { MockitoAnnotations . initMocks ( this ) ; given ( this . java.io.File . boolean ( ) ) . willReturn ( true ) ; given ( this . java.io.File . boolean ( ) ) . willReturn ( true ) ; this . org.springframework.boot.actuate.health.HealthIndicator = new DiskSpaceHealthIndicator ( org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties ( this . java.io.File , long ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . java.io.File . long ( ) ) . willReturn ( long + NUMBER ) ; given ( this . java.io.File . long ( ) ) . willReturn ( long * NUMBER ) ; Health org.springframework.boot.actuate.health.Health = this . org.springframework.boot.actuate.health.HealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( long ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( long + NUMBER ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( long * NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . java.io.File . long ( ) ) . willReturn ( long - NUMBER ) ; given ( this . java.io.File . long ( ) ) . willReturn ( long * NUMBER ) ; Health org.springframework.boot.actuate.health.Health = this . org.springframework.boot.actuate.health.HealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . DOWN ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( long ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( long - NUMBER ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( long * NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties ( java.io.File java.io.File , long long ) { DiskSpaceHealthIndicatorProperties org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties = new DiskSpaceHealthIndicatorProperties ( ) ; org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties . setPath ( java.io.File ) ; org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties . setThreshold ( long ) ; return org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties ; }  <METHOD_END>
