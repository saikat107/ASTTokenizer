<METHOD_START> public void ( ServerHttpRequest org.springframework.http.server.reactive.ServerHttpRequest ) { Assert . notNull ( org.springframework.http.server.reactive.ServerHttpRequest , STRING ) ; this . org.springframework.http.server.reactive.ServerHttpRequest = org.springframework.http.server.reactive.ServerHttpRequest ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.server.reactive.ServerHttpRequest org.springframework.http.server.reactive.ServerHttpRequest ( ) { return this . org.springframework.http.server.reactive.ServerHttpRequest ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.HttpMethod org.springframework.http.server.reactive.HttpMethod ( ) { return org.springframework.http.server.reactive.ServerHttpRequest ( ) . getMethod ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return org.springframework.http.server.reactive.ServerHttpRequest ( ) . getURI ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> ( ) { return org.springframework.http.server.reactive.ServerHttpRequest ( ) . getQueryParams ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.HttpHeaders org.springframework.http.server.reactive.HttpHeaders ( ) { return org.springframework.http.server.reactive.ServerHttpRequest ( ) . getHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> < java.lang.String , HttpCookie > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> ( ) { return org.springframework.http.server.reactive.ServerHttpRequest ( ) . getCookies ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.Optional<java.net.InetSocketAddress> ( ) { return org.springframework.http.server.reactive.ServerHttpRequest ( ) . getRemoteAddress ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Flux<org.springframework.http.server.reactive.DataBuffer> < DataBuffer > org.springframework.http.server.reactive.Flux<org.springframework.http.server.reactive.DataBuffer> ( ) { return org.springframework.http.server.reactive.ServerHttpRequest ( ) . getBody ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.http.server.reactive.ServerHttpRequestDecorator> ( ) . java.lang.String ( ) + STRING + org.springframework.http.server.reactive.ServerHttpRequest ( ) + STRING ; }  <METHOD_END>
