<METHOD_START> public void ( ) { this( new DefaultResourceLoader ( ) ); }  <METHOD_END>
<METHOD_START> public void ( ResourceLoader org.springframework.jdbc.datasource.embedded.ResourceLoader ) { this . org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory = new EmbeddedDatabaseFactory ( ) ; this . org.springframework.jdbc.datasource.embedded.ResourceDatabasePopulator = new ResourceDatabasePopulator ( ) ; this . org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory . setDatabasePopulator ( this . org.springframework.jdbc.datasource.embedded.ResourceDatabasePopulator ) ; this . org.springframework.jdbc.datasource.embedded.ResourceLoader = org.springframework.jdbc.datasource.embedded.ResourceLoader ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ( boolean boolean ) { this . org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory . setGenerateUniqueDatabaseName ( boolean ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ( java.lang.String java.lang.String ) { this . org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory . setDatabaseName ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ( EmbeddedDatabaseType org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType ) { this . org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory . setDatabaseType ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ( DataSourceFactory org.springframework.jdbc.datasource.embedded.DataSourceFactory ) { Assert . notNull ( org.springframework.jdbc.datasource.embedded.DataSourceFactory , STRING ) ; this . org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory . setDataSourceFactory ( org.springframework.jdbc.datasource.embedded.DataSourceFactory ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ( ) { return org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ( java.lang.String java.lang.String ) { this . org.springframework.jdbc.datasource.embedded.ResourceDatabasePopulator . addScript ( this . org.springframework.jdbc.datasource.embedded.ResourceLoader . getResource ( java.lang.String ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ( java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ( java.lang.String ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ( java.lang.String java.lang.String ) { this . org.springframework.jdbc.datasource.embedded.ResourceDatabasePopulator . setSqlScriptEncoding ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ( java.lang.String java.lang.String ) { this . org.springframework.jdbc.datasource.embedded.ResourceDatabasePopulator . setSeparator ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ( java.lang.String java.lang.String ) { this . org.springframework.jdbc.datasource.embedded.ResourceDatabasePopulator . setCommentPrefix ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ( java.lang.String java.lang.String ) { this . org.springframework.jdbc.datasource.embedded.ResourceDatabasePopulator . setBlockCommentStartDelimiter ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ( java.lang.String java.lang.String ) { this . org.springframework.jdbc.datasource.embedded.ResourceDatabasePopulator . setBlockCommentEndDelimiter ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ( boolean boolean ) { this . org.springframework.jdbc.datasource.embedded.ResourceDatabasePopulator . setContinueOnError ( boolean ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ( boolean boolean ) { this . org.springframework.jdbc.datasource.embedded.ResourceDatabasePopulator . setIgnoreFailedDrops ( boolean ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.embedded.EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ( ) { return this . org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory . getDatabase ( ) ; }  <METHOD_END>
