<METHOD_START> java.lang.String java.lang.String ( ) { return ( GemfireUtils . GEMFIRE_PREFIX + GemfireUtils . NAME_PROPERTY_NAME ) ; }  <METHOD_END>
<METHOD_START> java.util.Properties java.util.Properties ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( java.lang.String , java.lang.String ) ; return java.util.Properties ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { java.lang.System . java.lang.String ( java.lang.String ( ) ) ; SpringContextBootstrappingInitializer . applicationContext = null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.data.gemfire.support.Cache = mock ( Cache .class ) ; ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class ) ; ServerLauncher org.springframework.data.gemfire.support.ServerLauncher = mock ( ServerLauncher .class ) ; SpringContextBootstrappingInitializer . applicationContext = org.springframework.data.gemfire.support.ConfigurableApplicationContext ; when ( org.springframework.data.gemfire.support.ServerLauncher . isSpringXmlLocationSpecified ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.support.ServerLauncher . getSpringXmlLocation ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.support.ServerLauncher . getMemberName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.support.ConfigurableApplicationContext . getBean ( eq ( Cache .class ) ) ) . thenReturn ( org.springframework.data.gemfire.support.Cache ) ; final SpringContextBootstrappingInitializer org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer = mock ( SpringContextBootstrappingInitializer .class ) ; SpringServerLauncherCacheProvider org.springframework.data.gemfire.support.SpringServerLauncherCacheProvider = new SpringServerLauncherCacheProvider ( ) { @ java.lang.Override public org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer ( ) { return org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer ; } } ; java.util.Properties java.util.Properties = java.util.Properties ( SpringContextBootstrappingInitializer . CONTEXT_CONFIG_LOCATIONS_PARAMETER , STRING ) ; assertThat ( org.springframework.data.gemfire.support.SpringServerLauncherCacheProvider . createCache ( null , org.springframework.data.gemfire.support.ServerLauncher ) , is ( equalTo ( org.springframework.data.gemfire.support.Cache ) ) ) ; verify ( org.springframework.data.gemfire.support.ServerLauncher , times ( NUMBER ) ) . isSpringXmlLocationSpecified ( ) ; verify ( org.springframework.data.gemfire.support.ServerLauncher , times ( NUMBER ) ) . getSpringXmlLocation ( ) ; verify ( org.springframework.data.gemfire.support.ServerLauncher , times ( NUMBER ) ) . getMemberName ( ) ; verify ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , times ( NUMBER ) ) . getBean ( eq ( Cache .class ) ) ; verify ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer ) . init ( eq ( java.util.Properties ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer ( ) { return org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ServerLauncher org.springframework.data.gemfire.support.ServerLauncher = mock ( ServerLauncher .class ) ; when ( org.springframework.data.gemfire.support.ServerLauncher . isSpringXmlLocationSpecified ( ) ) . thenReturn ( false ) ; assertThat ( new SpringServerLauncherCacheProvider ( ) . createCache ( null , org.springframework.data.gemfire.support.ServerLauncher ) , is ( nullValue ( ) ) ) ; verify ( org.springframework.data.gemfire.support.ServerLauncher , times ( NUMBER ) ) . isSpringXmlLocationSpecified ( ) ; }  <METHOD_END>
