<METHOD_START> @ Test public void void ( ) { java.util.Date java.util.Date = new java.util.Date ( ) ; MutablePropertyValues org.springframework.data.web.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.data.web.MutablePropertyValues . add ( STRING , new java.text.SimpleDateFormat ( STRING ) . java.lang.String ( java.util.Date ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Date ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.web.MutablePropertyValues ) ) . containsEntry ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { MutablePropertyValues org.springframework.data.web.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.data.web.MutablePropertyValues . add ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.web.MutablePropertyValues ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . isEqualTo ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>>> ( STRING , java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> ( STRING , java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( STRING , java.util.List<java.lang.String> ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { MutablePropertyValues org.springframework.data.web.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.data.web.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.data.web.MutablePropertyValues . add ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.web.MutablePropertyValues ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . isEqualTo ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.data.web.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.data.web.MutablePropertyValues . add ( STRING , STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.web.MutablePropertyValues ) ) . isEqualTo ( java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( PropertyValues org.springframework.data.web.PropertyValues ) { MapDataBinder org.springframework.data.web.MapDataBinder = new MapDataBinder ( org.springframework.data.web.MapDataBinderUnitTests.Root .class , new DefaultFormattingConversionService ( ) ) ; org.springframework.data.web.MapDataBinder . bind ( org.springframework.data.web.PropertyValues ) ; return org.springframework.data.web.MapDataBinder . getTarget ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.web.MapDataBinderUnitTests.Foo org.springframework.data.web.MapDataBinderUnitTests.Foo ( )  <METHOD_END>
<METHOD_START> org.springframework.data.web.MapDataBinderUnitTests.Bar org.springframework.data.web.MapDataBinderUnitTests.Bar ( )  <METHOD_END>
<METHOD_START> org.springframework.data.web.MapDataBinderUnitTests.Bar org.springframework.data.web.MapDataBinderUnitTests.Bar ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> @ DateTimeFormat ( iso = ISO . DATE_TIME ) java.util.Date java.util.Date ( )  <METHOD_END>
<METHOD_START> java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( )  <METHOD_END>
