<METHOD_START> void ( ConfigurableApplicationContext org.springframework.boot.diagnostics.ConfigurableApplicationContext ) { this( org.springframework.boot.diagnostics.ConfigurableApplicationContext , null ); }  <METHOD_END>
<METHOD_START> void ( ConfigurableApplicationContext org.springframework.boot.diagnostics.ConfigurableApplicationContext , java.lang.ClassLoader java.lang.ClassLoader ) { Assert . notNull ( org.springframework.boot.diagnostics.ConfigurableApplicationContext , STRING ) ; this . java.lang.ClassLoader = ( java.lang.ClassLoader == null ? org.springframework.boot.diagnostics.ConfigurableApplicationContext . getClassLoader ( ) : java.lang.ClassLoader ) ; this . java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> = java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> ( this . java.lang.ClassLoader ) ; void ( this . java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> , org.springframework.boot.diagnostics.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> < FailureAnalyzer > java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> ( java.lang.ClassLoader java.lang.ClassLoader ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = SpringFactoriesLoader . loadFactoryNames ( FailureAnalyzer .class , java.lang.ClassLoader ) ; java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> < FailureAnalyzer > java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> = new java.util.ArrayList<org.springframework.boot.diagnostics.FailureAnalyzer> <> ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { try { java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = ClassUtils . forName ( java.lang.String , java.lang.ClassLoader ) . getDeclaredConstructor ( ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Constructor<> ) ; java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> . add ( ( FailureAnalyzer ) java.lang.reflect.Constructor<> . newInstance ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.boot.diagnostics.Log . trace ( STRING + java.lang.String , java.lang.Throwable ) ; } } AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> ) ; return java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> < FailureAnalyzer > java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> , ConfigurableApplicationContext org.springframework.boot.diagnostics.ConfigurableApplicationContext ) { for ( FailureAnalyzer org.springframework.boot.diagnostics.FailureAnalyzer : java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> ) { void ( org.springframework.boot.diagnostics.ConfigurableApplicationContext , org.springframework.boot.diagnostics.FailureAnalyzer ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableApplicationContext org.springframework.boot.diagnostics.ConfigurableApplicationContext , FailureAnalyzer org.springframework.boot.diagnostics.FailureAnalyzer ) { if ( org.springframework.boot.diagnostics.FailureAnalyzer instanceof BeanFactoryAware ) { ( ( BeanFactoryAware ) org.springframework.boot.diagnostics.FailureAnalyzer ) . setBeanFactory ( org.springframework.boot.diagnostics.ConfigurableApplicationContext . getBeanFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Throwable java.lang.Throwable ) { FailureAnalysis org.springframework.boot.diagnostics.FailureAnalysis = org.springframework.boot.diagnostics.FailureAnalysis ( java.lang.Throwable , this . java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> ) ; return boolean ( org.springframework.boot.diagnostics.FailureAnalysis , this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.diagnostics.FailureAnalysis org.springframework.boot.diagnostics.FailureAnalysis ( java.lang.Throwable java.lang.Throwable , java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> < FailureAnalyzer > java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> ) { for ( FailureAnalyzer org.springframework.boot.diagnostics.FailureAnalyzer : java.util.List<org.springframework.boot.diagnostics.FailureAnalyzer> ) { try { FailureAnalysis org.springframework.boot.diagnostics.FailureAnalysis = org.springframework.boot.diagnostics.FailureAnalyzer . analyze ( java.lang.Throwable ) ; if ( org.springframework.boot.diagnostics.FailureAnalysis != null ) { return org.springframework.boot.diagnostics.FailureAnalysis ; } } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.boot.diagnostics.Log . debug ( STRING + org.springframework.boot.diagnostics.FailureAnalyzer + STRING , java.lang.Throwable ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( FailureAnalysis org.springframework.boot.diagnostics.FailureAnalysis , java.lang.ClassLoader java.lang.ClassLoader ) { java.util.List<org.springframework.boot.diagnostics.FailureAnalysisReporter> < FailureAnalysisReporter > java.util.List<org.springframework.boot.diagnostics.FailureAnalysisReporter> = SpringFactoriesLoader . loadFactories ( FailureAnalysisReporter .class , java.lang.ClassLoader ) ; if ( org.springframework.boot.diagnostics.FailureAnalysis == null || java.util.List<org.springframework.boot.diagnostics.FailureAnalysisReporter> . isEmpty ( ) ) { return false ; } for ( FailureAnalysisReporter org.springframework.boot.diagnostics.FailureAnalysisReporter : java.util.List<org.springframework.boot.diagnostics.FailureAnalysisReporter> ) { org.springframework.boot.diagnostics.FailureAnalysisReporter . report ( org.springframework.boot.diagnostics.FailureAnalysis ) ; } return true ; }  <METHOD_END>
