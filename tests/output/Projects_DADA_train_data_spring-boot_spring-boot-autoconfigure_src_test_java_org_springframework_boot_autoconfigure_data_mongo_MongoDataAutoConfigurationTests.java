<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( PropertyPlaceholderAutoConfiguration .class , MongoAutoConfiguration .class , MongoDataAutoConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . getBeanNamesForType ( MongoTemplate .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . register ( PropertyPlaceholderAutoConfiguration .class , MongoAutoConfiguration .class , MongoDataAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . getBeanNamesForType ( GridFsTemplate .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfigurationTests.CustomConversionsConfig .class ) ; this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . register ( PropertyPlaceholderAutoConfiguration .class , MongoAutoConfiguration .class , MongoDataAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . refresh ( ) ; MongoTemplate org.springframework.boot.autoconfigure.data.mongo.MongoTemplate = this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . getBean ( MongoTemplate .class ) ; assertThat ( org.springframework.boot.autoconfigure.data.mongo.MongoTemplate . getConverter ( ) . getConversionService ( ) . canConvert ( Mongo .class , java.lang.Boolean .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; java.lang.String java.lang.String = City .class . java.lang.Package ( ) . java.lang.String ( ) ; AutoConfigurationPackages . register ( this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext , java.lang.String ) ; this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . register ( MongoAutoConfiguration .class , MongoDataAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . refresh ( ) ; void ( this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . getBean ( MongoMappingContext .class ) , City .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , PropertyNameFieldNamingStrategy .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( CamelCaseAbbreviatingFieldNamingStrategy .class . java.lang.String ( ) , CamelCaseAbbreviatingFieldNamingStrategy .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { void ( FieldNamingStrategy .class . java.lang.String ( ) , null ) ; fail ( STRING ) ; } catch ( UnsatisfiedDependencyException org.springframework.boot.autoconfigure.data.mongo.UnsatisfiedDependencyException ) { } catch ( BeanCreationException org.springframework.boot.autoconfigure.data.mongo.BeanCreationException ) { } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfigurationTests.EntityScanConfig .class , PropertyPlaceholderAutoConfiguration .class , MongoAutoConfiguration .class , MongoDataAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . refresh ( ) ; MongoMappingContext org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext = this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . getBean ( MongoMappingContext .class ) ; java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = ( java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext , STRING ) ; assertThat ( java.util.Set<java.lang.Class<?>> ) . containsOnly ( City .class , Country .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . register ( MongoAutoConfiguration .class , MongoDataAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . refresh ( ) ; MongoMappingContext org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext = this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . getBean ( MongoMappingContext .class ) ; java.util.Optional<org.springframework.boot.autoconfigure.data.mongo.BasicMongoPersistentEntity<?>> < BasicMongoPersistentEntity < ? > > java.util.Optional<org.springframework.boot.autoconfigure.data.mongo.BasicMongoPersistentEntity<?>> = org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext . getPersistentEntity ( org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfigurationTests.Sample .class ) ; assertThat ( java.util.Optional<org.springframework.boot.autoconfigure.data.mongo.BasicMongoPersistentEntity<?>> ) . isPresent ( ) ; java.util.Optional<org.springframework.boot.autoconfigure.data.mongo.MongoPersistentProperty> < MongoPersistentProperty > java.util.Optional<org.springframework.boot.autoconfigure.data.mongo.MongoPersistentProperty> = java.util.Optional<org.springframework.boot.autoconfigure.data.mongo.BasicMongoPersistentEntity<?>> . get ( ) . getPersistentProperty ( STRING ) ; assertThat ( java.util.Optional<org.springframework.boot.autoconfigure.data.mongo.MongoPersistentProperty> ) . isPresent ( ) ; assertThat ( java.util.Optional<org.springframework.boot.autoconfigure.data.mongo.MongoPersistentProperty> . get ( ) . isEntity ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Class<? extends org.springframework.boot.autoconfigure.data.mongo.FieldNamingStrategy> < ? extends FieldNamingStrategy > java.lang.Class<? extends org.springframework.boot.autoconfigure.data.mongo.FieldNamingStrategy> ) { this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; if ( java.lang.String != null ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext , STRING + java.lang.String ) ; } this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . register ( PropertyPlaceholderAutoConfiguration .class , MongoAutoConfiguration .class , MongoDataAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . refresh ( ) ; MongoMappingContext org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext = this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . getBean ( MongoMappingContext .class ) ; FieldNamingStrategy org.springframework.boot.autoconfigure.data.mongo.FieldNamingStrategy = ( FieldNamingStrategy ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.data.mongo.FieldNamingStrategy . getClass ( ) ) . isEqualTo ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private static void void ( MongoMappingContext org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.util.Set<java.lang.Class> < java.lang.Class > java.util.Set<java.lang.Class> = ( java.util.Set<java.lang.Class> < java.lang.Class > ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext , STRING ) ; assertThat ( java.util.Set<java.lang.Class> ) . containsOnly ( java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.data.mongo.CustomConversions org.springframework.boot.autoconfigure.data.mongo.CustomConversions ( ) { return new CustomConversions ( java.util.Arrays . java.util.List<org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfigurationTests.MyConverter> ( new org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfigurationTests.MyConverter ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( Mongo org.springframework.boot.autoconfigure.data.mongo.Mongo ) { return null ; }  <METHOD_END>
