<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( WebApplicationContext org.springframework.web.servlet.WebApplicationContext ) { this . org.springframework.web.servlet.WebApplicationContext = org.springframework.web.servlet.WebApplicationContext ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return ( this . java.lang.String != null ? this . java.lang.String : getServletName ( ) + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( org.springframework.web.servlet.ApplicationContextInitializer<?> < ? > ... org.springframework.web.servlet.ApplicationContextInitializer<?>[] ) { if ( org.springframework.web.servlet.ApplicationContextInitializer<?>[] != null ) { for ( ApplicationContextInitializer < ? > org.springframework.web.servlet.ApplicationContextInitializer<?> : org.springframework.web.servlet.ApplicationContextInitializer<?>[] ) { this . java.util.List<org.springframework.web.servlet.ApplicationContextInitializer<org.springframework.web.servlet.ConfigurableApplicationContext>> . add ( ( ApplicationContextInitializer < ConfigurableApplicationContext > ) org.springframework.web.servlet.ApplicationContextInitializer<> ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.web.servlet.ApplicationContext ) { if ( this . org.springframework.web.servlet.WebApplicationContext == null && org.springframework.web.servlet.ApplicationContext instanceof WebApplicationContext ) { this . org.springframework.web.servlet.WebApplicationContext = ( WebApplicationContext ) org.springframework.web.servlet.ApplicationContext ; this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final void void ( ) org.springframework.web.servlet.ServletException { getServletContext ( ) . log ( STRING + getServletName ( ) + STRING ) ; if ( this . logger . isInfoEnabled ( ) ) { this . logger . info ( STRING + getServletName ( ) + STRING ) ; } long long = java.lang.System . long ( ) ; try { this . org.springframework.web.servlet.WebApplicationContext = org.springframework.web.servlet.WebApplicationContext ( ) ; void ( ) ; } catch ( ServletException org.springframework.web.servlet.ServletException ) { this . logger . error ( STRING , org.springframework.web.servlet.ServletException ) ; throw org.springframework.web.servlet.ServletException ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { this . logger . error ( STRING , java.lang.RuntimeException ) ; throw java.lang.RuntimeException ; } if ( this . logger . isInfoEnabled ( ) ) { long long = java.lang.System . long ( ) - long ; this . logger . info ( STRING + getServletName ( ) + STRING + long + STRING ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.WebApplicationContext org.springframework.web.servlet.WebApplicationContext ( ) { WebApplicationContext org.springframework.web.servlet.WebApplicationContext = WebApplicationContextUtils . getWebApplicationContext ( getServletContext ( ) ) ; WebApplicationContext org.springframework.web.servlet.WebApplicationContext = null ; if ( this . org.springframework.web.servlet.WebApplicationContext != null ) { org.springframework.web.servlet.WebApplicationContext = this . org.springframework.web.servlet.WebApplicationContext ; if ( org.springframework.web.servlet.WebApplicationContext instanceof ConfigurableWebApplicationContext ) { ConfigurableWebApplicationContext org.springframework.web.servlet.ConfigurableWebApplicationContext = ( ConfigurableWebApplicationContext ) org.springframework.web.servlet.WebApplicationContext ; if ( ! org.springframework.web.servlet.ConfigurableWebApplicationContext . isActive ( ) ) { if ( org.springframework.web.servlet.ConfigurableWebApplicationContext . getParent ( ) == null ) { org.springframework.web.servlet.ConfigurableWebApplicationContext . setParent ( org.springframework.web.servlet.WebApplicationContext ) ; } void ( org.springframework.web.servlet.ConfigurableWebApplicationContext ) ; } } } if ( org.springframework.web.servlet.WebApplicationContext == null ) { org.springframework.web.servlet.WebApplicationContext = org.springframework.web.servlet.WebApplicationContext ( ) ; } if ( org.springframework.web.servlet.WebApplicationContext == null ) { org.springframework.web.servlet.WebApplicationContext = org.springframework.web.servlet.WebApplicationContext ( org.springframework.web.servlet.WebApplicationContext ) ; } if ( ! this . boolean ) { void ( org.springframework.web.servlet.WebApplicationContext ) ; } if ( this . boolean ) { java.lang.String java.lang.String = java.lang.String ( ) ; getServletContext ( ) . setAttribute ( java.lang.String , org.springframework.web.servlet.WebApplicationContext ) ; if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( STRING + getServletName ( ) + STRING + java.lang.String + STRING ) ; } } return org.springframework.web.servlet.WebApplicationContext ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.WebApplicationContext org.springframework.web.servlet.WebApplicationContext ( ) { java.lang.String java.lang.String = java.lang.String ( ) ; if ( java.lang.String == null ) { return null ; } WebApplicationContext org.springframework.web.servlet.WebApplicationContext = WebApplicationContextUtils . getWebApplicationContext ( getServletContext ( ) , java.lang.String ) ; if ( org.springframework.web.servlet.WebApplicationContext == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } return org.springframework.web.servlet.WebApplicationContext ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.WebApplicationContext org.springframework.web.servlet.WebApplicationContext ( ApplicationContext org.springframework.web.servlet.ApplicationContext ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( ) ; if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( STRING + getServletName ( ) + STRING + java.lang.Class<> . java.lang.String ( ) + STRING + STRING + org.springframework.web.servlet.ApplicationContext + STRING ) ; } if ( ! ConfigurableWebApplicationContext .class . boolean ( java.lang.Class<> ) ) { throw new ApplicationContextException ( STRING + getServletName ( ) + STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } ConfigurableWebApplicationContext org.springframework.web.servlet.ConfigurableWebApplicationContext = ( ConfigurableWebApplicationContext ) BeanUtils . instantiateClass ( java.lang.Class<> ) ; org.springframework.web.servlet.ConfigurableWebApplicationContext . setEnvironment ( getEnvironment ( ) ) ; org.springframework.web.servlet.ConfigurableWebApplicationContext . setParent ( org.springframework.web.servlet.ApplicationContext ) ; org.springframework.web.servlet.ConfigurableWebApplicationContext . setConfigLocation ( java.lang.String ( ) ) ; void ( org.springframework.web.servlet.ConfigurableWebApplicationContext ) ; return org.springframework.web.servlet.ConfigurableWebApplicationContext ; }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableWebApplicationContext org.springframework.web.servlet.ConfigurableWebApplicationContext ) { if ( ObjectUtils . identityToString ( org.springframework.web.servlet.ConfigurableWebApplicationContext ) . equals ( org.springframework.web.servlet.ConfigurableWebApplicationContext . getId ( ) ) ) { if ( this . java.lang.String != null ) { org.springframework.web.servlet.ConfigurableWebApplicationContext . setId ( this . java.lang.String ) ; } else { org.springframework.web.servlet.ConfigurableWebApplicationContext . setId ( ConfigurableWebApplicationContext . APPLICATION_CONTEXT_ID_PREFIX + ObjectUtils . getDisplayString ( getServletContext ( ) . getContextPath ( ) ) + '/' + getServletName ( ) ) ; } } org.springframework.web.servlet.ConfigurableWebApplicationContext . setServletContext ( getServletContext ( ) ) ; org.springframework.web.servlet.ConfigurableWebApplicationContext . setServletConfig ( getServletConfig ( ) ) ; org.springframework.web.servlet.ConfigurableWebApplicationContext . setNamespace ( java.lang.String ( ) ) ; org.springframework.web.servlet.ConfigurableWebApplicationContext . addApplicationListener ( new SourceFilteringListener ( org.springframework.web.servlet.ConfigurableWebApplicationContext , new org.springframework.web.servlet.FrameworkServlet.ContextRefreshListener ( ) ) ) ; ConfigurableEnvironment org.springframework.web.servlet.ConfigurableEnvironment = org.springframework.web.servlet.ConfigurableWebApplicationContext . getEnvironment ( ) ; if ( org.springframework.web.servlet.ConfigurableEnvironment instanceof ConfigurableWebEnvironment ) { ( ( ConfigurableWebEnvironment ) org.springframework.web.servlet.ConfigurableEnvironment ) . initPropertySources ( getServletContext ( ) , getServletConfig ( ) ) ; } void ( org.springframework.web.servlet.ConfigurableWebApplicationContext ) ; void ( org.springframework.web.servlet.ConfigurableWebApplicationContext ) ; org.springframework.web.servlet.ConfigurableWebApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.WebApplicationContext org.springframework.web.servlet.WebApplicationContext ( WebApplicationContext org.springframework.web.servlet.WebApplicationContext ) { return org.springframework.web.servlet.WebApplicationContext ( ( ApplicationContext ) org.springframework.web.servlet.WebApplicationContext ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableWebApplicationContext org.springframework.web.servlet.ConfigurableWebApplicationContext ) {	}  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableApplicationContext org.springframework.web.servlet.ConfigurableApplicationContext ) { java.lang.String java.lang.String = getServletContext ( ) . getInitParameter ( ContextLoader . GLOBAL_INITIALIZER_CLASSES_PARAM ) ; if ( java.lang.String != null ) { for ( java.lang.String java.lang.String : StringUtils . tokenizeToStringArray ( java.lang.String , java.lang.String ) ) { this . java.util.List<org.springframework.web.servlet.ApplicationContextInitializer<org.springframework.web.servlet.ConfigurableApplicationContext>> . add ( org.springframework.web.servlet.ApplicationContextInitializer<org.springframework.web.servlet.ConfigurableApplicationContext> ( java.lang.String , org.springframework.web.servlet.ConfigurableApplicationContext ) ) ; } } if ( this . java.lang.String != null ) { for ( java.lang.String java.lang.String : StringUtils . tokenizeToStringArray ( this . java.lang.String , java.lang.String ) ) { this . java.util.List<org.springframework.web.servlet.ApplicationContextInitializer<org.springframework.web.servlet.ConfigurableApplicationContext>> . add ( org.springframework.web.servlet.ApplicationContextInitializer<org.springframework.web.servlet.ConfigurableApplicationContext> ( java.lang.String , org.springframework.web.servlet.ConfigurableApplicationContext ) ) ; } } AnnotationAwareOrderComparator . sort ( this . java.util.List<org.springframework.web.servlet.ApplicationContextInitializer<org.springframework.web.servlet.ConfigurableApplicationContext>> ) ; for ( ApplicationContextInitializer < ConfigurableApplicationContext > org.springframework.web.servlet.ApplicationContextInitializer<org.springframework.web.servlet.ConfigurableApplicationContext> : this . java.util.List<org.springframework.web.servlet.ApplicationContextInitializer<org.springframework.web.servlet.ConfigurableApplicationContext>> ) { org.springframework.web.servlet.ApplicationContextInitializer<org.springframework.web.servlet.ConfigurableApplicationContext> . initialize ( org.springframework.web.servlet.ConfigurableApplicationContext ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.web.servlet.ApplicationContextInitializer<org.springframework.web.servlet.ConfigurableApplicationContext> < ConfigurableApplicationContext > org.springframework.web.servlet.ApplicationContextInitializer<org.springframework.web.servlet.ConfigurableApplicationContext> ( java.lang.String java.lang.String , ConfigurableApplicationContext org.springframework.web.servlet.ConfigurableApplicationContext ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.String , org.springframework.web.servlet.ConfigurableApplicationContext . getClassLoader ( ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = GenericTypeResolver . resolveTypeArgument ( java.lang.Class<> , ApplicationContextInitializer .class ) ; if ( java.lang.Class<> != null && ! java.lang.Class<> . boolean ( org.springframework.web.servlet.ConfigurableApplicationContext ) ) { throw new ApplicationContextException ( java.lang.String . java.lang.String ( STRING + STRING + STRING , java.lang.Class<> . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) , org.springframework.web.servlet.ConfigurableApplicationContext . getClass ( ) . getName ( ) ) ) ; } return BeanUtils . instantiateClass ( java.lang.Class<> , ApplicationContextInitializer .class ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new ApplicationContextException ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.String ) , java.lang.ClassNotFoundException ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String + getServletName ( ) ; }  <METHOD_END>
<METHOD_START> public final org.springframework.web.servlet.WebApplicationContext org.springframework.web.servlet.WebApplicationContext ( ) { return this . org.springframework.web.servlet.WebApplicationContext ; }  <METHOD_END>
<METHOD_START> protected void void ( ) org.springframework.web.servlet.ServletException {	}  <METHOD_END>
<METHOD_START> public void void ( ) { WebApplicationContext org.springframework.web.servlet.WebApplicationContext = org.springframework.web.servlet.WebApplicationContext ( ) ; if ( ! ( org.springframework.web.servlet.WebApplicationContext instanceof ConfigurableApplicationContext ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.web.servlet.WebApplicationContext ) ; } ( ( ConfigurableApplicationContext ) org.springframework.web.servlet.WebApplicationContext ) . refresh ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ContextRefreshedEvent org.springframework.web.servlet.ContextRefreshedEvent ) { this . boolean = true ; void ( org.springframework.web.servlet.ContextRefreshedEvent . getApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ApplicationContext org.springframework.web.servlet.ApplicationContext ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { getServletContext ( ) . log ( STRING + getServletName ( ) + STRING ) ; if ( this . org.springframework.web.servlet.WebApplicationContext instanceof ConfigurableApplicationContext && ! this . boolean ) { ( ( ConfigurableApplicationContext ) this . org.springframework.web.servlet.WebApplicationContext ) . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse )			throws org.springframework.web.servlet.ServletException , java.io.IOException { HttpMethod org.springframework.web.servlet.HttpMethod = HttpMethod . resolve ( org.springframework.web.servlet.HttpServletRequest . getMethod ( ) ) ; if ( HttpMethod . PATCH == org.springframework.web.servlet.HttpMethod || org.springframework.web.servlet.HttpMethod == null ) { void ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse ) ; } else { super. service ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse )			throws org.springframework.web.servlet.ServletException , java.io.IOException { void ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse )			throws org.springframework.web.servlet.ServletException , java.io.IOException { void ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse )			throws org.springframework.web.servlet.ServletException , java.io.IOException { void ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse )			throws org.springframework.web.servlet.ServletException , java.io.IOException { void ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse )			throws org.springframework.web.servlet.ServletException , java.io.IOException { if ( this . boolean || CorsUtils . isPreFlightRequest ( org.springframework.web.servlet.HttpServletRequest ) ) { void ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse ) ; if ( org.springframework.web.servlet.HttpServletResponse . containsHeader ( STRING ) ) { return; } } super. doOptions ( org.springframework.web.servlet.HttpServletRequest , new HttpServletResponseWrapper ( org.springframework.web.servlet.HttpServletResponse ) { @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { java.lang.String = ( StringUtils . hasLength ( java.lang.String ) ? java.lang.String + STRING : STRING ) + HttpMethod . PATCH . name ( ) ; } super. setHeader ( java.lang.String , java.lang.String ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { java.lang.String = ( StringUtils . hasLength ( java.lang.String ) ? java.lang.String + STRING : STRING ) + HttpMethod . PATCH . name ( ) ; } super. setHeader ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse )			throws org.springframework.web.servlet.ServletException , java.io.IOException { if ( this . boolean ) { void ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse ) ; if ( STRING . boolean ( org.springframework.web.servlet.HttpServletResponse . getContentType ( ) ) ) { return; } } super. doTrace ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse )			throws org.springframework.web.servlet.ServletException , java.io.IOException { long long = java.lang.System . long ( ) ; java.lang.Throwable java.lang.Throwable = null ; LocaleContext org.springframework.web.servlet.LocaleContext = LocaleContextHolder . getLocaleContext ( ) ; LocaleContext org.springframework.web.servlet.LocaleContext = org.springframework.web.servlet.LocaleContext ( org.springframework.web.servlet.HttpServletRequest ) ; RequestAttributes org.springframework.web.servlet.RequestAttributes = RequestContextHolder . getRequestAttributes ( ) ; ServletRequestAttributes org.springframework.web.servlet.ServletRequestAttributes = org.springframework.web.servlet.ServletRequestAttributes ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse , org.springframework.web.servlet.RequestAttributes ) ; WebAsyncManager org.springframework.web.servlet.WebAsyncManager = WebAsyncUtils . getAsyncManager ( org.springframework.web.servlet.HttpServletRequest ) ; org.springframework.web.servlet.WebAsyncManager . registerCallableInterceptor ( org.springframework.web.servlet.FrameworkServlet .class . java.lang.String ( ) , new org.springframework.web.servlet.FrameworkServlet.RequestBindingInterceptor ( ) ) ; void ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.LocaleContext , org.springframework.web.servlet.ServletRequestAttributes ) ; try { void ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse ) ; } catch ( ServletException org.springframework.web.servlet.ServletException ) { java.lang.Throwable = org.springframework.web.servlet.ServletException ; throw org.springframework.web.servlet.ServletException ; } catch ( java.io.IOException java.io.IOException ) { java.lang.Throwable = java.io.IOException ; throw java.io.IOException ; } catch ( java.lang.Throwable java.lang.Throwable ) { java.lang.Throwable = java.lang.Throwable ; throw new NestedServletException ( STRING , java.lang.Throwable ) ; } finally { void ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.LocaleContext , org.springframework.web.servlet.RequestAttributes ) ; if ( org.springframework.web.servlet.ServletRequestAttributes != null ) { org.springframework.web.servlet.ServletRequestAttributes . requestCompleted ( ) ; } if ( logger . isDebugEnabled ( ) ) { if ( java.lang.Throwable != null ) { this . logger . debug ( STRING , java.lang.Throwable ) ; } else { if ( org.springframework.web.servlet.WebAsyncManager . isConcurrentHandlingStarted ( ) ) { logger . debug ( STRING ) ; } else { this . logger . debug ( STRING ) ; } } } void ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse , long , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.LocaleContext org.springframework.web.servlet.LocaleContext ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest ) { return new SimpleLocaleContext ( org.springframework.web.servlet.HttpServletRequest . getLocale ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.ServletRequestAttributes org.springframework.web.servlet.ServletRequestAttributes ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse , RequestAttributes org.springframework.web.servlet.RequestAttributes ) { if ( org.springframework.web.servlet.RequestAttributes == null || org.springframework.web.servlet.RequestAttributes instanceof ServletRequestAttributes ) { return new ServletRequestAttributes ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> private void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , LocaleContext org.springframework.web.servlet.LocaleContext , RequestAttributes org.springframework.web.servlet.RequestAttributes ) { if ( org.springframework.web.servlet.LocaleContext != null ) { LocaleContextHolder . setLocaleContext ( org.springframework.web.servlet.LocaleContext , this . boolean ) ; } if ( org.springframework.web.servlet.RequestAttributes != null ) { RequestContextHolder . setRequestAttributes ( org.springframework.web.servlet.RequestAttributes , this . boolean ) ; } if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + org.springframework.web.servlet.HttpServletRequest ) ; } }  <METHOD_END>
<METHOD_START> private void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , LocaleContext org.springframework.web.servlet.LocaleContext , RequestAttributes org.springframework.web.servlet.RequestAttributes ) { LocaleContextHolder . setLocaleContext ( org.springframework.web.servlet.LocaleContext , this . boolean ) ; RequestContextHolder . setRequestAttributes ( org.springframework.web.servlet.RequestAttributes , this . boolean ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + org.springframework.web.servlet.HttpServletRequest ) ; } }  <METHOD_END>
<METHOD_START> private void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse , long long , java.lang.Throwable java.lang.Throwable ) { if ( this . boolean ) { long long = java.lang.System . long ( ) - long ; this . org.springframework.web.servlet.WebApplicationContext . publishEvent ( new ServletRequestHandledEvent ( this , org.springframework.web.servlet.HttpServletRequest . getRequestURI ( ) , org.springframework.web.servlet.HttpServletRequest . getRemoteAddr ( ) , org.springframework.web.servlet.HttpServletRequest . getMethod ( ) , getServletConfig ( ) . getServletName ( ) , WebUtils . getSessionId ( org.springframework.web.servlet.HttpServletRequest ) , java.lang.String ( org.springframework.web.servlet.HttpServletRequest ) , long , java.lang.Throwable , org.springframework.web.servlet.HttpServletResponse . getStatus ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest ) { java.security.Principal java.security.Principal = org.springframework.web.servlet.HttpServletRequest . getUserPrincipal ( ) ; return ( java.security.Principal != null ? java.security.Principal . java.lang.String ( ) : null ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse )			throws java.lang.Exception ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContextRefreshedEvent org.springframework.web.servlet.ContextRefreshedEvent ) { org.springframework.web.servlet.FrameworkServlet .this . void ( org.springframework.web.servlet.ContextRefreshedEvent ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > void void ( NativeWebRequest org.springframework.web.servlet.NativeWebRequest , java.util.concurrent.Callable<T> < T > java.util.concurrent.Callable<T> ) { HttpServletRequest org.springframework.web.servlet.HttpServletRequest = org.springframework.web.servlet.NativeWebRequest . getNativeRequest ( HttpServletRequest .class ) ; if ( org.springframework.web.servlet.HttpServletRequest != null ) { HttpServletResponse org.springframework.web.servlet.HttpServletResponse = org.springframework.web.servlet.NativeWebRequest . getNativeRequest ( HttpServletResponse .class ) ; void ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.LocaleContext ( org.springframework.web.servlet.HttpServletRequest ) , org.springframework.web.servlet.ServletRequestAttributes ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse , null ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > void void ( NativeWebRequest org.springframework.web.servlet.NativeWebRequest , java.util.concurrent.Callable<T> < T > java.util.concurrent.Callable<T> , java.lang.Object java.lang.Object ) { HttpServletRequest org.springframework.web.servlet.HttpServletRequest = org.springframework.web.servlet.NativeWebRequest . getNativeRequest ( HttpServletRequest .class ) ; if ( org.springframework.web.servlet.HttpServletRequest != null ) { void ( org.springframework.web.servlet.HttpServletRequest , null , null ) ; } }  <METHOD_END>
