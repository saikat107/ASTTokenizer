<METHOD_START> public void ( ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) { super( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { return checkAnnotatedParamNoReactiveWrapper ( org.springframework.web.reactive.result.method.annotation.MethodParameter , RequestHeader .class , this :: boolean ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( RequestHeader org.springframework.web.reactive.result.method.annotation.RequestHeader , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Map .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterType ( ) ; boolean boolean = MultiValueMap .class . boolean ( java.lang.Class<> ) ; HttpHeaders org.springframework.web.reactive.result.method.annotation.HttpHeaders = org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getRequest ( ) . getHeaders ( ) ; return java.util.Optional . java.util.Optional ( boolean ? org.springframework.web.reactive.result.method.annotation.HttpHeaders : org.springframework.web.reactive.result.method.annotation.HttpHeaders . toSingleValueMap ( ) ) ; }  <METHOD_END>
