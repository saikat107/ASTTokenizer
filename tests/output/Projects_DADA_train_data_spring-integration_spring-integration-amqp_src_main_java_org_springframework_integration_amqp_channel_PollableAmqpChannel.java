<METHOD_START> public void ( java.lang.String java.lang.String , AmqpTemplate org.springframework.integration.amqp.channel.AmqpTemplate ) { super( org.springframework.integration.amqp.channel.AmqpTemplate ); Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , AmqpTemplate org.springframework.integration.amqp.channel.AmqpTemplate , AmqpHeaderMapper org.springframework.integration.amqp.channel.AmqpHeaderMapper , AmqpHeaderMapper org.springframework.integration.amqp.channel.AmqpHeaderMapper ) { super( org.springframework.integration.amqp.channel.AmqpTemplate , org.springframework.integration.amqp.channel.AmqpHeaderMapper , org.springframework.integration.amqp.channel.AmqpHeaderMapper ); Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( AmqpAdmin org.springframework.integration.amqp.channel.AmqpAdmin ) { this . org.springframework.integration.amqp.channel.AmqpAdmin = org.springframework.integration.amqp.channel.AmqpAdmin ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return getMetrics ( ) . getReceiveCount ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return getMetrics ( ) . getReceiveCountLong ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return getMetrics ( ) . getReceiveErrorCount ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return getMetrics ( ) . getReceiveErrorCountLong ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; AmqpTemplate org.springframework.integration.amqp.channel.AmqpTemplate = this . getAmqpTemplate ( ) ; if ( this . java.lang.String == null ) { if ( this . org.springframework.integration.amqp.channel.AmqpAdmin == null && org.springframework.integration.amqp.channel.AmqpTemplate instanceof RabbitTemplate ) { this . org.springframework.integration.amqp.channel.AmqpAdmin = new RabbitAdmin ( ( ( RabbitTemplate ) org.springframework.integration.amqp.channel.AmqpTemplate ) . getConnectionFactory ( ) ) ; } Assert . notNull ( this . org.springframework.integration.amqp.channel.AmqpAdmin , STRING + STRING ) ; this . java.lang.String = this . java.lang.String ; this . org.springframework.integration.amqp.channel.AmqpAdmin . declareQueue ( new Queue ( this . java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.amqp.channel.Message<?> < ? > org.springframework.integration.amqp.channel.Message<?> ( ) { return org.springframework.integration.amqp.channel.Message<?> ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.amqp.channel.Message<?> < ? > org.springframework.integration.amqp.channel.Message<?> ( long long ) { return org.springframework.integration.amqp.channel.Message<?> ( long ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.channel.Message<?> < ? > org.springframework.integration.amqp.channel.Message<?> ( java.lang.Long java.lang.Long ) { ChannelInterceptorList org.springframework.integration.amqp.channel.ChannelInterceptorList = getInterceptors ( ) ; java.util.Deque<org.springframework.integration.amqp.channel.ChannelInterceptor> < ChannelInterceptor > java.util.Deque<org.springframework.integration.amqp.channel.ChannelInterceptor> = null ; boolean boolean = false ; boolean boolean = isCountsEnabled ( ) ; try { if ( isLoggingEnabled ( ) && logger . isTraceEnabled ( ) ) { logger . trace ( STRING + this + STRING ) ; } if ( org.springframework.integration.amqp.channel.ChannelInterceptorList . getInterceptors ( ) . size ( ) > NUMBER ) { java.util.Deque<org.springframework.integration.amqp.channel.ChannelInterceptor> = new java.util.ArrayDeque <> ( ) ; if ( ! org.springframework.integration.amqp.channel.ChannelInterceptorList . preReceive ( this , java.util.Deque<org.springframework.integration.amqp.channel.ChannelInterceptor> ) ) { return null ; } } java.lang.Object java.lang.Object = java.lang.Object ( java.lang.Long ) ; if ( java.lang.Object == null ) { if ( isLoggingEnabled ( ) && logger . isTraceEnabled ( ) ) { logger . trace ( STRING + this + STRING ) ; } return null ; } if ( boolean ) { getMetrics ( ) . afterReceive ( ) ; boolean = true ; } Message < ? > org.springframework.integration.amqp.channel.Message<?> ; if ( java.lang.Object instanceof Message < ? > ) { org.springframework.integration.amqp.channel.Message<?> = ( Message < ? > ) java.lang.Object ; } else { org.springframework.integration.amqp.channel.Message<?> = getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . build ( ) ; } if ( isLoggingEnabled ( ) && logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this + STRING + org.springframework.integration.amqp.channel.Message<> ) ; } if ( java.util.Deque<org.springframework.integration.amqp.channel.ChannelInterceptor> != null ) { org.springframework.integration.amqp.channel.Message<?> = org.springframework.integration.amqp.channel.ChannelInterceptorList . postReceive ( org.springframework.integration.amqp.channel.Message<> , this ) ; org.springframework.integration.amqp.channel.ChannelInterceptorList . afterReceiveCompletion ( org.springframework.integration.amqp.channel.Message<> , this , null , java.util.Deque<org.springframework.integration.amqp.channel.ChannelInterceptor> ) ; } return org.springframework.integration.amqp.channel.Message<> ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( boolean && ! boolean ) { getMetrics ( ) . afterError ( ) ; } if ( java.util.Deque<org.springframework.integration.amqp.channel.ChannelInterceptor> != null ) { org.springframework.integration.amqp.channel.ChannelInterceptorList . afterReceiveCompletion ( null , this , java.lang.RuntimeException , java.util.Deque<org.springframework.integration.amqp.channel.ChannelInterceptor> ) ; } throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Long java.lang.Long ) { if ( ! isExtractPayload ( ) ) { if ( java.lang.Long == null ) { return getAmqpTemplate ( ) . receiveAndConvert ( this . java.lang.String ) ; } else { return getAmqpTemplate ( ) . receiveAndConvert ( this . java.lang.String , java.lang.Long ) ; } } else { RabbitTemplate org.springframework.integration.amqp.channel.RabbitTemplate = getRabbitTemplate ( ) ; org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message ; if ( java.lang.Long == null ) { org.springframework.amqp.core.Message = org.springframework.integration.amqp.channel.RabbitTemplate . receive ( this . java.lang.String ) ; } else { org.springframework.amqp.core.Message = org.springframework.integration.amqp.channel.RabbitTemplate . receive ( this . java.lang.String , java.lang.Long ) ; } if ( org.springframework.amqp.core.Message != null ) { java.lang.Object java.lang.Object = org.springframework.integration.amqp.channel.RabbitTemplate . getMessageConverter ( ) . fromMessage ( org.springframework.amqp.core.Message ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = getInboundHeaderMapper ( ) . toHeadersFromRequest ( org.springframework.amqp.core.Message . getMessageProperties ( ) ) ; return getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; } else { return null ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.integration.amqp.channel.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.amqp.channel.ChannelInterceptor> ) { super. setInterceptors ( java.util.List<org.springframework.integration.amqp.channel.ChannelInterceptor> ) ; for ( ChannelInterceptor org.springframework.integration.amqp.channel.ChannelInterceptor : java.util.List<org.springframework.integration.amqp.channel.ChannelInterceptor> ) { if ( org.springframework.integration.amqp.channel.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { this . int ++ ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ChannelInterceptor org.springframework.integration.amqp.channel.ChannelInterceptor ) { super. addInterceptor ( org.springframework.integration.amqp.channel.ChannelInterceptor ) ; if ( org.springframework.integration.amqp.channel.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { this . int ++ ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int , ChannelInterceptor org.springframework.integration.amqp.channel.ChannelInterceptor ) { super. addInterceptor ( int , org.springframework.integration.amqp.channel.ChannelInterceptor ) ; if ( org.springframework.integration.amqp.channel.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { this . int ++ ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ChannelInterceptor org.springframework.integration.amqp.channel.ChannelInterceptor ) { boolean boolean = super. removeInterceptor ( org.springframework.integration.amqp.channel.ChannelInterceptor ) ; if ( boolean && org.springframework.integration.amqp.channel.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { this . int -- ; } return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.amqp.channel.ChannelInterceptor org.springframework.integration.amqp.channel.ChannelInterceptor ( int int ) { ChannelInterceptor org.springframework.integration.amqp.channel.ChannelInterceptor = super. removeInterceptor ( int ) ; if ( org.springframework.integration.amqp.channel.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { this . int -- ; } return org.springframework.integration.amqp.channel.ChannelInterceptor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . int > NUMBER ; }  <METHOD_END>
