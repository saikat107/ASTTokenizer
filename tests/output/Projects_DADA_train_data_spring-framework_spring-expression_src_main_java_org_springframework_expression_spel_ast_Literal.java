<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { super( int ); this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public final java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.SpelEvaluationException { return org.springframework.expression.spel.ast.TypedValue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.expression.spel.ast.TypedValue ( ) . getValue ( ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public abstract org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( )  <METHOD_END>
<METHOD_START> public static org.springframework.expression.spel.ast.Literal org.springframework.expression.spel.ast.Literal ( java.lang.String java.lang.String , int int , int int ) { try { int int = java.lang.Integer . int ( java.lang.String , int ) ; return new IntLiteral ( java.lang.String , int , int ) ; } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { throw new InternalParseException ( new SpelParseException ( int >> NUMBER , java.lang.NumberFormatException , SpelMessage . NOT_AN_INTEGER , java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.expression.spel.ast.Literal org.springframework.expression.spel.ast.Literal ( java.lang.String java.lang.String , int int , int int ) { try { long long = java.lang.Long . long ( java.lang.String , int ) ; return new LongLiteral ( java.lang.String , int , long ) ; } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { throw new InternalParseException ( new SpelParseException ( int >> NUMBER , java.lang.NumberFormatException , SpelMessage . NOT_A_LONG , java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.expression.spel.ast.Literal org.springframework.expression.spel.ast.Literal ( java.lang.String java.lang.String , int int , boolean boolean ) { try { if ( boolean ) { float float = java.lang.Float . float ( java.lang.String ) ; return new FloatLiteral ( java.lang.String , int , float ) ; } else { double double = java.lang.Double . double ( java.lang.String ) ; return new RealLiteral ( java.lang.String , int , double ) ; } } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { throw new InternalParseException ( new SpelParseException ( int >> NUMBER , java.lang.NumberFormatException , SpelMessage . NOT_A_REAL , java.lang.String ) ) ; } }  <METHOD_END>
