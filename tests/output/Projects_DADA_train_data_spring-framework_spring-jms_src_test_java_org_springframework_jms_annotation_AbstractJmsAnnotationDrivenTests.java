<METHOD_START> @ Test public abstract void void ( )  <METHOD_END>
<METHOD_START> @ Test public abstract void void ( )  <METHOD_END>
<METHOD_START> @ Test public abstract void void ( )  <METHOD_END>
<METHOD_START> @ Test public abstract void void ( )  <METHOD_END>
<METHOD_START> @ Test public abstract void void ( )  <METHOD_END>
<METHOD_START> @ Test public abstract void void ( )  <METHOD_END>
<METHOD_START> @ Test public abstract void void ( ) org.springframework.jms.annotation.JMSException ;  <METHOD_END>
<METHOD_START> @ Test public abstract void void ( )  <METHOD_END>
<METHOD_START> @ Test public abstract void void ( )  <METHOD_END>
<METHOD_START> public void void ( ApplicationContext org.springframework.jms.annotation.ApplicationContext ) { JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = org.springframework.jms.annotation.ApplicationContext . getBean ( STRING , JmsListenerContainerTestFactory .class ) ; JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = org.springframework.jms.annotation.ApplicationContext . getBean ( STRING , JmsListenerContainerTestFactory .class ) ; assertEquals ( NUMBER , org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ApplicationContext org.springframework.jms.annotation.ApplicationContext ) { JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = org.springframework.jms.annotation.ApplicationContext . getBean ( STRING , JmsListenerContainerTestFactory .class ) ; assertEquals ( NUMBER , org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . size ( ) ) ; MethodJmsListenerEndpoint org.springframework.jms.annotation.MethodJmsListenerEndpoint = ( MethodJmsListenerEndpoint ) org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . get ( NUMBER ) . getEndpoint ( ) ; assertEquals ( STRING , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getId ( ) ) ; assertEquals ( STRING , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getDestination ( ) ) ; assertEquals ( STRING , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getSelector ( ) ) ; assertEquals ( STRING , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getSubscription ( ) ) ; assertEquals ( STRING , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getConcurrency ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.jms.annotation.MethodJmsListenerEndpoint . getClass ( ) , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; java.lang.Object java.lang.Object = ReflectionUtils . invokeMethod ( java.lang.reflect.Method , org.springframework.jms.annotation.MethodJmsListenerEndpoint ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void void ( ApplicationContext org.springframework.jms.annotation.ApplicationContext ) { JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = org.springframework.jms.annotation.ApplicationContext . getBean ( STRING , JmsListenerContainerTestFactory .class ) ; JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = org.springframework.jms.annotation.ApplicationContext . getBean ( STRING , JmsListenerContainerTestFactory .class ) ; assertEquals ( NUMBER , org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . size ( ) ) ; JmsListenerEndpoint org.springframework.jms.annotation.JmsListenerEndpoint = org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . get ( NUMBER ) . getEndpoint ( ) ; assertEquals ( STRING , SimpleJmsListenerEndpoint .class , org.springframework.jms.annotation.JmsListenerEndpoint . getClass ( ) ) ; assertEquals ( STRING , org.springframework.jms.annotation.ApplicationContext . getBean ( STRING ) , ( ( SimpleJmsListenerEndpoint ) org.springframework.jms.annotation.JmsListenerEndpoint ) . getMessageListener ( ) ) ; JmsListenerEndpointRegistry org.springframework.jms.annotation.JmsListenerEndpointRegistry = org.springframework.jms.annotation.ApplicationContext . getBean ( STRING , JmsListenerEndpointRegistry .class ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.annotation.JmsListenerEndpointRegistry . getListenerContainerIds ( ) . size ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.annotation.JmsListenerEndpointRegistry . getListenerContainers ( ) . size ( ) ) ; assertNotNull ( STRING , org.springframework.jms.annotation.JmsListenerEndpointRegistry . getListenerContainer ( STRING ) ) ; assertNotNull ( STRING , org.springframework.jms.annotation.JmsListenerEndpointRegistry . getListenerContainer ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ApplicationContext org.springframework.jms.annotation.ApplicationContext ) { JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = org.springframework.jms.annotation.ApplicationContext . getBean ( STRING , JmsListenerContainerTestFactory .class ) ; assertEquals ( NUMBER , org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ApplicationContext org.springframework.jms.annotation.ApplicationContext ) { JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = org.springframework.jms.annotation.ApplicationContext . getBean ( STRING , JmsListenerContainerTestFactory .class ) ; assertEquals ( NUMBER , org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ApplicationContext org.springframework.jms.annotation.ApplicationContext ) throws org.springframework.jms.annotation.JMSException { JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = org.springframework.jms.annotation.ApplicationContext . getBean ( STRING , JmsListenerContainerTestFactory .class ) ; assertEquals ( NUMBER , org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . size ( ) ) ; MethodJmsListenerEndpoint org.springframework.jms.annotation.MethodJmsListenerEndpoint = ( MethodJmsListenerEndpoint ) org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . get ( NUMBER ) . getEndpoint ( ) ; SimpleMessageListenerContainer org.springframework.jms.annotation.SimpleMessageListenerContainer = new SimpleMessageListenerContainer ( ) ; org.springframework.jms.annotation.MethodJmsListenerEndpoint . setupListenerContainer ( org.springframework.jms.annotation.SimpleMessageListenerContainer ) ; MessagingMessageListenerAdapter org.springframework.jms.annotation.MessagingMessageListenerAdapter = ( MessagingMessageListenerAdapter ) org.springframework.jms.annotation.SimpleMessageListenerContainer . getMessageListener ( ) ; org.springframework.jms.annotation.MessagingMessageListenerAdapter . onMessage ( new StubTextMessage ( STRING ) , mock ( Session .class ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ApplicationContext org.springframework.jms.annotation.ApplicationContext ) { JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = org.springframework.jms.annotation.ApplicationContext . getBean ( STRING , JmsListenerContainerTestFactory .class ) ; assertEquals ( NUMBER , org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . size ( ) ) ; MethodJmsListenerEndpoint org.springframework.jms.annotation.MethodJmsListenerEndpoint = ( MethodJmsListenerEndpoint ) org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainer ( STRING ) . getEndpoint ( ) ; assertEquals ( STRING , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getId ( ) ) ; assertEquals ( STRING , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getDestination ( ) ) ; assertEquals ( null , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getConcurrency ( ) ) ; MethodJmsListenerEndpoint org.springframework.jms.annotation.MethodJmsListenerEndpoint = ( MethodJmsListenerEndpoint ) org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainer ( STRING ) . getEndpoint ( ) ; assertEquals ( STRING , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getId ( ) ) ; assertEquals ( STRING , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getDestination ( ) ) ; assertEquals ( STRING , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getConcurrency ( ) ) ; }  <METHOD_END>
<METHOD_START> @ JmsListener ( destination = STRING ) public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ JmsListener ( containerFactory = STRING , destination = STRING ) public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ JmsListener ( id = STRING , containerFactory = STRING , destination = STRING , selector = STRING , subscription = STRING , concurrency = STRING ) @ SendTo ( STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ JmsListener ( id = STRING , containerFactory = STRING , destination = STRING , selector = STRING , subscription = STRING , concurrency = STRING ) @ SendTo ( STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ JmsListener ( id = STRING , containerFactory = STRING , destination = STRING ) public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ JmsListener ( destination = STRING ) public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ JmsListener ( containerFactory = STRING , destination = STRING ) public void void ( @ Validated java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ JmsListener ( id = STRING , destination = STRING ) @ JmsListener ( id = STRING , destination = STRING , concurrency = STRING ) public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ JmsListeners ( { @ JmsListener ( id = STRING , destination = STRING ) , @ JmsListener ( id = STRING , destination = STRING , concurrency = STRING ) } ) public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.String .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.jms.annotation.Errors ) { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jms.annotation.Errors . reject ( STRING ) ; } }  <METHOD_END>
