<METHOD_START> @ Before public void void ( ) java.io.IOException { org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> = new SourceHttpMessageConverter <> ( ) ; Resource org.springframework.http.converter.xml.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.http.converter.xml.SourceHttpMessageConverterTests> ( ) ) ; java.lang.String = STRING + STRING + STRING + org.springframework.http.converter.xml.Resource . getURI ( ) + STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . canRead ( javax.xml.transform.Source .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . canRead ( javax.xml.transform.Source .class , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . canWrite ( javax.xml.transform.Source .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . canWrite ( javax.xml.transform.Source .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . canWrite ( javax.xml.transform.Source .class , MediaType . ALL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.xml.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; javax.xml.transform.dom.DOMSource javax.xml.transform.dom.DOMSource = ( javax.xml.transform.dom.DOMSource ) org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . read ( javax.xml.transform.dom.DOMSource .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; org.w3c.dom.Document org.w3c.dom.Document = ( org.w3c.dom.Document ) javax.xml.transform.dom.DOMSource . org.w3c.dom.Node ( ) ; assertEquals ( STRING , STRING , org.w3c.dom.Document . org.w3c.dom.Element ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.xml.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . setSupportDtd ( true ) ; javax.xml.transform.dom.DOMSource javax.xml.transform.dom.DOMSource = ( javax.xml.transform.dom.DOMSource ) org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . read ( javax.xml.transform.dom.DOMSource .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; org.w3c.dom.Document org.w3c.dom.Document = ( org.w3c.dom.Document ) javax.xml.transform.dom.DOMSource . org.w3c.dom.Node ( ) ; assertEquals ( STRING , STRING , org.w3c.dom.Document . org.w3c.dom.Element ( ) . java.lang.String ( ) ) ; assertNotEquals ( STRING , STRING , org.w3c.dom.Document . org.w3c.dom.Element ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ; MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; this . org.springframework.http.converter.xml.ExpectedException . expect ( HttpMessageNotReadableException .class ) ; this . org.springframework.http.converter.xml.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . read ( javax.xml.transform.dom.DOMSource .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.xml.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; javax.xml.transform.sax.SAXSource javax.xml.transform.sax.SAXSource = ( javax.xml.transform.sax.SAXSource ) org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . read ( javax.xml.transform.sax.SAXSource .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; org.xml.sax.InputSource org.xml.sax.InputSource = javax.xml.transform.sax.SAXSource . org.xml.sax.InputSource ( ) ; java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.InputStreamReader ( org.xml.sax.InputSource . java.io.InputStream ( ) ) ) ; assertThat ( STRING , java.lang.String , isSimilarTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.xml.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . setSupportDtd ( true ) ; javax.xml.transform.sax.SAXSource javax.xml.transform.sax.SAXSource = ( javax.xml.transform.sax.SAXSource ) org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . read ( javax.xml.transform.sax.SAXSource .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; org.xml.sax.InputSource org.xml.sax.InputSource = javax.xml.transform.sax.SAXSource . org.xml.sax.InputSource ( ) ; org.xml.sax.XMLReader org.xml.sax.XMLReader = javax.xml.transform.sax.SAXSource . org.xml.sax.XMLReader ( ) ; org.xml.sax.XMLReader . void ( new org.xml.sax.helpers.DefaultHandler ( ) { @ java.lang.Override public void void ( char [] char[] , int int , int int ) throws org.xml.sax.SAXException { java.lang.String java.lang.String = new java.lang.String ( char[] , int , int ) ; assertNotEquals ( STRING , STRING , java.lang.String ) ; } } ) ; org.xml.sax.XMLReader . void ( org.xml.sax.InputSource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( char [] char[] , int int , int int ) throws org.xml.sax.SAXException { java.lang.String java.lang.String = new java.lang.String ( char[] , int , int ) ; assertNotEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ; MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; javax.xml.transform.sax.SAXSource javax.xml.transform.sax.SAXSource = ( javax.xml.transform.sax.SAXSource ) this . org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . read ( javax.xml.transform.sax.SAXSource .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; this . org.springframework.http.converter.xml.ExpectedException . expect ( org.xml.sax.SAXException .class ) ; this . org.springframework.http.converter.xml.ExpectedException . expectMessage ( STRING ) ; org.xml.sax.InputSource org.xml.sax.InputSource = javax.xml.transform.sax.SAXSource . org.xml.sax.InputSource ( ) ; org.xml.sax.XMLReader org.xml.sax.XMLReader = javax.xml.transform.sax.SAXSource . org.xml.sax.XMLReader ( ) ; org.xml.sax.XMLReader . void ( org.xml.sax.InputSource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.xml.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; javax.xml.transform.stax.StAXSource javax.xml.transform.stax.StAXSource = ( javax.xml.transform.stax.StAXSource ) org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . read ( javax.xml.transform.stax.StAXSource .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; javax.xml.stream.XMLStreamReader javax.xml.stream.XMLStreamReader = javax.xml.transform.stax.StAXSource . javax.xml.stream.XMLStreamReader ( ) ; assertTrue ( javax.xml.stream.XMLStreamReader . boolean ( ) ) ; javax.xml.stream.XMLStreamReader . int ( ) ; java.lang.String java.lang.String = javax.xml.stream.XMLStreamReader . java.lang.String ( ) ; assertEquals ( STRING , java.lang.String ) ; java.lang.String = javax.xml.stream.XMLStreamReader . java.lang.String ( ) ; assertEquals ( STRING , java.lang.String ) ; javax.xml.stream.XMLStreamReader . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.xml.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . setSupportDtd ( true ) ; javax.xml.transform.stax.StAXSource javax.xml.transform.stax.StAXSource = ( javax.xml.transform.stax.StAXSource ) org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . read ( javax.xml.transform.stax.StAXSource .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; javax.xml.stream.XMLStreamReader javax.xml.stream.XMLStreamReader = javax.xml.transform.stax.StAXSource . javax.xml.stream.XMLStreamReader ( ) ; assertTrue ( javax.xml.stream.XMLStreamReader . boolean ( ) ) ; javax.xml.stream.XMLStreamReader . int ( ) ; javax.xml.stream.XMLStreamReader . int ( ) ; java.lang.String java.lang.String = javax.xml.stream.XMLStreamReader . java.lang.String ( ) ; assertEquals ( STRING , java.lang.String ) ; try { java.lang.String = javax.xml.stream.XMLStreamReader . java.lang.String ( ) ; assertNotEquals ( STRING , java.lang.String ) ; } catch ( javax.xml.stream.XMLStreamException javax.xml.stream.XMLStreamException ) { } javax.xml.stream.XMLStreamReader . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ; MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; javax.xml.transform.stax.StAXSource javax.xml.transform.stax.StAXSource = ( javax.xml.transform.stax.StAXSource ) this . org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . read ( javax.xml.transform.stax.StAXSource .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; javax.xml.stream.XMLStreamReader javax.xml.stream.XMLStreamReader = javax.xml.transform.stax.StAXSource . javax.xml.stream.XMLStreamReader ( ) ; assertTrue ( javax.xml.stream.XMLStreamReader . boolean ( ) ) ; javax.xml.stream.XMLStreamReader . int ( ) ; javax.xml.stream.XMLStreamReader . int ( ) ; java.lang.String java.lang.String = javax.xml.stream.XMLStreamReader . java.lang.String ( ) ; assertEquals ( STRING , java.lang.String ) ; this . org.springframework.http.converter.xml.ExpectedException . expectMessage ( STRING ) ; java.lang.String = javax.xml.stream.XMLStreamReader . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.xml.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; javax.xml.transform.stream.StreamSource javax.xml.transform.stream.StreamSource = ( javax.xml.transform.stream.StreamSource ) org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . read ( javax.xml.transform.stream.StreamSource .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.InputStreamReader ( javax.xml.transform.stream.StreamSource . java.io.InputStream ( ) ) ) ; assertThat ( STRING , java.lang.String , isSimilarTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.xml.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . read ( javax.xml.transform.Source .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) ; javax.xml.parsers.DocumentBuilderFactory . void ( true ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilder ( ) . org.w3c.dom.Document ( ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING ) ; org.w3c.dom.Document . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Element . void ( STRING ) ; javax.xml.transform.dom.DOMSource javax.xml.transform.dom.DOMSource = new javax.xml.transform.dom.DOMSource ( org.w3c.dom.Document ) ; MockHttpOutputMessage org.springframework.http.converter.xml.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . write ( javax.xml.transform.dom.DOMSource , null , org.springframework.http.converter.xml.MockHttpOutputMessage ) ; assertThat ( STRING , org.springframework.http.converter.xml.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , isSimilarTo ( STRING ) ) ; assertEquals ( STRING , new MediaType ( STRING , STRING ) , org.springframework.http.converter.xml.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.xml.MockHttpOutputMessage . getBodyAsBytes ( ) . length , org.springframework.http.converter.xml.MockHttpOutputMessage . getHeaders ( ) . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; javax.xml.transform.sax.SAXSource javax.xml.transform.sax.SAXSource = new javax.xml.transform.sax.SAXSource ( new org.xml.sax.InputSource ( new java.io.StringReader ( java.lang.String ) ) ) ; MockHttpOutputMessage org.springframework.http.converter.xml.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . write ( javax.xml.transform.sax.SAXSource , null , org.springframework.http.converter.xml.MockHttpOutputMessage ) ; assertThat ( STRING , org.springframework.http.converter.xml.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , isSimilarTo ( STRING ) ) ; assertEquals ( STRING , new MediaType ( STRING , STRING ) , org.springframework.http.converter.xml.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; javax.xml.transform.stream.StreamSource javax.xml.transform.stream.StreamSource = new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( java.lang.String ) ) ; MockHttpOutputMessage org.springframework.http.converter.xml.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.xml.SourceHttpMessageConverter<javax.xml.transform.Source> . write ( javax.xml.transform.stream.StreamSource , null , org.springframework.http.converter.xml.MockHttpOutputMessage ) ; assertThat ( STRING , org.springframework.http.converter.xml.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , isSimilarTo ( STRING ) ) ; assertEquals ( STRING , new MediaType ( STRING , STRING ) , org.springframework.http.converter.xml.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
