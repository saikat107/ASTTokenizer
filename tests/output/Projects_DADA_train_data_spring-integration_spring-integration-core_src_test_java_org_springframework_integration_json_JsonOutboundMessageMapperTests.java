<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.json.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; JsonOutboundMessageMapper org.springframework.integration.json.JsonOutboundMessageMapper = new JsonOutboundMessageMapper ( ) ; java.lang.String java.lang.String = org.springframework.integration.json.JsonOutboundMessageMapper . fromMessage ( org.springframework.integration.json.Message<java.lang.String> ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING + org.springframework.integration.json.Message<java.lang.String> . getHeaders ( ) . getTimestamp ( ) ) ) ; assertTrue ( java.lang.String . boolean ( STRING + org.springframework.integration.json.Message<java.lang.String> . getHeaders ( ) . getId ( ) + STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.json.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.json.Message<java.lang.String> = MessageHistory . write ( org.springframework.integration.json.Message<java.lang.String> , new org.springframework.integration.json.JsonOutboundMessageMapperTests.TestNamedComponent ( NUMBER ) ) ; org.springframework.integration.json.Message<java.lang.String> = MessageHistory . write ( org.springframework.integration.json.Message<java.lang.String> , new org.springframework.integration.json.JsonOutboundMessageMapperTests.TestNamedComponent ( NUMBER ) ) ; org.springframework.integration.json.Message<java.lang.String> = MessageHistory . write ( org.springframework.integration.json.Message<java.lang.String> , new org.springframework.integration.json.JsonOutboundMessageMapperTests.TestNamedComponent ( NUMBER ) ) ; JsonOutboundMessageMapper org.springframework.integration.json.JsonOutboundMessageMapper = new JsonOutboundMessageMapper ( ) ; java.lang.String java.lang.String = org.springframework.integration.json.JsonOutboundMessageMapper . fromMessage ( org.springframework.integration.json.Message<java.lang.String> ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING + org.springframework.integration.json.Message<java.lang.String> . getHeaders ( ) . getTimestamp ( ) ) ) ; assertTrue ( java.lang.String . boolean ( STRING + org.springframework.integration.json.Message<java.lang.String> . getHeaders ( ) . getId ( ) + STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.json.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; java.lang.String java.lang.String = STRING ; JsonOutboundMessageMapper org.springframework.integration.json.JsonOutboundMessageMapper = new JsonOutboundMessageMapper ( ) ; org.springframework.integration.json.JsonOutboundMessageMapper . setShouldExtractPayload ( true ) ; java.lang.String java.lang.String = org.springframework.integration.json.JsonOutboundMessageMapper . fromMessage ( org.springframework.integration.json.Message<java.lang.String> ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.integration.json.TestBean = new TestBean ( ) ; Message < TestBean > org.springframework.integration.json.Message<org.springframework.integration.json.TestBean> = MessageBuilder . withPayload ( org.springframework.integration.json.TestBean ) . build ( ) ; JsonOutboundMessageMapper org.springframework.integration.json.JsonOutboundMessageMapper = new JsonOutboundMessageMapper ( ) ; java.lang.String java.lang.String = org.springframework.integration.json.JsonOutboundMessageMapper . fromMessage ( org.springframework.integration.json.Message<org.springframework.integration.json.TestBean> ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING + org.springframework.integration.json.Message<org.springframework.integration.json.TestBean> . getHeaders ( ) . getTimestamp ( ) ) ) ; assertTrue ( java.lang.String . boolean ( STRING + org.springframework.integration.json.Message<org.springframework.integration.json.TestBean> . getHeaders ( ) . getId ( ) + STRING ) ) ; TestBean org.springframework.integration.json.TestBean = org.springframework.integration.json.TestBean ( java.lang.String ) ; assertEquals ( org.springframework.integration.json.TestBean , org.springframework.integration.json.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.integration.json.TestBean = new TestBean ( ) ; Message < TestBean > org.springframework.integration.json.Message<org.springframework.integration.json.TestBean> = MessageBuilder . withPayload ( org.springframework.integration.json.TestBean ) . build ( ) ; JsonOutboundMessageMapper org.springframework.integration.json.JsonOutboundMessageMapper = new JsonOutboundMessageMapper ( ) ; org.springframework.integration.json.JsonOutboundMessageMapper . setShouldExtractPayload ( true ) ; java.lang.String java.lang.String = org.springframework.integration.json.JsonOutboundMessageMapper . fromMessage ( org.springframework.integration.json.Message<org.springframework.integration.json.TestBean> ) ; assertTrue ( ! java.lang.String . boolean ( STRING ) ) ; TestBean org.springframework.integration.json.TestBean = org.springframework.integration.json.ObjectMapper . readValue ( java.lang.String , TestBean .class ) ; assertEquals ( org.springframework.integration.json.TestBean , org.springframework.integration.json.TestBean ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.json.TestBean org.springframework.integration.json.TestBean ( java.lang.String java.lang.String ) throws java.io.IOException { JsonParser org.springframework.integration.json.JsonParser = org.springframework.integration.json.JsonFactory . createParser ( java.lang.String ) ; do { org.springframework.integration.json.JsonParser . nextToken ( ) ; } while ( org.springframework.integration.json.JsonParser . getCurrentToken ( ) != JsonToken . FIELD_NAME || ! org.springframework.integration.json.JsonParser . getCurrentName ( ) . equals ( STRING ) ); org.springframework.integration.json.JsonParser . nextToken ( ) ; return org.springframework.integration.json.ObjectMapper . readValue ( org.springframework.integration.json.JsonParser , TestBean .class ) ; }  <METHOD_END>
<METHOD_START> void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . int ; }  <METHOD_END>
