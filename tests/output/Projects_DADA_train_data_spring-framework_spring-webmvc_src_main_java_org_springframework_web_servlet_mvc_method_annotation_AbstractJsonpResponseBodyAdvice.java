<METHOD_START> protected void ( java.lang.String ... java.lang.String[] ) { Assert . isTrue ( ! ObjectUtils . isEmpty ( java.lang.String[] ) , STRING ) ; this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MappingJacksonValue org.springframework.web.servlet.mvc.method.annotation.MappingJacksonValue , MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ServerHttpRequest org.springframework.web.servlet.mvc.method.annotation.ServerHttpRequest , ServerHttpResponse org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse ) { HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest = ( ( ServletServerHttpRequest ) org.springframework.web.servlet.mvc.method.annotation.ServerHttpRequest ) . getServletRequest ( ) ; for ( java.lang.String java.lang.String : this . java.lang.String[] ) { java.lang.String java.lang.String = org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . getParameter ( java.lang.String ) ; if ( java.lang.String != null ) { if ( ! boolean ( java.lang.String ) ) { if ( org.springframework.web.servlet.mvc.method.annotation.Log . isDebugEnabled ( ) ) { org.springframework.web.servlet.mvc.method.annotation.Log . debug ( STRING + java.lang.String ) ; } continue; } MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType = org.springframework.web.servlet.mvc.method.annotation.MediaType ( org.springframework.web.servlet.mvc.method.annotation.MediaType , org.springframework.web.servlet.mvc.method.annotation.ServerHttpRequest , org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse ) ; org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse . getHeaders ( ) . setContentType ( org.springframework.web.servlet.mvc.method.annotation.MediaType ) ; org.springframework.web.servlet.mvc.method.annotation.MappingJacksonValue . setJsonpFunction ( java.lang.String ) ; break; } } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { return java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType ( MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType , ServerHttpRequest org.springframework.web.servlet.mvc.method.annotation.ServerHttpRequest , ServerHttpResponse org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse ) { return new MediaType ( STRING , STRING ) ; }  <METHOD_END>
