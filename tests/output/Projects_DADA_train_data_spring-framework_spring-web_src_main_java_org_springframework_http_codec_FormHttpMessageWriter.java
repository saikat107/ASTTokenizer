<METHOD_START> public void void ( java.nio.charset.Charset java.nio.charset.Charset ) { Assert . notNull ( java.nio.charset.Charset , STRING ) ; this . java.nio.charset.Charset = java.nio.charset.Charset ; }  <METHOD_END>
<METHOD_START> public java.nio.charset.Charset java.nio.charset.Charset ( ) { return this . java.nio.charset.Charset ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ResolvableType org.springframework.http.codec.ResolvableType , MediaType org.springframework.http.codec.MediaType ) { return org.springframework.http.codec.ResolvableType . isAssignableFrom ( org.springframework.http.codec.ResolvableType ) && ( org.springframework.http.codec.MediaType == null || MediaType . APPLICATION_FORM_URLENCODED . isCompatibleWith ( org.springframework.http.codec.MediaType ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.codec.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.codec.Mono<java.lang.Void> ( Publisher < ? extends MultiValueMap < java.lang.String , java.lang.String > > org.springframework.http.codec.Publisher<? extends org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String>> , ResolvableType org.springframework.http.codec.ResolvableType , MediaType org.springframework.http.codec.MediaType , ReactiveHttpOutputMessage org.springframework.http.codec.ReactiveHttpOutputMessage , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { MediaType org.springframework.http.codec.MediaType = org.springframework.http.codec.ReactiveHttpOutputMessage . getHeaders ( ) . getContentType ( ) ; if ( org.springframework.http.codec.MediaType == null ) { org.springframework.http.codec.MediaType = MediaType . APPLICATION_FORM_URLENCODED ; org.springframework.http.codec.ReactiveHttpOutputMessage . getHeaders ( ) . setContentType ( org.springframework.http.codec.MediaType ) ; } java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.Charset ( org.springframework.http.codec.MediaType ) ; return Flux . from ( org.springframework.http.codec.Publisher<> ) . single ( ) . map ( form -> generateForm ( form , charset ) ) . then ( value -> { ByteBuffer byteBuffer = charset . encode ( value ) ; DataBuffer buffer = message . bufferFactory ( ) . wrap ( byteBuffer ) ; message . getHeaders ( ) . setContentLength ( byteBuffer . remaining ( ) ) ; return message . writeWith ( Mono . just ( buffer ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> private java.nio.charset.Charset java.nio.charset.Charset ( MediaType org.springframework.http.codec.MediaType ) { if ( org.springframework.http.codec.MediaType != null && org.springframework.http.codec.MediaType . getCharset ( ) != null ) { return org.springframework.http.codec.MediaType . getCharset ( ) ; } else { return java.nio.charset.Charset ( ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> , java.nio.charset.Charset java.nio.charset.Charset ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; try { for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> . keySet ( ) . iterator ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ;) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) . iterator ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ;) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.net.URLEncoder . java.lang.String ( java.lang.String , java.nio.charset.Charset . java.lang.String ( ) ) ) ; if ( java.lang.String != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( '=' ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.net.URLEncoder . java.lang.String ( java.lang.String , java.nio.charset.Charset . java.lang.String ( ) ) ) ; if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( '&' ) ; } } } if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( '&' ) ; } } } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new java.lang.IllegalStateException ( java.io.UnsupportedEncodingException ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.http.codec.MediaType> < MediaType > java.util.List<org.springframework.http.codec.MediaType> ( ) { return java.util.Collections . java.util.List ( MediaType . APPLICATION_FORM_URLENCODED ) ; }  <METHOD_END>
