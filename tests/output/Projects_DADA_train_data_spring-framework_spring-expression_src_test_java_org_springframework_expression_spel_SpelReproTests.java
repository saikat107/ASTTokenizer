<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.Spr5899Class ( ) ) ; Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( null , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; try { org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; fail ( STRING ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { } org.springframework.expression.spel.StandardEvaluationContext . setTypeLocator ( new org.springframework.expression.spel.SpelReproTests.MyTypeLocator ( ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws org.springframework.expression.spel.EvaluationException { if ( java.lang.String . boolean ( STRING ) ) { return org.springframework.expression.spel.SpelReproTests.Spr5899Class .class ; } if ( java.lang.String . boolean ( STRING ) ) { return org.springframework.expression.spel.SpelReproTests.Outer .class ; } return super. findType ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.Integer java.lang.Integer ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.Integer java.lang.Integer , java.lang.String ... java.lang.String[] ) {		}  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( java.lang.Integer java.lang.Integer ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( int int ) { return new java.lang.Integer ( int ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer , java.lang.String ... java.lang.String[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( java.lang.String == null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.Spr5899Class ( ) ) ; Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( java.util.Map . java.util.Map.Entry .class , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {			}  <METHOD_END>
<METHOD_START> public static int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.SpelReproTests.MapAccessor ( ) ) ; Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.TestProperties ( ) ) ; java.lang.String java.lang.String = null ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.SpelReproTests.MapAccessor ( ) ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.SpelReproTests.MapAccessor ( ) ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.SpelReproTests.MapAccessor ( ) ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> void ( ) { java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class<?> < ? > [] { java.util.Map .class } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return ( ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return new TypedValue ( ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . get ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.AccessException { ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object ) . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ParserContext org.springframework.expression.spel.ParserContext = TemplateExpressionParsingTests . HASH_DELIMITED_PARSER_CONTEXT ; ParserContext org.springframework.expression.spel.ParserContext = TemplateExpressionParsingTests . DEFAULT_TEMPLATE_PARSER_CONTEXT ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , org.springframework.expression.spel.ParserContext , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , org.springframework.expression.spel.ParserContext , STRING ) ; void ( STRING , org.springframework.expression.spel.ParserContext , STRING ) ; void ( STRING , org.springframework.expression.spel.ParserContext , STRING ) ; void ( STRING , org.springframework.expression.spel.ParserContext , STRING ) ; void ( STRING , org.springframework.expression.spel.ParserContext , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.expression.spel.AccessException { PropertyAccessor org.springframework.expression.spel.PropertyAccessor = new ReflectivePropertyAccessor ( ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = TestScenarioCreator . getTestEvaluationContext ( ) ; assertFalse ( org.springframework.expression.spel.PropertyAccessor . canRead ( org.springframework.expression.spel.EvaluationContext , null , STRING ) ) ; assertFalse ( org.springframework.expression.spel.PropertyAccessor . canWrite ( org.springframework.expression.spel.EvaluationContext , null , STRING ) ) ; try { org.springframework.expression.spel.PropertyAccessor . read ( org.springframework.expression.spel.EvaluationContext , null , STRING ) ; fail ( STRING ) ; } catch ( AccessException org.springframework.expression.spel.AccessException ) { } try { org.springframework.expression.spel.PropertyAccessor . write ( org.springframework.expression.spel.EvaluationContext , null , STRING , STRING ) ; fail ( STRING ) ; } catch ( AccessException org.springframework.expression.spel.AccessException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.Foo ( ) ) ; Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> void ( ) { this . org.springframework.expression.spel.SpelReproTests.Resource = new org.springframework.expression.spel.SpelReproTests.Resource ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.SpelReproTests.Resource org.springframework.expression.spel.SpelReproTests.Resource ( ) { return org.springframework.expression.spel.SpelReproTests.Resource ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.Goo ( ) ) ; java.lang.String java.lang.String = null ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.Goo ( ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , STRING ) ; java.lang.String java.lang.String = null ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.SpelReproTests.Holder org.springframework.expression.spel.SpelReproTests.Holder = new org.springframework.expression.spel.SpelReproTests.Holder ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.SpelReproTests.Holder ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.SpelReproTests.MapAccessor ( ) ) ; org.springframework.expression.spel.SpelReproTests.Holder . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.expression.spel.SpelReproTests.Holder . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.expression.spel.SpelReproTests.Holder . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.expression.spel.SpelReproTests.Holder . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.expression.spel.SpelReproTests.Holder . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.expression.spel.SpelReproTests.Holder . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.lang.String java.lang.String = null ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.Goo ( ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , STRING ) ; java.lang.String java.lang.String = null ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.SpelReproTests.Goo org.springframework.expression.spel.SpelReproTests.Goo = org.springframework.expression.spel.SpelReproTests.Goo . org.springframework.expression.spel.SpelReproTests.Goo ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.SpelReproTests.Goo ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , STRING ) ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelReproTests.Goo . java.lang.String ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelReproTests.Goo . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.SpelReproTests.Goo org.springframework.expression.spel.SpelReproTests.Goo = org.springframework.expression.spel.SpelReproTests.Goo . org.springframework.expression.spel.SpelReproTests.Goo ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.SpelReproTests.Goo ) ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelReproTests.Goo . java.lang.String ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelReproTests.Goo . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.XX ( ) ) ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.XX ( ) ) ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.lang.Exception { void ( java.lang.String , TemplateExpressionParsingTests . DEFAULT_TEMPLATE_PARSER_CONTEXT , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , ParserContext org.springframework.expression.spel.ParserContext , java.lang.String java.lang.String ) throws java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( java.lang.String , org.springframework.expression.spel.ParserContext ) ; assertEquals ( java.lang.String , org.springframework.expression.spel.Expression . getValue ( TestScenarioCreator . getTestEvaluationContext ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.lang.Exception { void ( java.lang.String , TemplateExpressionParsingTests . DEFAULT_TEMPLATE_PARSER_CONTEXT , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , ParserContext org.springframework.expression.spel.ParserContext , java.lang.String java.lang.String ) throws java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; try { org.springframework.expression.spel.SpelExpressionParser . parseExpression ( java.lang.String , org.springframework.expression.spel.ParserContext ) ; fail ( STRING + java.lang.String ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.String java.lang.String = java.lang.Exception . java.lang.String ( ) ; if ( java.lang.Exception instanceof ExpressionException ) { java.lang.String = ( ( ExpressionException ) java.lang.Exception ) . getSimpleMessage ( ) ; } if ( ! java.lang.String . boolean ( java.lang.String ) ) { java.lang.Exception . void ( ) ; } assertThat ( java.lang.String , equalTo ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { java.lang.System . java.io.PrintStream . void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.XX ( ) ) ; Expression org.springframework.expression.spel.Expression = null ; try { org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( SpelMessage . NO_BEAN_RESOLVER_REGISTERED , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelEvaluationException . getInserts ( ) [ NUMBER ] ) ; } org.springframework.expression.spel.StandardEvaluationContext . setBeanResolver ( new org.springframework.expression.spel.SpelReproTests.MyBeanResolver ( ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( null , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; try { assertEquals ( null , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( SpelMessage . EXCEPTION_DURING_BEAN_RESOLUTION , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelEvaluationException . getInserts ( ) [ NUMBER ] ) ; assertTrue ( org.springframework.expression.spel.SpelEvaluationException . getCause ( ) instanceof AccessException ) ; assertTrue ( org.springframework.expression.spel.SpelEvaluationException . getCause ( ) . getMessage ( ) . startsWith ( STRING ) ) ; } org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ) ; try { org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ) ; } catch ( SpelParseException org.springframework.expression.spel.SpelParseException ) { assertEquals ( SpelMessage . INVALID_BEAN_REFERENCE , org.springframework.expression.spel.SpelParseException . getMessageCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { if ( java.lang.String . boolean ( STRING ) ) { return STRING ; } else if ( java.lang.String . boolean ( STRING ) ) { return STRING ; } else if ( java.lang.String . boolean ( STRING ) ) { return STRING ; } else if ( java.lang.String . boolean ( STRING ) ) { throw new AccessException ( STRING ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.XX ( ) ) ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( null , org.springframework.expression.spel.Expression . getValue ( ) ) ; try { org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( SpelMessage . TYPE_CONVERSION_ERROR , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( null , org.springframework.expression.spel.Expression . getValue ( ) ) ; try { org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( SpelMessage . SETVALUE_NOT_SUPPORTED , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( java.util.Map<java.lang.String,java.lang.Object> ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; java.lang.String java.lang.String = STRING ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.Object ) ; java.lang.String java.lang.String = STRING ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( java.lang.String ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.C ( ) ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; java.lang.String java.lang.String = STRING ; SpelExpression org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( java.lang.String ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( java.lang.Boolean .class , java.util.List<> . get ( NUMBER ) . java.lang.Class<? extends java.lang.Object> ( ) ) ; TypeDescriptor org.springframework.expression.spel.TypeDescriptor = org.springframework.expression.spel.SpelExpression . getValueTypeDescriptor ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( null , org.springframework.expression.spel.TypeDescriptor . getElementTypeDescriptor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.C ( ) ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; java.lang.String java.lang.String = STRING ; SpelExpression org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( java.lang.String ) ; java.lang.Object [] java.lang.Object[] = ( java.lang.Object [] ) org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( java.lang.Boolean .class , java.lang.Object[] [ NUMBER ] . java.lang.Class<? extends java.lang.Object> ( ) ) ; TypeDescriptor org.springframework.expression.spel.TypeDescriptor = org.springframework.expression.spel.SpelExpression . getValueTypeDescriptor ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( java.lang.Boolean .class , org.springframework.expression.spel.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.C ( ) ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; java.lang.String java.lang.String = STRING ; SpelExpression org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( java.lang.String ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( java.lang.Boolean .class , java.util.List<> . get ( NUMBER ) . java.lang.Class<? extends java.lang.Object> ( ) ) ; TypeDescriptor org.springframework.expression.spel.TypeDescriptor = org.springframework.expression.spel.SpelExpression . getValueTypeDescriptor ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( null , org.springframework.expression.spel.TypeDescriptor . getElementTypeDescriptor ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.lang.String[] = new java.lang.String [] { STRING , STRING } ; java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String ) { java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.expression.spel.SpelReproTests.D> < org.springframework.expression.spel.SpelReproTests.D > java.util.List<org.springframework.expression.spel.SpelReproTests.D> = new java.util.ArrayList<org.springframework.expression.spel.SpelReproTests.D> <> ( ) ; java.util.List<org.springframework.expression.spel.SpelReproTests.D> . boolean ( new org.springframework.expression.spel.SpelReproTests.D ( STRING ) ) ; java.util.List<org.springframework.expression.spel.SpelReproTests.D> . boolean ( new org.springframework.expression.spel.SpelReproTests.D ( STRING ) ) ; java.util.List<org.springframework.expression.spel.SpelReproTests.D> . boolean ( new org.springframework.expression.spel.SpelReproTests.D ( null ) ) ; java.util.List<org.springframework.expression.spel.SpelReproTests.D> . boolean ( new org.springframework.expression.spel.SpelReproTests.D ( STRING ) ) ; java.util.List<org.springframework.expression.spel.SpelReproTests.D> . boolean ( new org.springframework.expression.spel.SpelReproTests.D ( null ) ) ; java.util.List<org.springframework.expression.spel.SpelReproTests.D> . boolean ( new org.springframework.expression.spel.SpelReproTests.D ( STRING ) ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( java.util.List<org.springframework.expression.spel.SpelReproTests.D> ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; java.lang.String java.lang.String = STRING ; SpelExpression org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; java.lang.String java.lang.String = STRING ; SpelExpression org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; java.lang.String java.lang.String = STRING ; SpelExpression org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class ConversionPriority1 { public int int ( java.lang.Number java.lang.Number ) { return NUMBER ; } public int int ( int int ) { return NUMBER ; } } @ java.lang.SuppressWarnings ( STRING ) class ConversionPriority2 { public int int ( int int ) { return NUMBER ; } public int int ( java.lang.Number java.lang.Number ) { return NUMBER ; } } final java.lang.Integer java.lang.Integer = java.lang.Integer . java.lang.Integer ( NUMBER ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; java.util.List<org.springframework.expression.spel.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.TypeDescriptor> = new java.util.ArrayList<org.springframework.expression.spel.TypeDescriptor> <> ( ) ; java.util.List<org.springframework.expression.spel.TypeDescriptor> . add ( TypeDescriptor . forObject ( new java.lang.Integer ( NUMBER ) ) ) ; ConversionPriority1 target = new ConversionPriority1 ( ) ; MethodExecutor org.springframework.expression.spel.MethodExecutor = new ReflectiveMethodResolver ( true ) . resolve ( org.springframework.expression.spel.EvaluationContext , target , STRING , java.util.List<org.springframework.expression.spel.TypeDescriptor> ) ; final int int = ( java.lang.Integer ) org.springframework.expression.spel.MethodExecutor . execute ( org.springframework.expression.spel.EvaluationContext , target , new java.lang.Integer ( NUMBER ) ) . getValue ( ) ; final int int = target . int ( java.lang.Integer ) ; assertEquals ( int , int ) ; ConversionPriority2 target2 = new ConversionPriority2 ( ) ; MethodExecutor org.springframework.expression.spel.MethodExecutor = new ReflectiveMethodResolver ( true ) . resolve ( org.springframework.expression.spel.EvaluationContext , target2 , STRING , java.util.List<org.springframework.expression.spel.TypeDescriptor> ) ; int int = ( java.lang.Integer ) org.springframework.expression.spel.MethodExecutor . execute ( org.springframework.expression.spel.EvaluationContext , target2 , new java.lang.Integer ( NUMBER ) ) . getValue ( ) ; int int = target2 . int ( java.lang.Integer ) ; assertEquals ( int , int ) ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.Number java.lang.Number ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> public int int ( int int ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> public int int ( int int ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.Number java.lang.Number ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { class WideningPrimitiveConversion { public int int ( long long ) { return NUMBER ; } } final java.lang.Integer java.lang.Integer = java.lang.Integer . java.lang.Integer ( NUMBER ) ; WideningPrimitiveConversion target = new WideningPrimitiveConversion ( ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; java.util.List<org.springframework.expression.spel.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.TypeDescriptor> = new java.util.ArrayList<org.springframework.expression.spel.TypeDescriptor> <> ( ) ; java.util.List<org.springframework.expression.spel.TypeDescriptor> . add ( TypeDescriptor . forObject ( java.lang.Integer ) ) ; MethodExecutor org.springframework.expression.spel.MethodExecutor = new ReflectiveMethodResolver ( true ) . resolve ( org.springframework.expression.spel.EvaluationContext , target , STRING , java.util.List<org.springframework.expression.spel.TypeDescriptor> ) ; final int int = ( java.lang.Integer ) org.springframework.expression.spel.MethodExecutor . execute ( org.springframework.expression.spel.EvaluationContext , target , java.lang.Integer ) . getValue ( ) ; final int int = target . int ( java.lang.Integer ) ; assertEquals ( int , int ) ; }  <METHOD_END>
<METHOD_START> public int int ( long long ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; java.util.List<org.springframework.expression.spel.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.TypeDescriptor> = new java.util.ArrayList<org.springframework.expression.spel.TypeDescriptor> <> ( ) ; java.util.List<org.springframework.expression.spel.TypeDescriptor> . add ( TypeDescriptor . forObject ( NUMBER ) ) ; org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> < java.lang.Integer > org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> = new org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> <> ( ) ; MethodExecutor org.springframework.expression.spel.MethodExecutor = new ReflectiveMethodResolver ( ) . resolve ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , STRING , java.util.List<org.springframework.expression.spel.TypeDescriptor> ) ; java.util.List<org.springframework.expression.spel.TypeDescriptor> . set ( NUMBER , TypeDescriptor . forObject ( NUMBER ) ) ; org.springframework.expression.spel.MethodExecutor = new ReflectiveMethodResolver ( ) . resolve ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , STRING , java.util.List<org.springframework.expression.spel.TypeDescriptor> ) ; org.springframework.expression.spel.MethodExecutor . execute ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , NUMBER ) ; java.util.List<org.springframework.expression.spel.TypeDescriptor> . set ( NUMBER , TypeDescriptor . forObject ( NUMBER ) ) ; org.springframework.expression.spel.MethodExecutor = new ReflectiveMethodResolver ( ) . resolve ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , STRING , java.util.List<org.springframework.expression.spel.TypeDescriptor> ) ; org.springframework.expression.spel.MethodExecutor . execute ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , NUMBER ) ; java.util.List<org.springframework.expression.spel.TypeDescriptor> . set ( NUMBER , TypeDescriptor . forObject ( NUMBER ) ) ; org.springframework.expression.spel.MethodExecutor = new ReflectiveMethodResolver ( ) . resolve ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , STRING , java.util.List<org.springframework.expression.spel.TypeDescriptor> ) ; org.springframework.expression.spel.MethodExecutor . execute ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , NUMBER ) ; java.util.List<org.springframework.expression.spel.TypeDescriptor> . set ( NUMBER , TypeDescriptor . forObject ( ( short ) NUMBER ) ) ; org.springframework.expression.spel.MethodExecutor = new ReflectiveMethodResolver ( ) . resolve ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , STRING , java.util.List<org.springframework.expression.spel.TypeDescriptor> ) ; org.springframework.expression.spel.MethodExecutor . execute ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , ( short ) NUMBER ) ; java.util.List<org.springframework.expression.spel.TypeDescriptor> . set ( NUMBER , TypeDescriptor . forObject ( NUMBER ) ) ; org.springframework.expression.spel.MethodExecutor = new ReflectiveMethodResolver ( ) . resolve ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , STRING , java.util.List<org.springframework.expression.spel.TypeDescriptor> ) ; org.springframework.expression.spel.MethodExecutor . execute ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , NUMBER ) ; java.util.List<org.springframework.expression.spel.TypeDescriptor> . set ( NUMBER , TypeDescriptor . forObject ( ( char ) NUMBER ) ) ; org.springframework.expression.spel.MethodExecutor = new ReflectiveMethodResolver ( ) . resolve ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , STRING , java.util.List<org.springframework.expression.spel.TypeDescriptor> ) ; org.springframework.expression.spel.MethodExecutor . execute ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , ( char ) NUMBER ) ; java.util.List<org.springframework.expression.spel.TypeDescriptor> . set ( NUMBER , TypeDescriptor . forObject ( ( byte ) NUMBER ) ) ; org.springframework.expression.spel.MethodExecutor = new ReflectiveMethodResolver ( ) . resolve ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , STRING , java.util.List<org.springframework.expression.spel.TypeDescriptor> ) ; org.springframework.expression.spel.MethodExecutor . execute ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , ( byte ) NUMBER ) ; java.util.List<org.springframework.expression.spel.TypeDescriptor> . set ( NUMBER , TypeDescriptor . forObject ( true ) ) ; org.springframework.expression.spel.MethodExecutor = new ReflectiveMethodResolver ( ) . resolve ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , STRING , java.util.List<org.springframework.expression.spel.TypeDescriptor> ) ; org.springframework.expression.spel.MethodExecutor . execute ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , true ) ; java.util.List<org.springframework.expression.spel.TypeDescriptor> . set ( NUMBER , TypeDescriptor . forObject ( NUMBER ) ) ; java.util.List<org.springframework.expression.spel.TypeDescriptor> . add ( TypeDescriptor . forObject ( NUMBER ) ) ; org.springframework.expression.spel.MethodExecutor = new ReflectiveMethodResolver ( ) . resolve ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , STRING , java.util.List<org.springframework.expression.spel.TypeDescriptor> ) ; org.springframework.expression.spel.MethodExecutor . execute ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.SpelReproTests.ReflectionUtil<java.lang.Integer> , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( T T ) { java.lang.System . java.io.PrintStream . void ( T + STRING + T . java.lang.Class<? extends java.lang.Number> ( ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> public void void ( int ... int[] ) { if ( int[] . int == NUMBER ) { throw new java.lang.RuntimeException ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( float ... float[] ) { if ( float[] . int == NUMBER ) { throw new java.lang.RuntimeException ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( double ... double[] ) { if ( double[] . int == NUMBER ) { throw new java.lang.RuntimeException ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( short ... short[] ) { if ( short[] . int == NUMBER ) { throw new java.lang.RuntimeException ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( long ... long[] ) { if ( long[] . int == NUMBER ) { throw new java.lang.RuntimeException ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( boolean ... boolean[] ) { if ( boolean[] . int == NUMBER ) { throw new java.lang.RuntimeException ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( char ... char[] ) { if ( char[] . int == NUMBER ) { throw new java.lang.RuntimeException ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( byte ... byte[] ) { if ( byte[] . int == NUMBER ) { throw new java.lang.RuntimeException ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( int ... int[] ) { if ( int[] . int == NUMBER ) { throw new java.lang.RuntimeException ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class Reserver { public Reserver getReserver ( ) { return this ; } public java.lang.String java.lang.String = STRING ; public java.lang.String java.lang.String = STRING ; public int int = NUMBER ; public int int = NUMBER ; public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; void ( ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; } } StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new Reserver ( ) ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; java.lang.String java.lang.String = STRING ; SpelExpression org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( java.lang.String ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.String ) ; java.lang.String = STRING ; org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( java.lang.String ) ; java.lang.String = ( java.lang.String ) org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.String ) ; java.lang.String = STRING ; org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( java.lang.String ) ; java.lang.String = ( java.lang.String ) org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.String ) ; java.lang.String = STRING ; org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; java.lang.String = STRING ; org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> public Reserver getReserver ( ) { return this ; }  <METHOD_END>
<METHOD_START> void ( ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; SpelExpression org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( java.lang.Object , Reserver . CONST ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.ContextObject ( ) ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.SpelReproTests.TestPropertyAccessor ( STRING ) ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.SpelReproTests.TestPropertyAccessor ( STRING ) ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.SpelReproTests.TestPropertyAccessor ( STRING ) ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.SpelReproTests.TestPropertyAccessor ( STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertEquals ( STRING , org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertEquals ( STRING , org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertEquals ( STRING , org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( java.lang.Object java.lang.Object ) { try { java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Field ( java.lang.String ) ; return ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) java.lang.reflect.Field . java.lang.Object ( java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) {			} return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return java.util.Map<java.lang.String,java.lang.String> ( java.lang.Object ) . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return java.util.Map<java.lang.String,java.lang.String> ( java.lang.Object ) . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class<?> < ? > [] { org.springframework.expression.spel.SpelReproTests.ContextObject .class } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return new TypedValue ( java.util.Map<java.lang.String,java.lang.String> ( java.lang.Object ) . java.lang.String ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.AccessException { java.util.Map<java.lang.String,java.lang.String> ( java.lang.Object ) . java.lang.String ( java.lang.String , ( java.lang.String ) java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; java.util.List<org.springframework.expression.spel.MethodResolver> < MethodResolver > java.util.List<org.springframework.expression.spel.MethodResolver> = new java.util.ArrayList<org.springframework.expression.spel.MethodResolver> <> ( ) ; java.util.List<org.springframework.expression.spel.MethodResolver> . add ( new ReflectiveMethodResolver ( ) { @ java.lang.Override protected java.lang.reflect.Method [] java.lang.reflect.Method[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { try { return new java.lang.reflect.Method [] { java.lang.Integer .class . java.lang.reflect.Method ( STRING , new java.lang.Class<?> < ? > [] { java.lang.String .class , java.lang.Integer . java.lang.Class<java.lang.Integer> } ) } ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { return new java.lang.reflect.Method [ NUMBER ] ; } } } ) ; org.springframework.expression.spel.StandardEvaluationContext . setMethodResolvers ( java.util.List<org.springframework.expression.spel.MethodResolver> ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Integer java.lang.Integer = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , STRING , java.lang.Integer .class ) ; assertEquals ( - NUMBER , java.lang.Integer . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.reflect.Method [] java.lang.reflect.Method[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { try { return new java.lang.reflect.Method [] { java.lang.Integer .class . java.lang.reflect.Method ( STRING , new java.lang.Class<?> < ? > [] { java.lang.String .class , java.lang.Integer . java.lang.Class<java.lang.Integer> } ) } ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { return new java.lang.reflect.Method [ NUMBER ] ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = null ; java.lang.Object java.lang.Object = null ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; assertEquals ( STRING , STRING , java.lang.Object . java.lang.String ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; assertEquals ( STRING , STRING , java.lang.Object . java.lang.String ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; assertEquals ( STRING , STRING , java.lang.Object . java.lang.String ( ) ) ; assertEquals ( STRING , ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . toStringAST ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; assertEquals ( STRING , STRING , java.lang.Object . java.lang.String ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Number java.lang.Number = java.lang.Math . float ( - NUMBER ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; org.springframework.expression.spel.SpelReproTests.SPR9486_FunctionsClass org.springframework.expression.spel.SpelReproTests.SPR9486_FunctionsClass = new org.springframework.expression.spel.SpelReproTests.SPR9486_FunctionsClass ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , org.springframework.expression.spel.SpelReproTests.SPR9486_FunctionsClass , java.lang.Number .class ) ; assertEquals ( java.lang.Number , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> public int int ( int int ) { return java.lang.Math . int ( int ) ; }  <METHOD_END>
<METHOD_START> public float float ( float float ) { return java.lang.Math . float ( float ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Number java.lang.Number = NUMBER + NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Number .class ) ; assertEquals ( java.lang.Number , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Number java.lang.Number = NUMBER + NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Number .class ) ; assertEquals ( java.lang.Number , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Number java.lang.Number = NUMBER - NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Number .class ) ; assertEquals ( java.lang.Number , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Number java.lang.Number = NUMBER - NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Number .class ) ; assertEquals ( java.lang.Number , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Number java.lang.Number = NUMBER * NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Number .class ) ; assertEquals ( java.lang.Number , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Number java.lang.Number = NUMBER * NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Number .class ) ; assertEquals ( java.lang.Number , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Number java.lang.Number = - NUMBER / - NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Number .class ) ; assertEquals ( java.lang.Number , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Number java.lang.Number = - NUMBER / - NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Number .class ) ; assertEquals ( java.lang.Number , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Boolean java.lang.Boolean = - NUMBER == - NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Boolean java.lang.Boolean = - NUMBER == - NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Boolean java.lang.Boolean = NUMBER == NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Boolean java.lang.Boolean = NUMBER == NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Boolean java.lang.Boolean = NUMBER != NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Boolean java.lang.Boolean = NUMBER != NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Boolean java.lang.Boolean = - NUMBER < - NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Boolean java.lang.Boolean = - NUMBER < - NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Boolean java.lang.Boolean = - NUMBER <= - NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Boolean java.lang.Boolean = - NUMBER <= - NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Boolean java.lang.Boolean = - NUMBER > - NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Boolean java.lang.Boolean = - NUMBER > - NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Boolean java.lang.Boolean = - NUMBER >= - NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Boolean java.lang.Boolean = - NUMBER >= - NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Number java.lang.Number = NUMBER % NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Number .class ) ; assertEquals ( java.lang.Number , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Number java.lang.Number = NUMBER % NUMBER ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Number .class ) ; assertEquals ( java.lang.Number , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Number java.lang.Number = java.lang.Math . double ( NUMBER , - NUMBER ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Number .class ) ; assertEquals ( java.lang.Number , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Number java.lang.Number = java.lang.Math . double ( NUMBER , NUMBER ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , null , java.lang.Number .class ) ; assertEquals ( java.lang.Number , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReflectivePropertyAccessor org.springframework.expression.spel.ReflectivePropertyAccessor = new ReflectivePropertyAccessor ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; java.lang.Object java.lang.Object = new org.springframework.expression.spel.SpelReproTests.GenericImplementation ( ) ; TypedValue org.springframework.expression.spel.TypedValue = org.springframework.expression.spel.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Object , STRING ) ; assertEquals ( java.lang.Integer .class , org.springframework.expression.spel.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReflectivePropertyAccessor org.springframework.expression.spel.ReflectivePropertyAccessor = new ReflectivePropertyAccessor ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; java.lang.Object java.lang.Object = new org.springframework.expression.spel.SpelReproTests.OnlyBridgeMethod ( ) ; TypedValue org.springframework.expression.spel.TypedValue = org.springframework.expression.spel.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Object , STRING ) ; assertEquals ( java.lang.Integer .class , org.springframework.expression.spel.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.BooleanHolder ( ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValueType ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertNotNull ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.BooleanHolder ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertNotNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.BooleanHolder ( ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValueType ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertNotNull ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.BooleanHolder ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertNotNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { org.springframework.expression.spel.ExpectedException . expect ( SpelParseException .class ) ; org.springframework.expression.spel.ExpectedException . expectMessage ( java.lang.String ) ; new SpelExpressionParser ( ) . parseExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; java.lang.String java.lang.String = parser . parseExpression ( STRING + org.springframework.expression.spel.SpelReproTests.StaticFinalImpl1 .class . java.lang.String ( ) + STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertThat ( java.lang.String , is ( STRING ) ) ; java.lang.String java.lang.String = parser . parseExpression ( STRING + org.springframework.expression.spel.SpelReproTests.StaticFinalImpl2 .class . java.lang.String ( ) + STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertThat ( java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , new org . springframework . expression . spel . org.springframework.expression.spel.spr10210 . org.springframework.expression.spel.spr10210 ( ) ) ; Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.ExpectedException . expect ( SpelParseException .class ) ; org.springframework.expression.spel.ExpectedException . expectMessage ( STRING ) ; Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelParserConfiguration org.springframework.expression.spel.SpelParserConfiguration = new SpelParserConfiguration ( false , false ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , org.springframework.expression.spel.SpelReproTests.ABC .class ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) ; assertEquals ( org.springframework.expression.spel.SpelReproTests.ABC . org.springframework.expression.spel.SpelReproTests.ABC , java.lang.reflect.Array . java.lang.Object ( java.lang.Object , NUMBER ) ) ; assertEquals ( org.springframework.expression.spel.SpelReproTests.ABC . org.springframework.expression.spel.SpelReproTests.ABC , java.lang.reflect.Array . java.lang.Object ( java.lang.Object , NUMBER ) ) ; assertEquals ( org.springframework.expression.spel.SpelReproTests.ABC . org.springframework.expression.spel.SpelReproTests.ABC , java.lang.reflect.Array . java.lang.Object ( java.lang.Object , NUMBER ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , org.springframework.expression.spel.SpelReproTests.XYZ .class ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) ; assertEquals ( org.springframework.expression.spel.SpelReproTests.XYZ . org.springframework.expression.spel.SpelReproTests.XYZ , java.lang.reflect.Array . java.lang.Object ( java.lang.Object , NUMBER ) ) ; assertEquals ( org.springframework.expression.spel.SpelReproTests.XYZ . org.springframework.expression.spel.SpelReproTests.XYZ , java.lang.reflect.Array . java.lang.Object ( java.lang.Object , NUMBER ) ) ; assertEquals ( org.springframework.expression.spel.SpelReproTests.XYZ . org.springframework.expression.spel.SpelReproTests.XYZ , java.lang.reflect.Array . java.lang.Object ( java.lang.Object , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelParserConfiguration org.springframework.expression.spel.SpelParserConfiguration = new SpelParserConfiguration ( false , false ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , org.springframework.expression.spel.SpelReproTests.ABC .class ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) ; assertEquals ( org.springframework.expression.spel.SpelReproTests.ABC . org.springframework.expression.spel.SpelReproTests.ABC , java.lang.reflect.Array . java.lang.Object ( java.lang.Object , NUMBER ) ) ; assertEquals ( org.springframework.expression.spel.SpelReproTests.ABC . org.springframework.expression.spel.SpelReproTests.ABC , java.lang.reflect.Array . java.lang.Object ( java.lang.Object , NUMBER ) ) ; assertEquals ( org.springframework.expression.spel.SpelReproTests.ABC . org.springframework.expression.spel.SpelReproTests.ABC , java.lang.reflect.Array . java.lang.Object ( java.lang.Object , NUMBER ) ) ; org.springframework.expression.spel.StandardEvaluationContext . addMethodResolver ( new MethodResolver ( ) { @ java.lang.Override public org.springframework.expression.spel.MethodExecutor org.springframework.expression.spel.MethodExecutor ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.util.List<org.springframework.expression.spel.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.TypeDescriptor> ) throws org.springframework.expression.spel.AccessException { return new MethodExecutor ( ) { @ java.lang.Override public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.Object ... java.lang.Object[] )							throws org.springframework.expression.spel.AccessException { try { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.expression.spel.SpelReproTests.XYZ .class . java.lang.reflect.Method ( STRING ) ; java.lang.Object java.lang.Object = java.lang.reflect.Method . java.lang.Object ( java.lang.Object , java.lang.Object[] ) ; return new TypedValue ( java.lang.Object , new TypeDescriptor ( new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ) . narrow ( java.lang.Object ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new AccessException ( java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } } } ; } } ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) ; assertEquals ( org.springframework.expression.spel.SpelReproTests.XYZ . org.springframework.expression.spel.SpelReproTests.XYZ , java.lang.reflect.Array . java.lang.Object ( java.lang.Object , NUMBER ) ) ; assertEquals ( org.springframework.expression.spel.SpelReproTests.XYZ . org.springframework.expression.spel.SpelReproTests.XYZ , java.lang.reflect.Array . java.lang.Object ( java.lang.Object , NUMBER ) ) ; assertEquals ( org.springframework.expression.spel.SpelReproTests.XYZ . org.springframework.expression.spel.SpelReproTests.XYZ , java.lang.reflect.Array . java.lang.Object ( java.lang.Object , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.MethodExecutor org.springframework.expression.spel.MethodExecutor ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.util.List<org.springframework.expression.spel.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.TypeDescriptor> ) throws org.springframework.expression.spel.AccessException { return new MethodExecutor ( ) { @ java.lang.Override public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.Object ... java.lang.Object[] )							throws org.springframework.expression.spel.AccessException { try { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.expression.spel.SpelReproTests.XYZ .class . java.lang.reflect.Method ( STRING ) ; java.lang.Object java.lang.Object = java.lang.reflect.Method . java.lang.Object ( java.lang.Object , java.lang.Object[] ) ; return new TypedValue ( java.lang.Object , new TypeDescriptor ( new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ) . narrow ( java.lang.Object ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new AccessException ( java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.Object ... java.lang.Object[] )							throws org.springframework.expression.spel.AccessException { try { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.expression.spel.SpelReproTests.XYZ .class . java.lang.reflect.Method ( STRING ) ; java.lang.Object java.lang.Object = java.lang.reflect.Method . java.lang.Object ( java.lang.Object , java.lang.Object[] ) ; return new TypedValue ( java.lang.Object , new TypeDescriptor ( new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ) . narrow ( java.lang.Object ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new AccessException ( java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.SpelReproTests.Spr10486 org.springframework.expression.spel.SpelReproTests.Spr10486 = new org.springframework.expression.spel.SpelReproTests.Spr10486 ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertThat ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , org.springframework.expression.spel.SpelReproTests.Spr10486 ) , equalTo ( ( java.lang.Object ) org.springframework.expression.spel.SpelReproTests.Spr10486 .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , org.springframework.expression.spel.SpelReproTests.Spr10486 ) , equalTo ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.SpelReproTests.Spr11142 org.springframework.expression.spel.SpelReproTests.Spr11142 = new org.springframework.expression.spel.SpelReproTests.Spr11142 ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.ExpectedException . expect ( SpelEvaluationException .class ) ; org.springframework.expression.spel.ExpectedException . expectMessage ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , org.springframework.expression.spel.SpelReproTests.Spr11142 ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.SpelReproTests.TestClass2 org.springframework.expression.spel.SpelReproTests.TestClass2 = new org.springframework.expression.spel.SpelReproTests.TestClass2 ( STRING ) ; org.springframework.expression.spel.SpelReproTests.TestClass2 org.springframework.expression.spel.SpelReproTests.TestClass2 = new org.springframework.expression.spel.SpelReproTests.TestClass2 ( STRING ) ; java.util.Map<java.lang.String,org.springframework.expression.spel.SpelReproTests.TestClass2> < java.lang.String , org.springframework.expression.spel.SpelReproTests.TestClass2 > java.util.Map<java.lang.String,org.springframework.expression.spel.SpelReproTests.TestClass2> = new java.util.HashMap<java.lang.String,org.springframework.expression.spel.SpelReproTests.TestClass2> <> ( ) ; java.util.Map<java.lang.String,org.springframework.expression.spel.SpelReproTests.TestClass2> . org.springframework.expression.spel.SpelReproTests.TestClass2 ( STRING , org.springframework.expression.spel.SpelReproTests.TestClass2 ) ; java.util.Map<java.lang.String,org.springframework.expression.spel.SpelReproTests.TestClass2> . org.springframework.expression.spel.SpelReproTests.TestClass2 ( STRING , org.springframework.expression.spel.SpelReproTests.TestClass2 ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,org.springframework.expression.spel.SpelReproTests.TestClass2> , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; java.util.Collection<java.lang.String> . boolean ( STRING ) ; java.util.Collection<java.lang.String> . boolean ( STRING ) ; java.util.Collection<java.lang.String> = java.util.Collections . java.util.Collection<java.lang.String> ( java.util.Collection<java.lang.String> ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( java.util.Collection<java.lang.String> ) ; assertTrue ( java.lang.Object instanceof java.util.ArrayList ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.ArrayList java.util.ArrayList = ( java.util.ArrayList ) java.lang.Object ; assertEquals ( STRING , java.util.ArrayList . java.lang.Object ( NUMBER ) ) ; assertEquals ( STRING , java.util.ArrayList . java.lang.Object ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelReproTests.Spr11445Class ( ) ) ; Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setBeanResolver ( new org.springframework.expression.spel.SpelReproTests.Spr11445Class ( ) ) ; Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseExpression ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = ( java.util.List<java.lang.String> < java.lang.String > ) org.springframework.expression.spel.Expression . getValue ( ) ; assertThat ( java.util.List<java.lang.String> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.SpelReproTests.MapAccessor ( ) ) ; Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.SpelReproTests.Item org.springframework.expression.spel.SpelReproTests.Item = new org.springframework.expression.spel.SpelReproTests.Item ( ) ; org.springframework.expression.spel.SpelReproTests.Item . void ( STRING ) ; org.springframework.expression.spel.SpelReproTests.Item org.springframework.expression.spel.SpelReproTests.Item = new org.springframework.expression.spel.SpelReproTests.Item ( ) ; org.springframework.expression.spel.SpelReproTests.Item . void ( STRING ) ; org.springframework.expression.spel.SpelReproTests.Item org.springframework.expression.spel.SpelReproTests.Item = new org.springframework.expression.spel.SpelReproTests.Item ( ) ; org.springframework.expression.spel.SpelReproTests.Item . void ( STRING ) ; org.springframework.expression.spel.SpelReproTests.Item . boolean ( org.springframework.expression.spel.SpelReproTests.Item ) ; org.springframework.expression.spel.SpelReproTests.Item . boolean ( org.springframework.expression.spel.SpelReproTests.Item ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , org.springframework.expression.spel.SpelReproTests.Item ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( org.springframework.expression.spel.SpelReproTests.UnnamedUser .class . java.lang.String ( ) , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelReproTests.UnnamedUser ( ) ) ) ; assertEquals ( org.springframework.expression.spel.SpelReproTests.NamedUser .class . java.lang.String ( ) , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelReproTests.NamedUser ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; assertTrue ( ( ( java.util.List ) java.lang.Object ) . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) instanceof java.util.ArrayList ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , new java.lang.Integer ( NUMBER ) ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) . startsWith ( STRING ) ) ; org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , new java.lang.Float ( NUMBER ) ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) . startsWith ( STRING ) ) ; org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , STRING ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) . startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . boolean ( java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . boolean ( java.util.Map<java.lang.String,java.lang.Object> ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( java.util.List<java.util.Map<java.lang.String,java.lang.Object>> ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; java.lang.String java.lang.String = STRING ; java.util.List java.util.List = org.springframework.expression.spel.ExpressionParser . parseExpression ( java.lang.String ) . getValue ( org.springframework.expression.spel.EvaluationContext , java.util.List .class ) ; assertEquals ( STRING , java.util.List . java.lang.String ( ) ) ; java.util.List = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.EvaluationContext , java.util.List .class ) ; assertEquals ( STRING , java.util.List . java.lang.String ( ) ) ; java.util.List = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.EvaluationContext , java.util.List .class ) ; assertEquals ( STRING , java.util.List . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setBeanResolver ( new org.springframework.expression.spel.SpelReproTests.MyBeanResolver ( ) ) ; Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; try { org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; fail ( STRING ) ; } catch ( SpelParseException org.springframework.expression.spel.SpelParseException ) { assertEquals ( SpelMessage . INVALID_BEAN_REFERENCE , org.springframework.expression.spel.SpelParseException . getMessageCode ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelParseException . getPosition ( ) ) ; } try { org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; fail ( STRING ) ; } catch ( SpelParseException org.springframework.expression.spel.SpelParseException ) { assertEquals ( SpelMessage . INVALID_BEAN_REFERENCE , org.springframework.expression.spel.SpelParseException . getMessageCode ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelParseException . getPosition ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelReproTests.BeanClass ( new org.springframework.expression.spel.SpelReproTests.ListOf ( NUMBER ) , new org.springframework.expression.spel.SpelReproTests.ListOf ( NUMBER ) ) , java.lang.Boolean .class ) ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelReproTests.BeanClass ( new org.springframework.expression.spel.SpelReproTests.ListOf ( NUMBER ) , new org.springframework.expression.spel.SpelReproTests.ListOf ( - NUMBER ) ) , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Object java.lang.Object ) { java.lang.System . java.io.PrintStream . void ( java.lang.Object ) ; return false ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) . toString ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) . toString ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { java.util.List java.util.List = new java.util.ArrayList ( ) ; java.util.List . boolean ( STRING ) ; java.util.List . boolean ( STRING ) ; java.util.List . boolean ( STRING ) ; java.util.List java.util.List = new java.util.ArrayList ( ) ; java.util.List . boolean ( STRING ) ; java.util.List . boolean ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , java.util.List ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , java.util.List ) ; Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; java.util.List java.util.List = new java.util.ArrayList ( ) ; java.util.List . boolean ( NUMBER ) ; java.util.List . boolean ( NUMBER ) ; java.util.List . boolean ( NUMBER ) ; java.util.List . boolean ( NUMBER ) ; org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , java.util.List ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { java.util.Map java.util.Map = new java.util.HashMap ( ) ; java.util.Map . java.lang.Object ( STRING , NUMBER ) ; java.util.Map . java.lang.Object ( STRING , NUMBER ) ; java.util.Map . java.lang.Object ( STRING , NUMBER ) ; java.util.Map java.util.Map = new java.util.HashMap ( ) ; java.util.Map . java.lang.Object ( STRING , NUMBER ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , java.util.Map ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , java.util.Map ) ; Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , STRING ) ; Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertEquals ( java.nio.charset.StandardCharsets . java.nio.charset.Charset , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void ( double double ) { this . double = double ; }  <METHOD_END>
<METHOD_START> public double double ( ) { return double ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.expression.spel.SpelReproTests.ListOf ... org.springframework.expression.spel.SpelReproTests.ListOf[] ) { this . java.util.List<org.springframework.expression.spel.SpelReproTests.ListOf> = java.util.Arrays . java.util.List<org.springframework.expression.spel.SpelReproTests.ListOf> ( org.springframework.expression.spel.SpelReproTests.ListOf[] ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.expression.spel.SpelReproTests.ListOf> < org.springframework.expression.spel.SpelReproTests.ListOf > java.util.List<org.springframework.expression.spel.SpelReproTests.ListOf> ( ) { return java.util.List<org.springframework.expression.spel.SpelReproTests.ListOf> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( ) { return this . java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> T T ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( ) { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Object java.lang.Object ) { return ( this == java.lang.Object || ( java.lang.Object instanceof org.springframework.expression.spel.SpelReproTests.TestClass2 && this . java.lang.String . boolean ( ( ( org.springframework.expression.spel.SpelReproTests.TestClass2 ) java.lang.Object ) . java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.String . int ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( int int ) { return int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return ( java.lang.String . boolean ( STRING ) ? this : null ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . boolean ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.expression.spel.SpelReproTests.Item> < org.springframework.expression.spel.SpelReproTests.Item > java.util.Iterator<org.springframework.expression.spel.SpelReproTests.Item> ( ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . java.util.Iterator<org.springframework.expression.spel.SpelReproTests.Item> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object [] java.lang.Object[] ( ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . java.lang.Object[] ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T [] T[] ( T [] T[] ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . T[] ( T[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( org.springframework.expression.spel.SpelReproTests.Item org.springframework.expression.spel.SpelReproTests.Item ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . boolean ( org.springframework.expression.spel.SpelReproTests.Item ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . boolean ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.util.Collection<?> < ? > java.util.Collection<?> ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . boolean ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.util.Collection<? extends org.springframework.expression.spel.SpelReproTests.Item> < ? extends org.springframework.expression.spel.SpelReproTests.Item > java.util.Collection<? extends org.springframework.expression.spel.SpelReproTests.Item> ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . boolean ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( int int , java.util.Collection<? extends org.springframework.expression.spel.SpelReproTests.Item> < ? extends org.springframework.expression.spel.SpelReproTests.Item > java.util.Collection<? extends org.springframework.expression.spel.SpelReproTests.Item> ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . boolean ( int , java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.util.Collection<?> < ? > java.util.Collection<?> ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . boolean ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.util.Collection<?> < ? > java.util.Collection<?> ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . boolean ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.SpelReproTests.Item org.springframework.expression.spel.SpelReproTests.Item ( int int ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . org.springframework.expression.spel.SpelReproTests.Item ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.SpelReproTests.Item org.springframework.expression.spel.SpelReproTests.Item ( int int , org.springframework.expression.spel.SpelReproTests.Item org.springframework.expression.spel.SpelReproTests.Item ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . org.springframework.expression.spel.SpelReproTests.Item ( int , org.springframework.expression.spel.SpelReproTests.Item ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int , org.springframework.expression.spel.SpelReproTests.Item org.springframework.expression.spel.SpelReproTests.Item ) { this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . void ( int , org.springframework.expression.spel.SpelReproTests.Item ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.SpelReproTests.Item org.springframework.expression.spel.SpelReproTests.Item ( int int ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . org.springframework.expression.spel.SpelReproTests.Item ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.Object java.lang.Object ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . int ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.Object java.lang.Object ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . int ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.ListIterator<org.springframework.expression.spel.SpelReproTests.Item> < org.springframework.expression.spel.SpelReproTests.Item > java.util.ListIterator<org.springframework.expression.spel.SpelReproTests.Item> ( ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . java.util.ListIterator<org.springframework.expression.spel.SpelReproTests.Item> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.ListIterator<org.springframework.expression.spel.SpelReproTests.Item> < org.springframework.expression.spel.SpelReproTests.Item > java.util.ListIterator<org.springframework.expression.spel.SpelReproTests.Item> ( int int ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . java.util.ListIterator<org.springframework.expression.spel.SpelReproTests.Item> ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.expression.spel.SpelReproTests.Item> < org.springframework.expression.spel.SpelReproTests.Item > java.util.List<org.springframework.expression.spel.SpelReproTests.Item> ( int int , int int ) { return this . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> . java.util.List<org.springframework.expression.spel.SpelReproTests.Item> ( int , int ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public static < T > java.util.List<T> < T > java.util.List<T> ( java.lang.Iterable<T> < T > java.lang.Iterable<T> ) { return new java.util.ArrayList<T> <> ( ) ; }  <METHOD_END>
<METHOD_START> public static < T > java.util.List<T> < T > java.util.List<T> ( java.lang.Object ... java.lang.Object[] ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.Number java.lang.Number ) { return STRING + java.lang.Number . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer ) { return STRING + java.lang.Integer . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { return STRING + java.lang.Object . java.lang.String ( ) ; }  <METHOD_END>
