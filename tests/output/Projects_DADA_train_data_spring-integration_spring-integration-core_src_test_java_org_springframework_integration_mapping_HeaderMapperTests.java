<METHOD_START> @ Test public void void ( ) { org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . toHeadersFromRequest ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertFalse ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . setRequestHeaderNames ( STRING ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . toHeadersFromRequest ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . setRequestHeaderNames ( STRING , STRING ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . toHeadersFromRequest ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertEquals ( null , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( null , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . setRequestHeaderNames ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . STANDARD_REQUEST_HEADER_NAME_PATTERN ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( STRING , STRING ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . toHeadersFromRequest ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertFalse ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . setRequestHeaderNames ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . STANDARD_REQUEST_HEADER_NAME_PATTERN ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( STRING , STRING ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . toHeadersFromRequest ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertFalse ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . toHeadersFromReply ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertFalse ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . setReplyHeaderNames ( STRING ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . toHeadersFromReply ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . setReplyHeaderNames ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . STANDARD_REPLY_HEADER_NAME_PATTERN ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( STRING , STRING ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . toHeadersFromReply ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertFalse ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . setReplyHeaderNames ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . STANDARD_REPLY_HEADER_NAME_PATTERN ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( STRING , STRING ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . toHeadersFromReply ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertFalse ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper = new org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper ( ) { @ java.lang.Override protected java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Arrays . java.util.List<java.lang.String> ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ; } } ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . toHeadersFromReply ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertFalse ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ) ; assertFalse ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Arrays . java.util.List<java.lang.String> ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) { org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = new org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( STRING ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( STRING ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( STRING ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( STRING , STRING ) ; return org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHeaders org.springframework.integration.mapping.MessageHeaders = org.springframework.integration.mapping.MessageHeaders ( ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = new org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . fromHeadersToRequest ( org.springframework.integration.mapping.MessageHeaders , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertNull ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Integer ( ) ) ; assertEquals ( true , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Boolean ( ) ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertNull ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.util.Map<java.lang.String,java.lang.Object> ( ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . setRequestHeaderNames ( STRING ) ; MessageHeaders org.springframework.integration.mapping.MessageHeaders = org.springframework.integration.mapping.MessageHeaders ( ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = new org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . fromHeadersToRequest ( org.springframework.integration.mapping.MessageHeaders , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertNull ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Integer ( ) ) ; assertEquals ( true , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Boolean ( ) ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.util.Map<java.lang.String,java.lang.Object> ( ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . setRequestHeaderNames ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . STANDARD_REQUEST_HEADER_NAME_PATTERN ) ; MessageHeaders org.springframework.integration.mapping.MessageHeaders = org.springframework.integration.mapping.MessageHeaders ( ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = new org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . fromHeadersToRequest ( org.springframework.integration.mapping.MessageHeaders , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertNull ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Integer ( ) ) ; assertEquals ( true , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Boolean ( ) ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertNull ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.util.Map<java.lang.String,java.lang.Object> ( ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . setRequestHeaderNames ( STRING , STRING , STRING , STRING , STRING , STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . STANDARD_REQUEST_HEADER_NAME_PATTERN ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , true ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; MessageHeaders org.springframework.integration.mapping.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = new org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . fromHeadersToRequest ( org.springframework.integration.mapping.MessageHeaders , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertNull ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Integer ( ) ) ; assertEquals ( true , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Boolean ( ) ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertNull ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.util.Map<java.lang.String,java.lang.Object> ( ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHeaders org.springframework.integration.mapping.MessageHeaders = org.springframework.integration.mapping.MessageHeaders ( ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = new org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . fromHeadersToReply ( org.springframework.integration.mapping.MessageHeaders , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertNull ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Integer ( ) ) ; assertEquals ( true , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Boolean ( ) ) ; assertNull ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.util.Map<java.lang.String,java.lang.Object> ( ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . setReplyHeaderNames ( STRING ) ; MessageHeaders org.springframework.integration.mapping.MessageHeaders = org.springframework.integration.mapping.MessageHeaders ( ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = new org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . fromHeadersToReply ( org.springframework.integration.mapping.MessageHeaders , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertNull ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Integer ( ) ) ; assertEquals ( true , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Boolean ( ) ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.util.Map<java.lang.String,java.lang.Object> ( ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . setReplyHeaderNames ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . STANDARD_REPLY_HEADER_NAME_PATTERN ) ; MessageHeaders org.springframework.integration.mapping.MessageHeaders = org.springframework.integration.mapping.MessageHeaders ( ) ; org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties = new org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ( ) ; this . org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaderMapper . fromHeadersToReply ( org.springframework.integration.mapping.MessageHeaders , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertNull ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Integer ( ) ) ; assertEquals ( true , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Boolean ( ) ) ; assertNull ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.util.Map<java.lang.String,java.lang.Object> ( ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.mapping.MessageHeaders org.springframework.integration.mapping.MessageHeaders ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , true ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; return new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) PatternBasedHeaderMatcher org.springframework.integration.mapping.PatternBasedHeaderMatcher = new PatternBasedHeaderMatcher ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ; void ( org.springframework.integration.mapping.PatternBasedHeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.PatternBasedHeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.PatternBasedHeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.PatternBasedHeaderMatcher , STRING , false ) ; void ( org.springframework.integration.mapping.PatternBasedHeaderMatcher , STRING , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) PatternBasedHeaderMatcher org.springframework.integration.mapping.PatternBasedHeaderMatcher = new PatternBasedHeaderMatcher ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ; void ( org.springframework.integration.mapping.PatternBasedHeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.PatternBasedHeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.PatternBasedHeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.PatternBasedHeaderMatcher , STRING , false ) ; void ( org.springframework.integration.mapping.PatternBasedHeaderMatcher , STRING , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SinglePatternBasedHeaderMatcher org.springframework.integration.mapping.SinglePatternBasedHeaderMatcher = new SinglePatternBasedHeaderMatcher ( STRING ) ; void ( org.springframework.integration.mapping.SinglePatternBasedHeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.SinglePatternBasedHeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.SinglePatternBasedHeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.SinglePatternBasedHeaderMatcher , STRING , false ) ; void ( org.springframework.integration.mapping.SinglePatternBasedHeaderMatcher , STRING , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SinglePatternBasedHeaderMatcher org.springframework.integration.mapping.SinglePatternBasedHeaderMatcher = new SinglePatternBasedHeaderMatcher ( STRING ) ; void ( org.springframework.integration.mapping.SinglePatternBasedHeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.SinglePatternBasedHeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.SinglePatternBasedHeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.SinglePatternBasedHeaderMatcher , STRING , false ) ; void ( org.springframework.integration.mapping.SinglePatternBasedHeaderMatcher , STRING , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ContentBasedHeaderMatcher org.springframework.integration.mapping.ContentBasedHeaderMatcher = new ContentBasedHeaderMatcher ( true , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; void ( org.springframework.integration.mapping.ContentBasedHeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.ContentBasedHeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.ContentBasedHeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.ContentBasedHeaderMatcher , STRING , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ContentBasedHeaderMatcher org.springframework.integration.mapping.ContentBasedHeaderMatcher = new ContentBasedHeaderMatcher ( false , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; void ( org.springframework.integration.mapping.ContentBasedHeaderMatcher , STRING , false ) ; void ( org.springframework.integration.mapping.ContentBasedHeaderMatcher , STRING , false ) ; void ( org.springframework.integration.mapping.ContentBasedHeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.ContentBasedHeaderMatcher , STRING , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PrefixBasedMatcher org.springframework.integration.mapping.PrefixBasedMatcher = new PrefixBasedMatcher ( true , STRING ) ; void ( org.springframework.integration.mapping.PrefixBasedMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.PrefixBasedMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.PrefixBasedMatcher , STRING , false ) ; void ( org.springframework.integration.mapping.PrefixBasedMatcher , STRING , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PrefixBasedMatcher org.springframework.integration.mapping.PrefixBasedMatcher = new PrefixBasedMatcher ( false , STRING ) ; void ( org.springframework.integration.mapping.PrefixBasedMatcher , STRING , false ) ; void ( org.springframework.integration.mapping.PrefixBasedMatcher , STRING , false ) ; void ( org.springframework.integration.mapping.PrefixBasedMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.PrefixBasedMatcher , STRING , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMatcher org.springframework.integration.mapping.HeaderMatcher = new CompositeHeaderMatcher ( new PrefixBasedMatcher ( true , STRING ) , new PrefixBasedMatcher ( true , STRING ) ) ; void ( org.springframework.integration.mapping.HeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.HeaderMatcher , STRING , true ) ; void ( org.springframework.integration.mapping.HeaderMatcher , STRING , false ) ; }  <METHOD_END>
<METHOD_START> protected void void ( HeaderMatcher org.springframework.integration.mapping.HeaderMatcher , java.lang.String java.lang.String , boolean boolean ) { assertEquals ( STRING + java.lang.String + STRING , boolean , org.springframework.integration.mapping.HeaderMatcher . matchHeader ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , java.util.Arrays . java.util.List<java.lang.String> ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) , java.util.Arrays . java.util.List<java.lang.String> ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; if ( StringUtils . hasText ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; } if ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Integer ( ) != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Integer ( ) ) ; } if ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Boolean ( ) != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.Boolean ( ) ) ; } if ( StringUtils . hasText ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; } if ( StringUtils . hasText ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.lang.String ( ) ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) { return org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . java.util.Map<java.lang.String,java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) { java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( java.lang.String ) ; } java.lang.Integer java.lang.Integer = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , java.lang.Integer .class ) ; if ( java.lang.Integer != null ) { org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( java.lang.Integer ) ; } java.lang.Boolean java.lang.Boolean = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , java.lang.Boolean .class ) ; if ( java.lang.Boolean != null ) { org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( java.lang.Boolean ) ; } java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( java.lang.String ) ; } java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.mapping.HeaderMapperTests.GenericTestHeaders . java.lang.String , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties ) { org.springframework.integration.mapping.HeaderMapperTests.GenericTestProperties . void ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( ) { return java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Boolean = boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
