<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = this . java.lang.Object ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = this . java.lang.Object ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = this . java.lang.Object ( org.springframework.integration.config.xml.MessageChannel , new org.springframework.integration.config.xml.ServiceActivatorParserTests.TestPayload ( ) ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = this . java.lang.Object ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = this . java.lang.Object ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = this . java.lang.Object ( org.springframework.integration.config.xml.MessageChannel , new org.springframework.integration.config.xml.ServiceActivatorParserTests.TestPerson ( STRING , STRING ) ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = this . java.lang.Object ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.config.xml.ServiceActivatorParserTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.config.xml.ServiceActivatorParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { assertTrue ( org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) . startsWith ( STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.config.xml.ServiceActivatorParserTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.config.xml.ServiceActivatorParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { assertTrue ( org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) . startsWith ( STRING + STRING + STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.config.xml.ServiceActivatorParserTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.config.xml.ServiceActivatorParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { assertTrue ( org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) . startsWith ( STRING + STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.config.xml.ServiceActivatorParserTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.config.xml.ServiceActivatorParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { assertTrue ( org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) . startsWith ( STRING + STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.config.xml.ServiceActivatorParserTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.config.xml.ServiceActivatorParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { assertTrue ( org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) . startsWith ( STRING + STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.config.xml.ServiceActivatorParserTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.config.xml.ServiceActivatorParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { assertTrue ( org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) . startsWith ( STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( MessageChannel org.springframework.integration.config.xml.MessageChannel , java.lang.Object java.lang.Object ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.config.xml.MessagingTemplate . setDefaultDestination ( org.springframework.integration.config.xml.MessageChannel ) ; return org.springframework.integration.config.xml.MessagingTemplate . convertSendAndReceive ( java.lang.Object , null ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.lang.String + java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.config.xml.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.config.xml.Message<?> ) throws java.lang.Exception { org.springframework.integration.config.xml.ExecutionCallback . execute ( ) ; return STRING ; }  <METHOD_END>
