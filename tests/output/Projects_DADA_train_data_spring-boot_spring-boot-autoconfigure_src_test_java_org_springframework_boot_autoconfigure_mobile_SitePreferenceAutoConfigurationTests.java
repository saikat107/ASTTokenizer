<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext != null ) { this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . register ( SitePreferenceAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBean ( SitePreferenceHandlerInterceptor .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . register ( SitePreferenceAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBean ( SitePreferenceHandlerInterceptor .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NoSuchBeanDefinitionException .class ) public void void ( ) { this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . register ( SitePreferenceAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBean ( SitePreferenceHandlerInterceptor .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . register ( SitePreferenceAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBean ( SitePreferenceHandlerMethodArgumentResolver .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . register ( SitePreferenceAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBean ( SitePreferenceHandlerMethodArgumentResolver .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NoSuchBeanDefinitionException .class ) public void void ( ) { this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . register ( SitePreferenceAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBean ( SitePreferenceHandlerMethodArgumentResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfigurationTests.Config .class , WebMvcAutoConfiguration .class , HttpMessageConvertersAutoConfiguration .class , SitePreferenceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . refresh ( ) ; RequestMappingHandlerMapping org.springframework.boot.autoconfigure.mobile.RequestMappingHandlerMapping = this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ; HandlerInterceptor [] org.springframework.boot.autoconfigure.mobile.HandlerInterceptor[] = org.springframework.boot.autoconfigure.mobile.RequestMappingHandlerMapping . getHandler ( new MockHttpServletRequest ( ) ) . getInterceptors ( ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.HandlerInterceptor[] ) . hasAtLeastOneElementOfType ( SitePreferenceHandlerInterceptor .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfigurationTests.MyController org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfigurationTests.MyController ( ) { return new org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfigurationTests.MyController ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( ) {		}  <METHOD_END>
