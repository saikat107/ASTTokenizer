<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return targetLocalDirectory . getAbsolutePath ( ) + java.io.File . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.integration.sftp.SshServer = SshServer . setUpDefaultServer ( ) ; org.springframework.integration.sftp.SshServer . setPasswordAuthenticator ( ( username , password , session ) -> true ) ; org.springframework.integration.sftp.SshServer . setPort ( NUMBER ) ; org.springframework.integration.sftp.SshServer . setKeyPairProvider ( new SimpleGeneratorHostKeyProvider ( new java.io.File ( STRING ) ) ) ; org.springframework.integration.sftp.SshServer . setSubsystemFactories ( java.util.Collections .< NamedFactory < Command > > java.util.List<org.springframework.integration.sftp.NamedFactory<org.springframework.integration.sftp.Command>> ( new SftpSubsystemFactory ( ) ) ) ; org.springframework.integration.sftp.SshServer . setFileSystemFactory ( new VirtualFileSystemFactory ( remoteTemporaryFolder . getRoot ( ) . toPath ( ) ) ) ; org.springframework.integration.sftp.SshServer . start ( ) ; port = org.springframework.integration.sftp.SshServer . getPort ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.sftp.SessionFactory<org.springframework.integration.sftp.LsEntry> < LsEntry > org.springframework.integration.sftp.SessionFactory<org.springframework.integration.sftp.LsEntry> ( ) { DefaultSftpSessionFactory org.springframework.integration.sftp.DefaultSftpSessionFactory = new DefaultSftpSessionFactory ( true ) ; org.springframework.integration.sftp.DefaultSftpSessionFactory . setHost ( STRING ) ; org.springframework.integration.sftp.DefaultSftpSessionFactory . setPort ( port ) ; org.springframework.integration.sftp.DefaultSftpSessionFactory . setUser ( STRING ) ; org.springframework.integration.sftp.DefaultSftpSessionFactory . setPassword ( STRING ) ; org.springframework.integration.sftp.DefaultSftpSessionFactory . setAllowUnknownKeys ( true ) ; return new CachingSessionFactory < LsEntry > ( org.springframework.integration.sftp.DefaultSftpSessionFactory ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) java.lang.Exception { org.springframework.integration.sftp.SshServer . stop ( ) ; java.io.File java.io.File = new java.io.File ( STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } }  <METHOD_END>
