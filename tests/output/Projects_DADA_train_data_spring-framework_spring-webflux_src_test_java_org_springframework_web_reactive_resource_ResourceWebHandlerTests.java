<METHOD_START> @ Before public void void ( ) java.lang.Exception { java.util.List<org.springframework.web.reactive.resource.Resource> < Resource > java.util.List<org.springframework.web.reactive.resource.Resource> = new java.util.ArrayList<org.springframework.web.reactive.resource.Resource> <> ( NUMBER ) ; java.util.List<org.springframework.web.reactive.resource.Resource> . add ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.ResourceWebHandlerTests> ( ) ) ) ; java.util.List<org.springframework.web.reactive.resource.Resource> . add ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.ResourceWebHandlerTests> ( ) ) ) ; java.util.List<org.springframework.web.reactive.resource.Resource> . add ( new ClassPathResource ( STRING ) ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler = new ResourceWebHandler ( ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . setLocations ( java.util.List<org.springframework.web.reactive.resource.Resource> ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . setCacheControl ( CacheControl . maxAge ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . afterPropertiesSet ( ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . afterSingletonsInstantiated ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; HttpHeaders org.springframework.web.reactive.resource.HttpHeaders = org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) ; assertEquals ( MediaType . parseMediaType ( STRING ) , org.springframework.web.reactive.resource.HttpHeaders . getContentType ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.HttpHeaders . getContentLength ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.HttpHeaders . getCacheControl ( ) ) ; assertTrue ( org.springframework.web.reactive.resource.HttpHeaders . containsKey ( STRING ) ) ; assertEquals ( org.springframework.web.reactive.resource.HttpHeaders . getLastModified ( ) / NUMBER , long ( STRING ) / NUMBER ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.HttpHeaders . get ( STRING ) . size ( ) ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . head ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertNull ( org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; HttpHeaders org.springframework.web.reactive.resource.HttpHeaders = org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) ; assertEquals ( MediaType . parseMediaType ( STRING ) , org.springframework.web.reactive.resource.HttpHeaders . getContentType ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.HttpHeaders . getContentLength ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.HttpHeaders . getCacheControl ( ) ) ; assertTrue ( org.springframework.web.reactive.resource.HttpHeaders . containsKey ( STRING ) ) ; assertEquals ( org.springframework.web.reactive.resource.HttpHeaders . getLastModified ( ) / NUMBER , long ( STRING ) / NUMBER ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.HttpHeaders . get ( STRING ) . size ( ) ) ; StepVerifier . create ( org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getBody ( ) ) . expectErrorMatches ( ex -> ex . getMessage ( ) . startsWith ( STRING ) ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . options ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertNull ( org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . setCacheControl ( CacheControl . noStore ( ) ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; MockServerHttpResponse org.springframework.web.reactive.resource.MockServerHttpResponse = org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerHttpResponse . getHeaders ( ) . getCacheControl ( ) ) ; assertTrue ( org.springframework.web.reactive.resource.MockServerHttpResponse . getHeaders ( ) . containsKey ( STRING ) ) ; assertEquals ( org.springframework.web.reactive.resource.MockServerHttpResponse . getHeaders ( ) . getLastModified ( ) / NUMBER , long ( STRING ) / NUMBER ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerHttpResponse . getHeaders ( ) . getFirst ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.MockServerHttpResponse . getHeaders ( ) . get ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { VersionResourceResolver org.springframework.web.reactive.resource.VersionResourceResolver = new VersionResourceResolver ( ) ; org.springframework.web.reactive.resource.VersionResourceResolver . addFixedVersionStrategy ( STRING , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . setResourceResolvers ( java.util.Arrays . java.util.List ( org.springframework.web.reactive.resource.VersionResourceResolver , new PathResourceResolver ( ) ) ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . afterPropertiesSet ( ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . afterSingletonsInstantiated ( ) ; MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getETag ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getFirst ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . get ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; HttpHeaders org.springframework.web.reactive.resource.HttpHeaders = org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) ; assertEquals ( MediaType . TEXT_HTML , org.springframework.web.reactive.resource.HttpHeaders . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.HttpHeaders . getCacheControl ( ) ) ; assertTrue ( org.springframework.web.reactive.resource.HttpHeaders . containsKey ( STRING ) ) ; assertEquals ( org.springframework.web.reactive.resource.HttpHeaders . getLastModified ( ) / NUMBER , long ( STRING ) / NUMBER ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.HttpHeaders . get ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; HttpHeaders org.springframework.web.reactive.resource.HttpHeaders = org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) ; assertEquals ( MediaType . parseMediaType ( STRING ) , org.springframework.web.reactive.resource.HttpHeaders . getContentType ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.HttpHeaders . getContentLength ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.HttpHeaders . getCacheControl ( ) ) ; assertTrue ( org.springframework.web.reactive.resource.HttpHeaders . containsKey ( STRING ) ) ; assertEquals ( org.springframework.web.reactive.resource.HttpHeaders . getLastModified ( ) / NUMBER , long ( STRING ) / NUMBER ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.HttpHeaders . get ( STRING ) . size ( ) ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( MediaType . parseMediaType ( STRING ) , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentType ( ) ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( MediaType . parseMediaType ( STRING ) , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentType ( ) ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CompositeContentTypeResolver org.springframework.web.reactive.resource.CompositeContentTypeResolver = new RequestedContentTypeResolverBuilder ( ) . mediaType ( STRING , new MediaType ( STRING , STRING ) ) . build ( ) ; java.util.List<org.springframework.web.reactive.resource.Resource> < Resource > java.util.List<org.springframework.web.reactive.resource.Resource> = java.util.Collections . java.util.List ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.ResourceWebHandlerTests> ( ) ) ) ; ResourceWebHandler org.springframework.web.reactive.resource.ResourceWebHandler = new ResourceWebHandler ( ) ; org.springframework.web.reactive.resource.ResourceWebHandler . setLocations ( java.util.List<org.springframework.web.reactive.resource.Resource> ) ; org.springframework.web.reactive.resource.ResourceWebHandler . setContentTypeResolver ( org.springframework.web.reactive.resource.CompositeContentTypeResolver ) ; org.springframework.web.reactive.resource.ResourceWebHandler . afterPropertiesSet ( ) ; org.springframework.web.reactive.resource.ResourceWebHandler . afterSingletonsInstantiated ( ) ; MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( MediaType . parseMediaType ( STRING ) , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentType ( ) ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CompositeContentTypeResolver org.springframework.web.reactive.resource.CompositeContentTypeResolver = new RequestedContentTypeResolverBuilder ( ) . favorPathExtension ( false ) . build ( ) ; java.util.List<org.springframework.web.reactive.resource.Resource> < Resource > java.util.List<org.springframework.web.reactive.resource.Resource> = java.util.Collections . java.util.List ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.ResourceWebHandlerTests> ( ) ) ) ; ResourceWebHandler org.springframework.web.reactive.resource.ResourceWebHandler = new ResourceWebHandler ( ) ; org.springframework.web.reactive.resource.ResourceWebHandler . setLocations ( java.util.List<org.springframework.web.reactive.resource.Resource> ) ; org.springframework.web.reactive.resource.ResourceWebHandler . setContentTypeResolver ( org.springframework.web.reactive.resource.CompositeContentTypeResolver ) ; org.springframework.web.reactive.resource.ResourceWebHandler . afterPropertiesSet ( ) ; org.springframework.web.reactive.resource.ResourceWebHandler . afterSingletonsInstantiated ( ) ; MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( MediaType . TEXT_HTML , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( HttpMethod org.springframework.web.reactive.resource.HttpMethod : HttpMethod . values ( ) ) { void ( org.springframework.web.reactive.resource.HttpMethod ) ; } }  <METHOD_END>
<METHOD_START> private void void ( HttpMethod org.springframework.web.reactive.resource.HttpMethod ) throws java.lang.Exception { Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.ResourceWebHandlerTests> ( ) ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . setLocations ( java.util.Collections . java.util.List ( org.springframework.web.reactive.resource.Resource ) ) ; void ( org.springframework.web.reactive.resource.HttpMethod , STRING , org.springframework.web.reactive.resource.Resource ) ; void ( org.springframework.web.reactive.resource.HttpMethod , STRING , org.springframework.web.reactive.resource.Resource ) ; void ( org.springframework.web.reactive.resource.HttpMethod , STRING , org.springframework.web.reactive.resource.Resource ) ; org.springframework.web.reactive.resource.Resource = new UrlResource ( java.lang.Class<? extends org.springframework.web.reactive.resource.ResourceWebHandlerTests> ( ) . java.net.URL ( STRING ) ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . setLocations ( java.util.Collections . java.util.List ( org.springframework.web.reactive.resource.Resource ) ) ; Resource org.springframework.web.reactive.resource.Resource = new UrlResource ( java.lang.Class<? extends org.springframework.web.reactive.resource.ResourceWebHandlerTests> ( ) . java.net.URL ( STRING ) ) ; java.lang.String java.lang.String = org.springframework.web.reactive.resource.Resource . getURL ( ) . getPath ( ) ; void ( org.springframework.web.reactive.resource.HttpMethod , STRING + java.lang.String , org.springframework.web.reactive.resource.Resource ) ; void ( org.springframework.web.reactive.resource.HttpMethod , STRING + java.lang.String , org.springframework.web.reactive.resource.Resource ) ; void ( org.springframework.web.reactive.resource.HttpMethod , STRING + java.lang.String , org.springframework.web.reactive.resource.Resource ) ; void ( org.springframework.web.reactive.resource.HttpMethod , STRING + java.lang.String , org.springframework.web.reactive.resource.Resource ) ; void ( org.springframework.web.reactive.resource.HttpMethod , STRING + java.lang.String , org.springframework.web.reactive.resource.Resource ) ; void ( org.springframework.web.reactive.resource.HttpMethod , STRING , org.springframework.web.reactive.resource.Resource ) ; void ( org.springframework.web.reactive.resource.HttpMethod , STRING + java.lang.String , org.springframework.web.reactive.resource.Resource ) ; }  <METHOD_END>
<METHOD_START> private void void ( HttpMethod org.springframework.web.reactive.resource.HttpMethod , java.lang.String java.lang.String , Resource org.springframework.web.reactive.resource.Resource ) throws java.lang.Exception { ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange = MockServerHttpRequest . method ( org.springframework.web.reactive.resource.HttpMethod , STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.ServerWebExchange ) . block ( java.time.Duration ) ; if ( ! org.springframework.web.reactive.resource.Resource . createRelative ( java.lang.String ) . exists ( ) && ! java.lang.String . boolean ( STRING ) ) { fail ( java.lang.String + STRING ) ; } assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.reactive.resource.ServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.ServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.ServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.reactive.resource.ServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertSame ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( STRING ) ) ; assertSame ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( ( char ) NUMBER + STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( ( char ) NUMBER + STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( ( char ) NUMBER + STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( ( char ) NUMBER + STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( ( char ) NUMBER + STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( ( char ) NUMBER + STRING + ( char ) NUMBER + STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler . processPath ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PathResourceResolver org.springframework.web.reactive.resource.PathResourceResolver = ( PathResourceResolver ) this . org.springframework.web.reactive.resource.ResourceWebHandler . getResourceResolvers ( ) . get ( NUMBER ) ; Resource [] org.springframework.web.reactive.resource.Resource[] = org.springframework.web.reactive.resource.PathResourceResolver . getAllowedLocations ( ) ; assertEquals ( NUMBER , locations . length ) ; assertEquals ( STRING , ( ( ClassPathResource ) org.springframework.web.reactive.resource.Resource[] [ NUMBER ] ) . getPath ( ) ) ; assertEquals ( STRING , ( ( ClassPathResource ) org.springframework.web.reactive.resource.Resource[] [ NUMBER ] ) . getPath ( ) ) ; assertEquals ( STRING , ( ( ClassPathResource ) org.springframework.web.reactive.resource.Resource[] [ NUMBER ] ) . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathResource org.springframework.web.reactive.resource.ClassPathResource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.ResourceWebHandlerTests> ( ) ) ; ClassPathResource org.springframework.web.reactive.resource.ClassPathResource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.ResourceWebHandlerTests> ( ) ) ; PathResourceResolver org.springframework.web.reactive.resource.PathResourceResolver = new PathResourceResolver ( ) ; org.springframework.web.reactive.resource.PathResourceResolver . setAllowedLocations ( org.springframework.web.reactive.resource.ClassPathResource ) ; ResourceWebHandler org.springframework.web.reactive.resource.ResourceWebHandler = new ResourceWebHandler ( ) ; org.springframework.web.reactive.resource.ResourceWebHandler . setResourceResolvers ( java.util.Collections . java.util.List ( org.springframework.web.reactive.resource.PathResourceResolver ) ) ; org.springframework.web.reactive.resource.ResourceWebHandler . setLocations ( java.util.Arrays . java.util.List ( org.springframework.web.reactive.resource.ClassPathResource , org.springframework.web.reactive.resource.ClassPathResource ) ) ; org.springframework.web.reactive.resource.ResourceWebHandler . afterPropertiesSet ( ) ; org.springframework.web.reactive.resource.ResourceWebHandler . afterSingletonsInstantiated ( ) ; Resource [] org.springframework.web.reactive.resource.Resource[] = org.springframework.web.reactive.resource.PathResourceResolver . getAllowedLocations ( ) ; assertEquals ( NUMBER , locations . length ) ; assertEquals ( STRING , ( ( ClassPathResource ) org.springframework.web.reactive.resource.Resource[] [ NUMBER ] ) . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . ifModifiedSince ( long ( STRING ) ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( HttpStatus . NOT_MODIFIED , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = long ( STRING ) / NUMBER * NUMBER - NUMBER ; MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . ifModifiedSince ( long ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertNull ( org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertNull ( org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MethodNotAllowedException .class ) public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . post ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( HttpMethod org.springframework.web.reactive.resource.HttpMethod : HttpMethod . values ( ) ) { void ( org.springframework.web.reactive.resource.HttpMethod ) ; } }  <METHOD_END>
<METHOD_START> private void void ( HttpMethod org.springframework.web.reactive.resource.HttpMethod ) throws java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . method ( org.springframework.web.reactive.resource.HttpMethod , STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( HttpStatus . PARTIAL_CONTENT , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( MediaType . TEXT_PLAIN , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentLength ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getFirst ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getFirst ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . get ( STRING ) . size ( ) ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( HttpStatus . PARTIAL_CONTENT , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( MediaType . TEXT_PLAIN , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentLength ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getFirst ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getFirst ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . get ( STRING ) . size ( ) ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( HttpStatus . PARTIAL_CONTENT , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( MediaType . TEXT_PLAIN , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentLength ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getFirst ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getFirst ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . get ( STRING ) . size ( ) ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( HttpStatus . PARTIAL_CONTENT , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( MediaType . TEXT_PLAIN , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentLength ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getFirst ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getFirst ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . get ( STRING ) . size ( ) ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( HttpStatus . PARTIAL_CONTENT , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( MediaType . TEXT_PLAIN , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentLength ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getFirst ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getFirst ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . get ( STRING ) . size ( ) ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; StepVerifier . create ( this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) ) . expectNextCount ( NUMBER ) . expectComplete ( ) . verify ( ) ; assertEquals ( HttpStatus . REQUESTED_RANGE_NOT_SATISFIABLE , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( HttpStatus . PARTIAL_CONTENT , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertTrue ( org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentType ( ) . toString ( ) . startsWith ( STRING ) ) ; java.lang.String java.lang.String = STRING + org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentType ( ) . toString ( ) . substring ( NUMBER ) ; Mono < DataBuffer > org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.DataBuffer> = Flux . from ( org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getBody ( ) ) . reduce ( this . org.springframework.web.reactive.resource.DataBufferFactory . allocateBuffer ( ) , ( previous , current ) -> { previous . write ( current ) ; DataBufferUtils . release ( current ) ; return previous ; } ) ; StepVerifier . create ( org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.DataBuffer> ) . consumeNextWith ( buf -> { String content = DataBufferTestUtils . dumpString ( buf , StandardCharsets . UTF_8 ) ; String [] ranges = StringUtils . tokenizeToStringArray ( content , STRING , false , true ) ; assertEquals ( boundary , ranges [ NUMBER ] ) ; assertEquals ( STRING , ranges [ NUMBER ] ) ; assertEquals ( STRING , ranges [ NUMBER ] ) ; assertEquals ( STRING , ranges [ NUMBER ] ) ; assertEquals ( boundary , ranges [ NUMBER ] ) ; assertEquals ( STRING , ranges [ NUMBER ] ) ; assertEquals ( STRING , ranges [ NUMBER ] ) ; assertEquals ( STRING , ranges [ NUMBER ] ) ; assertEquals ( boundary , ranges [ NUMBER ] ) ; assertEquals ( STRING , ranges [ NUMBER ] ) ; assertEquals ( STRING , ranges [ NUMBER ] ) ; assertEquals ( STRING , ranges [ NUMBER ] ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . setCacheControl ( CacheControl . noStore ( ) . getHeaderValue ( ) ) ; void ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . handle ( org.springframework.web.reactive.resource.MockServerWebExchange ) . block ( java.time.Duration ) ; assertEquals ( STRING , org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getCacheControl ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String java.lang.String ) { org.springframework.web.reactive.resource.ServerWebExchange . getAttributes ( ) . put ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private long long ( java.lang.String java.lang.String ) throws java.io.IOException { return new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.web.reactive.resource.ResourceWebHandlerTests> ( ) ) . getFile ( ) . lastModified ( ) ; }  <METHOD_END>
<METHOD_START> private long long ( java.lang.String java.lang.String ) throws java.io.IOException { return new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.web.reactive.resource.ResourceWebHandlerTests> ( ) ) . getFile ( ) . lastModified ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange , java.lang.String java.lang.String ) { StepVerifier . create ( org.springframework.web.reactive.resource.MockServerWebExchange . getResponse ( ) . getBody ( ) ) . consumeNextWith ( buf -> assertEquals ( responseBody , DataBufferTestUtils . dumpString ( buf , StandardCharsets . UTF_8 ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
