<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletResponse . setContentType ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( WebUtils . DEFAULT_CHARACTER_ENCODING , org.springframework.mock.web.MockHttpServletResponse . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletResponse . setContentType ( java.lang.String ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getCharacterEncoding ( ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletResponse . addHeader ( STRING , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( WebUtils . DEFAULT_CHARACTER_ENCODING , org.springframework.mock.web.MockHttpServletResponse . getCharacterEncoding ( ) ) ; org.springframework.mock.web.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.mock.web.MockHttpServletResponse . setHeader ( STRING , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( WebUtils . DEFAULT_CHARACTER_ENCODING , org.springframework.mock.web.MockHttpServletResponse . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletResponse . setHeader ( STRING , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getCharacterEncoding ( ) ) ; org.springframework.mock.web.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.mock.web.MockHttpServletResponse . addHeader ( STRING , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletResponse . setHeader ( STRING , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getCharacterEncoding ( ) ) ; org.springframework.mock.web.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.mock.web.MockHttpServletResponse . addHeader ( STRING , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletResponse . setContentType ( STRING ) ; org.springframework.mock.web.MockHttpServletResponse . setCharacterEncoding ( STRING ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletResponse . setCharacterEncoding ( STRING ) ; org.springframework.mock.web.MockHttpServletResponse . setContentType ( STRING ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletResponse . setContentLength ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockHttpServletResponse . getContentLength ( ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletResponse . addHeader ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockHttpServletResponse . getContentLength ( ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletResponse . addIntHeader ( STRING , NUMBER ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockHttpServletResponse . getContentLength ( ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletResponse . addHeader ( java.lang.String , STRING ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = org.springframework.mock.web.MockHttpServletResponse . getHeaderNames ( ) ; assertNotNull ( java.util.Collection<java.lang.String> ) ; assertEquals ( NUMBER , java.util.Collection<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.lang.String , java.util.Collection<java.lang.String> . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertFalse ( org.springframework.mock.web.MockHttpServletResponse . isCommitted ( ) ) ; org.springframework.mock.web.MockHttpServletResponse . getOutputStream ( ) . write ( 'X' ) ; assertFalse ( org.springframework.mock.web.MockHttpServletResponse . isCommitted ( ) ) ; int int = org.springframework.mock.web.MockHttpServletResponse . getBufferSize ( ) ; org.springframework.mock.web.MockHttpServletResponse . getOutputStream ( ) . write ( new byte [ int ] ) ; assertTrue ( org.springframework.mock.web.MockHttpServletResponse . isCommitted ( ) ) ; assertEquals ( int + NUMBER , org.springframework.mock.web.MockHttpServletResponse . getContentAsByteArray ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertFalse ( org.springframework.mock.web.MockHttpServletResponse . isCommitted ( ) ) ; org.springframework.mock.web.MockHttpServletResponse . getOutputStream ( ) . write ( 'X' ) ; assertFalse ( org.springframework.mock.web.MockHttpServletResponse . isCommitted ( ) ) ; org.springframework.mock.web.MockHttpServletResponse . flushBuffer ( ) ; assertTrue ( org.springframework.mock.web.MockHttpServletResponse . isCommitted ( ) ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockHttpServletResponse . getContentAsByteArray ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertFalse ( org.springframework.mock.web.MockHttpServletResponse . isCommitted ( ) ) ; org.springframework.mock.web.MockHttpServletResponse . getWriter ( ) . write ( STRING ) ; assertFalse ( org.springframework.mock.web.MockHttpServletResponse . isCommitted ( ) ) ; int int = org.springframework.mock.web.MockHttpServletResponse . getBufferSize ( ) ; char [] char[] = new char [ int ] ; java.util.Arrays . void ( char[] , 'p' ) ; org.springframework.mock.web.MockHttpServletResponse . getWriter ( ) . write ( char[] ) ; assertTrue ( org.springframework.mock.web.MockHttpServletResponse . isCommitted ( ) ) ; assertEquals ( int + NUMBER , org.springframework.mock.web.MockHttpServletResponse . getContentAsByteArray ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertFalse ( org.springframework.mock.web.MockHttpServletResponse . isCommitted ( ) ) ; org.springframework.mock.web.MockHttpServletResponse . getOutputStream ( ) . write ( 'X' ) ; assertFalse ( org.springframework.mock.web.MockHttpServletResponse . isCommitted ( ) ) ; org.springframework.mock.web.MockHttpServletResponse . getOutputStream ( ) . flush ( ) ; assertTrue ( org.springframework.mock.web.MockHttpServletResponse . isCommitted ( ) ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockHttpServletResponse . getContentAsByteArray ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertFalse ( org.springframework.mock.web.MockHttpServletResponse . isCommitted ( ) ) ; org.springframework.mock.web.MockHttpServletResponse . getWriter ( ) . write ( STRING ) ; assertFalse ( org.springframework.mock.web.MockHttpServletResponse . isCommitted ( ) ) ; org.springframework.mock.web.MockHttpServletResponse . getWriter ( ) . flush ( ) ; assertTrue ( org.springframework.mock.web.MockHttpServletResponse . isCommitted ( ) ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockHttpServletResponse . getContentAsByteArray ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { org.springframework.mock.web.MockHttpServletResponse . getWriter ( ) . write ( STRING ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { org.springframework.mock.web.MockHttpServletResponse . getWriter ( ) . write ( 'X' ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { org.springframework.mock.web.MockHttpServletResponse . getWriter ( ) . write ( STRING . char[] ( ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletResponse . sendRedirect ( java.lang.String ) ; assertEquals ( HttpServletResponse . SC_MOVED_TEMPORARILY , org.springframework.mock.web.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getRedirectedUrl ( ) ) ; assertTrue ( org.springframework.mock.web.MockHttpServletResponse . isCommitted ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletResponse . setHeader ( STRING , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getRedirectedUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletResponse . setDateHeader ( STRING , NUMBER ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletResponse . addDateHeader ( STRING , NUMBER ) ; org.springframework.mock.web.MockHttpServletResponse . addDateHeader ( STRING , NUMBER ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getHeaders ( STRING ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getHeaders ( STRING ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = NUMBER ; org.springframework.mock.web.MockHttpServletResponse . setDateHeader ( STRING , long ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( long , org.springframework.mock.web.MockHttpServletResponse . getDateHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.mock.web.MockHttpServletResponse . setHeader ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletResponse . getHeader ( STRING ) ) ; org.springframework.mock.web.MockHttpServletResponse . getDateHeader ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { org.springframework.mock.web.MockHttpServletResponse . sendError ( HttpServletResponse . SC_NOT_FOUND ) ; org.springframework.mock.web.MockHttpServletResponse . setStatus ( HttpServletResponse . SC_OK ) ; assertEquals ( org.springframework.mock.web.MockHttpServletResponse . getStatus ( ) , HttpServletResponse . SC_NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.io.IOException { org.springframework.mock.web.MockHttpServletResponse . sendError ( HttpServletResponse . SC_NOT_FOUND ) ; org.springframework.mock.web.MockHttpServletResponse . setStatus ( HttpServletResponse . SC_INTERNAL_SERVER_ERROR , STRING ) ; assertEquals ( org.springframework.mock.web.MockHttpServletResponse . getStatus ( ) , HttpServletResponse . SC_NOT_FOUND ) ; }  <METHOD_END>
