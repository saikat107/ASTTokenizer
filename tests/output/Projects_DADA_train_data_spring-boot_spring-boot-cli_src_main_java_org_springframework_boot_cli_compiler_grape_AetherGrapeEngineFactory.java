<METHOD_START> public static org.springframework.boot.cli.compiler.grape.AetherGrapeEngine org.springframework.boot.cli.compiler.grape.AetherGrapeEngine ( GroovyClassLoader org.springframework.boot.cli.compiler.grape.GroovyClassLoader , java.util.List<org.springframework.boot.cli.compiler.grape.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.grape.RepositoryConfiguration> , DependencyResolutionContext org.springframework.boot.cli.compiler.grape.DependencyResolutionContext ) { RepositorySystem org.springframework.boot.cli.compiler.grape.RepositorySystem = org.springframework.boot.cli.compiler.grape.ServiceLocator ( ) . getService ( RepositorySystem .class ) ; DefaultRepositorySystemSession org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession = MavenRepositorySystemUtils . newSession ( ) ; java.util.ServiceLoader<org.springframework.boot.cli.compiler.grape.RepositorySystemSessionAutoConfiguration> < RepositorySystemSessionAutoConfiguration > java.util.ServiceLoader<org.springframework.boot.cli.compiler.grape.RepositorySystemSessionAutoConfiguration> = java.util.ServiceLoader . java.util.ServiceLoader<org.springframework.boot.cli.compiler.grape.RepositorySystemSessionAutoConfiguration> ( RepositorySystemSessionAutoConfiguration .class ) ; for ( RepositorySystemSessionAutoConfiguration org.springframework.boot.cli.compiler.grape.RepositorySystemSessionAutoConfiguration : java.util.ServiceLoader<org.springframework.boot.cli.compiler.grape.RepositorySystemSessionAutoConfiguration> ) { org.springframework.boot.cli.compiler.grape.RepositorySystemSessionAutoConfiguration . apply ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , org.springframework.boot.cli.compiler.grape.RepositorySystem ) ; } new DefaultRepositorySystemSessionAutoConfiguration ( ) . apply ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , org.springframework.boot.cli.compiler.grape.RepositorySystem ) ; return new AetherGrapeEngine ( org.springframework.boot.cli.compiler.grape.GroovyClassLoader , org.springframework.boot.cli.compiler.grape.RepositorySystem , org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> ( java.util.List<org.springframework.boot.cli.compiler.grape.RepositoryConfiguration> ) , org.springframework.boot.cli.compiler.grape.DependencyResolutionContext ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.boot.cli.compiler.grape.ServiceLocator org.springframework.boot.cli.compiler.grape.ServiceLocator ( ) { DefaultServiceLocator org.springframework.boot.cli.compiler.grape.DefaultServiceLocator = MavenRepositorySystemUtils . newServiceLocator ( ) ; org.springframework.boot.cli.compiler.grape.DefaultServiceLocator . addService ( RepositorySystem .class , DefaultRepositorySystem .class ) ; org.springframework.boot.cli.compiler.grape.DefaultServiceLocator . addService ( RepositoryConnectorFactory .class , BasicRepositoryConnectorFactory .class ) ; org.springframework.boot.cli.compiler.grape.DefaultServiceLocator . addService ( TransporterFactory .class , HttpTransporterFactory .class ) ; org.springframework.boot.cli.compiler.grape.DefaultServiceLocator . addService ( TransporterFactory .class , FileTransporterFactory .class ) ; return org.springframework.boot.cli.compiler.grape.DefaultServiceLocator ; }  <METHOD_END>
<METHOD_START> private static java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> < RemoteRepository > java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> ( java.util.List<org.springframework.boot.cli.compiler.grape.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.grape.RepositoryConfiguration> ) { java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> < RemoteRepository > java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> = new java.util.ArrayList <> ( java.util.List<org.springframework.boot.cli.compiler.grape.RepositoryConfiguration> . size ( ) ) ; for ( RepositoryConfiguration org.springframework.boot.cli.compiler.grape.RepositoryConfiguration : java.util.List<org.springframework.boot.cli.compiler.grape.RepositoryConfiguration> ) { RemoteRepository . RemoteRepository RemoteRepository.Builder = new RemoteRepository . RemoteRepository ( org.springframework.boot.cli.compiler.grape.RepositoryConfiguration . getName ( ) , STRING , org.springframework.boot.cli.compiler.grape.RepositoryConfiguration . getUri ( ) . toASCIIString ( ) ) ; if ( ! org.springframework.boot.cli.compiler.grape.RepositoryConfiguration . getSnapshotsEnabled ( ) ) { RemoteRepository.Builder . setSnapshotPolicy ( new RepositoryPolicy ( false , RepositoryPolicy . UPDATE_POLICY_NEVER , RepositoryPolicy . CHECKSUM_POLICY_IGNORE ) ) ; } java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> . add ( RemoteRepository.Builder . build ( ) ) ; } return java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> ; }  <METHOD_END>
