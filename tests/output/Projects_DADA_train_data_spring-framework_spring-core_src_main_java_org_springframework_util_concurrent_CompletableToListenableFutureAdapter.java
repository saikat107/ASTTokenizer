<METHOD_START> public void ( java.util.concurrent.CompletionStage<T> < T > java.util.concurrent.CompletionStage<T> ) { this( java.util.concurrent.CompletionStage<T> . java.util.concurrent.CompletableFuture<T> ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.util.concurrent.CompletableFuture<T> < T > java.util.concurrent.CompletableFuture<T> ) { this . java.util.concurrent.CompletableFuture<T> = java.util.concurrent.CompletableFuture<T> ; this . java.util.concurrent.CompletableFuture<T> . java.util.concurrent.CompletableFuture<java.lang.Object> ( new java.util.function.BiFunction<T,java.lang.Throwable,java.lang.Object> < T , java.lang.Throwable , java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( T T , java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable != null ) { org.springframework.util.concurrent.ListenableFutureCallbackRegistry<T> . failure ( java.lang.Throwable ) ; } else { org.springframework.util.concurrent.ListenableFutureCallbackRegistry<T> . success ( T ) ; } return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( T T , java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable != null ) { org.springframework.util.concurrent.ListenableFutureCallbackRegistry<T> . failure ( java.lang.Throwable ) ; } else { org.springframework.util.concurrent.ListenableFutureCallbackRegistry<T> . success ( T ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ListenableFutureCallback < ? super T > org.springframework.util.concurrent.ListenableFutureCallback<? super T> ) { this . org.springframework.util.concurrent.ListenableFutureCallbackRegistry<T> . addCallback ( org.springframework.util.concurrent.ListenableFutureCallback<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( SuccessCallback < ? super T > org.springframework.util.concurrent.SuccessCallback<? super T> , FailureCallback org.springframework.util.concurrent.FailureCallback ) { this . org.springframework.util.concurrent.ListenableFutureCallbackRegistry<T> . addSuccessCallback ( org.springframework.util.concurrent.SuccessCallback<> ) ; this . org.springframework.util.concurrent.ListenableFutureCallbackRegistry<T> . addFailureCallback ( org.springframework.util.concurrent.FailureCallback ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( boolean boolean ) { return this . java.util.concurrent.CompletableFuture<T> . boolean ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.concurrent.CompletableFuture<T> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.concurrent.CompletableFuture<T> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) java.lang.InterruptedException , java.util.concurrent.ExecutionException { return this . java.util.concurrent.CompletableFuture<T> . T ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( long long , java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) throws java.lang.InterruptedException , java.util.concurrent.ExecutionException , java.util.concurrent.TimeoutException { return this . java.util.concurrent.CompletableFuture<T> . T ( long , java.util.concurrent.TimeUnit ) ; }  <METHOD_END>
