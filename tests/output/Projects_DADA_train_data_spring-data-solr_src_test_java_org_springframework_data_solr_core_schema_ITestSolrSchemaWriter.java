<METHOD_START> @ Before public void void ( ) { org.springframework.data.solr.core.schema.SolrClient = org.springframework.data.solr.core.schema.EmbeddedSolrServer . getSolrClient ( STRING ) ; org.springframework.data.solr.core.schema.SolrClientFactory = new HttpSolrClientFactory ( org.springframework.data.solr.core.schema.SolrClient ) ; org.springframework.data.solr.core.schema.SolrSchemaWriter = new SolrSchemaWriter ( org.springframework.data.solr.core.schema.SolrClientFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Double java.lang.Double = org.springframework.data.solr.core.schema.SolrSchemaWriter . retrieveSchemaVersion ( STRING ) ; assertThat ( java.lang.Double , is ( closeTo ( NUMBER , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) { SchemaDefinition org.springframework.data.solr.core.schema.SchemaDefinition = new SchemaDefinition ( STRING ) ; org.springframework.data.solr.core.schema.SolrSchemaWriter . writeSchema ( org.springframework.data.solr.core.schema.SchemaDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SchemaDefinition org.springframework.data.solr.core.schema.SchemaDefinition = org.springframework.data.solr.core.schema.SolrSchemaWriter . loadExistingSchema ( STRING ) ; assertThat ( org.springframework.data.solr.core.schema.SchemaDefinition , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SchemaDefinition org.springframework.data.solr.core.schema.SchemaDefinition = new SchemaDefinition ( STRING ) ; FieldDefinition org.springframework.data.solr.core.schema.FieldDefinition = new FieldDefinition ( ) ; org.springframework.data.solr.core.schema.FieldDefinition . setName ( STRING ) ; org.springframework.data.solr.core.schema.FieldDefinition . setType ( STRING ) ; org.springframework.data.solr.core.schema.FieldDefinition . setStored ( true ) ; org.springframework.data.solr.core.schema.FieldDefinition . setIndexed ( false ) ; org.springframework.data.solr.core.schema.SchemaDefinition . setFields ( java.util.Collections . java.util.List ( org.springframework.data.solr.core.schema.FieldDefinition ) ) ; org.springframework.data.solr.core.schema.SolrSchemaWriter . writeSchema ( org.springframework.data.solr.core.schema.SchemaDefinition ) ; }  <METHOD_END>
