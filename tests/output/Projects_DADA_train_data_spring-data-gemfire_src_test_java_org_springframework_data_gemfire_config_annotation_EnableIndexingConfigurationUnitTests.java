<METHOD_START> @ After public void void ( ) { java.util.Optional . java.util.Optional ( this . org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ) . ifPresent ( ConfigurableApplicationContext :: close ) ; java.util.Set<org.springframework.data.gemfire.config.annotation.Index> . clear ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Index org.springframework.data.gemfire.config.annotation.Index , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , IndexType org.springframework.data.gemfire.config.annotation.IndexType ) { assertThat ( org.springframework.data.gemfire.config.annotation.Index ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.Index . getName ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.annotation.Index . getIndexedExpression ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.annotation.Index . getFromClause ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.annotation.Index . getType ( ) ) . isEqualTo ( org.springframework.data.gemfire.config.annotation.IndexType . getGemfireIndexType ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( LuceneIndex org.springframework.data.gemfire.config.annotation.LuceneIndex , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { assertThat ( org.springframework.data.gemfire.config.annotation.LuceneIndex ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.LuceneIndex . getName ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.annotation.LuceneIndex . getRegionPath ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.annotation.LuceneIndex . getFieldNames ( ) ) . contains ( java.lang.String[] ) ; assertThat ( org.springframework.data.gemfire.config.annotation.LuceneIndex . getFieldNames ( ) ) . hasSize ( java.lang.String[] . int ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { ConfigurableApplicationContext org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( java.lang.Class<?>[] ) ; org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . registerShutdownHook ( ) ; return org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableIndexingConfigurationUnitTests.IndexedPersistentEntityConfiguration .class ) ; void ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ) ; void ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableApplicationContext org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ) { LuceneIndex org.springframework.data.gemfire.config.annotation.LuceneIndex = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , LuceneIndex .class ) ; void ( org.springframework.data.gemfire.config.annotation.LuceneIndex , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableApplicationContext org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ) { Index org.springframework.data.gemfire.config.annotation.Index = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Index .class ) ; void ( org.springframework.data.gemfire.config.annotation.Index , STRING , STRING , STRING , IndexType . KEY ) ; Index org.springframework.data.gemfire.config.annotation.Index = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Index .class ) ; void ( org.springframework.data.gemfire.config.annotation.Index , STRING , STRING , STRING , IndexType . FUNCTIONAL ) ; Index org.springframework.data.gemfire.config.annotation.Index = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Index .class ) ; void ( org.springframework.data.gemfire.config.annotation.Index , STRING , STRING , STRING , IndexType . HASH ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableIndexingConfigurationUnitTests.NoIndexesCreatedForIndexedPersistentEntityConfiguration .class ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.annotation.Index> < java.lang.String , Index > java.util.Map<java.lang.String,org.springframework.data.gemfire.config.annotation.Index> = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBeansOfType ( Index .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.annotation.Index> ) . isNotNull ( ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.annotation.Index> . isEmpty ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableIndexingConfigurationUnitTests.IndexAnnotatedEntityPropertyDoesNotOverrideBeanDefinitionConfiguration .class ) ; Index org.springframework.data.gemfire.config.annotation.Index = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Index .class ) ; void ( org.springframework.data.gemfire.config.annotation.Index , STRING , STRING , STRING , IndexType . HASH ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableIndexingConfigurationUnitTests.IndexAnnotatedEntityPropertyOverridesIndexBeanDefinitionConfiguration .class ) ; Index org.springframework.data.gemfire.config.annotation.Index = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Index .class ) ; void ( org.springframework.data.gemfire.config.annotation.Index , STRING , STRING , STRING , IndexType . FUNCTIONAL ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.SuppressWarnings ( STRING ) org.springframework.data.gemfire.config.annotation.Cache org.springframework.data.gemfire.config.annotation.Cache ( ) java.lang.Exception { return org.springframework.data.gemfire.config.annotation.Cache ( org.springframework.data.gemfire.config.annotation.Cache ( mock ( Cache .class , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.config.annotation.Cache org.springframework.data.gemfire.config.annotation.Cache ( Cache org.springframework.data.gemfire.config.annotation.Cache ) throws java.lang.Exception { QueryService org.springframework.data.gemfire.config.annotation.QueryService = mock ( QueryService .class ) ; when ( org.springframework.data.gemfire.config.annotation.Cache . getQueryService ( ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.QueryService ) ; when ( org.springframework.data.gemfire.config.annotation.QueryService . getIndexes ( ) ) . thenReturn ( java.util.Set<org.springframework.data.gemfire.config.annotation.Index> ) ; when ( org.springframework.data.gemfire.config.annotation.QueryService . createHashIndex ( anyString ( ) , anyString ( ) , anyString ( ) ) ) . thenAnswer ( new org.springframework.data.gemfire.config.annotation.EnableIndexingConfigurationUnitTests.HashIndexAnswer ( ) ) ; when ( org.springframework.data.gemfire.config.annotation.QueryService . createIndex ( anyString ( ) , anyString ( ) , anyString ( ) ) ) . thenAnswer ( new org.springframework.data.gemfire.config.annotation.EnableIndexingConfigurationUnitTests.FunctionalIndexAnswer ( ) ) ; when ( org.springframework.data.gemfire.config.annotation.QueryService . createKeyIndex ( anyString ( ) , anyString ( ) , anyString ( ) ) ) . thenAnswer ( new org.springframework.data.gemfire.config.annotation.EnableIndexingConfigurationUnitTests.KeyIndexAnswer ( ) ) ; return org.springframework.data.gemfire.config.annotation.Cache ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) org.springframework.data.gemfire.config.annotation.Cache org.springframework.data.gemfire.config.annotation.Cache ( Cache org.springframework.data.gemfire.config.annotation.Cache ) { RegionFactory org.springframework.data.gemfire.config.annotation.RegionFactory = mock ( RegionFactory .class ) ; when ( org.springframework.data.gemfire.config.annotation.Cache . createRegionFactory ( ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.RegionFactory ) ; when ( org.springframework.data.gemfire.config.annotation.Cache . createRegionFactory ( any ( RegionAttributes .class ) ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.RegionFactory ) ; when ( org.springframework.data.gemfire.config.annotation.Cache . createRegionFactory ( any ( RegionShortcut .class ) ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.RegionFactory ) ; when ( org.springframework.data.gemfire.config.annotation.Cache . createRegionFactory ( anyString ( ) ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.RegionFactory ) ; return org.springframework.data.gemfire.config.annotation.Cache ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.config.annotation.LuceneService org.springframework.data.gemfire.config.annotation.LuceneService ( ) { LuceneService org.springframework.data.gemfire.config.annotation.LuceneService = mock ( LuceneService .class ) ; doAnswer ( invocation -> { LuceneIndex mockLuceneIndex = mock ( LuceneIndex .class ) ; String indexName = invocation . getArgument ( NUMBER ) ; String regionPath = invocation . getArgument ( NUMBER ) ; when ( mockLuceneIndex . getName ( ) ) . thenReturn ( indexName ) ; when ( mockLuceneIndex . getRegionPath ( ) ) . thenReturn ( regionPath ) ; when ( mockLuceneIndex . getFieldNames ( ) ) . thenReturn ( resolveFieldNames ( invocation ) ) ; when ( mockLuceneService . getIndex ( eq ( indexName ) , eq ( regionPath ) ) ) . thenReturn ( mockLuceneIndex ) ; return mockLuceneIndex ; } ) . when ( org.springframework.data.gemfire.config.annotation.LuceneService ) . createIndex ( anyString ( ) , anyString ( ) , Matchers .< java.lang.String [] > anyVararg ( ) ) ; return org.springframework.data.gemfire.config.annotation.LuceneService ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) java.lang.String [] java.lang.String[] ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) { java.lang.String [] java.lang.String[] = new java.lang.String [ org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArguments ( ) . length - NUMBER ] ; java.lang.System . void ( org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArguments ( ) , NUMBER , java.lang.String[] , NUMBER , java.lang.String[] . int ) ; return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.config.annotation.Index org.springframework.data.gemfire.config.annotation.Index ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; java.lang.String java.lang.String = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; java.lang.String java.lang.String = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; Index org.springframework.data.gemfire.config.annotation.Index = mock ( Index .class , java.lang.String ) ; when ( org.springframework.data.gemfire.config.annotation.Index . getName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.config.annotation.Index . getIndexedExpression ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.config.annotation.Index . getFromClause ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.config.annotation.Index . getType ( ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.IndexType ( ) . getGemfireIndexType ( ) ) ; java.util.Set<org.springframework.data.gemfire.config.annotation.Index> . add ( org.springframework.data.gemfire.config.annotation.Index ) ; return org.springframework.data.gemfire.config.annotation.Index ; }  <METHOD_END>
<METHOD_START> abstract org.springframework.data.gemfire.config.annotation.IndexType org.springframework.data.gemfire.config.annotation.IndexType ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.config.annotation.IndexType org.springframework.data.gemfire.config.annotation.IndexType ( ) { return IndexType . FUNCTIONAL ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.config.annotation.IndexType org.springframework.data.gemfire.config.annotation.IndexType ( ) { return IndexType . HASH ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.config.annotation.IndexType org.springframework.data.gemfire.config.annotation.IndexType ( ) { return IndexType . KEY ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.SuppressWarnings ( STRING ) org.springframework.data.gemfire.config.annotation.IndexFactoryBean org.springframework.data.gemfire.config.annotation.IndexFactoryBean ( GemFireCache org.springframework.data.gemfire.config.annotation.GemFireCache ) { IndexFactoryBean org.springframework.data.gemfire.config.annotation.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.config.annotation.IndexFactoryBean . setCache ( org.springframework.data.gemfire.config.annotation.GemFireCache ) ; org.springframework.data.gemfire.config.annotation.IndexFactoryBean . setExpression ( STRING ) ; org.springframework.data.gemfire.config.annotation.IndexFactoryBean . setFrom ( STRING ) ; org.springframework.data.gemfire.config.annotation.IndexFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.config.annotation.IndexFactoryBean . setType ( IndexType . HASH ) ; return org.springframework.data.gemfire.config.annotation.IndexFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.SuppressWarnings ( STRING ) org.springframework.data.gemfire.config.annotation.IndexFactoryBean org.springframework.data.gemfire.config.annotation.IndexFactoryBean ( GemFireCache org.springframework.data.gemfire.config.annotation.GemFireCache ) { IndexFactoryBean org.springframework.data.gemfire.config.annotation.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.config.annotation.IndexFactoryBean . setCache ( org.springframework.data.gemfire.config.annotation.GemFireCache ) ; org.springframework.data.gemfire.config.annotation.IndexFactoryBean . setExpression ( STRING ) ; org.springframework.data.gemfire.config.annotation.IndexFactoryBean . setFrom ( STRING ) ; org.springframework.data.gemfire.config.annotation.IndexFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.config.annotation.IndexFactoryBean . setType ( IndexType . HASH ) ; return org.springframework.data.gemfire.config.annotation.IndexFactoryBean ; }  <METHOD_END>
