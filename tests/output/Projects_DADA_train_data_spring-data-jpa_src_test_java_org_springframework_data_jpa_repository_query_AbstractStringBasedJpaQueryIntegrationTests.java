<METHOD_START> @ Test public void void ( ) java.lang.Exception { EntityManager org.springframework.data.jpa.repository.query.EntityManager = mock ( EntityManager .class ) ; when ( org.springframework.data.jpa.repository.query.EntityManager . getEntityManagerFactory ( ) ) . thenReturn ( org.springframework.data.jpa.repository.query.EntityManager . getEntityManagerFactory ( ) ) ; when ( org.springframework.data.jpa.repository.query.EntityManager . getMetamodel ( ) ) . thenReturn ( org.springframework.data.jpa.repository.query.EntityManager . getMetamodel ( ) ) ; JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = org.springframework.data.jpa.repository.query.JpaQueryMethod ( STRING , java.lang.String .class ) ; AbstractStringBasedJpaQuery org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery = new SimpleJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , DefaultEvaluationContextProvider . INSTANCE , new SpelExpressionParser ( ) ) ; org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery . createJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod . getAnnotatedQuery ( ) ) ; verify ( org.springframework.data.jpa.repository.query.EntityManager , times ( NUMBER ) ) . createQuery ( anyString ( ) ) ; verify ( org.springframework.data.jpa.repository.query.EntityManager , times ( NUMBER ) ) . createQuery ( anyString ( ) , eq ( Tuple .class ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQueryIntegrationTests.SampleRepository .class . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; PersistenceProvider org.springframework.data.jpa.repository.query.PersistenceProvider = PersistenceProvider . fromEntityManager ( org.springframework.data.jpa.repository.query.EntityManager ) ; return new JpaQueryMethod ( java.lang.reflect.Method , new DefaultRepositoryMetadata ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQueryIntegrationTests.SampleRepository .class ) , new SpelAwareProxyProjectionFactory ( ) , org.springframework.data.jpa.repository.query.PersistenceProvider ) ; }  <METHOD_END>
<METHOD_START> @ org . springframework . data . jpa . repository . org.springframework.data.jpa.repository.Query ( STRING ) java.util.Set<org.springframework.data.jpa.repository.query.Role> < Role > java.util.Set<org.springframework.data.jpa.repository.query.Role> ( java.lang.String java.lang.String );  <METHOD_END>
