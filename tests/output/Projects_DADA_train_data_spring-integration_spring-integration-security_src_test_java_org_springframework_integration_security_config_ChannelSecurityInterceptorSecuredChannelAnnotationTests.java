<METHOD_START> @ After public void void ( ) { SecurityContextHolder . clearContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = AccessDeniedException .class ) public void void ( ) { void ( STRING , STRING , STRING ) ; org.springframework.integration.security.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING , STRING ) ; org.springframework.integration.security.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.security.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.security.config.TestHandler . sentMessages . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = AccessDeniedException .class ) public void void ( ) { void ( STRING , STRING , STRING ) ; org.springframework.integration.security.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = AccessDeniedException .class ) public void void ( ) { void ( STRING , STRING , STRING ) ; org.springframework.integration.security.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = AuthenticationException .class ) public void void ( ) { org.springframework.integration.security.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING ) ; org.springframework.integration.security.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.security.config.TestHandler . sentMessages . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING ) ; org.springframework.integration.security.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.security.config.TestHandler . sentMessages . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.security.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.security.config.TestHandler . sentMessages . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING , STRING ) ; this . org.springframework.integration.security.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.security.config.Message<?> = this . org.springframework.integration.security.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.security.config.Message<> ) ; SecurityContextHolder . clearContext ( ) ; this . org.springframework.integration.security.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.security.config.Message<?> = this . org.springframework.integration.security.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.security.config.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.security.config.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( MessageHandlingException .class ) ) ; assertThat ( ( ( MessageHandlingException ) java.lang.Object ) . getCause ( ) , instanceOf ( AuthenticationCredentialsNotFoundException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING , STRING ) ; this . org.springframework.integration.security.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.security.config.Message<?> = this . org.springframework.integration.security.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.security.config.Message<> ) ; SecurityContextHolder . clearContext ( ) ; this . org.springframework.integration.security.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.security.config.Message<?> = this . org.springframework.integration.security.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.security.config.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.security.config.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( MessageHandlingException .class ) ) ; assertThat ( ( ( MessageHandlingException ) java.lang.Object ) . getCause ( ) , instanceOf ( AuthenticationCredentialsNotFoundException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING , STRING ) ; this . org.springframework.integration.security.config.PublishSubscribeChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.security.config.Message<?> = this . org.springframework.integration.security.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.security.config.Message<> ) ; IntegrationMessageHeaderAccessor org.springframework.integration.security.config.IntegrationMessageHeaderAccessor = new IntegrationMessageHeaderAccessor ( org.springframework.integration.security.config.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.security.config.IntegrationMessageHeaderAccessor . getSequenceNumber ( ) ) ; org.springframework.integration.security.config.Message<?> = this . org.springframework.integration.security.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.security.config.Message<> ) ; org.springframework.integration.security.config.IntegrationMessageHeaderAccessor = new IntegrationMessageHeaderAccessor ( org.springframework.integration.security.config.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.security.config.IntegrationMessageHeaderAccessor . getSequenceNumber ( ) ) ; this . org.springframework.integration.security.config.PublishSubscribeChannel . setApplySequence ( true ) ; this . org.springframework.integration.security.config.PublishSubscribeChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.security.config.Message<?> = this . org.springframework.integration.security.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.security.config.Message<> ) ; org.springframework.integration.security.config.IntegrationMessageHeaderAccessor = new IntegrationMessageHeaderAccessor ( org.springframework.integration.security.config.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.security.config.IntegrationMessageHeaderAccessor . getSequenceNumber ( ) ) ; org.springframework.integration.security.config.Message<?> = this . org.springframework.integration.security.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.security.config.Message<> ) ; org.springframework.integration.security.config.IntegrationMessageHeaderAccessor = new IntegrationMessageHeaderAccessor ( org.springframework.integration.security.config.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.security.config.IntegrationMessageHeaderAccessor . getSequenceNumber ( ) ) ; this . org.springframework.integration.security.config.PublishSubscribeChannel . setApplySequence ( false ) ; SecurityContextHolder . clearContext ( ) ; this . org.springframework.integration.security.config.PublishSubscribeChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.security.config.Message<?> = this . org.springframework.integration.security.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.security.config.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.security.config.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( MessageHandlingException .class ) ) ; assertThat ( ( ( MessageHandlingException ) java.lang.Object ) . getCause ( ) , instanceOf ( AuthenticationCredentialsNotFoundException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING , STRING , STRING ) ; java.util.concurrent.Future<java.lang.String> < java.lang.String > java.util.concurrent.Future<java.lang.String> = this . org.springframework.integration.security.config.ChannelSecurityInterceptorSecuredChannelAnnotationTests.TestGateway . java.util.concurrent.Future<java.lang.String> ( STRING ) ; Message < ? > org.springframework.integration.security.config.Message<?> = this . org.springframework.integration.security.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.security.config.Message<> ) ; MessageChannel org.springframework.integration.security.config.MessageChannel = org.springframework.integration.security.config.Message<> . getHeaders ( ) . get ( MessageHeaders . REPLY_CHANNEL , MessageChannel .class ) ; org.springframework.integration.security.config.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; java.lang.String java.lang.String = java.util.concurrent.Future<java.lang.String> . java.lang.String ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { SecurityContext org.springframework.integration.security.config.SecurityContext = SecurityTestUtils . createContext ( java.lang.String , java.lang.String , java.lang.String[] ) ; SecurityContextHolder . setContext ( org.springframework.integration.security.config.SecurityContext ) ; }  <METHOD_END>
<METHOD_START> @ Bean public static org.springframework.integration.security.config.PropertySourcesPlaceholderConfigurer org.springframework.integration.security.config.PropertySourcesPlaceholderConfigurer ( ) { return new PropertySourcesPlaceholderConfigurer ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ SecuredChannel ( interceptor = STRING , sendAccess = { STRING , STRING } ) public org.springframework.integration.security.config.SubscribableChannel org.springframework.integration.security.config.SubscribableChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ SecuredChannel ( interceptor = STRING , sendAccess = { STRING , STRING } ) public org.springframework.integration.security.config.SubscribableChannel org.springframework.integration.security.config.SubscribableChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.security.config.SubscribableChannel org.springframework.integration.security.config.SubscribableChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ GlobalChannelInterceptor ( patterns = { STRING , STRING , STRING } ) public org.springframework.integration.security.config.ChannelInterceptor org.springframework.integration.security.config.ChannelInterceptor ( ) { return new SecurityContextPropagationChannelInterceptor ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ BridgeTo ( value = STRING , poller = @ Poller ( fixedDelay = STRING ) ) public org.springframework.integration.security.config.PollableChannel org.springframework.integration.security.config.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ SecuredChannel ( interceptor = STRING , sendAccess = { STRING , STRING } ) public org.springframework.integration.security.config.PollableChannel org.springframework.integration.security.config.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ BridgeTo ( STRING ) public org.springframework.integration.security.config.SubscribableChannel org.springframework.integration.security.config.SubscribableChannel ( ) { return new ExecutorChannel ( java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.security.config.PublishSubscribeChannel org.springframework.integration.security.config.PublishSubscribeChannel ( ) { return new PublishSubscribeChannel ( java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.security.config.MessageHandler org.springframework.integration.security.config.MessageHandler ( ) { BridgeHandler org.springframework.integration.security.config.BridgeHandler = new BridgeHandler ( ) ; org.springframework.integration.security.config.BridgeHandler . setOutputChannel ( org.springframework.integration.security.config.PollableChannel ( ) ) ; org.springframework.integration.security.config.BridgeHandler . setOrder ( NUMBER ) ; return org.springframework.integration.security.config.BridgeHandler ; }  <METHOD_END>
<METHOD_START> @ Bean @ SecuredChannel ( interceptor = STRING , sendAccess = { STRING , STRING } ) public org.springframework.integration.security.config.PollableChannel org.springframework.integration.security.config.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.security.config.MessageHandler org.springframework.integration.security.config.MessageHandler ( ) { BridgeHandler org.springframework.integration.security.config.BridgeHandler = new BridgeHandler ( ) ; org.springframework.integration.security.config.BridgeHandler . setOutputChannel ( org.springframework.integration.security.config.PollableChannel ( ) ) ; org.springframework.integration.security.config.BridgeHandler . setOrder ( NUMBER ) ; return org.springframework.integration.security.config.BridgeHandler ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.security.config.TaskScheduler org.springframework.integration.security.config.TaskScheduler ( ) { return new ThreadPoolTaskScheduler ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.security.config.PollableChannel org.springframework.integration.security.config.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.security.config.TestHandler org.springframework.integration.security.config.TestHandler ( ) { TestHandler org.springframework.integration.security.config.TestHandler = new TestHandler ( ) ; this . org.springframework.integration.security.config.SubscribableChannel ( ) . subscribe ( org.springframework.integration.security.config.TestHandler ) ; this . org.springframework.integration.security.config.SubscribableChannel ( ) . subscribe ( org.springframework.integration.security.config.TestHandler ) ; this . org.springframework.integration.security.config.SubscribableChannel ( ) . subscribe ( org.springframework.integration.security.config.TestHandler ) ; return org.springframework.integration.security.config.TestHandler ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.security.config.ChannelSecurityInterceptor org.springframework.integration.security.config.ChannelSecurityInterceptor ( AuthenticationManager org.springframework.integration.security.config.AuthenticationManager , AccessDecisionManager org.springframework.integration.security.config.AccessDecisionManager ) { ChannelSecurityInterceptor org.springframework.integration.security.config.ChannelSecurityInterceptor = new ChannelSecurityInterceptor ( ) ; org.springframework.integration.security.config.ChannelSecurityInterceptor . setAuthenticationManager ( org.springframework.integration.security.config.AuthenticationManager ) ; org.springframework.integration.security.config.ChannelSecurityInterceptor . setAccessDecisionManager ( org.springframework.integration.security.config.AccessDecisionManager ) ; return org.springframework.integration.security.config.ChannelSecurityInterceptor ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.security.config.AsyncTaskExecutor org.springframework.integration.security.config.AsyncTaskExecutor ( ) { return new DelegatingSecurityContextAsyncTaskExecutor ( new SimpleAsyncTaskExecutor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Gateway ( requestChannel = STRING ) java.util.concurrent.Future<java.lang.String> < java.lang.String > java.util.concurrent.Future<java.lang.String> ( java.lang.String java.lang.String );  <METHOD_END>
