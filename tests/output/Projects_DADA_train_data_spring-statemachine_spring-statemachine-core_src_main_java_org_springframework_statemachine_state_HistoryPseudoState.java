<METHOD_START> public void ( PseudoStateKind org.springframework.statemachine.state.PseudoStateKind , StateHolder < S , E > org.springframework.statemachine.state.StateHolder<S,E> ) { this( org.springframework.statemachine.state.PseudoStateKind , org.springframework.statemachine.state.StateHolder<S,E> , new StateHolder < S , E > ( null ) ); }  <METHOD_END>
<METHOD_START> public void ( PseudoStateKind org.springframework.statemachine.state.PseudoStateKind , StateHolder < S , E > org.springframework.statemachine.state.StateHolder<S,E> , StateHolder < S , E > org.springframework.statemachine.state.StateHolder<S,E> ) { super( org.springframework.statemachine.state.PseudoStateKind ); Assert . isTrue ( PseudoStateKind . HISTORY_SHALLOW == org.springframework.statemachine.state.PseudoStateKind || PseudoStateKind . HISTORY_DEEP == org.springframework.statemachine.state.PseudoStateKind , STRING ) ; Assert . notNull ( org.springframework.statemachine.state.StateHolder<S,E> , STRING ) ; Assert . notNull ( org.springframework.statemachine.state.StateHolder<S,E> , STRING ) ; this . org.springframework.statemachine.state.StateHolder<S,E> = org.springframework.statemachine.state.StateHolder<S,E> ; this . org.springframework.statemachine.state.StateHolder<S,E> = org.springframework.statemachine.state.StateHolder<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.state.State<S,E> < S , E > org.springframework.statemachine.state.State<S,E> ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { if ( org.springframework.statemachine.state.State<S,E> == null ) { if ( org.springframework.statemachine.state.StateHolder<S,E> . getState ( ) == null ) { return org.springframework.statemachine.state.StateHolder<S,E> . getState ( ) ; } else { return org.springframework.statemachine.state.StateHolder<S,E> . getState ( ) ; } } else { if ( org.springframework.statemachine.state.StateHolder<S,E> . getState ( ) != null && org.springframework.statemachine.state.State<S,E> . getPseudoState ( ) != null && org.springframework.statemachine.state.State<S,E> . getPseudoState ( ) . getKind ( ) == PseudoStateKind . END ) { return org.springframework.statemachine.state.StateHolder<S,E> . getState ( ) ; } else { return org.springframework.statemachine.state.State<S,E> ; } } }  <METHOD_END>
<METHOD_START> public void void ( State < S , E > org.springframework.statemachine.state.State<S,E> ) { this . org.springframework.statemachine.state.State<S,E> = org.springframework.statemachine.state.State<S,E> ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.state.State<S,E> < S , E > org.springframework.statemachine.state.State<S,E> ( ) { return org.springframework.statemachine.state.State<S,E> ; }  <METHOD_END>
