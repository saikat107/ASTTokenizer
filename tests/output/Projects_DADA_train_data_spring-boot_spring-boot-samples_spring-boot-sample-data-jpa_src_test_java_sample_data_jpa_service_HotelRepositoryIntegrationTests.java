<METHOD_START> @ Test public void void ( ) { City sample.data.jpa.service.City = this . sample.data.jpa.service.CityRepository . findAll ( PageRequest . of ( NUMBER , NUMBER , Direction . ASC , STRING ) ) . getContent ( ) . get ( NUMBER ) ; assertThat ( sample.data.jpa.service.City . getName ( ) ) . isEqualTo ( STRING ) ; Page < HotelSummary > sample.data.jpa.service.Page<sample.data.jpa.service.HotelSummary> = this . sample.data.jpa.service.HotelRepository . findByCity ( sample.data.jpa.service.City , PageRequest . of ( NUMBER , NUMBER , Direction . ASC , STRING ) ) ; Hotel sample.data.jpa.service.Hotel = this . sample.data.jpa.service.HotelRepository . findByCityAndName ( sample.data.jpa.service.City , sample.data.jpa.service.Page<sample.data.jpa.service.HotelSummary> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertThat ( sample.data.jpa.service.Hotel . getName ( ) ) . isEqualTo ( STRING ) ; java.util.List<sample.data.jpa.service.RatingCount> < RatingCount > java.util.List<sample.data.jpa.service.RatingCount> = this . sample.data.jpa.service.HotelRepository . findRatingCounts ( sample.data.jpa.service.Hotel ) ; assertThat ( java.util.List<sample.data.jpa.service.RatingCount> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<sample.data.jpa.service.RatingCount> . get ( NUMBER ) . getRating ( ) ) . isEqualTo ( Rating . AVERAGE ) ; assertThat ( java.util.List<sample.data.jpa.service.RatingCount> . get ( NUMBER ) . getCount ( ) ) . isGreaterThan ( NUMBER ) ; }  <METHOD_END>
