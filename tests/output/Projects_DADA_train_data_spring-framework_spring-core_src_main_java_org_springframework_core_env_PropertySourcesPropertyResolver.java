<METHOD_START> public void ( PropertySources org.springframework.core.env.PropertySources ) { this . org.springframework.core.env.PropertySources = org.springframework.core.env.PropertySources ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { if ( this . org.springframework.core.env.PropertySources != null ) { for ( PropertySource < ? > org.springframework.core.env.PropertySource<?> : this . org.springframework.core.env.PropertySources ) { if ( org.springframework.core.env.PropertySource<> . containsProperty ( java.lang.String ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ( java.lang.String , java.lang.String .class , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { return T ( java.lang.String , java.lang.Class<T> , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ( java.lang.String , java.lang.String .class , false ) ; }  <METHOD_END>
<METHOD_START> protected < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , boolean boolean ) { if ( this . org.springframework.core.env.PropertySources != null ) { for ( PropertySource < ? > org.springframework.core.env.PropertySource<?> : this . org.springframework.core.env.PropertySources ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( java.lang.String . java.lang.String ( STRING , java.lang.String , org.springframework.core.env.PropertySource<> . getName ( ) ) ) ; } java.lang.Object java.lang.Object = org.springframework.core.env.PropertySource<> . getProperty ( java.lang.String ) ; if ( java.lang.Object != null ) { if ( boolean && java.lang.Object instanceof java.lang.String ) { java.lang.Object = resolveNestedPlaceholders ( ( java.lang.String ) java.lang.Object ) ; } void ( java.lang.String , org.springframework.core.env.PropertySource<> , java.lang.Object ) ; return convertValueIfNecessary ( java.lang.Object , java.lang.Class<T> ) ; } } } if ( logger . isDebugEnabled ( ) ) { logger . debug ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , PropertySource < ? > org.springframework.core.env.PropertySource<?> , java.lang.Object java.lang.Object ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( java.lang.String . java.lang.String ( STRING , java.lang.String , org.springframework.core.env.PropertySource<> . getName ( ) , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ) ; } }  <METHOD_END>
