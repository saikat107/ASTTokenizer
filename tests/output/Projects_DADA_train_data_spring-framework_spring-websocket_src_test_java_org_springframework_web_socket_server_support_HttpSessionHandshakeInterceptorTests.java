<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler = Mockito . mock ( WebSocketHandler .class ) ; this . servletRequest . setSession ( new MockHttpSession ( null , STRING ) ) ; this . servletRequest . getSession ( ) . setAttribute ( STRING , STRING ) ; this . servletRequest . getSession ( ) . setAttribute ( STRING , STRING ) ; HttpSessionHandshakeInterceptor org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor = new HttpSessionHandshakeInterceptor ( ) ; org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor . beforeHandshake ( this . request , this . response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( HttpSessionHandshakeInterceptor . HTTP_SESSION_ID_ATTR_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler = Mockito . mock ( WebSocketHandler .class ) ; this . servletRequest . setSession ( new MockHttpSession ( null , STRING ) ) ; this . servletRequest . getSession ( ) . setAttribute ( STRING , STRING ) ; this . servletRequest . getSession ( ) . setAttribute ( STRING , STRING ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ; HttpSessionHandshakeInterceptor org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor = new HttpSessionHandshakeInterceptor ( java.util.Set<java.lang.String> ) ; org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor . beforeHandshake ( this . request , this . response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( HttpSessionHandshakeInterceptor . HTTP_SESSION_ID_ATTR_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler = Mockito . mock ( WebSocketHandler .class ) ; this . servletRequest . setSession ( new MockHttpSession ( null , STRING ) ) ; this . servletRequest . getSession ( ) . setAttribute ( STRING , STRING ) ; HttpSessionHandshakeInterceptor org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor = new HttpSessionHandshakeInterceptor ( ) ; org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor . setCopyHttpSessionId ( false ) ; org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor . beforeHandshake ( this . request , this . response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler = Mockito . mock ( WebSocketHandler .class ) ; this . servletRequest . setSession ( new MockHttpSession ( null , STRING ) ) ; this . servletRequest . getSession ( ) . setAttribute ( STRING , STRING ) ; HttpSessionHandshakeInterceptor org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor = new HttpSessionHandshakeInterceptor ( ) ; org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor . setCopyAllAttributes ( false ) ; org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor . beforeHandshake ( this . request , this . response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( HttpSessionHandshakeInterceptor . HTTP_SESSION_ID_ATTR_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler = Mockito . mock ( WebSocketHandler .class ) ; HttpSessionHandshakeInterceptor org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor = new HttpSessionHandshakeInterceptor ( ) ; org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor . beforeHandshake ( this . request , this . response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; assertNull ( this . servletRequest . getSession ( false ) ) ; }  <METHOD_END>
