<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { MockHttpServletRequest org.springframework.boot.actuate.trace.MockHttpServletRequest = spy ( new MockHttpServletRequest ( STRING , STRING ) ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . addHeader ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.boot.actuate.trace.WebRequestTraceFilter . getTrace ( org.springframework.boot.actuate.trace.MockHttpServletRequest ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.boot.actuate.trace.MockHttpServletRequest , times ( NUMBER ) ) . getParameterMap ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.io.IOException , org.springframework.boot.actuate.trace.ServletException { this . org.springframework.boot.actuate.trace.TraceProperties . setInclude ( java.util.EnumSet . java.util.EnumSet<E> ( Include .class ) ) ; MockHttpServletRequest org.springframework.boot.actuate.trace.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . setContextPath ( STRING ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . setRemoteAddr ( STRING ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . setQueryString ( STRING ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . setParameter ( STRING , STRING ) ; java.io.File java.io.File = java.io.File . java.io.File ( STRING , STRING ) ; java.lang.String java.lang.String = java.io.File . java.net.URI ( ) . java.net.URL ( ) . java.lang.String ( ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . setPathInfo ( java.lang.String ) ; java.io.File . void ( ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . setAuthType ( STRING ) ; java.security.Principal java.security.Principal = new java.security.Principal ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ; org.springframework.boot.actuate.trace.MockHttpServletRequest . setUserPrincipal ( java.security.Principal ) ; MockHttpServletResponse org.springframework.boot.actuate.trace.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.boot.actuate.trace.MockHttpServletResponse . addHeader ( STRING , STRING ) ; org.springframework.boot.actuate.trace.MockHttpServletResponse . addHeader ( STRING , STRING ) ; this . org.springframework.boot.actuate.trace.WebRequestTraceFilter . doFilterInternal ( org.springframework.boot.actuate.trace.MockHttpServletRequest , org.springframework.boot.actuate.trace.MockHttpServletResponse , new FilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.actuate.trace.ServletRequest , ServletResponse org.springframework.boot.actuate.trace.ServletResponse )					throws java.io.IOException , org.springframework.boot.actuate.trace.ServletException { java.io.BufferedReader java.io.BufferedReader = org.springframework.boot.actuate.trace.ServletRequest . getReader ( ) ; while ( java.io.BufferedReader . java.lang.String ( ) != null ) { } org.springframework.boot.actuate.trace.ServletResponse . getWriter ( ) . println ( STRING ) ; } } ) ; assertThat ( this . org.springframework.boot.actuate.trace.InMemoryTraceRepository . findAll ( ) ) . hasSize ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.boot.actuate.trace.InMemoryTraceRepository . findAll ( ) . iterator ( ) . next ( ) . getInfo ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( ( ( java.lang.String [] ) ( ( java.util.Map ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . java.lang.Object ( STRING ) ) [ NUMBER ] ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( java.security.Principal . java.lang.String ( ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( java.lang.String ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.actuate.trace.ServletRequest , ServletResponse org.springframework.boot.actuate.trace.ServletResponse )					throws java.io.IOException , org.springframework.boot.actuate.trace.ServletException { java.io.BufferedReader java.io.BufferedReader = org.springframework.boot.actuate.trace.ServletRequest . getReader ( ) ; while ( java.io.BufferedReader . java.lang.String ( ) != null ) { } org.springframework.boot.actuate.trace.ServletResponse . getWriter ( ) . println ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING } ) public void void ( ) org.springframework.boot.actuate.trace.ServletException , java.io.IOException { this . org.springframework.boot.actuate.trace.TraceProperties . setInclude ( java.util.Collections . java.util.Set ( Include . REQUEST_HEADERS ) ) ; MockHttpServletRequest org.springframework.boot.actuate.trace.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.boot.actuate.trace.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.boot.actuate.trace.MockHttpServletResponse . addHeader ( STRING , STRING ) ; this . org.springframework.boot.actuate.trace.WebRequestTraceFilter . doFilterInternal ( org.springframework.boot.actuate.trace.MockHttpServletRequest , org.springframework.boot.actuate.trace.MockHttpServletResponse , new FilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.actuate.trace.ServletRequest , ServletResponse org.springframework.boot.actuate.trace.ServletResponse )					throws java.io.IOException , org.springframework.boot.actuate.trace.ServletException {			} } ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.boot.actuate.trace.InMemoryTraceRepository . findAll ( ) . iterator ( ) . next ( ) . getInfo ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) == null ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.actuate.trace.ServletRequest , ServletResponse org.springframework.boot.actuate.trace.ServletResponse )					throws java.io.IOException , org.springframework.boot.actuate.trace.ServletException {			}  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING } ) public void void ( ) org.springframework.boot.actuate.trace.ServletException , java.io.IOException { this . org.springframework.boot.actuate.trace.TraceProperties . setInclude ( java.util.Collections . java.util.Set ( Include . REQUEST_HEADERS ) ) ; MockHttpServletRequest org.springframework.boot.actuate.trace.MockHttpServletRequest = spy ( new MockHttpServletRequest ( STRING , STRING ) ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . addHeader ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) this . org.springframework.boot.actuate.trace.WebRequestTraceFilter . getTrace ( org.springframework.boot.actuate.trace.MockHttpServletRequest ) . get ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING } ) public void void ( ) org.springframework.boot.actuate.trace.ServletException , java.io.IOException { MockHttpServletRequest org.springframework.boot.actuate.trace.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.boot.actuate.trace.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.boot.actuate.trace.WebRequestTraceFilter . doFilterInternal ( org.springframework.boot.actuate.trace.MockHttpServletRequest , org.springframework.boot.actuate.trace.MockHttpServletResponse , new FilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.actuate.trace.ServletRequest , ServletResponse org.springframework.boot.actuate.trace.ServletResponse )					throws java.io.IOException , org.springframework.boot.actuate.trace.ServletException {			} } ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.boot.actuate.trace.InMemoryTraceRepository . findAll ( ) . iterator ( ) . next ( ) . getInfo ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( ( ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.actuate.trace.ServletRequest , ServletResponse org.springframework.boot.actuate.trace.ServletResponse )					throws java.io.IOException , org.springframework.boot.actuate.trace.ServletException {			}  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING } ) public void void ( ) org.springframework.boot.actuate.trace.ServletException , java.io.IOException { this . org.springframework.boot.actuate.trace.TraceProperties . setInclude ( java.util.EnumSet . java.util.EnumSet ( Include . REQUEST_HEADERS , Include . AUTHORIZATION_HEADER ) ) ; MockHttpServletRequest org.springframework.boot.actuate.trace.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.boot.actuate.trace.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.boot.actuate.trace.WebRequestTraceFilter . doFilterInternal ( org.springframework.boot.actuate.trace.MockHttpServletRequest , org.springframework.boot.actuate.trace.MockHttpServletResponse , new FilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.actuate.trace.ServletRequest , ServletResponse org.springframework.boot.actuate.trace.ServletResponse )					throws java.io.IOException , org.springframework.boot.actuate.trace.ServletException {			} } ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.boot.actuate.trace.InMemoryTraceRepository . findAll ( ) . iterator ( ) . next ( ) . getInfo ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( ( ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ) . containsKey ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.actuate.trace.ServletRequest , ServletResponse org.springframework.boot.actuate.trace.ServletResponse )					throws java.io.IOException , org.springframework.boot.actuate.trace.ServletException {			}  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING } ) public void void ( ) org.springframework.boot.actuate.trace.ServletException , java.io.IOException { this . org.springframework.boot.actuate.trace.TraceProperties . setInclude ( java.util.Collections . java.util.Set ( Include . RESPONSE_HEADERS ) ) ; MockHttpServletRequest org.springframework.boot.actuate.trace.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.boot.actuate.trace.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.boot.actuate.trace.MockHttpServletResponse . addHeader ( STRING , STRING ) ; org.springframework.boot.actuate.trace.MockHttpServletResponse . addHeader ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.boot.actuate.trace.WebRequestTraceFilter . getTrace ( org.springframework.boot.actuate.trace.MockHttpServletRequest ) ; this . org.springframework.boot.actuate.trace.WebRequestTraceFilter . enhanceTrace ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.boot.actuate.trace.MockHttpServletResponse ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.boot.actuate.trace.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.boot.actuate.trace.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.boot.actuate.trace.MockHttpServletResponse . setStatus ( NUMBER ) ; org.springframework.boot.actuate.trace.MockHttpServletResponse . addHeader ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.boot.actuate.trace.WebRequestTraceFilter . getTrace ( org.springframework.boot.actuate.trace.MockHttpServletRequest ) ; this . org.springframework.boot.actuate.trace.WebRequestTraceFilter . enhanceTrace ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.boot.actuate.trace.MockHttpServletResponse ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.boot.actuate.trace.MockHttpServletRequest = spy ( new MockHttpServletRequest ( STRING , STRING ) ) ; MockHttpServletResponse org.springframework.boot.actuate.trace.MockHttpServletResponse = new MockHttpServletResponse ( ) ; MockFilterChain org.springframework.boot.actuate.trace.MockFilterChain = new MockFilterChain ( ) ; this . org.springframework.boot.actuate.trace.WebRequestTraceFilter . doFilter ( org.springframework.boot.actuate.trace.MockHttpServletRequest , org.springframework.boot.actuate.trace.MockHttpServletResponse , org.springframework.boot.actuate.trace.MockFilterChain ) ; java.lang.String java.lang.String = ( java.lang.String ) this . org.springframework.boot.actuate.trace.InMemoryTraceRepository . findAll ( ) . iterator ( ) . next ( ) . getInfo ( ) . get ( STRING ) ; assertThat ( java.lang.String ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.trace.WebRequestTraceFilter . setErrorAttributes ( new DefaultErrorAttributes ( ) ) ; MockHttpServletRequest org.springframework.boot.actuate.trace.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.boot.actuate.trace.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.boot.actuate.trace.MockHttpServletResponse . setStatus ( NUMBER ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . setAttribute ( STRING , new java.lang.IllegalStateException ( STRING ) ) ; org.springframework.boot.actuate.trace.MockHttpServletResponse . addHeader ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.boot.actuate.trace.WebRequestTraceFilter . getTrace ( org.springframework.boot.actuate.trace.MockHttpServletRequest ) ; this . org.springframework.boot.actuate.trace.WebRequestTraceFilter . enhanceTrace ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.boot.actuate.trace.MockHttpServletResponse ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.lang.System . java.io.PrintStream . void ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) org.springframework.boot.actuate.trace.ServletException , java.io.IOException { MockHttpServletRequest org.springframework.boot.actuate.trace.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.boot.actuate.trace.MockHttpServletResponse = new MockHttpServletResponse ( ) ; try { this . org.springframework.boot.actuate.trace.WebRequestTraceFilter . doFilterInternal ( org.springframework.boot.actuate.trace.MockHttpServletRequest , org.springframework.boot.actuate.trace.MockHttpServletResponse , new FilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.actuate.trace.ServletRequest , ServletResponse org.springframework.boot.actuate.trace.ServletResponse )						throws java.io.IOException , org.springframework.boot.actuate.trace.ServletException { throw new java.lang.RuntimeException ( ) ; } } ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) this . org.springframework.boot.actuate.trace.InMemoryTraceRepository . findAll ( ) . iterator ( ) . next ( ) . getInfo ( ) . get ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.actuate.trace.ServletRequest , ServletResponse org.springframework.boot.actuate.trace.ServletResponse )						throws java.io.IOException , org.springframework.boot.actuate.trace.ServletException { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.trace.WebRequestTraceFilter = new WebRequestTraceFilter ( this . org.springframework.boot.actuate.trace.InMemoryTraceRepository , this . org.springframework.boot.actuate.trace.TraceProperties ) { @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; } } ; MockHttpServletRequest org.springframework.boot.actuate.trace.MockHttpServletRequest = spy ( new MockHttpServletRequest ( STRING , STRING ) ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.boot.actuate.trace.MockHttpServletRequest . addHeader ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) this . org.springframework.boot.actuate.trace.WebRequestTraceFilter . getTrace ( org.springframework.boot.actuate.trace.MockHttpServletRequest ) . get ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; }  <METHOD_END>
