<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.action.AnnotationConfigApplicationContext org.springframework.statemachine.action.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.action.DistributedLeaderActionTests.Config1 .class ) ; context . refresh ( ) ; org.springframework.statemachine.action.DistributedLeaderActionTests.TestLeaderAction org.springframework.statemachine.action.DistributedLeaderActionTests.TestLeaderAction = context . getBean ( STRING , org.springframework.statemachine.action.DistributedLeaderActionTests.TestLeaderAction .class ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.action.StateMachineFactory<java.lang.String,java.lang.String> = context . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.action.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.action.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.action.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.action.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; org.springframework.statemachine.action.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.action.DistributedLeaderActionTests.TestLeaderAction . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.action.DistributedLeaderActionTests.TestLeaderAction . int , is ( NUMBER ) ) ; org.springframework.statemachine.action.DistributedLeaderActionTests.TestLeaderAction . void ( NUMBER ) ; org.springframework.statemachine.action.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.action.DistributedLeaderActionTests.TestLeaderAction . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.action.DistributedLeaderActionTests.TestLeaderAction . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.action.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.action.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withConfiguration ( ) . autoStartup ( true ) . and ( ) . withDistributed ( ) . ensemble ( org.springframework.statemachine.action.StateMachineEnsemble<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.action.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.action.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING , org.springframework.statemachine.action.Action<java.lang.String,java.lang.String> ( ) , null ) . state ( STRING , org.springframework.statemachine.action.Action<java.lang.String,java.lang.String> ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.action.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.action.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.action.StateMachineEnsemble<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.action.StateMachineEnsemble<java.lang.String,java.lang.String> ( ) { return new InMemoryStateMachineEnsemble < java.lang.String , java.lang.String > ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.action.Action<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.action.Action<java.lang.String,java.lang.String> ( ) { return new org.springframework.statemachine.action.DistributedLeaderActionTests.TestLeaderAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.action.Action<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.action.Action<java.lang.String,java.lang.String> ( ) { return new DistributedLeaderAction <> ( org.springframework.statemachine.action.Action<java.lang.String,java.lang.String> ( ) , org.springframework.statemachine.action.StateMachineEnsemble<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.action.StateContext<java.lang.String,java.lang.String> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { int = NUMBER ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; }  <METHOD_END>
