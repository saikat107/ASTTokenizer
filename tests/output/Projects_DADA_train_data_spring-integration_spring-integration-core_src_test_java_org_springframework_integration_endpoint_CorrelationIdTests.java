<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = STRING ; Message < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.Object ) . build ( ) ; DirectChannel org.springframework.integration.endpoint.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( NUMBER ) ; ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.endpoint.CorrelationIdTests.TestBean ( ) , STRING ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . setOutputChannel ( org.springframework.integration.endpoint.QueueChannel ) ; EventDrivenConsumer org.springframework.integration.endpoint.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.endpoint.DirectChannel , org.springframework.integration.endpoint.ServiceActivatingHandler ) ; org.springframework.integration.endpoint.EventDrivenConsumer . start ( ) ; assertTrue ( org.springframework.integration.endpoint.DirectChannel . send ( org.springframework.integration.endpoint.Message<java.lang.String> ) ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertEquals ( java.lang.Object , new IntegrationMessageHeaderAccessor ( org.springframework.integration.endpoint.Message<> ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . build ( ) ; DirectChannel org.springframework.integration.endpoint.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( NUMBER ) ; ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.endpoint.CorrelationIdTests.TestBean ( ) , STRING ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . setOutputChannel ( org.springframework.integration.endpoint.QueueChannel ) ; EventDrivenConsumer org.springframework.integration.endpoint.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.endpoint.DirectChannel , org.springframework.integration.endpoint.ServiceActivatingHandler ) ; org.springframework.integration.endpoint.EventDrivenConsumer . start ( ) ; assertTrue ( org.springframework.integration.endpoint.DirectChannel . send ( org.springframework.integration.endpoint.Message<java.lang.String> ) ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertEquals ( new IntegrationMessageHeaderAccessor ( org.springframework.integration.endpoint.Message<java.lang.String> ) . getCorrelationId ( ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.endpoint.Message<> ) . getCorrelationId ( ) ) ; assertTrue ( new IntegrationMessageHeaderAccessor ( org.springframework.integration.endpoint.Message<java.lang.String> ) . getCorrelationId ( ) . equals ( new IntegrationMessageHeaderAccessor ( org.springframework.integration.endpoint.Message<> ) . getCorrelationId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = STRING ; Message < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.Object ) . build ( ) ; DirectChannel org.springframework.integration.endpoint.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( NUMBER ) ; ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.endpoint.CorrelationIdTests.TestBean ( ) , STRING ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . setOutputChannel ( org.springframework.integration.endpoint.QueueChannel ) ; EventDrivenConsumer org.springframework.integration.endpoint.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.endpoint.DirectChannel , org.springframework.integration.endpoint.ServiceActivatingHandler ) ; org.springframework.integration.endpoint.EventDrivenConsumer . start ( ) ; assertTrue ( org.springframework.integration.endpoint.DirectChannel . send ( org.springframework.integration.endpoint.Message<java.lang.String> ) ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , new IntegrationMessageHeaderAccessor ( org.springframework.integration.endpoint.Message<> ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.endpoint.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; DirectChannel org.springframework.integration.endpoint.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( NUMBER ) ; ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.endpoint.CorrelationIdTests.TestBean ( ) , STRING ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . setOutputChannel ( org.springframework.integration.endpoint.QueueChannel ) ; EventDrivenConsumer org.springframework.integration.endpoint.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.endpoint.DirectChannel , org.springframework.integration.endpoint.ServiceActivatingHandler ) ; org.springframework.integration.endpoint.EventDrivenConsumer . start ( ) ; assertTrue ( org.springframework.integration.endpoint.DirectChannel . send ( org.springframework.integration.endpoint.Message<> ) ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , new IntegrationMessageHeaderAccessor ( org.springframework.integration.endpoint.Message<> ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.endpoint.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( ) ; MethodInvokingSplitter org.springframework.integration.endpoint.MethodInvokingSplitter = new MethodInvokingSplitter ( new org.springframework.integration.endpoint.CorrelationIdTests.TestBean ( ) , org.springframework.integration.endpoint.CorrelationIdTests.TestBean .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ) ; org.springframework.integration.endpoint.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.endpoint.QueueChannel ) ; org.springframework.integration.endpoint.MethodInvokingSplitter . handleMessage ( org.springframework.integration.endpoint.Message<> ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertEquals ( org.springframework.integration.endpoint.Message<> . getHeaders ( ) . getId ( ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.endpoint.Message<> ) . getCorrelationId ( ) ) ; assertEquals ( org.springframework.integration.endpoint.Message<> . getHeaders ( ) . getId ( ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.endpoint.Message<> ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.endpoint.Message<?> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( ) ; MethodInvokingSplitter org.springframework.integration.endpoint.MethodInvokingSplitter = new MethodInvokingSplitter ( new org.springframework.integration.endpoint.CorrelationIdTests.TestBean ( ) , org.springframework.integration.endpoint.CorrelationIdTests.TestBean .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ) ; org.springframework.integration.endpoint.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.endpoint.QueueChannel ) ; org.springframework.integration.endpoint.MethodInvokingSplitter . handleMessage ( org.springframework.integration.endpoint.Message<> ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertEquals ( org.springframework.integration.endpoint.Message<> . getHeaders ( ) . getId ( ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.endpoint.Message<> ) . getCorrelationId ( ) ) ; assertEquals ( org.springframework.integration.endpoint.Message<> . getHeaders ( ) . getId ( ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.endpoint.Message<> ) . getCorrelationId ( ) ) ; assertTrue ( STRING , org.springframework.integration.endpoint.Message<> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; assertTrue ( STRING , org.springframework.integration.endpoint.Message<> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String[] ( STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.endpoint.Message<?> < ? > org.springframework.integration.endpoint.Message<?> ( java.lang.String java.lang.String ) { return MessageBuilder . withPayload ( java.lang.String ) . setCorrelationId ( STRING ) . build ( ) ; }  <METHOD_END>
