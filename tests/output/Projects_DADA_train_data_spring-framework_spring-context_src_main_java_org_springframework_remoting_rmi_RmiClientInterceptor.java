<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.rmi.server.RMIClientSocketFactory java.rmi.server.RMIClientSocketFactory ) { this . java.rmi.server.RMIClientSocketFactory = java.rmi.server.RMIClientSocketFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. afterPropertiesSet ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) org.springframework.remoting.rmi.RemoteLookupFailureException { if ( this . boolean ) { java.rmi.Remote java.rmi.Remote = java.rmi.Remote ( ) ; if ( logger . isDebugEnabled ( ) ) { if ( java.rmi.Remote instanceof RmiInvocationHandler ) { logger . debug ( STRING + getServiceUrl ( ) + STRING ) ; } else if ( getServiceInterface ( ) != null ) { boolean boolean = getServiceInterface ( ) . isInstance ( java.rmi.Remote ) ; logger . debug ( STRING + getServiceInterface ( ) . getName ( ) + STRING + getServiceUrl ( ) + STRING + ( ! boolean ? STRING : STRING ) + STRING ) ; } } if ( this . boolean ) { this . java.rmi.Remote = java.rmi.Remote ; } } }  <METHOD_END>
<METHOD_START> protected java.rmi.Remote java.rmi.Remote ( ) org.springframework.remoting.rmi.RemoteLookupFailureException { try { java.rmi.Remote java.rmi.Remote = null ; if ( this . java.rmi.server.RMIClientSocketFactory != null ) { java.net.URL java.net.URL = new java.net.URL ( null , getServiceUrl ( ) , new org.springframework.remoting.rmi.RmiClientInterceptor.DummyURLStreamHandler ( ) ) ; java.lang.String java.lang.String = java.net.URL . java.lang.String ( ) ; if ( java.lang.String != null && ! STRING . boolean ( java.lang.String ) ) { throw new java.net.MalformedURLException ( STRING + java.lang.String + STRING ) ; } java.lang.String java.lang.String = java.net.URL . java.lang.String ( ) ; int int = java.net.URL . int ( ) ; java.lang.String java.lang.String = java.net.URL . java.lang.String ( ) ; if ( java.lang.String != null && java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } java.rmi.registry.Registry java.rmi.registry.Registry = java.rmi.registry.LocateRegistry . java.rmi.registry.Registry ( java.lang.String , int , this . java.rmi.server.RMIClientSocketFactory ) ; java.rmi.Remote = java.rmi.registry.Registry . java.rmi.Remote ( java.lang.String ) ; } else { java.rmi.Remote = java.rmi.Naming . java.rmi.Remote ( getServiceUrl ( ) ) ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + getServiceUrl ( ) + STRING ) ; } return java.rmi.Remote ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { throw new RemoteLookupFailureException ( STRING + getServiceUrl ( ) + STRING , java.net.MalformedURLException ) ; } catch ( java.rmi.NotBoundException java.rmi.NotBoundException ) { throw new RemoteLookupFailureException ( STRING + getServiceUrl ( ) + STRING , java.rmi.NotBoundException ) ; } catch ( java.rmi.RemoteException java.rmi.RemoteException ) { throw new RemoteLookupFailureException ( STRING , java.rmi.RemoteException ) ; } }  <METHOD_END>
<METHOD_START> protected java.rmi.Remote java.rmi.Remote ( ) org.springframework.remoting.rmi.RemoteLookupFailureException { if ( ! this . boolean || ( this . boolean && ! this . boolean ) ) { return ( this . java.rmi.Remote != null ? this . java.rmi.Remote : java.rmi.Remote ( ) ) ; } else { synchronized ( this . java.lang.Object ) { if ( this . java.rmi.Remote == null ) { this . java.rmi.Remote = java.rmi.Remote ( ) ; } return this . java.rmi.Remote ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.remoting.rmi.MethodInvocation ) throws java.lang.Throwable { java.rmi.Remote java.rmi.Remote = java.rmi.Remote ( ) ; try { return java.lang.Object ( org.springframework.remoting.rmi.MethodInvocation , java.rmi.Remote ) ; } catch ( RemoteConnectFailureException org.springframework.remoting.rmi.RemoteConnectFailureException ) { return java.lang.Object ( org.springframework.remoting.rmi.MethodInvocation , org.springframework.remoting.rmi.RemoteConnectFailureException ) ; } catch ( java.rmi.RemoteException java.rmi.RemoteException ) { if ( boolean ( java.rmi.RemoteException ) ) { return java.lang.Object ( org.springframework.remoting.rmi.MethodInvocation , java.rmi.RemoteException ) ; } else { throw java.rmi.RemoteException ; } } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.rmi.RemoteException java.rmi.RemoteException ) { return RmiClientInterceptorUtils . isConnectFailure ( java.rmi.RemoteException ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( MethodInvocation org.springframework.remoting.rmi.MethodInvocation , java.lang.Exception java.lang.Exception ) throws java.lang.Throwable { if ( this . boolean ) { java.lang.String java.lang.String = STRING + getServiceUrl ( ) + STRING ; if ( logger . isDebugEnabled ( ) ) { logger . warn ( java.lang.String , java.lang.Exception ) ; } else if ( logger . isWarnEnabled ( ) ) { logger . warn ( java.lang.String ) ; } return java.lang.Object ( org.springframework.remoting.rmi.MethodInvocation ) ; } else { throw java.lang.Exception ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( MethodInvocation org.springframework.remoting.rmi.MethodInvocation ) throws java.lang.Throwable { java.rmi.Remote java.rmi.Remote = null ; synchronized ( this . java.lang.Object ) { this . java.rmi.Remote = null ; java.rmi.Remote = java.rmi.Remote ( ) ; if ( this . boolean ) { this . java.rmi.Remote = java.rmi.Remote ; } } return java.lang.Object ( org.springframework.remoting.rmi.MethodInvocation , java.rmi.Remote ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( MethodInvocation org.springframework.remoting.rmi.MethodInvocation , java.rmi.Remote java.rmi.Remote ) throws java.lang.Throwable { if ( java.rmi.Remote instanceof RmiInvocationHandler ) { try { return java.lang.Object ( org.springframework.remoting.rmi.MethodInvocation , ( RmiInvocationHandler ) java.rmi.Remote ) ; } catch ( java.rmi.RemoteException java.rmi.RemoteException ) { throw RmiClientInterceptorUtils . convertRmiAccessException ( org.springframework.remoting.rmi.MethodInvocation . getMethod ( ) , java.rmi.RemoteException , boolean ( java.rmi.RemoteException ) , getServiceUrl ( ) ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { java.lang.Throwable java.lang.Throwable = java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; RemoteInvocationUtils . fillInClientStackTraceIfPossible ( java.lang.Throwable ) ; throw java.lang.Throwable ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new RemoteInvocationFailureException ( STRING + org.springframework.remoting.rmi.MethodInvocation . getMethod ( ) + STRING + getServiceUrl ( ) + STRING , java.lang.Throwable ) ; } } else { try { return RmiClientInterceptorUtils . invokeRemoteMethod ( org.springframework.remoting.rmi.MethodInvocation , java.rmi.Remote ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { java.lang.Throwable java.lang.Throwable = java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; if ( java.lang.Throwable instanceof java.rmi.RemoteException ) { java.rmi.RemoteException java.rmi.RemoteException = ( java.rmi.RemoteException ) java.lang.Throwable ; throw RmiClientInterceptorUtils . convertRmiAccessException ( org.springframework.remoting.rmi.MethodInvocation . getMethod ( ) , java.rmi.RemoteException , boolean ( java.rmi.RemoteException ) , getServiceUrl ( ) ) ; } else { throw java.lang.Throwable ; } } } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( MethodInvocation org.springframework.remoting.rmi.MethodInvocation , RmiInvocationHandler org.springframework.remoting.rmi.RmiInvocationHandler )		throws java.rmi.RemoteException , java.lang.NoSuchMethodException , java.lang.IllegalAccessException , java.lang.reflect.InvocationTargetException { if ( AopUtils . isToStringMethod ( org.springframework.remoting.rmi.MethodInvocation . getMethod ( ) ) ) { return STRING + getServiceUrl ( ) + STRING ; } return org.springframework.remoting.rmi.RmiInvocationHandler . invoke ( createRemoteInvocation ( org.springframework.remoting.rmi.MethodInvocation ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.net.URLConnection java.net.URLConnection ( java.net.URL java.net.URL ) throws java.io.IOException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
