<METHOD_START> public void ( java.util.List<T> < T > java.util.List<T> ) { super( java.util.List<T> ); }  <METHOD_END>
<METHOD_START> public void ( java.util.List<T> < T > java.util.List<T> , Pageable org.springframework.data.solr.core.query.result.Pageable , long long , java.lang.Float java.lang.Float ) { super( java.util.List<T> , org.springframework.data.solr.core.query.result.Pageable , long ); this . java.lang.Float = java.lang.Float ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> < FacetFieldEntry > org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> ( java.lang.String java.lang.String , java.util.Map<org.springframework.data.solr.core.query.result.PageKey,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> < PageKey , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.query.result.PageKey,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> ) { Page < FacetFieldEntry > org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> = java.util.Map<org.springframework.data.solr.core.query.result.PageKey,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> . get ( new StringPageKey ( java.lang.String ) ) ; return org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> != null ? org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> : new PageImpl <> ( java.util.Collections .< FacetFieldEntry > java.util.List<org.springframework.data.solr.core.query.result.FacetFieldEntry> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> < FacetFieldEntry > org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> ( java.lang.String java.lang.String ) { return org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> ( java.lang.String , this . java.util.Map<org.springframework.data.solr.core.query.result.PageKey,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> < FacetFieldEntry > org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> ( java.lang.String java.lang.String ) { return org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> ( java.lang.String , this . java.util.Map<org.springframework.data.solr.core.query.result.PageKey,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> < FacetFieldEntry > org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> ( Field org.springframework.data.solr.core.query.result.Field ) { return this . org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> ( org.springframework.data.solr.core.query.result.Field . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> < FacetFieldEntry > org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> ( Field org.springframework.data.solr.core.query.result.Field ) { return org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> ( org.springframework.data.solr.core.query.result.Field . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry> < FacetPivotFieldEntry > java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry> ( java.lang.String java.lang.String ) { return java.util.Map<org.springframework.data.solr.core.query.result.PageKey,java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry>> . get ( new StringPageKey ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry> < FacetPivotFieldEntry > java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry> ( PivotField org.springframework.data.solr.core.query.result.PivotField ) { return java.util.Map<org.springframework.data.solr.core.query.result.PageKey,java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry>> . get ( new StringPageKey ( org.springframework.data.solr.core.query.result.PivotField . getName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public final void void ( Page < FacetFieldEntry > org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> , Field org.springframework.data.solr.core.query.result.Field ) { this . java.util.Map<org.springframework.data.solr.core.query.result.PageKey,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> . put ( new StringPageKey ( org.springframework.data.solr.core.query.result.Field . getName ( ) ) , org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> ) ; }  <METHOD_END>
<METHOD_START> public final void void ( Page < FacetFieldEntry > org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> , Field org.springframework.data.solr.core.query.result.Field ) { this . java.util.Map<org.springframework.data.solr.core.query.result.PageKey,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> . put ( new StringPageKey ( org.springframework.data.solr.core.query.result.Field . getName ( ) ) , org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry> ) ; }  <METHOD_END>
<METHOD_START> public final void void ( java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry> < FacetPivotFieldEntry > java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry> , PivotField org.springframework.data.solr.core.query.result.PivotField ) { this . java.util.Map<org.springframework.data.solr.core.query.result.PageKey,java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry>> . put ( new StringPageKey ( org.springframework.data.solr.core.query.result.PivotField . getName ( ) ) , java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<org.springframework.data.solr.core.query.result.Field,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.query.result.Field,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> ) { for ( java.util.Map . java.util.Map.Entry<org.springframework.data.solr.core.query.result.Field,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map.Entry<org.springframework.data.solr.core.query.result.Field,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> : java.util.Map<org.springframework.data.solr.core.query.result.Field,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> . entrySet ( ) ) { void ( java.util.Map.Entry<org.springframework.data.solr.core.query.result.Field,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> . getValue ( ) , java.util.Map.Entry<org.springframework.data.solr.core.query.result.Field,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> . getKey ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<org.springframework.data.solr.core.query.result.Field,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.query.result.Field,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> ) { for ( java.util.Map . java.util.Map.Entry<org.springframework.data.solr.core.query.result.Field,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map.Entry<org.springframework.data.solr.core.query.result.Field,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> : java.util.Map<org.springframework.data.solr.core.query.result.Field,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> . entrySet ( ) ) { void ( java.util.Map.Entry<org.springframework.data.solr.core.query.result.Field,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> . getValue ( ) , java.util.Map.Entry<org.springframework.data.solr.core.query.result.Field,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> . getKey ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<org.springframework.data.solr.core.query.result.PivotField,java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry>> < PivotField , java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry> < FacetPivotFieldEntry > > java.util.Map<org.springframework.data.solr.core.query.result.PivotField,java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry>> ) { for ( java.util.Map . java.util.Map.Entry<org.springframework.data.solr.core.query.result.PivotField,java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry>> < PivotField , java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry> < FacetPivotFieldEntry > > java.util.Map.Entry<org.springframework.data.solr.core.query.result.PivotField,java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry>> : java.util.Map<org.springframework.data.solr.core.query.result.PivotField,java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry>> . entrySet ( ) ) { void ( java.util.Map.Entry<org.springframework.data.solr.core.query.result.PivotField,java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry>> . getValue ( ) , java.util.Map.Entry<org.springframework.data.solr.core.query.result.PivotField,java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry>> . getKey ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> < Page < FacetFieldEntry > > java.util.Collection<org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> ( ) { return java.util.Collections . java.util.Collection ( this . java.util.Map<org.springframework.data.solr.core.query.result.PageKey,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> . values ( ) ) ; }  <METHOD_END>
<METHOD_START> public final void void ( java.util.List<org.springframework.data.solr.core.query.result.FacetQueryEntry> < FacetQueryEntry > java.util.List<org.springframework.data.solr.core.query.result.FacetQueryEntry> ) { this . org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetQueryEntry> = new PageImpl <> ( java.util.List<org.springframework.data.solr.core.query.result.FacetQueryEntry> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetQueryEntry> < FacetQueryEntry > org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetQueryEntry> ( ) { return this . org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetQueryEntry> != null ? this . org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetQueryEntry> : new PageImpl <> ( java.util.Collections .< FacetQueryEntry > java.util.List<org.springframework.data.solr.core.query.result.FacetQueryEntry> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.data.solr.core.query.result.Field> < Field > java.util.Collection<org.springframework.data.solr.core.query.result.Field> ( ) { if ( this . java.util.Map<org.springframework.data.solr.core.query.result.PageKey,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> . isEmpty ( ) ) { return java.util.Collections . java.util.List<org.springframework.data.solr.core.query.result.Field> ( ) ; } java.util.List<org.springframework.data.solr.core.query.result.Field> < Field > java.util.List<org.springframework.data.solr.core.query.result.Field> = new java.util.ArrayList <> ( this . java.util.Map<org.springframework.data.solr.core.query.result.PageKey,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> . size ( ) ) ; for ( PageKey org.springframework.data.solr.core.query.result.PageKey : this . java.util.Map<org.springframework.data.solr.core.query.result.PageKey,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> . keySet ( ) ) { java.util.List<org.springframework.data.solr.core.query.result.Field> . add ( new SimpleField ( org.springframework.data.solr.core.query.result.PageKey . getKey ( ) . toString ( ) ) ) ; } return java.util.List<org.springframework.data.solr.core.query.result.Field> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.data.solr.core.query.result.PivotField> < PivotField > java.util.Collection<org.springframework.data.solr.core.query.result.PivotField> ( ) { if ( this . java.util.Map<org.springframework.data.solr.core.query.result.PageKey,java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry>> . isEmpty ( ) ) { return java.util.Collections . java.util.List<org.springframework.data.solr.core.query.result.PivotField> ( ) ; } java.util.List<org.springframework.data.solr.core.query.result.PivotField> < PivotField > java.util.List<org.springframework.data.solr.core.query.result.PivotField> = new java.util.ArrayList <> ( this . java.util.Map<org.springframework.data.solr.core.query.result.PageKey,java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry>> . size ( ) ) ; for ( PageKey org.springframework.data.solr.core.query.result.PageKey : this . java.util.Map<org.springframework.data.solr.core.query.result.PageKey,java.util.List<org.springframework.data.solr.core.query.result.FacetPivotFieldEntry>> . keySet ( ) ) { java.util.List<org.springframework.data.solr.core.query.result.PivotField> . add ( new SimplePivotField ( org.springframework.data.solr.core.query.result.PageKey . getKey ( ) . toString ( ) ) ) ; } return java.util.List<org.springframework.data.solr.core.query.result.PivotField> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.data.solr.core.query.result.Page<? extends org.springframework.data.solr.core.query.result.FacetEntry>> < Page < ? extends FacetEntry > > java.util.Collection<org.springframework.data.solr.core.query.result.Page<? extends org.springframework.data.solr.core.query.result.FacetEntry>> ( ) { java.util.List<org.springframework.data.solr.core.query.result.Page<? extends org.springframework.data.solr.core.query.result.FacetEntry>> < Page < ? extends FacetEntry > > java.util.List<org.springframework.data.solr.core.query.result.Page<? extends org.springframework.data.solr.core.query.result.FacetEntry>> = new java.util.ArrayList <> ( this . java.util.Map<org.springframework.data.solr.core.query.result.PageKey,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> . size ( ) + NUMBER ) ; java.util.List<org.springframework.data.solr.core.query.result.Page<? extends org.springframework.data.solr.core.query.result.FacetEntry>> . addAll ( this . java.util.Map<org.springframework.data.solr.core.query.result.PageKey,org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetFieldEntry>> . values ( ) ) ; java.util.List<org.springframework.data.solr.core.query.result.Page<? extends org.springframework.data.solr.core.query.result.FacetEntry>> . add ( this . org.springframework.data.solr.core.query.result.Page<org.springframework.data.solr.core.query.result.FacetQueryEntry> ) ; return java.util.List<org.springframework.data.solr.core.query.result.Page<? extends org.springframework.data.solr.core.query.result.FacetEntry>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.solr.core.query.result.HighlightEntry<T>> < HighlightEntry < T > > java.util.List<org.springframework.data.solr.core.query.result.HighlightEntry<T>> ( ) { return this . java.util.List<org.springframework.data.solr.core.query.result.HighlightEntry<T>> != null ? this . java.util.List<org.springframework.data.solr.core.query.result.HighlightEntry<T>> : java.util.Collections .< HighlightEntry < T > > java.util.List<org.springframework.data.solr.core.query.result.HighlightEntry<T>> ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.data.solr.core.query.result.HighlightEntry<T>> < HighlightEntry < T > > java.util.List<org.springframework.data.solr.core.query.result.HighlightEntry<T>> ) { this . java.util.List<org.springframework.data.solr.core.query.result.HighlightEntry<T>> = java.util.List<org.springframework.data.solr.core.query.result.HighlightEntry<T>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.solr.core.query.result.Highlight> < Highlight > java.util.List<org.springframework.data.solr.core.query.result.Highlight> ( T T ) { if ( T != null && this . java.util.List<org.springframework.data.solr.core.query.result.HighlightEntry<T>> != null ) { for ( HighlightEntry < T > org.springframework.data.solr.core.query.result.HighlightEntry<T> : this . java.util.List<org.springframework.data.solr.core.query.result.HighlightEntry<T>> ) { if ( org.springframework.data.solr.core.query.result.HighlightEntry<T> != null && ObjectUtils . nullSafeEquals ( org.springframework.data.solr.core.query.result.HighlightEntry<T> . getEntity ( ) , T ) ) { return org.springframework.data.solr.core.query.result.HighlightEntry<T> . getHighlights ( ) ; } } } return java.util.Collections . java.util.List<org.springframework.data.solr.core.query.result.Highlight> ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<T>> < java.lang.Object , GroupResult < T > > java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<T>> ) { this . java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<T>> = java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<T>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Float java.lang.Float ( ) { return java.lang.Float ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.result.GroupResult<T> < T > org.springframework.data.solr.core.query.result.GroupResult<T> ( Field org.springframework.data.solr.core.query.result.Field ) { Assert . notNull ( org.springframework.data.solr.core.query.result.Field , STRING ) ; return java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<T>> . get ( org.springframework.data.solr.core.query.result.Field . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.result.GroupResult<T> < T > org.springframework.data.solr.core.query.result.GroupResult<T> ( Function org.springframework.data.solr.core.query.result.Function ) { Assert . notNull ( org.springframework.data.solr.core.query.result.Function , STRING ) ; return java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<T>> . get ( org.springframework.data.solr.core.query.result.Function ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.result.GroupResult<T> < T > org.springframework.data.solr.core.query.result.GroupResult<T> ( Query org.springframework.data.solr.core.query.result.Query ) { Assert . notNull ( org.springframework.data.solr.core.query.result.Query , STRING ) ; return java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<T>> . get ( org.springframework.data.solr.core.query.result.Query ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.result.GroupResult<T> < T > org.springframework.data.solr.core.query.result.GroupResult<T> ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<T>> . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.data.solr.core.query.result.FieldStatsResult> < java.lang.String , FieldStatsResult > java.util.Map<java.lang.String,org.springframework.data.solr.core.query.result.FieldStatsResult> ) { this . java.util.Map<java.lang.String,org.springframework.data.solr.core.query.result.FieldStatsResult> = java.util.Map<java.lang.String,org.springframework.data.solr.core.query.result.FieldStatsResult> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.result.FieldStatsResult org.springframework.data.solr.core.query.result.FieldStatsResult ( Field org.springframework.data.solr.core.query.result.Field ) { return org.springframework.data.solr.core.query.result.FieldStatsResult ( org.springframework.data.solr.core.query.result.Field . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.result.FieldStatsResult org.springframework.data.solr.core.query.result.FieldStatsResult ( java.lang.String java.lang.String ) { return this . java.util.Map<java.lang.String,org.springframework.data.solr.core.query.result.FieldStatsResult> . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,org.springframework.data.solr.core.query.result.FieldStatsResult> < java.lang.String , FieldStatsResult > java.util.Map<java.lang.String,org.springframework.data.solr.core.query.result.FieldStatsResult> ( ) { return this . java.util.Map<java.lang.String,org.springframework.data.solr.core.query.result.FieldStatsResult> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( Alternative org.springframework.data.solr.core.query.result.Alternative : java.util.Collection<org.springframework.data.solr.core.query.result.Alternative> ( java.lang.String ) ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.solr.core.query.result.Alternative . getSuggestion ( ) ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( Alternative org.springframework.data.solr.core.query.result.Alternative : java.util.Collection<org.springframework.data.solr.core.query.result.Alternative> ( ) ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.solr.core.query.result.Alternative . getSuggestion ( ) ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.util.List<org.springframework.data.solr.core.query.result.Alternative> < Alternative > java.util.List<org.springframework.data.solr.core.query.result.Alternative> ) { this . java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.query.result.Alternative>> . put ( java.lang.String , java.util.List<org.springframework.data.solr.core.query.result.Alternative> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.data.solr.core.query.result.Alternative> < Alternative > java.util.Collection<org.springframework.data.solr.core.query.result.Alternative> ( ) { java.util.List<org.springframework.data.solr.core.query.result.Alternative> < Alternative > java.util.List<org.springframework.data.solr.core.query.result.Alternative> = new java.util.ArrayList<org.springframework.data.solr.core.query.result.Alternative> <> ( ) ; for ( java.util.List<org.springframework.data.solr.core.query.result.Alternative> < Alternative > java.util.List<org.springframework.data.solr.core.query.result.Alternative> : this . java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.query.result.Alternative>> . values ( ) ) { java.util.List<org.springframework.data.solr.core.query.result.Alternative> . addAll ( java.util.List<org.springframework.data.solr.core.query.result.Alternative> ) ; } return java.util.List<org.springframework.data.solr.core.query.result.Alternative> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.data.solr.core.query.result.Alternative> < Alternative > java.util.Collection<org.springframework.data.solr.core.query.result.Alternative> ( java.lang.String java.lang.String ) { return java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.query.result.Alternative>> . containsKey ( java.lang.String ) ? java.util.Collections .< Alternative > java.util.List<org.springframework.data.solr.core.query.result.Alternative> ( this . java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.query.result.Alternative>> . get ( java.lang.String ) ) : java.util.Collections .< Alternative > java.util.List<org.springframework.data.solr.core.query.result.Alternative> ( ) ; }  <METHOD_END>
