<METHOD_START> public void ( ) { this . org.springframework.context.annotation.AnnotatedBeanDefinitionReader = new AnnotatedBeanDefinitionReader ( this ) ; this . org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( this ) ; }  <METHOD_END>
<METHOD_START> public void ( DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory ) { super( org.springframework.context.annotation.DefaultListableBeanFactory ); this . org.springframework.context.annotation.AnnotatedBeanDefinitionReader = new AnnotatedBeanDefinitionReader ( this ) ; this . org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( this ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this(); void ( java.lang.Class<?>[] ) ; refresh ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String ... java.lang.String[] ) { this(); void ( java.lang.String[] ) ; refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableEnvironment org.springframework.context.annotation.ConfigurableEnvironment ) { super. setEnvironment ( org.springframework.context.annotation.ConfigurableEnvironment ) ; this . org.springframework.context.annotation.AnnotatedBeanDefinitionReader . setEnvironment ( org.springframework.context.annotation.ConfigurableEnvironment ) ; this . org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setEnvironment ( org.springframework.context.annotation.ConfigurableEnvironment ) ; }  <METHOD_END>
<METHOD_START> public void void ( BeanNameGenerator org.springframework.context.annotation.BeanNameGenerator ) { this . org.springframework.context.annotation.AnnotatedBeanDefinitionReader . setBeanNameGenerator ( org.springframework.context.annotation.BeanNameGenerator ) ; this . org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setBeanNameGenerator ( org.springframework.context.annotation.BeanNameGenerator ) ; getBeanFactory ( ) . registerSingleton ( AnnotationConfigUtils . CONFIGURATION_BEAN_NAME_GENERATOR , org.springframework.context.annotation.BeanNameGenerator ) ; }  <METHOD_END>
<METHOD_START> public void void ( ScopeMetadataResolver org.springframework.context.annotation.ScopeMetadataResolver ) { this . org.springframework.context.annotation.AnnotatedBeanDefinitionReader . setScopeMetadataResolver ( org.springframework.context.annotation.ScopeMetadataResolver ) ; this . org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setScopeMetadataResolver ( org.springframework.context.annotation.ScopeMetadataResolver ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . notEmpty ( java.lang.Class<?>[] , STRING ) ; this . org.springframework.context.annotation.AnnotatedBeanDefinitionReader . register ( java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { Assert . notEmpty ( java.lang.String[] , STRING ) ; this . org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public < T > void void ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] ) { void ( null , java.lang.Class<T> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public < T > void void ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] ) { this . org.springframework.context.annotation.AnnotatedBeanDefinitionReader . doRegisterBean ( java.lang.Class<T> , null , java.lang.String , null , bd -> { for ( Object arg : constructorArguments ) { bd . getConstructorArgumentValues ( ) . addGenericArgumentValue ( arg ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > void void ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , java.util.function.Supplier<T> < T > java.util.function.Supplier<T> , BeanDefinitionCustomizer ... org.springframework.context.annotation.BeanDefinitionCustomizer[] ) { this . org.springframework.context.annotation.AnnotatedBeanDefinitionReader . doRegisterBean ( java.lang.Class<T> , java.util.function.Supplier<T> , java.lang.String , null , org.springframework.context.annotation.BeanDefinitionCustomizer[] ) ; }  <METHOD_END>
