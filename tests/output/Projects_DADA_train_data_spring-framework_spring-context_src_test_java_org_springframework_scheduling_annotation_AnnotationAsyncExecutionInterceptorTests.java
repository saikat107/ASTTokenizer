<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { AnnotationAsyncExecutionInterceptor org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor = new AnnotationAsyncExecutionInterceptor ( null ) ; { class C { @ Async ( STRING ) void void ( ) { } } assertThat ( org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor . getExecutorQualifier ( C .class . java.lang.reflect.Method ( STRING ) ) , is ( STRING ) ) ; } { @ Async ( STRING ) class C { void void ( ) { } } assertThat ( org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor . getExecutorQualifier ( C .class . java.lang.reflect.Method ( STRING ) ) , is ( STRING ) ) ; } { @ Async ( STRING ) class C { @ Async ( STRING ) void void ( ) { } } assertThat ( org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor . getExecutorQualifier ( C .class . java.lang.reflect.Method ( STRING ) ) , is ( STRING ) ) ; } { @ Async ( STRING ) class C { @ Async void void ( ) { } } assertThat ( org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor . getExecutorQualifier ( C .class . java.lang.reflect.Method ( STRING ) ) , is ( STRING ) ) ; } { @ org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptorTests.MyAsync class C { void void ( ) { } } assertThat ( org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor . getExecutorQualifier ( C .class . java.lang.reflect.Method ( STRING ) ) , is ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Async ( STRING ) void void ( ) { }  <METHOD_END>
<METHOD_START> void void ( ) { }  <METHOD_END>
<METHOD_START> @ Async ( STRING ) void void ( ) { }  <METHOD_END>
<METHOD_START> @ Async void void ( ) { }  <METHOD_END>
<METHOD_START> void void ( ) { }  <METHOD_END>
