<METHOD_START> private void ( java.lang.reflect.Type java.lang.reflect.Type , TypeProvider org.springframework.core.TypeProvider , org.springframework.core.ResolvableType.VariableResolver org.springframework.core.ResolvableType.VariableResolver ) { this . java.lang.reflect.Type = java.lang.reflect.Type ; this . org.springframework.core.TypeProvider = org.springframework.core.TypeProvider ; this . org.springframework.core.ResolvableType.VariableResolver = org.springframework.core.ResolvableType.VariableResolver ; this . org.springframework.core.ResolvableType = null ; this . java.lang.Class<?> = null ; this . java.lang.Integer = int ( ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.reflect.Type java.lang.reflect.Type , TypeProvider org.springframework.core.TypeProvider , org.springframework.core.ResolvableType.VariableResolver org.springframework.core.ResolvableType.VariableResolver , java.lang.Integer java.lang.Integer ) { this . java.lang.reflect.Type = java.lang.reflect.Type ; this . org.springframework.core.TypeProvider = org.springframework.core.TypeProvider ; this . org.springframework.core.ResolvableType.VariableResolver = org.springframework.core.ResolvableType.VariableResolver ; this . org.springframework.core.ResolvableType = null ; this . java.lang.Class<?> = java.lang.Class<?> ( ) ; this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.reflect.Type java.lang.reflect.Type , TypeProvider org.springframework.core.TypeProvider , org.springframework.core.ResolvableType.VariableResolver org.springframework.core.ResolvableType.VariableResolver , org.springframework.core.ResolvableType org.springframework.core.ResolvableType ) { this . java.lang.reflect.Type = java.lang.reflect.Type ; this . org.springframework.core.TypeProvider = org.springframework.core.TypeProvider ; this . org.springframework.core.ResolvableType.VariableResolver = org.springframework.core.ResolvableType.VariableResolver ; this . org.springframework.core.ResolvableType = org.springframework.core.ResolvableType ; this . java.lang.Class<?> = java.lang.Class<?> ( ) ; this . java.lang.Integer = null ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = ( java.lang.Class<> != null ? java.lang.Class<> : java.lang.Object .class ) ; this . java.lang.reflect.Type = this . java.lang.Class<> ; this . org.springframework.core.TypeProvider = null ; this . org.springframework.core.ResolvableType.VariableResolver = null ; this . org.springframework.core.ResolvableType = null ; this . java.lang.Integer = null ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Type java.lang.reflect.Type ( ) { return SerializableTypeWrapper . unwrap ( this . java.lang.reflect.Type ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { if ( this . java.lang.reflect.Type == this . java.lang.Class<> ) { return this . java.lang.Class<> ; } java.lang.reflect.Type java.lang.reflect.Type = this . java.lang.reflect.Type ; if ( java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ) { java.lang.reflect.Type = ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ) . java.lang.reflect.Type ( ) ; } return ( java.lang.reflect.Type instanceof java.lang.Class ? ( java.lang.Class<?> < ? > ) java.lang.reflect.Type : null ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { java.lang.Object java.lang.Object = ( this . org.springframework.core.TypeProvider != null ? this . org.springframework.core.TypeProvider . getSource ( ) : null ) ; return ( java.lang.Object != null ? java.lang.Object : this . java.lang.reflect.Type ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Object java.lang.Object ) { return ( java.lang.Object != null && boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return boolean ( org.springframework.core.ResolvableType ( java.lang.Class<> ) , null ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( org.springframework.core.ResolvableType org.springframework.core.ResolvableType ) { return boolean ( org.springframework.core.ResolvableType , null ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( org.springframework.core.ResolvableType org.springframework.core.ResolvableType , java.util.Map<java.lang.reflect.Type,java.lang.reflect.Type> < java.lang.reflect.Type , java.lang.reflect.Type > java.util.Map<java.lang.reflect.Type,java.lang.reflect.Type> ) { Assert . notNull ( org.springframework.core.ResolvableType , STRING ) ; if ( this == org.springframework.core.ResolvableType || org.springframework.core.ResolvableType == org.springframework.core.ResolvableType ) { return false ; } if ( boolean ( ) ) { return ( org.springframework.core.ResolvableType . boolean ( ) && org.springframework.core.ResolvableType ( ) . boolean ( org.springframework.core.ResolvableType . org.springframework.core.ResolvableType ( ) ) ) ; } if ( java.util.Map<java.lang.reflect.Type,java.lang.reflect.Type> != null && java.util.Map<java.lang.reflect.Type,java.lang.reflect.Type> . java.lang.reflect.Type ( this . java.lang.reflect.Type ) == org.springframework.core.ResolvableType . java.lang.reflect.Type ) { return true ; } org.springframework.core.ResolvableType.WildcardBounds org.springframework.core.ResolvableType.WildcardBounds = org.springframework.core.ResolvableType.WildcardBounds . org.springframework.core.ResolvableType.WildcardBounds ( this ) ; org.springframework.core.ResolvableType.WildcardBounds org.springframework.core.ResolvableType.WildcardBounds = org.springframework.core.ResolvableType.WildcardBounds . org.springframework.core.ResolvableType.WildcardBounds ( org.springframework.core.ResolvableType ) ; if ( org.springframework.core.ResolvableType.WildcardBounds != null ) { return ( org.springframework.core.ResolvableType.WildcardBounds != null && org.springframework.core.ResolvableType.WildcardBounds . boolean ( org.springframework.core.ResolvableType.WildcardBounds ) && org.springframework.core.ResolvableType.WildcardBounds . boolean ( org.springframework.core.ResolvableType.WildcardBounds . org.springframework.core.ResolvableType[] ( ) ) ) ; } if ( org.springframework.core.ResolvableType.WildcardBounds != null ) { return org.springframework.core.ResolvableType.WildcardBounds . boolean ( org.springframework.core.ResolvableType ) ; } boolean boolean = ( java.util.Map<java.lang.reflect.Type,java.lang.reflect.Type> != null ) ; boolean boolean = true ; java.lang.Class<?> < ? > java.lang.Class<?> = null ; if ( this . java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable ) { java.lang.reflect.TypeVariable<?> < ? > java.lang.reflect.TypeVariable<?> = ( java.lang.reflect.TypeVariable<?> < ? > ) this . java.lang.reflect.Type ; if ( this . org.springframework.core.ResolvableType.VariableResolver != null ) { org.springframework.core.ResolvableType org.springframework.core.ResolvableType = this . org.springframework.core.ResolvableType.VariableResolver . org.springframework.core.ResolvableType ( java.lang.reflect.TypeVariable<> ) ; if ( org.springframework.core.ResolvableType != null ) { java.lang.Class<?> = org.springframework.core.ResolvableType . java.lang.Class<?> ( ) ; } } if ( java.lang.Class<> == null ) { if ( org.springframework.core.ResolvableType . org.springframework.core.ResolvableType.VariableResolver != null ) { org.springframework.core.ResolvableType org.springframework.core.ResolvableType = org.springframework.core.ResolvableType . org.springframework.core.ResolvableType.VariableResolver . org.springframework.core.ResolvableType ( java.lang.reflect.TypeVariable<> ) ; if ( org.springframework.core.ResolvableType != null ) { java.lang.Class<?> = org.springframework.core.ResolvableType . java.lang.Class<?> ( ) ; boolean = false ; } } } if ( java.lang.Class<> == null ) { boolean = false ; } } if ( java.lang.Class<> == null ) { java.lang.Class<?> = java.lang.Class<?> ( java.lang.Object .class ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.ResolvableType . java.lang.Class<?> ( java.lang.Object .class ) ; if ( boolean ? ! java.lang.Class<> . boolean ( java.lang.Class<> ) : ! ClassUtils . isAssignable ( java.lang.Class<> , java.lang.Class<> ) ) { return false ; } if ( boolean ) { org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] = org.springframework.core.ResolvableType[] ( ) ; org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] = org.springframework.core.ResolvableType . org.springframework.core.ResolvableType ( java.lang.Class<> ) . org.springframework.core.ResolvableType[] ( ) ; if ( org.springframework.core.ResolvableType[] . int != org.springframework.core.ResolvableType[] . int ) { return false ; } if ( java.util.Map<java.lang.reflect.Type,java.lang.reflect.Type> == null ) { java.util.Map<java.lang.reflect.Type,java.lang.reflect.Type> = new java.util.IdentityHashMap<java.lang.reflect.Type,java.lang.reflect.Type> <> ( NUMBER ) ; } java.util.Map<java.lang.reflect.Type,java.lang.reflect.Type> . java.lang.reflect.Type ( this . java.lang.reflect.Type , org.springframework.core.ResolvableType . java.lang.reflect.Type ) ; for ( int int = NUMBER ; int < org.springframework.core.ResolvableType[] . int ; int ++ ) { if ( ! org.springframework.core.ResolvableType[] [ int ] . boolean ( org.springframework.core.ResolvableType[] [ int ] , java.util.Map<java.lang.reflect.Type,java.lang.reflect.Type> ) ) { return false ; } } } return true ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { if ( this == org.springframework.core.ResolvableType ) { return false ; } return ( ( ( this . java.lang.reflect.Type instanceof java.lang.Class && ( ( java.lang.Class<?> < ? > ) this . java.lang.reflect.Type ) . boolean ( ) ) ) || this . java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType || org.springframework.core.ResolvableType ( ) . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( ) { if ( this == org.springframework.core.ResolvableType ) { return org.springframework.core.ResolvableType ; } if ( this . org.springframework.core.ResolvableType != null ) { return this . org.springframework.core.ResolvableType ; } if ( this . java.lang.reflect.Type instanceof java.lang.Class ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( ( java.lang.Class<?> < ? > ) this . java.lang.reflect.Type ) . java.lang.Class<?> ( ) ; return org.springframework.core.ResolvableType ( java.lang.Class<> , this . org.springframework.core.ResolvableType.VariableResolver ) ; } if ( this . java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType ) { return org.springframework.core.ResolvableType ( ( ( java.lang.reflect.GenericArrayType ) this . java.lang.reflect.Type ) . java.lang.reflect.Type ( ) , this . org.springframework.core.ResolvableType.VariableResolver ) ; } return org.springframework.core.ResolvableType ( ) . org.springframework.core.ResolvableType ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( ) { return org.springframework.core.ResolvableType ( java.util.Collection .class ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( ) { return org.springframework.core.ResolvableType ( java.util.Map .class ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( this == org.springframework.core.ResolvableType ) { return org.springframework.core.ResolvableType ; } if ( ObjectUtils . nullSafeEquals ( java.lang.Class<?> ( ) , java.lang.Class<> ) ) { return this ; } for ( org.springframework.core.ResolvableType org.springframework.core.ResolvableType : org.springframework.core.ResolvableType[] ( ) ) { org.springframework.core.ResolvableType org.springframework.core.ResolvableType = org.springframework.core.ResolvableType . org.springframework.core.ResolvableType ( java.lang.Class<> ) ; if ( org.springframework.core.ResolvableType != org.springframework.core.ResolvableType ) { return org.springframework.core.ResolvableType ; } } return org.springframework.core.ResolvableType ( ) . org.springframework.core.ResolvableType ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( ) ; if ( java.lang.Class<> == null || java.lang.Class<> . java.lang.reflect.Type ( ) == null ) { return org.springframework.core.ResolvableType ; } if ( this . org.springframework.core.ResolvableType == null ) { this . org.springframework.core.ResolvableType = org.springframework.core.ResolvableType ( SerializableTypeWrapper . forGenericSuperclass ( java.lang.Class<> ) , org.springframework.core.ResolvableType.VariableResolver ( ) ) ; } return this . org.springframework.core.ResolvableType ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( ) ; if ( java.lang.Class<> == null || ObjectUtils . isEmpty ( java.lang.Class<> . java.lang.reflect.Type[] ( ) ) ) { return org.springframework.core.ResolvableType[] ; } if ( this . org.springframework.core.ResolvableType[] == null ) { this . org.springframework.core.ResolvableType[] = org.springframework.core.ResolvableType[] ( SerializableTypeWrapper . forGenericInterfaces ( java.lang.Class<> ) , org.springframework.core.ResolvableType.VariableResolver ( ) ) ; } return this . org.springframework.core.ResolvableType[] ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( org.springframework.core.ResolvableType[] ( ) . int > NUMBER ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { if ( this == org.springframework.core.ResolvableType ) { return false ; } org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] = org.springframework.core.ResolvableType[] ( ) ; for ( org.springframework.core.ResolvableType org.springframework.core.ResolvableType : org.springframework.core.ResolvableType[] ) { if ( ! org.springframework.core.ResolvableType . boolean ( ) && ! org.springframework.core.ResolvableType . boolean ( ) ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { if ( this == org.springframework.core.ResolvableType ) { return false ; } org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] = org.springframework.core.ResolvableType[] ( ) ; for ( org.springframework.core.ResolvableType org.springframework.core.ResolvableType : org.springframework.core.ResolvableType[] ) { if ( org.springframework.core.ResolvableType . boolean ( ) || org.springframework.core.ResolvableType . boolean ( ) ) { return true ; } } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( ) ; if ( java.lang.Class<> != null ) { for ( java.lang.reflect.Type java.lang.reflect.Type : java.lang.Class<> . java.lang.reflect.Type[] ( ) ) { if ( java.lang.reflect.Type instanceof java.lang.Class ) { if ( org.springframework.core.ResolvableType ( ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ) . boolean ( ) ) { return true ; } } } return org.springframework.core.ResolvableType ( ) . boolean ( ) ; } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { if ( this . java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable ) { if ( this . org.springframework.core.ResolvableType.VariableResolver == null ) { return true ; } java.lang.reflect.TypeVariable<?> < ? > java.lang.reflect.TypeVariable<?> = ( java.lang.reflect.TypeVariable<?> < ? > ) this . java.lang.reflect.Type ; org.springframework.core.ResolvableType org.springframework.core.ResolvableType = this . org.springframework.core.ResolvableType.VariableResolver . org.springframework.core.ResolvableType ( java.lang.reflect.TypeVariable<> ) ; if ( org.springframework.core.ResolvableType == null || org.springframework.core.ResolvableType . boolean ( ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { if ( this . java.lang.reflect.Type instanceof java.lang.reflect.WildcardType ) { java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ( java.lang.reflect.WildcardType ) this . java.lang.reflect.Type ; if ( java.lang.reflect.WildcardType . java.lang.reflect.Type[] ( ) . int == NUMBER ) { java.lang.reflect.Type [] java.lang.reflect.Type[] = java.lang.reflect.WildcardType . java.lang.reflect.Type[] ( ) ; if ( java.lang.reflect.Type[] . int == NUMBER || ( java.lang.reflect.Type[] . int == NUMBER && java.lang.Object .class == java.lang.reflect.Type[] [ NUMBER ] ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( int int ) { return org.springframework.core.ResolvableType ( int , null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( int int , java.util.Map<java.lang.Integer,java.lang.Integer> < java.lang.Integer , java.lang.Integer > java.util.Map<java.lang.Integer,java.lang.Integer> ) { org.springframework.core.ResolvableType org.springframework.core.ResolvableType = this ; for ( int int = NUMBER ; int <= int ; int ++ ) { if ( org.springframework.core.ResolvableType . boolean ( ) ) { org.springframework.core.ResolvableType = org.springframework.core.ResolvableType . org.springframework.core.ResolvableType ( ) ; } else { while ( org.springframework.core.ResolvableType != org.springframework.core.ResolvableType . org.springframework.core.ResolvableType && ! org.springframework.core.ResolvableType . boolean ( ) ) { org.springframework.core.ResolvableType = org.springframework.core.ResolvableType . org.springframework.core.ResolvableType ( ) ; } java.lang.Integer java.lang.Integer = ( java.util.Map<java.lang.Integer,java.lang.Integer> != null ? java.util.Map<java.lang.Integer,java.lang.Integer> . java.lang.Integer ( int ) : null ) ; java.lang.Integer = ( java.lang.Integer == null ? org.springframework.core.ResolvableType . org.springframework.core.ResolvableType[] ( ) . int - NUMBER : java.lang.Integer ) ; org.springframework.core.ResolvableType = org.springframework.core.ResolvableType . org.springframework.core.ResolvableType ( java.lang.Integer ) ; } } return org.springframework.core.ResolvableType ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( int ... int[] ) { org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] = org.springframework.core.ResolvableType[] ( ) ; if ( int[] == null || int[] . int == NUMBER ) { return ( org.springframework.core.ResolvableType[] . int == NUMBER ? org.springframework.core.ResolvableType : org.springframework.core.ResolvableType[] [ NUMBER ] ) ; } org.springframework.core.ResolvableType org.springframework.core.ResolvableType = this ; for ( int int : int[] ) { org.springframework.core.ResolvableType[] = org.springframework.core.ResolvableType . org.springframework.core.ResolvableType[] ( ) ; if ( int < NUMBER || int >= org.springframework.core.ResolvableType[] . int ) { return org.springframework.core.ResolvableType ; } org.springframework.core.ResolvableType = org.springframework.core.ResolvableType[] [ int ] ; } return org.springframework.core.ResolvableType ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] ( ) { if ( this == org.springframework.core.ResolvableType ) { return org.springframework.core.ResolvableType[] ; } if ( this . org.springframework.core.ResolvableType[] == null ) { if ( this . java.lang.reflect.Type instanceof java.lang.Class ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) this . java.lang.reflect.Type ; this . org.springframework.core.ResolvableType[] = org.springframework.core.ResolvableType[] ( SerializableTypeWrapper . forTypeParameters ( java.lang.Class<> ) , this . org.springframework.core.ResolvableType.VariableResolver ) ; } else if ( this . java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ) { java.lang.reflect.Type [] java.lang.reflect.Type[] = ( ( java.lang.reflect.ParameterizedType ) this . java.lang.reflect.Type ) . java.lang.reflect.Type[] ( ) ; org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] = new org.springframework.core.ResolvableType [ java.lang.reflect.Type[] . int ] ; for ( int int = NUMBER ; int < java.lang.reflect.Type[] . int ; int ++ ) { org.springframework.core.ResolvableType[] [ int ] = org.springframework.core.ResolvableType ( java.lang.reflect.Type[] [ int ] , this . org.springframework.core.ResolvableType.VariableResolver ) ; } this . org.springframework.core.ResolvableType[] = org.springframework.core.ResolvableType[] ; } else { this . org.springframework.core.ResolvableType[] = org.springframework.core.ResolvableType ( ) . org.springframework.core.ResolvableType[] ( ) ; } } return this . org.springframework.core.ResolvableType[] ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return java.lang.Class<?>[] ( null ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] = org.springframework.core.ResolvableType[] ( ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [ org.springframework.core.ResolvableType[] . int ] ; for ( int int = NUMBER ; int < org.springframework.core.ResolvableType[] . int ; int ++ ) { java.lang.Class<?>[] [ int ] = org.springframework.core.ResolvableType[] [ int ] . java.lang.Class<?> ( java.lang.Class<> ) ; } return java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( int ... int[] ) { return org.springframework.core.ResolvableType ( int[] ) . java.lang.Class<?> ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Class<?> ( null ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( this . java.lang.Class<> != null ? this . java.lang.Class<> : java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( ) { if ( this . java.lang.reflect.Type instanceof java.lang.Class || this . java.lang.reflect.Type == null ) { return ( java.lang.Class<?> < ? > ) this . java.lang.reflect.Type ; } if ( this . java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.ResolvableType ( ) . java.lang.Class<?> ( ) ; return ( java.lang.Class<> != null ? java.lang.reflect.Array . java.lang.Object ( java.lang.Class<> , NUMBER ) . java.lang.Class<? extends java.lang.Object> ( ) : null ) ; } return org.springframework.core.ResolvableType ( ) . java.lang.Class<?> ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( ) { if ( this . java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ) { return org.springframework.core.ResolvableType ( ( ( java.lang.reflect.ParameterizedType ) this . java.lang.reflect.Type ) . java.lang.reflect.Type ( ) , this . org.springframework.core.ResolvableType.VariableResolver ) ; } if ( this . java.lang.reflect.Type instanceof java.lang.reflect.WildcardType ) { java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type ( ( ( java.lang.reflect.WildcardType ) this . java.lang.reflect.Type ) . java.lang.reflect.Type[] ( ) ) ; if ( java.lang.reflect.Type == null ) { java.lang.reflect.Type = java.lang.reflect.Type ( ( ( java.lang.reflect.WildcardType ) this . java.lang.reflect.Type ) . java.lang.reflect.Type[] ( ) ) ; } return org.springframework.core.ResolvableType ( java.lang.reflect.Type , this . org.springframework.core.ResolvableType.VariableResolver ) ; } if ( this . java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable ) { java.lang.reflect.TypeVariable<?> < ? > java.lang.reflect.TypeVariable<?> = ( java.lang.reflect.TypeVariable<?> < ? > ) this . java.lang.reflect.Type ; if ( this . org.springframework.core.ResolvableType.VariableResolver != null ) { org.springframework.core.ResolvableType org.springframework.core.ResolvableType = this . org.springframework.core.ResolvableType.VariableResolver . org.springframework.core.ResolvableType ( java.lang.reflect.TypeVariable<> ) ; if ( org.springframework.core.ResolvableType != null ) { return org.springframework.core.ResolvableType ; } } return org.springframework.core.ResolvableType ( java.lang.reflect.Type ( java.lang.reflect.TypeVariable<> . java.lang.reflect.Type[] ( ) ) , this . org.springframework.core.ResolvableType.VariableResolver ) ; } return org.springframework.core.ResolvableType ; }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Type java.lang.reflect.Type ( java.lang.reflect.Type [] java.lang.reflect.Type[] ) { if ( ObjectUtils . isEmpty ( java.lang.reflect.Type[] ) || java.lang.Object .class == java.lang.reflect.Type[] [ NUMBER ] ) { return null ; } return java.lang.reflect.Type[] [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> private org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.TypeVariable<?> < ? > java.lang.reflect.TypeVariable<?> ) { if ( this . java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable ) { return org.springframework.core.ResolvableType ( ) . org.springframework.core.ResolvableType ( java.lang.reflect.TypeVariable<> ) ; } if ( this . java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ) { java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ( java.lang.reflect.ParameterizedType ) this . java.lang.reflect.Type ; java.lang.reflect.TypeVariable<?> < ? > [] java.lang.reflect.TypeVariable<?>[] = java.lang.Class<?> ( ) . java.lang.reflect.TypeVariable<java.lang.Class<>>[] ( ) ; for ( int int = NUMBER ; int < java.lang.reflect.TypeVariable<?>[] . int ; int ++ ) { if ( ObjectUtils . nullSafeEquals ( java.lang.reflect.TypeVariable<?>[] [ int ] . java.lang.String ( ) , java.lang.reflect.TypeVariable<> . java.lang.String ( ) ) ) { java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) [ int ] ; return org.springframework.core.ResolvableType ( java.lang.reflect.Type , this . org.springframework.core.ResolvableType.VariableResolver ) ; } } if ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type ( ) != null ) { return org.springframework.core.ResolvableType ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type ( ) , this . org.springframework.core.ResolvableType.VariableResolver ) . org.springframework.core.ResolvableType ( java.lang.reflect.TypeVariable<> ) ; } } if ( this . org.springframework.core.ResolvableType.VariableResolver != null ) { return this . org.springframework.core.ResolvableType.VariableResolver . org.springframework.core.ResolvableType ( java.lang.reflect.TypeVariable<> ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.core.ResolvableType ) ) { return false ; } org.springframework.core.ResolvableType org.springframework.core.ResolvableType = ( org.springframework.core.ResolvableType ) java.lang.Object ; if ( ! ObjectUtils . nullSafeEquals ( this . java.lang.reflect.Type , org.springframework.core.ResolvableType . java.lang.reflect.Type ) ) { return false ; } if ( this . org.springframework.core.TypeProvider != org.springframework.core.ResolvableType . org.springframework.core.TypeProvider && ( this . org.springframework.core.TypeProvider == null || org.springframework.core.ResolvableType . org.springframework.core.TypeProvider == null || ! ObjectUtils . nullSafeEquals ( this . org.springframework.core.TypeProvider . getType ( ) , org.springframework.core.ResolvableType . org.springframework.core.TypeProvider . getType ( ) ) ) ) { return false ; } if ( this . org.springframework.core.ResolvableType.VariableResolver != org.springframework.core.ResolvableType . org.springframework.core.ResolvableType.VariableResolver && ( this . org.springframework.core.ResolvableType.VariableResolver == null || org.springframework.core.ResolvableType . org.springframework.core.ResolvableType.VariableResolver == null || ! ObjectUtils . nullSafeEquals ( this . org.springframework.core.ResolvableType.VariableResolver . java.lang.Object ( ) , org.springframework.core.ResolvableType . org.springframework.core.ResolvableType.VariableResolver . java.lang.Object ( ) ) ) ) { return false ; } if ( ! ObjectUtils . nullSafeEquals ( this . org.springframework.core.ResolvableType , org.springframework.core.ResolvableType . org.springframework.core.ResolvableType ) ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( this . java.lang.Integer != null ? this . java.lang.Integer : int ( ) ) ; }  <METHOD_END>
<METHOD_START> private int int ( ) { int int = ObjectUtils . nullSafeHashCode ( this . java.lang.reflect.Type ) ; if ( this . org.springframework.core.TypeProvider != null ) { int = NUMBER * int + ObjectUtils . nullSafeHashCode ( this . org.springframework.core.TypeProvider . getType ( ) ) ; } if ( this . org.springframework.core.ResolvableType.VariableResolver != null ) { int = NUMBER * int + ObjectUtils . nullSafeHashCode ( this . org.springframework.core.ResolvableType.VariableResolver . java.lang.Object ( ) ) ; } if ( this . org.springframework.core.ResolvableType != null ) { int = NUMBER * int + ObjectUtils . nullSafeHashCode ( this . org.springframework.core.ResolvableType ) ; } return int ; }  <METHOD_END>
<METHOD_START> org.springframework.core.ResolvableType.VariableResolver org.springframework.core.ResolvableType.VariableResolver ( ) { if ( this == org.springframework.core.ResolvableType ) { return null ; } return new org.springframework.core.ResolvableType.DefaultVariableResolver ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( ) { return ( this . java.lang.reflect.Type == null ? org.springframework.core.ResolvableType : this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { if ( boolean ( ) ) { return org.springframework.core.ResolvableType ( ) + STRING ; } if ( this . java.lang.Class<> == null ) { return STRING ; } if ( this . java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable ) { java.lang.reflect.TypeVariable<?> < ? > java.lang.reflect.TypeVariable<?> = ( java.lang.reflect.TypeVariable<?> < ? > ) this . java.lang.reflect.Type ; if ( this . org.springframework.core.ResolvableType.VariableResolver == null || this . org.springframework.core.ResolvableType.VariableResolver . org.springframework.core.ResolvableType ( java.lang.reflect.TypeVariable<> ) == null ) { return STRING ; } } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( this . java.lang.Class<> . java.lang.String ( ) ) ; if ( boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( '<' ) ; java.lang.StringBuilder . java.lang.StringBuilder ( StringUtils . arrayToDelimitedString ( org.springframework.core.ResolvableType[] ( ) , STRING ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '>' ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new org.springframework.core.ResolvableType ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new org.springframework.core.ResolvableType ( java.lang.Class<> ) { @ java.lang.Override public org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] ( ) { return org.springframework.core.ResolvableType[] ; } @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ClassUtils . isAssignable ( java.lang.Class<?> ( ) , java.lang.Class<> ) ; } @ java.lang.Override public boolean boolean ( org.springframework.core.ResolvableType org.springframework.core.ResolvableType ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.ResolvableType . java.lang.Class<?> ( ) ; return ( java.lang.Class<> != null && ClassUtils . isAssignable ( java.lang.Class<?> ( ) , java.lang.Class<> ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] ( ) { return org.springframework.core.ResolvableType[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ClassUtils . isAssignable ( java.lang.Class<?> ( ) , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( org.springframework.core.ResolvableType org.springframework.core.ResolvableType ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.ResolvableType . java.lang.Class<?> ( ) ; return ( java.lang.Class<> != null && ClassUtils . isAssignable ( java.lang.Class<?> ( ) , java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; org.springframework.core.ResolvableType org.springframework.core.ResolvableType = org.springframework.core.ResolvableType ( java.lang.Class<> ) . org.springframework.core.ResolvableType ( java.lang.Class<> ) ; return ( org.springframework.core.ResolvableType == org.springframework.core.ResolvableType ? org.springframework.core.ResolvableType ( java.lang.Class<> ) : org.springframework.core.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.lang.Class<?>[] , STRING ) ; org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] = new org.springframework.core.ResolvableType [ java.lang.Class<?>[] . int ] ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { org.springframework.core.ResolvableType[] [ int ] = org.springframework.core.ResolvableType ( java.lang.Class<?>[] [ int ] ) ; } return org.springframework.core.ResolvableType ( java.lang.Class<> , org.springframework.core.ResolvableType[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.Class<?> < ? > java.lang.Class<?> , org.springframework.core.ResolvableType ... org.springframework.core.ResolvableType[] ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( org.springframework.core.ResolvableType[] , STRING ) ; java.lang.reflect.TypeVariable<?> < ? > [] java.lang.reflect.TypeVariable<?>[] = java.lang.Class<> . java.lang.reflect.TypeVariable<java.lang.Class<>>[] ( ) ; Assert . isTrue ( java.lang.reflect.TypeVariable<?>[] . int == org.springframework.core.ResolvableType[] . int , STRING ) ; java.lang.reflect.Type [] java.lang.reflect.Type[] = new java.lang.reflect.Type [ org.springframework.core.ResolvableType[] . int ] ; for ( int int = NUMBER ; int < org.springframework.core.ResolvableType[] . int ; int ++ ) { org.springframework.core.ResolvableType org.springframework.core.ResolvableType = org.springframework.core.ResolvableType[] [ int ] ; java.lang.reflect.Type java.lang.reflect.Type = ( org.springframework.core.ResolvableType != null ? org.springframework.core.ResolvableType . java.lang.reflect.Type ( ) : null ) ; java.lang.reflect.Type[] [ int ] = ( java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.reflect.TypeVariable<?>[] [ int ] ) ; } java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = new org.springframework.core.ResolvableType.SyntheticParameterizedType ( java.lang.Class<> , java.lang.reflect.Type[] ) ; return org.springframework.core.ResolvableType ( java.lang.reflect.ParameterizedType , new org.springframework.core.ResolvableType.TypeVariablesVariableResolver ( java.lang.reflect.TypeVariable<?>[] , org.springframework.core.ResolvableType[] ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; if ( java.lang.Object instanceof ResolvableTypeProvider ) { org.springframework.core.ResolvableType org.springframework.core.ResolvableType = ( ( ResolvableTypeProvider ) java.lang.Object ) . getResolvableType ( ) ; if ( org.springframework.core.ResolvableType != null ) { return org.springframework.core.ResolvableType ; } } return org.springframework.core.ResolvableType . org.springframework.core.ResolvableType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.Field java.lang.reflect.Field ) { Assert . notNull ( java.lang.reflect.Field , STRING ) ; return org.springframework.core.ResolvableType ( null , new FieldTypeProvider ( java.lang.reflect.Field ) , null ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.Field java.lang.reflect.Field , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.reflect.Field , STRING ) ; org.springframework.core.ResolvableType org.springframework.core.ResolvableType = org.springframework.core.ResolvableType ( java.lang.Class<> ) . org.springframework.core.ResolvableType ( java.lang.reflect.Field . java.lang.Class<?> ( ) ) ; return org.springframework.core.ResolvableType ( null , new FieldTypeProvider ( java.lang.reflect.Field ) , org.springframework.core.ResolvableType . org.springframework.core.ResolvableType.VariableResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.Field java.lang.reflect.Field , org.springframework.core.ResolvableType org.springframework.core.ResolvableType ) { Assert . notNull ( java.lang.reflect.Field , STRING ) ; org.springframework.core.ResolvableType org.springframework.core.ResolvableType = ( org.springframework.core.ResolvableType != null ? org.springframework.core.ResolvableType : org.springframework.core.ResolvableType ) ; org.springframework.core.ResolvableType = org.springframework.core.ResolvableType . org.springframework.core.ResolvableType ( java.lang.reflect.Field . java.lang.Class<?> ( ) ) ; return org.springframework.core.ResolvableType ( null , new FieldTypeProvider ( java.lang.reflect.Field ) , org.springframework.core.ResolvableType . org.springframework.core.ResolvableType.VariableResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.Field java.lang.reflect.Field , int int ) { Assert . notNull ( java.lang.reflect.Field , STRING ) ; return org.springframework.core.ResolvableType ( null , new FieldTypeProvider ( java.lang.reflect.Field ) , null ) . getNested ( int ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.Field java.lang.reflect.Field , int int , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.reflect.Field , STRING ) ; org.springframework.core.ResolvableType org.springframework.core.ResolvableType = org.springframework.core.ResolvableType ( java.lang.Class<> ) . org.springframework.core.ResolvableType ( java.lang.reflect.Field . java.lang.Class<?> ( ) ) ; return org.springframework.core.ResolvableType ( null , new FieldTypeProvider ( java.lang.reflect.Field ) , org.springframework.core.ResolvableType . org.springframework.core.ResolvableType.VariableResolver ( ) ) . getNested ( int ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> , int int ) { Assert . notNull ( java.lang.reflect.Constructor<> , STRING ) ; return org.springframework.core.ResolvableType ( new MethodParameter ( java.lang.reflect.Constructor<> , int ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> , int int , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.reflect.Constructor<> , STRING ) ; MethodParameter org.springframework.core.MethodParameter = new MethodParameter ( java.lang.reflect.Constructor<> , int ) ; org.springframework.core.MethodParameter . setContainingClass ( java.lang.Class<> ) ; return org.springframework.core.ResolvableType ( org.springframework.core.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.Method java.lang.reflect.Method ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; return org.springframework.core.ResolvableType ( new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; MethodParameter org.springframework.core.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; org.springframework.core.MethodParameter . setContainingClass ( java.lang.Class<> ) ; return org.springframework.core.ResolvableType ( org.springframework.core.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.Method java.lang.reflect.Method , int int ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; return org.springframework.core.ResolvableType ( new MethodParameter ( java.lang.reflect.Method , int ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.Method java.lang.reflect.Method , int int , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; MethodParameter org.springframework.core.MethodParameter = new MethodParameter ( java.lang.reflect.Method , int ) ; org.springframework.core.MethodParameter . setContainingClass ( java.lang.Class<> ) ; return org.springframework.core.ResolvableType ( org.springframework.core.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( MethodParameter org.springframework.core.MethodParameter ) { return org.springframework.core.ResolvableType ( org.springframework.core.MethodParameter , ( java.lang.reflect.Type ) null ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( MethodParameter org.springframework.core.MethodParameter , org.springframework.core.ResolvableType org.springframework.core.ResolvableType ) { Assert . notNull ( org.springframework.core.MethodParameter , STRING ) ; org.springframework.core.ResolvableType = ( org.springframework.core.ResolvableType != null ? org.springframework.core.ResolvableType : org.springframework.core.ResolvableType ( org.springframework.core.MethodParameter . getContainingClass ( ) ) ) ; org.springframework.core.ResolvableType org.springframework.core.ResolvableType = org.springframework.core.ResolvableType . org.springframework.core.ResolvableType ( org.springframework.core.MethodParameter . getDeclaringClass ( ) ) ; return org.springframework.core.ResolvableType ( null , new MethodParameterTypeProvider ( org.springframework.core.MethodParameter ) , org.springframework.core.ResolvableType . org.springframework.core.ResolvableType.VariableResolver ( ) ) . getNested ( org.springframework.core.MethodParameter . getNestingLevel ( ) , methodParameter . typeIndexesPerLevel ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( MethodParameter org.springframework.core.MethodParameter , java.lang.reflect.Type java.lang.reflect.Type ) { Assert . notNull ( org.springframework.core.MethodParameter , STRING ) ; org.springframework.core.ResolvableType org.springframework.core.ResolvableType = org.springframework.core.ResolvableType ( org.springframework.core.MethodParameter . getContainingClass ( ) ) . as ( org.springframework.core.MethodParameter . getDeclaringClass ( ) ) ; return org.springframework.core.ResolvableType ( java.lang.reflect.Type , new MethodParameterTypeProvider ( org.springframework.core.MethodParameter ) , org.springframework.core.ResolvableType . org.springframework.core.ResolvableType.VariableResolver ( ) ) . getNested ( org.springframework.core.MethodParameter . getNestingLevel ( ) , methodParameter . typeIndexesPerLevel ) ; }  <METHOD_END>
<METHOD_START> static void void ( MethodParameter org.springframework.core.MethodParameter ) { Assert . notNull ( org.springframework.core.MethodParameter , STRING ) ; org.springframework.core.ResolvableType org.springframework.core.ResolvableType = org.springframework.core.ResolvableType ( org.springframework.core.MethodParameter . getContainingClass ( ) ) . as ( org.springframework.core.MethodParameter . getDeclaringClass ( ) ) ; org.springframework.core.MethodParameter . setParameterType ( org.springframework.core.ResolvableType ( null , new MethodParameterTypeProvider ( org.springframework.core.MethodParameter ) , org.springframework.core.ResolvableType . org.springframework.core.ResolvableType.VariableResolver ( ) ) . resolve ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( org.springframework.core.ResolvableType org.springframework.core.ResolvableType ) { Assert . notNull ( org.springframework.core.ResolvableType , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Array . java.lang.Object ( org.springframework.core.ResolvableType . java.lang.Class<?> ( ) , NUMBER ) . java.lang.Class<? extends java.lang.Object> ( ) ; return new org.springframework.core.ResolvableType ( java.lang.Class<> , null , null , org.springframework.core.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] ( java.lang.reflect.Type [] java.lang.reflect.Type[] , org.springframework.core.ResolvableType.VariableResolver org.springframework.core.ResolvableType.VariableResolver ) { org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] = new org.springframework.core.ResolvableType [ java.lang.reflect.Type[] . int ] ; for ( int int = NUMBER ; int < java.lang.reflect.Type[] . int ; int ++ ) { org.springframework.core.ResolvableType[] [ int ] = org.springframework.core.ResolvableType ( java.lang.reflect.Type[] [ int ] , org.springframework.core.ResolvableType.VariableResolver ) ; } return org.springframework.core.ResolvableType[] ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.Type java.lang.reflect.Type ) { return org.springframework.core.ResolvableType ( java.lang.reflect.Type , null , null ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.Type java.lang.reflect.Type , org.springframework.core.ResolvableType org.springframework.core.ResolvableType ) { org.springframework.core.ResolvableType.VariableResolver org.springframework.core.ResolvableType.VariableResolver = null ; if ( org.springframework.core.ResolvableType != null ) { org.springframework.core.ResolvableType.VariableResolver = org.springframework.core.ResolvableType . org.springframework.core.ResolvableType.VariableResolver ( ) ; } return org.springframework.core.ResolvableType ( java.lang.reflect.Type , org.springframework.core.ResolvableType.VariableResolver ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.Type java.lang.reflect.Type , org.springframework.core.ResolvableType.VariableResolver org.springframework.core.ResolvableType.VariableResolver ) { return org.springframework.core.ResolvableType ( java.lang.reflect.Type , null , org.springframework.core.ResolvableType.VariableResolver ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.Type java.lang.reflect.Type , TypeProvider org.springframework.core.TypeProvider , org.springframework.core.ResolvableType.VariableResolver org.springframework.core.ResolvableType.VariableResolver ) { if ( java.lang.reflect.Type == null && org.springframework.core.TypeProvider != null ) { java.lang.reflect.Type = SerializableTypeWrapper . forTypeProvider ( org.springframework.core.TypeProvider ) ; } if ( java.lang.reflect.Type == null ) { return org.springframework.core.ResolvableType ; } if ( java.lang.reflect.Type instanceof java.lang.Class ) { return new org.springframework.core.ResolvableType ( java.lang.reflect.Type , org.springframework.core.TypeProvider , org.springframework.core.ResolvableType.VariableResolver , ( org.springframework.core.ResolvableType ) null ) ; } org.springframework.core.ConcurrentReferenceHashMap<org.springframework.core.ResolvableType,org.springframework.core.ResolvableType> . purgeUnreferencedEntries ( ) ; org.springframework.core.ResolvableType org.springframework.core.ResolvableType = new org.springframework.core.ResolvableType ( java.lang.reflect.Type , org.springframework.core.TypeProvider , org.springframework.core.ResolvableType.VariableResolver ) ; org.springframework.core.ResolvableType org.springframework.core.ResolvableType = org.springframework.core.ConcurrentReferenceHashMap<org.springframework.core.ResolvableType,org.springframework.core.ResolvableType> . get ( org.springframework.core.ResolvableType ) ; if ( org.springframework.core.ResolvableType == null ) { org.springframework.core.ResolvableType = new org.springframework.core.ResolvableType ( java.lang.reflect.Type , org.springframework.core.TypeProvider , org.springframework.core.ResolvableType.VariableResolver , org.springframework.core.ResolvableType . java.lang.Integer ) ; org.springframework.core.ConcurrentReferenceHashMap<org.springframework.core.ResolvableType,org.springframework.core.ResolvableType> . put ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) ; } return org.springframework.core.ResolvableType ; }  <METHOD_END>
<METHOD_START> public static void void ( ) { org.springframework.core.ConcurrentReferenceHashMap<org.springframework.core.ResolvableType,org.springframework.core.ResolvableType> . clear ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( )  <METHOD_END>
<METHOD_START> org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.TypeVariable<?> < ? > java.lang.reflect.TypeVariable<?> );  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.TypeVariable<?> < ? > java.lang.reflect.TypeVariable<?> ) { return org.springframework.core.ResolvableType .this . org.springframework.core.ResolvableType ( java.lang.reflect.TypeVariable<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.core.ResolvableType .this ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.TypeVariable<?> < ? > [] java.lang.reflect.TypeVariable<?>[] , org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] ) { this . java.lang.reflect.TypeVariable<?>[] = java.lang.reflect.TypeVariable<?>[] ; this . org.springframework.core.ResolvableType[] = org.springframework.core.ResolvableType[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( java.lang.reflect.TypeVariable<?> < ? > java.lang.reflect.TypeVariable<?> ) { for ( int int = NUMBER ; int < this . java.lang.reflect.TypeVariable<?>[] . int ; int ++ ) { if ( SerializableTypeWrapper . unwrap ( this . java.lang.reflect.TypeVariable<?>[] [ int ] ) . equals ( SerializableTypeWrapper . unwrap ( java.lang.reflect.TypeVariable<> ) ) ) { return this . org.springframework.core.ResolvableType[] [ int ] ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . org.springframework.core.ResolvableType[] ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.reflect.Type [] java.lang.reflect.Type[] ) { this . java.lang.reflect.Type = java.lang.reflect.Type ; this . java.lang.reflect.Type[] = java.lang.reflect.Type[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Type java.lang.reflect.Type ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Type java.lang.reflect.Type ( ) { return this . java.lang.reflect.Type ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Type [] java.lang.reflect.Type[] ( ) { return this . java.lang.reflect.Type[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof java.lang.reflect.ParameterizedType ) ) { return false ; } java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ( java.lang.reflect.ParameterizedType ) java.lang.Object ; return ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type ( ) == null && this . java.lang.reflect.Type . boolean ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type ( ) ) && java.util.Arrays . boolean ( this . java.lang.reflect.Type[] , java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( this . java.lang.reflect.Type . int ( ) * NUMBER + java.util.Arrays . int ( this . java.lang.reflect.Type[] ) ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.core.ResolvableType.WildcardBounds.Kind org.springframework.core.ResolvableType.WildcardBounds.Kind , org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] ) { this . org.springframework.core.ResolvableType.WildcardBounds.Kind = org.springframework.core.ResolvableType.WildcardBounds.Kind ; this . org.springframework.core.ResolvableType[] = org.springframework.core.ResolvableType[] ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( org.springframework.core.ResolvableType.WildcardBounds org.springframework.core.ResolvableType.WildcardBounds ) { return this . org.springframework.core.ResolvableType.WildcardBounds.Kind == org.springframework.core.ResolvableType.WildcardBounds . org.springframework.core.ResolvableType.WildcardBounds.Kind ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( org.springframework.core.ResolvableType ... org.springframework.core.ResolvableType[] ) { for ( org.springframework.core.ResolvableType org.springframework.core.ResolvableType : this . org.springframework.core.ResolvableType[] ) { for ( org.springframework.core.ResolvableType org.springframework.core.ResolvableType : org.springframework.core.ResolvableType[] ) { if ( ! boolean ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) ) { return false ; } } } return true ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( org.springframework.core.ResolvableType org.springframework.core.ResolvableType , org.springframework.core.ResolvableType org.springframework.core.ResolvableType ) { return ( this . org.springframework.core.ResolvableType.WildcardBounds.Kind == org.springframework.core.ResolvableType.WildcardBounds.Kind . org.springframework.core.ResolvableType.WildcardBounds.Kind ? org.springframework.core.ResolvableType . boolean ( org.springframework.core.ResolvableType ) : org.springframework.core.ResolvableType . boolean ( org.springframework.core.ResolvableType ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] ( ) { return this . org.springframework.core.ResolvableType[] ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.ResolvableType.WildcardBounds org.springframework.core.ResolvableType.WildcardBounds ( org.springframework.core.ResolvableType org.springframework.core.ResolvableType ) { org.springframework.core.ResolvableType org.springframework.core.ResolvableType = org.springframework.core.ResolvableType ; while ( ! ( org.springframework.core.ResolvableType . java.lang.reflect.Type ( ) instanceof java.lang.reflect.WildcardType ) ) { if ( org.springframework.core.ResolvableType == org.springframework.core.ResolvableType ) { return null ; } org.springframework.core.ResolvableType = org.springframework.core.ResolvableType . org.springframework.core.ResolvableType ( ) ; } java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ( java.lang.reflect.WildcardType ) org.springframework.core.ResolvableType . java.lang.reflect.Type ; org.springframework.core.ResolvableType.WildcardBounds.Kind org.springframework.core.ResolvableType.WildcardBounds.Kind = ( java.lang.reflect.WildcardType . java.lang.reflect.Type[] ( ) . int > NUMBER ? org.springframework.core.ResolvableType.WildcardBounds.Kind . org.springframework.core.ResolvableType.WildcardBounds.Kind : org.springframework.core.ResolvableType.WildcardBounds.Kind . org.springframework.core.ResolvableType.WildcardBounds.Kind ) ; java.lang.reflect.Type [] java.lang.reflect.Type[] = org.springframework.core.ResolvableType.WildcardBounds.Kind == org.springframework.core.ResolvableType.WildcardBounds.Kind . org.springframework.core.ResolvableType.WildcardBounds.Kind ? java.lang.reflect.WildcardType . java.lang.reflect.Type[] ( ) : java.lang.reflect.WildcardType . java.lang.reflect.Type[] ( ) ; org.springframework.core.ResolvableType [] org.springframework.core.ResolvableType[] = new org.springframework.core.ResolvableType [ java.lang.reflect.Type[] . int ] ; for ( int int = NUMBER ; int < java.lang.reflect.Type[] . int ; int ++ ) { org.springframework.core.ResolvableType[] [ int ] = org.springframework.core.ResolvableType . org.springframework.core.ResolvableType ( java.lang.reflect.Type[] [ int ] , org.springframework.core.ResolvableType . org.springframework.core.ResolvableType.VariableResolver ) ; } return new org.springframework.core.ResolvableType.WildcardBounds ( org.springframework.core.ResolvableType.WildcardBounds.Kind , org.springframework.core.ResolvableType[] ) ; }  <METHOD_END>
