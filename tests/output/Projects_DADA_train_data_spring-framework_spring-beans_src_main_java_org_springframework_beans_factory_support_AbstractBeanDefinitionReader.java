<METHOD_START> protected void ( BeanDefinitionRegistry org.springframework.beans.factory.support.BeanDefinitionRegistry ) { Assert . notNull ( org.springframework.beans.factory.support.BeanDefinitionRegistry , STRING ) ; this . org.springframework.beans.factory.support.BeanDefinitionRegistry = org.springframework.beans.factory.support.BeanDefinitionRegistry ; if ( this . org.springframework.beans.factory.support.BeanDefinitionRegistry instanceof ResourceLoader ) { this . org.springframework.beans.factory.support.ResourceLoader = ( ResourceLoader ) this . org.springframework.beans.factory.support.BeanDefinitionRegistry ; } else { this . org.springframework.beans.factory.support.ResourceLoader = new PathMatchingResourcePatternResolver ( ) ; } if ( this . org.springframework.beans.factory.support.BeanDefinitionRegistry instanceof EnvironmentCapable ) { this . org.springframework.beans.factory.support.Environment = ( ( EnvironmentCapable ) this . org.springframework.beans.factory.support.BeanDefinitionRegistry ) . getEnvironment ( ) ; } else { this . org.springframework.beans.factory.support.Environment = new StandardEnvironment ( ) ; } }  <METHOD_END>
<METHOD_START> public final org.springframework.beans.factory.support.BeanDefinitionRegistry org.springframework.beans.factory.support.BeanDefinitionRegistry ( ) { return this . org.springframework.beans.factory.support.BeanDefinitionRegistry ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.beans.factory.support.BeanDefinitionRegistry org.springframework.beans.factory.support.BeanDefinitionRegistry ( ) { return this . org.springframework.beans.factory.support.BeanDefinitionRegistry ; }  <METHOD_END>
<METHOD_START> public void void ( ResourceLoader org.springframework.beans.factory.support.ResourceLoader ) { this . org.springframework.beans.factory.support.ResourceLoader = org.springframework.beans.factory.support.ResourceLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.support.ResourceLoader org.springframework.beans.factory.support.ResourceLoader ( ) { return this . org.springframework.beans.factory.support.ResourceLoader ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> public void void ( Environment org.springframework.beans.factory.support.Environment ) { this . org.springframework.beans.factory.support.Environment = org.springframework.beans.factory.support.Environment ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.support.Environment org.springframework.beans.factory.support.Environment ( ) { return this . org.springframework.beans.factory.support.Environment ; }  <METHOD_END>
<METHOD_START> public void void ( BeanNameGenerator org.springframework.beans.factory.support.BeanNameGenerator ) { this . org.springframework.beans.factory.support.BeanNameGenerator = ( org.springframework.beans.factory.support.BeanNameGenerator != null ? org.springframework.beans.factory.support.BeanNameGenerator : new DefaultBeanNameGenerator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.support.BeanNameGenerator org.springframework.beans.factory.support.BeanNameGenerator ( ) { return this . org.springframework.beans.factory.support.BeanNameGenerator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( Resource ... org.springframework.beans.factory.support.Resource[] ) throws org.springframework.beans.factory.support.BeanDefinitionStoreException { Assert . notNull ( org.springframework.beans.factory.support.Resource[] , STRING ) ; int int = NUMBER ; for ( Resource org.springframework.beans.factory.support.Resource : org.springframework.beans.factory.support.Resource[] ) { int += int ( org.springframework.beans.factory.support.Resource ) ; } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.BeanDefinitionStoreException { return int ( java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.String java.lang.String , java.util.Set<org.springframework.beans.factory.support.Resource> < Resource > java.util.Set<org.springframework.beans.factory.support.Resource> ) throws org.springframework.beans.factory.support.BeanDefinitionStoreException { ResourceLoader org.springframework.beans.factory.support.ResourceLoader = org.springframework.beans.factory.support.ResourceLoader ( ) ; if ( org.springframework.beans.factory.support.ResourceLoader == null ) { throw new BeanDefinitionStoreException ( STRING + java.lang.String + STRING ) ; } if ( org.springframework.beans.factory.support.ResourceLoader instanceof ResourcePatternResolver ) { try { Resource [] org.springframework.beans.factory.support.Resource[] = ( ( ResourcePatternResolver ) org.springframework.beans.factory.support.ResourceLoader ) . getResources ( java.lang.String ) ; int int = int ( org.springframework.beans.factory.support.Resource[] ) ; if ( java.util.Set<org.springframework.beans.factory.support.Resource> != null ) { for ( Resource org.springframework.beans.factory.support.Resource : org.springframework.beans.factory.support.Resource[] ) { java.util.Set<org.springframework.beans.factory.support.Resource> . add ( org.springframework.beans.factory.support.Resource ) ; } } if ( org.springframework.beans.factory.support.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.support.Log . debug ( STRING + int + STRING + java.lang.String + STRING ) ; } return int ; } catch ( java.io.IOException java.io.IOException ) { throw new BeanDefinitionStoreException ( STRING + java.lang.String + STRING , java.io.IOException ) ; } } else { Resource org.springframework.beans.factory.support.Resource = org.springframework.beans.factory.support.ResourceLoader . getResource ( java.lang.String ) ; int int = int ( org.springframework.beans.factory.support.Resource ) ; if ( java.util.Set<org.springframework.beans.factory.support.Resource> != null ) { java.util.Set<org.springframework.beans.factory.support.Resource> . add ( org.springframework.beans.factory.support.Resource ) ; } if ( org.springframework.beans.factory.support.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.support.Log . debug ( STRING + int + STRING + java.lang.String + STRING ) ; } return int ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.String ... java.lang.String[] ) throws org.springframework.beans.factory.support.BeanDefinitionStoreException { Assert . notNull ( java.lang.String[] , STRING ) ; int int = NUMBER ; for ( java.lang.String java.lang.String : java.lang.String[] ) { int += int ( java.lang.String ) ; } return int ; }  <METHOD_END>
