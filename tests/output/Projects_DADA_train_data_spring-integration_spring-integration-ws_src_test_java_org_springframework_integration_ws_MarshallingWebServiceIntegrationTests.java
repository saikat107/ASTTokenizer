<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.integration.ws.MessageContext . getResponse ( ) ) . thenReturn ( org.springframework.integration.ws.WebServiceMessage ) ; when ( org.springframework.integration.ws.MessageContext . getRequest ( ) ) . thenReturn ( org.springframework.integration.ws.WebServiceMessage ) ; when ( org.springframework.integration.ws.WebServiceMessage . getPayloadSource ( ) ) . thenReturn ( javax.xml.transform.Source ) ; when ( org.springframework.integration.ws.WebServiceMessage . getPayloadResult ( ) ) . thenReturn ( javax.xml.transform.Result ) ; org.springframework.integration.ws.MarshallingWebServiceInboundGateway . invoke ( org.springframework.integration.ws.MessageContext ) ; assertTrue ( java.io.StringWriter . java.lang.String ( ) . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object , javax.xml.transform.Result javax.xml.transform.Result )				throws org.springframework.integration.ws.XmlMappingException , java.io.IOException { javax.xml.transform.Transformer javax.xml.transform.Transformer ; try { javax.xml.transform.Transformer = javax.xml.transform.TransformerFactory . javax.xml.transform.TransformerFactory ( ) . javax.xml.transform.Transformer ( ) ; StringSource org.springframework.integration.ws.StringSource = new StringSource ( java.lang.Object . java.lang.String ( ) ) ; javax.xml.transform.Transformer . void ( org.springframework.integration.ws.StringSource , javax.xml.transform.Result ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MarshallingFailureException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public boolean boolean ( java.lang.Class java.lang.Class ) { return true ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( javax.xml.transform.Source javax.xml.transform.Source ) throws org.springframework.integration.ws.XmlMappingException , java.io.IOException { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator ( inputChannel = STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ; }  <METHOD_END>
