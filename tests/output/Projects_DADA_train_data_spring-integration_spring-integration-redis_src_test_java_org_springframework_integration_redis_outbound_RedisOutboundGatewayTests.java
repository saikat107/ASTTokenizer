<METHOD_START> @ Test @ RedisAvailable public void void ( ) { this . org.springframework.integration.redis.outbound.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setHeader ( RedisHeaders . COMMAND , STRING ) . build ( ) ) ; Message < ? > org.springframework.integration.redis.outbound.Message<?> = this . org.springframework.integration.redis.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.outbound.Message<> ) ; assertTrue ( java.util.Arrays . boolean ( STRING . byte[] ( ) , ( byte [] ) org.springframework.integration.redis.outbound.Message<> . getPayload ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { final java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( MessageBuilder . withPayload ( java.lang.String ) . setHeader ( RedisHeaders . COMMAND , STRING ) . setHeader ( STRING , java.lang.String ) . build ( ) ) ; Message < ? > org.springframework.integration.redis.outbound.Message<?> = this . org.springframework.integration.redis.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.outbound.Message<> ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( MessageBuilder . withPayload ( java.lang.String ) . setHeader ( RedisHeaders . COMMAND , STRING ) . setHeader ( STRING , java.lang.String ) . build ( ) ) ; org.springframework.integration.redis.outbound.Message<?> = this . org.springframework.integration.redis.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.outbound.Message<> ) ; assertTrue ( java.util.Arrays . boolean ( java.lang.String . byte[] ( ) , ( byte [] ) org.springframework.integration.redis.outbound.Message<> . getPayload ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { this . org.springframework.integration.redis.outbound.BeanFactory . getBean ( STRING ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; Message < ? > org.springframework.integration.redis.outbound.Message<?> = this . org.springframework.integration.redis.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.outbound.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.Message<> . getPayload ( ) ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.redis.outbound.Message<?> = this . org.springframework.integration.redis.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.outbound.Message<> ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.integration.redis.outbound.Message<> . getPayload ( ) ) ) ; this . createStringRedisTemplate ( this . getConnectionFactoryForTest ( ) ) . delete ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { this . org.springframework.integration.redis.outbound.MessageChannel . send ( MessageBuilder . withPayload ( new java.lang.String [] { STRING , STRING } ) . setHeader ( RedisHeaders . COMMAND , STRING ) . build ( ) ) ; Message < ? > org.springframework.integration.redis.outbound.Message<?> = this . org.springframework.integration.redis.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.outbound.Message<> ) ; assertTrue ( java.util.Arrays . boolean ( STRING . byte[] ( ) , ( byte [] ) org.springframework.integration.redis.outbound.Message<> . getPayload ( ) ) ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.redis.outbound.Message<?> = this . org.springframework.integration.redis.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.outbound.Message<> ) ; assertTrue ( java.util.Arrays . boolean ( STRING . byte[] ( ) , ( byte [] ) org.springframework.integration.redis.outbound.Message<> . getPayload ( ) ) ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setHeader ( RedisHeaders . COMMAND , STRING ) . build ( ) ) ; org.springframework.integration.redis.outbound.Message<?> = this . org.springframework.integration.redis.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.outbound.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.Message<> . getPayload ( ) ) ; try { this . org.springframework.integration.redis.outbound.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , Matchers . instanceOf ( ReplyRequiredException .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test @ RedisAvailable public void void ( ) { RedisConnection org.springframework.integration.redis.outbound.RedisConnection = this . getConnectionFactoryForTest ( ) . getConnection ( ) ; byte [] byte[] = STRING . byte[] ( ) ; byte [] byte[] = STRING . byte[] ( ) ; org.springframework.integration.redis.outbound.RedisConnection . set ( STRING . byte[] ( ) , byte[] ) ; org.springframework.integration.redis.outbound.RedisConnection . set ( STRING . byte[] ( ) , byte[] ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( MessageBuilder . withPayload ( new java.lang.String [] { STRING , STRING } ) . build ( ) ) ; Message < ? > org.springframework.integration.redis.outbound.Message<?> = this . org.springframework.integration.redis.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.outbound.Message<> ) ; assertThat ( ( java.util.List<byte[]> < byte [] > ) org.springframework.integration.redis.outbound.Message<> . getPayload ( ) , Matchers . contains ( byte[] , byte[] ) ) ; org.springframework.integration.redis.outbound.RedisConnection . del ( STRING . byte[] ( ) , STRING . byte[] ( ) ) ; }  <METHOD_END>
