<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.String java.lang.String ( ) { return null ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; ExtendedBeanInfo org.springframework.beans.ExtendedBeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( org.springframework.beans.ExtendedBeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( org.springframework.beans.ExtendedBeanInfo , STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public void void ( java.lang.String java.lang.String ) { } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; ExtendedBeanInfo org.springframework.beans.ExtendedBeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( org.springframework.beans.ExtendedBeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( org.springframework.beans.ExtendedBeanInfo , STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public void void ( java.lang.String java.lang.String ) { } public java.lang.String java.lang.String ( ) { return null ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; ExtendedBeanInfo org.springframework.beans.ExtendedBeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( org.springframework.beans.ExtendedBeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( org.springframework.beans.ExtendedBeanInfo , STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public C setFoo ( java.lang.String java.lang.String ) { return this ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; ExtendedBeanInfo org.springframework.beans.ExtendedBeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( org.springframework.beans.ExtendedBeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( org.springframework.beans.ExtendedBeanInfo , STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public C setFoo ( java.lang.String java.lang.String ) { return this ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.String java.lang.String ( ) { return null ; } public C setFoo ( java.lang.String java.lang.String ) { return this ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; ExtendedBeanInfo org.springframework.beans.ExtendedBeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( org.springframework.beans.ExtendedBeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( org.springframework.beans.ExtendedBeanInfo , STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> public C setFoo ( java.lang.String java.lang.String ) { return this ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.String [] java.lang.String[] ( ) { return null ; } public C setFoo ( int int , java.lang.String java.lang.String ) { return this ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return null ; }  <METHOD_END>
<METHOD_START> public C setFoo ( int int , java.lang.String java.lang.String ) { return this ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.String java.lang.String ( ) { return null ; } public C setFoo ( java.lang.String java.lang.String ) { return this ; } public C setFoo ( java.lang.Number java.lang.Number ) { return this ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; ExtendedBeanInfo org.springframework.beans.ExtendedBeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( org.springframework.beans.ExtendedBeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( org.springframework.beans.ExtendedBeanInfo , STRING ) , is ( true ) ) ; for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : org.springframework.beans.ExtendedBeanInfo . getPropertyDescriptors ( ) ) { if ( java.beans.PropertyDescriptor . java.lang.String ( ) . boolean ( STRING ) ) { assertThat ( java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) , is ( C .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ) ) ; return; } } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> public C setFoo ( java.lang.String java.lang.String ) { return this ; }  <METHOD_END>
<METHOD_START> public C setFoo ( java.lang.Number java.lang.Number ) { return this ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class Parent { public java.lang.Number java.lang.Number ( ) { return NUMBER ; } } class Child extends Parent { @ java.lang.Override public java.lang.Integer java.lang.Integer ( ) { return NUMBER ; } } { ExtendedBeanInfo org.springframework.beans.ExtendedBeanInfo = new ExtendedBeanInfo ( java.beans.Introspector . java.beans.BeanInfo ( Parent .class ) ) ; assertThat ( boolean ( org.springframework.beans.ExtendedBeanInfo , STRING ) , is ( true ) ) ; } { ExtendedBeanInfo org.springframework.beans.ExtendedBeanInfo = new ExtendedBeanInfo ( java.beans.Introspector . java.beans.BeanInfo ( Child .class ) ) ; assertThat ( boolean ( org.springframework.beans.ExtendedBeanInfo , STRING ) , is ( true ) ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.Number java.lang.Number ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { final class Bean implements org.springframework.beans.ExtendedBeanInfoTests.Spr9453<java.lang.Class<?>> < java.lang.Class<?> < ? > > { @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return null ; } } { java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( Bean .class ) ; assertThat ( java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) . int , equalTo ( NUMBER ) ) ; } { java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.Introspector . java.beans.BeanInfo ( Bean .class ) ) ; assertThat ( java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) . int , equalTo ( NUMBER ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class B { public java.lang.String java.lang.String ( ) { return null ; } } @ java.lang.SuppressWarnings ( STRING ) class C extends B { public C setFoo ( java.lang.String java.lang.String ) { return this ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; ExtendedBeanInfo org.springframework.beans.ExtendedBeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( org.springframework.beans.ExtendedBeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( org.springframework.beans.ExtendedBeanInfo , STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> public C setFoo ( java.lang.String java.lang.String ) { return this ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { abstract class B < This extends B < This > > { @ java.lang.SuppressWarnings ( STRING ) protected final This This = ( This ) this ; private java.lang.String java.lang.String ; public java.lang.String java.lang.String ( ) { return java.lang.String ; } public This This ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this . This ; } } class C extends B < C > { private int int = - NUMBER ; public int int ( ) { return int ; } public C setBar ( int int ) { this . int = int ; return this . instance ; } } C c = new C ( ) . setFoo ( STRING ) . setBar ( NUMBER ) ; assertThat ( c . java.lang.String ( ) , is ( STRING ) ) ; assertThat ( c . int ( ) , is ( NUMBER ) ) ; java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public This This ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this . This ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public C setBar ( int int ) { this . int = int ; return this . instance ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class C { java.lang.String java.lang.String ( ) { return null ; } C setFoo ( java.lang.String java.lang.String ) { return this ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> C setFoo ( java.lang.String java.lang.String ) { return this ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.Number java.lang.Number ( ) { return null ; } public void void ( java.lang.Integer java.lang.Integer ) { } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertEquals ( boolean ( java.beans.BeanInfo , STRING ) , boolean ( java.beans.BeanInfo , STRING ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Number java.lang.Number ( ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.Number java.lang.Number ( int int ) { return null ; } public void void ( int int , java.lang.Integer java.lang.Integer ) { } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertEquals ( boolean ( java.beans.BeanInfo , STRING ) , boolean ( java.beans.BeanInfo , STRING ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Number java.lang.Number ( int int ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( int int , java.lang.Integer java.lang.Integer ) { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.Integer java.lang.Integer ( ) { return null ; } public void void ( java.lang.Number java.lang.Number ) { } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Number java.lang.Number ) { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.Integer java.lang.Integer ( int int ) { return null ; } public void void ( int int , java.lang.Number java.lang.Number ) { } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( int int ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( int int , java.lang.Number java.lang.Number ) { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.String java.lang.String ( int int ) { return null ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.Introspector . java.beans.BeanInfo ( C .class ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( int int ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public void void ( int int , java.lang.String java.lang.String ) { } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.Introspector . java.beans.BeanInfo ( C .class ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.String java.lang.String ( int int ) { return null ; } public void void ( int int , java.lang.String java.lang.String ) { } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.Introspector . java.beans.BeanInfo ( C .class ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( int int ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( int int , java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.String [] java.lang.String[] ( ) { return null ; } public java.lang.String java.lang.String ( int int ) { return null ; } public void void ( java.lang.String [] java.lang.String[] ) { } public void void ( int int , java.lang.String java.lang.String ) { } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.Introspector . java.beans.BeanInfo ( C .class ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( int int ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { }  <METHOD_END>
<METHOD_START> public void void ( int int , java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.String java.lang.String ( int int ) { return null ; } public C setFoos ( int int , java.lang.String java.lang.String ) { return this ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.Introspector . java.beans.BeanInfo ( C .class ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( int int ) { return null ; }  <METHOD_END>
<METHOD_START> public C setFoos ( int int , java.lang.String java.lang.String ) { return this ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public C setFoos ( java.lang.String [] java.lang.String[] ) { return this ; } public java.lang.String java.lang.String ( int int ) { return null ; } public C setFoos ( int int , java.lang.String java.lang.String ) { return this ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.Introspector . java.beans.BeanInfo ( C .class ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public C setFoos ( java.lang.String [] java.lang.String[] ) { return this ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( int int ) { return null ; }  <METHOD_END>
<METHOD_START> public C setFoos ( int int , java.lang.String java.lang.String ) { return this ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { { @ java.lang.SuppressWarnings ( STRING ) class C { public void void ( java.lang.String [] java.lang.String[] ) { } public java.lang.String java.lang.String ( int int ) { return null ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; } { @ java.lang.SuppressWarnings ( STRING ) class C { public C setFoos ( java.lang.String [] java.lang.String[] ) { return this ; } public java.lang.String java.lang.String ( int int ) { return null ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.Introspector . java.beans.BeanInfo ( C .class ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( int int ) { return null ; }  <METHOD_END>
<METHOD_START> public C setFoos ( java.lang.String [] java.lang.String[] ) { return this ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( int int ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new ExtendedBeanInfo ( java.beans.Introspector . java.beans.BeanInfo ( java.math.BigDecimal .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class B { public java.lang.String java.lang.String ( ) { return null ; } public java.lang.Number java.lang.Number ( java.lang.String java.lang.String ) { return null ; } } class C extends B { @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; } @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.String java.lang.String ) { return null ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) . int , equalTo ( java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) . int ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.Number java.lang.Number ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public void void ( ) { } public void void ( java.lang.String java.lang.String ) { } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return null ; } public java.lang.Object java.lang.Object ( int int , java.lang.Object java.lang.Object ) { return null ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) , equalTo ( java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( int int , java.lang.Object java.lang.Object ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException , java.lang.SecurityException , java.lang.NoSuchMethodException { @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return new java.lang.Object ( ) ; } public java.lang.Object java.lang.Object ( int int ) { return new java.lang.Object ( ) ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) ) { if ( java.beans.PropertyDescriptor . java.lang.String ( ) . boolean ( STRING ) ) { assertThat ( java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) , is ( C .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ) ) ; return; } } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( int int ) { return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException , java.lang.SecurityException , java.lang.NoSuchMethodException { @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.Object java.lang.Object ( int int ) { return new java.lang.Object ( ) ; } public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return new java.lang.Object ( ) ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) ) { if ( java.beans.PropertyDescriptor . java.lang.String ( ) . boolean ( STRING ) ) { assertThat ( java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) , is ( C .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ) ) ; return; } } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( int int ) { return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return new java.lang.Object ( ) ; } public java.lang.Object java.lang.Object ( int int ) { return new java.lang.Object ( ) ; } public java.lang.Object java.lang.Object ( int int , int int ) { return new java.lang.Object ( ) ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( C .class ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( int int ) { return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( int int , int int ) { return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( TestBean .class ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) . int , equalTo ( java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) . int ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { class ExtendedTestBean extends TestBean { @ java.lang.SuppressWarnings ( STRING ) public ExtendedTestBean setFoo ( java.lang.String java.lang.String ) { return this ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( ExtendedTestBean .class ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; boolean boolean = false ; for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) ) { if ( java.beans.PropertyDescriptor . java.lang.String ( ) . boolean ( STRING ) ) { boolean = true ; } } assertThat ( boolean , is ( true ) ) ; assertThat ( java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) . int , equalTo ( java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) . int + NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public ExtendedTestBean setFoo ( java.lang.String java.lang.String ) { return this ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( TestBean .class ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; for ( int int = NUMBER ; int < java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) . int ; int ++ ) { assertThat ( STRING + int + STRING , java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) [ int ] . java.lang.String ( ) , equalTo ( java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) [ int ] . java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { ExtendedBeanInfo . ExtendedBeanInfo ExtendedBeanInfo.PropertyDescriptorComparator = new ExtendedBeanInfo . ExtendedBeanInfo ( ) ; assertThat ( ExtendedBeanInfo.PropertyDescriptorComparator . compare ( new java.beans.PropertyDescriptor ( STRING , null , null ) , new java.beans.PropertyDescriptor ( STRING , null , null ) ) , equalTo ( NUMBER ) ) ; assertThat ( ExtendedBeanInfo.PropertyDescriptorComparator . compare ( new java.beans.PropertyDescriptor ( STRING , null , null ) , new java.beans.PropertyDescriptor ( STRING , null , null ) ) , equalTo ( NUMBER ) ) ; assertThat ( ExtendedBeanInfo.PropertyDescriptorComparator . compare ( new java.beans.PropertyDescriptor ( STRING , null , null ) , new java.beans.PropertyDescriptor ( STRING , null , null ) ) , lessThan ( NUMBER ) ) ; assertThat ( ExtendedBeanInfo.PropertyDescriptorComparator . compare ( new java.beans.PropertyDescriptor ( STRING , null , null ) , new java.beans.PropertyDescriptor ( STRING , null , null ) ) , greaterThan ( NUMBER ) ) ; assertThat ( ExtendedBeanInfo.PropertyDescriptorComparator . compare ( new java.beans.PropertyDescriptor ( STRING , null , null ) , new java.beans.PropertyDescriptor ( STRING , null , null ) ) , lessThan ( NUMBER ) ) ; assertThat ( ExtendedBeanInfo.PropertyDescriptorComparator . compare ( new java.beans.PropertyDescriptor ( STRING , null , null ) , new java.beans.PropertyDescriptor ( STRING , null , null ) ) , greaterThan ( NUMBER ) ) ; assertThat ( ExtendedBeanInfo.PropertyDescriptorComparator . compare ( new java.beans.PropertyDescriptor ( STRING , null , null ) , new java.beans.PropertyDescriptor ( STRING , null , null ) ) , lessThan ( NUMBER ) ) ; assertThat ( ExtendedBeanInfo.PropertyDescriptorComparator . compare ( new java.beans.PropertyDescriptor ( STRING , null , null ) , new java.beans.PropertyDescriptor ( STRING , null , null ) ) , greaterThan ( NUMBER ) ) ; assertThat ( ExtendedBeanInfo.PropertyDescriptorComparator . compare ( new java.beans.PropertyDescriptor ( STRING , null , null ) , new java.beans.PropertyDescriptor ( STRING , null , null ) ) , lessThan ( NUMBER ) ) ; assertThat ( ExtendedBeanInfo.PropertyDescriptorComparator . compare ( new java.beans.PropertyDescriptor ( STRING , null , null ) , new java.beans.PropertyDescriptor ( STRING , null , null ) ) , lessThan ( NUMBER ) ) ; assertThat ( ExtendedBeanInfo.PropertyDescriptorComparator . compare ( new java.beans.PropertyDescriptor ( STRING , null , null ) , new java.beans.PropertyDescriptor ( STRING , null , null ) ) , lessThan ( NUMBER ) ) ; assertThat ( ExtendedBeanInfo.PropertyDescriptorComparator . compare ( new java.beans.PropertyDescriptor ( STRING , null , null ) , new java.beans.PropertyDescriptor ( STRING , null , null ) ) , greaterThan ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { java.beans.Introspector . java.beans.BeanInfo ( org.springframework.beans.ExtendedBeanInfoTests.LawLibrary .class ) ; new ExtendedBeanInfo ( java.beans.Introspector . java.beans.BeanInfo ( org.springframework.beans.ExtendedBeanInfoTests.LawLibrary .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { class A { @ java.lang.SuppressWarnings ( STRING ) public boolean boolean ( ) { return false ; } } class B extends A { @ java.lang.Override public boolean boolean ( ) { return false ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( B .class ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { @ java.lang.SuppressWarnings ( STRING ) class A { public void void ( java.lang.String java.lang.String ) { } public void void ( int int , java.lang.String java.lang.String ) { } public java.lang.String java.lang.String ( int int ) { return null ; } } java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( A .class ) ; boolean boolean = boolean ( java.beans.BeanInfo , STRING ) ; boolean boolean = boolean ( java.beans.BeanInfo , STRING ) ; boolean boolean = boolean ( java.beans.BeanInfo , STRING ) ; boolean boolean = boolean ( java.beans.BeanInfo , STRING ) ; java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.BeanInfo ) ; assertEquals ( boolean , boolean ( java.beans.BeanInfo , STRING ) ) ; assertEquals ( boolean , boolean ( java.beans.BeanInfo , STRING ) ) ; assertEquals ( boolean , boolean ( java.beans.BeanInfo , STRING ) ) ; assertEquals ( boolean , boolean ( java.beans.BeanInfo , STRING ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> public void void ( int int , java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( int int ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { { java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( org.springframework.beans.ExtendedBeanInfoTests.WithStaticWriteMethod .class ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; } { java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.Introspector . java.beans.BeanInfo ( org.springframework.beans.ExtendedBeanInfoTests.WithStaticWriteMethod .class ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { java.beans.BeanInfo java.beans.BeanInfo = new ExtendedBeanInfo ( java.beans.Introspector . java.beans.BeanInfo ( java . awt . java.awt.Window .class ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( true ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; assertThat ( boolean ( java.beans.BeanInfo , STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.beans.BeanInfo java.beans.BeanInfo , java.lang.String java.lang.String ) { for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) ) { if ( java.beans.PropertyDescriptor . java.lang.String ( ) . boolean ( java.lang.String ) ) { return java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) != null ; } } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.beans.BeanInfo java.beans.BeanInfo , java.lang.String java.lang.String ) { for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) ) { if ( java.beans.PropertyDescriptor . java.lang.String ( ) . boolean ( java.lang.String ) ) { return java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) != null ; } } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.beans.BeanInfo java.beans.BeanInfo , java.lang.String java.lang.String ) { for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) ) { if ( java.beans.PropertyDescriptor . java.lang.String ( ) . boolean ( java.lang.String ) ) { if ( ! ( java.beans.PropertyDescriptor instanceof java.beans.IndexedPropertyDescriptor ) ) { return false ; } return ( ( java.beans.IndexedPropertyDescriptor ) java.beans.PropertyDescriptor ) . java.lang.reflect.Method ( ) != null ; } } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.beans.BeanInfo java.beans.BeanInfo , java.lang.String java.lang.String ) { for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) ) { if ( java.beans.PropertyDescriptor . java.lang.String ( ) . boolean ( java.lang.String ) ) { if ( ! ( java.beans.PropertyDescriptor instanceof java.beans.IndexedPropertyDescriptor ) ) { return false ; } return ( ( java.beans.IndexedPropertyDescriptor ) java.beans.PropertyDescriptor ) . java.lang.reflect.Method ( ) != null ; } } return false ; }  <METHOD_END>
<METHOD_START> T T ( )  <METHOD_END>
<METHOD_START> org.springframework.beans.ExtendedBeanInfoTests.Book org.springframework.beans.ExtendedBeanInfoTests.Book ( )  <METHOD_END>
<METHOD_START> void void ( org.springframework.beans.ExtendedBeanInfoTests.Book org.springframework.beans.ExtendedBeanInfoTests.Book );  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.beans.ExtendedBeanInfoTests.TextBook org.springframework.beans.ExtendedBeanInfoTests.TextBook ( )  <METHOD_END>
<METHOD_START> public org.springframework.beans.ExtendedBeanInfoTests.Book org.springframework.beans.ExtendedBeanInfoTests.Book ( ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.ExtendedBeanInfoTests.Book org.springframework.beans.ExtendedBeanInfoTests.Book ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.ExtendedBeanInfoTests.LawBook org.springframework.beans.ExtendedBeanInfoTests.LawBook ( ) { return null ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
