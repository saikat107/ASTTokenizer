<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new MapAccessingMethodInterceptor ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; when ( org.springframework.data.projection.MethodInvocation . proceed ( ) ) . thenReturn ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.String ( ) ) ; when ( org.springframework.data.projection.MethodInvocation . getMethod ( ) ) . thenReturn ( java.lang.Object .class . java.lang.reflect.Method ( STRING ) ) ; MapAccessingMethodInterceptor org.springframework.data.projection.MapAccessingMethodInterceptor = new MapAccessingMethodInterceptor ( java.util.Map<java.lang.String,java.lang.Object> ) ; java.lang.Object java.lang.Object = org.springframework.data.projection.MapAccessingMethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ) ; assertThat ( java.lang.Object ) . isEqualTo ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; when ( org.springframework.data.projection.MethodInvocation . getMethod ( ) ) . thenReturn ( org.springframework.data.projection.MapAccessingMethodInterceptorUnitTests.Sample .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ) ; when ( org.springframework.data.projection.MethodInvocation . getArguments ( ) ) . thenReturn ( new java.lang.Object [] { STRING } ) ; java.lang.Object java.lang.Object = new MapAccessingMethodInterceptor ( java.util.Map<java.lang.String,java.lang.Object> ) . invoke ( org.springframework.data.projection.MethodInvocation ) ; assertThat ( java.lang.Object ) . isNull ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; when ( org.springframework.data.projection.MethodInvocation . getMethod ( ) ) . thenReturn ( org.springframework.data.projection.MapAccessingMethodInterceptorUnitTests.Sample .class . java.lang.reflect.Method ( STRING ) ) ; java.lang.Object java.lang.Object = new MapAccessingMethodInterceptor ( java.util.Map<java.lang.String,java.lang.Object> ) . invoke ( org.springframework.data.projection.MethodInvocation ) ; assertThat ( java.lang.Object ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; when ( org.springframework.data.projection.MethodInvocation . getMethod ( ) ) . thenReturn ( org.springframework.data.projection.MapAccessingMethodInterceptorUnitTests.Sample .class . java.lang.reflect.Method ( STRING ) ) ; assertThat ( new MapAccessingMethodInterceptor ( java.util.Map<java.lang.String,java.lang.Object> ) . invoke ( org.springframework.data.projection.MethodInvocation ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Throwable { when ( org.springframework.data.projection.MethodInvocation . getMethod ( ) ) . thenReturn ( org.springframework.data.projection.MapAccessingMethodInterceptorUnitTests.Sample .class . java.lang.reflect.Method ( STRING ) ) ; new MapAccessingMethodInterceptor ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) . invoke ( org.springframework.data.projection.MethodInvocation ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
