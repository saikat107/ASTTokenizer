<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.sql.Connection java.sql.Connection = mock ( java.sql.Connection .class ) ; given ( javax.sql.DataSource . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; assertThat ( org.springframework.jdbc.datasource.DelegatingDataSource . getConnection ( ) , is ( java.sql.Connection ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.sql.Connection java.sql.Connection = mock ( java.sql.Connection .class ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; given ( javax.sql.DataSource . java.sql.Connection ( java.lang.String , java.lang.String ) ) . willReturn ( java.sql.Connection ) ; assertThat ( org.springframework.jdbc.datasource.DelegatingDataSource . getConnection ( java.lang.String , java.lang.String ) , is ( java.sql.Connection ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.PrintWriter java.io.PrintWriter = new java.io.PrintWriter ( new java.io.ByteArrayOutputStream ( ) ) ; given ( javax.sql.DataSource . java.io.PrintWriter ( ) ) . willReturn ( java.io.PrintWriter ) ; assertThat ( org.springframework.jdbc.datasource.DelegatingDataSource . getLogWriter ( ) , is ( java.io.PrintWriter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.PrintWriter java.io.PrintWriter = new java.io.PrintWriter ( new java.io.ByteArrayOutputStream ( ) ) ; org.springframework.jdbc.datasource.DelegatingDataSource . setLogWriter ( java.io.PrintWriter ) ; verify ( javax.sql.DataSource ) . setLogWriter ( java.io.PrintWriter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = NUMBER ; given ( javax.sql.DataSource . int ( ) ) . willReturn ( int ) ; assertThat ( org.springframework.jdbc.datasource.DelegatingDataSource . getLoginTimeout ( ) , is ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = NUMBER ; org.springframework.jdbc.datasource.DelegatingDataSource . setLoginTimeout ( int ) ; verify ( javax.sql.DataSource ) . setLoginTimeout ( int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.datasource.DelegatingDataSourceTests.ExampleWrapper org.springframework.jdbc.datasource.DelegatingDataSourceTests.ExampleWrapper = mock ( org.springframework.jdbc.datasource.DelegatingDataSourceTests.ExampleWrapper .class ) ; given ( javax.sql.DataSource . org.springframework.jdbc.datasource.DelegatingDataSourceTests.ExampleWrapper ( org.springframework.jdbc.datasource.DelegatingDataSourceTests.ExampleWrapper .class ) ) . willReturn ( org.springframework.jdbc.datasource.DelegatingDataSourceTests.ExampleWrapper ) ; assertThat ( org.springframework.jdbc.datasource.DelegatingDataSource . unwrap ( org.springframework.jdbc.datasource.DelegatingDataSourceTests.ExampleWrapper .class ) , is ( org.springframework.jdbc.datasource.DelegatingDataSourceTests.ExampleWrapper ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.datasource.DelegatingDataSource = new org.springframework.jdbc.datasource.DelegatingDataSourceTests.DelegatingDataSourceWithWrapper ( ) ; assertThat ( org.springframework.jdbc.datasource.DelegatingDataSource . unwrap ( org.springframework.jdbc.datasource.DelegatingDataSourceTests.ExampleWrapper .class ) , is ( ( org.springframework.jdbc.datasource.DelegatingDataSourceTests.ExampleWrapper ) org.springframework.jdbc.datasource.DelegatingDataSource ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( javax.sql.DataSource . boolean ( org.springframework.jdbc.datasource.DelegatingDataSourceTests.ExampleWrapper .class ) ) . willReturn ( true ) ; assertThat ( org.springframework.jdbc.datasource.DelegatingDataSource . isWrapperFor ( org.springframework.jdbc.datasource.DelegatingDataSourceTests.ExampleWrapper .class ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.datasource.DelegatingDataSource = new org.springframework.jdbc.datasource.DelegatingDataSourceTests.DelegatingDataSourceWithWrapper ( ) ; assertThat ( org.springframework.jdbc.datasource.DelegatingDataSource . isWrapperFor ( org.springframework.jdbc.datasource.DelegatingDataSourceTests.ExampleWrapper .class ) , is ( true ) ) ; }  <METHOD_END>
