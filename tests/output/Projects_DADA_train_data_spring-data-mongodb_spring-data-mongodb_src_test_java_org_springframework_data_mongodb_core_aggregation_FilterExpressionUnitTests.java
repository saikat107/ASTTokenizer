<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.core.aggregation.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.mongodb.core.aggregation.AggregationOperationContext = new TypeBasedAggregationOperationContext ( org.springframework.data.mongodb.core.aggregation.FilterExpressionUnitTests.Sales .class , org.springframework.data.mongodb.core.aggregation.MongoMappingContext , new QueryMapper ( new MappingMongoConverter ( new DefaultDbRefResolver ( org.springframework.data.mongodb.core.aggregation.MongoDbFactory ) , org.springframework.data.mongodb.core.aggregation.MongoMappingContext ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypedAggregation < org.springframework.data.mongodb.core.aggregation.FilterExpressionUnitTests.Sales > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.FilterExpressionUnitTests.Sales> = Aggregation . newAggregation ( org.springframework.data.mongodb.core.aggregation.FilterExpressionUnitTests.Sales .class , Aggregation . project ( ) . and ( filter ( STRING ) . as ( STRING ) . by ( AggregationFunctionExpressions . GTE . of ( Fields . field ( STRING ) , NUMBER ) ) ) . as ( STRING ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.FilterExpressionUnitTests.Sales> . toDocument ( STRING , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = DocumentTestUtils . getAsDBList ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( ( Document ) java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = Document . parse ( STRING + STRING + STRING + STRING + STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( new Document ( org.springframework.data.mongodb.core.aggregation.Document ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypedAggregation < org.springframework.data.mongodb.core.aggregation.FilterExpressionUnitTests.Sales > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.FilterExpressionUnitTests.Sales> = Aggregation . newAggregation ( org.springframework.data.mongodb.core.aggregation.FilterExpressionUnitTests.Sales .class , Aggregation . project ( ) . and ( STRING ) . filter ( STRING , AggregationFunctionExpressions . GTE . of ( Fields . field ( STRING ) , NUMBER ) ) . as ( STRING ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.FilterExpressionUnitTests.Sales> . toDocument ( STRING , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = DocumentTestUtils . getAsDBList ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( ( Document ) java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = Document . parse ( STRING + STRING + STRING + STRING + STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( org.springframework.data.mongodb.core.aggregation.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypedAggregation < org.springframework.data.mongodb.core.aggregation.FilterExpressionUnitTests.Sales > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.FilterExpressionUnitTests.Sales> = Aggregation . newAggregation ( org.springframework.data.mongodb.core.aggregation.FilterExpressionUnitTests.Sales .class , Aggregation . project ( ) . and ( filter ( java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( NUMBER , STRING , NUMBER , null , NUMBER , NUMBER , STRING ) ) . as ( STRING ) . by ( AggregationFunctionExpressions . GTE . of ( Fields . field ( STRING ) , NUMBER ) ) ) . as ( STRING ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.FilterExpressionUnitTests.Sales> . toDocument ( STRING , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = DocumentTestUtils . getAsDBList ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( ( Document ) java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = Document . parse ( STRING + STRING + STRING + STRING + STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( org.springframework.data.mongodb.core.aggregation.Document ) ) ; }  <METHOD_END>
