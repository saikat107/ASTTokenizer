<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) ReflectionTestUtils . getField ( DefaultCoreEnvironment .class , STRING ) ; DefaultListableBeanFactory org.springframework.data.couchbase.config.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; BeanDefinitionReader org.springframework.data.couchbase.config.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.data.couchbase.config.DefaultListableBeanFactory ) ; org.springframework.data.couchbase.config.BeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( STRING ) ) ; GenericApplicationContext org.springframework.data.couchbase.config.GenericApplicationContext = new GenericApplicationContext ( org.springframework.data.couchbase.config.DefaultListableBeanFactory ) ; org.springframework.data.couchbase.config.GenericApplicationContext . refresh ( ) ; CouchbaseEnvironment org.springframework.data.couchbase.config.CouchbaseEnvironment = org.springframework.data.couchbase.config.GenericApplicationContext . getBean ( STRING , CouchbaseEnvironment .class ) ; org.springframework.data.couchbase.config.GenericApplicationContext . close ( ) ; java.lang.Integer java.lang.Integer = ( java.lang.Integer ) ReflectionTestUtils . getField ( DefaultCoreEnvironment .class , STRING ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment , is ( instanceOf ( DefaultCouchbaseEnvironment .class ) ) ) ; assertThat ( java.lang.Integer , is ( java.lang.Integer + NUMBER ) ) ; }  <METHOD_END>
