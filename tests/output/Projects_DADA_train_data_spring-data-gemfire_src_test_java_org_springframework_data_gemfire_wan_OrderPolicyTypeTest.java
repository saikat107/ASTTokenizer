<METHOD_START> @ Test public void void ( ) { assertEquals ( Gateway . OrderPolicy . KEY , OrderPolicyType . getOrderPolicy ( OrderPolicyType . KEY ) ) ; assertEquals ( Gateway . OrderPolicy . PARTITION , OrderPolicyType . getOrderPolicy ( OrderPolicyType . PARTITION ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( OrderPolicyType . getOrderPolicy ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { for ( Gateway . Gateway Gateway.OrderPolicy : Gateway . OrderPolicy . values ( ) ) { OrderPolicyType org.springframework.data.gemfire.wan.OrderPolicyType = OrderPolicyType . valueOf ( Gateway.OrderPolicy ) ; assertNotNull ( org.springframework.data.gemfire.wan.OrderPolicyType ) ; assertEquals ( Gateway.OrderPolicy , org.springframework.data.gemfire.wan.OrderPolicyType . getOrderPolicy ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( OrderPolicyType . valueOf ( ( Gateway . Gateway ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( OrderPolicyType . KEY , OrderPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( OrderPolicyType . PARTITION , OrderPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( OrderPolicyType . PARTITION , OrderPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( OrderPolicyType . PARTITION , OrderPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( OrderPolicyType . THREAD , OrderPolicyType . valueOfIgnoreCase ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( OrderPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( OrderPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( OrderPolicyType . valueOfIgnoreCase ( STRING ) ) ; }  <METHOD_END>
