<METHOD_START> public void ( PortProvider org.springframework.boot.devtools.tunnel.server.PortProvider ) { Assert . notNull ( org.springframework.boot.devtools.tunnel.server.PortProvider , STRING ) ; this . org.springframework.boot.devtools.tunnel.server.PortProvider = org.springframework.boot.devtools.tunnel.server.PortProvider ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.nio.channels.ByteChannel java.nio.channels.ByteChannel ( int int ) throws java.io.IOException { java.net.SocketAddress java.net.SocketAddress = new java.net.InetSocketAddress ( this . org.springframework.boot.devtools.tunnel.server.PortProvider . getPort ( ) ) ; org.springframework.boot.devtools.tunnel.server.Log . trace ( STRING + java.net.SocketAddress ) ; java.nio.channels.SocketChannel java.nio.channels.SocketChannel = java.nio.channels.SocketChannel . java.nio.channels.SocketChannel ( java.net.SocketAddress ) ; java.nio.channels.SocketChannel . java.net.Socket ( ) . void ( int ) ; return new org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnection.TimeoutAwareChannel ( java.nio.channels.SocketChannel ) ; }  <METHOD_END>
<METHOD_START> void ( java.nio.channels.SocketChannel java.nio.channels.SocketChannel ) throws java.io.IOException { this . java.nio.channels.SocketChannel = java.nio.channels.SocketChannel ; this . java.nio.channels.ReadableByteChannel = java.nio.channels.Channels . java.nio.channels.ReadableByteChannel ( java.nio.channels.SocketChannel . java.net.Socket ( ) . java.io.InputStream ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.nio.ByteBuffer java.nio.ByteBuffer ) throws java.io.IOException { return this . java.nio.channels.ReadableByteChannel . int ( java.nio.ByteBuffer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.nio.ByteBuffer java.nio.ByteBuffer ) throws java.io.IOException { return this . java.nio.channels.SocketChannel . int ( java.nio.ByteBuffer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.nio.channels.SocketChannel . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { this . java.nio.channels.SocketChannel . void ( ) ; }  <METHOD_END>
