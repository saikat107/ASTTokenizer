<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.EventDrivenConsumer ) ; FileWritingMessageHandler org.springframework.integration.file.config.FileWritingMessageHandler = ( FileWritingMessageHandler ) org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.FileWritingMessageHandler ) ; java.io.File java.io.File = new java.io.File ( java.lang.System . java.lang.String ( STRING ) ) ; Expression org.springframework.integration.file.config.Expression = ( Expression ) org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; java.io.File java.io.File = new java.io.File ( org.springframework.integration.file.config.Expression . getExpressionString ( ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.file.config.FileWritingMessageHandler , STRING , java.lang.String .class ) ) ; assertThat ( java.io.File , is ( java.io.File ) ) ; DefaultFileNameGenerator org.springframework.integration.file.config.DefaultFileNameGenerator = ( DefaultFileNameGenerator ) org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertNotNull ( org.springframework.integration.file.config.DefaultFileNameGenerator ) ; Expression org.springframework.integration.file.config.Expression = TestUtils . getPropertyValue ( org.springframework.integration.file.config.DefaultFileNameGenerator , STRING , Expression .class ) ; assertNotNull ( org.springframework.integration.file.config.Expression ) ; assertEquals ( STRING , org.springframework.integration.file.config.Expression . getExpressionString ( ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.EventDrivenConsumer ) ; FileWritingMessageHandler org.springframework.integration.file.config.FileWritingMessageHandler = ( FileWritingMessageHandler ) org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.FileWritingMessageHandler ) ; java.io.File java.io.File = new java.io.File ( java.lang.System . java.lang.String ( STRING ) ) ; Expression org.springframework.integration.file.config.Expression = ( Expression ) org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; java.io.File java.io.File = new java.io.File ( org.springframework.integration.file.config.Expression . getExpressionString ( ) ) ; assertEquals ( java.io.File , java.io.File ) ; assertTrue ( org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) instanceof CustomFileNameGenerator ) ; assertEquals ( STRING , org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.EventDrivenConsumer ) ; FileWritingMessageHandler org.springframework.integration.file.config.FileWritingMessageHandler = ( FileWritingMessageHandler ) org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.FileWritingMessageHandler ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.EventDrivenConsumer ) ; FileWritingMessageHandler org.springframework.integration.file.config.FileWritingMessageHandler = ( FileWritingMessageHandler ) org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.FileWritingMessageHandler ) ; assertEquals ( NUMBER , org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.EventDrivenConsumer ) ; FileWritingMessageHandler org.springframework.integration.file.config.FileWritingMessageHandler = ( FileWritingMessageHandler ) org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.FileWritingMessageHandler ) ; assertEquals ( NUMBER , org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( FileExistsMode . APPEND_NO_FLUSH , org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertSame ( this . org.springframework.integration.file.config.MessageFlushPredicate , org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.EventDrivenConsumer ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.EventDrivenConsumer ) ; FileWritingMessageHandler org.springframework.integration.file.config.FileWritingMessageHandler = ( FileWritingMessageHandler ) org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.FileWritingMessageHandler ) ; assertEquals ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) , org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FileWritingMessageHandler org.springframework.integration.file.config.FileWritingMessageHandler = TestUtils . getPropertyValue ( org.springframework.integration.file.config.EventDrivenConsumer , STRING , FileWritingMessageHandler .class ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( FileWritingMessageHandler .class , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; assertEquals ( STRING , ReflectionUtils . invokeMethod ( java.lang.reflect.Method , org.springframework.integration.file.config.FileWritingMessageHandler ) ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = TestUtils . getPropertyValue ( org.springframework.integration.file.config.FileWritingMessageHandler , STRING , Expression .class ) . getExpressionString ( ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.io.File java.io.File = new java.io.File ( STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < byte [] > ( STRING . byte[] ( ) ) ) ; org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < java.io.File > ( new java.io.File ( STRING ) ) ) ; java.lang.String java.lang.String = new java.lang.String ( FileCopyUtils . copyToByteArray ( java.io.File ) ) ; assertEquals ( java.lang.String , java.lang.String ) ; assertEquals ( NUMBER , int ) ; java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( java.lang.Boolean . java.lang.Boolean , TestUtils . getPropertyValue ( this . org.springframework.integration.file.config.EventDrivenConsumer , STRING ) ) ; java.lang.String java.lang.String = java.lang.System . java.lang.String ( STRING ) ; java.lang.String java.lang.String = STRING + java.lang.String + STRING + java.lang.String + STRING + java.lang.String + STRING + java.lang.String ; java.io.File java.io.File = new java.io.File ( STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < byte [] > ( STRING . byte[] ( ) ) ) ; org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < java.io.File > ( new java.io.File ( STRING ) ) ) ; java.lang.String java.lang.String = new java.lang.String ( FileCopyUtils . copyToByteArray ( java.io.File ) ) ; assertEquals ( java.lang.String , java.lang.String ) ; java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.io.File java.io.File = new java.io.File ( STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < byte [] > ( STRING . byte[] ( ) ) ) ; org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < java.io.File > ( new java.io.File ( STRING ) ) ) ; java.lang.String java.lang.String = new java.lang.String ( FileCopyUtils . copyToByteArray ( java.io.File ) ) ; assertEquals ( java.lang.String , java.lang.String ) ; java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; try { org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( MessagingException org.springframework.integration.file.config.MessagingException ) { assertTrue ( org.springframework.integration.file.config.MessagingException . getMessage ( ) . contains ( STRING ) ) ; java.io.File . boolean ( ) ; return; } Assert . fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.io.File java.io.File = new java.io.File ( STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.lang.String java.lang.String = new java.lang.String ( FileCopyUtils . copyToByteArray ( java.io.File ) ) ; assertEquals ( java.lang.String , java.lang.String ) ; java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.lang.StringBuffer . java.lang.StringBuffer ( STRING ) ; java.lang.StringBuffer . java.lang.StringBuffer ( STRING ) ; } java.lang.String java.lang.String = java.lang.StringBuffer . java.lang.String ( ) ; java.lang.String java.lang.String = java.lang.StringBuffer . java.lang.String ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( java.lang.String ) ) ; org.springframework.integration.file.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( java.lang.String ) ) ; } assertTrue ( this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; java.lang.String java.lang.String = new java.lang.String ( FileCopyUtils . copyToByteArray ( java.io.File ) ) ; int int = NUMBER ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { void ( java.lang.String . java.lang.String ( int , int + NUMBER ) ) ; int += NUMBER ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { char [] char[] = java.lang.String . char[] ( ) ; char char = char[] [ NUMBER ] ; for ( char char : char[] ) { assertEquals ( char , char ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.file.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.file.config.Message<?> ) throws java.lang.Exception { int ++ ; return org.springframework.integration.file.config.ExecutionCallback . execute ( ) ; }  <METHOD_END>
