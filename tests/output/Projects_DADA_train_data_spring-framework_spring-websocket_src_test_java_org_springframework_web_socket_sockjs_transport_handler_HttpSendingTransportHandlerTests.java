<METHOD_START> @ java.lang.Override @ Before public void void ( ) { super. setUp ( ) ; this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler = mock ( WebSocketHandler .class ) ; this . org.springframework.web.socket.sockjs.transport.handler.TaskScheduler = mock ( TaskScheduler .class ) ; this . org.springframework.web.socket.sockjs.transport.handler.StubSockJsServiceConfig = new StubSockJsServiceConfig ( ) ; this . org.springframework.web.socket.sockjs.transport.handler.StubSockJsServiceConfig . setTaskScheduler ( this . org.springframework.web.socket.sockjs.transport.handler.TaskScheduler ) ; setRequest ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { XhrPollingTransportHandler org.springframework.web.socket.sockjs.transport.handler.XhrPollingTransportHandler = new XhrPollingTransportHandler ( ) ; org.springframework.web.socket.sockjs.transport.handler.XhrPollingTransportHandler . initialize ( this . org.springframework.web.socket.sockjs.transport.handler.StubSockJsServiceConfig ) ; AbstractSockJsSession org.springframework.web.socket.sockjs.transport.handler.AbstractSockJsSession = org.springframework.web.socket.sockjs.transport.handler.XhrPollingTransportHandler . createSession ( STRING , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , null ) ; org.springframework.web.socket.sockjs.transport.handler.XhrPollingTransportHandler . handleRequest ( this . request , this . response , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , org.springframework.web.socket.sockjs.transport.handler.AbstractSockJsSession ) ; assertEquals ( STRING , this . response . getHeaders ( ) . getContentType ( ) . toString ( ) ) ; assertEquals ( STRING , this . servletResponse . getContentAsString ( ) ) ; assertFalse ( STRING , this . servletRequest . isAsyncStarted ( ) ) ; verify ( this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) . afterConnectionEstablished ( org.springframework.web.socket.sockjs.transport.handler.AbstractSockJsSession ) ; resetRequestAndResponse ( ) ; org.springframework.web.socket.sockjs.transport.handler.XhrPollingTransportHandler . handleRequest ( this . request , this . response , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , org.springframework.web.socket.sockjs.transport.handler.AbstractSockJsSession ) ; assertTrue ( STRING , this . servletRequest . isAsyncStarted ( ) ) ; verify ( this . org.springframework.web.socket.sockjs.transport.handler.TaskScheduler ) . schedule ( any ( java.lang.Runnable .class ) , any ( java.util.Date .class ) ) ; resetRequestAndResponse ( ) ; org.springframework.web.socket.sockjs.transport.handler.XhrPollingTransportHandler . handleRequest ( this . request , this . response , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , org.springframework.web.socket.sockjs.transport.handler.AbstractSockJsSession ) ; assertFalse ( STRING , this . servletRequest . isAsyncStarted ( ) ) ; assertEquals ( STRING , this . servletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( null , false ) ; void ( STRING , true ) ; void ( STRING , true ) ; void ( STRING , false ) ; void ( STRING , false ) ; void ( STRING , true ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , boolean boolean ) throws java.lang.Exception { JsonpPollingTransportHandler org.springframework.web.socket.sockjs.transport.handler.JsonpPollingTransportHandler = new JsonpPollingTransportHandler ( ) ; org.springframework.web.socket.sockjs.transport.handler.JsonpPollingTransportHandler . initialize ( this . org.springframework.web.socket.sockjs.transport.handler.StubSockJsServiceConfig ) ; PollingSockJsSession org.springframework.web.socket.sockjs.transport.handler.PollingSockJsSession = org.springframework.web.socket.sockjs.transport.handler.JsonpPollingTransportHandler . createSession ( STRING , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , null ) ; resetRequestAndResponse ( ) ; setRequest ( STRING , STRING ) ; if ( java.lang.String != null ) { this . servletRequest . setQueryString ( STRING + UriUtils . encodeQueryParam ( java.lang.String , STRING ) ) ; this . servletRequest . addParameter ( STRING , java.lang.String ) ; } try { org.springframework.web.socket.sockjs.transport.handler.JsonpPollingTransportHandler . handleRequest ( this . request , this . response , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , org.springframework.web.socket.sockjs.transport.handler.PollingSockJsSession ) ; } catch ( SockJsTransportFailureException org.springframework.web.socket.sockjs.transport.handler.SockJsTransportFailureException ) { if ( boolean ) { throw new java.lang.AssertionError ( STRING , org.springframework.web.socket.sockjs.transport.handler.SockJsTransportFailureException ) ; } } if ( boolean ) { assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . response . getHeaders ( ) . getContentType ( ) . toString ( ) ) ; verify ( this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) . afterConnectionEstablished ( org.springframework.web.socket.sockjs.transport.handler.PollingSockJsSession ) ; } else { assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; verifyNoMoreInteractions ( this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { XhrStreamingTransportHandler org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler = new XhrStreamingTransportHandler ( ) ; org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler . initialize ( this . org.springframework.web.socket.sockjs.transport.handler.StubSockJsServiceConfig ) ; AbstractSockJsSession org.springframework.web.socket.sockjs.transport.handler.AbstractSockJsSession = org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler . createSession ( STRING , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , null ) ; org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler . handleRequest ( this . request , this . response , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , org.springframework.web.socket.sockjs.transport.handler.AbstractSockJsSession ) ; assertEquals ( STRING , this . response . getHeaders ( ) . getContentType ( ) . toString ( ) ) ; assertTrue ( STRING , this . servletRequest . isAsyncStarted ( ) ) ; verify ( this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) . afterConnectionEstablished ( org.springframework.web.socket.sockjs.transport.handler.AbstractSockJsSession ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HtmlFileTransportHandler org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler = new HtmlFileTransportHandler ( ) ; org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler . initialize ( this . org.springframework.web.socket.sockjs.transport.handler.StubSockJsServiceConfig ) ; StreamingSockJsSession org.springframework.web.socket.sockjs.transport.handler.StreamingSockJsSession = org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler . createSession ( STRING , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , null ) ; org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler . handleRequest ( this . request , this . response , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , org.springframework.web.socket.sockjs.transport.handler.StreamingSockJsSession ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . servletResponse . getContentAsString ( ) ) ; resetRequestAndResponse ( ) ; setRequest ( STRING , STRING ) ; this . servletRequest . setQueryString ( STRING ) ; this . servletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler . handleRequest ( this . request , this . response , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , org.springframework.web.socket.sockjs.transport.handler.StreamingSockJsSession ) ; assertEquals ( STRING , this . response . getHeaders ( ) . getContentType ( ) . toString ( ) ) ; assertTrue ( STRING , this . servletRequest . isAsyncStarted ( ) ) ; verify ( this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) . afterConnectionEstablished ( org.springframework.web.socket.sockjs.transport.handler.StreamingSockJsSession ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EventSourceTransportHandler org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler = new EventSourceTransportHandler ( ) ; org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler . initialize ( this . org.springframework.web.socket.sockjs.transport.handler.StubSockJsServiceConfig ) ; StreamingSockJsSession org.springframework.web.socket.sockjs.transport.handler.StreamingSockJsSession = org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler . createSession ( STRING , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , null ) ; org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler . handleRequest ( this . request , this . response , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , org.springframework.web.socket.sockjs.transport.handler.StreamingSockJsSession ) ; assertEquals ( STRING , this . response . getHeaders ( ) . getContentType ( ) . toString ( ) ) ; assertTrue ( STRING , this . servletRequest . isAsyncStarted ( ) ) ; verify ( this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) . afterConnectionEstablished ( org.springframework.web.socket.sockjs.transport.handler.StreamingSockJsSession ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . servletRequest . setQueryString ( STRING ) ; this . servletRequest . addParameter ( STRING , STRING ) ; SockJsFrame org.springframework.web.socket.sockjs.transport.handler.SockJsFrame = SockJsFrame . openFrame ( ) ; SockJsFrameFormat org.springframework.web.socket.sockjs.transport.handler.SockJsFrameFormat = new XhrPollingTransportHandler ( ) . getFrameFormat ( this . request ) ; java.lang.String java.lang.String = org.springframework.web.socket.sockjs.transport.handler.SockJsFrameFormat . format ( org.springframework.web.socket.sockjs.transport.handler.SockJsFrame ) ; assertEquals ( org.springframework.web.socket.sockjs.transport.handler.SockJsFrame . getContent ( ) + STRING , java.lang.String ) ; org.springframework.web.socket.sockjs.transport.handler.SockJsFrameFormat = new XhrStreamingTransportHandler ( ) . getFrameFormat ( this . request ) ; java.lang.String = org.springframework.web.socket.sockjs.transport.handler.SockJsFrameFormat . format ( org.springframework.web.socket.sockjs.transport.handler.SockJsFrame ) ; assertEquals ( org.springframework.web.socket.sockjs.transport.handler.SockJsFrame . getContent ( ) + STRING , java.lang.String ) ; org.springframework.web.socket.sockjs.transport.handler.SockJsFrameFormat = new HtmlFileTransportHandler ( ) . getFrameFormat ( this . request ) ; java.lang.String = org.springframework.web.socket.sockjs.transport.handler.SockJsFrameFormat . format ( org.springframework.web.socket.sockjs.transport.handler.SockJsFrame ) ; assertEquals ( STRING + org.springframework.web.socket.sockjs.transport.handler.SockJsFrame . getContent ( ) + STRING , java.lang.String ) ; org.springframework.web.socket.sockjs.transport.handler.SockJsFrameFormat = new EventSourceTransportHandler ( ) . getFrameFormat ( this . request ) ; java.lang.String = org.springframework.web.socket.sockjs.transport.handler.SockJsFrameFormat . format ( org.springframework.web.socket.sockjs.transport.handler.SockJsFrame ) ; assertEquals ( STRING + org.springframework.web.socket.sockjs.transport.handler.SockJsFrame . getContent ( ) + STRING , java.lang.String ) ; org.springframework.web.socket.sockjs.transport.handler.SockJsFrameFormat = new JsonpPollingTransportHandler ( ) . getFrameFormat ( this . request ) ; java.lang.String = org.springframework.web.socket.sockjs.transport.handler.SockJsFrameFormat . format ( org.springframework.web.socket.sockjs.transport.handler.SockJsFrame ) ; assertEquals ( STRING STRING + org.springframework.web.socket.sockjs.transport.handler.SockJsFrame . getContent ( ) + STRING , java.lang.String ) ; }  <METHOD_END>
