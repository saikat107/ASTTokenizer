<METHOD_START> public void ( AmqpTemplate org.springframework.integration.amqp.outbound.AmqpTemplate ) { Assert . notNull ( org.springframework.integration.amqp.outbound.AmqpTemplate , STRING ) ; this . org.springframework.integration.amqp.outbound.AmqpTemplate = org.springframework.integration.amqp.outbound.AmqpTemplate ; if ( org.springframework.integration.amqp.outbound.AmqpTemplate instanceof RabbitTemplate ) { setConnectionFactory ( ( ( RabbitTemplate ) org.springframework.integration.amqp.outbound.AmqpTemplate ) . getConnectionFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . boolean ? STRING : STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( getConfirmCorrelationExpression ( ) != null ) { Assert . isInstanceOf ( RabbitTemplate .class , this . org.springframework.integration.amqp.outbound.AmqpTemplate , STRING ) ; ( ( RabbitTemplate ) this . org.springframework.integration.amqp.outbound.AmqpTemplate ) . setConfirmCallback ( this ) ; } if ( getReturnChannel ( ) != null ) { Assert . isInstanceOf ( RabbitTemplate .class , this . org.springframework.integration.amqp.outbound.AmqpTemplate , STRING ) ; ( ( RabbitTemplate ) this . org.springframework.integration.amqp.outbound.AmqpTemplate ) . setReturnCallback ( this ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . org.springframework.integration.amqp.outbound.AmqpTemplate instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.amqp.outbound.AmqpTemplate ) . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.amqp.outbound.Message<?> ) { CorrelationData org.springframework.integration.amqp.outbound.CorrelationData = generateCorrelationData ( org.springframework.integration.amqp.outbound.Message<> ) ; java.lang.String java.lang.String = generateExchangeName ( org.springframework.integration.amqp.outbound.Message<> ) ; java.lang.String java.lang.String = generateRoutingKey ( org.springframework.integration.amqp.outbound.Message<> ) ; if ( this . boolean ) { return this . org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<?> ( java.lang.String , java.lang.String , org.springframework.integration.amqp.outbound.Message<> , org.springframework.integration.amqp.outbound.CorrelationData ) ; } else { this . void ( java.lang.String , java.lang.String , org.springframework.integration.amqp.outbound.Message<> , org.springframework.integration.amqp.outbound.CorrelationData ) ; return null ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , final Message < ? > org.springframework.integration.amqp.outbound.Message<?> , CorrelationData org.springframework.integration.amqp.outbound.CorrelationData ) { if ( this . org.springframework.integration.amqp.outbound.AmqpTemplate instanceof RabbitTemplate ) { MessageConverter org.springframework.integration.amqp.outbound.MessageConverter = ( ( RabbitTemplate ) this . org.springframework.integration.amqp.outbound.AmqpTemplate ) . getMessageConverter ( ) ; org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message = MappingUtils . mapMessage ( org.springframework.integration.amqp.outbound.Message<> , org.springframework.integration.amqp.outbound.MessageConverter , getHeaderMapper ( ) , getDefaultDeliveryMode ( ) , isHeadersMappedLast ( ) ) ; addDelayProperty ( org.springframework.integration.amqp.outbound.Message<> , org.springframework.amqp.core.Message ) ; ( ( RabbitTemplate ) this . org.springframework.integration.amqp.outbound.AmqpTemplate ) . send ( java.lang.String , java.lang.String , org.springframework.amqp.core.Message , org.springframework.integration.amqp.outbound.CorrelationData ) ; } else { this . org.springframework.integration.amqp.outbound.AmqpTemplate . convertAndSend ( java.lang.String , java.lang.String , org.springframework.integration.amqp.outbound.Message<> . getPayload ( ) , message -> { getHeaderMapper ( ) . fromHeadersToRequest ( requestMessage . getHeaders ( ) , message . getMessageProperties ( ) ) ; return message ; } ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<?> < ? > org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<?> ( java.lang.String java.lang.String , java.lang.String java.lang.String , Message < ? > org.springframework.integration.amqp.outbound.Message<?> , CorrelationData org.springframework.integration.amqp.outbound.CorrelationData ) { Assert . isInstanceOf ( RabbitTemplate .class , this . org.springframework.integration.amqp.outbound.AmqpTemplate , STRING ) ; MessageConverter org.springframework.integration.amqp.outbound.MessageConverter = ( ( RabbitTemplate ) this . org.springframework.integration.amqp.outbound.AmqpTemplate ) . getMessageConverter ( ) ; org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message = MappingUtils . mapMessage ( org.springframework.integration.amqp.outbound.Message<> , org.springframework.integration.amqp.outbound.MessageConverter , getHeaderMapper ( ) , getDefaultDeliveryMode ( ) , isHeadersMappedLast ( ) ) ; addDelayProperty ( org.springframework.integration.amqp.outbound.Message<> , org.springframework.amqp.core.Message ) ; org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message = ( ( RabbitTemplate ) this . org.springframework.integration.amqp.outbound.AmqpTemplate ) . sendAndReceive ( java.lang.String , java.lang.String , org.springframework.amqp.core.Message , org.springframework.integration.amqp.outbound.CorrelationData ) ; if ( org.springframework.amqp.core.Message == null ) { return null ; } return buildReply ( org.springframework.integration.amqp.outbound.MessageConverter , org.springframework.amqp.core.Message ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CorrelationData org.springframework.integration.amqp.outbound.CorrelationData , boolean boolean , java.lang.String java.lang.String ) { handleConfirm ( org.springframework.integration.amqp.outbound.CorrelationData , boolean , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message , int int , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { MessageConverter org.springframework.integration.amqp.outbound.MessageConverter = ( ( RabbitTemplate ) this . org.springframework.integration.amqp.outbound.AmqpTemplate ) . getMessageConverter ( ) ; Message < ? > org.springframework.integration.amqp.outbound.Message<?> = buildReturnedMessage ( org.springframework.amqp.core.Message , int , java.lang.String , java.lang.String , java.lang.String , org.springframework.integration.amqp.outbound.MessageConverter ) ; getReturnChannel ( ) . send ( org.springframework.integration.amqp.outbound.Message<> ) ; }  <METHOD_END>
