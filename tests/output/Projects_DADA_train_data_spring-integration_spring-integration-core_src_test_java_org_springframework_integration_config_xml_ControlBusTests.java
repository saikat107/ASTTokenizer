<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; assertTrue ( this . org.springframework.integration.config.xml.ControlBusTests.Service . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.config.xml.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.xml.ControlBusTests> ( ) ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = org.springframework.integration.config.xml.ConfigurableApplicationContext . getBean ( STRING , PollableChannel .class ) ; assertNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; assertNotNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.config.xml.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = this . org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; this . org.springframework.integration.config.xml.DefaultHeaderChannelRegistry . channelToChannelName ( new DirectChannel ( ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; org.springframework.integration.config.xml.Message<?> = this . org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( this . org.springframework.integration.config.xml.DefaultHeaderChannelRegistry , STRING , java.util.Map .class ) . values ( ) . iterator ( ) . next ( ) ; DirectFieldAccessor org.springframework.integration.config.xml.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; org.springframework.integration.config.xml.DirectFieldAccessor . setPropertyValue ( STRING , java.lang.System . long ( ) - NUMBER ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; org.springframework.integration.config.xml.Message<?> = this . org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.config.xml.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = this . org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ; assertEquals ( STRING , java.util.Map<,> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<,> . get ( STRING ) ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; org.springframework.integration.config.xml.Message<?> = this . org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ; assertEquals ( STRING , java.util.Map<,> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ ManagedOperation public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ ManagedOperation public void void ( java.lang.String java.lang.String ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.config.xml.Message<java.lang.String> < java.lang.String > org.springframework.integration.config.xml.Message<java.lang.String> ( ) { return new GenericMessage < java.lang.String > ( new java.util.Date ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
