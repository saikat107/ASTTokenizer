<METHOD_START> public void ( MimeMessage org.springframework.mail.javamail.MimeMessage ) { this( org.springframework.mail.javamail.MimeMessage , null ); }  <METHOD_END>
<METHOD_START> public void ( MimeMessage org.springframework.mail.javamail.MimeMessage , java.lang.String java.lang.String ) { this . org.springframework.mail.javamail.MimeMessage = org.springframework.mail.javamail.MimeMessage ; this . java.lang.String = ( java.lang.String != null ? java.lang.String : java.lang.String ( org.springframework.mail.javamail.MimeMessage ) ) ; this . javax.activation.FileTypeMap = javax.activation.FileTypeMap ( org.springframework.mail.javamail.MimeMessage ) ; }  <METHOD_END>
<METHOD_START> public void ( MimeMessage org.springframework.mail.javamail.MimeMessage , boolean boolean ) throws org.springframework.mail.javamail.MessagingException { this( org.springframework.mail.javamail.MimeMessage , boolean , null ); }  <METHOD_END>
<METHOD_START> public void ( MimeMessage org.springframework.mail.javamail.MimeMessage , boolean boolean , java.lang.String java.lang.String )			throws org.springframework.mail.javamail.MessagingException { this( org.springframework.mail.javamail.MimeMessage , ( boolean ? int : int ) , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( MimeMessage org.springframework.mail.javamail.MimeMessage , int int ) throws org.springframework.mail.javamail.MessagingException { this( org.springframework.mail.javamail.MimeMessage , int , null ); }  <METHOD_END>
<METHOD_START> public void ( MimeMessage org.springframework.mail.javamail.MimeMessage , int int , java.lang.String java.lang.String )			throws org.springframework.mail.javamail.MessagingException { this . org.springframework.mail.javamail.MimeMessage = org.springframework.mail.javamail.MimeMessage ; void ( org.springframework.mail.javamail.MimeMessage , int ) ; this . java.lang.String = ( java.lang.String != null ? java.lang.String : java.lang.String ( org.springframework.mail.javamail.MimeMessage ) ) ; this . javax.activation.FileTypeMap = javax.activation.FileTypeMap ( org.springframework.mail.javamail.MimeMessage ) ; }  <METHOD_END>
<METHOD_START> public final org.springframework.mail.javamail.MimeMessage org.springframework.mail.javamail.MimeMessage ( ) { return this . org.springframework.mail.javamail.MimeMessage ; }  <METHOD_END>
<METHOD_START> protected void void ( MimeMessage org.springframework.mail.javamail.MimeMessage , int int ) throws org.springframework.mail.javamail.MessagingException { switch ( int ) { case int : void ( null , null ) ; break; case int : MimeMultipart org.springframework.mail.javamail.MimeMultipart = new MimeMultipart ( java.lang.String ) ; org.springframework.mail.javamail.MimeMessage . setContent ( org.springframework.mail.javamail.MimeMultipart ) ; void ( org.springframework.mail.javamail.MimeMultipart , org.springframework.mail.javamail.MimeMultipart ) ; break; case int : MimeMultipart org.springframework.mail.javamail.MimeMultipart = new MimeMultipart ( java.lang.String ) ; org.springframework.mail.javamail.MimeMessage . setContent ( org.springframework.mail.javamail.MimeMultipart ) ; void ( org.springframework.mail.javamail.MimeMultipart , org.springframework.mail.javamail.MimeMultipart ) ; break; case int : MimeMultipart org.springframework.mail.javamail.MimeMultipart = new MimeMultipart ( java.lang.String ) ; org.springframework.mail.javamail.MimeMessage . setContent ( org.springframework.mail.javamail.MimeMultipart ) ; MimeMultipart org.springframework.mail.javamail.MimeMultipart = new MimeMultipart ( java.lang.String ) ; MimeBodyPart org.springframework.mail.javamail.MimeBodyPart = new MimeBodyPart ( ) ; org.springframework.mail.javamail.MimeBodyPart . setContent ( org.springframework.mail.javamail.MimeMultipart ) ; org.springframework.mail.javamail.MimeMultipart . addBodyPart ( org.springframework.mail.javamail.MimeBodyPart ) ; void ( org.springframework.mail.javamail.MimeMultipart , org.springframework.mail.javamail.MimeMultipart ) ; break; default: throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> protected final void void ( MimeMultipart org.springframework.mail.javamail.MimeMultipart , MimeMultipart org.springframework.mail.javamail.MimeMultipart ) { this . org.springframework.mail.javamail.MimeMultipart = org.springframework.mail.javamail.MimeMultipart ; this . org.springframework.mail.javamail.MimeMultipart = org.springframework.mail.javamail.MimeMultipart ; }  <METHOD_END>
<METHOD_START> public final boolean boolean ( ) { return ( this . org.springframework.mail.javamail.MimeMultipart != null ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.IllegalStateException { if ( ! boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING + STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> public final org.springframework.mail.javamail.MimeMultipart org.springframework.mail.javamail.MimeMultipart ( ) java.lang.IllegalStateException { void ( ) ; return this . org.springframework.mail.javamail.MimeMultipart ; }  <METHOD_END>
<METHOD_START> public final org.springframework.mail.javamail.MimeMultipart org.springframework.mail.javamail.MimeMultipart ( ) java.lang.IllegalStateException { void ( ) ; return this . org.springframework.mail.javamail.MimeMultipart ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( MimeMessage org.springframework.mail.javamail.MimeMessage ) { if ( org.springframework.mail.javamail.MimeMessage instanceof SmartMimeMessage ) { return ( ( SmartMimeMessage ) org.springframework.mail.javamail.MimeMessage ) . getDefaultEncoding ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> protected javax.activation.FileTypeMap javax.activation.FileTypeMap ( MimeMessage org.springframework.mail.javamail.MimeMessage ) { if ( org.springframework.mail.javamail.MimeMessage instanceof SmartMimeMessage ) { javax.activation.FileTypeMap javax.activation.FileTypeMap = ( ( SmartMimeMessage ) org.springframework.mail.javamail.MimeMessage ) . getDefaultFileTypeMap ( ) ; if ( javax.activation.FileTypeMap != null ) { return javax.activation.FileTypeMap ; } } ConfigurableMimeFileTypeMap org.springframework.mail.javamail.ConfigurableMimeFileTypeMap = new ConfigurableMimeFileTypeMap ( ) ; org.springframework.mail.javamail.ConfigurableMimeFileTypeMap . afterPropertiesSet ( ) ; return org.springframework.mail.javamail.ConfigurableMimeFileTypeMap ; }  <METHOD_END>
<METHOD_START> public void void ( javax.activation.FileTypeMap javax.activation.FileTypeMap ) { this . javax.activation.FileTypeMap = ( javax.activation.FileTypeMap != null ? javax.activation.FileTypeMap : javax.activation.FileTypeMap ( org.springframework.mail.javamail.MimeMessage ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public javax.activation.FileTypeMap javax.activation.FileTypeMap ( ) { return this . javax.activation.FileTypeMap ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected void void ( InternetAddress org.springframework.mail.javamail.InternetAddress ) throws org.springframework.mail.javamail.AddressException { if ( boolean ( ) ) { org.springframework.mail.javamail.InternetAddress . validate ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( InternetAddress [] org.springframework.mail.javamail.InternetAddress[] ) throws org.springframework.mail.javamail.AddressException { for ( InternetAddress org.springframework.mail.javamail.InternetAddress : org.springframework.mail.javamail.InternetAddress[] ) { void ( org.springframework.mail.javamail.InternetAddress ) ; } }  <METHOD_END>
<METHOD_START> public void void ( InternetAddress org.springframework.mail.javamail.InternetAddress ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( org.springframework.mail.javamail.InternetAddress , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress ) ; this . org.springframework.mail.javamail.MimeMessage . setFrom ( org.springframework.mail.javamail.InternetAddress ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.lang.String , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException , java.io.UnsupportedEncodingException { Assert . notNull ( java.lang.String , STRING ) ; void ( java.lang.String ( ) != null ? new InternetAddress ( java.lang.String , java.lang.String , java.lang.String ( ) ) : new InternetAddress ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( InternetAddress org.springframework.mail.javamail.InternetAddress ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( org.springframework.mail.javamail.InternetAddress , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress ) ; this . org.springframework.mail.javamail.MimeMessage . setReplyTo ( new InternetAddress [] { org.springframework.mail.javamail.InternetAddress } ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.lang.String , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException , java.io.UnsupportedEncodingException { Assert . notNull ( java.lang.String , STRING ) ; InternetAddress org.springframework.mail.javamail.InternetAddress = ( java.lang.String ( ) != null ) ? new InternetAddress ( java.lang.String , java.lang.String , java.lang.String ( ) ) : new InternetAddress ( java.lang.String , java.lang.String ) ; void ( org.springframework.mail.javamail.InternetAddress ) ; }  <METHOD_END>
<METHOD_START> public void void ( InternetAddress org.springframework.mail.javamail.InternetAddress ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( org.springframework.mail.javamail.InternetAddress , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress ) ; this . org.springframework.mail.javamail.MimeMessage . setRecipient ( Message . RecipientType . TO , org.springframework.mail.javamail.InternetAddress ) ; }  <METHOD_END>
<METHOD_START> public void void ( InternetAddress [] org.springframework.mail.javamail.InternetAddress[] ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( org.springframework.mail.javamail.InternetAddress[] , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress[] ) ; this . org.springframework.mail.javamail.MimeMessage . setRecipients ( Message . RecipientType . TO , org.springframework.mail.javamail.InternetAddress[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.lang.String , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.lang.String[] , STRING ) ; InternetAddress [] org.springframework.mail.javamail.InternetAddress[] = new InternetAddress [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { org.springframework.mail.javamail.InternetAddress[] [ int ] = org.springframework.mail.javamail.InternetAddress ( java.lang.String[] [ int ] ) ; } void ( org.springframework.mail.javamail.InternetAddress[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( InternetAddress org.springframework.mail.javamail.InternetAddress ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( org.springframework.mail.javamail.InternetAddress , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress ) ; this . org.springframework.mail.javamail.MimeMessage . addRecipient ( Message . RecipientType . TO , org.springframework.mail.javamail.InternetAddress ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.lang.String , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException , java.io.UnsupportedEncodingException { Assert . notNull ( java.lang.String , STRING ) ; void ( java.lang.String ( ) != null ? new InternetAddress ( java.lang.String , java.lang.String , java.lang.String ( ) ) : new InternetAddress ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( InternetAddress org.springframework.mail.javamail.InternetAddress ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( org.springframework.mail.javamail.InternetAddress , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress ) ; this . org.springframework.mail.javamail.MimeMessage . setRecipient ( Message . RecipientType . CC , org.springframework.mail.javamail.InternetAddress ) ; }  <METHOD_END>
<METHOD_START> public void void ( InternetAddress [] org.springframework.mail.javamail.InternetAddress[] ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( org.springframework.mail.javamail.InternetAddress[] , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress[] ) ; this . org.springframework.mail.javamail.MimeMessage . setRecipients ( Message . RecipientType . CC , org.springframework.mail.javamail.InternetAddress[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.lang.String , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.lang.String[] , STRING ) ; InternetAddress [] org.springframework.mail.javamail.InternetAddress[] = new InternetAddress [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { org.springframework.mail.javamail.InternetAddress[] [ int ] = org.springframework.mail.javamail.InternetAddress ( java.lang.String[] [ int ] ) ; } void ( org.springframework.mail.javamail.InternetAddress[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( InternetAddress org.springframework.mail.javamail.InternetAddress ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( org.springframework.mail.javamail.InternetAddress , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress ) ; this . org.springframework.mail.javamail.MimeMessage . addRecipient ( Message . RecipientType . CC , org.springframework.mail.javamail.InternetAddress ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.lang.String , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException , java.io.UnsupportedEncodingException { Assert . notNull ( java.lang.String , STRING ) ; void ( java.lang.String ( ) != null ? new InternetAddress ( java.lang.String , java.lang.String , java.lang.String ( ) ) : new InternetAddress ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( InternetAddress org.springframework.mail.javamail.InternetAddress ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( org.springframework.mail.javamail.InternetAddress , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress ) ; this . org.springframework.mail.javamail.MimeMessage . setRecipient ( Message . RecipientType . BCC , org.springframework.mail.javamail.InternetAddress ) ; }  <METHOD_END>
<METHOD_START> public void void ( InternetAddress [] org.springframework.mail.javamail.InternetAddress[] ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( org.springframework.mail.javamail.InternetAddress[] , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress[] ) ; this . org.springframework.mail.javamail.MimeMessage . setRecipients ( Message . RecipientType . BCC , org.springframework.mail.javamail.InternetAddress[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.lang.String , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.lang.String[] , STRING ) ; InternetAddress [] org.springframework.mail.javamail.InternetAddress[] = new InternetAddress [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { org.springframework.mail.javamail.InternetAddress[] [ int ] = org.springframework.mail.javamail.InternetAddress ( java.lang.String[] [ int ] ) ; } void ( org.springframework.mail.javamail.InternetAddress[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( InternetAddress org.springframework.mail.javamail.InternetAddress ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( org.springframework.mail.javamail.InternetAddress , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress ) ; this . org.springframework.mail.javamail.MimeMessage . addRecipient ( Message . RecipientType . BCC , org.springframework.mail.javamail.InternetAddress ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.lang.String , STRING ) ; void ( org.springframework.mail.javamail.InternetAddress ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException , java.io.UnsupportedEncodingException { Assert . notNull ( java.lang.String , STRING ) ; void ( java.lang.String ( ) != null ? new InternetAddress ( java.lang.String , java.lang.String , java.lang.String ( ) ) : new InternetAddress ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.mail.javamail.InternetAddress org.springframework.mail.javamail.InternetAddress ( java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException { InternetAddress [] org.springframework.mail.javamail.InternetAddress[] = InternetAddress . parse ( java.lang.String ) ; if ( parsed . length != NUMBER ) { throw new AddressException ( STRING , java.lang.String ) ; } InternetAddress org.springframework.mail.javamail.InternetAddress = org.springframework.mail.javamail.InternetAddress[] [ NUMBER ] ; try { return ( java.lang.String ( ) != null ? new InternetAddress ( org.springframework.mail.javamail.InternetAddress . getAddress ( ) , org.springframework.mail.javamail.InternetAddress . getPersonal ( ) , java.lang.String ( ) ) : org.springframework.mail.javamail.InternetAddress ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new MessagingException ( STRING , java.io.UnsupportedEncodingException ) ; } }  <METHOD_END>
<METHOD_START> public void void ( int int ) throws org.springframework.mail.javamail.MessagingException { this . org.springframework.mail.javamail.MimeMessage . setHeader ( java.lang.String , java.lang.Integer . java.lang.String ( int ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Date java.util.Date ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.util.Date , STRING ) ; this . org.springframework.mail.javamail.MimeMessage . setSentDate ( java.util.Date ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.lang.String , STRING ) ; if ( java.lang.String ( ) != null ) { this . org.springframework.mail.javamail.MimeMessage . setSubject ( java.lang.String , java.lang.String ( ) ) ; } else { this . org.springframework.mail.javamail.MimeMessage . setSubject ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException { void ( java.lang.String , false ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , boolean boolean ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.lang.String , STRING ) ; MimePart org.springframework.mail.javamail.MimePart ; if ( boolean ( ) ) { org.springframework.mail.javamail.MimePart = org.springframework.mail.javamail.MimeBodyPart ( ) ; } else { org.springframework.mail.javamail.MimePart = this . org.springframework.mail.javamail.MimeMessage ; } if ( boolean ) { void ( org.springframework.mail.javamail.MimePart , java.lang.String ) ; } else { void ( org.springframework.mail.javamail.MimePart , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; MimeMultipart org.springframework.mail.javamail.MimeMultipart = new MimeMultipart ( java.lang.String ) ; org.springframework.mail.javamail.MimeBodyPart ( ) . setContent ( org.springframework.mail.javamail.MimeMultipart , java.lang.String ) ; MimeBodyPart org.springframework.mail.javamail.MimeBodyPart = new MimeBodyPart ( ) ; void ( org.springframework.mail.javamail.MimeBodyPart , java.lang.String ) ; org.springframework.mail.javamail.MimeMultipart . addBodyPart ( org.springframework.mail.javamail.MimeBodyPart ) ; MimeBodyPart org.springframework.mail.javamail.MimeBodyPart = new MimeBodyPart ( ) ; void ( org.springframework.mail.javamail.MimeBodyPart , java.lang.String ) ; org.springframework.mail.javamail.MimeMultipart . addBodyPart ( org.springframework.mail.javamail.MimeBodyPart ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.mail.javamail.MimeBodyPart org.springframework.mail.javamail.MimeBodyPart ( ) org.springframework.mail.javamail.MessagingException { MimeMultipart org.springframework.mail.javamail.MimeMultipart = org.springframework.mail.javamail.MimeMultipart ( ) ; MimeBodyPart org.springframework.mail.javamail.MimeBodyPart = null ; for ( int int = NUMBER ; int < org.springframework.mail.javamail.MimeMultipart . getCount ( ) ; int ++ ) { BodyPart org.springframework.mail.javamail.BodyPart = org.springframework.mail.javamail.MimeMultipart . getBodyPart ( int ) ; if ( org.springframework.mail.javamail.BodyPart . getFileName ( ) == null ) { org.springframework.mail.javamail.MimeBodyPart = ( MimeBodyPart ) org.springframework.mail.javamail.BodyPart ; } } if ( org.springframework.mail.javamail.MimeBodyPart == null ) { MimeBodyPart org.springframework.mail.javamail.MimeBodyPart = new MimeBodyPart ( ) ; org.springframework.mail.javamail.MimeMultipart . addBodyPart ( org.springframework.mail.javamail.MimeBodyPart ) ; org.springframework.mail.javamail.MimeBodyPart = org.springframework.mail.javamail.MimeBodyPart ; } return org.springframework.mail.javamail.MimeBodyPart ; }  <METHOD_END>
<METHOD_START> private void void ( MimePart org.springframework.mail.javamail.MimePart , java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException { if ( java.lang.String ( ) != null ) { org.springframework.mail.javamail.MimePart . setText ( java.lang.String , java.lang.String ( ) ) ; } else { org.springframework.mail.javamail.MimePart . setText ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( MimePart org.springframework.mail.javamail.MimePart , java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException { if ( java.lang.String ( ) != null ) { org.springframework.mail.javamail.MimePart . setContent ( java.lang.String , java.lang.String + java.lang.String + java.lang.String ( ) ) ; } else { org.springframework.mail.javamail.MimePart . setContent ( java.lang.String , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , javax.activation.DataSource javax.activation.DataSource ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( javax.activation.DataSource , STRING ) ; MimeBodyPart org.springframework.mail.javamail.MimeBodyPart = new MimeBodyPart ( ) ; org.springframework.mail.javamail.MimeBodyPart . setDisposition ( MimeBodyPart . INLINE ) ; org.springframework.mail.javamail.MimeBodyPart . setHeader ( java.lang.String , STRING + java.lang.String + STRING ) ; org.springframework.mail.javamail.MimeBodyPart . setDataHandler ( new javax.activation.DataHandler ( javax.activation.DataSource ) ) ; org.springframework.mail.javamail.MimeMultipart ( ) . addBodyPart ( org.springframework.mail.javamail.MimeBodyPart ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.io.File java.io.File ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.io.File , STRING ) ; javax.activation.FileDataSource javax.activation.FileDataSource = new javax.activation.FileDataSource ( java.io.File ) ; javax.activation.FileDataSource . void ( javax.activation.FileTypeMap ( ) ) ; void ( java.lang.String , javax.activation.FileDataSource ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , Resource org.springframework.mail.javamail.Resource ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( org.springframework.mail.javamail.Resource , STRING ) ; java.lang.String java.lang.String = javax.activation.FileTypeMap ( ) . java.lang.String ( org.springframework.mail.javamail.Resource . getFilename ( ) ) ; void ( java.lang.String , org.springframework.mail.javamail.Resource , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , InputStreamSource org.springframework.mail.javamail.InputStreamSource , java.lang.String java.lang.String )			throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( org.springframework.mail.javamail.InputStreamSource , STRING ) ; if ( org.springframework.mail.javamail.InputStreamSource instanceof Resource && ( ( Resource ) org.springframework.mail.javamail.InputStreamSource ) . isOpen ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + STRING ) ; } javax.activation.DataSource javax.activation.DataSource = javax.activation.DataSource ( org.springframework.mail.javamail.InputStreamSource , java.lang.String , STRING ) ; void ( java.lang.String , javax.activation.DataSource ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , javax.activation.DataSource javax.activation.DataSource ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( javax.activation.DataSource , STRING ) ; try { MimeBodyPart org.springframework.mail.javamail.MimeBodyPart = new MimeBodyPart ( ) ; org.springframework.mail.javamail.MimeBodyPart . setDisposition ( MimeBodyPart . ATTACHMENT ) ; org.springframework.mail.javamail.MimeBodyPart . setFileName ( MimeUtility . encodeText ( java.lang.String ) ) ; org.springframework.mail.javamail.MimeBodyPart . setDataHandler ( new javax.activation.DataHandler ( javax.activation.DataSource ) ) ; org.springframework.mail.javamail.MimeMultipart ( ) . addBodyPart ( org.springframework.mail.javamail.MimeBodyPart ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new MessagingException ( STRING , java.io.UnsupportedEncodingException ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.io.File java.io.File ) throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( java.io.File , STRING ) ; javax.activation.FileDataSource javax.activation.FileDataSource = new javax.activation.FileDataSource ( java.io.File ) ; javax.activation.FileDataSource . void ( javax.activation.FileTypeMap ( ) ) ; void ( java.lang.String , javax.activation.FileDataSource ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , InputStreamSource org.springframework.mail.javamail.InputStreamSource )			throws org.springframework.mail.javamail.MessagingException { java.lang.String java.lang.String = javax.activation.FileTypeMap ( ) . java.lang.String ( java.lang.String ) ; void ( java.lang.String , org.springframework.mail.javamail.InputStreamSource , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , InputStreamSource org.springframework.mail.javamail.InputStreamSource , java.lang.String java.lang.String )			throws org.springframework.mail.javamail.MessagingException { Assert . notNull ( org.springframework.mail.javamail.InputStreamSource , STRING ) ; if ( org.springframework.mail.javamail.InputStreamSource instanceof Resource && ( ( Resource ) org.springframework.mail.javamail.InputStreamSource ) . isOpen ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + STRING ) ; } javax.activation.DataSource javax.activation.DataSource = javax.activation.DataSource ( org.springframework.mail.javamail.InputStreamSource , java.lang.String , java.lang.String ) ; void ( java.lang.String , javax.activation.DataSource ) ; }  <METHOD_END>
<METHOD_START> protected javax.activation.DataSource javax.activation.DataSource ( final InputStreamSource org.springframework.mail.javamail.InputStreamSource , final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { return new javax.activation.DataSource ( ) { @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return org.springframework.mail.javamail.InputStreamSource . getInputStream ( ) ; } @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return org.springframework.mail.javamail.InputStreamSource . getInputStream ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
