<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( SessionFactory org.springframework.orm.hibernate5.SessionFactory ) { this . org.springframework.orm.hibernate5.SessionFactory = org.springframework.orm.hibernate5.SessionFactory ; void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( SessionFactory org.springframework.orm.hibernate5.SessionFactory ) { this . org.springframework.orm.hibernate5.SessionFactory = org.springframework.orm.hibernate5.SessionFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.hibernate5.SessionFactory org.springframework.orm.hibernate5.SessionFactory ( ) { return this . org.springframework.orm.hibernate5.SessionFactory ; }  <METHOD_END>
<METHOD_START> public void void ( javax.sql.DataSource javax.sql.DataSource ) { if ( javax.sql.DataSource instanceof TransactionAwareDataSourceProxy ) { this . javax.sql.DataSource = ( ( TransactionAwareDataSourceProxy ) javax.sql.DataSource ) . getTargetDataSource ( ) ; } else { this . javax.sql.DataSource = javax.sql.DataSource ; } }  <METHOD_END>
<METHOD_START> public javax.sql.DataSource javax.sql.DataSource ( ) { return this . javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.Object = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Interceptor org.springframework.orm.hibernate5.Interceptor ) { this . java.lang.Object = org.springframework.orm.hibernate5.Interceptor ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.hibernate5.Interceptor org.springframework.orm.hibernate5.Interceptor ( ) java.lang.IllegalStateException , org.springframework.orm.hibernate5.BeansException { if ( this . java.lang.Object instanceof Interceptor ) { return ( Interceptor ) java.lang.Object ; } else if ( this . java.lang.Object instanceof java.lang.String ) { if ( this . org.springframework.orm.hibernate5.BeanFactory == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } java.lang.String java.lang.String = ( java.lang.String ) this . java.lang.Object ; return this . org.springframework.orm.hibernate5.BeanFactory . getBean ( java.lang.String , Interceptor .class ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.orm.hibernate5.BeanFactory ) { this . org.springframework.orm.hibernate5.BeanFactory = org.springframework.orm.hibernate5.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( org.springframework.orm.hibernate5.SessionFactory ( ) == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( this . java.lang.Object instanceof java.lang.String && this . org.springframework.orm.hibernate5.BeanFactory == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( this . boolean && javax.sql.DataSource ( ) == null ) { javax.sql.DataSource javax.sql.DataSource = SessionFactoryUtils . getDataSource ( org.springframework.orm.hibernate5.SessionFactory ( ) ) ; if ( javax.sql.DataSource != null ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + javax.sql.DataSource + STRING ) ; } void ( javax.sql.DataSource ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.orm.hibernate5.SessionFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject = new org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject ( ) ; org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . setSavepointAllowed ( isNestedTransactionAllowed ( ) ) ; SessionHolder org.springframework.orm.hibernate5.SessionHolder = ( SessionHolder ) TransactionSynchronizationManager . getResource ( org.springframework.orm.hibernate5.SessionFactory ( ) ) ; if ( org.springframework.orm.hibernate5.SessionHolder != null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.orm.hibernate5.SessionHolder . getSession ( ) + STRING ) ; } org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . void ( org.springframework.orm.hibernate5.SessionHolder ) ; } else if ( this . boolean ) { try { Session org.springframework.orm.hibernate5.Session = this . org.springframework.orm.hibernate5.SessionFactory . getCurrentSession ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.orm.hibernate5.Session + STRING ) ; } org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . void ( org.springframework.orm.hibernate5.Session ) ; } catch ( HibernateException org.springframework.orm.hibernate5.HibernateException ) { throw new DataAccessResourceFailureException ( STRING , org.springframework.orm.hibernate5.HibernateException ) ; } } if ( javax.sql.DataSource ( ) != null ) { ConnectionHolder org.springframework.orm.hibernate5.ConnectionHolder = ( ConnectionHolder ) TransactionSynchronizationManager . getResource ( javax.sql.DataSource ( ) ) ; org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . setConnectionHolder ( org.springframework.orm.hibernate5.ConnectionHolder ) ; } return org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Object java.lang.Object ) { org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject = ( org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject ) java.lang.Object ; return ( org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . boolean ( ) || ( this . boolean && org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . boolean ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected void void ( java.lang.Object java.lang.Object , TransactionDefinition org.springframework.orm.hibernate5.TransactionDefinition ) { org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject = ( org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject ) java.lang.Object ; if ( org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . hasConnectionHolder ( ) && ! org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . getConnectionHolder ( ) . isSynchronizedWithTransaction ( ) ) { throw new IllegalTransactionStateException ( STRING + STRING + STRING + STRING ) ; } Session org.springframework.orm.hibernate5.Session = null ; try { if ( org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) == null || org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) . isSynchronizedWithTransaction ( ) ) { Interceptor org.springframework.orm.hibernate5.Interceptor = org.springframework.orm.hibernate5.Interceptor ( ) ; Session org.springframework.orm.hibernate5.Session = ( org.springframework.orm.hibernate5.Interceptor != null ? org.springframework.orm.hibernate5.SessionFactory ( ) . withOptions ( ) . interceptor ( org.springframework.orm.hibernate5.Interceptor ) . openSession ( ) : org.springframework.orm.hibernate5.SessionFactory ( ) . openSession ( ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.orm.hibernate5.Session + STRING ) ; } org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . void ( org.springframework.orm.hibernate5.Session ) ; } org.springframework.orm.hibernate5.Session = org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) . getSession ( ) ; if ( this . boolean && boolean ( org.springframework.orm.hibernate5.Session ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.orm.hibernate5.Session + STRING ) ; } java.sql.Connection java.sql.Connection = ( ( SessionImplementor ) org.springframework.orm.hibernate5.Session ) . connection ( ) ; java.lang.Integer java.lang.Integer = DataSourceUtils . prepareConnectionForTransaction ( java.sql.Connection , org.springframework.orm.hibernate5.TransactionDefinition ) ; org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . setPreviousIsolationLevel ( java.lang.Integer ) ; if ( this . boolean && ! org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . boolean ( ) ) { int int = java.sql.Connection . int ( ) ; if ( int != java.sql.ResultSet . int ) { org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . void ( int ) ; java.sql.Connection . void ( java.sql.ResultSet . int ) ; } } } else { if ( org.springframework.orm.hibernate5.TransactionDefinition . getIsolationLevel ( ) != TransactionDefinition . ISOLATION_DEFAULT ) { throw new InvalidIsolationLevelException ( STRING + STRING + STRING ) ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.orm.hibernate5.Session + STRING ) ; } } if ( org.springframework.orm.hibernate5.TransactionDefinition . isReadOnly ( ) && org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . boolean ( ) ) { org.springframework.orm.hibernate5.Session . setFlushMode ( FlushMode . MANUAL ) ; } if ( ! org.springframework.orm.hibernate5.TransactionDefinition . isReadOnly ( ) && ! org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . boolean ( ) ) { FlushMode org.springframework.orm.hibernate5.FlushMode = SessionFactoryUtils . getFlushMode ( org.springframework.orm.hibernate5.Session ) ; if ( FlushMode . MANUAL . equals ( org.springframework.orm.hibernate5.FlushMode ) ) { org.springframework.orm.hibernate5.Session . setFlushMode ( FlushMode . AUTO ) ; org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) . setPreviousFlushMode ( org.springframework.orm.hibernate5.FlushMode ) ; } } Transaction org.springframework.orm.hibernate5.Transaction ; int int = determineTimeout ( org.springframework.orm.hibernate5.TransactionDefinition ) ; if ( int != TransactionDefinition . TIMEOUT_DEFAULT ) { org.springframework.orm.hibernate5.Transaction = org.springframework.orm.hibernate5.Session . getTransaction ( ) ; org.springframework.orm.hibernate5.Transaction . setTimeout ( int ) ; org.springframework.orm.hibernate5.Transaction . begin ( ) ; } else { org.springframework.orm.hibernate5.Transaction = org.springframework.orm.hibernate5.Session . beginTransaction ( ) ; } org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) . setTransaction ( org.springframework.orm.hibernate5.Transaction ) ; if ( javax.sql.DataSource ( ) != null ) { java.sql.Connection java.sql.Connection = ( ( SessionImplementor ) org.springframework.orm.hibernate5.Session ) . connection ( ) ; ConnectionHolder org.springframework.orm.hibernate5.ConnectionHolder = new ConnectionHolder ( java.sql.Connection ) ; if ( int != TransactionDefinition . TIMEOUT_DEFAULT ) { org.springframework.orm.hibernate5.ConnectionHolder . setTimeoutInSeconds ( int ) ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.sql.Connection + STRING ) ; } TransactionSynchronizationManager . bindResource ( javax.sql.DataSource ( ) , org.springframework.orm.hibernate5.ConnectionHolder ) ; org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . setConnectionHolder ( org.springframework.orm.hibernate5.ConnectionHolder ) ; } if ( org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . boolean ( ) ) { TransactionSynchronizationManager . bindResource ( org.springframework.orm.hibernate5.SessionFactory ( ) , org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) ) ; } org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) . setSynchronizedWithTransaction ( true ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . boolean ( ) ) { try { if ( org.springframework.orm.hibernate5.Session . getTransaction ( ) . getStatus ( ) == TransactionStatus . ACTIVE ) { org.springframework.orm.hibernate5.Session . getTransaction ( ) . rollback ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { logger . debug ( STRING , java.lang.Throwable ) ; } finally { SessionFactoryUtils . closeSession ( org.springframework.orm.hibernate5.Session ) ; org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . void ( null ) ; } } throw new CannotCreateTransactionException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject = ( org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject ) java.lang.Object ; org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . void ( null ) ; SessionHolder org.springframework.orm.hibernate5.SessionHolder = ( SessionHolder ) TransactionSynchronizationManager . unbindResource ( org.springframework.orm.hibernate5.SessionFactory ( ) ) ; org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . setConnectionHolder ( null ) ; ConnectionHolder org.springframework.orm.hibernate5.ConnectionHolder = null ; if ( javax.sql.DataSource ( ) != null ) { org.springframework.orm.hibernate5.ConnectionHolder = ( ConnectionHolder ) TransactionSynchronizationManager . unbindResource ( javax.sql.DataSource ( ) ) ; } return new org.springframework.orm.hibernate5.HibernateTransactionManager.SuspendedResourcesHolder ( org.springframework.orm.hibernate5.SessionHolder , org.springframework.orm.hibernate5.ConnectionHolder ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { org.springframework.orm.hibernate5.HibernateTransactionManager.SuspendedResourcesHolder org.springframework.orm.hibernate5.HibernateTransactionManager.SuspendedResourcesHolder = ( org.springframework.orm.hibernate5.HibernateTransactionManager.SuspendedResourcesHolder ) java.lang.Object ; if ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.hibernate5.SessionFactory ( ) ) ) { TransactionSynchronizationManager . unbindResource ( org.springframework.orm.hibernate5.SessionFactory ( ) ) ; } TransactionSynchronizationManager . bindResource ( org.springframework.orm.hibernate5.SessionFactory ( ) , org.springframework.orm.hibernate5.HibernateTransactionManager.SuspendedResourcesHolder . org.springframework.orm.hibernate5.SessionHolder ( ) ) ; if ( javax.sql.DataSource ( ) != null ) { TransactionSynchronizationManager . bindResource ( javax.sql.DataSource ( ) , org.springframework.orm.hibernate5.HibernateTransactionManager.SuspendedResourcesHolder . org.springframework.orm.hibernate5.ConnectionHolder ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.orm.hibernate5.DefaultTransactionStatus ) { org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject = ( org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject ) org.springframework.orm.hibernate5.DefaultTransactionStatus . getTransaction ( ) ; if ( org.springframework.orm.hibernate5.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) . getSession ( ) + STRING ) ; } try { org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) . getTransaction ( ) . commit ( ) ; } catch ( org . org.hibernate . org.hibernate org.hibernate.TransactionException ) { throw new TransactionSystemException ( STRING , org.hibernate.TransactionException ) ; } catch ( HibernateException org.springframework.orm.hibernate5.HibernateException ) { throw org.springframework.orm.hibernate5.DataAccessException ( org.springframework.orm.hibernate5.HibernateException ) ; } catch ( PersistenceException org.springframework.orm.hibernate5.PersistenceException ) { if ( org.springframework.orm.hibernate5.PersistenceException . getCause ( ) instanceof HibernateException ) { throw org.springframework.orm.hibernate5.DataAccessException ( ( HibernateException ) org.springframework.orm.hibernate5.PersistenceException . getCause ( ) ) ; } throw org.springframework.orm.hibernate5.PersistenceException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.orm.hibernate5.DefaultTransactionStatus ) { org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject = ( org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject ) org.springframework.orm.hibernate5.DefaultTransactionStatus . getTransaction ( ) ; if ( org.springframework.orm.hibernate5.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) . getSession ( ) + STRING ) ; } try { org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) . getTransaction ( ) . rollback ( ) ; } catch ( org . org.hibernate . org.hibernate org.hibernate.TransactionException ) { throw new TransactionSystemException ( STRING , org.hibernate.TransactionException ) ; } catch ( HibernateException org.springframework.orm.hibernate5.HibernateException ) { throw org.springframework.orm.hibernate5.DataAccessException ( org.springframework.orm.hibernate5.HibernateException ) ; } catch ( PersistenceException org.springframework.orm.hibernate5.PersistenceException ) { if ( org.springframework.orm.hibernate5.PersistenceException . getCause ( ) instanceof HibernateException ) { throw org.springframework.orm.hibernate5.DataAccessException ( ( HibernateException ) org.springframework.orm.hibernate5.PersistenceException . getCause ( ) ) ; } throw org.springframework.orm.hibernate5.PersistenceException ; } finally { if ( ! org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . boolean ( ) && ! this . boolean ) { org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) . getSession ( ) . clear ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.orm.hibernate5.DefaultTransactionStatus ) { org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject = ( org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject ) org.springframework.orm.hibernate5.DefaultTransactionStatus . getTransaction ( ) ; if ( org.springframework.orm.hibernate5.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) . getSession ( ) + STRING ) ; } org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected void void ( java.lang.Object java.lang.Object ) { org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject = ( org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject ) java.lang.Object ; if ( org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . boolean ( ) ) { TransactionSynchronizationManager . unbindResource ( org.springframework.orm.hibernate5.SessionFactory ( ) ) ; } if ( javax.sql.DataSource ( ) != null ) { TransactionSynchronizationManager . unbindResource ( javax.sql.DataSource ( ) ) ; } Session org.springframework.orm.hibernate5.Session = org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) . getSession ( ) ; if ( this . boolean && boolean ( org.springframework.orm.hibernate5.Session ) ) { try { java.sql.Connection java.sql.Connection = ( ( SessionImplementor ) org.springframework.orm.hibernate5.Session ) . connection ( ) ; java.lang.Integer java.lang.Integer = org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . java.lang.Integer ( ) ; if ( java.lang.Integer != null ) { java.sql.Connection . void ( java.lang.Integer ) ; } DataSourceUtils . resetConnectionAfterTransaction ( java.sql.Connection , org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . getPreviousIsolationLevel ( ) ) ; } catch ( HibernateException org.springframework.orm.hibernate5.HibernateException ) { logger . debug ( STRING , org.springframework.orm.hibernate5.HibernateException ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . debug ( STRING , java.lang.Throwable ) ; } } if ( org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . boolean ( ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.orm.hibernate5.Session + STRING ) ; } SessionFactoryUtils . closeSession ( org.springframework.orm.hibernate5.Session ) ; } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.orm.hibernate5.Session + STRING ) ; } if ( org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) . getPreviousFlushMode ( ) != null ) { org.springframework.orm.hibernate5.Session . setFlushMode ( org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) . getPreviousFlushMode ( ) ) ; } if ( ! this . boolean && ! this . boolean ) { void ( org.springframework.orm.hibernate5.Session ) ; } } org.springframework.orm.hibernate5.HibernateTransactionManager.HibernateTransactionObject . org.springframework.orm.hibernate5.SessionHolder ( ) . clear ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Session org.springframework.orm.hibernate5.Session ) { org.springframework.orm.hibernate5.Session . disconnect ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected boolean boolean ( Session org.springframework.orm.hibernate5.Session ) { if ( ! ( org.springframework.orm.hibernate5.Session instanceof SessionImplementor ) ) { return true ; } ConnectionReleaseMode org.springframework.orm.hibernate5.ConnectionReleaseMode = ( ( SessionImplementor ) org.springframework.orm.hibernate5.Session ) . getJdbcCoordinator ( ) . getConnectionReleaseMode ( ) ; return ConnectionReleaseMode . ON_CLOSE . equals ( org.springframework.orm.hibernate5.ConnectionReleaseMode ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( Session org.springframework.orm.hibernate5.Session ) { if ( ! ( org.springframework.orm.hibernate5.Session instanceof SessionImplementor ) ) { return org.springframework.orm.hibernate5.Session . isConnected ( ) ; } return ( ( SessionImplementor ) org.springframework.orm.hibernate5.Session ) . getJdbcCoordinator ( ) . getLogicalConnection ( ) . isPhysicallyConnected ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.orm.hibernate5.DataAccessException org.springframework.orm.hibernate5.DataAccessException ( HibernateException org.springframework.orm.hibernate5.HibernateException ) { return SessionFactoryUtils . convertHibernateAccessException ( org.springframework.orm.hibernate5.HibernateException ) ; }  <METHOD_END>
<METHOD_START> public void void ( Session org.springframework.orm.hibernate5.Session ) { this . org.springframework.orm.hibernate5.SessionHolder = new SessionHolder ( org.springframework.orm.hibernate5.Session ) ; this . boolean = true ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( Session org.springframework.orm.hibernate5.Session ) { this . org.springframework.orm.hibernate5.SessionHolder = new SessionHolder ( org.springframework.orm.hibernate5.Session ) ; this . boolean = true ; this . boolean = false ; }  <METHOD_END>
<METHOD_START> public void void ( SessionHolder org.springframework.orm.hibernate5.SessionHolder ) { this . org.springframework.orm.hibernate5.SessionHolder = org.springframework.orm.hibernate5.SessionHolder ; this . boolean = false ; this . boolean = false ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.hibernate5.SessionHolder org.springframework.orm.hibernate5.SessionHolder ( ) { return this . org.springframework.orm.hibernate5.SessionHolder ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return this . java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . org.springframework.orm.hibernate5.SessionHolder != null && this . org.springframework.orm.hibernate5.SessionHolder . getTransaction ( ) != null ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . org.springframework.orm.hibernate5.SessionHolder != null && this . org.springframework.orm.hibernate5.SessionHolder . getSession ( ) . getTransaction ( ) . getStatus ( ) == TransactionStatus . ACTIVE ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . org.springframework.orm.hibernate5.SessionHolder . setRollbackOnly ( ) ; if ( hasConnectionHolder ( ) ) { getConnectionHolder ( ) . setRollbackOnly ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.orm.hibernate5.SessionHolder . isRollbackOnly ( ) || ( hasConnectionHolder ( ) && getConnectionHolder ( ) . isRollbackOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { this . org.springframework.orm.hibernate5.SessionHolder . getSession ( ) . flush ( ) ; } catch ( HibernateException org.springframework.orm.hibernate5.HibernateException ) { throw org.springframework.orm.hibernate5.DataAccessException ( org.springframework.orm.hibernate5.HibernateException ) ; } catch ( PersistenceException org.springframework.orm.hibernate5.PersistenceException ) { if ( org.springframework.orm.hibernate5.PersistenceException . getCause ( ) instanceof HibernateException ) { throw org.springframework.orm.hibernate5.DataAccessException ( ( HibernateException ) org.springframework.orm.hibernate5.PersistenceException . getCause ( ) ) ; } throw org.springframework.orm.hibernate5.PersistenceException ; } }  <METHOD_END>
<METHOD_START> private void ( SessionHolder org.springframework.orm.hibernate5.SessionHolder , ConnectionHolder org.springframework.orm.hibernate5.ConnectionHolder ) { this . org.springframework.orm.hibernate5.SessionHolder = org.springframework.orm.hibernate5.SessionHolder ; this . org.springframework.orm.hibernate5.ConnectionHolder = org.springframework.orm.hibernate5.ConnectionHolder ; }  <METHOD_END>
<METHOD_START> private org.springframework.orm.hibernate5.SessionHolder org.springframework.orm.hibernate5.SessionHolder ( ) { return this . org.springframework.orm.hibernate5.SessionHolder ; }  <METHOD_END>
<METHOD_START> private org.springframework.orm.hibernate5.ConnectionHolder org.springframework.orm.hibernate5.ConnectionHolder ( ) { return this . org.springframework.orm.hibernate5.ConnectionHolder ; }  <METHOD_END>
