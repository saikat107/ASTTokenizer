<METHOD_START> @ Before public void void ( ) { this . org.springframework.scheduling.config.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.scheduling.config.ExecutorBeanDefinitionParserTests .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ThreadPoolTaskExecutor org.springframework.scheduling.config.ThreadPoolTaskExecutor = this . org.springframework.scheduling.config.ApplicationContext . getBean ( STRING , ThreadPoolTaskExecutor .class ) ; assertEquals ( NUMBER , int ( org.springframework.scheduling.config.ThreadPoolTaskExecutor ) ) ; assertEquals ( java.lang.Integer . int , int ( org.springframework.scheduling.config.ThreadPoolTaskExecutor ) ) ; assertEquals ( java.lang.Integer . int , int ( org.springframework.scheduling.config.ThreadPoolTaskExecutor ) ) ; assertEquals ( NUMBER , int ( org.springframework.scheduling.config.ThreadPoolTaskExecutor ) ) ; assertEquals ( false , boolean ( org.springframework.scheduling.config.ThreadPoolTaskExecutor ) ) ; java.util.concurrent.FutureTask<java.lang.String> < java.lang.String > java.util.concurrent.FutureTask<java.lang.String> = new java.util.concurrent.FutureTask<java.lang.String> <> ( new java.util.concurrent.Callable<java.lang.String> < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { return STRING ; } } ) ; org.springframework.scheduling.config.ThreadPoolTaskExecutor . execute ( java.util.concurrent.FutureTask<java.lang.String> ) ; assertEquals ( STRING , java.util.concurrent.FutureTask<java.lang.String> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = this . org.springframework.scheduling.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , int ( java.lang.Object ) ) ; assertEquals ( NUMBER , int ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) { this . org.springframework.scheduling.config.ApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = this . org.springframework.scheduling.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , int ( java.lang.Object ) ) ; assertEquals ( NUMBER , int ( java.lang.Object ) ) ; assertEquals ( NUMBER , int ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = this . org.springframework.scheduling.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , int ( java.lang.Object ) ) ; assertEquals ( NUMBER , int ( java.lang.Object ) ) ; assertEquals ( NUMBER , int ( java.lang.Object ) ) ; assertEquals ( true , boolean ( java.lang.Object ) ) ; assertEquals ( java.lang.Integer . int , int ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = this . org.springframework.scheduling.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , int ( java.lang.Object ) ) ; assertEquals ( NUMBER , int ( java.lang.Object ) ) ; assertEquals ( NUMBER , int ( java.lang.Object ) ) ; assertEquals ( false , boolean ( java.lang.Object ) ) ; assertEquals ( java.lang.Integer . int , int ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = this . org.springframework.scheduling.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , int ( java.lang.Object ) ) ; assertEquals ( NUMBER , int ( java.lang.Object ) ) ; assertEquals ( false , boolean ( java.lang.Object ) ) ; assertEquals ( NUMBER , int ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = this . org.springframework.scheduling.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , int ( java.lang.Object ) ) ; assertEquals ( NUMBER , int ( java.lang.Object ) ) ; assertEquals ( true , boolean ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) { this . org.springframework.scheduling.config.ApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomizableThreadCreator org.springframework.scheduling.config.CustomizableThreadCreator = this . org.springframework.scheduling.config.ApplicationContext . getBean ( STRING , CustomizableThreadCreator .class ) ; assertEquals ( STRING , org.springframework.scheduling.config.CustomizableThreadCreator . getThreadNamePrefix ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.scheduling.config.ApplicationContext . isTypeMatch ( STRING , java.util.concurrent.Executor .class ) ) ; assertTrue ( this . org.springframework.scheduling.config.ApplicationContext . isTypeMatch ( STRING , TaskExecutor .class ) ) ; assertTrue ( this . org.springframework.scheduling.config.ApplicationContext . isTypeMatch ( STRING , ThreadPoolTaskExecutor .class ) ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.Object java.lang.Object ) { return ( java.lang.Integer ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.Object java.lang.Object ) { return ( java.lang.Integer ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.Object java.lang.Object ) { return ( java.lang.Integer ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.Object java.lang.Object ) { return ( java.lang.Integer ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Object java.lang.Object ) { return ( java.lang.Boolean ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; }  <METHOD_END>
