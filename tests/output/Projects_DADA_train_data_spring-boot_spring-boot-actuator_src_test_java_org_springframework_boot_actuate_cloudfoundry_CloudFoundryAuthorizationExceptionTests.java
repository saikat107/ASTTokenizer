<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.actuate.cloudfoundry.CloudFoundryAuthorizationException ( Reason . INVALID_TOKEN ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus . UNAUTHORIZED ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.actuate.cloudfoundry.CloudFoundryAuthorizationException ( Reason . INVALID_ISSUER ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus . UNAUTHORIZED ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.actuate.cloudfoundry.CloudFoundryAuthorizationException ( Reason . INVALID_AUDIENCE ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus . UNAUTHORIZED ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.actuate.cloudfoundry.CloudFoundryAuthorizationException ( Reason . INVALID_SIGNATURE ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus . UNAUTHORIZED ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.actuate.cloudfoundry.CloudFoundryAuthorizationException ( Reason . MISSING_AUTHORIZATION ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus . UNAUTHORIZED ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.actuate.cloudfoundry.CloudFoundryAuthorizationException ( Reason . UNSUPPORTED_TOKEN_SIGNING_ALGORITHM ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus . UNAUTHORIZED ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.actuate.cloudfoundry.CloudFoundryAuthorizationException ( Reason . TOKEN_EXPIRED ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus . UNAUTHORIZED ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.actuate.cloudfoundry.CloudFoundryAuthorizationException ( Reason . ACCESS_DENIED ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus . FORBIDDEN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.actuate.cloudfoundry.CloudFoundryAuthorizationException ( Reason . SERVICE_UNAVAILABLE ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus . SERVICE_UNAVAILABLE ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.cloudfoundry.CloudFoundryAuthorizationException org.springframework.boot.actuate.cloudfoundry.CloudFoundryAuthorizationException ( Reason org.springframework.boot.actuate.cloudfoundry.Reason ) { return new CloudFoundryAuthorizationException ( org.springframework.boot.actuate.cloudfoundry.Reason , STRING ) ; }  <METHOD_END>
