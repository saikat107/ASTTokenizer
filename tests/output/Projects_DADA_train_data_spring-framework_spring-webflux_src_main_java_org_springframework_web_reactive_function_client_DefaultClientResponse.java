<METHOD_START> public void ( ClientHttpResponse org.springframework.web.reactive.function.client.ClientHttpResponse , ExchangeStrategies org.springframework.web.reactive.function.client.ExchangeStrategies ) { this . org.springframework.web.reactive.function.client.ClientHttpResponse = org.springframework.web.reactive.function.client.ClientHttpResponse ; this . org.springframework.web.reactive.function.client.ExchangeStrategies = org.springframework.web.reactive.function.client.ExchangeStrategies ; this . org.springframework.web.reactive.function.client.Headers = new org.springframework.web.reactive.function.client.DefaultClientResponse.DefaultHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.HttpStatus org.springframework.web.reactive.function.client.HttpStatus ( ) { return this . org.springframework.web.reactive.function.client.ClientHttpResponse . getStatusCode ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.Headers org.springframework.web.reactive.function.client.Headers ( ) { return this . org.springframework.web.reactive.function.client.Headers ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,org.springframework.web.reactive.function.client.ResponseCookie> < java.lang.String , ResponseCookie > org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,org.springframework.web.reactive.function.client.ResponseCookie> ( ) { return this . org.springframework.web.reactive.function.client.ClientHttpResponse . getCookies ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( BodyExtractor < T , ? super ClientHttpResponse > org.springframework.web.reactive.function.client.BodyExtractor<T,? super org.springframework.web.reactive.function.client.ClientHttpResponse> ) { return org.springframework.web.reactive.function.client.BodyExtractor<T,> . extract ( this . org.springframework.web.reactive.function.client.ClientHttpResponse , new BodyExtractor . BodyExtractor ( ) { @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> ( ) { return org.springframework.web.reactive.function.client.ExchangeStrategies . messageReaders ( ) ; } @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.client.ServerHttpResponse> < ServerHttpResponse > java.util.Optional<org.springframework.web.reactive.function.client.ServerHttpResponse> ( ) { return java.util.Optional . java.util.Optional<org.springframework.web.reactive.function.client.ServerHttpResponse> ( ) ; } @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> ( ) { return org.springframework.web.reactive.function.client.ExchangeStrategies . messageReaders ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.client.ServerHttpResponse> < ServerHttpResponse > java.util.Optional<org.springframework.web.reactive.function.client.ServerHttpResponse> ( ) { return java.util.Optional . java.util.Optional<org.springframework.web.reactive.function.client.ServerHttpResponse> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.reactive.function.client.Mono<T> < T > org.springframework.web.reactive.function.client.Mono<T> ( java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> ) { return org.springframework.web.reactive.function.client.Publisher ( BodyExtractors . toMono ( java.lang.Class<> ) , Mono :: error ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.reactive.function.client.Flux<T> < T > org.springframework.web.reactive.function.client.Flux<T> ( java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> ) { return org.springframework.web.reactive.function.client.Publisher ( BodyExtractors . toFlux ( java.lang.Class<> ) , Flux :: error ) ; }  <METHOD_END>
<METHOD_START> private < T extends org.springframework.web.reactive.function.client.Publisher<?> < ? > > T T ( BodyExtractor < T , ? super ClientHttpResponse > org.springframework.web.reactive.function.client.BodyExtractor<T,? super org.springframework.web.reactive.function.client.ClientHttpResponse> , java.util.function.Function<org.springframework.web.reactive.function.client.WebClientException,T> < WebClientException , T > java.util.function.Function<org.springframework.web.reactive.function.client.WebClientException,T> ) { HttpStatus org.springframework.web.reactive.function.client.HttpStatus = org.springframework.web.reactive.function.client.HttpStatus ( ) ; if ( org.springframework.web.reactive.function.client.HttpStatus . is4xxClientError ( ) || org.springframework.web.reactive.function.client.HttpStatus . is5xxServerError ( ) ) { WebClientException org.springframework.web.reactive.function.client.WebClientException = new WebClientException ( STRING + org.springframework.web.reactive.function.client.HttpStatus . value ( ) + STRING + org.springframework.web.reactive.function.client.HttpStatus . getReasonPhrase ( ) ) ; return java.util.function.Function<org.springframework.web.reactive.function.client.WebClientException,T> . apply ( org.springframework.web.reactive.function.client.WebClientException ) ; } else { return java.lang.Object ( org.springframework.web.reactive.function.client.BodyExtractor<T,> ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.function.client.HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders ( ) { return org.springframework.web.reactive.function.client.ClientHttpResponse . getHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.OptionalLong java.util.OptionalLong ( ) { return java.util.OptionalLong ( org.springframework.web.reactive.function.client.HttpHeaders ( ) . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.client.MediaType> < MediaType > java.util.Optional<org.springframework.web.reactive.function.client.MediaType> ( ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.client.HttpHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.web.reactive.function.client.HttpHeaders ( ) . get ( java.lang.String ) ; return java.util.List<java.lang.String> != null ? java.util.List<java.lang.String> : java.util.Collections . java.util.List<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders ( ) { return HttpHeaders . readOnlyHttpHeaders ( org.springframework.web.reactive.function.client.HttpHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.OptionalLong java.util.OptionalLong ( long long ) { return long != - NUMBER ? java.util.OptionalLong . java.util.OptionalLong ( long ) : java.util.OptionalLong . java.util.OptionalLong ( ) ; }  <METHOD_END>
