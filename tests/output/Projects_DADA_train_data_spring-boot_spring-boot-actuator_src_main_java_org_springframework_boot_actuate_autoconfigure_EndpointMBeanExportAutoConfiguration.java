<METHOD_START> public void ( EndpointMBeanExportProperties org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportProperties , ObjectProvider < ObjectMapper > org.springframework.boot.actuate.autoconfigure.ObjectProvider<org.springframework.boot.actuate.autoconfigure.ObjectMapper> ) { this . org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportProperties = org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportProperties ; this . org.springframework.boot.actuate.autoconfigure.ObjectMapper = org.springframework.boot.actuate.autoconfigure.ObjectProvider<org.springframework.boot.actuate.autoconfigure.ObjectMapper> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.EndpointMBeanExporter org.springframework.boot.actuate.autoconfigure.EndpointMBeanExporter ( javax.management.MBeanServer javax.management.MBeanServer ) { EndpointMBeanExporter org.springframework.boot.actuate.autoconfigure.EndpointMBeanExporter = new EndpointMBeanExporter ( this . org.springframework.boot.actuate.autoconfigure.ObjectMapper ) ; java.lang.String java.lang.String = this . org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportProperties . getDomain ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.boot.actuate.autoconfigure.EndpointMBeanExporter . setDomain ( java.lang.String ) ; } org.springframework.boot.actuate.autoconfigure.EndpointMBeanExporter . setServer ( javax.management.MBeanServer ) ; org.springframework.boot.actuate.autoconfigure.EndpointMBeanExporter . setEnsureUniqueRuntimeObjectNames ( this . org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportProperties . isUniqueNames ( ) ) ; org.springframework.boot.actuate.autoconfigure.EndpointMBeanExporter . setObjectNameStaticProperties ( this . org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportProperties . getStaticNames ( ) ) ; return org.springframework.boot.actuate.autoconfigure.EndpointMBeanExporter ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( javax.management.MBeanServer .class ) public javax.management.MBeanServer javax.management.MBeanServer ( ) { return new JmxAutoConfiguration ( ) . mbeanServer ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( AuditEventRepository .class ) @ ConditionalOnEnabledEndpoint ( STRING ) public org.springframework.boot.actuate.autoconfigure.AuditEventsJmxEndpoint org.springframework.boot.actuate.autoconfigure.AuditEventsJmxEndpoint ( AuditEventRepository org.springframework.boot.actuate.autoconfigure.AuditEventRepository ) { return new AuditEventsJmxEndpoint ( this . org.springframework.boot.actuate.autoconfigure.ObjectMapper , org.springframework.boot.actuate.autoconfigure.AuditEventRepository ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.autoconfigure.ConditionOutcome org.springframework.boot.actuate.autoconfigure.ConditionOutcome ( ConditionContext org.springframework.boot.actuate.autoconfigure.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.actuate.autoconfigure.AnnotatedTypeMetadata ) { boolean boolean = boolean ( org.springframework.boot.actuate.autoconfigure.ConditionContext , STRING ) ; boolean boolean = boolean ( org.springframework.boot.actuate.autoconfigure.ConditionContext , STRING ) ; if ( boolean && boolean ) { return ConditionOutcome . match ( ConditionMessage . forCondition ( STRING ) . found ( STRING ) . items ( STRING , STRING ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage . forCondition ( STRING ) . because ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ConditionContext org.springframework.boot.actuate.autoconfigure.ConditionContext , java.lang.String java.lang.String ) { RelaxedPropertyResolver org.springframework.boot.actuate.autoconfigure.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.actuate.autoconfigure.ConditionContext . getEnvironment ( ) , java.lang.String ) ; return org.springframework.boot.actuate.autoconfigure.RelaxedPropertyResolver . getProperty ( STRING , java.lang.Boolean .class , true ) ; }  <METHOD_END>
