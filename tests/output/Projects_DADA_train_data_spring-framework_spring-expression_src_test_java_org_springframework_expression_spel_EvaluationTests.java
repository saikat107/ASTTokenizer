<METHOD_START> @ Test public void void ( ) org.springframework.expression.spel.EvaluationException , org.springframework.expression.spel.ParseException { ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.EvaluationTests.TestClass org.springframework.expression.spel.EvaluationTests.TestClass = new org.springframework.expression.spel.EvaluationTests.TestClass ( ) ; java.lang.Object java.lang.Object = null ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.TestClass ) ) ; assertEquals ( STRING , java.lang.Object ) ; java.lang.Object = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.TestClass ) ) ; assertEquals ( STRING , java.lang.Object ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.TestClass . java.util.List<java.lang.String> . int ( ) ) ; try { java.lang.Object = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.TestClass ) ) ; fail ( ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { org.springframework.expression.spel.EvaluationException . printStackTrace ( ) ; } java.lang.Object = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.TestClass ) ) ; assertEquals ( STRING , java.lang.Object ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.TestClass . java.util.List<java.lang.String> ( ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = SpelEvaluationException .class ) public void void ( ) java.lang.Exception { org.springframework.expression.spel.EvaluationTests.TestClass org.springframework.expression.spel.EvaluationTests.TestClass = new org.springframework.expression.spel.EvaluationTests.TestClass ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.TestClass ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; java.lang.Object java.lang.Object = null ; java.lang.Object = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertNull ( java.lang.Object ) ; java.lang.Object = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertNotNull ( java.lang.Object ) ; java.lang.Object = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = SpelEvaluationException .class ) public void void ( ) java.lang.Exception { org.springframework.expression.spel.EvaluationTests.TestClass org.springframework.expression.spel.EvaluationTests.TestClass = new org.springframework.expression.spel.EvaluationTests.TestClass ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.TestClass ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; java.lang.Object java.lang.Object = null ; java.lang.Object = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.Object ) ; java.lang.Object = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertNotNull ( java.lang.Object ) ; java.lang.Object = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map java.util.Map ( ) { return this . java.util.Map ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.EvaluationTests.Foo org.springframework.expression.spel.EvaluationTests.Foo ( ) { return this . org.springframework.expression.spel.EvaluationTests.Foo ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , null , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluateAndCheckError ( STRING , SpelMessage . INSTANCEOF_OPERATOR_NEEDS_CLASS_OPERAND , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluateAndCheckError ( STRING , SpelMessage . INVALID_FIRST_OPERAND_FOR_MATCHES_OPERATOR , NUMBER , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluateAndCheckError ( STRING , SpelMessage . INVALID_SECOND_OPERAND_FOR_MATCHES_OPERATOR , NUMBER , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , true , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class , false ) ; evaluateAndCheckError ( STRING , SpelMessage . PROPERTY_OR_FIELD_NOT_READABLE , NUMBER , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new SpelExpressionParser ( ) . parseExpression ( STRING ) ; fail ( STRING ) ; } catch ( ParseException org.springframework.expression.spel.ParseException ) { assertTrue ( org.springframework.expression.spel.ParseException instanceof SpelParseException ) ; SpelParseException org.springframework.expression.spel.SpelParseException = ( SpelParseException ) org.springframework.expression.spel.ParseException ; assertEquals ( SpelMessage . OOD , org.springframework.expression.spel.SpelParseException . getMessageCode ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelParseException . getPosition ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.expression.spel.ParseException { try { new SpelExpressionParser ( ) . parseRaw ( STRING ) ; fail ( ) ; } catch ( SpelParseException org.springframework.expression.spel.SpelParseException ) { assertEquals ( org.springframework.expression.spel.SpelParseException . getMessageCode ( ) , SpelMessage . UNEXPECTED_DATA_AFTER_DOT ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelParseException . getInserts ( ) [ NUMBER ] ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpression org.springframework.expression.spel.SpelExpression = ( SpelExpression ) parser . parseExpression ( STRING ) ; java.lang.String java.lang.String = org.springframework.expression.spel.SpelExpression . getValue ( java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; java.lang.String = org.springframework.expression.spel.SpelExpression . getValue ( java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; assertFalse ( org.springframework.expression.spel.SpelExpression . isWritable ( new StandardEvaluationContext ( ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelExpression . toStringAST ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = EvaluationException .class ) public void void ( ) { parser . parseExpression ( STRING ) . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = EvaluationException .class ) public void void ( ) { parser . parseExpression ( STRING ) . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = EvaluationException .class ) public void void ( ) { parser . parseExpression ( STRING ) . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = EvaluationException .class ) public void void ( ) { parser . parseExpression ( STRING ) . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = EvaluationException .class ) public void void ( ) { parser . parseExpression ( STRING ) . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluateAndCheckError ( STRING , SpelMessage . TYPE_CONVERSION_ERROR ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertFalse ( org.springframework.expression.spel.Expression . isWritable ( eContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = EvaluationException .class ) public void void ( ) { parser . parseExpression ( STRING ) . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , int [] .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluateAndCheckError ( STRING , SpelMessage . CANNOT_INDEX_INTO_NULL_VALUE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Integer .class , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , int [] .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Class .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpression org.springframework.expression.spel.SpelExpression = ( SpelExpression ) parser . parseExpression ( STRING ) ; assertFalse ( org.springframework.expression.spel.SpelExpression . isWritable ( new StandardEvaluationContext ( ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelExpression . toStringAST ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.SpelExpression . getValue ( java.lang.Class .class ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelExpression . toStringAST ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.SpelExpression . getValue ( java.lang.Class .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpression org.springframework.expression.spel.SpelExpression = ( SpelExpression ) parser . parseExpression ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , ( short ) NUMBER ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , ( short ) NUMBER ) ; assertTrue ( org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.EvaluationContext , java.lang.Boolean .class ) ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , ( byte ) NUMBER ) ; assertTrue ( org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.EvaluationContext , java.lang.Boolean .class ) ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , ( byte ) NUMBER ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , ( byte ) NUMBER ) ; assertFalse ( org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.EvaluationContext , java.lang.Boolean .class ) ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , NUMBER ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , ( short ) NUMBER ) ; assertTrue ( org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.EvaluationContext , java.lang.Boolean .class ) ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , ( byte ) NUMBER ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , ( short ) NUMBER ) ; assertTrue ( org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.EvaluationContext , java.lang.Boolean .class ) ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , ( byte ) NUMBER ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , NUMBER ) ; assertTrue ( org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.EvaluationContext , java.lang.Boolean .class ) ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , ( byte ) NUMBER ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , NUMBER ) ; assertTrue ( org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.EvaluationContext , java.lang.Boolean .class ) ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , new java.math.BigInteger ( STRING ) ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , new java.math.BigInteger ( STRING ) ) ; assertTrue ( org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.EvaluationContext , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Class .class ) ; evaluate ( STRING , STRING , java.lang.Class .class ) ; evaluate ( STRING , STRING , java.lang.Class .class ) ; evaluate ( STRING , STRING , java.lang.Class .class ) ; evaluate ( STRING , STRING , java.lang.Class .class ) ; evaluate ( STRING , STRING , java.lang.Class .class ) ; evaluate ( STRING , STRING , java.lang.Class .class ) ; evaluate ( STRING , STRING , java.lang.Class .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Class .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluateAndAskForReturnType ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluateAndAskForReturnType ( STRING , NUMBER , java.lang.Integer .class ) ; evaluateAndAskForReturnType ( STRING , NUMBER , java.lang.Long .class ) ; evaluateAndAskForReturnType ( STRING , 'A' , java.lang.Character .class ) ; evaluateAndAskForReturnType ( STRING , ( short ) NUMBER , java.lang.Short .class ) ; evaluateAndAskForReturnType ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = parser . parseExpression ( STRING ) . getValue ( java.lang.Integer .class ) ; assertEquals ( NUMBER , int ) ; double double = parser . parseExpression ( STRING ) . getValue ( java.lang.Double .class ) ; assertEquals ( NUMBER , double , NUMBER ) ; int int = parser . parseExpression ( STRING ) . getValue ( java.lang.Integer .class ) ; assertEquals ( NUMBER , int ) ; int int = parser . parseExpression ( STRING ) . getValue ( java.lang.Integer .class ) ; assertEquals ( NUMBER , int ) ; int int = parser . parseExpression ( STRING ) . getValue ( java.lang.Integer .class ) ; assertEquals ( - NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EvaluationContext org.springframework.expression.spel.EvaluationContext = TestScenarioCreator . getTestEvaluationContext ( ) ; boolean boolean = parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.EvaluationContext , java.lang.Boolean .class ) ; assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = TestScenarioCreator . getTestEvaluationContext ( ) ; try { assertFalse ( parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ) ; fail ( STRING ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { } ( ( StandardTypeLocator ) org.springframework.expression.spel.StandardEvaluationContext . getTypeLocator ( ) ) . registerImport ( STRING ) ; assertTrue ( parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = parser . parseExpression ( STRING ) . getValue ( java.lang.Class .class ) ; assertEquals ( java.lang.String .class , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPerson org.springframework.expression.spel.TestPerson = new TestPerson ( ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.TestPerson ) ; SpelParserConfiguration org.springframework.expression.spel.SpelParserConfiguration = new SpelParserConfiguration ( true , true ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . setValue ( org.springframework.expression.spel.EvaluationContext , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.TestPerson . getName ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . setValue ( org.springframework.expression.spel.EvaluationContext , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.TestPerson . getAddress ( ) . getStreet ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . setValue ( org.springframework.expression.spel.EvaluationContext , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.TestPerson . getAddress ( ) . getCrossStreets ( ) . get ( NUMBER ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . setValue ( org.springframework.expression.spel.EvaluationContext , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.TestPerson . getAddress ( ) . getCrossStreets ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.expression.spel.TestPerson . getAddress ( ) . getCrossStreets ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertNull ( org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertNull ( org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertNull ( org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; java.util.List<org.springframework.expression.spel.MethodResolver> < MethodResolver > java.util.List<org.springframework.expression.spel.MethodResolver> = new java.util.ArrayList<org.springframework.expression.spel.MethodResolver> <> ( ) ; java.util.List<org.springframework.expression.spel.MethodResolver> . add ( new org.springframework.expression.spel.EvaluationTests.CustomMethodResolver ( ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setMethodResolvers ( java.util.List<org.springframework.expression.spel.MethodResolver> ) ; MethodFilter org.springframework.expression.spel.MethodFilter = new org.springframework.expression.spel.EvaluationTests.CustomMethodFilter ( ) ; try { org.springframework.expression.spel.StandardEvaluationContext . registerMethodFilter ( java.lang.String .class , org.springframework.expression.spel.MethodFilter ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( STRING , java.lang.IllegalStateException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.MethodExecutor org.springframework.expression.spel.MethodExecutor ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.util.List<org.springframework.expression.spel.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.TypeDescriptor> ) throws org.springframework.expression.spel.AccessException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> ( java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( ) {}  <METHOD_END>
<METHOD_START> public void ( ) { java.lang.Integer[] = new java.lang.Integer [ NUMBER ] ; java.lang.Integer[] [ NUMBER ] = NUMBER ; java.lang.Integer[] [ NUMBER ] = NUMBER ; java.lang.Integer[] [ NUMBER ] = NUMBER ; java.lang.Integer[] [ NUMBER ] = NUMBER ; java.lang.Integer[] [ NUMBER ] = NUMBER ; java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( int int ) { return ( int % NUMBER ) == NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.EvaluationTests.Spr9751 org.springframework.expression.spel.EvaluationTests.Spr9751 = new org.springframework.expression.spel.EvaluationTests.Spr9751 ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.Spr9751 ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.EvaluationTests.Spr9751 . java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.Spr9751 ) ; org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.Spr9751 ) ; org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( false , false ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; try { org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( SpelMessage . COLLECTION_INDEX_OUT_OF_BOUNDS , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.EvaluationTests.TestClass org.springframework.expression.spel.EvaluationTests.TestClass = new org.springframework.expression.spel.EvaluationTests.TestClass ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.TestClass ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true , NUMBER ) ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . setValue ( org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; assertThat ( org.springframework.expression.spel.EvaluationTests.TestClass . java.util.List<java.lang.String> ( ) . int ( ) , equalTo ( NUMBER ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; try { org.springframework.expression.spel.Expression . setValue ( org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( SpelMessage . UNABLE_TO_GROW_COLLECTION , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; assertThat ( org.springframework.expression.spel.EvaluationTests.TestClass . java.util.List<java.lang.String> ( ) . int ( ) , equalTo ( NUMBER ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = NUMBER ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( java.lang.Integer ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , java.lang.Integer . int ( ) ) ; try { org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer .class ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( SpelMessage . NOT_ASSIGNABLE , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.EvaluationTests.Spr9751 org.springframework.expression.spel.EvaluationTests.Spr9751 = new org.springframework.expression.spel.EvaluationTests.Spr9751 ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.Spr9751 ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertTrue ( new java.math.BigDecimal ( STRING ) . boolean ( org.springframework.expression.spel.EvaluationTests.Spr9751 . java.math.BigDecimal ) ) ; java.math.BigDecimal java.math.BigDecimal = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.math.BigDecimal .class ) ; assertTrue ( new java.math.BigDecimal ( STRING ) . boolean ( java.math.BigDecimal ) ) ; assertTrue ( new java.math.BigDecimal ( STRING ) . boolean ( org.springframework.expression.spel.EvaluationTests.Spr9751 . java.math.BigDecimal ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . double , NUMBER ) ; double double = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Double . java.lang.Class<java.lang.Double> ) ; assertEquals ( NUMBER , double , NUMBER ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . double , NUMBER ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . float , NUMBER ) ; float float = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Float . java.lang.Class<java.lang.Float> ) ; assertEquals ( NUMBER , float , NUMBER ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . float , NUMBER ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . long ) ; long long = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Long . java.lang.Class<java.lang.Long> ) ; assertEquals ( NUMBER , long ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . long ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; int int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . short ) ; short short = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Short . java.lang.Class<java.lang.Short> ) ; assertEquals ( NUMBER , short ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . short ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.EvaluationTests.Spr9751 org.springframework.expression.spel.EvaluationTests.Spr9751 = new org.springframework.expression.spel.EvaluationTests.Spr9751 ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.Spr9751 ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertTrue ( new java.math.BigDecimal ( STRING ) . boolean ( org.springframework.expression.spel.EvaluationTests.Spr9751 . java.math.BigDecimal ) ) ; java.math.BigDecimal java.math.BigDecimal = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.math.BigDecimal .class ) ; assertTrue ( new java.math.BigDecimal ( STRING ) . boolean ( java.math.BigDecimal ) ) ; assertTrue ( new java.math.BigDecimal ( STRING ) . boolean ( org.springframework.expression.spel.EvaluationTests.Spr9751 . java.math.BigDecimal ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . double , NUMBER ) ; double double = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Double . java.lang.Class<java.lang.Double> ) ; assertEquals ( NUMBER , double , NUMBER ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . double , NUMBER ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . float , NUMBER ) ; float float = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Float . java.lang.Class<java.lang.Float> ) ; assertEquals ( NUMBER , float , NUMBER ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . float , NUMBER ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . long ) ; long long = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Long . java.lang.Class<java.lang.Long> ) ; assertEquals ( NUMBER , long ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . long ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; int int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . short ) ; int int = ( java.lang.Integer ) org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . short ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.EvaluationTests.Spr9751 org.springframework.expression.spel.EvaluationTests.Spr9751 = new org.springframework.expression.spel.EvaluationTests.Spr9751 ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.Spr9751 ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; try { org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Double . java.lang.Class<java.lang.Double> ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( SpelMessage . OPERAND_NOT_INCREMENTABLE , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; try { org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Double . java.lang.Class<java.lang.Double> ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( SpelMessage . OPERAND_NOT_INCREMENTABLE , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = NUMBER ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( java.lang.Integer ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; try { Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer .class ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( SpelMessage . NOT_ASSIGNABLE , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } try { Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer .class ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( SpelMessage . NOT_ASSIGNABLE , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = NUMBER ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( java.lang.Integer ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , java.lang.Integer . int ( ) ) ; try { org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer .class ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( SpelMessage . NOT_ASSIGNABLE , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.EvaluationTests.Spr9751 org.springframework.expression.spel.EvaluationTests.Spr9751 = new org.springframework.expression.spel.EvaluationTests.Spr9751 ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.Spr9751 ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertTrue ( new java.math.BigDecimal ( STRING ) . boolean ( org.springframework.expression.spel.EvaluationTests.Spr9751 . java.math.BigDecimal ) ) ; java.math.BigDecimal java.math.BigDecimal = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.math.BigDecimal .class ) ; assertTrue ( new java.math.BigDecimal ( STRING ) . boolean ( java.math.BigDecimal ) ) ; assertTrue ( new java.math.BigDecimal ( STRING ) . boolean ( org.springframework.expression.spel.EvaluationTests.Spr9751 . java.math.BigDecimal ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . double , NUMBER ) ; double double = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Double . java.lang.Class<java.lang.Double> ) ; assertEquals ( NUMBER , double , NUMBER ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . double , NUMBER ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . float , NUMBER ) ; float float = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Float . java.lang.Class<java.lang.Float> ) ; assertEquals ( NUMBER , float , NUMBER ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . float , NUMBER ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . long ) ; long long = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Long . java.lang.Class<java.lang.Long> ) ; assertEquals ( NUMBER , long ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . long ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; int int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . short ) ; short short = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Short . java.lang.Class<java.lang.Short> ) ; assertEquals ( NUMBER , short ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . short ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.EvaluationTests.Spr9751 org.springframework.expression.spel.EvaluationTests.Spr9751 = new org.springframework.expression.spel.EvaluationTests.Spr9751 ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.Spr9751 ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertTrue ( new java.math.BigDecimal ( STRING ) . boolean ( org.springframework.expression.spel.EvaluationTests.Spr9751 . java.math.BigDecimal ) ) ; java.math.BigDecimal java.math.BigDecimal = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.math.BigDecimal .class ) ; assertTrue ( new java.math.BigDecimal ( STRING ) . boolean ( java.math.BigDecimal ) ) ; assertTrue ( new java.math.BigDecimal ( STRING ) . boolean ( org.springframework.expression.spel.EvaluationTests.Spr9751 . java.math.BigDecimal ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . double , NUMBER ) ; double double = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Double . java.lang.Class<java.lang.Double> ) ; assertEquals ( NUMBER , double , NUMBER ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . double , NUMBER ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . float , NUMBER ) ; float float = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Float . java.lang.Class<java.lang.Float> ) ; assertEquals ( NUMBER , float , NUMBER ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . float , NUMBER ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . long ) ; long long = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Long . java.lang.Class<java.lang.Long> ) ; assertEquals ( NUMBER , long ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . long ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; int int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . short ) ; int int = ( java.lang.Integer ) org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . short ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.EvaluationTests.Spr9751 org.springframework.expression.spel.EvaluationTests.Spr9751 = new org.springframework.expression.spel.EvaluationTests.Spr9751 ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.Spr9751 ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; try { org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Double . java.lang.Class<java.lang.Double> ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( SpelMessage . OPERAND_NOT_DECREMENTABLE , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; try { org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Double . java.lang.Class<java.lang.Double> ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( SpelMessage . OPERAND_NOT_DECREMENTABLE , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = NUMBER ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( java.lang.Integer ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; try { Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer .class ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( SpelMessage . NOT_ASSIGNABLE , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } try { Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer .class ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( SpelMessage . NOT_ASSIGNABLE , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.EvaluationTests.Spr9751 org.springframework.expression.spel.EvaluationTests.Spr9751 = new org.springframework.expression.spel.EvaluationTests.Spr9751 ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.Spr9751 ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; Expression org.springframework.expression.spel.Expression = null ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer .class ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int[] [ NUMBER ] ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer .class ) . intValue ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int[] [ NUMBER ] ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer .class ) . intValue ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { org.springframework.expression.spel.EvaluationTests.Spr9751 org.springframework.expression.spel.EvaluationTests.Spr9751 = new org.springframework.expression.spel.EvaluationTests.Spr9751 ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.EvaluationTests.Spr9751 ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; Expression org.springframework.expression.spel.Expression = null ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; int int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; assertEquals ( NUMBER , int ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . org.springframework.expression.spel.EvaluationTests.Spr9751_2 . int ) ; int int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . org.springframework.expression.spel.EvaluationTests.Spr9751_2 . int ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . org.springframework.expression.spel.EvaluationTests.Spr9751_2 . int ) ; int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . org.springframework.expression.spel.EvaluationTests.Spr9751_2 . int ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . org.springframework.expression.spel.EvaluationTests.Spr9751_2 . int ) ; int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . org.springframework.expression.spel.EvaluationTests.Spr9751_2 . int ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.EvaluationTests.Spr9751 .class . java.lang.reflect.Method ( STRING , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( STRING , org.springframework.expression.spel.StandardEvaluationContext . lookupVariable ( STRING ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , NUMBER ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , ( ( java.lang.Integer ) org.springframework.expression.spel.StandardEvaluationContext . lookupVariable ( STRING ) ) . int ( ) ) ; int int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , ( ( java.lang.Integer ) org.springframework.expression.spel.StandardEvaluationContext . lookupVariable ( STRING ) ) . int ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , ( ( java.lang.Integer ) org.springframework.expression.spel.StandardEvaluationContext . lookupVariable ( STRING ) ) . int ( ) ) ; int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , ( ( java.lang.Integer ) org.springframework.expression.spel.StandardEvaluationContext . lookupVariable ( STRING ) ) . int ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , ( ( java.lang.Integer ) org.springframework.expression.spel.StandardEvaluationContext . lookupVariable ( STRING ) ) . int ( ) ) ; int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , ( ( java.lang.Integer ) org.springframework.expression.spel.StandardEvaluationContext . lookupVariable ( STRING ) ) . int ( ) ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setBeanResolver ( new org.springframework.expression.spel.EvaluationTests.MyBeanResolver ( ) ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; org.springframework.expression.spel.EvaluationTests.Spr9751 . int = NUMBER ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; int = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.expression.spel.EvaluationTests.Spr9751 . int ) ; }  <METHOD_END>
<METHOD_START> private void void ( ExpressionParser org.springframework.expression.spel.ExpressionParser , EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.String java.lang.String , SpelMessage org.springframework.expression.spel.SpelMessage ) { try { Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( java.lang.String ) ; SpelUtilities . printAbstractSyntaxTree ( java.lang.System . java.io.PrintStream , org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { org.springframework.expression.spel.SpelEvaluationException . printStackTrace ( ) ; assertEquals ( org.springframework.expression.spel.SpelMessage , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ExpressionParser org.springframework.expression.spel.ExpressionParser , EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.String java.lang.String ) { void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.EvaluationContext , java.lang.String , SpelMessage . NOT_ASSIGNABLE ) ; }  <METHOD_END>
<METHOD_START> private void void ( ExpressionParser org.springframework.expression.spel.ExpressionParser , EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.String java.lang.String ) { void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.EvaluationContext , java.lang.String , SpelMessage . SETVALUE_NOT_SUPPORTED ) ; }  <METHOD_END>
<METHOD_START> private void void ( ExpressionParser org.springframework.expression.spel.ExpressionParser , EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.String java.lang.String ) { void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.EvaluationContext , java.lang.String , SpelMessage . OPERAND_NOT_INCREMENTABLE ) ; }  <METHOD_END>
<METHOD_START> private void void ( ExpressionParser org.springframework.expression.spel.ExpressionParser , EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.String java.lang.String ) { void ( org.springframework.expression.spel.ExpressionParser , org.springframework.expression.spel.EvaluationContext , java.lang.String , SpelMessage . OPERAND_NOT_DECREMENTABLE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.String java.lang.String )				throws org.springframework.expression.spel.AccessException { if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { return new org.springframework.expression.spel.EvaluationTests.Spr9751_2 ( ) ; } throw new AccessException ( STRING + java.lang.String ) ; }  <METHOD_END>
