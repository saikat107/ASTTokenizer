<METHOD_START> public void ( ClassTransformer org.springframework.orm.jpa.persistenceunit.ClassTransformer ) { Assert . notNull ( org.springframework.orm.jpa.persistenceunit.ClassTransformer , STRING ) ; this . org.springframework.orm.jpa.persistenceunit.ClassTransformer = org.springframework.orm.jpa.persistenceunit.ClassTransformer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( java.lang.ClassLoader java.lang.ClassLoader , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , java.security.ProtectionDomain java.security.ProtectionDomain , byte [] byte[] ) { synchronized ( this ) { if ( this . boolean ) { return null ; } this . boolean = true ; try { byte [] byte[] = this . org.springframework.orm.jpa.persistenceunit.ClassTransformer . transform ( java.lang.ClassLoader , java.lang.String , java.lang.Class<> , java.security.ProtectionDomain , byte[] ) ; if ( byte[] != null && org.springframework.orm.jpa.persistenceunit.Log . isDebugEnabled ( ) ) { org.springframework.orm.jpa.persistenceunit.Log . debug ( STRING + this . org.springframework.orm.jpa.persistenceunit.ClassTransformer . getClass ( ) . getName ( ) + STRING + java.lang.String + STRING + byte[] . int + STRING + byte[] . int ) ; } return byte[] ; } catch ( java.lang.ClassCircularityError java.lang.ClassCircularityError ) { if ( org.springframework.orm.jpa.persistenceunit.Log . isErrorEnabled ( ) ) { org.springframework.orm.jpa.persistenceunit.Log . error ( STRING + java.lang.String + STRING + STRING + this . org.springframework.orm.jpa.persistenceunit.ClassTransformer . getClass ( ) . getName ( ) + STRING , java.lang.ClassCircularityError ) ; } throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING , java.lang.ClassCircularityError ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.orm.jpa.persistenceunit.Log . isWarnEnabled ( ) ) { org.springframework.orm.jpa.persistenceunit.Log . warn ( STRING + java.lang.String + STRING + this . org.springframework.orm.jpa.persistenceunit.ClassTransformer . getClass ( ) . getName ( ) + STRING , java.lang.Throwable ) ; } throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING , java.lang.Throwable ) ; } finally { this . boolean = false ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . org.springframework.orm.jpa.persistenceunit.ClassTransformer ; }  <METHOD_END>
