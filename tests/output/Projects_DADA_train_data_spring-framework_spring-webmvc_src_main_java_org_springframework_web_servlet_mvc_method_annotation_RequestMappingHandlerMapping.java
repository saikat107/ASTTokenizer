<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; this . boolean = ( boolean || this . boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( ContentNegotiationManager org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ) { Assert . notNull ( org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager = org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StringValueResolver org.springframework.web.servlet.mvc.method.annotation.StringValueResolver ) { this . org.springframework.web.servlet.mvc.method.annotation.StringValueResolver = org.springframework.web.servlet.mvc.method.annotation.StringValueResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . RequestMappingInfo.BuilderConfiguration = new RequestMappingInfo . RequestMappingInfo ( ) ; this . RequestMappingInfo.BuilderConfiguration . setUrlPathHelper ( getUrlPathHelper ( ) ) ; this . RequestMappingInfo.BuilderConfiguration . setPathMatcher ( getPathMatcher ( ) ) ; this . RequestMappingInfo.BuilderConfiguration . setSuffixPatternMatch ( this . boolean ) ; this . RequestMappingInfo.BuilderConfiguration . setTrailingSlashMatch ( this . boolean ) ; this . RequestMappingInfo.BuilderConfiguration . setRegisteredSuffixPatternMatch ( this . boolean ) ; this . RequestMappingInfo.BuilderConfiguration . setContentNegotiationManager ( org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ( ) ) ; super. afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ( ) { return this . org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . RequestMappingInfo.BuilderConfiguration . getFileExtensions ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( AnnotatedElementUtils . hasAnnotation ( java.lang.Class<> , Controller .class ) || AnnotatedElementUtils . hasAnnotation ( java.lang.Class<> , RequestMapping .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { RequestMappingInfo org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo = org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo ( java.lang.reflect.Method ) ; if ( org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo != null ) { RequestMappingInfo org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo = org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo ( java.lang.Class<> ) ; if ( org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo != null ) { org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo = org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo . combine ( org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo ) ; } } return org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ) { RequestMapping org.springframework.web.servlet.mvc.method.annotation.RequestMapping = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.AnnotatedElement , RequestMapping .class ) ; RequestCondition < ? > org.springframework.web.servlet.mvc.method.annotation.RequestCondition<?> = ( java.lang.reflect.AnnotatedElement instanceof java.lang.Class ? org.springframework.web.servlet.mvc.method.annotation.RequestCondition<?> ( ( java.lang.Class<?> < ? > ) java.lang.reflect.AnnotatedElement ) : org.springframework.web.servlet.mvc.method.annotation.RequestCondition<?> ( ( java.lang.reflect.Method ) java.lang.reflect.AnnotatedElement ) ) ; return ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping != null ? org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping , org.springframework.web.servlet.mvc.method.annotation.RequestCondition<> ) : null ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.RequestCondition<?> < ? > org.springframework.web.servlet.mvc.method.annotation.RequestCondition<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.RequestCondition<?> < ? > org.springframework.web.servlet.mvc.method.annotation.RequestCondition<?> ( java.lang.reflect.Method java.lang.reflect.Method ) { return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo ( RequestMapping org.springframework.web.servlet.mvc.method.annotation.RequestMapping , RequestCondition < ? > org.springframework.web.servlet.mvc.method.annotation.RequestCondition<?> ) { return RequestMappingInfo . paths ( java.lang.String[] ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping . path ( ) ) ) . methods ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping . method ( ) ) . params ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping . params ( ) ) . headers ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping . headers ( ) ) . consumes ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping . consumes ( ) ) . produces ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping . produces ( ) ) . mappingName ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping . name ( ) ) . customCondition ( org.springframework.web.servlet.mvc.method.annotation.RequestCondition<> ) . options ( this . RequestMappingInfo.BuilderConfiguration ) . build ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String [] java.lang.String[] ( java.lang.String [] java.lang.String[] ) { if ( this . org.springframework.web.servlet.mvc.method.annotation.StringValueResolver == null ) { return java.lang.String[] ; } else { java.lang.String [] java.lang.String[] = new java.lang.String [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.String[] [ int ] = this . org.springframework.web.servlet.mvc.method.annotation.StringValueResolver . resolveStringValue ( java.lang.String[] [ int ] ) ; } return java.lang.String[] ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.method.annotation.RequestMatchResult org.springframework.web.servlet.mvc.method.annotation.RequestMatchResult ( HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , java.lang.String java.lang.String ) { RequestMappingInfo org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo = RequestMappingInfo . paths ( java.lang.String ) . options ( this . RequestMappingInfo.BuilderConfiguration ) . build ( ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo = org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo . getMatchingCondition ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) ; if ( org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo == null ) { return null ; } java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo . getPatternsCondition ( ) . getPatterns ( ) ; java.lang.String java.lang.String = getUrlPathHelper ( ) . getLookupPathForRequest ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) ; return new RequestMatchResult ( java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) , java.lang.String , getPathMatcher ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , RequestMappingInfo org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo ) { HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = createHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getBeanType ( ) ; CrossOrigin org.springframework.web.servlet.mvc.method.annotation.CrossOrigin = AnnotatedElementUtils . findMergedAnnotation ( java.lang.Class<> , CrossOrigin .class ) ; CrossOrigin org.springframework.web.servlet.mvc.method.annotation.CrossOrigin = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , CrossOrigin .class ) ; if ( org.springframework.web.servlet.mvc.method.annotation.CrossOrigin == null && org.springframework.web.servlet.mvc.method.annotation.CrossOrigin == null ) { return null ; } CorsConfiguration org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration = new CorsConfiguration ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration , org.springframework.web.servlet.mvc.method.annotation.CrossOrigin ) ; void ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration , org.springframework.web.servlet.mvc.method.annotation.CrossOrigin ) ; if ( CollectionUtils . isEmpty ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedMethods ( ) ) ) { for ( RequestMethod org.springframework.web.servlet.mvc.method.annotation.RequestMethod : org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo . getMethodsCondition ( ) . getMethods ( ) ) { org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . addAllowedMethod ( org.springframework.web.servlet.mvc.method.annotation.RequestMethod . name ( ) ) ; } } return org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . applyPermitDefaultValues ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( CorsConfiguration org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration , CrossOrigin org.springframework.web.servlet.mvc.method.annotation.CrossOrigin ) { if ( org.springframework.web.servlet.mvc.method.annotation.CrossOrigin == null ) { return; } for ( java.lang.String java.lang.String : org.springframework.web.servlet.mvc.method.annotation.CrossOrigin . origins ( ) ) { org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . addAllowedOrigin ( java.lang.String ( java.lang.String ) ) ; } for ( RequestMethod org.springframework.web.servlet.mvc.method.annotation.RequestMethod : org.springframework.web.servlet.mvc.method.annotation.CrossOrigin . methods ( ) ) { org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . addAllowedMethod ( org.springframework.web.servlet.mvc.method.annotation.RequestMethod . name ( ) ) ; } for ( java.lang.String java.lang.String : org.springframework.web.servlet.mvc.method.annotation.CrossOrigin . allowedHeaders ( ) ) { org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . addAllowedHeader ( java.lang.String ( java.lang.String ) ) ; } for ( java.lang.String java.lang.String : org.springframework.web.servlet.mvc.method.annotation.CrossOrigin . exposedHeaders ( ) ) { org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . addExposedHeader ( java.lang.String ( java.lang.String ) ) ; } java.lang.String java.lang.String = java.lang.String ( org.springframework.web.servlet.mvc.method.annotation.CrossOrigin . allowCredentials ( ) ) ; if ( STRING . boolean ( java.lang.String ) ) { org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . setAllowCredentials ( true ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . setAllowCredentials ( false ) ; } else if ( ! java.lang.String . boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING + STRING + java.lang.String + STRING ) ; } if ( org.springframework.web.servlet.mvc.method.annotation.CrossOrigin . maxAge ( ) >= NUMBER && org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getMaxAge ( ) == null ) { org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . setMaxAge ( org.springframework.web.servlet.mvc.method.annotation.CrossOrigin . maxAge ( ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return ( this . org.springframework.web.servlet.mvc.method.annotation.StringValueResolver != null ? this . org.springframework.web.servlet.mvc.method.annotation.StringValueResolver . resolveStringValue ( java.lang.String ) : java.lang.String ) ; }  <METHOD_END>
