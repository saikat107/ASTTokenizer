<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new org.springframework.data.mapping.model.PersistentEntityParameterValueProviderUnitTests.Outer ( ) ; PersistentEntity < org.springframework.data.mapping.model.PersistentEntityParameterValueProviderUnitTests.Outer.Inner , P > org.springframework.data.mapping.model.PersistentEntity<org.springframework.data.mapping.model.PersistentEntityParameterValueProviderUnitTests.Outer.Inner,P> = new BasicPersistentEntity < org.springframework.data.mapping.model.PersistentEntityParameterValueProviderUnitTests.Outer.Inner , P > ( ClassTypeInformation . from ( org.springframework.data.mapping.model.PersistentEntityParameterValueProviderUnitTests.Outer.Inner .class ) ) { @ java.lang.Override public java.util.Optional<P> < P > java.util.Optional<P> ( java.lang.String java.lang.String ) { return java.util.Optional . java.util.Optional<P> ( P ) ; } } ; doReturn ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) . when ( org.springframework.data.mapping.model.PropertyValueProvider<P> ) . getPropertyValue ( any ( ) ) ; assertThat ( org.springframework.data.mapping.model.PersistentEntity<org.springframework.data.mapping.model.PersistentEntityParameterValueProviderUnitTests.Outer.Inner,P> . getPersistenceConstructor ( ) ) . hasValueSatisfying ( constructor -> { Iterator < Parameter < Object , P > > iterator = constructor . getParameters ( ) . iterator ( ) ; ParameterValueProvider < P > provider = new PersistentEntityParameterValueProvider <> ( entity , propertyValueProvider , Optional . of ( outer ) ) ; assertThat ( provider . getParameterValue ( iterator . next ( ) ) ) . hasValue ( outer ) ; assertThat ( provider . getParameterValue ( iterator . next ( ) ) ) . isNotPresent ( ) ; assertThat ( iterator . hasNext ( ) ) . isFalse ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<P> < P > java.util.Optional<P> ( java.lang.String java.lang.String ) { return java.util.Optional . java.util.Optional<P> ( P ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistentEntity < org.springframework.data.mapping.model.PersistentEntityParameterValueProviderUnitTests.Entity , P > org.springframework.data.mapping.model.PersistentEntity<org.springframework.data.mapping.model.PersistentEntityParameterValueProviderUnitTests.Entity,P> = new BasicPersistentEntity <> ( ClassTypeInformation . from ( org.springframework.data.mapping.model.PersistentEntityParameterValueProviderUnitTests.Entity .class ) ) ; ParameterValueProvider < P > org.springframework.data.mapping.model.ParameterValueProvider<P> = new PersistentEntityParameterValueProvider <> ( org.springframework.data.mapping.model.PersistentEntity<org.springframework.data.mapping.model.PersistentEntityParameterValueProviderUnitTests.Entity,P> , org.springframework.data.mapping.model.PropertyValueProvider<P> , java.util.Optional . java.util.Optional<P> ( P ) ) ; assertThat ( org.springframework.data.mapping.model.PersistentEntity<org.springframework.data.mapping.model.PersistentEntityParameterValueProviderUnitTests.Entity,P> . getPersistenceConstructor ( ) ) . hasValueSatisfying ( constructor -> assertThatExceptionOfType ( MappingException .class ) . isThrownBy ( ( ) provider . getParameterValue ( constructor . getParameters ( ) . iterator ( ) . next ( ) ) ) . withMessageContaining ( STRING ) . withMessageContaining ( Entity .class . getName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Object java.lang.Object ) {			}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
