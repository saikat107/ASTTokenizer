<METHOD_START> public void void ( JdbcTemplate org.springframework.jdbc.object.JdbcTemplate ) { if ( org.springframework.jdbc.object.JdbcTemplate == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . org.springframework.jdbc.object.JdbcTemplate = org.springframework.jdbc.object.JdbcTemplate ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.object.JdbcTemplate org.springframework.jdbc.object.JdbcTemplate ( ) { return this . org.springframework.jdbc.object.JdbcTemplate ; }  <METHOD_END>
<METHOD_START> public void void ( javax.sql.DataSource javax.sql.DataSource ) { this . org.springframework.jdbc.object.JdbcTemplate . setDataSource ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . org.springframework.jdbc.object.JdbcTemplate . setFetchSize ( int ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . org.springframework.jdbc.object.JdbcTemplate . setMaxRows ( int ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . org.springframework.jdbc.object.JdbcTemplate . setQueryTimeout ( int ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { if ( boolean ( ) ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { if ( boolean ( ) ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { if ( boolean ( ) ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return this . java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int [] int[] ) throws org.springframework.jdbc.object.InvalidDataAccessApiUsageException { if ( boolean ( ) ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } if ( int[] != null ) { for ( int int : int[] ) { void ( new SqlParameter ( int ) ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( SqlParameter org.springframework.jdbc.object.SqlParameter ) throws org.springframework.jdbc.object.InvalidDataAccessApiUsageException { if ( boolean ( ) ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } this . java.util.List<org.springframework.jdbc.object.SqlParameter> . add ( org.springframework.jdbc.object.SqlParameter ) ; }  <METHOD_END>
<METHOD_START> public void void ( SqlParameter [] org.springframework.jdbc.object.SqlParameter[] ) { if ( boolean ( ) ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } for ( int int = NUMBER ; int < parameters . length ; int ++ ) { if ( org.springframework.jdbc.object.SqlParameter[] [ int ] != null ) { this . java.util.List<org.springframework.jdbc.object.SqlParameter> . add ( org.springframework.jdbc.object.SqlParameter[] [ int ] ) ; } else { throw new InvalidDataAccessApiUsageException ( STRING + int + STRING + java.util.Arrays . java.util.List ( org.springframework.jdbc.object.SqlParameter[] ) + STRING ) ; } } }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.jdbc.object.SqlParameter> < SqlParameter > java.util.List<org.springframework.jdbc.object.SqlParameter> ( ) { return this . java.util.List<org.springframework.jdbc.object.SqlParameter> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> public final void void ( ) org.springframework.jdbc.object.InvalidDataAccessApiUsageException { if ( ! boolean ( ) ) { if ( java.lang.String ( ) == null ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } try { this . org.springframework.jdbc.object.JdbcTemplate . afterPropertiesSet ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { throw new InvalidDataAccessApiUsageException ( java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } void ( ) ; this . boolean = true ; if ( org.springframework.jdbc.object.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.object.Log . debug ( STRING + java.lang.String ( ) + STRING ) ; } } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( ! boolean ( ) ) { org.springframework.jdbc.object.Log . debug ( STRING ) ; void ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object [] java.lang.Object[] ) throws org.springframework.jdbc.object.InvalidDataAccessApiUsageException { void ( ) ; int int = NUMBER ; for ( SqlParameter org.springframework.jdbc.object.SqlParameter : this . java.util.List<org.springframework.jdbc.object.SqlParameter> ) { if ( org.springframework.jdbc.object.SqlParameter . isInputValueProvided ( ) ) { if ( ! boolean ( ) && ( org.springframework.jdbc.object.SqlParameter . getSqlType ( ) == java.sql.Types . int || org.springframework.jdbc.object.SqlParameter . getSqlType ( ) == java.sql.Types . int ) ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } int ++ ; } } void ( ( java.lang.Object[] != null ? java.lang.Object[] . int : NUMBER ) , int ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.jdbc.object.InvalidDataAccessApiUsageException { void ( ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = ( java.util.Map<java.lang.String,> != null ? java.util.Map<java.lang.String,> : java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) ) ; int int = NUMBER ; for ( SqlParameter org.springframework.jdbc.object.SqlParameter : this . java.util.List<org.springframework.jdbc.object.SqlParameter> ) { if ( org.springframework.jdbc.object.SqlParameter . isInputValueProvided ( ) ) { if ( ! boolean ( ) && ( org.springframework.jdbc.object.SqlParameter . getSqlType ( ) == java.sql.Types . int || org.springframework.jdbc.object.SqlParameter . getSqlType ( ) == java.sql.Types . int ) ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } if ( org.springframework.jdbc.object.SqlParameter . getName ( ) != null && ! java.util.Map<java.lang.String,> . boolean ( org.springframework.jdbc.object.SqlParameter . getName ( ) ) ) { throw new InvalidDataAccessApiUsageException ( STRING + org.springframework.jdbc.object.SqlParameter . getName ( ) + STRING + java.util.Map<java.lang.String,> . java.util.Set<java.lang.String> ( ) ) ; } int ++ ; } } void ( java.util.Map<java.lang.String,> . int ( ) , int ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int , int int ) { if ( int < int ) { throw new InvalidDataAccessApiUsageException ( int + STRING + int + STRING + java.lang.Class<? extends org.springframework.jdbc.object.RdbmsOperation> ( ) . java.lang.String ( ) + STRING ) ; } if ( int > this . java.util.List<org.springframework.jdbc.object.SqlParameter> . size ( ) && ! boolean ( ) ) { throw new InvalidDataAccessApiUsageException ( int + STRING + int + STRING + java.lang.Class<? extends org.springframework.jdbc.object.RdbmsOperation> ( ) . java.lang.String ( ) + STRING ) ; } }  <METHOD_END>
<METHOD_START> protected abstract void void ( ) org.springframework.jdbc.object.InvalidDataAccessApiUsageException ;  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
