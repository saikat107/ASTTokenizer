<METHOD_START> @ Test public void void ( ) { GemfireCache org.springframework.data.gemfire.cache.GemfireCache = GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCache ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCache . getNativeCache ( ) ) . isEqualTo ( org.springframework.data.gemfire.cache.Region ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.cache.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.cache.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.cache.ExpectedException . expectMessage ( is ( equalTo ( STRING ) ) ) ; new GemfireCache ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.cache.Region . getName ( ) ) . thenReturn ( STRING ) ; assertThat ( GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . getName ( ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . clear ( ) ; verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . evict ( STRING ) ; verify ( org.springframework.data.gemfire.cache.Region , never ( ) ) . destroy ( anyObject ( ) ) ; verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . remove ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.cache.Region . get ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; Cache . Cache Cache.ValueWrapper = GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . get ( STRING ) ; assertThat ( Cache.ValueWrapper ) . isNotNull ( ) ; assertThat ( Cache.ValueWrapper . get ( ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . get ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.cache.Region . get ( anyString ( ) ) ) . thenReturn ( null ) ; assertThat ( GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . get ( STRING ) ) . isNull ( ) ; verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . get ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.cache.Region . get ( eq ( STRING ) ) ) . thenReturn ( NUMBER ) ; java.lang.Object java.lang.Object = GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . get ( STRING , java.lang.Integer .class ) ; assertThat ( java.lang.Object ) . isNotNull ( ) ; assertThat ( java.lang.Object ) . isInstanceOf ( java.lang.Integer .class ) ; assertThat ( java.lang.Object ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . get ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.cache.Region . get ( eq ( STRING ) ) ) . thenReturn ( null ) ; assertThat ( GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . get ( STRING , java.lang.Double .class ) ) . isNull ( ) ; verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . get ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.cache.Region . get ( eq ( STRING ) ) ) . thenReturn ( true ) ; assertThat ( GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . get ( STRING , ( java.lang.Class<java.lang.Boolean> < java.lang.Boolean > ) null ) ) . isTrue ( ) ; verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . get ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.cache.Region . get ( eq ( STRING ) ) ) . thenReturn ( NUMBER ) ; try { org.springframework.data.gemfire.cache.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.cache.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.cache.ExpectedException . expectMessage ( java.lang.String . java.lang.String ( STRING , java.lang.Boolean .class . java.lang.String ( ) ) ) ; GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . get ( STRING , java.lang.Boolean .class ) ; } finally { verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . get ( eq ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.cache.Region . get ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; assertThat ( GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . get ( STRING , java.util.concurrent.Callable ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . get ( eq ( STRING ) ) ; verifyZeroInteractions ( java.util.concurrent.Callable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.cache.Region . get ( eq ( STRING ) ) ) . thenReturn ( null ) . thenReturn ( STRING ) ; assertThat ( GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . get ( STRING , java.util.concurrent.Callable ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . get ( eq ( STRING ) ) ; verifyZeroInteractions ( java.util.concurrent.Callable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.data.gemfire.cache.Region . get ( anyString ( ) ) ) . thenReturn ( null ) ; when ( java.util.concurrent.Callable . java.lang.Object ( ) ) . thenReturn ( STRING ) ; assertThat ( GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . get ( STRING , java.util.concurrent.Callable ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . get ( eq ( STRING ) ) ; verify ( java.util.concurrent.Callable , times ( NUMBER ) ) . call ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.data.gemfire.cache.Region . get ( anyString ( ) ) ) . thenReturn ( null ) ; when ( java.util.concurrent.Callable . java.lang.Object ( ) ) . thenThrow ( new java.lang.IllegalStateException ( STRING ) ) ; try { org.springframework.data.gemfire.cache.ExpectedException . expect ( Cache . Cache .class ) ; org.springframework.data.gemfire.cache.ExpectedException . expectCause ( isA ( java.lang.IllegalStateException .class ) ) ; GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . get ( STRING , java.util.concurrent.Callable ) ; } finally { verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . get ( eq ( STRING ) ) ; verify ( java.util.concurrent.Callable , times ( NUMBER ) ) . call ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . put ( STRING , STRING ) ; verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . put ( eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . put ( STRING , null ) ; verify ( org.springframework.data.gemfire.cache.Region , never ( ) ) . put ( anyString ( ) , anyObject ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { when ( org.springframework.data.gemfire.cache.Region . putIfAbsent ( eq ( STRING ) , anyObject ( ) ) ) . thenReturn ( STRING ) ; Cache . Cache Cache.ValueWrapper = GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . putIfAbsent ( STRING , STRING ) ; assertThat ( Cache.ValueWrapper ) . isNotNull ( ) ; assertThat ( Cache.ValueWrapper . get ( ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . putIfAbsent ( eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { when ( org.springframework.data.gemfire.cache.Region . putIfAbsent ( eq ( STRING ) , anyObject ( ) ) ) . thenReturn ( null ) ; Cache . Cache Cache.ValueWrapper = GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region ) . putIfAbsent ( STRING , STRING ) ; assertThat ( Cache.ValueWrapper ) . isNull ( ) ; verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . putIfAbsent ( eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
