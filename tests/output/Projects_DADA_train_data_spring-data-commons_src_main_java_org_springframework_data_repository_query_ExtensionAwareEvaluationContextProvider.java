<METHOD_START> public void ( ) { this . java.util.List<? extends org.springframework.data.repository.query.EvaluationContextExtension> = null ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<? extends org.springframework.data.repository.query.EvaluationContextExtension> < ? extends EvaluationContextExtension > java.util.List<? extends org.springframework.data.repository.query.EvaluationContextExtension> ) { Assert . notNull ( java.util.List<> , STRING ) ; this . java.util.List<? extends org.springframework.data.repository.query.EvaluationContextExtension> = java.util.List<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.data.repository.query.ApplicationContext ) throws org.springframework.data.repository.query.BeansException { this . java.util.Optional<org.springframework.data.repository.query.ListableBeanFactory> = java.util.Optional . java.util.Optional ( org.springframework.data.repository.query.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T extends org.springframework.data.repository.query.Parameters<?,?> < ? , ? > > org.springframework.data.repository.query.StandardEvaluationContext org.springframework.data.repository.query.StandardEvaluationContext ( T T , java.lang.Object [] java.lang.Object[] ) { StandardEvaluationContext org.springframework.data.repository.query.StandardEvaluationContext = new StandardEvaluationContext ( ) ; java.util.Optional<org.springframework.data.repository.query.ListableBeanFactory> . ifPresent ( it -> ec . setBeanResolver ( new BeanFactoryResolver ( it ) ) ) ; org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.ExtensionAwarePropertyAccessor org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.ExtensionAwarePropertyAccessor = new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.ExtensionAwarePropertyAccessor ( java.util.List<? extends org.springframework.data.repository.query.EvaluationContextExtension> ( ) ) ; org.springframework.data.repository.query.StandardEvaluationContext . addPropertyAccessor ( org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.ExtensionAwarePropertyAccessor ) ; org.springframework.data.repository.query.StandardEvaluationContext . addPropertyAccessor ( new ReflectivePropertyAccessor ( ) ) ; org.springframework.data.repository.query.StandardEvaluationContext . addMethodResolver ( org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.ExtensionAwarePropertyAccessor ) ; org.springframework.data.repository.query.StandardEvaluationContext . setRootObject ( java.lang.Object[] ) ; org.springframework.data.repository.query.StandardEvaluationContext . setVariables ( java.util.Map<java.lang.String,java.lang.Object> ( T , java.lang.Object[] ) ) ; return org.springframework.data.repository.query.StandardEvaluationContext ; }  <METHOD_END>
<METHOD_START> private < T extends org.springframework.data.repository.query.Parameters<?,?> < ? , ? > > java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( T T , java.lang.Object [] java.lang.Object[] ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; T . stream ( ) . filter ( Parameter :: isSpecialParameter ) . forEach ( it -> variables . put ( StringUtils . uncapitalize ( it . getType ( ) . getSimpleName ( ) ) , arguments [ it . getIndex ( ) ] ) ) ; T . stream ( ) . filter ( Parameter :: isNamedParameter ) . forEach ( it -> variables . put ( it . getName ( ) . orElseThrow ( ( ) new IllegalStateException ( STRING ) ) , arguments [ it . getIndex ( ) ] ) ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private java.util.List<? extends org.springframework.data.repository.query.EvaluationContextExtension> < ? extends EvaluationContextExtension > java.util.List<? extends org.springframework.data.repository.query.EvaluationContextExtension> ( ) { if ( this . java.util.List<> != null ) { return this . java.util.List<> ; } this . java.util.List<? extends org.springframework.data.repository.query.EvaluationContextExtension> = java.util.Collections . java.util.List<java.lang.Object> ( ) ; java.util.Optional<org.springframework.data.repository.query.ListableBeanFactory> . ifPresent ( it -> this . extensions = new ArrayList <> ( it . getBeansOfType ( EvaluationContextExtension .class , true , false ) . values ( ) ) ) ; return java.util.List<> ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.repository.query.EvaluationContextExtensionInformation org.springframework.data.repository.query.EvaluationContextExtensionInformation ( EvaluationContextExtension org.springframework.data.repository.query.EvaluationContextExtension ) { java.lang.Class<? extends org.springframework.data.repository.query.EvaluationContextExtension> < ? extends EvaluationContextExtension > java.lang.Class<? extends org.springframework.data.repository.query.EvaluationContextExtension> = org.springframework.data.repository.query.EvaluationContextExtension . getClass ( ) ; return java.util.Map<java.lang.Class<?>,org.springframework.data.repository.query.EvaluationContextExtensionInformation> . computeIfAbsent ( java.lang.Class<> , type -> new EvaluationContextExtensionInformation ( extensionType ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> < org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter > java.util.List<org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> ( java.util.List<? extends org.springframework.data.repository.query.EvaluationContextExtension> < ? extends EvaluationContextExtension > java.util.List<? extends org.springframework.data.repository.query.EvaluationContextExtension> ) { return java.util.List<> . java.util.stream.Stream<> ( ) . java.util.stream.Stream<> ( AnnotationAwareOrderComparator . INSTANCE ) . map ( it -> new EvaluationContextExtensionAdapter ( it , getOrCreateInformation ( it ) ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<? extends org.springframework.data.repository.query.EvaluationContextExtension> < ? extends EvaluationContextExtension > java.util.List<? extends org.springframework.data.repository.query.EvaluationContextExtension> ) { Assert . notNull ( java.util.List<> , STRING ) ; this . java.util.List<org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> = java.util.List<org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> ( java.util.List<> ) ; this . java.util.Map<java.lang.String,org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> = java.util.List<org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> . java.util.stream.Stream<org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> ( ) . java.util.Map<java.lang.String,org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> ( java.util.stream.Collectors . java.util.stream.Collector<org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter,?,java.util.Map<java.lang.String,org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter>> ( org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter :: java.lang.String , org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter -> org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter ) ) ; java.util.Collections . void ( this . java.util.List<org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.data.repository.query.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.repository.query.AccessException { if ( java.lang.Object instanceof EvaluationContextExtension ) { return true ; } if ( java.util.Map<java.lang.String,org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> . boolean ( java.lang.String ) ) { return true ; } return java.util.List<org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> . java.util.stream.Stream<org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> ( ) . boolean ( org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter -> org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter . java.util.Map<java.lang.String,java.lang.Object> ( ) . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.query.TypedValue org.springframework.data.repository.query.TypedValue ( EvaluationContext org.springframework.data.repository.query.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.repository.query.AccessException { if ( java.lang.Object instanceof org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter ) { return org.springframework.data.repository.query.TypedValue ( ( ( org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter ) java.lang.Object ) , java.lang.String ) ; } if ( java.util.Map<java.lang.String,org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> . boolean ( java.lang.String ) ) { return new TypedValue ( java.util.Map<java.lang.String,org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> . org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter ( java.lang.String ) ) ; } return java.util.List<org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> . java.util.stream.Stream<org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> ( ) . java.util.stream.Stream<org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> ( org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter -> org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter . java.util.Map<java.lang.String,java.lang.Object> ( ) . boolean ( java.lang.String ) ) . java.util.stream.Stream<java.lang.Object> ( org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter -> org.springframework.data.repository.query.TypedValue ( org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter , java.lang.String ) ) . findFirst ( ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.query.MethodExecutor org.springframework.data.repository.query.MethodExecutor ( EvaluationContext org.springframework.data.repository.query.EvaluationContext , java.lang.Object java.lang.Object , final java.lang.String java.lang.String , java.util.List<org.springframework.data.repository.query.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.data.repository.query.TypeDescriptor> ) throws org.springframework.data.repository.query.AccessException { if ( java.lang.Object instanceof org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter ) { return java.util.Optional<org.springframework.data.repository.query.MethodExecutor> ( ( org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter ) java.lang.Object , java.lang.String , java.util.List<org.springframework.data.repository.query.TypeDescriptor> ) . orElse ( null ) ; } return java.util.List<org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> . java.util.stream.Stream<org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter> ( ) . java.util.stream.Stream<java.lang.Object> ( org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter -> Optionals . toStream ( java.util.Optional<org.springframework.data.repository.query.MethodExecutor> ( org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter , java.lang.String , java.util.List<org.springframework.data.repository.query.TypeDescriptor> ) ) ) . findFirst ( ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.data.repository.query.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.repository.query.AccessException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( EvaluationContext org.springframework.data.repository.query.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws org.springframework.data.repository.query.AccessException { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return null ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<org.springframework.data.repository.query.MethodExecutor> < MethodExecutor > java.util.Optional<org.springframework.data.repository.query.MethodExecutor> ( org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter , java.lang.String java.lang.String , java.util.List<org.springframework.data.repository.query.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.data.repository.query.TypeDescriptor> ) { return org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter . java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> ( ) . entrySet ( ) . stream ( ) . filter ( entry -> entry . getKey ( ) . equals ( name ) ) . findFirst ( ) . map ( java.util.Map.Entry :: getValue ) . map ( org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.FunctionMethodExecutor ::new ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.repository.query.TypedValue org.springframework.data.repository.query.TypedValue ( org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter , java.lang.String java.lang.String ) { java.lang.Object java.lang.Object = org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider.EvaluationContextExtensionAdapter . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( java.lang.String ) ; if ( ! ( java.lang.Object instanceof Function ) ) { return new TypedValue ( java.lang.Object ) ; } Function org.springframework.data.repository.query.Function = ( Function ) java.lang.Object ; try { return new TypedValue ( org.springframework.data.repository.query.Function . invoke ( new java.lang.Object [ NUMBER ] ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new SpelEvaluationException ( java.lang.Exception , SpelMessage . FUNCTION_REFERENCE_CANNOT_BE_INVOKED , java.lang.String , org.springframework.data.repository.query.Function . getDeclaringClass ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.query.TypedValue org.springframework.data.repository.query.TypedValue ( EvaluationContext org.springframework.data.repository.query.EvaluationContext , java.lang.Object java.lang.Object , java.lang.Object ... java.lang.Object[] ) throws org.springframework.data.repository.query.AccessException { try { return new TypedValue ( org.springframework.data.repository.query.Function . invoke ( java.lang.Object[] ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new SpelEvaluationException ( java.lang.Exception , SpelMessage . FUNCTION_REFERENCE_CANNOT_BE_INVOKED , org.springframework.data.repository.query.Function . getName ( ) , org.springframework.data.repository.query.Function . getDeclaringClass ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void ( EvaluationContextExtension org.springframework.data.repository.query.EvaluationContextExtension , EvaluationContextExtensionInformation org.springframework.data.repository.query.EvaluationContextExtensionInformation ) { Assert . notNull ( org.springframework.data.repository.query.EvaluationContextExtension , STRING ) ; Assert . notNull ( org.springframework.data.repository.query.EvaluationContextExtensionInformation , STRING ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = java.util.Optional . java.util.Optional ( org.springframework.data.repository.query.EvaluationContextExtension . getRootObject ( ) ) ; ExtensionTypeInformation org.springframework.data.repository.query.ExtensionTypeInformation = org.springframework.data.repository.query.EvaluationContextExtensionInformation . getExtensionTypeInformation ( ) ; RootObjectInformation org.springframework.data.repository.query.RootObjectInformation = org.springframework.data.repository.query.EvaluationContextExtensionInformation . getRootObjectInformation ( java.util.Optional<java.lang.Object> ) ; this . java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> = new java.util.HashMap <> ( ) ; this . java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> . putAll ( org.springframework.data.repository.query.ExtensionTypeInformation . getFunctions ( ) ) ; this . java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> . putAll ( org.springframework.data.repository.query.RootObjectInformation . getFunctions ( java.util.Optional<java.lang.Object> ) ) ; this . java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> . putAll ( org.springframework.data.repository.query.EvaluationContextExtension . getFunctions ( ) ) ; this . java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; this . java.util.Map<java.lang.String,java.lang.Object> . void ( org.springframework.data.repository.query.ExtensionTypeInformation . getProperties ( ) ) ; this . java.util.Map<java.lang.String,java.lang.Object> . void ( org.springframework.data.repository.query.RootObjectInformation . getProperties ( java.util.Optional<java.lang.Object> ) ) ; this . java.util.Map<java.lang.String,java.lang.Object> . void ( org.springframework.data.repository.query.EvaluationContextExtension . getProperties ( ) ) ; this . org.springframework.data.repository.query.EvaluationContextExtension = org.springframework.data.repository.query.EvaluationContextExtension ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return org.springframework.data.repository.query.EvaluationContextExtension . getExtensionId ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> < java.lang.String , Function > java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> ( ) { return this . java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
