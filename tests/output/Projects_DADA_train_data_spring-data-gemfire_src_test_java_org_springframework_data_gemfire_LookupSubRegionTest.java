<METHOD_START> protected void void ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , final Region org.springframework.data.gemfire.Region ) { assertNotNull ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.String ) , org.springframework.data.gemfire.Region ) ; assertEquals ( java.lang.String . java.lang.String ( STRING , java.lang.String , org.springframework.data.gemfire.Region . getName ( ) ) , java.lang.String , org.springframework.data.gemfire.Region . getName ( ) ) ; assertEquals ( java.lang.String . java.lang.String ( STRING , java.lang.String , org.springframework.data.gemfire.Region . getFullPath ( ) ) , java.lang.String , org.springframework.data.gemfire.Region . getFullPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region org.springframework.data.gemfire.Region = org.springframework.data.gemfire.ApplicationContext . getBean ( STRING , Region .class ) ; void ( STRING , STRING , org.springframework.data.gemfire.Region ) ; assertFalse ( org.springframework.data.gemfire.ApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.data.gemfire.ApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.data.gemfire.ApplicationContext . containsBean ( STRING ) ) ; Region org.springframework.data.gemfire.Region = org.springframework.data.gemfire.ApplicationContext . getBean ( STRING , Region .class ) ; void ( STRING , STRING , org.springframework.data.gemfire.Region ) ; assertFalse ( org.springframework.data.gemfire.ApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.data.gemfire.ApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.data.gemfire.ApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region org.springframework.data.gemfire.Region = org.springframework.data.gemfire.ApplicationContext . getBean ( STRING , Region .class ) ; void ( STRING , STRING , org.springframework.data.gemfire.Region ) ; assertFalse ( org.springframework.data.gemfire.ApplicationContext . containsBean ( STRING ) ) ; Region org.springframework.data.gemfire.Region = org.springframework.data.gemfire.ApplicationContext . getBean ( STRING , Region .class ) ; void ( STRING , STRING , org.springframework.data.gemfire.Region ) ; assertFalse ( org.springframework.data.gemfire.ApplicationContext . containsBean ( STRING ) ) ; Region org.springframework.data.gemfire.Region = org.springframework.data.gemfire.ApplicationContext . getBean ( STRING , Region .class ) ; void ( STRING , STRING , org.springframework.data.gemfire.Region ) ; assertFalse ( org.springframework.data.gemfire.ApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
