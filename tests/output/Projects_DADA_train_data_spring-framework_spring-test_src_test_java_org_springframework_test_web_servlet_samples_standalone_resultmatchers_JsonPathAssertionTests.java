<METHOD_START> @ Before public void void ( ) { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc = standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.resultmatchers.JsonPathAssertionTests.MusicController ( ) ) . defaultRequest ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . alwaysExpect ( status ( ) . isOk ( ) ) . alwaysExpect ( content ( ) . contentType ( STRING ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( jsonPath ( java.lang.String , STRING ) . exists ( ) ) . andExpect ( jsonPath ( java.lang.String , STRING ) . exists ( ) ) . andExpect ( jsonPath ( java.lang.String , STRING ) . exists ( ) ) . andExpect ( jsonPath ( java.lang.String , STRING ) . exists ( ) ) . andExpect ( jsonPath ( java.lang.String , STRING ) . exists ( ) ) . andExpect ( jsonPath ( java.lang.String , STRING ) . exists ( ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( jsonPath ( STRING ) . doesNotExist ( ) ) . andExpect ( jsonPath ( STRING ) . doesNotExist ( ) ) . andExpect ( jsonPath ( STRING ) . doesNotExist ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( equalTo ( STRING ) ) ) . andExpect ( jsonPath ( STRING ) . value ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( jsonPath ( STRING , startsWith ( STRING ) ) ) . andExpect ( jsonPath ( STRING , endsWith ( STRING ) ) ) . andExpect ( jsonPath ( STRING , containsString ( STRING ) ) ) . andExpect ( jsonPath ( STRING , isIn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( jsonPath ( java.lang.String , NUMBER ) . value ( startsWith ( STRING ) ) ) . andExpect ( jsonPath ( java.lang.String , NUMBER ) . value ( endsWith ( STRING ) ) ) . andExpect ( jsonPath ( java.lang.String , NUMBER ) . value ( containsString ( STRING ) ) ) . andExpect ( jsonPath ( java.lang.String , NUMBER ) . value ( isIn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public org.springframework.test.web.servlet.samples.standalone.resultmatchers.MultiValueMap<java.lang.String,org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> < java.lang.String , Person > org.springframework.test.web.servlet.samples.standalone.resultmatchers.MultiValueMap<java.lang.String,org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> ( ) { MultiValueMap < java.lang.String , Person > org.springframework.test.web.servlet.samples.standalone.resultmatchers.MultiValueMap<java.lang.String,org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> = new LinkedMultiValueMap <> ( ) ; org.springframework.test.web.servlet.samples.standalone.resultmatchers.MultiValueMap<java.lang.String,org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> . add ( STRING , new Person ( STRING ) ) ; org.springframework.test.web.servlet.samples.standalone.resultmatchers.MultiValueMap<java.lang.String,org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> . add ( STRING , new Person ( STRING ) ) ; org.springframework.test.web.servlet.samples.standalone.resultmatchers.MultiValueMap<java.lang.String,org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> . add ( STRING , new Person ( STRING ) ) ; org.springframework.test.web.servlet.samples.standalone.resultmatchers.MultiValueMap<java.lang.String,org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> . add ( STRING , new Person ( STRING ) ) ; org.springframework.test.web.servlet.samples.standalone.resultmatchers.MultiValueMap<java.lang.String,org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> . add ( STRING , new Person ( STRING ) ) ; org.springframework.test.web.servlet.samples.standalone.resultmatchers.MultiValueMap<java.lang.String,org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> . add ( STRING , new Person ( STRING ) ) ; return org.springframework.test.web.servlet.samples.standalone.resultmatchers.MultiValueMap<java.lang.String,org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> ; }  <METHOD_END>
