<METHOD_START> @ Before public void void ( ) { this . org.springframework.http.converter.protobuf.ExtensionRegistryInitializer = mock ( ExtensionRegistryInitializer .class ) ; this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter = new ProtobufHttpMessageConverter ( this . org.springframework.http.converter.protobuf.ExtensionRegistryInitializer ) ; this . org.springframework.http.converter.protobuf.Msg = Msg . newBuilder ( ) . setFoo ( STRING ) . setBlah ( SecondMsg . newBuilder ( ) . setBlah ( NUMBER ) . build ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { verify ( this . org.springframework.http.converter.protobuf.ExtensionRegistryInitializer , times ( NUMBER ) ) . initializeExtensionRegistry ( any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ProtobufHttpMessageConverter ( null ) ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . canRead ( Msg .class , null ) ) ; assertTrue ( this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . canRead ( Msg .class , ProtobufHttpMessageConverter . PROTOBUF ) ) ; assertTrue ( this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . canRead ( Msg .class , MediaType . APPLICATION_JSON ) ) ; assertTrue ( this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . canRead ( Msg .class , MediaType . APPLICATION_XML ) ) ; assertTrue ( this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . canRead ( Msg .class , MediaType . TEXT_PLAIN ) ) ; assertFalse ( this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . canRead ( Msg .class , MediaType . TEXT_HTML ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . canWrite ( Msg .class , null ) ) ; assertTrue ( this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . canWrite ( Msg .class , ProtobufHttpMessageConverter . PROTOBUF ) ) ; assertTrue ( this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . canWrite ( Msg .class , MediaType . APPLICATION_JSON ) ) ; assertTrue ( this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . canWrite ( Msg .class , MediaType . APPLICATION_XML ) ) ; assertTrue ( this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . canWrite ( Msg .class , MediaType . TEXT_PLAIN ) ) ; assertTrue ( this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . canWrite ( Msg .class , MediaType . TEXT_HTML ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { byte [] byte[] = this . org.springframework.http.converter.protobuf.Msg . toByteArray ( ) ; MockHttpInputMessage org.springframework.http.converter.protobuf.MockHttpInputMessage = new MockHttpInputMessage ( byte[] ) ; org.springframework.http.converter.protobuf.MockHttpInputMessage . getHeaders ( ) . setContentType ( ProtobufHttpMessageConverter . PROTOBUF ) ; Message org.springframework.http.converter.protobuf.Message = this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . read ( Msg .class , org.springframework.http.converter.protobuf.MockHttpInputMessage ) ; assertEquals ( this . org.springframework.http.converter.protobuf.Msg , org.springframework.http.converter.protobuf.Message ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { byte [] byte[] = this . org.springframework.http.converter.protobuf.Msg . toByteArray ( ) ; MockHttpInputMessage org.springframework.http.converter.protobuf.MockHttpInputMessage = new MockHttpInputMessage ( byte[] ) ; Message org.springframework.http.converter.protobuf.Message = this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . read ( Msg .class , org.springframework.http.converter.protobuf.MockHttpInputMessage ) ; assertEquals ( this . org.springframework.http.converter.protobuf.Msg , org.springframework.http.converter.protobuf.Message ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MockHttpOutputMessage org.springframework.http.converter.protobuf.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; MediaType org.springframework.http.converter.protobuf.MediaType = ProtobufHttpMessageConverter . PROTOBUF ; this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . write ( this . org.springframework.http.converter.protobuf.Msg , org.springframework.http.converter.protobuf.MediaType , org.springframework.http.converter.protobuf.MockHttpOutputMessage ) ; assertEquals ( org.springframework.http.converter.protobuf.MediaType , org.springframework.http.converter.protobuf.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; assertTrue ( org.springframework.http.converter.protobuf.MockHttpOutputMessage . getBodyAsBytes ( ) . length > NUMBER ) ; Message org.springframework.http.converter.protobuf.Message = Msg . parseFrom ( org.springframework.http.converter.protobuf.MockHttpOutputMessage . getBodyAsBytes ( ) ) ; assertEquals ( this . org.springframework.http.converter.protobuf.Msg , org.springframework.http.converter.protobuf.Message ) ; java.lang.String java.lang.String = org.springframework.http.converter.protobuf.MockHttpOutputMessage . getHeaders ( ) . getFirst ( ProtobufHttpMessageConverter . X_PROTOBUF_MESSAGE_HEADER ) ; assertEquals ( STRING , java.lang.String ) ; java.lang.String java.lang.String = org.springframework.http.converter.protobuf.MockHttpOutputMessage . getHeaders ( ) . getFirst ( ProtobufHttpMessageConverter . X_PROTOBUF_SCHEMA_HEADER ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( ProtobufHttpMessageConverter . PROTOBUF , this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . getDefaultContentType ( this . org.springframework.http.converter.protobuf.Msg ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.protobuf.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; MediaType org.springframework.http.converter.protobuf.MediaType = ProtobufHttpMessageConverter . PROTOBUF ; this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter . write ( this . org.springframework.http.converter.protobuf.Msg , org.springframework.http.converter.protobuf.MediaType , org.springframework.http.converter.protobuf.MockHttpOutputMessage ) ; assertEquals ( - NUMBER , org.springframework.http.converter.protobuf.MockHttpOutputMessage . getHeaders ( ) . getContentLength ( ) ) ; }  <METHOD_END>
