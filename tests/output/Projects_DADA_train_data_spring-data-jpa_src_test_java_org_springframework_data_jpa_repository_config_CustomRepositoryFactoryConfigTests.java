<METHOD_START> @ Before public void void ( ) { org.springframework.data.jpa.repository.config.DelegatingTransactionManager . resetCount ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.UnsupportedOperationException .class ) public void void ( ) { org.springframework.data.jpa.repository.config.UserCustomExtendedRepository . customMethod ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.config.UserCustomExtendedRepository . findAll ( ) ; assertFalse ( org.springframework.data.jpa.repository.config.DelegatingTransactionManager . getDefinition ( ) . isReadOnly ( ) ) ; assertThat ( org.springframework.data.jpa.repository.config.DelegatingTransactionManager . getDefinition ( ) . getTimeout ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.config.UserCustomExtendedRepository . findOne ( NUMBER ) ; assertFalse ( org.springframework.data.jpa.repository.config.DelegatingTransactionManager . getDefinition ( ) . isReadOnly ( ) ) ; assertThat ( org.springframework.data.jpa.repository.config.DelegatingTransactionManager . getDefinition ( ) . getTimeout ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
