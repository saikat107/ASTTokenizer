<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.amqp.config.MessageChannel = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.MessageChannel , STRING , java.util.List .class ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( org.springframework.integration.amqp.config.AmqpChannelParserTests.TestInterceptor .class , java.util.List<> . get ( NUMBER ) . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( java.lang.Integer . int , TestUtils . getPropertyValue ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.MessageChannel , STRING ) , STRING , java.lang.Integer .class ) . intValue ( ) ) ; org.springframework.integration.amqp.config.MessageChannel = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ApplicationContext . getBean ( IntegrationUtils . INTEGRATION_MESSAGE_BUILDER_FACTORY_BEAN_NAME ) ; assertSame ( java.lang.Object , TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.MessageChannel , STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.MessageChannel , STRING , java.lang.Boolean .class ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.MessageChannel , STRING , java.lang.Boolean .class ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.MessageChannel , STRING , java.lang.Boolean .class ) ) ; assertThat ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.MessageChannel , STRING ) , instanceOf ( SimpleMessageListenerContainer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.amqp.config.MessageChannel = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.MessageChannel , STRING ) , STRING , java.lang.Integer .class ) . intValue ( ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.MessageChannel , STRING , java.lang.Boolean .class ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.MessageChannel , STRING , java.lang.Boolean .class ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.MessageChannel , STRING , java.lang.Boolean .class ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.MessageChannel , STRING , java.lang.Boolean .class ) ) ; assertThat ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.MessageChannel , STRING ) , instanceOf ( DirectMessageListenerContainer .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.MessageChannel , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( this . org.springframework.integration.amqp.config.PollableAmqpChannel ) ; void ( this . org.springframework.integration.amqp.config.PointToPointSubscribableAmqpChannel ) ; void ( this . org.springframework.integration.amqp.config.PublishSubscribeAmqpChannel ) ; assertEquals ( MessageDeliveryMode . NON_PERSISTENT , TestUtils . getPropertyValue ( this . org.springframework.integration.amqp.config.PointToPointSubscribableAmqpChannel , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( this . org.springframework.integration.amqp.config.PointToPointSubscribableAmqpChannel , STRING , java.lang.Boolean .class ) ) ; assertNull ( TestUtils . getPropertyValue ( this . org.springframework.integration.amqp.config.PollableAmqpChannel , STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( this . org.springframework.integration.amqp.config.PollableAmqpChannel , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractAmqpChannel org.springframework.integration.amqp.config.AbstractAmqpChannel ) { assertThat ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AbstractAmqpChannel , STRING ) . toString ( ) , containsString ( STRING ) ) ; assertThat ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AbstractAmqpChannel , STRING ) . toString ( ) , containsString ( STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AbstractAmqpChannel , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
