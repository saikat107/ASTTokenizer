<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( java.lang.String java.lang.String , T T ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . getDefaultClassLoader ( ) . loadClass ( java.lang.String ) ; return ( T ) BeanUtils . instantiateClass ( java.lang.Class<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { return T ; } }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.reflect.Field java.lang.reflect.Field ) { return AnnotationUtils . getAnnotation ( java.lang.reflect.Field , java.lang.Class<> ) != null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.reflect.Field java.lang.reflect.Field ( java.lang.Class<?> < ? > java.lang.Class<?> , final FieldFilter org.springframework.data.util.FieldFilter ) { return java.lang.reflect.Field ( java.lang.Class<> , new org.springframework.data.util.ReflectionUtils.DescribedFieldFilter ( ) { public boolean boolean ( java.lang.reflect.Field java.lang.reflect.Field ) { return org.springframework.data.util.FieldFilter . matches ( java.lang.reflect.Field ) ; } public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , org.springframework.data.util.FieldFilter . toString ( ) ) ; } } , false ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.reflect.Field java.lang.reflect.Field ) { return org.springframework.data.util.FieldFilter . matches ( java.lang.reflect.Field ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , org.springframework.data.util.FieldFilter . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.reflect.Field java.lang.reflect.Field ( java.lang.Class<?> < ? > java.lang.Class<?> , org.springframework.data.util.ReflectionUtils.DescribedFieldFilter org.springframework.data.util.ReflectionUtils.DescribedFieldFilter ) { return java.lang.reflect.Field ( java.lang.Class<> , org.springframework.data.util.ReflectionUtils.DescribedFieldFilter , true ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.reflect.Field java.lang.reflect.Field ( java.lang.Class<?> < ? > java.lang.Class<?> , org.springframework.data.util.ReflectionUtils.DescribedFieldFilter org.springframework.data.util.ReflectionUtils.DescribedFieldFilter , boolean boolean ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( org.springframework.data.util.ReflectionUtils.DescribedFieldFilter , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<> ; java.lang.reflect.Field java.lang.reflect.Field = null ; while ( java.lang.Class<> != java.lang.Object .class ) { for ( java.lang.reflect.Field java.lang.reflect.Field : java.lang.Class<> . java.lang.reflect.Field[] ( ) ) { if ( ! org.springframework.data.util.ReflectionUtils.DescribedFieldFilter . matches ( java.lang.reflect.Field ) ) { continue; } if ( ! boolean ) { return java.lang.reflect.Field ; } if ( java.lang.reflect.Field != null && boolean ) { throw new java.lang.IllegalStateException ( org.springframework.data.util.ReflectionUtils.DescribedFieldFilter . java.lang.String ( ) ) ; } java.lang.reflect.Field = java.lang.reflect.Field ; } java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; } return java.lang.reflect.Field ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.reflect.Field java.lang.reflect.Field , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { org . springframework . util . ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; org . springframework . util . ReflectionUtils . setField ( java.lang.reflect.Field , java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public static java.util.Optional<java.lang.reflect.Constructor<?>> < java.lang.reflect.Constructor<?> < ? > > java.util.Optional<java.lang.reflect.Constructor<?>> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object ... java.lang.Object[] ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.lang.Object[] , STRING ) ; return java.util.Arrays . java.util.stream.Stream<java.lang.reflect.Constructor<?>> ( java.lang.Class<> . java.lang.reflect.Constructor<?>[] ( ) ) . java.util.stream.Stream<java.lang.reflect.Constructor<?>> ( java.lang.reflect.Constructor<?> -> boolean ( java.lang.reflect.Constructor<> . java.lang.Class<?>[] ( ) , java.lang.Object[] ) ) . java.util.Optional<java.lang.reflect.Constructor<?>> ( ) ; }  <METHOD_END>
<METHOD_START> public static java.util.stream.Stream<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.stream.Stream<java.lang.Class<?>> ( java.lang.reflect.Method java.lang.reflect.Method ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; java.util.stream.Stream<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.stream.Stream<java.lang.Class<?>> = java.util.stream.Stream . java.util.stream.Stream<java.lang.Class<?>> ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; java.util.stream.Stream<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.stream.Stream<java.lang.Class<?>> = java.util.Arrays . java.util.stream.Stream<java.lang.Class<?>> ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ; return java.util.stream.Stream . java.util.stream.Stream<java.lang.Class<?>> ( java.util.stream.Stream<java.lang.Class<?>> , java.util.stream.Stream<java.lang.Class<?>> ) ; }  <METHOD_END>
<METHOD_START> public static java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , ResolvableType ... org.springframework.data.util.ResolvableType[] ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.util.ResolvableType[] , STRING ) ; java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = java.util.Arrays . java.util.stream.IntStream ( org.springframework.data.util.ResolvableType[] ) . map ( ResolvableType :: getRawClass ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org . springframework . util . ReflectionUtils . findMethod ( java.lang.Class<> , java.lang.String , java.util.List<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.List<java.lang.Class<?>> . int ( ) ] ) ) ; return java.util.Optional . java.util.Optional<java.lang.reflect.Method> ( java.lang.reflect.Method ) . java.util.Optional<java.lang.reflect.Method> ( java.lang.reflect.Method -> java.util.stream.IntStream . java.util.stream.IntStream ( NUMBER , java.lang.reflect.Method . int ( ) ) . boolean ( int -> ResolvableType . forMethodParameter ( java.lang.reflect.Method , int ) . equals ( org.springframework.data.util.ResolvableType[] [ int ] ) ) ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.Object [] java.lang.Object[] ) { if ( java.lang.Class<?>[] . int != java.lang.Object[] . int ) { return false ; } int int = NUMBER ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { java.lang.Object java.lang.Object = java.lang.Object[] [ int ] ; if ( java.lang.Class<> . boolean ( ) && java.lang.Object == null ) { return false ; } if ( java.lang.Object != null && ! ClassUtils . isAssignableValue ( java.lang.Class<> , java.lang.Object ) ) { return false ; } int ++ ; } return true ; }  <METHOD_END>
