<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { super. create ( ) ; java.io.File = org.springframework.integration.file.TemporaryFolder . newFolder ( STRING ) ; org.springframework.integration.file.FileWritingMessageHandler = new FileWritingMessageHandler ( java.io.File ) ; org.springframework.integration.file.FileWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.FileWritingMessageHandler . afterPropertiesSet ( ) ; java.io.File = org.springframework.integration.file.TemporaryFolder . newFile ( STRING ) ; FileCopyUtils . copy ( java.lang.String . byte[] ( java.lang.String ) , new java.io.FileOutputStream ( java.io.File , false ) ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.Exception { org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; assertThat ( java.io.File . java.io.File[] ( ) [ NUMBER ] , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( new NullChannel ( ) ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertThat ( java.io.File . java.io.File[] ( ) [ NUMBER ] , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = NUMBER ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.lang.String ) . setHeader ( FileHeaders . SET_MODIFIED , long ) . build ( ) ; QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setCharset ( java.lang.String ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; org.springframework.integration.file.FileWritingMessageHandler . setPreserveTimestamp ( true ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> ) ; void ( org.springframework.integration.file.Message<> , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.lang.String ) . setHeader ( FileHeaders . FILENAME , STRING + java.io.File . java.lang.String + STRING ) . build ( ) ; QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setCharset ( java.lang.String ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> ) ; java.io.File java.io.File = ( java.io.File ) org.springframework.integration.file.Message<> . getPayload ( ) ; assertThat ( java.io.File . java.lang.String ( ) , containsString ( TestUtils . applySystemFileSeparator ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.lang.String ) . build ( ) ; QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; java.lang.String java.lang.String = java.lang.System . java.lang.String ( STRING ) ; org.springframework.integration.file.FileWritingMessageHandler . setCharset ( java.lang.String ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; org.springframework.integration.file.FileWritingMessageHandler . setAppendNewLine ( true ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> , java.lang.String + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.lang.String . byte[] ( java.lang.String ) ) . build ( ) ; QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.lang.String . byte[] ( java.lang.String ) ) . build ( ) ; QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; java.lang.String java.lang.String = java.lang.System . java.lang.String ( STRING ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; org.springframework.integration.file.FileWritingMessageHandler . setAppendNewLine ( true ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> , java.lang.String + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.io.File ) . build ( ) ; long long = NUMBER ; java.io.File . boolean ( long ) ; QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; org.springframework.integration.file.FileWritingMessageHandler . setPreserveTimestamp ( true ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> ) ; void ( org.springframework.integration.file.Message<> , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.io.File ) . build ( ) ; QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; org.springframework.integration.file.FileWritingMessageHandler . setAppendNewLine ( true ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> , java.lang.String + java.lang.System . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.InputStream java.io.InputStream = new java.io.FileInputStream ( java.io.File ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.io.InputStream ) . build ( ) ; QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.InputStream java.io.InputStream = new java.io.FileInputStream ( java.io.File ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.io.InputStream ) . build ( ) ; QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; org.springframework.integration.file.FileWritingMessageHandler . setAppendNewLine ( true ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> , java.lang.String + java.lang.System . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) { java.io.File java.io.File = new java.io.File ( STRING ) ; FileWritingMessageHandler org.springframework.integration.file.FileWritingMessageHandler = new FileWritingMessageHandler ( java.io.File ) ; org.springframework.integration.file.FileWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; try { org.springframework.integration.file.FileWritingMessageHandler . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException . java.lang.String ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.io.File ) . build ( ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> ) ; assertTrue ( java.io.File . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setDeleteSourceFiles ( true ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.io.File ) . build ( ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> ) ; assertFalse ( java.io.File . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setCharset ( java.lang.String ) ; org.springframework.integration.file.FileWritingMessageHandler . setDeleteSourceFiles ( true ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.lang.String ) . setHeader ( FileHeaders . ORIGINAL_FILE , java.io.File ) . build ( ) ; assertTrue ( java.io.File . boolean ( ) ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> ) ; assertFalse ( java.io.File . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setCharset ( java.lang.String ) ; org.springframework.integration.file.FileWritingMessageHandler . setDeleteSourceFiles ( true ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.lang.String ) . setHeader ( FileHeaders . ORIGINAL_FILE , java.io.File . java.lang.String ( ) ) . build ( ) ; assertTrue ( java.io.File . boolean ( ) ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> ) ; assertFalse ( java.io.File . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setCharset ( java.lang.String ) ; org.springframework.integration.file.FileWritingMessageHandler . setDeleteSourceFiles ( true ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.lang.String . byte[] ( java.lang.String ) ) . setHeader ( FileHeaders . ORIGINAL_FILE , java.io.File ) . build ( ) ; assertTrue ( java.io.File . boolean ( ) ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> ) ; assertFalse ( java.io.File . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setCharset ( java.lang.String ) ; org.springframework.integration.file.FileWritingMessageHandler . setDeleteSourceFiles ( true ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.lang.String . byte[] ( java.lang.String ) ) . setHeader ( FileHeaders . ORIGINAL_FILE , java.io.File . java.lang.String ( ) ) . build ( ) ; assertTrue ( java.io.File . boolean ( ) ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> ) ; assertFalse ( java.io.File . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setCharset ( java.lang.String ) ; org.springframework.integration.file.FileWritingMessageHandler . setDeleteSourceFiles ( true ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; java.io.InputStream java.io.InputStream = new java.io.FileInputStream ( java.io.File ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.io.InputStream ) . setHeader ( FileHeaders . ORIGINAL_FILE , java.io.File ) . build ( ) ; assertTrue ( java.io.File . boolean ( ) ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> ) ; assertFalse ( java.io.File . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setCharset ( java.lang.String ) ; org.springframework.integration.file.FileWritingMessageHandler . setDeleteSourceFiles ( true ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; java.io.InputStream java.io.InputStream = new java.io.FileInputStream ( java.io.File ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.io.InputStream ) . setHeader ( FileHeaders . ORIGINAL_FILE , java.io.File . java.lang.String ( ) ) . build ( ) ; assertTrue ( java.io.File . boolean ( ) ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> ) ; assertFalse ( java.io.File . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; org.springframework.integration.file.FileWritingMessageHandler . setFileNameGenerator ( message -> anyFilename ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; java.io.File java.io.File = ( java.io.File ) org.springframework.integration.file.QueueChannel . receive ( NUMBER ) . getPayload ( ) ; assertThat ( java.io.File . java.lang.String ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.lang.String ) . build ( ) ; QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; java.io.File java.io.File = org.springframework.integration.file.TemporaryFolder . newFile ( STRING + org.springframework.integration.file.Message<> . getHeaders ( ) . getId ( ) . toString ( ) + STRING ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , new java.io.FileOutputStream ( java.io.File ) ) ; org.springframework.integration.file.FileWritingMessageHandler . setCharset ( java.lang.String ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; org.springframework.integration.file.FileWritingMessageHandler . setFileExistsMode ( FileExistsMode . IGNORE ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.lang.String ) . build ( ) ; QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; java.io.File java.io.File = org.springframework.integration.file.TemporaryFolder . newFile ( STRING + org.springframework.integration.file.Message<> . getHeaders ( ) . getId ( ) . toString ( ) + STRING ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , new java.io.FileOutputStream ( java.io.File ) ) ; org.springframework.integration.file.FileWritingMessageHandler . setCharset ( java.lang.String ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; org.springframework.integration.file.FileWritingMessageHandler . setFileExistsMode ( FileExistsMode . IGNORE ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; java.io.File java.io.File = ( java.io.File ) org.springframework.integration.file.Message<> . getPayload ( ) ; assertNotSame ( java.io.File , java.io.File ) ; assertThat ( java.io.File . boolean ( ) , is ( false ) ) ; assertThat ( java.io.File . boolean ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.lang.String ) . build ( ) ; QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; java.io.File java.io.File = org.springframework.integration.file.TemporaryFolder . newFile ( STRING + org.springframework.integration.file.Message<> . getHeaders ( ) . getId ( ) . toString ( ) + STRING ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , new java.io.FileOutputStream ( java.io.File ) ) ; org.springframework.integration.file.FileWritingMessageHandler . setCharset ( java.lang.String ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; org.springframework.integration.file.FileWritingMessageHandler . setFileExistsMode ( FileExistsMode . IGNORE ) ; org.springframework.integration.file.FileWritingMessageHandler . setTemporaryFileSuffix ( STRING ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( org.springframework.integration.file.Message<> ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; java.io.File java.io.File = ( java.io.File ) org.springframework.integration.file.Message<> . getPayload ( ) ; assertNotSame ( java.io.File , java.io.File ) ; void ( org.springframework.integration.file.Message<> ) ; assertThat ( java.io.File . boolean ( ) , is ( true ) ) ; void ( java.io.File , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.integration.file.TemporaryFolder . newFolder ( ) ; FileWritingMessageHandler org.springframework.integration.file.FileWritingMessageHandler = new FileWritingMessageHandler ( java.io.File ) ; org.springframework.integration.file.FileWritingMessageHandler . setFileExistsMode ( FileExistsMode . APPEND_NO_FLUSH ) ; org.springframework.integration.file.FileWritingMessageHandler . setFileNameGenerator ( message -> STRING ) ; ThreadPoolTaskScheduler org.springframework.integration.file.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.file.ThreadPoolTaskScheduler . afterPropertiesSet ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setTaskScheduler ( org.springframework.integration.file.ThreadPoolTaskScheduler ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( new NullChannel ( ) ) ; org.springframework.integration.file.FileWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.FileWritingMessageHandler . setFlushInterval ( NUMBER ) ; org.springframework.integration.file.FileWritingMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.file.FileWritingMessageHandler . start ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( new GenericMessage < byte [] > ( STRING . byte[] ( ) ) ) ; assertThat ( java.io.File . long ( ) , greaterThanOrEqualTo ( NUMBER ) ) ; org.springframework.integration.file.FileWritingMessageHandler . stop ( ) ; assertThat ( java.io.File . long ( ) , equalTo ( NUMBER ) ) ; org.springframework.integration.file.FileWritingMessageHandler . setFlushInterval ( NUMBER ) ; org.springframework.integration.file.FileWritingMessageHandler . start ( ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( new GenericMessage < java.io.InputStream > ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ) ; int int = NUMBER ; while ( int ++ < NUMBER && java.io.File . long ( ) < NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } assertThat ( java.io.File . long ( ) , equalTo ( NUMBER ) ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( new GenericMessage < java.io.InputStream > ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ) ; org.springframework.integration.file.FileWritingMessageHandler . trigger ( new GenericMessage < java.lang.String > ( java.util.regex.Matcher . java.lang.String ( java.io.File . java.lang.String ( ) ) ) ) ; assertThat ( java.io.File . long ( ) , equalTo ( NUMBER ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.file.FileWritingMessageHandler , STRING , java.util.Map .class ) . size ( ) ) ; org.springframework.integration.file.FileWritingMessageHandler . setFlushInterval ( NUMBER ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setFlushPredicate ( ( fileAbsolutePath , firstWrite , lastWrite , triggerMessage ) -> { called . set ( true ) ; return true ; } ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( new GenericMessage < java.io.InputStream > ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ) ; org.springframework.integration.file.FileWritingMessageHandler . trigger ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertThat ( java.io.File . long ( ) , equalTo ( NUMBER ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( new GenericMessage < java.io.InputStream > ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ) ; java.util.concurrent.atomic.AtomicBoolean . void ( false ) ; org.springframework.integration.file.FileWritingMessageHandler . flushIfNeeded ( ( fileAbsolutePath , firstWrite , lastWrite ) -> { called . set ( true ) ; return true ; } ) ; assertThat ( java.io.File . long ( ) , equalTo ( NUMBER ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; org.springframework.integration.file.FileWritingMessageHandler . stop ( ) ; Log org.springframework.integration.file.Log = spy ( TestUtils . getPropertyValue ( org.springframework.integration.file.FileWritingMessageHandler , STRING , Log .class ) ) ; new DirectFieldAccessor ( org.springframework.integration.file.FileWritingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.file.Log ) ; when ( org.springframework.integration.file.Log . isDebugEnabled ( ) ) . thenReturn ( true ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; doAnswer ( i -> { flushes . incrementAndGet ( ) ; return null ; } ) . when ( org.springframework.integration.file.Log ) . debug ( startsWith ( STRING ) ) ; org.springframework.integration.file.FileWritingMessageHandler . setFlushInterval ( NUMBER ) ; org.springframework.integration.file.FileWritingMessageHandler . setFlushWhenIdle ( false ) ; org.springframework.integration.file.FileWritingMessageHandler . start ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.lang.Thread . void ( NUMBER ) ; } assertThat ( java.util.concurrent.atomic.AtomicInteger . int ( ) , greaterThanOrEqualTo ( NUMBER ) ) ; org.springframework.integration.file.FileWritingMessageHandler . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.integration.file.TemporaryFolder . newFolder ( ) ; ByteArrayOutputStream org.springframework.integration.file.ByteArrayOutputStream = new ByteArrayOutputStream ( ) ; final java.io.BufferedOutputStream java.io.BufferedOutputStream = spy ( new java.io.BufferedOutputStream ( org.springframework.integration.file.ByteArrayOutputStream ) ) ; FileWritingMessageHandler org.springframework.integration.file.FileWritingMessageHandler = new FileWritingMessageHandler ( java.io.File ) { @ java.lang.Override protected java.io.BufferedOutputStream java.io.BufferedOutputStream ( java.io.File java.io.File , boolean boolean ) { return java.io.BufferedOutputStream ; } } ; org.springframework.integration.file.FileWritingMessageHandler . setFileExistsMode ( FileExistsMode . APPEND_NO_FLUSH ) ; org.springframework.integration.file.FileWritingMessageHandler . setFileNameGenerator ( message -> STRING ) ; ThreadPoolTaskScheduler org.springframework.integration.file.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.file.ThreadPoolTaskScheduler . afterPropertiesSet ( ) ; org.springframework.integration.file.FileWritingMessageHandler . setTaskScheduler ( org.springframework.integration.file.ThreadPoolTaskScheduler ) ; org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( new NullChannel ( ) ) ; org.springframework.integration.file.FileWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.FileWritingMessageHandler . setFlushInterval ( NUMBER ) ; org.springframework.integration.file.FileWritingMessageHandler . setFlushWhenIdle ( false ) ; org.springframework.integration.file.FileWritingMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.file.FileWritingMessageHandler . start ( ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; willAnswer ( i -> { writing . set ( true ) ; Thread . sleep ( NUMBER ) ; writing . set ( false ) ; return null ; } ) . given ( java.io.BufferedOutputStream ) . write ( any ( byte [] .class ) , anyInt ( ) , anyInt ( ) ) ; willAnswer ( i -> { closeWhileWriting . compareAndSet ( false , writing . get ( ) ) ; return null ; } ) . given ( java.io.BufferedOutputStream ) . close ( ) ; org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( new GenericMessage <> ( STRING . byte[] ( ) ) ) ; verify ( java.io.BufferedOutputStream ) . write ( any ( byte [] .class ) , anyInt ( ) , anyInt ( ) ) ; assertFalse ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; org.springframework.integration.file.FileWritingMessageHandler . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.io.BufferedOutputStream java.io.BufferedOutputStream ( java.io.File java.io.File , boolean boolean ) { return java.io.BufferedOutputStream ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; this . org.springframework.integration.file.FileWritingMessageHandler . setPreserveTimestamp ( true ) ; this . org.springframework.integration.file.FileWritingMessageHandler . setFileExistsMode ( FileExistsMode . REPLACE_IF_MODIFIED ) ; this . org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setHeader ( FileHeaders . FILENAME , STRING ) . setHeader ( FileHeaders . SET_MODIFIED , NUMBER ) . build ( ) ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> , STRING ) ; void ( org.springframework.integration.file.Message<> , NUMBER ) ; this . org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setHeader ( FileHeaders . FILENAME , STRING ) . setHeader ( FileHeaders . SET_MODIFIED , NUMBER ) . build ( ) ) ; org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> , STRING ) ; void ( org.springframework.integration.file.Message<> , NUMBER ) ; this . org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setHeader ( FileHeaders . FILENAME , STRING ) . setHeader ( FileHeaders . SET_MODIFIED , NUMBER ) . build ( ) ) ; org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> , STRING ) ; void ( org.springframework.integration.file.Message<> , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.File java.io.File = new java.io.File ( this . org.springframework.integration.file.TemporaryFolder . newFolder ( ) , STRING ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , new java.io.FileOutputStream ( java.io.File ) ) ; java.io.File . boolean ( NUMBER ) ; QueueChannel org.springframework.integration.file.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.file.FileWritingMessageHandler . setOutputChannel ( org.springframework.integration.file.QueueChannel ) ; this . org.springframework.integration.file.FileWritingMessageHandler . setPreserveTimestamp ( true ) ; this . org.springframework.integration.file.FileWritingMessageHandler . setFileExistsMode ( FileExistsMode . REPLACE_IF_MODIFIED ) ; this . org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( MessageBuilder . withPayload ( java.io.File ) . build ( ) ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> , STRING ) ; void ( org.springframework.integration.file.Message<> , NUMBER ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , new java.io.FileOutputStream ( java.io.File ) ) ; java.io.File . boolean ( NUMBER ) ; this . org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( MessageBuilder . withPayload ( java.io.File ) . build ( ) ) ; org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> , STRING ) ; void ( org.springframework.integration.file.Message<> , NUMBER ) ; java.io.File . boolean ( NUMBER ) ; this . org.springframework.integration.file.FileWritingMessageHandler . handleMessage ( MessageBuilder . withPayload ( java.io.File ) . build ( ) ) ; org.springframework.integration.file.Message<?> = org.springframework.integration.file.QueueChannel . receive ( NUMBER ) ; void ( org.springframework.integration.file.Message<> , STRING ) ; void ( org.springframework.integration.file.Message<> , NUMBER ) ; }  <METHOD_END>
<METHOD_START> void void ( Message < ? > org.springframework.integration.file.Message<?> ) throws java.io.IOException { void ( org.springframework.integration.file.Message<> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> void void ( Message < ? > org.springframework.integration.file.Message<?> , java.lang.String java.lang.String ) throws java.io.IOException { void ( java.io.File ( org.springframework.integration.file.Message<> ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> void void ( Message < ? > org.springframework.integration.file.Message<?> , long long ) { assertThat ( java.io.File ( org.springframework.integration.file.Message<> ) . lastModified ( ) , is ( long ) ) ; }  <METHOD_END>
<METHOD_START> void void ( java.io.File java.io.File , java.lang.String java.lang.String ) throws java.io.IOException { assertNotSame ( java.io.File , java.io.File ) ; assertThat ( java.io.File . boolean ( ) , is ( true ) ) ; byte [] byte[] = FileCopyUtils . copyToByteArray ( java.io.File ) ; assertThat ( new java.lang.String ( byte[] , java.lang.String ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected java.io.File java.io.File ( Message < ? > org.springframework.integration.file.Message<?> ) { assertThat ( org.springframework.integration.file.Message<> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.integration.file.Message<> . getPayload ( ) , is ( instanceOf ( java.io.File .class ) ) ) ; java.io.File java.io.File = ( java.io.File ) org.springframework.integration.file.Message<> . getPayload ( ) ; return java.io.File ; }  <METHOD_END>
