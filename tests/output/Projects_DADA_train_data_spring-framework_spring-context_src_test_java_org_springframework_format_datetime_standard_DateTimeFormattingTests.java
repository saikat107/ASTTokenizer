<METHOD_START> @ Before public void void ( ) { DateTimeFormatterRegistrar org.springframework.format.datetime.standard.DateTimeFormatterRegistrar = new DateTimeFormatterRegistrar ( ) ; void ( org.springframework.format.datetime.standard.DateTimeFormatterRegistrar ) ; }  <METHOD_END>
<METHOD_START> private void void ( DateTimeFormatterRegistrar org.springframework.format.datetime.standard.DateTimeFormatterRegistrar ) { org.springframework.format.datetime.standard.FormattingConversionService = new FormattingConversionService ( ) ; DefaultConversionService . addDefaultConverters ( org.springframework.format.datetime.standard.FormattingConversionService ) ; org.springframework.format.datetime.standard.DateTimeFormatterRegistrar . registerFormatters ( org.springframework.format.datetime.standard.FormattingConversionService ) ; org.springframework.format.datetime.standard.DateTimeFormattingTests.DateTimeBean org.springframework.format.datetime.standard.DateTimeFormattingTests.DateTimeBean = new org.springframework.format.datetime.standard.DateTimeFormattingTests.DateTimeBean ( ) ; org.springframework.format.datetime.standard.DateTimeFormattingTests.DateTimeBean . java.util.List<org.springframework.format.datetime.standard.DateTimeFormattingTests.DateTimeBean> ( ) . boolean ( new org.springframework.format.datetime.standard.DateTimeFormattingTests.DateTimeBean ( ) ) ; org.springframework.format.datetime.standard.DataBinder = new DataBinder ( org.springframework.format.datetime.standard.DateTimeFormattingTests.DateTimeBean ) ; org.springframework.format.datetime.standard.DataBinder . setConversionService ( org.springframework.format.datetime.standard.FormattingConversionService ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; DateTimeContext org.springframework.format.datetime.standard.DateTimeContext = new DateTimeContext ( ) ; org.springframework.format.datetime.standard.DateTimeContext . setTimeZone ( java.time.ZoneId . java.time.ZoneId ( STRING ) ) ; DateTimeContextHolder . setDateTimeContext ( org.springframework.format.datetime.standard.DateTimeContext ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { LocaleContextHolder . setLocale ( null ) ; DateTimeContextHolder . setDateTimeContext ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateTimeFormatterRegistrar org.springframework.format.datetime.standard.DateTimeFormatterRegistrar = new DateTimeFormatterRegistrar ( ) ; org.springframework.format.datetime.standard.DateTimeFormatterRegistrar . setDateStyle ( java.time.format.FormatStyle . java.time.format.FormatStyle ) ; void ( org.springframework.format.datetime.standard.DateTimeFormatterRegistrar ) ; MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateTimeFormatterRegistrar org.springframework.format.datetime.standard.DateTimeFormatterRegistrar = new DateTimeFormatterRegistrar ( ) ; org.springframework.format.datetime.standard.DateTimeFormatterRegistrar . setDateFormatter ( java.time.format.DateTimeFormatter . java.time.format.DateTimeFormatter ( STRING ) ) ; void ( org.springframework.format.datetime.standard.DateTimeFormatterRegistrar ) ; MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , new java.lang.String [] { STRING } ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.format.datetime.standard.DataBinder . initDirectFieldAccess ( ) ; MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.format.datetime.standard.DataBinder . initDirectFieldAccess ( ) ; MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , new java.util.GregorianCalendar ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateTimeFormatterRegistrar org.springframework.format.datetime.standard.DateTimeFormatterRegistrar = new DateTimeFormatterRegistrar ( ) ; org.springframework.format.datetime.standard.DateTimeFormatterRegistrar . setTimeStyle ( java.time.format.FormatStyle . java.time.format.FormatStyle ) ; void ( org.springframework.format.datetime.standard.DateTimeFormatterRegistrar ) ; MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateTimeFormatterRegistrar org.springframework.format.datetime.standard.DateTimeFormatterRegistrar = new DateTimeFormatterRegistrar ( ) ; org.springframework.format.datetime.standard.DateTimeFormatterRegistrar . setTimeFormatter ( java.time.format.DateTimeFormatter . java.time.format.DateTimeFormatter ( STRING ) ) ; void ( org.springframework.format.datetime.standard.DateTimeFormatterRegistrar ) ; MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , new java.util.GregorianCalendar ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , java.time.LocalDateTime . java.time.LocalDateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; java.lang.String java.lang.String = org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , java.time.LocalDateTime . java.time.LocalDateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; java.lang.String java.lang.String = org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , new java.util.GregorianCalendar ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; java.lang.String java.lang.String = org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateTimeFormatterRegistrar org.springframework.format.datetime.standard.DateTimeFormatterRegistrar = new DateTimeFormatterRegistrar ( ) ; org.springframework.format.datetime.standard.DateTimeFormatterRegistrar . setDateTimeStyle ( java.time.format.FormatStyle . java.time.format.FormatStyle ) ; void ( org.springframework.format.datetime.standard.DateTimeFormatterRegistrar ) ; MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , java.time.LocalDateTime . java.time.LocalDateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; java.lang.String java.lang.String = org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertTrue ( org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) . startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , new java.util.Date ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertTrue ( org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) . startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertTrue ( org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertTrue ( org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertTrue ( org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.standard.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.standard.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.standard.DataBinder . bind ( org.springframework.format.datetime.standard.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertTrue ( org.springframework.format.datetime.standard.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public java.time.LocalDate java.time.LocalDate ( ) { return java.time.LocalDate ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.LocalDate java.time.LocalDate ) { this . java.time.LocalDate = java.time.LocalDate ; }  <METHOD_END>
<METHOD_START> public java.time.LocalDate java.time.LocalDate ( ) { return java.time.LocalDate ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.LocalDate java.time.LocalDate ) { this . java.time.LocalDate = java.time.LocalDate ; }  <METHOD_END>
<METHOD_START> public java.time.LocalTime java.time.LocalTime ( ) { return java.time.LocalTime ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.LocalTime java.time.LocalTime ) { this . java.time.LocalTime = java.time.LocalTime ; }  <METHOD_END>
<METHOD_START> public java.time.LocalTime java.time.LocalTime ( ) { return java.time.LocalTime ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.LocalTime java.time.LocalTime ) { this . java.time.LocalTime = java.time.LocalTime ; }  <METHOD_END>
<METHOD_START> public java.time.LocalDateTime java.time.LocalDateTime ( ) { return java.time.LocalDateTime ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.LocalDateTime java.time.LocalDateTime ) { this . java.time.LocalDateTime = java.time.LocalDateTime ; }  <METHOD_END>
<METHOD_START> public java.time.LocalDateTime java.time.LocalDateTime ( ) { return java.time.LocalDateTime ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.LocalDateTime java.time.LocalDateTime ) { this . java.time.LocalDateTime = java.time.LocalDateTime ; }  <METHOD_END>
<METHOD_START> public java.time.LocalDateTime java.time.LocalDateTime ( ) { return java.time.LocalDateTime ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.LocalDateTime java.time.LocalDateTime ) { this . java.time.LocalDateTime = java.time.LocalDateTime ; }  <METHOD_END>
<METHOD_START> public java.time.LocalDate java.time.LocalDate ( ) { return java.time.LocalDate ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.LocalDate java.time.LocalDate ) { this . java.time.LocalDate = java.time.LocalDate ; }  <METHOD_END>
<METHOD_START> public java.time.LocalTime java.time.LocalTime ( ) { return java.time.LocalTime ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.LocalTime java.time.LocalTime ) { this . java.time.LocalTime = java.time.LocalTime ; }  <METHOD_END>
<METHOD_START> public java.time.LocalDateTime java.time.LocalDateTime ( ) { return java.time.LocalDateTime ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.LocalDateTime java.time.LocalDateTime ) { this . java.time.LocalDateTime = java.time.LocalDateTime ; }  <METHOD_END>
<METHOD_START> public java.time.Instant java.time.Instant ( ) { return java.time.Instant ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.Instant java.time.Instant ) { this . java.time.Instant = java.time.Instant ; }  <METHOD_END>
<METHOD_START> public java.time.Period java.time.Period ( ) { return java.time.Period ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.Period java.time.Period ) { this . java.time.Period = java.time.Period ; }  <METHOD_END>
<METHOD_START> public java.time.Duration java.time.Duration ( ) { return java.time.Duration ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.Duration java.time.Duration ) { this . java.time.Duration = java.time.Duration ; }  <METHOD_END>
<METHOD_START> public java.time.YearMonth java.time.YearMonth ( ) { return java.time.YearMonth ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.YearMonth java.time.YearMonth ) { this . java.time.YearMonth = java.time.YearMonth ; }  <METHOD_END>
<METHOD_START> public java.time.MonthDay java.time.MonthDay ( ) { return java.time.MonthDay ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.MonthDay java.time.MonthDay ) { this . java.time.MonthDay = java.time.MonthDay ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.format.datetime.standard.DateTimeFormattingTests.DateTimeBean> < org.springframework.format.datetime.standard.DateTimeFormattingTests.DateTimeBean > java.util.List<org.springframework.format.datetime.standard.DateTimeFormattingTests.DateTimeBean> ( ) { return java.util.List<org.springframework.format.datetime.standard.DateTimeFormattingTests.DateTimeBean> ; }  <METHOD_END>
