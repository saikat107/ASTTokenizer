<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + STRING ; java.net.URL java.net.URL = new java.net.URL ( STRING + STRING ) ; assertThat ( this . org.springframework.boot.devtools.restart.server.DefaultSourceFolderUrlFilter . isMatch ( java.lang.String , java.net.URL ) ) . isTrue ( ) ; java.net.URL java.net.URL = new java.net.URL ( STRING + STRING + STRING ) ; assertThat ( this . org.springframework.boot.devtools.restart.server.DefaultSourceFolderUrlFilter . isMatch ( java.lang.String , java.net.URL ) ) . isFalse ( ) ; java.net.URL java.net.URL = new java.net.URL ( STRING + STRING ) ; assertThat ( this . org.springframework.boot.devtools.restart.server.DefaultSourceFolderUrlFilter . isMatch ( java.lang.String , java.net.URL ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.net.MalformedURLException { void ( java.lang.String , STRING , true ) ; void ( java.lang.String , STRING , false ) ; void ( java.lang.String , STRING , false ) ; void ( java.lang.String , STRING , false ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , boolean boolean )			throws java.net.MalformedURLException { java.lang.String java.lang.String = java.lang.String + java.lang.String ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { for ( java.net.URL java.net.URL : java.util.List<java.net.URL> ( java.lang.String + java.lang.String ) ) { boolean boolean = this . org.springframework.boot.devtools.restart.server.DefaultSourceFolderUrlFilter . isMatch ( java.lang.String , java.net.URL ) ; assertThat ( boolean ) . as ( java.net.URL + STRING + java.lang.String ) . isEqualTo ( boolean ) ; } } }  <METHOD_END>
<METHOD_START> private java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> ( java.lang.String java.lang.String ) throws java.net.MalformedURLException { java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> = new java.util.ArrayList<java.net.URL> <> ( ) ; java.util.List<java.net.URL> . boolean ( new java.net.URL ( STRING + java.lang.String ) ) ; java.util.List<java.net.URL> . boolean ( new java.net.URL ( STRING + java.lang.String + STRING ) ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.util.List<java.net.URL> . boolean ( new java.net.URL ( STRING + java.lang.String + STRING + java.lang.String ) ) ; java.util.List<java.net.URL> . boolean ( new java.net.URL ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ) ; } return java.util.List<java.net.URL> ; }  <METHOD_END>
