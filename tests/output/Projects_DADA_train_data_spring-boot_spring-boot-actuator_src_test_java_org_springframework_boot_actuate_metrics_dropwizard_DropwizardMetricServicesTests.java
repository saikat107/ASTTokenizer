<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices = new DropwizardMetricServices ( this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry , this . org.springframework.boot.actuate.metrics.dropwizard.ReservoirFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . increment ( STRING ) ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . increment ( STRING ) ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . increment ( STRING ) ; assertThat ( this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . counter ( STRING ) . getCount ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . increment ( STRING ) ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . increment ( STRING ) ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . increment ( STRING ) ; assertThat ( this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . meter ( STRING ) . getCount ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . increment ( STRING ) ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . increment ( STRING ) ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . increment ( STRING ) ; assertThat ( this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . counter ( STRING ) . getCount ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . submit ( STRING , NUMBER ) ; @ java.lang.SuppressWarnings ( STRING ) Gauge < java.lang.Double > org.springframework.boot.actuate.metrics.dropwizard.Gauge<java.lang.Double> = ( Gauge < java.lang.Double > ) this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . getMetrics ( ) . get ( STRING ) ; assertThat ( org.springframework.boot.actuate.metrics.dropwizard.Gauge<java.lang.Double> . getValue ( ) ) . isEqualTo ( new java.lang.Double ( NUMBER ) ) ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . submit ( STRING , NUMBER ) ; assertThat ( org.springframework.boot.actuate.metrics.dropwizard.Gauge<java.lang.Double> . getValue ( ) ) . isEqualTo ( new java.lang.Double ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . submit ( STRING , NUMBER ) ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . submit ( STRING , NUMBER ) ; assertThat ( this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . timer ( STRING ) . getCount ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( this . org.springframework.boot.actuate.metrics.dropwizard.ReservoirFactory . getReservoir ( anyString ( ) ) ) . willReturn ( new UniformReservoir ( ) ) ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . submit ( STRING , NUMBER ) ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . submit ( STRING , NUMBER ) ; assertThat ( this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . timer ( STRING ) . getCount ( ) ) . isEqualTo ( NUMBER ) ; Timer org.springframework.boot.actuate.metrics.dropwizard.Timer = ( Timer ) this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . getMetrics ( ) . get ( STRING ) ; Histogram org.springframework.boot.actuate.metrics.dropwizard.Histogram = ( Histogram ) ReflectionTestUtils . getField ( org.springframework.boot.actuate.metrics.dropwizard.Timer , STRING ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.actuate.metrics.dropwizard.Histogram , STRING ) . getClass ( ) . equals ( UniformReservoir .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . submit ( STRING , NUMBER ) ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . submit ( STRING , NUMBER ) ; assertThat ( this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . histogram ( STRING ) . getCount ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( this . org.springframework.boot.actuate.metrics.dropwizard.ReservoirFactory . getReservoir ( anyString ( ) ) ) . willReturn ( new UniformReservoir ( ) ) ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . submit ( STRING , NUMBER ) ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . submit ( STRING , NUMBER ) ; assertThat ( this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . histogram ( STRING ) . getCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( ReflectionTestUtils . getField ( this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . getMetrics ( ) . get ( STRING ) , STRING ) . getClass ( ) . equals ( UniformReservoir .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServicesTests.WriterThread> < org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServicesTests.WriterThread > java.util.List<org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServicesTests.WriterThread> = new java.util.ArrayList<org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServicesTests.WriterThread> <> ( ) ; java.lang.ThreadGroup java.lang.ThreadGroup = new java.lang.ThreadGroup ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServicesTests.WriterThread org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServicesTests.WriterThread = new org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServicesTests.WriterThread ( java.lang.ThreadGroup , int , this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices ) ; java.util.List<org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServicesTests.WriterThread> . boolean ( org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServicesTests.WriterThread ) ; org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServicesTests.WriterThread . void ( ) ; } while ( java.lang.ThreadGroup . int ( ) > NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } for ( org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServicesTests.WriterThread org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServicesTests.WriterThread : java.util.List<org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServicesTests.WriterThread> ) { assertThat ( org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServicesTests.WriterThread . boolean ( ) ) . as ( STRING ) . isFalse ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.ThreadGroup java.lang.ThreadGroup , int int , DropwizardMetricServices org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices ) { super( java.lang.ThreadGroup , STRING + int ); this . int = int ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices = org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { try { this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . submit ( STRING , this . int ) ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . submit ( STRING , this . int ) ; this . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices . submit ( STRING , this . int ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { this . boolean = true ; throw java.lang.IllegalArgumentException ; } } }  <METHOD_END>
