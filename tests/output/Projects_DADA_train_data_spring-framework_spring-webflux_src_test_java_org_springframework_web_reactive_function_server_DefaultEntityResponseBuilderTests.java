<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; EntityResponse < java.lang.String > org.springframework.web.reactive.function.server.EntityResponse<java.lang.String> = EntityResponse . fromObject ( java.lang.String ) . build ( ) . block ( ) ; assertSame ( java.lang.String , org.springframework.web.reactive.function.server.EntityResponse<java.lang.String> . entity ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Flux < java.lang.String > org.springframework.web.reactive.function.server.Flux<java.lang.String> = Flux . just ( STRING , STRING ) ; EntityResponse < Flux < java.lang.String > > org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Flux<java.lang.String>> = EntityResponse . fromPublisher ( org.springframework.web.reactive.function.server.Flux<java.lang.String> , java.lang.String .class ) . build ( ) . block ( ) ; assertSame ( org.springframework.web.reactive.function.server.Flux<java.lang.String> , org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Flux<java.lang.String>> . entity ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Flux < java.lang.String > org.springframework.web.reactive.function.server.Flux<java.lang.String> = Flux . just ( STRING , STRING ) ; ResolvableType org.springframework.web.reactive.function.server.ResolvableType = ResolvableType . forClass ( java.lang.String .class ) ; EntityResponse < Flux < java.lang.String > > org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Flux<java.lang.String>> = EntityResponse . fromPublisher ( org.springframework.web.reactive.function.server.Flux<java.lang.String> , org.springframework.web.reactive.function.server.ResolvableType ) . build ( ) . block ( ) ; assertSame ( org.springframework.web.reactive.function.server.Flux<java.lang.String> , org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Flux<java.lang.String>> . entity ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Mono < EntityResponse < java.lang.String > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> = EntityResponse . fromObject ( java.lang.String ) . status ( HttpStatus . CREATED ) . build ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> ) . expectNextMatches ( response -> HttpStatus . CREATED . equals ( response . statusCode ( ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Mono < EntityResponse < java.lang.String > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> = EntityResponse . fromObject ( java.lang.String ) . allow ( HttpMethod . GET ) . build ( ) ; java.util.Set<org.springframework.web.reactive.function.server.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.reactive.function.server.HttpMethod> = java.util.EnumSet . java.util.EnumSet ( HttpMethod . GET ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> ) . expectNextMatches ( response -> expected . equals ( response . headers ( ) . getAllow ( ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Mono < EntityResponse < java.lang.String > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> = EntityResponse . fromObject ( java.lang.String ) . contentLength ( NUMBER ) . build ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> ) . expectNextMatches ( response -> Long . valueOf ( NUMBER ) . equals ( response . headers ( ) . getContentLength ( ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Mono < EntityResponse < java.lang.String > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> = EntityResponse . fromObject ( java.lang.String ) . contentType ( MediaType . APPLICATION_JSON ) . build ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> ) . expectNextMatches ( response -> MediaType . APPLICATION_JSON . equals ( response . headers ( ) . getContentType ( ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Mono < EntityResponse < java.lang.String > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> = EntityResponse . fromObject ( java.lang.String ) . eTag ( STRING ) . build ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> ) . expectNextMatches ( response -> STRING . equals ( response . headers ( ) . getETag ( ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.time.ZonedDateTime java.time.ZonedDateTime = java.time.ZonedDateTime . java.time.ZonedDateTime ( ) ; java.lang.String java.lang.String = STRING ; Mono < EntityResponse < java.lang.String > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> = EntityResponse . fromObject ( java.lang.String ) . lastModified ( java.time.ZonedDateTime ) . build ( ) ; java.lang.Long java.lang.Long = java.time.ZonedDateTime . java.time.Instant ( ) . long ( ) / NUMBER ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> ) . expectNextMatches ( response -> expected . equals ( response . headers ( ) . getLastModified ( ) / NUMBER ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Mono < EntityResponse < java.lang.String > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> = EntityResponse . fromObject ( java.lang.String ) . cacheControl ( CacheControl . noCache ( ) ) . build ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> ) . expectNextMatches ( response -> STRING . equals ( response . headers ( ) . getCacheControl ( ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Mono < EntityResponse < java.lang.String > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> = EntityResponse . fromObject ( java.lang.String ) . varyBy ( STRING ) . build ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> ) . expectNextMatches ( response -> expected . equals ( response . headers ( ) . getVary ( ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders = new HttpHeaders ( ) ; Mono < EntityResponse < java.lang.String > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> = EntityResponse . fromObject ( java.lang.String ) . headers ( org.springframework.web.reactive.function.server.HttpHeaders ) . build ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<java.lang.String>> ) . expectNextMatches ( response -> headers . equals ( response . headers ( ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Publisher < java.lang.String > org.springframework.web.reactive.function.server.Publisher<java.lang.String> = Mono . just ( java.lang.String ) ; java.util.function.BiFunction<org.springframework.web.reactive.function.server.ServerHttpResponse,BodyInserter.Context,org.springframework.web.reactive.function.server.Mono<java.lang.Void>> < ServerHttpResponse , BodyInserter . BodyInserter , Mono < java.lang.Void > > java.util.function.BiFunction<org.springframework.web.reactive.function.server.ServerHttpResponse,BodyInserter.Context,org.springframework.web.reactive.function.server.Mono<java.lang.Void>> = ( org.springframework.web.reactive.function.server.ServerHttpResponse , BodyInserter.Context ) -> { byte [] byte[] = java.lang.String . byte[] ( java.nio.charset.Charset ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; DataBuffer org.springframework.web.reactive.function.server.DataBuffer = new DefaultDataBufferFactory ( ) . wrap ( java.nio.ByteBuffer ) ; return org.springframework.web.reactive.function.server.ServerHttpResponse . writeWith ( Mono . just ( org.springframework.web.reactive.function.server.DataBuffer ) ) ; } ; Mono < EntityResponse < Publisher < java.lang.String > > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Publisher<java.lang.String>>> = EntityResponse . fromPublisher ( org.springframework.web.reactive.function.server.Publisher<java.lang.String> , java.lang.String .class ) . build ( ) ; MockServerWebExchange org.springframework.web.reactive.function.server.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; HandlerStrategies org.springframework.web.reactive.function.server.HandlerStrategies = HandlerStrategies . empty ( ) . messageWriter ( new EncoderHttpMessageWriter <> ( CharSequenceEncoder . allMimeTypes ( ) ) ) . build ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Publisher<java.lang.String>>> ) . consumeNextWith ( response -> { StepVerifier . create ( response . entity ( ) ) . expectNext ( body ) . expectComplete ( ) . verify ( ) ; response . writeTo ( exchange , strategies ) ; } ) . expectComplete ( ) . verify ( ) ; assertNotNull ( org.springframework.web.reactive.function.server.MockServerWebExchange . getResponse ( ) . getBody ( ) ) ; }  <METHOD_END>
