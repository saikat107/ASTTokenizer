<METHOD_START> @ Before public void void ( ) org.springframework.web.servlet.ServletException { MockServletConfig org.springframework.web.servlet.MockServletConfig = new MockServletConfig ( org.springframework.web.servlet.ServletContext ( ) , STRING ) ; org.springframework.web.servlet.MockServletConfig . addInitParameter ( STRING , STRING ) ; org.springframework.web.servlet.MockServletConfig . addInitParameter ( STRING , STRING ) ; org.springframework.web.servlet.MockServletConfig . addInitParameter ( STRING , STRING ) ; org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . setContextClass ( SimpleWebApplicationContext .class ) ; org.springframework.web.servlet.DispatcherServlet . init ( org.springframework.web.servlet.MockServletConfig ) ; org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . setContextClass ( ComplexWebApplicationContext .class ) ; org.springframework.web.servlet.DispatcherServlet . setNamespace ( STRING ) ; org.springframework.web.servlet.DispatcherServlet . addRequiredProperty ( STRING ) ; org.springframework.web.servlet.DispatcherServlet . init ( org.springframework.web.servlet.MockServletConfig ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.ServletContext org.springframework.web.servlet.ServletContext ( ) { return org.springframework.web.servlet.MockServletConfig . getServletContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; assertNull ( org.springframework.web.servlet.DispatcherServlet . getServletConfig ( ) ) ; assertNull ( org.springframework.web.servlet.DispatcherServlet . getServletName ( ) ) ; assertNull ( org.springframework.web.servlet.DispatcherServlet . getServletContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , ( STRING + FrameworkServlet . DEFAULT_NAMESPACE_SUFFIX ) . equals ( org.springframework.web.servlet.DispatcherServlet . getNamespace ( ) ) ) ; assertTrue ( STRING , ( FrameworkServlet . SERVLET_CONTEXT_PREFIX + STRING ) . equals ( org.springframework.web.servlet.DispatcherServlet . getServletContextAttributeName ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.DispatcherServlet . getWebApplicationContext ( ) == org.springframework.web.servlet.ServletContext ( ) . getAttribute ( FrameworkServlet . SERVLET_CONTEXT_PREFIX + STRING ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.DispatcherServlet . getNamespace ( ) ) ) ; assertTrue ( STRING , ( FrameworkServlet . SERVLET_CONTEXT_PREFIX + STRING ) . equals ( org.springframework.web.servlet.DispatcherServlet . getServletContextAttributeName ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.ServletContext ( ) . getAttribute ( FrameworkServlet . SERVLET_CONTEXT_PREFIX + STRING ) == null ) ; org.springframework.web.servlet.DispatcherServlet . destroy ( ) ; org.springframework.web.servlet.DispatcherServlet . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) == null ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getStatus ( ) == HttpServletResponse . SC_NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; ComplexWebApplicationContext . ComplexWebApplicationContext ComplexWebApplicationContext.TestApplicationListener = ( ComplexWebApplicationContext . ComplexWebApplicationContext ) org.springframework.web.servlet.DispatcherServlet . getWebApplicationContext ( ) . getBean ( STRING ) ; assertEquals ( NUMBER , listener . counter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.DispatcherServlet . setPublishEvents ( false ) ; MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; ComplexWebApplicationContext . ComplexWebApplicationContext ComplexWebApplicationContext.TestApplicationListener = ( ComplexWebApplicationContext . ComplexWebApplicationContext ) org.springframework.web.servlet.DispatcherServlet . getWebApplicationContext ( ) . getBean ( STRING ) ; assertEquals ( NUMBER , listener . counter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) == null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) == null ) ; assertEquals ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) . getClass ( ) . equals ( ServletException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) == null ) ; assertTrue ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) != null ) ; assertTrue ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) == null ) ; assertTrue ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) == null ) ; assertTrue ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) != null ) ; assertTrue ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) == null ) ; assertTrue ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) == null ) ; assertTrue ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) != null ) ; assertTrue ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) != null ) ; assertTrue ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) != null ) ; assertEquals ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ComplexWebApplicationContext . ComplexWebApplicationContext ComplexWebApplicationContext.MockMultipartResolver = ( ComplexWebApplicationContext . ComplexWebApplicationContext ) org.springframework.web.servlet.DispatcherServlet . getWebApplicationContext ( ) . getBean ( STRING ) ; MultipartHttpServletRequest org.springframework.web.servlet.MultipartHttpServletRequest = ComplexWebApplicationContext.MockMultipartResolver . resolveMultipart ( org.springframework.web.servlet.MockHttpServletRequest ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MultipartHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; ComplexWebApplicationContext.MockMultipartResolver . cleanupMultipart ( org.springframework.web.servlet.MultipartHttpServletRequest ) ; assertNull ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( SimpleMappingExceptionResolver . DEFAULT_EXCEPTION_ATTRIBUTE ) ) ; assertNotNull ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ComplexWebApplicationContext . ComplexWebApplicationContext ComplexWebApplicationContext.MockMultipartResolver = ( ComplexWebApplicationContext . ComplexWebApplicationContext ) org.springframework.web.servlet.DispatcherServlet . getWebApplicationContext ( ) . getBean ( STRING ) ; MultipartHttpServletRequest org.springframework.web.servlet.MultipartHttpServletRequest = ComplexWebApplicationContext.MockMultipartResolver . resolveMultipart ( org.springframework.web.servlet.MockHttpServletRequest ) ; org.springframework.web.servlet.DispatcherServlet . service ( new HttpServletRequestWrapper ( org.springframework.web.servlet.MultipartHttpServletRequest ) , org.springframework.web.servlet.MockHttpServletResponse ) ; ComplexWebApplicationContext.MockMultipartResolver . cleanupMultipart ( org.springframework.web.servlet.MultipartHttpServletRequest ) ; assertNull ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( SimpleMappingExceptionResolver . DEFAULT_EXCEPTION_ATTRIBUTE ) ) ; assertNotNull ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . setAttribute ( STRING , java.lang.Boolean . java.lang.Boolean ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.MockHttpServletResponse . getStatus ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( SimpleMappingExceptionResolver . DEFAULT_EXCEPTION_ATTRIBUTE ) instanceof MaxUploadSizeExceededException ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) == null ) ; assertTrue ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) != null ) ; assertTrue ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) != null ) ; assertTrue ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) == null ) ; assertTrue ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) == null ) ; assertTrue ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) == null ) ; assertTrue ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) == null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; try { org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.MockHttpServletResponse . getStatus ( ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) ) ) ; } catch ( ServletException org.springframework.web.servlet.ServletException ) { fail ( STRING + org.springframework.web.servlet.ServletException . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) instanceof java.lang.IllegalAccessException ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) instanceof ServletException ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) instanceof java.lang.IllegalAccessException ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) instanceof ServletException ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) . getClass ( ) . equals ( java.lang.RuntimeException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) . getClass ( ) . equals ( ServletException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) == null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) . getClass ( ) . equals ( ServletException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.MockHttpServletRequest . addUserRole ( STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; try { org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) == null ) ; } catch ( ServletException org.springframework.web.servlet.ServletException ) { fail ( STRING + org.springframework.web.servlet.ServletException . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; try { org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getStatus ( ) == HttpServletResponse . SC_FORBIDDEN ) ; } catch ( ServletException org.springframework.web.servlet.ServletException ) { fail ( STRING + org.springframework.web.servlet.ServletException . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.MockHttpServletResponse . getContentLength ( ) ) ; org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.MockHttpServletResponse . getContentLength ( ) ) ; org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.ServletException , java.io.IOException { DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . setContextClass ( ComplexWebApplicationContext .class ) ; org.springframework.web.servlet.DispatcherServlet . setNamespace ( STRING ) ; org.springframework.web.servlet.DispatcherServlet . setDetectAllHandlerMappings ( false ) ; org.springframework.web.servlet.DispatcherServlet . init ( new MockServletConfig ( org.springframework.web.servlet.ServletContext ( ) , STRING ) ) ; MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertTrue ( org.springframework.web.servlet.MockHttpServletResponse . getStatus ( ) == HttpServletResponse . SC_NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.ServletException , java.io.IOException { DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . setContextClass ( ComplexWebApplicationContext .class ) ; org.springframework.web.servlet.DispatcherServlet . setNamespace ( STRING ) ; org.springframework.web.servlet.DispatcherServlet . init ( new MockServletConfig ( org.springframework.web.servlet.ServletContext ( ) , STRING ) ) ; MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , java.lang.String ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( HttpServletResponse . SC_NOT_FOUND , org.springframework.web.servlet.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.ServletException , java.io.IOException { StaticWebApplicationContext org.springframework.web.servlet.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.StaticWebApplicationContext . setServletContext ( org.springframework.web.servlet.ServletContext ( ) ) ; org.springframework.web.servlet.StaticWebApplicationContext . registerSingleton ( STRING , org.springframework.web.servlet.DispatcherServletTests.ControllerFromParent .class , new MutablePropertyValues ( ) ) ; MutablePropertyValues org.springframework.web.servlet.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.servlet.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , java.lang.String + STRING ) ) ; org.springframework.web.servlet.StaticWebApplicationContext . registerSingleton ( STRING , SimpleUrlHandlerMapping .class , org.springframework.web.servlet.MutablePropertyValues ) ; org.springframework.web.servlet.StaticWebApplicationContext . refresh ( ) ; DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . setContextClass ( ComplexWebApplicationContext .class ) ; org.springframework.web.servlet.DispatcherServlet . setNamespace ( STRING ) ; ServletConfig org.springframework.web.servlet.ServletConfig = new MockServletConfig ( org.springframework.web.servlet.ServletContext ( ) , STRING ) ; org.springframework.web.servlet.ServletConfig . getServletContext ( ) . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.StaticWebApplicationContext ) ; org.springframework.web.servlet.DispatcherServlet . init ( org.springframework.web.servlet.ServletConfig ) ; MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , java.lang.String ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertFalse ( STRING + org.springframework.web.servlet.MockHttpServletResponse . getStatus ( ) , org.springframework.web.servlet.MockHttpServletResponse . getStatus ( ) == HttpServletResponse . SC_NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.ServletException , java.io.IOException { DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . setContextClass ( ComplexWebApplicationContext .class ) ; org.springframework.web.servlet.DispatcherServlet . setNamespace ( STRING ) ; org.springframework.web.servlet.DispatcherServlet . init ( new MockServletConfig ( org.springframework.web.servlet.ServletContext ( ) , STRING ) ) ; MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.ServletException , java.io.IOException { DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . setContextClass ( ComplexWebApplicationContext .class ) ; org.springframework.web.servlet.DispatcherServlet . setNamespace ( STRING ) ; org.springframework.web.servlet.DispatcherServlet . setDetectAllHandlerAdapters ( false ) ; org.springframework.web.servlet.DispatcherServlet . init ( new MockServletConfig ( org.springframework.web.servlet.ServletContext ( ) , STRING ) ) ; MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) . getClass ( ) . equals ( ServletException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.ServletException , java.io.IOException { DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . setContextClass ( ComplexWebApplicationContext .class ) ; org.springframework.web.servlet.DispatcherServlet . setNamespace ( STRING ) ; org.springframework.web.servlet.DispatcherServlet . setDetectAllHandlerExceptionResolvers ( false ) ; org.springframework.web.servlet.DispatcherServlet . init ( new MockServletConfig ( org.springframework.web.servlet.ServletContext ( ) , STRING ) ) ; MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; try { org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; fail ( STRING ) ; } catch ( ServletException org.springframework.web.servlet.ServletException ) { assertTrue ( org.springframework.web.servlet.ServletException . getMessage ( ) . indexOf ( STRING ) != - NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.ServletException , java.io.IOException { DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . setContextClass ( ComplexWebApplicationContext .class ) ; org.springframework.web.servlet.DispatcherServlet . setNamespace ( STRING ) ; org.springframework.web.servlet.DispatcherServlet . setDetectAllViewResolvers ( false ) ; org.springframework.web.servlet.DispatcherServlet . init ( new MockServletConfig ( org.springframework.web.servlet.ServletContext ( ) , STRING ) ) ; MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; try { org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; fail ( STRING ) ; } catch ( ServletException org.springframework.web.servlet.ServletException ) { assertTrue ( org.springframework.web.servlet.ServletException . getMessage ( ) . indexOf ( STRING ) != - NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.ServletException , java.io.IOException { DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . setContextClass ( SimpleWebApplicationContext .class ) ; org.springframework.web.servlet.DispatcherServlet . setNamespace ( STRING ) ; org.springframework.web.servlet.DispatcherServlet . setThrowExceptionIfNoHandlerFound ( true ) ; org.springframework.web.servlet.DispatcherServlet . init ( new MockServletConfig ( org.springframework.web.servlet.ServletContext ( ) , STRING ) ) ; MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertTrue ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getStatus ( ) == HttpServletResponse . SC_NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpHeaders org.springframework.web.servlet.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.servlet.HttpHeaders . add ( STRING , STRING ) ; NoHandlerFoundException org.springframework.web.servlet.NoHandlerFoundException = new NoHandlerFoundException ( STRING , STRING , org.springframework.web.servlet.HttpHeaders ) ; assertTrue ( ! org.springframework.web.servlet.NoHandlerFoundException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( ! org.springframework.web.servlet.NoHandlerFoundException . toString ( ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.ServletException , java.io.IOException { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.MockHttpServletRequest . setAttribute ( STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . setAttribute ( STRING , STRING ) ; WebApplicationContext org.springframework.web.servlet.WebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.MockHttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.WebApplicationContext ) ; org.springframework.web.servlet.MockHttpServletRequest . setAttribute ( WebUtils . INCLUDE_REQUEST_URI_ATTRIBUTE , STRING ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertEquals ( org.springframework.web.servlet.WebApplicationContext , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ) ; assertNull ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE ) ) ; assertNull ( org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.ServletException , java.io.IOException { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.MockHttpServletRequest . setAttribute ( STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . setAttribute ( STRING , STRING ) ; WebApplicationContext org.springframework.web.servlet.WebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.MockHttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.WebApplicationContext ) ; TestBean org.springframework.web.servlet.TestBean = new TestBean ( ) ; org.springframework.web.servlet.MockHttpServletRequest . setAttribute ( STRING , org.springframework.web.servlet.TestBean ) ; org.springframework.web.servlet.MockHttpServletRequest . setAttribute ( WebUtils . INCLUDE_REQUEST_URI_ATTRIBUTE , STRING ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.WebApplicationContext , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.ServletException , java.io.IOException { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.MockHttpServletRequest . setAttribute ( STRING , STRING ) ; org.springframework.web.servlet.MockHttpServletRequest . setAttribute ( STRING , STRING ) ; WebApplicationContext org.springframework.web.servlet.WebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.MockHttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.WebApplicationContext ) ; TestBean org.springframework.web.servlet.TestBean = new TestBean ( ) ; org.springframework.web.servlet.MockHttpServletRequest . setAttribute ( STRING , org.springframework.web.servlet.TestBean ) ; org.springframework.web.servlet.MockHttpServletRequest . setAttribute ( WebUtils . INCLUDE_REQUEST_URI_ATTRIBUTE , STRING ) ; org.springframework.web.servlet.DispatcherServlet . setCleanupAfterInclude ( false ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.WebApplicationContext , org.springframework.web.servlet.MockHttpServletRequest . getAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getContentAsString ( ) ) ; Servlet org.springframework.web.servlet.Servlet = ( Servlet ) org.springframework.web.servlet.DispatcherServlet . getWebApplicationContext ( ) . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.Servlet . getServletConfig ( ) . getServletName ( ) ) ; assertEquals ( org.springframework.web.servlet.ServletContext ( ) , org.springframework.web.servlet.Servlet . getServletConfig ( ) . getServletContext ( ) ) ; org.springframework.web.servlet.DispatcherServlet . destroy ( ) ; assertNull ( org.springframework.web.servlet.Servlet . getServletConfig ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServletContext org.springframework.web.servlet.MockServletContext = new MockServletContext ( ) ; MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.MockServletContext , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServletContext org.springframework.web.servlet.MockServletContext = new MockServletContext ( ) ; MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.MockServletContext , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.MockHttpServletResponse . getForwardedUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { InternalResourceViewResolver org.springframework.web.servlet.InternalResourceViewResolver = ( InternalResourceViewResolver ) org.springframework.web.servlet.DispatcherServlet . getWebApplicationContext ( ) . getBean ( STRING ) ; org.springframework.web.servlet.InternalResourceViewResolver . setSuffix ( STRING ) ; MockServletContext org.springframework.web.servlet.MockServletContext = new MockServletContext ( ) ; MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.MockServletContext , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; try { org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; fail ( STRING ) ; } catch ( ServletException org.springframework.web.servlet.ServletException ) { org.springframework.web.servlet.ServletException . printStackTrace ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.ServletException { MockServletContext org.springframework.web.servlet.MockServletContext = new MockServletContext ( STRING ) ; DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . init ( new MockServletConfig ( org.springframework.web.servlet.MockServletContext , STRING ) ) ; ServletContextAwareBean org.springframework.web.servlet.ServletContextAwareBean = ( ServletContextAwareBean ) org.springframework.web.servlet.DispatcherServlet . getWebApplicationContext ( ) . getBean ( STRING ) ; ServletConfigAwareBean org.springframework.web.servlet.ServletConfigAwareBean = ( ServletConfigAwareBean ) org.springframework.web.servlet.DispatcherServlet . getWebApplicationContext ( ) . getBean ( STRING ) ; assertSame ( org.springframework.web.servlet.MockServletContext , org.springframework.web.servlet.ServletContextAwareBean . getServletContext ( ) ) ; assertSame ( org.springframework.web.servlet.DispatcherServlet . getServletConfig ( ) , org.springframework.web.servlet.ServletConfigAwareBean . getServletConfig ( ) ) ; MultipartResolver org.springframework.web.servlet.MultipartResolver = org.springframework.web.servlet.DispatcherServlet . getMultipartResolver ( ) ; assertNotNull ( org.springframework.web.servlet.MultipartResolver ) ; org.springframework.web.servlet.DispatcherServlet . refresh ( ) ; ServletContextAwareBean org.springframework.web.servlet.ServletContextAwareBean = ( ServletContextAwareBean ) org.springframework.web.servlet.DispatcherServlet . getWebApplicationContext ( ) . getBean ( STRING ) ; ServletConfigAwareBean org.springframework.web.servlet.ServletConfigAwareBean = ( ServletConfigAwareBean ) org.springframework.web.servlet.DispatcherServlet . getWebApplicationContext ( ) . getBean ( STRING ) ; assertSame ( org.springframework.web.servlet.MockServletContext , org.springframework.web.servlet.ServletContextAwareBean . getServletContext ( ) ) ; assertSame ( org.springframework.web.servlet.DispatcherServlet . getServletConfig ( ) , org.springframework.web.servlet.ServletConfigAwareBean . getServletConfig ( ) ) ; assertNotSame ( org.springframework.web.servlet.ServletContextAwareBean , org.springframework.web.servlet.ServletContextAwareBean ) ; assertNotSame ( org.springframework.web.servlet.ServletConfigAwareBean , org.springframework.web.servlet.ServletConfigAwareBean ) ; MultipartResolver org.springframework.web.servlet.MultipartResolver = org.springframework.web.servlet.DispatcherServlet . getMultipartResolver ( ) ; assertNotSame ( org.springframework.web.servlet.MultipartResolver , org.springframework.web.servlet.MultipartResolver ) ; org.springframework.web.servlet.DispatcherServlet . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.ServletException { MockServletContext org.springframework.web.servlet.MockServletContext = new MockServletContext ( STRING ) ; DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . init ( new MockServletConfig ( org.springframework.web.servlet.MockServletContext , STRING ) ) ; ServletContextAwareBean org.springframework.web.servlet.ServletContextAwareBean = ( ServletContextAwareBean ) org.springframework.web.servlet.DispatcherServlet . getWebApplicationContext ( ) . getBean ( STRING ) ; ServletConfigAwareBean org.springframework.web.servlet.ServletConfigAwareBean = ( ServletConfigAwareBean ) org.springframework.web.servlet.DispatcherServlet . getWebApplicationContext ( ) . getBean ( STRING ) ; assertSame ( org.springframework.web.servlet.MockServletContext , org.springframework.web.servlet.ServletContextAwareBean . getServletContext ( ) ) ; assertSame ( org.springframework.web.servlet.DispatcherServlet . getServletConfig ( ) , org.springframework.web.servlet.ServletConfigAwareBean . getServletConfig ( ) ) ; MultipartResolver org.springframework.web.servlet.MultipartResolver = org.springframework.web.servlet.DispatcherServlet . getMultipartResolver ( ) ; assertNotNull ( org.springframework.web.servlet.MultipartResolver ) ; ( ( ConfigurableApplicationContext ) org.springframework.web.servlet.DispatcherServlet . getWebApplicationContext ( ) ) . refresh ( ) ; ServletContextAwareBean org.springframework.web.servlet.ServletContextAwareBean = ( ServletContextAwareBean ) org.springframework.web.servlet.DispatcherServlet . getWebApplicationContext ( ) . getBean ( STRING ) ; ServletConfigAwareBean org.springframework.web.servlet.ServletConfigAwareBean = ( ServletConfigAwareBean ) org.springframework.web.servlet.DispatcherServlet . getWebApplicationContext ( ) . getBean ( STRING ) ; assertSame ( org.springframework.web.servlet.MockServletContext , org.springframework.web.servlet.ServletContextAwareBean . getServletContext ( ) ) ; assertSame ( org.springframework.web.servlet.DispatcherServlet . getServletConfig ( ) , org.springframework.web.servlet.ServletConfigAwareBean . getServletConfig ( ) ) ; assertTrue ( org.springframework.web.servlet.ServletContextAwareBean != org.springframework.web.servlet.ServletContextAwareBean ) ; assertTrue ( org.springframework.web.servlet.ServletConfigAwareBean != org.springframework.web.servlet.ServletConfigAwareBean ) ; MultipartResolver org.springframework.web.servlet.MultipartResolver = org.springframework.web.servlet.DispatcherServlet . getMultipartResolver ( ) ; assertTrue ( org.springframework.web.servlet.MultipartResolver != org.springframework.web.servlet.MultipartResolver ) ; org.springframework.web.servlet.DispatcherServlet . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; ConfigurableEnvironment org.springframework.web.servlet.ConfigurableEnvironment = org.springframework.web.servlet.DispatcherServlet . getEnvironment ( ) ; assertThat ( org.springframework.web.servlet.ConfigurableEnvironment , notNullValue ( ) ) ; ConfigurableEnvironment org.springframework.web.servlet.ConfigurableEnvironment = new StandardServletEnvironment ( ) ; org.springframework.web.servlet.DispatcherServlet . setEnvironment ( org.springframework.web.servlet.ConfigurableEnvironment ) ; assertThat ( org.springframework.web.servlet.DispatcherServlet . getEnvironment ( ) , sameInstance ( org.springframework.web.servlet.ConfigurableEnvironment ) ) ; try { org.springframework.web.servlet.DispatcherServlet . setEnvironment ( new DummyEnvironment ( ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} class CustomServletEnvironment extends StandardServletEnvironment { } @ java.lang.SuppressWarnings ( STRING ) DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) { @ java.lang.Override protected org.springframework.web.servlet.ConfigurableWebEnvironment org.springframework.web.servlet.ConfigurableWebEnvironment ( ) { return new CustomServletEnvironment ( ) ; } } ; assertThat ( org.springframework.web.servlet.DispatcherServlet . getEnvironment ( ) , instanceOf ( CustomServletEnvironment .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.ConfigurableWebEnvironment org.springframework.web.servlet.ConfigurableWebEnvironment ( ) { return new CustomServletEnvironment ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.ServletContext ( ) , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.MockHttpServletResponse = spy ( new MockHttpServletResponse ( ) ) ; DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . setDispatchOptionsRequest ( false ) ; org.springframework.web.servlet.DispatcherServlet . service ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; verify ( org.springframework.web.servlet.MockHttpServletResponse , never ( ) ) . getHeader ( anyString ( ) ) ; assertThat ( org.springframework.web.servlet.MockHttpServletResponse . getHeader ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . setContextClass ( SimpleWebApplicationContext .class ) ; org.springframework.web.servlet.DispatcherServlet . setContextInitializers ( new org.springframework.web.servlet.DispatcherServletTests.TestWebContextInitializer ( ) , new org.springframework.web.servlet.DispatcherServletTests.OtherWebContextInitializer ( ) ) ; org.springframework.web.servlet.DispatcherServlet . init ( org.springframework.web.servlet.MockServletConfig ) ; assertEquals ( STRING , org.springframework.web.servlet.ServletContext ( ) . getAttribute ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.ServletContext ( ) . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . setContextClass ( SimpleWebApplicationContext .class ) ; org.springframework.web.servlet.DispatcherServlet . setContextInitializerClasses ( org.springframework.web.servlet.DispatcherServletTests.TestWebContextInitializer .class . java.lang.String ( ) + STRING + org.springframework.web.servlet.DispatcherServletTests.OtherWebContextInitializer .class . java.lang.String ( ) ) ; org.springframework.web.servlet.DispatcherServlet . init ( org.springframework.web.servlet.MockServletConfig ) ; assertEquals ( STRING , org.springframework.web.servlet.ServletContext ( ) . getAttribute ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.ServletContext ( ) . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . setContextClass ( SimpleWebApplicationContext .class ) ; org.springframework.web.servlet.ServletContext ( ) . setInitParameter ( ContextLoader . GLOBAL_INITIALIZER_CLASSES_PARAM , org.springframework.web.servlet.DispatcherServletTests.TestWebContextInitializer .class . java.lang.String ( ) + STRING + org.springframework.web.servlet.DispatcherServletTests.OtherWebContextInitializer .class . java.lang.String ( ) ) ; org.springframework.web.servlet.DispatcherServlet . init ( org.springframework.web.servlet.MockServletConfig ) ; assertEquals ( STRING , org.springframework.web.servlet.ServletContext ( ) . getAttribute ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.ServletContext ( ) . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DispatcherServlet org.springframework.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.servlet.DispatcherServlet . setContextClass ( SimpleWebApplicationContext .class ) ; org.springframework.web.servlet.ServletContext ( ) . setInitParameter ( ContextLoader . GLOBAL_INITIALIZER_CLASSES_PARAM , org.springframework.web.servlet.DispatcherServletTests.TestWebContextInitializer .class . java.lang.String ( ) ) ; org.springframework.web.servlet.DispatcherServlet . setContextInitializerClasses ( org.springframework.web.servlet.DispatcherServletTests.OtherWebContextInitializer .class . java.lang.String ( ) ) ; org.springframework.web.servlet.DispatcherServlet . init ( org.springframework.web.servlet.MockServletConfig ) ; assertEquals ( STRING , org.springframework.web.servlet.ServletContext ( ) . getAttribute ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.ServletContext ( ) . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.ModelAndView org.springframework.web.servlet.ModelAndView ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse ) throws java.lang.Exception { return new ModelAndView ( org.springframework.web.servlet.DispatcherServletTests.ControllerFromParent .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableWebApplicationContext org.springframework.web.servlet.ConfigurableWebApplicationContext ) { org.springframework.web.servlet.ConfigurableWebApplicationContext . getServletContext ( ) . setAttribute ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableWebApplicationContext org.springframework.web.servlet.ConfigurableWebApplicationContext ) { org.springframework.web.servlet.ConfigurableWebApplicationContext . getServletContext ( ) . setAttribute ( STRING , STRING ) ; }  <METHOD_END>
