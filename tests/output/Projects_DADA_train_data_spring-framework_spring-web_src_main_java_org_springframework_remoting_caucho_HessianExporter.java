<METHOD_START> public void void ( SerializerFactory org.springframework.remoting.caucho.SerializerFactory ) { this . org.springframework.remoting.caucho.SerializerFactory = ( org.springframework.remoting.caucho.SerializerFactory != null ? org.springframework.remoting.caucho.SerializerFactory : new SerializerFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.remoting.caucho.SerializerFactory . setSendCollectionType ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.remoting.caucho.SerializerFactory . setAllowNonSerializable ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( HessianRemoteResolver org.springframework.remoting.caucho.HessianRemoteResolver ) { this . org.springframework.remoting.caucho.HessianRemoteResolver = org.springframework.remoting.caucho.HessianRemoteResolver ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.remoting.caucho.Log = ( boolean ? logger : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { checkService ( ) ; checkServiceInterface ( ) ; this . org.springframework.remoting.caucho.HessianSkeleton = new HessianSkeleton ( getProxyForService ( ) , getServiceInterface ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.InputStream java.io.InputStream , java.io.OutputStream java.io.OutputStream ) throws java.lang.Throwable { Assert . notNull ( this . org.springframework.remoting.caucho.HessianSkeleton , STRING ) ; void ( this . org.springframework.remoting.caucho.HessianSkeleton , java.io.InputStream , java.io.OutputStream ) ; }  <METHOD_END>
<METHOD_START> protected void void ( HessianSkeleton org.springframework.remoting.caucho.HessianSkeleton , java.io.InputStream java.io.InputStream , java.io.OutputStream java.io.OutputStream )			throws java.lang.Throwable { java.lang.ClassLoader java.lang.ClassLoader = overrideThreadContextClassLoader ( ) ; try { java.io.InputStream java.io.InputStream = java.io.InputStream ; java.io.OutputStream java.io.OutputStream = java.io.OutputStream ; if ( this . org.springframework.remoting.caucho.Log != null && this . org.springframework.remoting.caucho.Log . isDebugEnabled ( ) ) { java.io.PrintWriter java.io.PrintWriter = new java.io.PrintWriter ( new CommonsLogWriter ( this . org.springframework.remoting.caucho.Log ) ) ; @ java.lang.SuppressWarnings ( STRING ) HessianDebugInputStream org.springframework.remoting.caucho.HessianDebugInputStream = new HessianDebugInputStream ( java.io.InputStream , java.io.PrintWriter ) ; @ java.lang.SuppressWarnings ( STRING ) HessianDebugOutputStream org.springframework.remoting.caucho.HessianDebugOutputStream = new HessianDebugOutputStream ( java.io.OutputStream , java.io.PrintWriter ) ; org.springframework.remoting.caucho.HessianDebugInputStream . startTop2 ( ) ; org.springframework.remoting.caucho.HessianDebugOutputStream . startTop2 ( ) ; java.io.InputStream = org.springframework.remoting.caucho.HessianDebugInputStream ; java.io.OutputStream = org.springframework.remoting.caucho.HessianDebugOutputStream ; } if ( ! java.io.InputStream . boolean ( ) ) { java.io.InputStream = new java.io.BufferedInputStream ( java.io.InputStream ) ; java.io.InputStream . void ( NUMBER ) ; } int int = java.io.InputStream . int ( ) ; int int ; int int ; AbstractHessianInput org.springframework.remoting.caucho.AbstractHessianInput ; AbstractHessianOutput org.springframework.remoting.caucho.AbstractHessianOutput ; if ( int == 'H' ) { int = java.io.InputStream . int ( ) ; int = java.io.InputStream . int ( ) ; if ( int != NUMBER ) { throw new java.io.IOException ( STRING + int + '.' + int + STRING ) ; } org.springframework.remoting.caucho.AbstractHessianInput = new Hessian2Input ( java.io.InputStream ) ; org.springframework.remoting.caucho.AbstractHessianOutput = new Hessian2Output ( java.io.OutputStream ) ; org.springframework.remoting.caucho.AbstractHessianInput . readCall ( ) ; } else if ( int == 'C' ) { java.io.InputStream . void ( ) ; org.springframework.remoting.caucho.AbstractHessianInput = new Hessian2Input ( java.io.InputStream ) ; org.springframework.remoting.caucho.AbstractHessianOutput = new Hessian2Output ( java.io.OutputStream ) ; org.springframework.remoting.caucho.AbstractHessianInput . readCall ( ) ; } else if ( int == 'c' ) { int = java.io.InputStream . int ( ) ; int = java.io.InputStream . int ( ) ; org.springframework.remoting.caucho.AbstractHessianInput = new HessianInput ( java.io.InputStream ) ; if ( int >= NUMBER ) { org.springframework.remoting.caucho.AbstractHessianOutput = new Hessian2Output ( java.io.OutputStream ) ; } else { org.springframework.remoting.caucho.AbstractHessianOutput = new HessianOutput ( java.io.OutputStream ) ; } } else { throw new java.io.IOException ( STRING + int ) ; } if ( this . org.springframework.remoting.caucho.SerializerFactory != null ) { org.springframework.remoting.caucho.AbstractHessianInput . setSerializerFactory ( this . org.springframework.remoting.caucho.SerializerFactory ) ; org.springframework.remoting.caucho.AbstractHessianOutput . setSerializerFactory ( this . org.springframework.remoting.caucho.SerializerFactory ) ; } if ( this . org.springframework.remoting.caucho.HessianRemoteResolver != null ) { org.springframework.remoting.caucho.AbstractHessianInput . setRemoteResolver ( this . org.springframework.remoting.caucho.HessianRemoteResolver ) ; } try { org.springframework.remoting.caucho.HessianSkeleton . invoke ( org.springframework.remoting.caucho.AbstractHessianInput , org.springframework.remoting.caucho.AbstractHessianOutput ) ; } finally { try { org.springframework.remoting.caucho.AbstractHessianInput . close ( ) ; java.io.InputStream . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } try { org.springframework.remoting.caucho.AbstractHessianOutput . close ( ) ; java.io.OutputStream . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } } finally { resetThreadContextClassLoader ( java.lang.ClassLoader ) ; } }  <METHOD_END>
