<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.SourcePollingChannelAdapter , STRING , java.lang.Boolean .class ) ) ; java.util.concurrent.PriorityBlockingQueue<?> < ? > java.util.concurrent.PriorityBlockingQueue<?> = TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.SourcePollingChannelAdapter , STRING , java.util.concurrent.PriorityBlockingQueue .class ) ; java.util.Comparator<?> < ? > java.util.Comparator<?> = java.util.concurrent.PriorityBlockingQueue<> . java.util.Comparator<? super > ( ) ; assertNotNull ( java.util.Comparator<> ) ; assertEquals ( STRING , org.springframework.integration.ftp.config.SourcePollingChannelAdapter . getComponentName ( ) ) ; assertEquals ( STRING , org.springframework.integration.ftp.config.SourcePollingChannelAdapter . getComponentType ( ) ) ; assertEquals ( org.springframework.integration.ftp.config.ApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.SourcePollingChannelAdapter , STRING ) ) ; FtpInboundFileSynchronizingMessageSource org.springframework.integration.ftp.config.FtpInboundFileSynchronizingMessageSource = ( FtpInboundFileSynchronizingMessageSource ) TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.SourcePollingChannelAdapter , STRING ) ; FtpInboundFileSynchronizer org.springframework.integration.ftp.config.FtpInboundFileSynchronizer = ( FtpInboundFileSynchronizer ) TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FtpInboundFileSynchronizingMessageSource , STRING ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FtpInboundFileSynchronizer , STRING , Expression .class ) . getExpressionString ( ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FtpInboundFileSynchronizer , STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FtpInboundFileSynchronizer , STRING , java.lang.Boolean .class ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FtpInboundFileSynchronizer , STRING , java.lang.String .class ) ) ; java.lang.String java.lang.String = ( java.lang.String ) TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FtpInboundFileSynchronizer , STRING ) ; assertNotNull ( java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; FileListFilter < ? > org.springframework.integration.ftp.config.FileListFilter<?> = TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FtpInboundFileSynchronizer , STRING , FileListFilter .class ) ; assertNotNull ( org.springframework.integration.ftp.config.FileListFilter<> ) ; assertThat ( org.springframework.integration.ftp.config.FileListFilter<> , instanceOf ( CompositeFileListFilter .class ) ) ; java.util.Set<?> < ? > java.util.Set<?> = TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FileListFilter<> , STRING , java.util.Set .class ) ; java.util.Iterator<?> < ? > java.util.Iterator<?> = java.util.Set<> . java.util.Iterator<> ( ) ; assertThat ( java.util.Iterator<> . next ( ) , instanceOf ( FtpSimplePatternFileListFilter .class ) ) ; assertThat ( java.util.Iterator<> . next ( ) , instanceOf ( FtpPersistentAcceptOnceFileListFilter .class ) ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FtpInboundFileSynchronizer , STRING ) ; assertTrue ( DefaultFtpSessionFactory .class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; FileListFilter < ? > org.springframework.integration.ftp.config.FileListFilter<?> = org.springframework.integration.ftp.config.ApplicationContext . getBean ( STRING , FileListFilter .class ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FtpInboundFileSynchronizingMessageSource , STRING , java.util.Collection .class ) . contains ( org.springframework.integration.ftp.config.FileListFilter<> ) ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.concurrent.atomic.AtomicReference<java.lang.reflect.Method> = new java.util.concurrent.atomic.AtomicReference<java.lang.reflect.Method> < java.lang.reflect.Method > ( ) ; ReflectionUtils . doWithMethods ( AbstractInboundFileSynchronizer .class , method -> { method . setAccessible ( true ) ; genMethod . set ( method ) ; } , method -> STRING . equals ( method . getName ( ) ) ) ; assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<java.lang.reflect.Method> . java.lang.reflect.Method ( ) . java.lang.Object ( org.springframework.integration.ftp.config.FtpInboundFileSynchronizer , STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ftp.config.FtpInboundFileSynchronizingMessageSource . getMaxFetchSize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.SourcePollingChannelAdapter , STRING ) ; assertEquals ( CachingSessionFactory .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; FtpInboundFileSynchronizer org.springframework.integration.ftp.config.FtpInboundFileSynchronizer = TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.SourcePollingChannelAdapter , STRING , FtpInboundFileSynchronizer .class ) ; java.lang.String java.lang.String = ( java.lang.String ) TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FtpInboundFileSynchronizer , STRING ) ; assertNotNull ( java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FtpInboundFileSynchronizer , STRING , Expression .class ) . getExpressionString ( ) ) ; assertEquals ( java.lang.Integer . int , TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.SourcePollingChannelAdapter , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertSame ( org.springframework.integration.ftp.config.MessageChannel , TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.SourcePollingChannelAdapter , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ftp.config.DefaultFtpSessionFactory org.springframework.integration.ftp.config.DefaultFtpSessionFactory ( ) java.lang.Exception { DefaultFtpSessionFactory org.springframework.integration.ftp.config.DefaultFtpSessionFactory = mock ( DefaultFtpSessionFactory .class ) ; FtpSession org.springframework.integration.ftp.config.FtpSession = mock ( FtpSession .class ) ; when ( org.springframework.integration.ftp.config.DefaultFtpSessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.ftp.config.FtpSession ) ; return org.springframework.integration.ftp.config.DefaultFtpSessionFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return DefaultFtpSessionFactory .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
