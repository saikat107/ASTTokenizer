<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClientRequest org.springframework.web.reactive.function.client.ClientRequest = ClientRequest . method ( GET , java.net.URI . java.net.URI ( STRING ) ) . build ( ) ; ClientResponse org.springframework.web.reactive.function.client.ClientResponse = mock ( ClientResponse .class ) ; ExchangeFunction org.springframework.web.reactive.function.client.ExchangeFunction = r -> Mono . just ( response ) ; boolean [] boolean[] = new boolean [ NUMBER ] ; ExchangeFilterFunction org.springframework.web.reactive.function.client.ExchangeFilterFunction = ( r , n ) -> { assertFalse ( filtersInvoked [ NUMBER ] ) ; assertFalse ( filtersInvoked [ NUMBER ] ) ; filtersInvoked [ NUMBER ] = true ; assertFalse ( filtersInvoked [ NUMBER ] ) ; return n . exchange ( r ) ; } ; ExchangeFilterFunction org.springframework.web.reactive.function.client.ExchangeFilterFunction = ( r , n ) -> { assertTrue ( filtersInvoked [ NUMBER ] ) ; assertFalse ( filtersInvoked [ NUMBER ] ) ; filtersInvoked [ NUMBER ] = true ; return n . exchange ( r ) ; } ; ExchangeFilterFunction org.springframework.web.reactive.function.client.ExchangeFilterFunction = org.springframework.web.reactive.function.client.ExchangeFilterFunction . andThen ( org.springframework.web.reactive.function.client.ExchangeFilterFunction ) ; ClientResponse org.springframework.web.reactive.function.client.ClientResponse = org.springframework.web.reactive.function.client.ExchangeFilterFunction . filter ( org.springframework.web.reactive.function.client.ClientRequest , org.springframework.web.reactive.function.client.ExchangeFunction ) . block ( ) ; assertEquals ( org.springframework.web.reactive.function.client.ClientResponse , org.springframework.web.reactive.function.client.ClientResponse ) ; assertTrue ( boolean[] [ NUMBER ] ) ; assertTrue ( boolean[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClientRequest org.springframework.web.reactive.function.client.ClientRequest = ClientRequest . method ( GET , java.net.URI . java.net.URI ( STRING ) ) . build ( ) ; ClientResponse org.springframework.web.reactive.function.client.ClientResponse = mock ( ClientResponse .class ) ; ExchangeFunction org.springframework.web.reactive.function.client.ExchangeFunction = r -> Mono . just ( response ) ; boolean [] boolean[] = new boolean [ NUMBER ] ; ExchangeFilterFunction org.springframework.web.reactive.function.client.ExchangeFilterFunction = ( r , n ) -> { assertFalse ( filterInvoked [ NUMBER ] ) ; filterInvoked [ NUMBER ] = true ; return n . exchange ( r ) ; } ; ExchangeFunction org.springframework.web.reactive.function.client.ExchangeFunction = org.springframework.web.reactive.function.client.ExchangeFilterFunction . apply ( org.springframework.web.reactive.function.client.ExchangeFunction ) ; ClientResponse org.springframework.web.reactive.function.client.ClientResponse = org.springframework.web.reactive.function.client.ExchangeFunction . exchange ( org.springframework.web.reactive.function.client.ClientRequest ) . block ( ) ; assertEquals ( org.springframework.web.reactive.function.client.ClientResponse , org.springframework.web.reactive.function.client.ClientResponse ) ; assertTrue ( boolean[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClientRequest org.springframework.web.reactive.function.client.ClientRequest = ClientRequest . method ( GET , java.net.URI . java.net.URI ( STRING ) ) . build ( ) ; ClientResponse org.springframework.web.reactive.function.client.ClientResponse = mock ( ClientResponse .class ) ; ExchangeFunction org.springframework.web.reactive.function.client.ExchangeFunction = r -> { assertTrue ( r . headers ( ) . containsKey ( HttpHeaders . AUTHORIZATION ) ) ; assertTrue ( r . headers ( ) . getFirst ( HttpHeaders . AUTHORIZATION ) . startsWith ( STRING ) ) ; return Mono . just ( response ) ; } ; ExchangeFilterFunction org.springframework.web.reactive.function.client.ExchangeFilterFunction = ExchangeFilterFunctions . basicAuthentication ( STRING , STRING ) ; assertFalse ( org.springframework.web.reactive.function.client.ClientRequest . headers ( ) . containsKey ( HttpHeaders . AUTHORIZATION ) ) ; ClientResponse org.springframework.web.reactive.function.client.ClientResponse = org.springframework.web.reactive.function.client.ExchangeFilterFunction . filter ( org.springframework.web.reactive.function.client.ClientRequest , org.springframework.web.reactive.function.client.ExchangeFunction ) . block ( ) ; assertEquals ( org.springframework.web.reactive.function.client.ClientResponse , org.springframework.web.reactive.function.client.ClientResponse ) ; }  <METHOD_END>
