<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( java.util.Arrays . java.util.List<java.lang.Enum<?>> ( org.springframework.data.cassandra.convert.CustomConversionsUnitTests.FormatToStringConverter . org.springframework.data.cassandra.convert.CustomConversionsUnitTests.FormatToStringConverter , org.springframework.data.cassandra.convert.CustomConversionsUnitTests.StringToFormatConverter . org.springframework.data.cassandra.convert.CustomConversionsUnitTests.StringToFormatConverter ) ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . getCustomWriteTarget ( java.text.Format .class , null ) ) . isAssignableFrom ( java.lang.String .class ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . getCustomWriteTarget ( java.lang.String .class , null ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . hasCustomReadTarget ( java.lang.String .class , java.text.Format .class ) ) . isTrue ( ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . hasCustomReadTarget ( java.lang.String .class , java.util.Locale .class ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( java.util.Arrays . java.util.List<java.lang.Enum<?>> ( org.springframework.data.cassandra.convert.CustomConversionsUnitTests.NumberToStringConverter . org.springframework.data.cassandra.convert.CustomConversionsUnitTests.NumberToStringConverter , org.springframework.data.cassandra.convert.CustomConversionsUnitTests.StringToNumberConverter . org.springframework.data.cassandra.convert.CustomConversionsUnitTests.StringToNumberConverter ) ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . getCustomWriteTarget ( java.lang.Long .class , null ) ) . isAssignableFrom ( java.lang.String .class ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . hasCustomReadTarget ( java.lang.String .class , java.lang.Long .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.cassandra.convert.CustomConversionsUnitTests.FormatToStringConverter> ( org.springframework.data.cassandra.convert.CustomConversionsUnitTests.FormatToStringConverter . org.springframework.data.cassandra.convert.CustomConversionsUnitTests.FormatToStringConverter ) ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . isSimpleType ( java.util.UUID .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericConversionService org.springframework.data.cassandra.convert.GenericConversionService = new DefaultConversionService ( ) ; CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.cassandra.convert.CustomConversionsUnitTests.StringToFormatConverter> ( org.springframework.data.cassandra.convert.CustomConversionsUnitTests.StringToFormatConverter . org.springframework.data.cassandra.convert.CustomConversionsUnitTests.StringToFormatConverter ) ) ; org.springframework.data.cassandra.convert.CustomConversions . registerConvertersIn ( org.springframework.data.cassandra.convert.GenericConversionService ) ; assertThat ( org.springframework.data.cassandra.convert.GenericConversionService . canConvert ( java.lang.String .class , java.text.Format .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.cassandra.convert.CustomConversionsUnitTests.StringToFormatConverter> ( org.springframework.data.cassandra.convert.CustomConversionsUnitTests.StringToFormatConverter . org.springframework.data.cassandra.convert.CustomConversionsUnitTests.StringToFormatConverter ) ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . isSimpleType ( java.text.Format .class ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.cassandra.convert.CustomConversionsUnitTests.StringToIntegerConverter> ( org.springframework.data.cassandra.convert.CustomConversionsUnitTests.StringToIntegerConverter . org.springframework.data.cassandra.convert.CustomConversionsUnitTests.StringToIntegerConverter ) ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . hasCustomReadTarget ( java.lang.String .class , java.lang.Integer .class ) ) . isTrue ( ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . hasCustomWriteTarget ( java.lang.String .class , java.lang.Integer .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . isSimpleType ( java.util.UUID .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . isSimpleType ( java.net.InetAddress .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . isSimpleType ( Row .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.cassandra.convert.CustomConversionsUnitTests.DateTimeToStringConverter> ( org.springframework.data.cassandra.convert.CustomConversionsUnitTests.DateTimeToStringConverter . org.springframework.data.cassandra.convert.CustomConversionsUnitTests.DateTimeToStringConverter ) ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . getCustomWriteTarget ( DateTime .class , null ) ) . isEqualTo ( ( java.lang.Class ) java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.cassandra.convert.CustomConversionsUnitTests.CustomDateTimeConverter> ( org.springframework.data.cassandra.convert.CustomConversionsUnitTests.CustomDateTimeConverter . org.springframework.data.cassandra.convert.CustomConversionsUnitTests.CustomDateTimeConverter ) ) ; GenericConversionService org.springframework.data.cassandra.convert.GenericConversionService = new DefaultConversionService ( ) ; org.springframework.data.cassandra.convert.CustomConversions . registerConvertersIn ( org.springframework.data.cassandra.convert.GenericConversionService ) ; assertThat ( org.springframework.data.cassandra.convert.GenericConversionService . convert ( new DateTime ( ) , java.util.Date .class ) ) . isEqualTo ( new java.util.Date ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.cassandra.convert.CustomConversionsUnitTests.FormatToStringConverter> ( org.springframework.data.cassandra.convert.CustomConversionsUnitTests.FormatToStringConverter . org.springframework.data.cassandra.convert.CustomConversionsUnitTests.FormatToStringConverter ) ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . getCustomWriteTarget ( java.lang.Class<?> ( java.text.Format .class ) ) ) . isAssignableFrom ( java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.cassandra.convert.CustomConversionsUnitTests.CustomObjectToStringConverter> ( org.springframework.data.cassandra.convert.CustomConversionsUnitTests.CustomObjectToStringConverter . org.springframework.data.cassandra.convert.CustomConversionsUnitTests.CustomObjectToStringConverter ) ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . hasCustomReadTarget ( java.lang.Class<?> ( java.lang.Object .class ) , java.lang.String .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.cassandra.convert.CustomConversionsUnitTests.FormatConverterFactory> ( new org.springframework.data.cassandra.convert.CustomConversionsUnitTests.FormatConverterFactory ( ) ) ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . getCustomWriteTarget ( java.lang.String .class , java.text.SimpleDateFormat .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . hasCustomWriteTarget ( java . time . java.time.LocalDateTime .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . hasCustomWriteTarget ( org . org.threeten . org.threeten . org.threeten .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversions . hasCustomWriteTarget ( org . org.joda . org.joda . org.joda .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { ProxyFactory org.springframework.data.cassandra.convert.ProxyFactory = new ProxyFactory ( ) ; org.springframework.data.cassandra.convert.ProxyFactory . setProxyTargetClass ( true ) ; org.springframework.data.cassandra.convert.ProxyFactory . setTargetClass ( java.lang.Class<> ) ; return org.springframework.data.cassandra.convert.ProxyFactory . getProxy ( ) . getClass ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.text.Format java.text.Format ) { return java.text.Format . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.text.Format java.text.Format ( java.lang.String java.lang.String ) { return java.text.DateFormat . java.text.DateFormat ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.Number java.lang.Number ) { return java.lang.Number . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Number java.lang.Number ( java.lang.String java.lang.String ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( java.lang.String java.lang.String ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( DateTime org.springframework.data.cassandra.convert.DateTime ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Date java.util.Date ( DateTime org.springframework.data.cassandra.convert.DateTime ) { return new java.util.Date ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { return java.lang.Object != null ? java.lang.Object . java.lang.String ( ) : null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T extends java.text.Format > org.springframework.data.cassandra.convert.Converter<java.lang.String,T> < java.lang.String , T > org.springframework.data.cassandra.convert.Converter<java.lang.String,T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return new org.springframework.data.cassandra.convert.CustomConversionsUnitTests.FormatConverterFactory.StringToFormat <> ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<T> < T > java.lang.Class<T> ) { this . java.lang.Class<T> = java.lang.Class<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( java.lang.String java.lang.String ) { if ( java.lang.String . int ( ) == NUMBER ) { return null ; } try { return java.lang.Class<T> . T ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalArgumentException ( java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } }  <METHOD_END>
