<METHOD_START> protected void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) throws javax.xml.parsers.ParserConfigurationException , java.io.IOException , org.xml.sax.SAXException { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.server.support.EmbeddedSolrServer org.springframework.data.solr.server.support.EmbeddedSolrServer ( ) { return new EmbeddedSolrServer ( org.springframework.data.solr.server.support.CoreContainer ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { try { this . java.util.concurrent.atomic.AtomicReference<org.springframework.data.solr.server.support.CoreContainer> . compareAndSet ( null , org.springframework.data.solr.server.support.CoreContainer ( this . java.lang.String ) ) ; } catch ( java.io.FileNotFoundException | java.io.UnsupportedEncodingException java.io.IOException ) { java.io.IOException . void ( ) ; } }  <METHOD_END>
<METHOD_START> public final org.springframework.data.solr.server.support.EmbeddedSolrServer org.springframework.data.solr.server.support.EmbeddedSolrServer ( java.lang.String java.lang.String )			throws javax.xml.parsers.ParserConfigurationException , java.io.IOException , org.xml.sax.SAXException { return new EmbeddedSolrServer ( org.springframework.data.solr.server.support.CoreContainer ( java.lang.String ) , STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.server.support.CoreContainer org.springframework.data.solr.server.support.CoreContainer ( java.lang.String java.lang.String ) throws java.io.FileNotFoundException , java.io.UnsupportedEncodingException { java.lang.String java.lang.String = java.lang.System . java.lang.String ( java.lang.String ) ; if ( StringUtils . isBlank ( java.lang.String ) ) { java.lang.String = ResourceUtils . getFile ( java.lang.String ) . getPath ( ) ; } java.lang.String = java.net.URLDecoder . java.lang.String ( java.lang.String , STRING ) ; java.io.File java.io.File = new java.io.File ( java.lang.String + STRING ) ; if ( ClassUtils . hasConstructor ( CoreContainer .class , java.lang.String .class , java.io.File .class ) ) { return org.springframework.data.solr.server.support.CoreContainer ( java.lang.String , java.io.File ) ; } return org.springframework.data.solr.server.support.CoreContainer ( java.lang.String , java.io.File ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.server.support.CoreContainer org.springframework.data.solr.server.support.CoreContainer ( java.lang.String java.lang.String , java.io.File java.io.File ) { java.lang.reflect.Constructor<org.springframework.data.solr.server.support.CoreContainer> < CoreContainer > java.lang.reflect.Constructor<org.springframework.data.solr.server.support.CoreContainer> = ClassUtils . getConstructorIfAvailable ( CoreContainer .class , java.lang.String .class , java.io.File .class ) ; return BeanUtils . instantiateClass ( java.lang.reflect.Constructor<org.springframework.data.solr.server.support.CoreContainer> , java.lang.String , java.io.File ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.server.support.CoreContainer org.springframework.data.solr.server.support.CoreContainer ( java.lang.String java.lang.String , java.io.File java.io.File ) { java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getStaticMethod ( CoreContainer .class , STRING , java.lang.String .class , java.io.File .class ) ; if ( java.lang.reflect.Method != null ) { return ( CoreContainer ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , null , java.lang.String , java.io.File ) ; } java.lang.reflect.Method = ClassUtils . getStaticMethod ( CoreContainer .class , STRING , java.nio.file.Path .class , java.nio.file.Path .class ) ; return ( CoreContainer ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , null , java.nio.file.FileSystems . java.nio.file.FileSystem ( ) . java.nio.file.Path ( java.lang.String ) , java.nio.file.FileSystems . java.nio.file.FileSystem ( ) . java.nio.file.Path ( java.io.File . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( java.util.concurrent.atomic.AtomicReference<org.springframework.data.solr.server.support.CoreContainer> . get ( ) != null ) { java.util.concurrent.atomic.AtomicReference<org.springframework.data.solr.server.support.CoreContainer> . get ( ) . shutdown ( ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return new java.util.ArrayList <> ( org.springframework.data.solr.server.support.CoreContainer ( ) . getCoreNames ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { void ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.server.support.CoreContainer org.springframework.data.solr.server.support.CoreContainer ( ) { if ( java.util.concurrent.atomic.AtomicReference<org.springframework.data.solr.server.support.CoreContainer> . get ( ) == null ) { void ( ) ; } return java.util.concurrent.atomic.AtomicReference<org.springframework.data.solr.server.support.CoreContainer> . get ( ) ; }  <METHOD_END>
