<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.data.gemfire.RegionFactoryBeanConfig org.springframework.data.gemfire.RegionFactoryBeanConfig ( ) { return new RegionFactoryBeanConfig ( new LocalRegionFactoryBean ( ) , STRING ) { @ java.lang.Override public void void ( ) {			} @ java.lang.Override public void void ( ) { Region org.springframework.data.gemfire.Region = regionFactoryBean . getRegion ( ) ; assertNotNull ( org.springframework.data.gemfire.Region ) ; assertEquals ( DataPolicy . DEFAULT , org.springframework.data.gemfire.Region . getAttributes ( ) . getDataPolicy ( ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Region org.springframework.data.gemfire.Region = regionFactoryBean . getRegion ( ) ; assertNotNull ( org.springframework.data.gemfire.Region ) ; assertEquals ( DataPolicy . DEFAULT , org.springframework.data.gemfire.Region . getAttributes ( ) . getDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private org.springframework.data.gemfire.RegionFactoryBeanConfig org.springframework.data.gemfire.RegionFactoryBeanConfig ( ) { return new RegionFactoryBeanConfig ( new LocalRegionFactoryBean ( ) , STRING ) { @ java.lang.Override public void void ( ) { regionFactoryBean . setDataPolicy ( STRING ) ; } @ java.lang.Override public void void ( ) { assertNotNull ( this . exception ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { regionFactoryBean . setDataPolicy ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { assertNotNull ( this . exception ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { add ( org.springframework.data.gemfire.RegionFactoryBeanConfig ( ) ) ; add ( org.springframework.data.gemfire.RegionFactoryBeanConfig ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.RegionFactory<?,?> < ? , ? > org.springframework.data.gemfire.RegionFactory<?,?> ( ) { return mock ( RegionFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , ( java.lang.String ) null ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . NORMAL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , false , ( java.lang.String ) null ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . NORMAL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , ( java.lang.String ) null ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.LocalRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . NORMAL ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PRELOADED ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.LocalRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . NORMAL ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PRELOADED ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.LocalRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . NORMAL ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PRELOADED ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.LocalRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . NORMAL ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PRELOADED ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , STRING ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . NORMAL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , false , STRING ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . NORMAL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , STRING ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , STRING ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PRELOADED ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , false , STRING ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PRELOADED ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , STRING ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.LocalRegionFactoryBean . setShortcut ( null ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , DataPolicy . PERSISTENT_REPLICATE ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( DataPolicy . NORMAL ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( DataPolicy . PRELOADED ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( DataPolicy . PERSISTENT_REPLICATE ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.LocalRegionFactoryBean . setShortcut ( RegionShortcut . LOCAL_OVERFLOW ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , DataPolicy . PERSISTENT_REPLICATE ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( DataPolicy . NORMAL ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( DataPolicy . PRELOADED ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( DataPolicy . PERSISTENT_REPLICATE ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . setShortcut ( RegionShortcut . LOCAL_PERSISTENT_OVERFLOW ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , false , DataPolicy . PERSISTENT_REPLICATE ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( DataPolicy . PERSISTENT_REPLICATE ) ; }  <METHOD_END>
