<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext ) { this . org.springframework.web.servlet.config.annotation.ApplicationContext = org.springframework.web.servlet.config.annotation.ApplicationContext ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.config.annotation.ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext ( ) { return this . org.springframework.web.servlet.config.annotation.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.web.servlet.config.annotation.ServletContext ) { this . org.springframework.web.servlet.config.annotation.ServletContext = org.springframework.web.servlet.config.annotation.ServletContext ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.config.annotation.ServletContext org.springframework.web.servlet.config.annotation.ServletContext ( ) { return this . org.springframework.web.servlet.config.annotation.ServletContext ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping ( ) { RequestMappingHandlerMapping org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping = org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping ( ) ; org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . setOrder ( NUMBER ) ; org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . setInterceptors ( java.lang.Object[] ( ) ) ; org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . setContentNegotiationManager ( org.springframework.web.servlet.config.annotation.ContentNegotiationManager ( ) ) ; org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . setCorsConfigurations ( java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.CorsConfiguration> ( ) ) ; PathMatchConfigurer org.springframework.web.servlet.config.annotation.PathMatchConfigurer = org.springframework.web.servlet.config.annotation.PathMatchConfigurer ( ) ; if ( org.springframework.web.servlet.config.annotation.PathMatchConfigurer . isUseSuffixPatternMatch ( ) != null ) { org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . setUseSuffixPatternMatch ( org.springframework.web.servlet.config.annotation.PathMatchConfigurer . isUseSuffixPatternMatch ( ) ) ; } if ( org.springframework.web.servlet.config.annotation.PathMatchConfigurer . isUseRegisteredSuffixPatternMatch ( ) != null ) { org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . setUseRegisteredSuffixPatternMatch ( org.springframework.web.servlet.config.annotation.PathMatchConfigurer . isUseRegisteredSuffixPatternMatch ( ) ) ; } if ( org.springframework.web.servlet.config.annotation.PathMatchConfigurer . isUseTrailingSlashMatch ( ) != null ) { org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . setUseTrailingSlashMatch ( org.springframework.web.servlet.config.annotation.PathMatchConfigurer . isUseTrailingSlashMatch ( ) ) ; } UrlPathHelper org.springframework.web.servlet.config.annotation.UrlPathHelper = org.springframework.web.servlet.config.annotation.PathMatchConfigurer . getUrlPathHelper ( ) ; if ( org.springframework.web.servlet.config.annotation.UrlPathHelper != null ) { org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . setUrlPathHelper ( org.springframework.web.servlet.config.annotation.UrlPathHelper ) ; } PathMatcher org.springframework.web.servlet.config.annotation.PathMatcher = org.springframework.web.servlet.config.annotation.PathMatchConfigurer . getPathMatcher ( ) ; if ( org.springframework.web.servlet.config.annotation.PathMatcher != null ) { org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . setPathMatcher ( org.springframework.web.servlet.config.annotation.PathMatcher ) ; } return org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping ( ) { return new RequestMappingHandlerMapping ( ) ; }  <METHOD_END>
<METHOD_START> protected final java.lang.Object [] java.lang.Object[] ( ) { if ( this . java.util.List<java.lang.Object> == null ) { InterceptorRegistry org.springframework.web.servlet.config.annotation.InterceptorRegistry = new InterceptorRegistry ( ) ; void ( org.springframework.web.servlet.config.annotation.InterceptorRegistry ) ; org.springframework.web.servlet.config.annotation.InterceptorRegistry . addInterceptor ( new ConversionServiceExposingInterceptor ( org.springframework.web.servlet.config.annotation.FormattingConversionService ( ) ) ) ; org.springframework.web.servlet.config.annotation.InterceptorRegistry . addInterceptor ( new ResourceUrlProviderExposingInterceptor ( org.springframework.web.servlet.config.annotation.ResourceUrlProvider ( ) ) ) ; this . java.util.List<java.lang.Object> = org.springframework.web.servlet.config.annotation.InterceptorRegistry . getInterceptors ( ) ; } return this . java.util.List<java.lang.Object> . java.lang.Object[] ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( InterceptorRegistry org.springframework.web.servlet.config.annotation.InterceptorRegistry ) {	}  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.config.annotation.PathMatchConfigurer org.springframework.web.servlet.config.annotation.PathMatchConfigurer ( ) { if ( this . org.springframework.web.servlet.config.annotation.PathMatchConfigurer == null ) { this . org.springframework.web.servlet.config.annotation.PathMatchConfigurer = new PathMatchConfigurer ( ) ; void ( this . org.springframework.web.servlet.config.annotation.PathMatchConfigurer ) ; } return this . org.springframework.web.servlet.config.annotation.PathMatchConfigurer ; }  <METHOD_END>
<METHOD_START> protected void void ( PathMatchConfigurer org.springframework.web.servlet.config.annotation.PathMatchConfigurer ) {	}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.PathMatcher org.springframework.web.servlet.config.annotation.PathMatcher ( ) { PathMatcher org.springframework.web.servlet.config.annotation.PathMatcher = org.springframework.web.servlet.config.annotation.PathMatchConfigurer ( ) . getPathMatcher ( ) ; return ( org.springframework.web.servlet.config.annotation.PathMatcher != null ? org.springframework.web.servlet.config.annotation.PathMatcher : new AntPathMatcher ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.UrlPathHelper org.springframework.web.servlet.config.annotation.UrlPathHelper ( ) { UrlPathHelper org.springframework.web.servlet.config.annotation.UrlPathHelper = org.springframework.web.servlet.config.annotation.PathMatchConfigurer ( ) . getUrlPathHelper ( ) ; return ( org.springframework.web.servlet.config.annotation.UrlPathHelper != null ? org.springframework.web.servlet.config.annotation.UrlPathHelper : new UrlPathHelper ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.ContentNegotiationManager org.springframework.web.servlet.config.annotation.ContentNegotiationManager ( ) { if ( this . org.springframework.web.servlet.config.annotation.ContentNegotiationManager == null ) { ContentNegotiationConfigurer org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer = new ContentNegotiationConfigurer ( this . org.springframework.web.servlet.config.annotation.ServletContext ) ; org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer . mediaTypes ( java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.MediaType> ( ) ) ; void ( org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer ) ; try { this . org.springframework.web.servlet.config.annotation.ContentNegotiationManager = org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer . getContentNegotiationManager ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanInitializationException ( STRING , java.lang.Exception ) ; } } return this . org.springframework.web.servlet.config.annotation.ContentNegotiationManager ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.MediaType> ( ) { java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.MediaType> = new java.util.HashMap<java.lang.String,org.springframework.web.servlet.config.annotation.MediaType> <> ( NUMBER ) ; if ( boolean ) { java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.MediaType> . put ( STRING , MediaType . APPLICATION_ATOM_XML ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.MediaType> . put ( STRING , MediaType . APPLICATION_RSS_XML ) ; } if ( boolean || boolean ) { java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.MediaType> . put ( STRING , MediaType . APPLICATION_XML ) ; } if ( boolean || boolean || boolean ) { java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.MediaType> . put ( STRING , MediaType . APPLICATION_JSON ) ; } if ( boolean ) { java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.MediaType> . put ( STRING , MediaType . valueOf ( STRING ) ) ; } if ( boolean ) { java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.MediaType> . put ( STRING , MediaType . valueOf ( STRING ) ) ; } return java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.MediaType> ; }  <METHOD_END>
<METHOD_START> protected void void ( ContentNegotiationConfigurer org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer ) {	}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.HandlerMapping org.springframework.web.servlet.config.annotation.HandlerMapping ( ) { ViewControllerRegistry org.springframework.web.servlet.config.annotation.ViewControllerRegistry = new ViewControllerRegistry ( ) ; org.springframework.web.servlet.config.annotation.ViewControllerRegistry . setApplicationContext ( this . org.springframework.web.servlet.config.annotation.ApplicationContext ) ; void ( org.springframework.web.servlet.config.annotation.ViewControllerRegistry ) ; AbstractHandlerMapping org.springframework.web.servlet.config.annotation.AbstractHandlerMapping = org.springframework.web.servlet.config.annotation.ViewControllerRegistry . getHandlerMapping ( ) ; org.springframework.web.servlet.config.annotation.AbstractHandlerMapping = ( org.springframework.web.servlet.config.annotation.AbstractHandlerMapping != null ? org.springframework.web.servlet.config.annotation.AbstractHandlerMapping : new org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport.EmptyHandlerMapping ( ) ) ; org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . setPathMatcher ( org.springframework.web.servlet.config.annotation.PathMatcher ( ) ) ; org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . setUrlPathHelper ( org.springframework.web.servlet.config.annotation.UrlPathHelper ( ) ) ; org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . setInterceptors ( java.lang.Object[] ( ) ) ; org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . setCorsConfigurations ( java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.CorsConfiguration> ( ) ) ; return org.springframework.web.servlet.config.annotation.AbstractHandlerMapping ; }  <METHOD_END>
<METHOD_START> protected void void ( ViewControllerRegistry org.springframework.web.servlet.config.annotation.ViewControllerRegistry ) {	}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.BeanNameUrlHandlerMapping org.springframework.web.servlet.config.annotation.BeanNameUrlHandlerMapping ( ) { BeanNameUrlHandlerMapping org.springframework.web.servlet.config.annotation.BeanNameUrlHandlerMapping = new BeanNameUrlHandlerMapping ( ) ; org.springframework.web.servlet.config.annotation.BeanNameUrlHandlerMapping . setOrder ( NUMBER ) ; org.springframework.web.servlet.config.annotation.BeanNameUrlHandlerMapping . setInterceptors ( java.lang.Object[] ( ) ) ; org.springframework.web.servlet.config.annotation.BeanNameUrlHandlerMapping . setCorsConfigurations ( java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.CorsConfiguration> ( ) ) ; return org.springframework.web.servlet.config.annotation.BeanNameUrlHandlerMapping ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.HandlerMapping org.springframework.web.servlet.config.annotation.HandlerMapping ( ) { ResourceHandlerRegistry org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry = new ResourceHandlerRegistry ( this . org.springframework.web.servlet.config.annotation.ApplicationContext , this . org.springframework.web.servlet.config.annotation.ServletContext , org.springframework.web.servlet.config.annotation.ContentNegotiationManager ( ) ) ; void ( org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry ) ; AbstractHandlerMapping org.springframework.web.servlet.config.annotation.AbstractHandlerMapping = org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry . getHandlerMapping ( ) ; if ( org.springframework.web.servlet.config.annotation.AbstractHandlerMapping != null ) { org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . setPathMatcher ( org.springframework.web.servlet.config.annotation.PathMatcher ( ) ) ; org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . setUrlPathHelper ( org.springframework.web.servlet.config.annotation.UrlPathHelper ( ) ) ; org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . setInterceptors ( new ResourceUrlProviderExposingInterceptor ( org.springframework.web.servlet.config.annotation.ResourceUrlProvider ( ) ) ) ; org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . setCorsConfigurations ( java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.CorsConfiguration> ( ) ) ; } else { org.springframework.web.servlet.config.annotation.AbstractHandlerMapping = new org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport.EmptyHandlerMapping ( ) ; } return org.springframework.web.servlet.config.annotation.AbstractHandlerMapping ; }  <METHOD_END>
<METHOD_START> protected void void ( ResourceHandlerRegistry org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry ) {	}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.ResourceUrlProvider org.springframework.web.servlet.config.annotation.ResourceUrlProvider ( ) { ResourceUrlProvider org.springframework.web.servlet.config.annotation.ResourceUrlProvider = new ResourceUrlProvider ( ) ; UrlPathHelper org.springframework.web.servlet.config.annotation.UrlPathHelper = org.springframework.web.servlet.config.annotation.PathMatchConfigurer ( ) . getUrlPathHelper ( ) ; if ( org.springframework.web.servlet.config.annotation.UrlPathHelper != null ) { org.springframework.web.servlet.config.annotation.ResourceUrlProvider . setUrlPathHelper ( org.springframework.web.servlet.config.annotation.UrlPathHelper ) ; } PathMatcher org.springframework.web.servlet.config.annotation.PathMatcher = org.springframework.web.servlet.config.annotation.PathMatchConfigurer ( ) . getPathMatcher ( ) ; if ( org.springframework.web.servlet.config.annotation.PathMatcher != null ) { org.springframework.web.servlet.config.annotation.ResourceUrlProvider . setPathMatcher ( org.springframework.web.servlet.config.annotation.PathMatcher ) ; } return org.springframework.web.servlet.config.annotation.ResourceUrlProvider ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.HandlerMapping org.springframework.web.servlet.config.annotation.HandlerMapping ( ) { DefaultServletHandlerConfigurer org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer = new DefaultServletHandlerConfigurer ( org.springframework.web.servlet.config.annotation.ServletContext ) ; void ( org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer ) ; AbstractHandlerMapping org.springframework.web.servlet.config.annotation.AbstractHandlerMapping = org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer . getHandlerMapping ( ) ; org.springframework.web.servlet.config.annotation.AbstractHandlerMapping = org.springframework.web.servlet.config.annotation.AbstractHandlerMapping != null ? org.springframework.web.servlet.config.annotation.AbstractHandlerMapping : new org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport.EmptyHandlerMapping ( ) ; return org.springframework.web.servlet.config.annotation.AbstractHandlerMapping ; }  <METHOD_END>
<METHOD_START> protected void void ( DefaultServletHandlerConfigurer org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer ) {	}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter ( ) { RequestMappingHandlerAdapter org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter = org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter ( ) ; org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . setContentNegotiationManager ( org.springframework.web.servlet.config.annotation.ContentNegotiationManager ( ) ) ; org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . setMessageConverters ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ( ) ) ; org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . setWebBindingInitializer ( org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer ( ) ) ; org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . setCustomArgumentResolvers ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> ( ) ) ; org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . setCustomReturnValueHandlers ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> ( ) ) ; if ( boolean ) { org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . setRequestBodyAdvice ( java.util.Collections . java.util.List ( new JsonViewRequestBodyAdvice ( ) ) ) ; org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . setResponseBodyAdvice ( java.util.Collections . java.util.List ( new JsonViewResponseBodyAdvice ( ) ) ) ; } AsyncSupportConfigurer org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer = new AsyncSupportConfigurer ( ) ; void ( org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer ) ; if ( org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer . getTaskExecutor ( ) != null ) { org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . setTaskExecutor ( org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer . getTaskExecutor ( ) ) ; } if ( org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer . getTimeout ( ) != null ) { org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . setAsyncRequestTimeout ( org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer . getTimeout ( ) ) ; } org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . setCallableInterceptors ( org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer . getCallableInterceptors ( ) ) ; org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . setDeferredResultInterceptors ( org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer . getDeferredResultInterceptors ( ) ) ; return org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter ( ) { return new RequestMappingHandlerAdapter ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer ( ) { ConfigurableWebBindingInitializer org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer = new ConfigurableWebBindingInitializer ( ) ; org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer . setConversionService ( org.springframework.web.servlet.config.annotation.FormattingConversionService ( ) ) ; org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer . setValidator ( org.springframework.web.servlet.config.annotation.Validator ( ) ) ; org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer . setMessageCodesResolver ( org.springframework.web.servlet.config.annotation.MessageCodesResolver ( ) ) ; return org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.config.annotation.MessageCodesResolver org.springframework.web.servlet.config.annotation.MessageCodesResolver ( ) { return null ; }  <METHOD_END>
<METHOD_START> protected void void ( AsyncSupportConfigurer org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer ) {	}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.FormattingConversionService org.springframework.web.servlet.config.annotation.FormattingConversionService ( ) { FormattingConversionService org.springframework.web.servlet.config.annotation.FormattingConversionService = new DefaultFormattingConversionService ( ) ; void ( org.springframework.web.servlet.config.annotation.FormattingConversionService ) ; return org.springframework.web.servlet.config.annotation.FormattingConversionService ; }  <METHOD_END>
<METHOD_START> protected void void ( FormatterRegistry org.springframework.web.servlet.config.annotation.FormatterRegistry ) {	}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.Validator org.springframework.web.servlet.config.annotation.Validator ( ) { Validator org.springframework.web.servlet.config.annotation.Validator = org.springframework.web.servlet.config.annotation.Validator ( ) ; if ( org.springframework.web.servlet.config.annotation.Validator == null ) { if ( ClassUtils . isPresent ( STRING , java.lang.Class<? extends org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport> ( ) . java.lang.ClassLoader ( ) ) ) { java.lang.Class<?> < ? > java.lang.Class<?> ; try { java.lang.String java.lang.String = STRING ; java.lang.Class<?> = ClassUtils . forName ( java.lang.String , org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport .class . java.lang.ClassLoader ( ) ) ; } catch ( java.lang.ClassNotFoundException | java.lang.LinkageError java.lang.Throwable ) { throw new BeanInitializationException ( STRING , java.lang.Throwable ) ; } org.springframework.web.servlet.config.annotation.Validator = ( Validator ) BeanUtils . instantiateClass ( java.lang.Class<> ) ; } else { org.springframework.web.servlet.config.annotation.Validator = new org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport.NoOpValidator ( ) ; } } return org.springframework.web.servlet.config.annotation.Validator ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.config.annotation.Validator org.springframework.web.servlet.config.annotation.Validator ( ) { return null ; }  <METHOD_END>
<METHOD_START> protected final java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> ( ) { if ( this . java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> == null ) { this . java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> = new java.util.ArrayList <> ( ) ; void ( this . java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> ) ; } return this . java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> ) {	}  <METHOD_END>
<METHOD_START> protected final java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> ( ) { if ( this . java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> == null ) { this . java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> = new java.util.ArrayList <> ( ) ; void ( this . java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> ) ; } return this . java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> ) {	}  <METHOD_END>
<METHOD_START> protected final java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ( ) { if ( this . java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> == null ) { this . java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> = new java.util.ArrayList <> ( ) ; void ( this . java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) ; if ( this . java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . isEmpty ( ) ) { void ( this . java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) ; } void ( this . java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) ; } return this . java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) {	}  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) {	}  <METHOD_END>
<METHOD_START> protected final void void ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) { StringHttpMessageConverter org.springframework.web.servlet.config.annotation.StringHttpMessageConverter = new StringHttpMessageConverter ( ) ; org.springframework.web.servlet.config.annotation.StringHttpMessageConverter . setWriteAcceptCharset ( false ) ; java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( new ByteArrayHttpMessageConverter ( ) ) ; java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( org.springframework.web.servlet.config.annotation.StringHttpMessageConverter ) ; java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( new ResourceHttpMessageConverter ( ) ) ; java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( new SourceHttpMessageConverter <> ( ) ) ; java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( new AllEncompassingFormHttpMessageConverter ( ) ) ; if ( boolean ) { java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( new AtomFeedHttpMessageConverter ( ) ) ; java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( new RssChannelHttpMessageConverter ( ) ) ; } if ( boolean ) { ObjectMapper org.springframework.web.servlet.config.annotation.ObjectMapper = Jackson2ObjectMapperBuilder . xml ( ) . applicationContext ( this . org.springframework.web.servlet.config.annotation.ApplicationContext ) . build ( ) ; java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2XmlHttpMessageConverter ( org.springframework.web.servlet.config.annotation.ObjectMapper ) ) ; } else if ( boolean ) { java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( new Jaxb2RootElementHttpMessageConverter ( ) ) ; } if ( boolean ) { ObjectMapper org.springframework.web.servlet.config.annotation.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . applicationContext ( this . org.springframework.web.servlet.config.annotation.ApplicationContext ) . build ( ) ; java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( org.springframework.web.servlet.config.annotation.ObjectMapper ) ) ; } else if ( boolean ) { java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( new GsonHttpMessageConverter ( ) ) ; } else if ( boolean ) { java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( new JsonbHttpMessageConverter ( ) ) ; } if ( boolean ) { ObjectMapper org.springframework.web.servlet.config.annotation.ObjectMapper = Jackson2ObjectMapperBuilder . smile ( ) . applicationContext ( this . org.springframework.web.servlet.config.annotation.ApplicationContext ) . build ( ) ; java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2SmileHttpMessageConverter ( org.springframework.web.servlet.config.annotation.ObjectMapper ) ) ; } if ( boolean ) { ObjectMapper org.springframework.web.servlet.config.annotation.ObjectMapper = Jackson2ObjectMapperBuilder . cbor ( ) . applicationContext ( this . org.springframework.web.servlet.config.annotation.ApplicationContext ) . build ( ) ; java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2CborHttpMessageConverter ( org.springframework.web.servlet.config.annotation.ObjectMapper ) ) ; } }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.CompositeUriComponentsContributor org.springframework.web.servlet.config.annotation.CompositeUriComponentsContributor ( ) { return new CompositeUriComponentsContributor ( org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter ( ) . getArgumentResolvers ( ) , org.springframework.web.servlet.config.annotation.FormattingConversionService ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.HttpRequestHandlerAdapter org.springframework.web.servlet.config.annotation.HttpRequestHandlerAdapter ( ) { return new HttpRequestHandlerAdapter ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.SimpleControllerHandlerAdapter org.springframework.web.servlet.config.annotation.SimpleControllerHandlerAdapter ( ) { return new SimpleControllerHandlerAdapter ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.HandlerExceptionResolver org.springframework.web.servlet.config.annotation.HandlerExceptionResolver ( ) { java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> = new java.util.ArrayList<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> <> ( ) ; void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) ; if ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> . isEmpty ( ) ) { void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) ; } void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) ; HandlerExceptionResolverComposite org.springframework.web.servlet.config.annotation.HandlerExceptionResolverComposite = new HandlerExceptionResolverComposite ( ) ; org.springframework.web.servlet.config.annotation.HandlerExceptionResolverComposite . setOrder ( NUMBER ) ; org.springframework.web.servlet.config.annotation.HandlerExceptionResolverComposite . setExceptionResolvers ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) ; return org.springframework.web.servlet.config.annotation.HandlerExceptionResolverComposite ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) {	}  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) {	}  <METHOD_END>
<METHOD_START> protected final void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) { ExceptionHandlerExceptionResolver org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver = org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver ( ) ; org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver . setContentNegotiationManager ( org.springframework.web.servlet.config.annotation.ContentNegotiationManager ( ) ) ; org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver . setMessageConverters ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ( ) ) ; org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver . setCustomArgumentResolvers ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> ( ) ) ; org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver . setCustomReturnValueHandlers ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> ( ) ) ; if ( boolean ) { org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver . setResponseBodyAdvice ( java.util.Collections . java.util.List ( new JsonViewResponseBodyAdvice ( ) ) ) ; } org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver . setApplicationContext ( this . org.springframework.web.servlet.config.annotation.ApplicationContext ) ; org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> . add ( org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver ) ; ResponseStatusExceptionResolver org.springframework.web.servlet.config.annotation.ResponseStatusExceptionResolver = new ResponseStatusExceptionResolver ( ) ; org.springframework.web.servlet.config.annotation.ResponseStatusExceptionResolver . setMessageSource ( this . org.springframework.web.servlet.config.annotation.ApplicationContext ) ; java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> . add ( org.springframework.web.servlet.config.annotation.ResponseStatusExceptionResolver ) ; java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> . add ( new DefaultHandlerExceptionResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver ( ) { return new ExceptionHandlerExceptionResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.ViewResolver org.springframework.web.servlet.config.annotation.ViewResolver ( ) { ViewResolverRegistry org.springframework.web.servlet.config.annotation.ViewResolverRegistry = new ViewResolverRegistry ( ) ; org.springframework.web.servlet.config.annotation.ViewResolverRegistry . setContentNegotiationManager ( org.springframework.web.servlet.config.annotation.ContentNegotiationManager ( ) ) ; org.springframework.web.servlet.config.annotation.ViewResolverRegistry . setApplicationContext ( this . org.springframework.web.servlet.config.annotation.ApplicationContext ) ; void ( org.springframework.web.servlet.config.annotation.ViewResolverRegistry ) ; if ( org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getViewResolvers ( ) . isEmpty ( ) ) { java.lang.String [] java.lang.String[] = BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( this . org.springframework.web.servlet.config.annotation.ApplicationContext , ViewResolver .class , true , false ) ; if ( java.lang.String[] . int == NUMBER ) { org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getViewResolvers ( ) . add ( new InternalResourceViewResolver ( ) ) ; } } ViewResolverComposite org.springframework.web.servlet.config.annotation.ViewResolverComposite = new ViewResolverComposite ( ) ; org.springframework.web.servlet.config.annotation.ViewResolverComposite . setOrder ( org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getOrder ( ) ) ; org.springframework.web.servlet.config.annotation.ViewResolverComposite . setViewResolvers ( org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getViewResolvers ( ) ) ; org.springframework.web.servlet.config.annotation.ViewResolverComposite . setApplicationContext ( this . org.springframework.web.servlet.config.annotation.ApplicationContext ) ; org.springframework.web.servlet.config.annotation.ViewResolverComposite . setServletContext ( this . org.springframework.web.servlet.config.annotation.ServletContext ) ; return org.springframework.web.servlet.config.annotation.ViewResolverComposite ; }  <METHOD_END>
<METHOD_START> protected void void ( ViewResolverRegistry org.springframework.web.servlet.config.annotation.ViewResolverRegistry ) {	}  <METHOD_END>
<METHOD_START> protected final java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.CorsConfiguration> < java.lang.String , CorsConfiguration > java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.CorsConfiguration> ( ) { if ( this . java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.CorsConfiguration> == null ) { CorsRegistry org.springframework.web.servlet.config.annotation.CorsRegistry = new CorsRegistry ( ) ; void ( org.springframework.web.servlet.config.annotation.CorsRegistry ) ; this . java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.CorsConfiguration> = org.springframework.web.servlet.config.annotation.CorsRegistry . getCorsConfigurations ( ) ; } return this . java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.CorsConfiguration> ; }  <METHOD_END>
<METHOD_START> protected void void ( CorsRegistry org.springframework.web.servlet.config.annotation.CorsRegistry ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( HttpServletRequest org.springframework.web.servlet.config.annotation.HttpServletRequest ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.web.servlet.config.annotation.Errors ) {		}  <METHOD_END>
