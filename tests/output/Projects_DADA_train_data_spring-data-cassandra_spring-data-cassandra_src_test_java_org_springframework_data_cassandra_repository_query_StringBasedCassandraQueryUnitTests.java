<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { BasicCassandraMappingContext org.springframework.data.cassandra.repository.query.BasicCassandraMappingContext = new BasicCassandraMappingContext ( ) ; org.springframework.data.cassandra.repository.query.BasicCassandraMappingContext . setUserTypeResolver ( org.springframework.data.cassandra.repository.query.UserTypeResolver ) ; when ( org.springframework.data.cassandra.repository.query.CassandraOperations . getCqlOperations ( ) ) . thenReturn ( org.springframework.data.cassandra.repository.query.CqlOperations ) ; when ( org.springframework.data.cassandra.repository.query.CqlOperations . execute ( any ( SessionCallback .class ) ) ) . thenAnswer ( invocation -> ( ( SessionCallback ) invocation . getArguments ( ) [ NUMBER ] ) . doInSession ( session ) ) ; when ( org.springframework.data.cassandra.repository.query.Session . getCluster ( ) ) . thenReturn ( org.springframework.data.cassandra.repository.query.Cluster ) ; when ( org.springframework.data.cassandra.repository.query.Cluster . getConfiguration ( ) ) . thenReturn ( org.springframework.data.cassandra.repository.query.Configuration ) ; when ( org.springframework.data.cassandra.repository.query.Configuration . getCodecRegistry ( ) ) . thenReturn ( CodecRegistry . DEFAULT_INSTANCE ) ; this . org.springframework.data.cassandra.repository.query.RepositoryMetadata = AbstractRepositoryMetadata . getMetadata ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQueryUnitTests.SampleRepository .class ) ; this . org.springframework.data.cassandra.repository.query.MappingCassandraConverter = new MappingCassandraConverter ( org.springframework.data.cassandra.repository.query.BasicCassandraMappingContext ) ; this . org.springframework.data.cassandra.repository.query.ProjectionFactory = new SpelAwareProxyProjectionFactory ( ) ; this . org.springframework.data.cassandra.repository.query.MappingCassandraConverter . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , java.lang.String .class ) ; CassandraParametersParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , STRING ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , java.lang.String .class ) ; CassandraParametersParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , STRING ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , java.lang.String .class ) ; CassandraParametersParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , STRING ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , java.lang.String .class ) ; CassandraParametersParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , java.nio.ByteBuffer . java.nio.ByteBuffer ( new byte [] { NUMBER , NUMBER , NUMBER , NUMBER } ) ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , java.util.Collection .class ) ; CassandraParametersParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , java.util.Collection .class , int .class ) ; CassandraParametersParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , NUMBER ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = QueryCreationException .class ) public void void ( ) { StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , java.lang.String .class ) ; CassandraParametersParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , STRING ) ; org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = QueryCreationException .class ) public void void ( ) { StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , java.lang.String .class ) ; CassandraParametersParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , STRING ) ; org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , java.util.Collection .class ) ; CassandraParametersParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , new java.util.HashSet <> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , java.lang.String .class , java.lang.String .class ) ; CassandraParametersParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , STRING , STRING ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , java.lang.String .class ) ; CassandraParametersParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , STRING ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , java.lang.String .class ) ; CassandraParametersParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , STRING ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , java.lang.String .class ) ; CassandraParametersParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , STRING ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , STRING ) ; java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , java.lang.String .class ) ; CassandraParametersParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , STRING ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , java.lang.String .class , java.lang.String .class ) ; CassandraParametersParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , STRING , STRING ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; java.lang.String java.lang.String = Person .class . java.lang.String ( ) . java.lang.String ( ) ; Select org.springframework.data.cassandra.repository.query.Select = QueryBuilder . select ( ) . all ( ) . from ( java.lang.String ) ; org.springframework.data.cassandra.repository.query.Select . setForceNoValues ( true ) ; org.springframework.data.cassandra.repository.query.Select . where ( QueryBuilder . eq ( STRING , STRING ) ) . and ( QueryBuilder . eq ( STRING , STRING ) ) ; assertThat ( java.lang.String ) . isEqualTo ( org.springframework.data.cassandra.repository.query.Select . getQueryString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , java.time.LocalDate .class ) ; CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor = new ConvertingParameterAccessor ( org.springframework.data.cassandra.repository.query.MappingCassandraConverter , new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , java.time.LocalDate . java.time.LocalDate ( NUMBER , NUMBER , NUMBER ) ) ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Field org.springframework.data.cassandra.repository.query.Field = org.springframework.data.cassandra.repository.query.Field ( STRING , DataType . varchar ( ) ) ; Field org.springframework.data.cassandra.repository.query.Field = org.springframework.data.cassandra.repository.query.Field ( STRING , DataType . varchar ( ) ) ; UserType org.springframework.data.cassandra.repository.query.UserType = org.springframework.data.cassandra.repository.query.UserType ( STRING , java.util.Arrays . java.util.List ( org.springframework.data.cassandra.repository.query.Field , org.springframework.data.cassandra.repository.query.Field ) ) ; when ( org.springframework.data.cassandra.repository.query.UserTypeResolver . resolveType ( CqlIdentifier . cqlId ( STRING ) ) ) . thenReturn ( org.springframework.data.cassandra.repository.query.UserType ) ; StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , Address .class ) ; CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor = new ConvertingParameterAccessor ( org.springframework.data.cassandra.repository.query.MappingCassandraConverter , new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , new Address ( ) ) ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Field org.springframework.data.cassandra.repository.query.Field = org.springframework.data.cassandra.repository.query.Field ( STRING , DataType . varchar ( ) ) ; Field org.springframework.data.cassandra.repository.query.Field = org.springframework.data.cassandra.repository.query.Field ( STRING , DataType . varchar ( ) ) ; UserType org.springframework.data.cassandra.repository.query.UserType = org.springframework.data.cassandra.repository.query.UserType ( STRING , java.util.Arrays . java.util.List ( org.springframework.data.cassandra.repository.query.Field , org.springframework.data.cassandra.repository.query.Field ) ) ; when ( org.springframework.data.cassandra.repository.query.UDTValue . getType ( ) ) . thenReturn ( org.springframework.data.cassandra.repository.query.UserType ) ; StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( STRING , UDTValue .class ) ; CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor = new ConvertingParameterAccessor ( org.springframework.data.cassandra.repository.query.MappingCassandraConverter , new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . getQueryMethod ( ) , org.springframework.data.cassandra.repository.query.UDTValue ) ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery org.springframework.data.cassandra.repository.query.StringBasedCassandraQuery ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.data.cassandra.repository.query.StringBasedCassandraQueryUnitTests.SampleRepository .class , java.lang.String , java.lang.Class<?>[] ) ; CassandraQueryMethod org.springframework.data.cassandra.repository.query.CassandraQueryMethod = new CassandraQueryMethod ( java.lang.reflect.Method , org.springframework.data.cassandra.repository.query.RepositoryMetadata , org.springframework.data.cassandra.repository.query.ProjectionFactory , org.springframework.data.cassandra.repository.query.MappingCassandraConverter . getMappingContext ( ) ) ; return new StringBasedCassandraQuery ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod , org.springframework.data.cassandra.repository.query.CassandraOperations , org.springframework.data.cassandra.repository.query.SpelExpressionParser , new ExtensionAwareEvaluationContextProvider ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.repository.query.Field org.springframework.data.cassandra.repository.query.Field ( java.lang.String java.lang.String , DataType org.springframework.data.cassandra.repository.query.DataType ) { try { java.lang.reflect.Constructor<org.springframework.data.cassandra.repository.query.Field> < Field > java.lang.reflect.Constructor<org.springframework.data.cassandra.repository.query.Field> = Field .class . java.lang.reflect.Constructor<org.springframework.data.cassandra.repository.query.Field> ( java.lang.String .class , DataType .class ) ; java.lang.reflect.Constructor<org.springframework.data.cassandra.repository.query.Field> . setAccessible ( true ) ; return java.lang.reflect.Constructor<org.springframework.data.cassandra.repository.query.Field> . newInstance ( java.lang.String , org.springframework.data.cassandra.repository.query.DataType ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.repository.query.UserType org.springframework.data.cassandra.repository.query.UserType ( java.lang.String java.lang.String , java.util.Collection<org.springframework.data.cassandra.repository.query.Field> < Field > java.util.Collection<org.springframework.data.cassandra.repository.query.Field> ) { try { java.lang.reflect.Constructor<org.springframework.data.cassandra.repository.query.UserType> < UserType > java.lang.reflect.Constructor<org.springframework.data.cassandra.repository.query.UserType> = UserType .class . java.lang.reflect.Constructor<org.springframework.data.cassandra.repository.query.UserType> ( java.lang.String .class , java.lang.String .class , java.util.Collection .class , ProtocolVersion .class , CodecRegistry .class ) ; java.lang.reflect.Constructor<org.springframework.data.cassandra.repository.query.UserType> . setAccessible ( true ) ; return java.lang.reflect.Constructor<org.springframework.data.cassandra.repository.query.UserType> . newInstance ( java.lang.String , java.lang.String , java.util.Collection<org.springframework.data.cassandra.repository.query.Field> , ProtocolVersion . NEWEST_SUPPORTED , CodecRegistry . DEFAULT_INSTANCE ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( @ Param ( STRING ) java.lang.String java.lang.String , @ Param ( STRING ) java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> , int int );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( @ Param ( STRING ) java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( @ Param ( STRING ) java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.time.LocalDate java.time.LocalDate );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( Address org.springframework.data.cassandra.repository.query.Address );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( UDTValue org.springframework.data.cassandra.repository.query.UDTValue );  <METHOD_END>
<METHOD_START> @ org.springframework.data.cassandra.repository.query.StringBasedCassandraQueryUnitTests.ComposedQueryAnnotation org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.lang.String java.lang.String );  <METHOD_END>
