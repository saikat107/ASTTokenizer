<METHOD_START> public abstract org.springframework.data.domain.AbstractPageRequest org.springframework.data.domain.AbstractPageRequest ( int int , int int );  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.domain.AbstractPageRequest ( - NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.domain.AbstractPageRequest ( NUMBER , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pageable org.springframework.data.domain.Pageable = org.springframework.data.domain.AbstractPageRequest ( NUMBER , NUMBER ) ; assertThat ( org.springframework.data.domain.Pageable . hasPrevious ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.domain.Pageable . next ( ) ) . isEqualTo ( ( Pageable ) org.springframework.data.domain.AbstractPageRequest ( NUMBER , NUMBER ) ) ; Pageable org.springframework.data.domain.Pageable = org.springframework.data.domain.Pageable . previousOrFirst ( ) ; assertThat ( org.springframework.data.domain.Pageable . hasPrevious ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.domain.Pageable ) . isEqualTo ( ( Pageable ) org.springframework.data.domain.AbstractPageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.domain.Pageable ) . isEqualTo ( org.springframework.data.domain.Pageable . first ( ) ) ; assertThat ( org.springframework.data.domain.Pageable . previousOrFirst ( ) ) . isEqualTo ( org.springframework.data.domain.Pageable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractPageRequest org.springframework.data.domain.AbstractPageRequest = org.springframework.data.domain.AbstractPageRequest ( NUMBER , NUMBER ) ; assertEqualsAndHashcode ( org.springframework.data.domain.AbstractPageRequest , org.springframework.data.domain.AbstractPageRequest ) ; assertEqualsAndHashcode ( org.springframework.data.domain.AbstractPageRequest , org.springframework.data.domain.AbstractPageRequest ( NUMBER , NUMBER ) ) ; assertNotEqualsAndHashcode ( org.springframework.data.domain.AbstractPageRequest , org.springframework.data.domain.AbstractPageRequest ( NUMBER , NUMBER ) ) ; assertNotEqualsAndHashcode ( org.springframework.data.domain.AbstractPageRequest , org.springframework.data.domain.AbstractPageRequest ( NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.domain.AbstractPageRequest ( NUMBER , NUMBER ) ; }  <METHOD_END>
