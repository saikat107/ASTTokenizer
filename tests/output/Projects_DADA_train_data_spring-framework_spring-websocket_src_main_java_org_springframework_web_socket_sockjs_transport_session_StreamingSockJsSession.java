<METHOD_START> public void ( java.lang.String java.lang.String , SockJsServiceConfig org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig , WebSocketHandler org.springframework.web.socket.sockjs.transport.session.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { super( java.lang.String , org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig , org.springframework.web.socket.sockjs.transport.session.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ); }  <METHOD_END>
<METHOD_START> protected abstract byte [] byte[] ( ServerHttpRequest org.springframework.web.socket.sockjs.transport.session.ServerHttpRequest );  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ServerHttpRequest org.springframework.web.socket.sockjs.transport.session.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.transport.session.ServerHttpResponse , boolean boolean ) throws java.io.IOException { byte [] byte[] = byte[] ( org.springframework.web.socket.sockjs.transport.session.ServerHttpRequest ) ; Assert . state ( byte[] != null , STRING ) ; org.springframework.web.socket.sockjs.transport.session.ServerHttpResponse . getBody ( ) . write ( byte[] ) ; org.springframework.web.socket.sockjs.transport.session.ServerHttpResponse . flush ( ) ; if ( boolean ) { writeFrame ( SockJsFrame . openFrame ( ) ) ; } void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) org.springframework.web.socket.sockjs.transport.session.SockJsTransportFailureException { while ( ! getMessageCache ( ) . isEmpty ( ) ) { java.lang.String java.lang.String = getMessageCache ( ) . poll ( ) ; SockJsMessageCodec org.springframework.web.socket.sockjs.transport.session.SockJsMessageCodec = getSockJsServiceConfig ( ) . getMessageCodec ( ) ; SockJsFrame org.springframework.web.socket.sockjs.transport.session.SockJsFrame = SockJsFrame . messageFrame ( org.springframework.web.socket.sockjs.transport.session.SockJsMessageCodec , java.lang.String ) ; writeFrame ( org.springframework.web.socket.sockjs.transport.session.SockJsFrame ) ; this . int += ( org.springframework.web.socket.sockjs.transport.session.SockJsFrame . getContentBytes ( ) . length + NUMBER ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( this . int + STRING + getMessageCache ( ) . size ( ) + STRING ) ; } if ( this . int >= getSockJsServiceConfig ( ) . getStreamBytesLimit ( ) ) { logger . trace ( STRING ) ; resetRequest ( ) ; this . int = NUMBER ; break; } } scheduleHeartbeat ( ) ; }  <METHOD_END>
