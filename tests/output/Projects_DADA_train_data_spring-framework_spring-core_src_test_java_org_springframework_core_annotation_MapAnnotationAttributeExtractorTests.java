<METHOD_START> @ Before public void void ( ) { AnnotationUtilsTests . clearCaches ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) { { java.lang.Object ( STRING , STRING ) ; java.lang.Object ( STRING , STRING ) ; java.lang.Object ( STRING , STRING ) ; java.lang.Object ( STRING , STRING ) ; java.lang.Object ( STRING , STRING ) ; java.lang.Object ( STRING , STRING ) ; java.lang.Object ( STRING , STRING ) ; java.lang.Object ( STRING , java.lang.Object .class ) ; } } ; void ( java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) { { java.lang.Object ( STRING , STRING ) ; } } ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) { { java.lang.Object ( STRING , STRING ) ; java.lang.Object ( STRING , STRING ) ; java.lang.Object ( STRING , STRING ) ; java.lang.Object ( STRING , STRING ) ; java.lang.Object ( STRING , STRING ) ; java.lang.Object ( STRING , STRING ) ; java.lang.Object ( STRING , STRING ) ; java.lang.Object ( STRING , java.lang.Object .class ) ; } } ; void ( java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) { { java.lang.Object ( STRING , STRING ) ; java.lang.Object ( STRING , STRING ) ; } } ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) { { java.lang.Object ( STRING , asArray ( STRING ) ) ; java.lang.Object ( STRING , asArray ( STRING ) ) ; java.lang.Object ( STRING , STRING ) ; java.lang.Object ( STRING , new RequestMethod [ NUMBER ] ) ; } } ; MapAnnotationAttributeExtractor org.springframework.core.annotation.MapAnnotationAttributeExtractor = new MapAnnotationAttributeExtractor ( java.util.Map<java.lang.String,java.lang.Object> , WebMapping .class , null ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.core.annotation.MapAnnotationAttributeExtractor . getSource ( ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . int ( ) , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . void ( ( java.lang.String , java.lang.Object ) -> assertThat ( STRING + java.lang.String + STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) , is ( java.lang.Object ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = ImplicitAliasesContextConfig .class ; java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.String>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > , MultiValueMap < java.lang.String , java.lang.String > > java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.String>> = ( java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.String>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > , MultiValueMap < java.lang.String , java.lang.String > > ) AnnotationUtilsTests . getCache ( STRING ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.String> . put ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING , STRING ) ) ; org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.String> . put ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING , STRING ) ) ; org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.String> . put ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING , STRING ) ) ; org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.String> . put ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING , STRING ) ) ; org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.String> . put ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING , STRING ) ) ; org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.String> . put ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING , STRING ) ) ; java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.String>> . put ( java.lang.Class<> , org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.String> ) ; MapAnnotationAttributeExtractor org.springframework.core.annotation.MapAnnotationAttributeExtractor = new MapAnnotationAttributeExtractor ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.Class<> , null ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.core.annotation.MapAnnotationAttributeExtractor . getSource ( ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . int ( ) , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . void ( ( java.lang.String , java.lang.Object ) -> assertThat ( STRING + java.lang.String + STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) , is ( java.lang.Object ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.core.annotation.AnnotationAttributeExtractor<?> < ? > org.springframework.core.annotation.AnnotationAttributeExtractor<?> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String , java.lang.String ) ; return new MapAnnotationAttributeExtractor ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.Class<> , java.lang.Class<> ) ; }  <METHOD_END>
