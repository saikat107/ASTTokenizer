<METHOD_START> private void ( ) { }  <METHOD_END>
<METHOD_START> public static org.springframework.data.keyvalue.repository.support.OrderSpecifier<?> < ? > [] org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>[] ( Sort org.springframework.data.keyvalue.repository.support.Sort , PathBuilder < ? > org.springframework.data.keyvalue.repository.support.PathBuilder<?> ) { Assert . notNull ( org.springframework.data.keyvalue.repository.support.PathBuilder<> , STRING ) ; if ( org.springframework.data.keyvalue.repository.support.Sort == null ) { return new OrderSpecifier < ? > [ NUMBER ] ; } java.util.List<org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>> < OrderSpecifier < ? > > java.util.List<org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>> = null ; if ( org.springframework.data.keyvalue.repository.support.Sort instanceof QSort ) { java.util.List<org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>> = ( ( QSort ) org.springframework.data.keyvalue.repository.support.Sort ) . getOrderSpecifiers ( ) ; } else { java.util.List<org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>> = new java.util.ArrayList<org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>> < OrderSpecifier < ? > > ( ) ; for ( Order org.springframework.data.keyvalue.repository.support.Order : org.springframework.data.keyvalue.repository.support.Sort ) { java.util.List<org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>> . add ( org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>[] ( org.springframework.data.keyvalue.repository.support.Order , org.springframework.data.keyvalue.repository.support.PathBuilder<> ) ) ; } } return java.util.List<org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>> . toArray ( new OrderSpecifier < ? > [ java.util.List<org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>> . size ( ) ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private static org.springframework.data.keyvalue.repository.support.OrderSpecifier<?> < ? > org.springframework.data.keyvalue.repository.support.OrderSpecifier<?> ( Order org.springframework.data.keyvalue.repository.support.Order , PathBuilder < ? > org.springframework.data.keyvalue.repository.support.PathBuilder<?> ) { return new OrderSpecifier ( org.springframework.data.keyvalue.repository.support.Order . isAscending ( ) ? com . querydsl . core . types . Order . ASC : com . querydsl . core . types . Order . DESC , org.springframework.data.keyvalue.repository.support.Expression<?> ( org.springframework.data.keyvalue.repository.support.Order , org.springframework.data.keyvalue.repository.support.PathBuilder<> ) , org.springframework.data.keyvalue.repository.support.NullHandling ( org.springframework.data.keyvalue.repository.support.Order . getNullHandling ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.keyvalue.repository.support.Expression<?> < ? > org.springframework.data.keyvalue.repository.support.Expression<?> ( Order org.springframework.data.keyvalue.repository.support.Order , PathBuilder < ? > org.springframework.data.keyvalue.repository.support.PathBuilder<?> ) { Assert . notNull ( org.springframework.data.keyvalue.repository.support.Order , STRING ) ; Assert . notNull ( org.springframework.data.keyvalue.repository.support.PathBuilder<> , STRING ) ; PropertyPath org.springframework.data.keyvalue.repository.support.PropertyPath = PropertyPath . from ( org.springframework.data.keyvalue.repository.support.Order . getProperty ( ) , org.springframework.data.keyvalue.repository.support.PathBuilder<> . getType ( ) ) ; Expression < ? > org.springframework.data.keyvalue.repository.support.Expression<?> = org.springframework.data.keyvalue.repository.support.PathBuilder<> ; while ( org.springframework.data.keyvalue.repository.support.PropertyPath != null ) { if ( ! org.springframework.data.keyvalue.repository.support.PropertyPath . hasNext ( ) && org.springframework.data.keyvalue.repository.support.Order . isIgnoreCase ( ) ) { org.springframework.data.keyvalue.repository.support.Expression<?> = Expressions . stringPath ( ( Path < ? > ) org.springframework.data.keyvalue.repository.support.Expression<> , org.springframework.data.keyvalue.repository.support.PropertyPath . getSegment ( ) ) . lower ( ) ; } else { org.springframework.data.keyvalue.repository.support.Expression<?> = Expressions . path ( org.springframework.data.keyvalue.repository.support.PropertyPath . getType ( ) , ( Path < ? > ) org.springframework.data.keyvalue.repository.support.Expression<> , org.springframework.data.keyvalue.repository.support.PropertyPath . getSegment ( ) ) ; } org.springframework.data.keyvalue.repository.support.PropertyPath = org.springframework.data.keyvalue.repository.support.PropertyPath . next ( ) ; } return org.springframework.data.keyvalue.repository.support.Expression<> ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.keyvalue.repository.support.NullHandling org.springframework.data.keyvalue.repository.support.NullHandling ( org . springframework . data . org.springframework.data.domain . org.springframework.data.domain . org.springframework.data.domain org.springframework.data.domain.Sort.NullHandling ) { Assert . notNull ( org.springframework.data.domain.Sort.NullHandling , STRING ) ; switch ( org.springframework.data.domain.Sort.NullHandling ) { case NULLS_FIRST : return NullHandling . NullsFirst ; case NULLS_LAST : return NullHandling . NullsLast ; case NATIVE : default: return NullHandling . Default ; } }  <METHOD_END>
