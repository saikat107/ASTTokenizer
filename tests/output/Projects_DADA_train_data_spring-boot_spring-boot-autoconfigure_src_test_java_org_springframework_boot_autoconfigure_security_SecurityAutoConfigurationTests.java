<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext != null ) { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( SecurityAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( AuthenticationManagerBuilder .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( FilterChainProxy .class ) . getFilterChains ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.WebSecurity .class , SecurityAutoConfiguration .class , SecurityFilterAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( STRING , DelegatingFilterProxyRegistrationBean .class ) . getOrder ( ) ) . isEqualTo ( FilterRegistrationBean . REQUEST_WRAPPER_FILTER_MAX_ORDER - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.security.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.security.AnnotationConfigApplicationContext . register ( SecurityAutoConfiguration .class , SecurityFilterAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; try { org.springframework.boot.autoconfigure.security.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.boot.autoconfigure.security.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; } finally { org.springframework.boot.autoconfigure.security.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( SecurityAutoConfiguration .class , SecurityFilterAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( STRING , DelegatingFilterProxyRegistrationBean .class ) . getOrder ( ) ) . isEqualTo ( FilterRegistrationBean . REQUEST_WRAPPER_FILTER_MAX_ORDER - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( SecurityAutoConfiguration .class , SecurityFilterAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( STRING , DelegatingFilterProxyRegistrationBean .class ) . getOrder ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( SecurityAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( FilterChainProxy .class ) . getFilterChains ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( SecurityAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBeanNamesForType ( FilterChainProxy .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( SecurityAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( AuthenticationManager .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.AuthenticationListener org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.AuthenticationListener = new org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.AuthenticationListener ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . addApplicationListener ( org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.AuthenticationListener ) ; AuthenticationManager org.springframework.boot.autoconfigure.security.AuthenticationManager = this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( AuthenticationManager .class ) ; try { org.springframework.boot.autoconfigure.security.AuthenticationManager . authenticate ( new UsernamePasswordAuthenticationToken ( STRING , STRING ) ) ; fail ( STRING ) ; } catch ( BadCredentialsException org.springframework.boot.autoconfigure.security.BadCredentialsException ) { } assertThat ( org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.AuthenticationListener . org.springframework.boot.autoconfigure.security.ApplicationEvent ) . isInstanceOf ( AuthenticationFailureBadCredentialsEvent .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.TestAuthenticationConfiguration .class , SecurityAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( AuthenticationManager .class ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.TestAuthenticationConfiguration .class ) . authenticationManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.UserDetailsSecurityCustomizer .class , SecurityAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.UserDetailsSecurityCustomizer .class ) . getUserDetails ( ) . loadUserByUsername ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.TestAuthenticationConfiguration .class , org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.SecurityCustomizer .class , SecurityAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( AuthenticationManager .class ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.TestAuthenticationConfiguration .class ) . authenticationManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.AuthenticationManagerCustomizer .class , org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.SecurityCustomizer .class , SecurityAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; UsernamePasswordAuthenticationToken org.springframework.boot.autoconfigure.security.UsernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken ( STRING , STRING , AuthorityUtils . commaSeparatedStringToAuthorityList ( STRING ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( AuthenticationManager .class ) . authenticate ( org.springframework.boot.autoconfigure.security.UsernamePasswordAuthenticationToken ) ) . isNotNull ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.AuthenticationManagerCustomizer .class , org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.WorkaroundSecurityCustomizer .class , SecurityAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; UsernamePasswordAuthenticationToken org.springframework.boot.autoconfigure.security.UsernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken ( STRING , STRING , AuthorityUtils . commaSeparatedStringToAuthorityList ( STRING ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( AuthenticationManager .class ) . authenticate ( org.springframework.boot.autoconfigure.security.UsernamePasswordAuthenticationToken ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext , STRING ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.EntityConfiguration .class , PropertyPlaceholderAutoConfiguration .class , DataSourceAutoConfiguration .class , HibernateJpaAutoConfiguration .class , SecurityAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( JpaTransactionManager .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( SecurityAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; SecurityProperties org.springframework.boot.autoconfigure.security.SecurityProperties = this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( SecurityProperties .class ) ; AuthenticationManager org.springframework.boot.autoconfigure.security.AuthenticationManager = this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( AuthenticationManager .class ) ; UsernamePasswordAuthenticationToken org.springframework.boot.autoconfigure.security.UsernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken ( org.springframework.boot.autoconfigure.security.SecurityProperties . getUser ( ) . getName ( ) , org.springframework.boot.autoconfigure.security.SecurityProperties . getUser ( ) . getPassword ( ) ) ; assertThat ( org.springframework.boot.autoconfigure.security.AuthenticationManager . authenticate ( org.springframework.boot.autoconfigure.security.UsernamePasswordAuthenticationToken ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.AuthenticationManagerCustomizer .class , SecurityAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; SecurityProperties org.springframework.boot.autoconfigure.security.SecurityProperties = this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( SecurityProperties .class ) ; AuthenticationManager org.springframework.boot.autoconfigure.security.AuthenticationManager = this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( AuthenticationManager .class ) ; UsernamePasswordAuthenticationToken org.springframework.boot.autoconfigure.security.UsernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken ( org.springframework.boot.autoconfigure.security.SecurityProperties . getUser ( ) . getName ( ) , org.springframework.boot.autoconfigure.security.SecurityProperties . getUser ( ) . getPassword ( ) ) ; try { org.springframework.boot.autoconfigure.security.AuthenticationManager . authenticate ( org.springframework.boot.autoconfigure.security.UsernamePasswordAuthenticationToken ) ; fail ( STRING ) ; } catch ( AuthenticationException org.springframework.boot.autoconfigure.security.AuthenticationException ) { } org.springframework.boot.autoconfigure.security.UsernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken ( STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.security.AuthenticationManager . authenticate ( org.springframework.boot.autoconfigure.security.UsernamePasswordAuthenticationToken ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.AuthenticationManagerCustomizer .class , SecurityAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( SecurityEvaluationContextExtension .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( SecurityAutoConfiguration .class , SecurityFilterAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; DelegatingFilterProxyRegistrationBean org.springframework.boot.autoconfigure.security.DelegatingFilterProxyRegistrationBean = this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( STRING , DelegatingFilterProxyRegistrationBean .class ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.EnumSet<org.springframework.boot.autoconfigure.security.DispatcherType> < DispatcherType > java.util.EnumSet<org.springframework.boot.autoconfigure.security.DispatcherType> = ( java.util.EnumSet<org.springframework.boot.autoconfigure.security.DispatcherType> < DispatcherType > ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.security.DelegatingFilterProxyRegistrationBean , STRING ) ; assertThat ( java.util.EnumSet<org.springframework.boot.autoconfigure.security.DispatcherType> ) . containsOnly ( DispatcherType . ASYNC , DispatcherType . ERROR , DispatcherType . REQUEST ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . register ( SecurityAutoConfiguration .class , SecurityFilterAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . refresh ( ) ; DelegatingFilterProxyRegistrationBean org.springframework.boot.autoconfigure.security.DelegatingFilterProxyRegistrationBean = this . org.springframework.boot.autoconfigure.security.AnnotationConfigWebApplicationContext . getBean ( STRING , DelegatingFilterProxyRegistrationBean .class ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.EnumSet<org.springframework.boot.autoconfigure.security.DispatcherType> < DispatcherType > java.util.EnumSet<org.springframework.boot.autoconfigure.security.DispatcherType> = ( java.util.EnumSet<org.springframework.boot.autoconfigure.security.DispatcherType> < DispatcherType > ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.security.DelegatingFilterProxyRegistrationBean , STRING ) ; assertThat ( java.util.EnumSet<org.springframework.boot.autoconfigure.security.DispatcherType> ) . containsOnly ( DispatcherType . INCLUDE , DispatcherType . ERROR ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AbstractAuthenticationEvent org.springframework.boot.autoconfigure.security.AbstractAuthenticationEvent ) { this . org.springframework.boot.autoconfigure.security.ApplicationEvent = org.springframework.boot.autoconfigure.security.AbstractAuthenticationEvent ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.security.AuthenticationManager org.springframework.boot.autoconfigure.security.AuthenticationManager ( ) { this . org.springframework.boot.autoconfigure.security.AuthenticationManager = new AuthenticationManager ( ) { @ java.lang.Override public org.springframework.boot.autoconfigure.security.Authentication org.springframework.boot.autoconfigure.security.Authentication ( Authentication org.springframework.boot.autoconfigure.security.Authentication )						throws org.springframework.boot.autoconfigure.security.AuthenticationException { return new TestingAuthenticationToken ( STRING , STRING ) ; } } ; return this . org.springframework.boot.autoconfigure.security.AuthenticationManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.security.Authentication org.springframework.boot.autoconfigure.security.Authentication ( Authentication org.springframework.boot.autoconfigure.security.Authentication )						throws org.springframework.boot.autoconfigure.security.AuthenticationException { return new TestingAuthenticationToken ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> protected void ( AuthenticationManager org.springframework.boot.autoconfigure.security.AuthenticationManager ) { this . org.springframework.boot.autoconfigure.security.AuthenticationManager = org.springframework.boot.autoconfigure.security.AuthenticationManager ; }  <METHOD_END>
<METHOD_START> protected void ( AuthenticationManagerBuilder org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder ) { this . org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder = org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpSecurity org.springframework.boot.autoconfigure.security.HttpSecurity ) throws java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AuthenticationManager = new AuthenticationManager ( ) { @ java.lang.Override public org.springframework.boot.autoconfigure.security.Authentication org.springframework.boot.autoconfigure.security.Authentication ( Authentication org.springframework.boot.autoconfigure.security.Authentication )						throws org.springframework.boot.autoconfigure.security.AuthenticationException { return org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.WorkaroundSecurityCustomizer .this . org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder . getOrBuild ( ) . authenticate ( org.springframework.boot.autoconfigure.security.Authentication ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.security.Authentication org.springframework.boot.autoconfigure.security.Authentication ( Authentication org.springframework.boot.autoconfigure.security.Authentication )						throws org.springframework.boot.autoconfigure.security.AuthenticationException { return org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.WorkaroundSecurityCustomizer .this . org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder . getOrBuild ( ) . authenticate ( org.springframework.boot.autoconfigure.security.Authentication ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AuthenticationManagerBuilder org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder ) throws java.lang.Exception { org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder . inMemoryAuthentication ( ) . withUser ( STRING ) . password ( STRING ) . roles ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpSecurity org.springframework.boot.autoconfigure.security.HttpSecurity ) throws java.lang.Exception { this . org.springframework.boot.autoconfigure.security.UserDetailsService = org.springframework.boot.autoconfigure.security.HttpSecurity . getSharedObject ( UserDetailsService .class ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.autoconfigure.security.UserDetailsService org.springframework.boot.autoconfigure.security.UserDetailsService ( ) { return this . org.springframework.boot.autoconfigure.security.UserDetailsService ; }  <METHOD_END>
