<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationEventPublisher org.springframework.integration.ip.dsl.ApplicationEventPublisher = e -> { } ; AbstractServerConnectionFactory org.springframework.integration.ip.dsl.AbstractServerConnectionFactory = Tcp . netServer ( NUMBER ) . backlog ( NUMBER ) . soTimeout ( NUMBER ) . get ( ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.dsl.Message<?>> < Message < ? > > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.dsl.Message<?>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.dsl.Message<?>> <> ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.ip.dsl.AbstractServerConnectionFactory . registerListener ( m -> { received . set ( new ObjectToStringTransformer ( ) . transform ( m ) ) ; latch . countDown ( ) ; return false ; } ) ; org.springframework.integration.ip.dsl.AbstractServerConnectionFactory . setApplicationEventPublisher ( org.springframework.integration.ip.dsl.ApplicationEventPublisher ) ; org.springframework.integration.ip.dsl.AbstractServerConnectionFactory . afterPropertiesSet ( ) ; org.springframework.integration.ip.dsl.AbstractServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.dsl.AbstractServerConnectionFactory , null ) ; AbstractClientConnectionFactory org.springframework.integration.ip.dsl.AbstractClientConnectionFactory = Tcp . netClient ( STRING , org.springframework.integration.ip.dsl.AbstractServerConnectionFactory . getPort ( ) ) . get ( ) ; org.springframework.integration.ip.dsl.AbstractClientConnectionFactory . setApplicationEventPublisher ( org.springframework.integration.ip.dsl.ApplicationEventPublisher ) ; org.springframework.integration.ip.dsl.AbstractClientConnectionFactory . afterPropertiesSet ( ) ; org.springframework.integration.ip.dsl.AbstractClientConnectionFactory . start ( ) ; org.springframework.integration.ip.dsl.AbstractClientConnectionFactory . getConnection ( ) . send ( new GenericMessage <> ( STRING ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.dsl.Message<?>> . get ( ) . getPayload ( ) ) ; org.springframework.integration.ip.dsl.AbstractClientConnectionFactory . stop ( ) ; org.springframework.integration.ip.dsl.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
