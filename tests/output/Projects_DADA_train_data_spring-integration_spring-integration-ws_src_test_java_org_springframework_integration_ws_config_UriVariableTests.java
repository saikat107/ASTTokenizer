<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { WebServiceTemplate org.springframework.integration.ws.config.WebServiceTemplate = TestUtils . getPropertyValue ( this . org.springframework.integration.ws.config.MessageHandler , STRING , WebServiceTemplate .class ) ; org.springframework.integration.ws.config.WebServiceTemplate = Mockito . spy ( org.springframework.integration.ws.config.WebServiceTemplate ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference<java.lang.String> <> ( ) ; doAnswer ( invocation -> { uri . set ( invocation . getArgument ( NUMBER ) ) ; throw new WebServiceIOException ( STRING ) ; } ) . when ( org.springframework.integration.ws.config.WebServiceTemplate ) . sendAndReceive ( Mockito . anyString ( ) , Mockito . any ( WebServiceMessageCallback .class ) , ( WebServiceMessageExtractor < java.lang.Object > ) Mockito . any ( WebServiceMessageExtractor .class ) ) ; new DirectFieldAccessor ( this . org.springframework.integration.ws.config.MessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.ws.config.WebServiceTemplate ) ; Message < ? > org.springframework.integration.ws.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; try { this . org.springframework.integration.ws.config.MessageChannel . send ( org.springframework.integration.ws.config.Message<> ) ; } catch ( MessageHandlingException org.springframework.integration.ws.config.MessageHandlingException ) { assertThat ( org.springframework.integration.ws.config.MessageHandlingException . getCause ( ) , Matchers . is ( Matchers . instanceOf ( WebServiceIOException .class ) ) ) ; } assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.integration.ws.config.JMSException , java.io.IOException { final java.lang.String java.lang.String = STRING ; Queue org.springframework.integration.ws.config.Queue = Mockito . mock ( Queue .class ) ; Mockito . when ( org.springframework.integration.ws.config.Queue . getQueueName ( ) ) . thenReturn ( java.lang.String ) ; Session org.springframework.integration.ws.config.Session = Mockito . mock ( Session .class ) ; Mockito . when ( org.springframework.integration.ws.config.Session . createQueue ( Mockito . anyString ( ) ) ) . thenReturn ( org.springframework.integration.ws.config.Queue ) ; Mockito . when ( org.springframework.integration.ws.config.Session . createBytesMessage ( ) ) . thenReturn ( Mockito . mock ( BytesMessage .class ) ) ; MessageProducer org.springframework.integration.ws.config.MessageProducer = Mockito . mock ( MessageProducer .class ) ; Mockito . when ( org.springframework.integration.ws.config.Session . createProducer ( org.springframework.integration.ws.config.Queue ) ) . thenReturn ( org.springframework.integration.ws.config.MessageProducer ) ; Mockito . when ( org.springframework.integration.ws.config.Session . createTemporaryQueue ( ) ) . thenThrow ( new WebServiceIOException ( STRING ) ) ; Connection org.springframework.integration.ws.config.Connection = Mockito . mock ( Connection .class ) ; Mockito . when ( org.springframework.integration.ws.config.Connection . createSession ( Mockito . anyBoolean ( ) , Mockito . anyInt ( ) ) ) . thenReturn ( org.springframework.integration.ws.config.Session ) ; Mockito . when ( this . org.springframework.integration.ws.config.ConnectionFactory . createConnection ( ) ) . thenReturn ( org.springframework.integration.ws.config.Connection ) ; Message < ? > org.springframework.integration.ws.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , java.lang.String ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; try { this . org.springframework.integration.ws.config.MessageChannel . send ( org.springframework.integration.ws.config.Message<> ) ; } catch ( MessageHandlingException org.springframework.integration.ws.config.MessageHandlingException ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.integration.ws.config.MessageHandlingException . getCause ( ) . getClass ( ) ; assertTrue ( WebServiceIOException .class . boolean ( java.lang.Class<> ) ) ; } java.net.URI java.net.URI = java.net.URI . java.net.URI ( STRING ) ; Mockito . verify ( this . org.springframework.integration.ws.config.WebServiceMessageSender ) . createConnection ( java.net.URI ) ; Mockito . verify ( org.springframework.integration.ws.config.Session ) . createQueue ( java.lang.String ) ; assertEquals ( STRING + java.lang.String , this . org.springframework.integration.ws.config.UriVariableTests.TestClientInterceptor . java.net.URI ( ) . java.lang.String ( ) ) ; Mockito . verify ( org.springframework.integration.ws.config.MessageProducer ) . setDeliveryMode ( DeliveryMode . NON_PERSISTENT ) ; Mockito . verify ( org.springframework.integration.ws.config.MessageProducer ) . setPriority ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.ws.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , java.lang.String ) . setHeader ( STRING , java.lang.String ) . build ( ) ; try { this . org.springframework.integration.ws.config.MessageChannel . send ( org.springframework.integration.ws.config.Message<> ) ; } catch ( MessageHandlingException org.springframework.integration.ws.config.MessageHandlingException ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.integration.ws.config.MessageHandlingException . getCause ( ) . getClass ( ) ; assertTrue ( WebServiceIOException .class . boolean ( java.lang.Class<> ) ) ; } WebServiceConnection org.springframework.integration.ws.config.WebServiceConnection = this . org.springframework.integration.ws.config.UriVariableTests.Int2720EmailTestClientInterceptor . org.springframework.integration.ws.config.WebServiceConnection ( ) ; assertEquals ( java.lang.String , TestUtils . getPropertyValue ( org.springframework.integration.ws.config.WebServiceConnection , STRING ) . toString ( ) ) ; assertEquals ( java.lang.String , TestUtils . getPropertyValue ( org.springframework.integration.ws.config.WebServiceConnection , STRING ) ) ; assertEquals ( STRING , this . org.springframework.integration.ws.config.UriVariableTests.Int2720EmailTestClientInterceptor . java.net.URI ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) SmackException . SmackException.NotConnectedException { Mockito . doThrow ( new WebServiceIOException ( STRING ) ) . when ( this . org.springframework.integration.ws.config.XMPPConnection ) . sendStanza ( Mockito . any ( Stanza .class ) ) ; Message < ? > org.springframework.integration.ws.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; try { this . org.springframework.integration.ws.config.MessageChannel . send ( org.springframework.integration.ws.config.Message<> ) ; } catch ( MessageHandlingException org.springframework.integration.ws.config.MessageHandlingException ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.integration.ws.config.MessageHandlingException . getCause ( ) . getClass ( ) ; assertTrue ( WebServiceIOException .class . boolean ( java.lang.Class<> ) ) ; } ArgumentCaptor < Stanza > org.springframework.integration.ws.config.ArgumentCaptor<org.springframework.integration.ws.config.Stanza> = ArgumentCaptor . forClass ( Stanza .class ) ; Mockito . verify ( this . org.springframework.integration.ws.config.XMPPConnection ) . sendStanza ( org.springframework.integration.ws.config.ArgumentCaptor<org.springframework.integration.ws.config.Stanza> . capture ( ) ) ; assertEquals ( STRING , org.springframework.integration.ws.config.ArgumentCaptor<org.springframework.integration.ws.config.Stanza> . getValue ( ) . getTo ( ) ) ; assertEquals ( STRING , this . org.springframework.integration.ws.config.UriVariableTests.TestClientInterceptor . java.net.URI ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public java.net.URI java.net.URI ( ) { return this . java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageContext org.springframework.integration.ws.config.MessageContext ) throws org.springframework.integration.ws.config.WebServiceClientException { TransportContext org.springframework.integration.ws.config.TransportContext = TransportContextHolder . getTransportContext ( ) ; if ( org.springframework.integration.ws.config.TransportContext != null ) { try { this . java.net.URI = org.springframework.integration.ws.config.TransportContext . getConnection ( ) . getUri ( ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { throw new java.lang.IllegalStateException ( java.net.URISyntaxException ) ; } } else { throw new java.lang.IllegalStateException ( STRING ) ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageContext org.springframework.integration.ws.config.MessageContext ) throws org.springframework.integration.ws.config.WebServiceClientException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageContext org.springframework.integration.ws.config.MessageContext ) throws org.springframework.integration.ws.config.WebServiceClientException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageContext org.springframework.integration.ws.config.MessageContext , java.lang.Exception java.lang.Exception ) throws org.springframework.integration.ws.config.WebServiceClientException {		}  <METHOD_END>
<METHOD_START> public org.springframework.integration.ws.config.WebServiceConnection org.springframework.integration.ws.config.WebServiceConnection ( ) { return org.springframework.integration.ws.config.WebServiceConnection ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageContext org.springframework.integration.ws.config.MessageContext ) throws org.springframework.integration.ws.config.WebServiceClientException { TransportContext org.springframework.integration.ws.config.TransportContext = TransportContextHolder . getTransportContext ( ) ; WebServiceConnection org.springframework.integration.ws.config.WebServiceConnection = org.springframework.integration.ws.config.TransportContext . getConnection ( ) ; if ( org.springframework.integration.ws.config.WebServiceConnection instanceof MailSenderConnection ) { this . org.springframework.integration.ws.config.WebServiceConnection = org.springframework.integration.ws.config.WebServiceConnection ; } else { throw new java.lang.IllegalStateException ( STRING ) ; } super. boolean ( org.springframework.integration.ws.config.MessageContext ) ; throw new WebServiceIOException ( STRING ) ; }  <METHOD_END>
