<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { super( java.lang.Class<> ); Assert . isTrue ( Repository .class . boolean ( java.lang.Class<> ) , java.lang.String ) ; this . java.lang.Class<? extends java.io.Serializable> = java.lang.Class<? extends java.io.Serializable> ( java.lang.Class<> ) ; this . java.lang.Class<?> = java.lang.Class<?> ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.Class<? extends java.io.Serializable> < ? extends java.io.Serializable > java.lang.Class<? extends java.io.Serializable> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { TypeInformation < ? > org.springframework.data.repository.core.support.TypeInformation<?> = ClassTypeInformation . from ( java.lang.Class<> ) ; java.util.List<org.springframework.data.repository.core.support.TypeInformation<?>> < TypeInformation < ? > > java.util.List<org.springframework.data.repository.core.support.TypeInformation<?>> = org.springframework.data.repository.core.support.TypeInformation<> . getSuperTypeInformation ( Repository .class ) . getTypeArguments ( ) ; if ( java.util.List<org.springframework.data.repository.core.support.TypeInformation<?>> . size ( ) < NUMBER || java.util.List<org.springframework.data.repository.core.support.TypeInformation<?>> . get ( NUMBER ) == null ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.Class<> ) ) ; } return ( java.lang.Class<? extends java.io.Serializable> < ? extends java.io.Serializable > ) java.util.List<org.springframework.data.repository.core.support.TypeInformation<?>> . get ( NUMBER ) . getType ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { TypeInformation < ? > org.springframework.data.repository.core.support.TypeInformation<?> = ClassTypeInformation . from ( java.lang.Class<> ) ; java.util.List<org.springframework.data.repository.core.support.TypeInformation<?>> < TypeInformation < ? > > java.util.List<org.springframework.data.repository.core.support.TypeInformation<?>> = org.springframework.data.repository.core.support.TypeInformation<> . getSuperTypeInformation ( Repository .class ) . getTypeArguments ( ) ; if ( java.util.List<org.springframework.data.repository.core.support.TypeInformation<?>> . isEmpty ( ) || java.util.List<org.springframework.data.repository.core.support.TypeInformation<?>> . get ( NUMBER ) == null ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.Class<> ) ) ; } return java.util.List<org.springframework.data.repository.core.support.TypeInformation<?>> . get ( NUMBER ) . getType ( ) ; }  <METHOD_END>
