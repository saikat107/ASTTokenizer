<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void ( XMPPConnection org.springframework.integration.xmpp.inbound.XMPPConnection ) { super( org.springframework.integration.xmpp.inbound.XMPPConnection ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { Assert . isTrue ( this . initialized , this . getComponentName ( ) + STRING + this . java.lang.String ( ) + STRING ) ; Roster org.springframework.integration.xmpp.inbound.Roster = Roster . getInstanceFor ( this . xmppConnection ) ; org.springframework.integration.xmpp.inbound.Roster . addRosterListener ( this . org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint.PresencePublishingRosterListener ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . xmppConnection != null ) { Roster . getInstanceFor ( this . xmppConnection ) . removeRosterListener ( this . org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint.PresencePublishingRosterListener ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { if ( org.springframework.integration.xmpp.inbound.Log . isDebugEnabled ( ) ) { org.springframework.integration.xmpp.inbound.Log . debug ( STRING + StringUtils . collectionToCommaDelimitedString ( java.util.Collection<java.lang.String> ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { if ( org.springframework.integration.xmpp.inbound.Log . isDebugEnabled ( ) ) { org.springframework.integration.xmpp.inbound.Log . debug ( STRING + StringUtils . collectionToCommaDelimitedString ( java.util.Collection<java.lang.String> ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { if ( org.springframework.integration.xmpp.inbound.Log . isDebugEnabled ( ) ) { org.springframework.integration.xmpp.inbound.Log . debug ( STRING + StringUtils . collectionToCommaDelimitedString ( java.util.Collection<java.lang.String> ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Presence org.springframework.integration.xmpp.inbound.Presence ) { if ( org.springframework.integration.xmpp.inbound.Presence != null ) { if ( org.springframework.integration.xmpp.inbound.Log . isDebugEnabled ( ) ) { org.springframework.integration.xmpp.inbound.Log . debug ( STRING + org.springframework.integration.xmpp.inbound.Presence . getFrom ( ) + STRING + org.springframework.integration.xmpp.inbound.Presence ) ; } sendMessage ( org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint .this . getMessageBuilderFactory ( ) . withPayload ( org.springframework.integration.xmpp.inbound.Presence ) . build ( ) ) ; } }  <METHOD_END>
