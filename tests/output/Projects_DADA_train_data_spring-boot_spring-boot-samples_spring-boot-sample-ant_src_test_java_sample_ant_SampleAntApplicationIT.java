<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; java.io.File [] java.io.File[] = java.io.File . java.io.File[] ( new java.io.FileFilter ( ) { @ java.lang.Override public boolean boolean ( java.io.File java.io.File ) { return java.io.File . java.lang.String ( ) . boolean ( STRING ) ; } } ) ; assertThat ( java.io.File[] ) . hasSize ( NUMBER ) ; java.lang.Process java.lang.Process = new JavaExecutable ( ) . processBuilder ( STRING , java.io.File[] [ NUMBER ] . java.lang.String ( ) ) . directory ( java.io.File ) . start ( ) ; java.lang.Process . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( java.lang.Process . int ( ) ) . isEqualTo ( NUMBER ) ; java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.InputStreamReader ( java.lang.Process . java.io.InputStream ( ) ) ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.io.File java.io.File ) { return java.io.File . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
