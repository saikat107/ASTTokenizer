<METHOD_START> @ Test public void void ( ) java.lang.Exception { while ( this . org.springframework.integration.amqp.outbound.RabbitTemplate . receive ( this . org.springframework.integration.amqp.outbound.Queue . getName ( ) ) != null ) { } Message < ? > org.springframework.integration.amqp.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( AmqpHeaders . CONTENT_TYPE , STRING ) . build ( ) ; this . org.springframework.integration.amqp.outbound.MessageChannel . send ( org.springframework.integration.amqp.outbound.Message<> ) ; Message < ? > org.springframework.integration.amqp.outbound.Message<?> = this . org.springframework.integration.amqp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.amqp.outbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.amqp.outbound.Message<> . getPayload ( ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.amqp.outbound.Message<> . getHeaders ( ) . get ( AmqpHeaders . PUBLISH_CONFIRM ) ) ; org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message = this . org.springframework.integration.amqp.outbound.RabbitTemplate . receive ( this . org.springframework.integration.amqp.outbound.Queue . getName ( ) ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.amqp.core.Message . getBody ( ) , STRING ) ) ; assertEquals ( STRING , org.springframework.amqp.core.Message . getMessageProperties ( ) . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.amqp.core.Message . getMessageProperties ( ) . getHeaders ( ) . get ( JsonHeaders . TYPE_ID . replaceFirst ( JsonHeaders . PREFIX , STRING ) ) ) ; org.springframework.integration.amqp.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.amqp.outbound.MessageChannel . send ( org.springframework.integration.amqp.outbound.Message<> ) ; org.springframework.integration.amqp.outbound.Message<?> = org.springframework.integration.amqp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.amqp.outbound.Message<> ) ; assertSame ( org.springframework.integration.amqp.outbound.Message<> . getPayload ( ) , org.springframework.integration.amqp.outbound.Message<> . getPayload ( ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.amqp.outbound.Message<> . getHeaders ( ) . get ( AmqpHeaders . PUBLISH_CONFIRM ) ) ; while ( this . org.springframework.integration.amqp.outbound.RabbitTemplate . receive ( this . org.springframework.integration.amqp.outbound.Queue . getName ( ) ) != null ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.amqp.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.amqp.outbound.MessageChannel . send ( org.springframework.integration.amqp.outbound.Message<> ) ; Message < ? > org.springframework.integration.amqp.outbound.Message<?> = this . org.springframework.integration.amqp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.amqp.outbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.amqp.outbound.Message<> . getPayload ( ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.amqp.outbound.Message<> . getHeaders ( ) . get ( AmqpHeaders . PUBLISH_CONFIRM ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.amqp.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.amqp.outbound.MessageChannel . send ( org.springframework.integration.amqp.outbound.Message<> ) ; Message < ? > org.springframework.integration.amqp.outbound.Message<?> = org.springframework.integration.amqp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.amqp.outbound.Message<> ) ; assertEquals ( org.springframework.integration.amqp.outbound.Message<> . getPayload ( ) , org.springframework.integration.amqp.outbound.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RabbitTemplate org.springframework.integration.amqp.outbound.RabbitTemplate = new RabbitTemplate ( this . org.springframework.integration.amqp.outbound.ConnectionFactory ) ; org.springframework.integration.amqp.outbound.RabbitTemplate . setQueue ( this . org.springframework.integration.amqp.outbound.Queue . getName ( ) ) ; while ( org.springframework.integration.amqp.outbound.RabbitTemplate . receive ( ) != null ) { } Message < ? > org.springframework.integration.amqp.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( AmqpHeaders . CONTENT_TYPE , STRING ) . build ( ) ; this . org.springframework.integration.amqp.outbound.MessageChannel . send ( org.springframework.integration.amqp.outbound.Message<> ) ; org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message = org.springframework.integration.amqp.outbound.RabbitTemplate . receive ( ) ; assertNotNull ( org.springframework.amqp.core.Message ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.amqp.core.Message . getBody ( ) , STRING ) ) ; assertEquals ( STRING , org.springframework.amqp.core.Message . getMessageProperties ( ) . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.amqp.core.Message . getMessageProperties ( ) . getHeaders ( ) . get ( JsonHeaders . TYPE_ID . replaceFirst ( JsonHeaders . PREFIX , STRING ) ) ) ; org.springframework.integration.amqp.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.amqp.outbound.MessageChannel . send ( org.springframework.integration.amqp.outbound.Message<> ) ; org.springframework.amqp.core.Message = org.springframework.integration.amqp.outbound.RabbitTemplate . receive ( ) ; assertNotNull ( org.springframework.amqp.core.Message ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.amqp.core.Message . getBody ( ) , STRING ) ) ; assertEquals ( STRING , org.springframework.amqp.core.Message . getMessageProperties ( ) . getContentType ( ) ) ; while ( org.springframework.integration.amqp.outbound.RabbitTemplate . receive ( ) != null ) { } }  <METHOD_END>
