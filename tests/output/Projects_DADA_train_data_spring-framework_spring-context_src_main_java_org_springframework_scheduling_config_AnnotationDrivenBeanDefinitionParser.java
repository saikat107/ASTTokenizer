<METHOD_START> @ java.lang.Override public org.springframework.scheduling.config.BeanDefinition org.springframework.scheduling.config.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.scheduling.config.ParserContext ) { java.lang.Object java.lang.Object = org.springframework.scheduling.config.ParserContext . extractSource ( org.w3c.dom.Element ) ; CompositeComponentDefinition org.springframework.scheduling.config.CompositeComponentDefinition = new CompositeComponentDefinition ( org.w3c.dom.Element . java.lang.String ( ) , java.lang.Object ) ; org.springframework.scheduling.config.ParserContext . pushContainingComponent ( org.springframework.scheduling.config.CompositeComponentDefinition ) ; BeanDefinitionRegistry org.springframework.scheduling.config.BeanDefinitionRegistry = org.springframework.scheduling.config.ParserContext . getRegistry ( ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( STRING . boolean ( java.lang.String ) ) { void ( org.w3c.dom.Element , org.springframework.scheduling.config.ParserContext ) ; } else { if ( org.springframework.scheduling.config.BeanDefinitionRegistry . containsBeanDefinition ( TaskManagementConfigUtils . ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME ) ) { org.springframework.scheduling.config.ParserContext . getReaderContext ( ) . error ( STRING , java.lang.Object ) ; } else { BeanDefinitionBuilder org.springframework.scheduling.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( STRING ) ; org.springframework.scheduling.config.BeanDefinitionBuilder . getRawBeanDefinition ( ) . setSource ( java.lang.Object ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.scheduling.config.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; } java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.scheduling.config.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; } if ( java.lang.Boolean . java.lang.Boolean ( org.w3c.dom.Element . java.lang.String ( AopNamespaceUtils . PROXY_TARGET_CLASS_ATTRIBUTE ) ) ) { org.springframework.scheduling.config.BeanDefinitionBuilder . addPropertyValue ( STRING , true ) ; } void ( org.springframework.scheduling.config.ParserContext , org.springframework.scheduling.config.BeanDefinitionBuilder , TaskManagementConfigUtils . ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME ) ; } } if ( org.springframework.scheduling.config.BeanDefinitionRegistry . containsBeanDefinition ( TaskManagementConfigUtils . SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) { org.springframework.scheduling.config.ParserContext . getReaderContext ( ) . error ( STRING , java.lang.Object ) ; } else { BeanDefinitionBuilder org.springframework.scheduling.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( STRING ) ; org.springframework.scheduling.config.BeanDefinitionBuilder . getRawBeanDefinition ( ) . setSource ( java.lang.Object ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.scheduling.config.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; } void ( org.springframework.scheduling.config.ParserContext , org.springframework.scheduling.config.BeanDefinitionBuilder , TaskManagementConfigUtils . SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME ) ; } org.springframework.scheduling.config.ParserContext . popAndRegisterContainingComponent ( ) ; return null ; }  <METHOD_END>
<METHOD_START> private void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.scheduling.config.ParserContext ) { if ( ! org.springframework.scheduling.config.ParserContext . getRegistry ( ) . containsBeanDefinition ( TaskManagementConfigUtils . ASYNC_EXECUTION_ASPECT_BEAN_NAME ) ) { BeanDefinitionBuilder org.springframework.scheduling.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( java.lang.String ) ; org.springframework.scheduling.config.BeanDefinitionBuilder . setFactoryMethod ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.scheduling.config.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; } java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.scheduling.config.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; } org.springframework.scheduling.config.ParserContext . registerBeanComponent ( new BeanComponentDefinition ( org.springframework.scheduling.config.BeanDefinitionBuilder . getBeanDefinition ( ) , TaskManagementConfigUtils . ASYNC_EXECUTION_ASPECT_BEAN_NAME ) ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( ParserContext org.springframework.scheduling.config.ParserContext , BeanDefinitionBuilder org.springframework.scheduling.config.BeanDefinitionBuilder , java.lang.String java.lang.String ) { org.springframework.scheduling.config.BeanDefinitionBuilder . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.scheduling.config.ParserContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.scheduling.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; BeanDefinitionHolder org.springframework.scheduling.config.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.scheduling.config.BeanDefinitionBuilder . getBeanDefinition ( ) , java.lang.String ) ; org.springframework.scheduling.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.scheduling.config.BeanDefinitionHolder ) ) ; }  <METHOD_END>
