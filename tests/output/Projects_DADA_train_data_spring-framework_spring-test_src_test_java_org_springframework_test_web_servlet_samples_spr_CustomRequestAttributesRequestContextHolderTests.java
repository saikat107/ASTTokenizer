<METHOD_START> @ Before public void void ( ) { ServletContext org.springframework.test.web.servlet.samples.spr.ServletContext = new MockServletContext ( ) ; MockHttpServletRequest org.springframework.test.web.servlet.samples.spr.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.test.web.servlet.samples.spr.ServletContext ) ; org.springframework.test.web.servlet.samples.spr.MockHttpServletRequest . setAttribute ( java.lang.String , java.lang.String ) ; RequestContextHolder . setRequestAttributes ( new ServletWebRequest ( org.springframework.test.web.servlet.samples.spr.MockHttpServletRequest , new MockHttpServletResponse ( ) ) ) ; this . org.springframework.test.web.servlet.samples.spr.GenericWebApplicationContext . setServletContext ( org.springframework.test.web.servlet.samples.spr.ServletContext ) ; new AnnotatedBeanDefinitionReader ( this . org.springframework.test.web.servlet.samples.spr.GenericWebApplicationContext ) . register ( org.springframework.test.web.servlet.samples.spr.CustomRequestAttributesRequestContextHolderTests.WebConfig .class ) ; this . org.springframework.test.web.servlet.samples.spr.GenericWebApplicationContext . refresh ( ) ; this . org.springframework.test.web.servlet.samples.spr.MockMvc = webAppContextSetup ( this . org.springframework.test.web.servlet.samples.spr.GenericWebApplicationContext ) . defaultRequest ( get ( STRING ) . requestAttr ( java.lang.String , java.lang.String ) ) . alwaysExpect ( status ( ) . isOk ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.spr.MockMvc . perform ( get ( STRING ) . requestAttr ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { RequestAttributes org.springframework.test.web.servlet.samples.spr.RequestAttributes = RequestContextHolder . getRequestAttributes ( ) ; assertThat ( org.springframework.test.web.servlet.samples.spr.RequestAttributes , instanceOf ( ServletRequestAttributes .class ) ) ; HttpServletRequest org.springframework.test.web.servlet.samples.spr.HttpServletRequest = ( ( ServletRequestAttributes ) org.springframework.test.web.servlet.samples.spr.RequestAttributes ) . getRequest ( ) ; assertThat ( org.springframework.test.web.servlet.samples.spr.HttpServletRequest . getAttribute ( java.lang.String ) , is ( java.lang.String ) ) ; assertThat ( org.springframework.test.web.servlet.samples.spr.HttpServletRequest . getAttribute ( java.lang.String ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.test.web.servlet.samples.spr.HttpServletRequest . getAttribute ( java.lang.String ) , is ( nullValue ( ) ) ) ; RequestContextHolder . resetRequestAttributes ( ) ; this . org.springframework.test.web.servlet.samples.spr.GenericWebApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.test.web.servlet.samples.spr.CustomRequestAttributesRequestContextHolderTests.SingletonController org.springframework.test.web.servlet.samples.spr.CustomRequestAttributesRequestContextHolderTests.SingletonController ( ) { return new org.springframework.test.web.servlet.samples.spr.CustomRequestAttributesRequestContextHolderTests.SingletonController ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ) { RequestAttributes org.springframework.test.web.servlet.samples.spr.RequestAttributes = RequestContextHolder . getRequestAttributes ( ) ; assertThat ( org.springframework.test.web.servlet.samples.spr.RequestAttributes , instanceOf ( ServletRequestAttributes .class ) ) ; void ( ( ( ServletRequestAttributes ) org.springframework.test.web.servlet.samples.spr.RequestAttributes ) . getRequest ( ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ServletRequest org.springframework.test.web.servlet.samples.spr.ServletRequest ) { assertThat ( org.springframework.test.web.servlet.samples.spr.ServletRequest . getAttribute ( java.lang.String ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.test.web.servlet.samples.spr.ServletRequest . getAttribute ( java.lang.String ) , is ( java.lang.String ) ) ; assertThat ( org.springframework.test.web.servlet.samples.spr.ServletRequest . getAttribute ( java.lang.String ) , is ( java.lang.String ) ) ; }  <METHOD_END>
