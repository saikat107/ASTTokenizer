<METHOD_START> public void ( Row org.springframework.data.cassandra.convert.Row ) { this . org.springframework.data.cassandra.convert.Row = org.springframework.data.cassandra.convert.Row ; this . org.springframework.data.cassandra.convert.ColumnDefinitions = org.springframework.data.cassandra.convert.Row . getColumnDefinitions ( ) ; this . org.springframework.data.cassandra.convert.CodecRegistry = CodecRegistry . DEFAULT_INSTANCE ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( CqlIdentifier org.springframework.data.cassandra.convert.CqlIdentifier ) { return java.lang.Object ( org.springframework.data.cassandra.convert.CqlIdentifier . toCql ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { int int = int ( java.lang.String ) ; return java.lang.Object ( int ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( int int ) { if ( org.springframework.data.cassandra.convert.Row . isNull ( int ) ) { return null ; } DataType org.springframework.data.cassandra.convert.DataType = org.springframework.data.cassandra.convert.ColumnDefinitions . getType ( int ) ; if ( org.springframework.data.cassandra.convert.DataType . isCollection ( ) ) { return java.lang.Object ( int , org.springframework.data.cassandra.convert.DataType ) ; } if ( Name . TUPLE . equals ( org.springframework.data.cassandra.convert.DataType . getName ( ) ) ) { return org.springframework.data.cassandra.convert.Row . getTupleValue ( int ) ; } if ( Name . UDT . equals ( org.springframework.data.cassandra.convert.DataType . getName ( ) ) ) { return org.springframework.data.cassandra.convert.Row . getUDTValue ( int ) ; } return org.springframework.data.cassandra.convert.Row . getObject ( int ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( int int , DataType org.springframework.data.cassandra.convert.DataType ) { java.util.List<org.springframework.data.cassandra.convert.DataType> < DataType > java.util.List<org.springframework.data.cassandra.convert.DataType> = org.springframework.data.cassandra.convert.DataType . getTypeArguments ( ) ; if ( java.util.List<org.springframework.data.cassandra.convert.DataType> . size ( ) == NUMBER ) { DataType org.springframework.data.cassandra.convert.DataType = java.util.List<org.springframework.data.cassandra.convert.DataType> . get ( NUMBER ) ; TypeCodec < java.lang.Object > org.springframework.data.cassandra.convert.TypeCodec<java.lang.Object> = org.springframework.data.cassandra.convert.CodecRegistry . codecFor ( org.springframework.data.cassandra.convert.DataType ) ; if ( org.springframework.data.cassandra.convert.DataType . equals ( DataType . list ( org.springframework.data.cassandra.convert.DataType ) ) ) { return org.springframework.data.cassandra.convert.Row . getList ( int , org.springframework.data.cassandra.convert.TypeCodec<java.lang.Object> . getJavaType ( ) . getRawType ( ) ) ; } if ( org.springframework.data.cassandra.convert.DataType . equals ( DataType . set ( org.springframework.data.cassandra.convert.DataType ) ) ) { return org.springframework.data.cassandra.convert.Row . getSet ( int , org.springframework.data.cassandra.convert.TypeCodec<java.lang.Object> . getJavaType ( ) . getRawType ( ) ) ; } } if ( java.util.List<org.springframework.data.cassandra.convert.DataType> . size ( ) == NUMBER ) { DataType org.springframework.data.cassandra.convert.DataType = java.util.List<org.springframework.data.cassandra.convert.DataType> . get ( NUMBER ) ; TypeCodec < java.lang.Object > org.springframework.data.cassandra.convert.TypeCodec<java.lang.Object> = org.springframework.data.cassandra.convert.CodecRegistry . codecFor ( org.springframework.data.cassandra.convert.DataType ) ; DataType org.springframework.data.cassandra.convert.DataType = java.util.List<org.springframework.data.cassandra.convert.DataType> . get ( NUMBER ) ; TypeCodec < java.lang.Object > org.springframework.data.cassandra.convert.TypeCodec<java.lang.Object> = org.springframework.data.cassandra.convert.CodecRegistry . codecFor ( org.springframework.data.cassandra.convert.DataType ) ; return org.springframework.data.cassandra.convert.Row . getMap ( int , org.springframework.data.cassandra.convert.TypeCodec<java.lang.Object> . getJavaType ( ) . getRawType ( ) , org.springframework.data.cassandra.convert.TypeCodec<java.lang.Object> . getJavaType ( ) . getRawType ( ) ) ; } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.cassandra.convert.Row org.springframework.data.cassandra.convert.Row ( ) { return org.springframework.data.cassandra.convert.Row ; }  <METHOD_END>
<METHOD_START> public < T > T T ( CqlIdentifier org.springframework.data.cassandra.convert.CqlIdentifier , java.lang.Class<T> < T > java.lang.Class<T> ) { return java.lang.Object ( int ( org.springframework.data.cassandra.convert.CqlIdentifier . toCql ( ) ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { return java.lang.Object ( org.springframework.data.cassandra.convert.ColumnDefinitions . getIndexOf ( java.lang.String ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( int int , java.lang.Class<T> < T > java.lang.Class<T> ) { java.lang.Object java.lang.Object = java.lang.Object ( int ) ; if ( java.lang.Object == null ) { return null ; } return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.String java.lang.String ) { int int = org.springframework.data.cassandra.convert.ColumnDefinitions . getIndexOf ( java.lang.String ) ; if ( int == - NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String ) ; } return int ; }  <METHOD_END>
