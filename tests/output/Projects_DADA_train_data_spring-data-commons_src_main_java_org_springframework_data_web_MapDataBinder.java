<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , ConversionService org.springframework.data.web.ConversionService ) { super( new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ); this . java.lang.Class<?> = java.lang.Class<> ; this . org.springframework.data.web.ConversionService = org.springframework.data.web.ConversionService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) super. getTarget ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.web.ConfigurablePropertyAccessor org.springframework.data.web.ConfigurablePropertyAccessor ( ) { return new org.springframework.data.web.MapDataBinder.MapPropertyAccessor ( java.lang.Class<> , java.util.Map<java.lang.String,java.lang.Object> ( ) , org.springframework.data.web.ConversionService ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , ConversionService org.springframework.data.web.ConversionService ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.util.Map<java.lang.String,java.lang.Object> , STRING ) ; Assert . notNull ( org.springframework.data.web.ConversionService , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; this . org.springframework.data.web.ConversionService = org.springframework.data.web.ConversionService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { try { return org.springframework.data.web.PropertyPath ( java.lang.String ) != null ; } catch ( PropertyReferenceException org.springframework.data.web.PropertyReferenceException ) { return false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.web.TypeDescriptor org.springframework.data.web.TypeDescriptor ( java.lang.String java.lang.String ) throws org.springframework.data.web.BeansException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws org.springframework.data.web.BeansException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws org.springframework.data.web.BeansException { if ( ! boolean ( java.lang.String ) ) { throw new NotWritablePropertyException ( java.lang.Class<> , java.lang.String ) ; } StandardEvaluationContext org.springframework.data.web.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.data.web.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.data.web.MapDataBinder.MapPropertyAccessor.PropertyTraversingMapAccessor ( java.lang.Class<> , new DefaultConversionService ( ) ) ) ; org.springframework.data.web.StandardEvaluationContext . setTypeConverter ( new StandardTypeConverter ( org.springframework.data.web.ConversionService ) ) ; org.springframework.data.web.StandardEvaluationContext . setRootObject ( java.util.Map<java.lang.String,java.lang.Object> ) ; Expression org.springframework.data.web.Expression = org.springframework.data.web.SpelExpressionParser . parseExpression ( java.lang.String ) ; PropertyPath org.springframework.data.web.PropertyPath = org.springframework.data.web.PropertyPath ( java.lang.String ) . getLeafProperty ( ) ; TypeInformation < ? > org.springframework.data.web.TypeInformation<?> = org.springframework.data.web.PropertyPath . getOwningType ( ) ; TypeInformation < ? > org.springframework.data.web.TypeInformation<?> = org.springframework.data.web.PropertyPath . getTypeInformation ( ) ; org.springframework.data.web.TypeInformation<?> = java.lang.String . boolean ( STRING ) ? org.springframework.data.web.TypeInformation<> . getActualType ( ) : org.springframework.data.web.TypeInformation<> ; if ( boolean ( java.lang.Object , org.springframework.data.web.TypeInformation<> . getType ( ) ) ) { java.beans.PropertyDescriptor java.beans.PropertyDescriptor = BeanUtils . getPropertyDescriptor ( org.springframework.data.web.TypeInformation<> . getType ( ) , org.springframework.data.web.PropertyPath . getSegment ( ) ) ; MethodParameter org.springframework.data.web.MethodParameter = new MethodParameter ( java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) , - NUMBER ) ; TypeDescriptor org.springframework.data.web.TypeDescriptor = TypeDescriptor . nested ( org.springframework.data.web.MethodParameter , NUMBER ) ; java.lang.Object = org.springframework.data.web.ConversionService . convert ( java.lang.Object , TypeDescriptor . forObject ( java.lang.Object ) , org.springframework.data.web.TypeDescriptor ) ; } org.springframework.data.web.Expression . setValue ( org.springframework.data.web.StandardEvaluationContext , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> . boolean ( java.lang.Object ) ) { return false ; } return org.springframework.data.web.ConversionService . canConvert ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.web.PropertyPath org.springframework.data.web.PropertyPath ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , STRING ) ; return PropertyPath . from ( java.lang.String , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , ConversionService org.springframework.data.web.ConversionService ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( org.springframework.data.web.ConversionService , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; this . org.springframework.data.web.ConversionService = org.springframework.data.web.ConversionService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.data.web.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.web.AccessException { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.web.TypedValue org.springframework.data.web.TypedValue ( EvaluationContext org.springframework.data.web.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.web.AccessException { PropertyPath org.springframework.data.web.PropertyPath = PropertyPath . from ( java.lang.String , java.lang.Class<> ) ; try { return super. read ( org.springframework.data.web.EvaluationContext , java.lang.Object , java.lang.String ) ; } catch ( AccessException org.springframework.data.web.AccessException ) { java.lang.Object java.lang.Object = org.springframework.data.web.PropertyPath . isCollection ( ) ? CollectionFactory . createCollection ( java.util.List .class , NUMBER ) : CollectionFactory . createMap ( java.util.Map .class , NUMBER ) ; ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object ) . java.lang.Object ( java.lang.String , java.lang.Object ) ; return new TypedValue ( java.lang.Object , org.springframework.data.web.TypeDescriptor ( org.springframework.data.web.PropertyPath , java.lang.Object ) ) ; } finally { this . java.lang.Class<?> = org.springframework.data.web.PropertyPath . getType ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.web.TypeDescriptor org.springframework.data.web.TypeDescriptor ( PropertyPath org.springframework.data.web.PropertyPath , java.lang.Object java.lang.Object ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.web.PropertyPath . getType ( ) ; TypeDescriptor org.springframework.data.web.TypeDescriptor = org.springframework.data.web.ConversionService . canConvert ( java.lang.String .class , java.lang.Class<> ) ? TypeDescriptor . valueOf ( java.lang.String .class ) : TypeDescriptor . valueOf ( java.util.HashMap .class ) ; return org.springframework.data.web.PropertyPath . isCollection ( ) ? TypeDescriptor . collection ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , org.springframework.data.web.TypeDescriptor ) : TypeDescriptor . map ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , TypeDescriptor . valueOf ( java.lang.String .class ) , org.springframework.data.web.TypeDescriptor ) ; }  <METHOD_END>
