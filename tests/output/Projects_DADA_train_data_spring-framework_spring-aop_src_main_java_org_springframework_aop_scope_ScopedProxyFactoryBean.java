<METHOD_START> public void ( ) { setProxyTargetClass ( true ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . org.springframework.aop.scope.SimpleBeanTargetSource . setTargetBeanName ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.aop.scope.BeanFactory ) { if ( ! ( org.springframework.aop.scope.BeanFactory instanceof ConfigurableBeanFactory ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.aop.scope.BeanFactory ) ; } ConfigurableBeanFactory org.springframework.aop.scope.ConfigurableBeanFactory = ( ConfigurableBeanFactory ) org.springframework.aop.scope.BeanFactory ; this . org.springframework.aop.scope.SimpleBeanTargetSource . setBeanFactory ( org.springframework.aop.scope.BeanFactory ) ; ProxyFactory org.springframework.aop.scope.ProxyFactory = new ProxyFactory ( ) ; org.springframework.aop.scope.ProxyFactory . copyFrom ( this ) ; org.springframework.aop.scope.ProxyFactory . setTargetSource ( this . org.springframework.aop.scope.SimpleBeanTargetSource ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.aop.scope.BeanFactory . getType ( this . java.lang.String ) ; if ( java.lang.Class<> == null ) { throw new java.lang.IllegalStateException ( STRING + this . java.lang.String + STRING ) ; } if ( ! isProxyTargetClass ( ) || java.lang.Class<> . boolean ( ) || java.lang.reflect.Modifier . boolean ( java.lang.Class<> . int ( ) ) ) { org.springframework.aop.scope.ProxyFactory . setInterfaces ( ClassUtils . getAllInterfacesForClass ( java.lang.Class<> , org.springframework.aop.scope.ConfigurableBeanFactory . getBeanClassLoader ( ) ) ) ; } ScopedObject org.springframework.aop.scope.ScopedObject = new DefaultScopedObject ( org.springframework.aop.scope.ConfigurableBeanFactory , this . org.springframework.aop.scope.SimpleBeanTargetSource . getTargetBeanName ( ) ) ; org.springframework.aop.scope.ProxyFactory . addAdvice ( new DelegatingIntroductionInterceptor ( org.springframework.aop.scope.ScopedObject ) ) ; org.springframework.aop.scope.ProxyFactory . addInterface ( AopInfrastructureBean .class ) ; this . java.lang.Object = org.springframework.aop.scope.ProxyFactory . getProxy ( org.springframework.aop.scope.ConfigurableBeanFactory . getBeanClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { if ( this . java.lang.Object == null ) { throw new FactoryBeanNotInitializedException ( ) ; } return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { if ( this . java.lang.Object != null ) { return this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; } return this . org.springframework.aop.scope.SimpleBeanTargetSource . getTargetClass ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
