<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.scripting.support.BeanFactory ) { if ( ! ( org.springframework.scripting.support.BeanFactory instanceof ConfigurableBeanFactory ) ) { throw new java.lang.IllegalStateException ( STRING + STRING + org.springframework.scripting.support.BeanFactory . getClass ( ) ) ; } this . org.springframework.scripting.support.ConfigurableBeanFactory = ( ConfigurableBeanFactory ) org.springframework.scripting.support.BeanFactory ; this . org.springframework.scripting.support.DefaultListableBeanFactory . setParentBeanFactory ( this . org.springframework.scripting.support.ConfigurableBeanFactory ) ; this . org.springframework.scripting.support.DefaultListableBeanFactory . copyConfigurationFrom ( this . org.springframework.scripting.support.ConfigurableBeanFactory ) ; for ( java.util.Iterator<org.springframework.scripting.support.BeanPostProcessor> < BeanPostProcessor > java.util.Iterator<org.springframework.scripting.support.BeanPostProcessor> = this . org.springframework.scripting.support.DefaultListableBeanFactory . getBeanPostProcessors ( ) . iterator ( ) ; java.util.Iterator<org.springframework.scripting.support.BeanPostProcessor> . hasNext ( ) ;) { if ( java.util.Iterator<org.springframework.scripting.support.BeanPostProcessor> . next ( ) instanceof AopInfrastructureBean ) { java.util.Iterator<org.springframework.scripting.support.BeanPostProcessor> . remove ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceLoader org.springframework.scripting.support.ResourceLoader ) { this . org.springframework.scripting.support.ResourceLoader = org.springframework.scripting.support.ResourceLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.Integer . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { if ( ! ScriptFactory .class . boolean ( java.lang.Class<> ) ) { return null ; } BeanDefinition org.springframework.scripting.support.BeanDefinition = this . org.springframework.scripting.support.ConfigurableBeanFactory . getMergedBeanDefinition ( java.lang.String ) ; try { java.lang.String java.lang.String = java.lang.String + java.lang.String ; java.lang.String java.lang.String = java.lang.String + java.lang.String ; void ( org.springframework.scripting.support.BeanDefinition , java.lang.String , java.lang.String ) ; ScriptFactory org.springframework.scripting.support.ScriptFactory = this . org.springframework.scripting.support.DefaultListableBeanFactory . getBean ( java.lang.String , ScriptFactory .class ) ; ScriptSource org.springframework.scripting.support.ScriptSource = org.springframework.scripting.support.ScriptSource ( java.lang.String , org.springframework.scripting.support.ScriptFactory . getScriptSourceLocator ( ) ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.scripting.support.ScriptFactory . getScriptInterfaces ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.scripting.support.ScriptFactory . getScriptedObjectType ( org.springframework.scripting.support.ScriptSource ) ; if ( java.lang.Class<> != null ) { return java.lang.Class<> ; } else if ( ! ObjectUtils . isEmpty ( java.lang.Class<?>[] ) ) { return ( java.lang.Class<?>[] . int == NUMBER ? java.lang.Class<?>[] [ NUMBER ] : java.lang.Class<?> ( java.lang.Class<?>[] ) ) ; } else { if ( org.springframework.scripting.support.BeanDefinition . isSingleton ( ) ) { java.lang.Object java.lang.Object = this . org.springframework.scripting.support.DefaultListableBeanFactory . getBean ( java.lang.String ) ; if ( java.lang.Object != null ) { return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; } } } } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof BeanCreationException && ( ( BeanCreationException ) java.lang.Exception ) . getMostSpecificCause ( ) instanceof BeanCurrentlyInCreationException ) { if ( org.springframework.scripting.support.Log . isTraceEnabled ( ) ) { org.springframework.scripting.support.Log . trace ( STRING + java.lang.String + STRING + java.lang.Exception . java.lang.String ( ) ) ; } } else { if ( org.springframework.scripting.support.Log . isDebugEnabled ( ) ) { org.springframework.scripting.support.Log . debug ( STRING + java.lang.String + STRING , java.lang.Exception ) ; } } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { if ( ! ScriptFactory .class . boolean ( java.lang.Class<> ) ) { return null ; } BeanDefinition org.springframework.scripting.support.BeanDefinition = this . org.springframework.scripting.support.ConfigurableBeanFactory . getMergedBeanDefinition ( java.lang.String ) ; java.lang.String java.lang.String = java.lang.String + java.lang.String ; java.lang.String java.lang.String = java.lang.String + java.lang.String ; void ( org.springframework.scripting.support.BeanDefinition , java.lang.String , java.lang.String ) ; ScriptFactory org.springframework.scripting.support.ScriptFactory = this . org.springframework.scripting.support.DefaultListableBeanFactory . getBean ( java.lang.String , ScriptFactory .class ) ; ScriptSource org.springframework.scripting.support.ScriptSource = org.springframework.scripting.support.ScriptSource ( java.lang.String , org.springframework.scripting.support.ScriptFactory . getScriptSourceLocator ( ) ) ; boolean boolean = false ; try { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.scripting.support.ScriptFactory . getScriptedObjectType ( org.springframework.scripting.support.ScriptSource ) ; if ( java.lang.Class<> != null ) { boolean = FactoryBean .class . boolean ( java.lang.Class<> ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanCreationException ( java.lang.String , STRING + org.springframework.scripting.support.ScriptFactory , java.lang.Exception ) ; } long long = long ( org.springframework.scripting.support.BeanDefinition ) ; if ( long >= NUMBER ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.scripting.support.ScriptFactory . getScriptInterfaces ( ) ; RefreshableScriptTargetSource org.springframework.scripting.support.RefreshableScriptTargetSource = new RefreshableScriptTargetSource ( this . org.springframework.scripting.support.DefaultListableBeanFactory , java.lang.String , org.springframework.scripting.support.ScriptFactory , org.springframework.scripting.support.ScriptSource , boolean ) ; boolean boolean = boolean ( org.springframework.scripting.support.BeanDefinition ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.scripting.support.BeanDefinition . getAttribute ( java.lang.String ) ; if ( boolean && ( java.lang.String == null || ! java.lang.String . boolean ( STRING ) ) ) { throw new BeanDefinitionValidationException ( STRING + java.lang.String + STRING ) ; } org.springframework.scripting.support.RefreshableScriptTargetSource . setRefreshCheckDelay ( long ) ; return java.lang.Object ( org.springframework.scripting.support.RefreshableScriptTargetSource , java.lang.Class<?>[] , boolean ) ; } if ( boolean ) { java.lang.String = BeanFactory . FACTORY_BEAN_PREFIX + java.lang.String ; } return this . org.springframework.scripting.support.DefaultListableBeanFactory . getBean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinition org.springframework.scripting.support.BeanDefinition , java.lang.String java.lang.String , java.lang.String java.lang.String ) { synchronized ( this . org.springframework.scripting.support.DefaultListableBeanFactory ) { if ( ! this . org.springframework.scripting.support.DefaultListableBeanFactory . containsBeanDefinition ( java.lang.String ) ) { this . org.springframework.scripting.support.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.scripting.support.BeanDefinition ( org.springframework.scripting.support.BeanDefinition ) ) ; ScriptFactory org.springframework.scripting.support.ScriptFactory = this . org.springframework.scripting.support.DefaultListableBeanFactory . getBean ( java.lang.String , ScriptFactory .class ) ; ScriptSource org.springframework.scripting.support.ScriptSource = org.springframework.scripting.support.ScriptSource ( java.lang.String , org.springframework.scripting.support.ScriptFactory . getScriptSourceLocator ( ) ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.scripting.support.ScriptFactory . getScriptInterfaces ( ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.Class<?>[] ; if ( org.springframework.scripting.support.ScriptFactory . requiresConfigInterface ( ) && ! org.springframework.scripting.support.BeanDefinition . getPropertyValues ( ) . isEmpty ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( org.springframework.scripting.support.BeanDefinition , java.lang.Class<?>[] ) ; java.lang.Class<?>[] = ObjectUtils . addObjectToArray ( java.lang.Class<?>[] , java.lang.Class<> ) ; } BeanDefinition org.springframework.scripting.support.BeanDefinition = org.springframework.scripting.support.BeanDefinition ( org.springframework.scripting.support.BeanDefinition , java.lang.String , org.springframework.scripting.support.ScriptSource , java.lang.Class<?>[] ) ; long long = long ( org.springframework.scripting.support.BeanDefinition ) ; if ( long >= NUMBER ) { org.springframework.scripting.support.BeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; } this . org.springframework.scripting.support.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.scripting.support.BeanDefinition ) ; } } }  <METHOD_END>
<METHOD_START> protected long long ( BeanDefinition org.springframework.scripting.support.BeanDefinition ) { long long = this . long ; java.lang.Object java.lang.Object = org.springframework.scripting.support.BeanDefinition . getAttribute ( java.lang.String ) ; if ( java.lang.Object instanceof java.lang.Number ) { long = ( ( java.lang.Number ) java.lang.Object ) . long ( ) ; } else if ( java.lang.Object instanceof java.lang.String ) { long = java.lang.Long . long ( ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object != null ) { throw new BeanDefinitionStoreException ( STRING + java.lang.String + STRING + java.lang.Object + STRING ) ; } return long ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( BeanDefinition org.springframework.scripting.support.BeanDefinition ) { boolean boolean = this . boolean ; java.lang.Object java.lang.Object = org.springframework.scripting.support.BeanDefinition . getAttribute ( java.lang.String ) ; if ( java.lang.Object instanceof java.lang.Boolean ) { boolean = ( java.lang.Boolean ) java.lang.Object ; } else if ( java.lang.Object instanceof java.lang.String ) { boolean = java.lang.Boolean . java.lang.Boolean ( ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object != null ) { throw new BeanDefinitionStoreException ( STRING + java.lang.String + STRING + java.lang.Object + STRING ) ; } return boolean ; }  <METHOD_END>
<METHOD_START> protected org.springframework.scripting.support.BeanDefinition org.springframework.scripting.support.BeanDefinition ( BeanDefinition org.springframework.scripting.support.BeanDefinition ) { GenericBeanDefinition org.springframework.scripting.support.GenericBeanDefinition = new GenericBeanDefinition ( ) ; org.springframework.scripting.support.GenericBeanDefinition . setBeanClassName ( org.springframework.scripting.support.BeanDefinition . getBeanClassName ( ) ) ; org.springframework.scripting.support.GenericBeanDefinition . getConstructorArgumentValues ( ) . addArgumentValues ( org.springframework.scripting.support.BeanDefinition . getConstructorArgumentValues ( ) ) ; return org.springframework.scripting.support.GenericBeanDefinition ; }  <METHOD_END>
<METHOD_START> protected org.springframework.scripting.support.ScriptSource org.springframework.scripting.support.ScriptSource ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.scripting.support.ScriptSource> ) { ScriptSource org.springframework.scripting.support.ScriptSource = this . java.util.Map<java.lang.String,org.springframework.scripting.support.ScriptSource> . get ( java.lang.String ) ; if ( org.springframework.scripting.support.ScriptSource == null ) { org.springframework.scripting.support.ScriptSource = org.springframework.scripting.support.ScriptSource ( java.lang.String , java.lang.String , this . org.springframework.scripting.support.ResourceLoader ) ; this . java.util.Map<java.lang.String,org.springframework.scripting.support.ScriptSource> . put ( java.lang.String , org.springframework.scripting.support.ScriptSource ) ; } return org.springframework.scripting.support.ScriptSource ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.scripting.support.ScriptSource org.springframework.scripting.support.ScriptSource ( java.lang.String java.lang.String , java.lang.String java.lang.String , ResourceLoader org.springframework.scripting.support.ResourceLoader ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return new StaticScriptSource ( java.lang.String . java.lang.String ( java.lang.String . int ( ) ) , java.lang.String ) ; } else { return new ResourceScriptSource ( org.springframework.scripting.support.ResourceLoader . getResource ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( BeanDefinition org.springframework.scripting.support.BeanDefinition , java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { InterfaceMaker org.springframework.scripting.support.InterfaceMaker = new InterfaceMaker ( ) ; PropertyValue [] org.springframework.scripting.support.PropertyValue[] = org.springframework.scripting.support.BeanDefinition . getPropertyValues ( ) . getPropertyValues ( ) ; for ( PropertyValue org.springframework.scripting.support.PropertyValue : org.springframework.scripting.support.PropertyValue[] ) { java.lang.String java.lang.String = org.springframework.scripting.support.PropertyValue . getName ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = BeanUtils . findPropertyType ( java.lang.String , java.lang.Class<?>[] ) ; java.lang.String java.lang.String = STRING + StringUtils . capitalize ( java.lang.String ) ; Signature org.springframework.scripting.support.Signature = new Signature ( java.lang.String , Type . VOID_TYPE , new Type [] { Type . getType ( java.lang.Class<> ) } ) ; org.springframework.scripting.support.InterfaceMaker . add ( org.springframework.scripting.support.Signature , new Type [ NUMBER ] ) ; } if ( org.springframework.scripting.support.BeanDefinition instanceof AbstractBeanDefinition ) { AbstractBeanDefinition org.springframework.scripting.support.AbstractBeanDefinition = ( AbstractBeanDefinition ) org.springframework.scripting.support.BeanDefinition ; if ( org.springframework.scripting.support.AbstractBeanDefinition . getInitMethodName ( ) != null ) { Signature org.springframework.scripting.support.Signature = new Signature ( org.springframework.scripting.support.AbstractBeanDefinition . getInitMethodName ( ) , Type . VOID_TYPE , new Type [ NUMBER ] ) ; org.springframework.scripting.support.InterfaceMaker . add ( org.springframework.scripting.support.Signature , new Type [ NUMBER ] ) ; } if ( StringUtils . hasText ( org.springframework.scripting.support.AbstractBeanDefinition . getDestroyMethodName ( ) ) ) { Signature org.springframework.scripting.support.Signature = new Signature ( org.springframework.scripting.support.AbstractBeanDefinition . getDestroyMethodName ( ) , Type . VOID_TYPE , new Type [ NUMBER ] ) ; org.springframework.scripting.support.InterfaceMaker . add ( org.springframework.scripting.support.Signature , new Type [ NUMBER ] ) ; } } return org.springframework.scripting.support.InterfaceMaker . create ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { return ClassUtils . createCompositeInterface ( java.lang.Class<?>[] , this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.scripting.support.BeanDefinition org.springframework.scripting.support.BeanDefinition ( BeanDefinition org.springframework.scripting.support.BeanDefinition , java.lang.String java.lang.String , ScriptSource org.springframework.scripting.support.ScriptSource , java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { GenericBeanDefinition org.springframework.scripting.support.GenericBeanDefinition = new GenericBeanDefinition ( org.springframework.scripting.support.BeanDefinition ) ; org.springframework.scripting.support.GenericBeanDefinition . setFactoryBeanName ( java.lang.String ) ; org.springframework.scripting.support.GenericBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.scripting.support.GenericBeanDefinition . getConstructorArgumentValues ( ) . clear ( ) ; org.springframework.scripting.support.GenericBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.scripting.support.ScriptSource ) ; org.springframework.scripting.support.GenericBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , java.lang.Class<?>[] ) ; return org.springframework.scripting.support.GenericBeanDefinition ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( TargetSource org.springframework.scripting.support.TargetSource , java.lang.Class<?> < ? > [] java.lang.Class<?>[] , boolean boolean ) { ProxyFactory org.springframework.scripting.support.ProxyFactory = new ProxyFactory ( ) ; org.springframework.scripting.support.ProxyFactory . setTargetSource ( org.springframework.scripting.support.TargetSource ) ; java.lang.ClassLoader java.lang.ClassLoader = this . java.lang.ClassLoader ; if ( java.lang.Class<?>[] == null ) { java.lang.Class<?>[] = ClassUtils . getAllInterfacesForClass ( org.springframework.scripting.support.TargetSource . getTargetClass ( ) , this . java.lang.ClassLoader ) ; } org.springframework.scripting.support.ProxyFactory . setInterfaces ( java.lang.Class<?>[] ) ; if ( boolean ) { java.lang.ClassLoader = null ; org.springframework.scripting.support.ProxyFactory . setProxyTargetClass ( true ) ; } DelegatingIntroductionInterceptor org.springframework.scripting.support.DelegatingIntroductionInterceptor = new DelegatingIntroductionInterceptor ( org.springframework.scripting.support.TargetSource ) ; org.springframework.scripting.support.DelegatingIntroductionInterceptor . suppressInterface ( TargetSource .class ) ; org.springframework.scripting.support.ProxyFactory . addAdvice ( org.springframework.scripting.support.DelegatingIntroductionInterceptor ) ; return org.springframework.scripting.support.ProxyFactory . getProxy ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.scripting.support.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
