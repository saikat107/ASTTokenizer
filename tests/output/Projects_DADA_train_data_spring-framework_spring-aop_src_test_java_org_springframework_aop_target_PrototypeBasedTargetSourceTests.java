<METHOD_START> @ Test public void void ( ) java.lang.Exception { MutablePropertyValues org.springframework.aop.target.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.aop.target.MutablePropertyValues . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.aop.target.RootBeanDefinition = new RootBeanDefinition ( org.springframework.aop.target.PrototypeBasedTargetSourceTests.TestTargetSource .class ) ; org.springframework.aop.target.RootBeanDefinition . setPropertyValues ( org.springframework.aop.target.MutablePropertyValues ) ; MutablePropertyValues org.springframework.aop.target.MutablePropertyValues = new MutablePropertyValues ( ) ; RootBeanDefinition org.springframework.aop.target.RootBeanDefinition = new RootBeanDefinition ( SerializablePerson .class ) ; org.springframework.aop.target.RootBeanDefinition . setPropertyValues ( org.springframework.aop.target.MutablePropertyValues ) ; org.springframework.aop.target.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; DefaultListableBeanFactory org.springframework.aop.target.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.aop.target.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.aop.target.RootBeanDefinition ) ; org.springframework.aop.target.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.aop.target.RootBeanDefinition ) ; org.springframework.aop.target.PrototypeBasedTargetSourceTests.TestTargetSource org.springframework.aop.target.PrototypeBasedTargetSourceTests.TestTargetSource = ( org.springframework.aop.target.PrototypeBasedTargetSourceTests.TestTargetSource ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; TargetSource org.springframework.aop.target.TargetSource = ( TargetSource ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.aop.target.PrototypeBasedTargetSourceTests.TestTargetSource ) ; assertTrue ( STRING , org.springframework.aop.target.TargetSource instanceof SingletonTargetSource ) ; SingletonTargetSource org.springframework.aop.target.SingletonTargetSource = ( SingletonTargetSource ) org.springframework.aop.target.TargetSource ; assertNotNull ( org.springframework.aop.target.SingletonTargetSource . getTarget ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return newPrototypeInstance ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) throws java.lang.Exception { }  <METHOD_END>
