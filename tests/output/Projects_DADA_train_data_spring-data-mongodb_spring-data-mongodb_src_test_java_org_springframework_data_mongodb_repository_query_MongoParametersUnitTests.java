<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoParametersUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , Point .class , Distance .class ) ; MongoParameters org.springframework.data.mongodb.repository.query.MongoParameters = new MongoParameters ( java.lang.reflect.Method , false ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoParameters . getNumberOfParameters ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoParameters . getMaxDistanceIndex ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoParameters . getBindableParameters ( ) . getNumberOfParameters ( ) , is ( NUMBER ) ) ; Parameter org.springframework.data.mongodb.repository.query.Parameter = org.springframework.data.mongodb.repository.query.MongoParameters . getParameter ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.repository.query.Parameter . isSpecialParameter ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.Parameter . isBindable ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoParametersUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , Point .class , Distance .class ) ; MongoParameters org.springframework.data.mongodb.repository.query.MongoParameters = new MongoParameters ( java.lang.reflect.Method , false ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoParameters . getNearIndex ( ) , is ( - NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoParametersUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , Point .class , Point .class ) ; new MongoParameters ( java.lang.reflect.Method , true ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoParametersUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , double [] .class , double [] .class ) ; new MongoParameters ( java.lang.reflect.Method , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoParametersUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , Point .class , Point .class ) ; new MongoParameters ( java.lang.reflect.Method , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoParametersUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , Point .class , Point .class ) ; MongoParameters org.springframework.data.mongodb.repository.query.MongoParameters = new MongoParameters ( java.lang.reflect.Method , true ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoParameters . getNearIndex ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoParametersUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , double [] .class , double [] .class ) ; MongoParameters org.springframework.data.mongodb.repository.query.MongoParameters = new MongoParameters ( java.lang.reflect.Method , true ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoParameters . getNearIndex ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoParametersUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , TextCriteria .class ) ; MongoParameters org.springframework.data.mongodb.repository.query.MongoParameters = new MongoParameters ( java.lang.reflect.Method , false ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoParameters . getFullTextParameterIndex ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoParametersUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , TextCriteria .class ) ; MongoParameters org.springframework.data.mongodb.repository.query.MongoParameters = new MongoParameters ( java.lang.reflect.Method , false ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoParameters . getParameter ( org.springframework.data.mongodb.repository.query.MongoParameters . getFullTextParameterIndex ( ) ) . isSpecialParameter ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoParametersUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , Point .class , Range .class ) ; MongoParameters org.springframework.data.mongodb.repository.query.MongoParameters = new MongoParameters ( java.lang.reflect.Method , false ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoParameters . getRangeIndex ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoParameters . getMaxDistanceIndex ( ) , is ( - NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoParametersUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , Point .class , Distance .class ) ; MongoParameters org.springframework.data.mongodb.repository.query.MongoParameters = new MongoParameters ( java.lang.reflect.Method , false ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoParameters . getRangeIndex ( ) , is ( - NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoParameters . getMaxDistanceIndex ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( Point org.springframework.data.mongodb.repository.query.Point , Distance org.springframework.data.mongodb.repository.query.Distance );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.GeoResults<org.springframework.data.mongodb.repository.query.Person> < Person > org.springframework.data.mongodb.repository.query.GeoResults<org.springframework.data.mongodb.repository.query.Person> ( Point org.springframework.data.mongodb.repository.query.Point , Point org.springframework.data.mongodb.repository.query.Point );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.GeoResults<org.springframework.data.mongodb.repository.query.Person> < Person > org.springframework.data.mongodb.repository.query.GeoResults<org.springframework.data.mongodb.repository.query.Person> ( double [] double[] , double [] double[] );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( Point org.springframework.data.mongodb.repository.query.Point , Point org.springframework.data.mongodb.repository.query.Point );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.GeoResults<org.springframework.data.mongodb.repository.query.Person> < Person > org.springframework.data.mongodb.repository.query.GeoResults<org.springframework.data.mongodb.repository.query.Person> ( Point org.springframework.data.mongodb.repository.query.Point , @ Near Point org.springframework.data.mongodb.repository.query.Point );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.GeoResults<org.springframework.data.mongodb.repository.query.Person> < Person > org.springframework.data.mongodb.repository.query.GeoResults<org.springframework.data.mongodb.repository.query.Person> ( double [] double[] , @ Near double [] double[] );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( java.lang.String java.lang.String , TextCriteria org.springframework.data.mongodb.repository.query.TextCriteria );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( Point org.springframework.data.mongodb.repository.query.Point , Range < Distance > org.springframework.data.mongodb.repository.query.Range<org.springframework.data.mongodb.repository.query.Distance> );  <METHOD_END>
