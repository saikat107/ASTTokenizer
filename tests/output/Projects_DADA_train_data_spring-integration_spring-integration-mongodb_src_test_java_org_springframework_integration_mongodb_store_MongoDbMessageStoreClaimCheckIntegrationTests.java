<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.store.MongoDbFactory = new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ; MongoDbMessageStore org.springframework.integration.mongodb.store.MongoDbMessageStore = new MongoDbMessageStore ( org.springframework.integration.mongodb.store.MongoDbFactory ) ; org.springframework.integration.mongodb.store.MongoDbMessageStore . afterPropertiesSet ( ) ; ClaimCheckInTransformer org.springframework.integration.mongodb.store.ClaimCheckInTransformer = new ClaimCheckInTransformer ( org.springframework.integration.mongodb.store.MongoDbMessageStore ) ; ClaimCheckOutTransformer org.springframework.integration.mongodb.store.ClaimCheckOutTransformer = new ClaimCheckOutTransformer ( org.springframework.integration.mongodb.store.MongoDbMessageStore ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.ClaimCheckInTransformer . transform ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.ClaimCheckOutTransformer . transform ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) , org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> , org.springframework.integration.mongodb.store.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.store.MongoDbFactory = new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ; MongoDbMessageStore org.springframework.integration.mongodb.store.MongoDbMessageStore = new MongoDbMessageStore ( org.springframework.integration.mongodb.store.MongoDbFactory ) ; org.springframework.integration.mongodb.store.MongoDbMessageStore . afterPropertiesSet ( ) ; ClaimCheckInTransformer org.springframework.integration.mongodb.store.ClaimCheckInTransformer = new ClaimCheckInTransformer ( org.springframework.integration.mongodb.store.MongoDbMessageStore ) ; ClaimCheckOutTransformer org.springframework.integration.mongodb.store.ClaimCheckOutTransformer = new ClaimCheckOutTransformer ( org.springframework.integration.mongodb.store.MongoDbMessageStore ) ; org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage = new org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage ( ) ; org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage . void ( STRING ) ; org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage . void ( NUMBER ) ; org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage . void ( false ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = MessageBuilder . withPayload ( org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage ) . build ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.ClaimCheckInTransformer . transform ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.ClaimCheckOutTransformer . transform ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) , org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> , org.springframework.integration.mongodb.store.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.store.MongoDbFactory = new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ; ConfigurableMongoDbMessageStore org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore = new ConfigurableMongoDbMessageStore ( org.springframework.integration.mongodb.store.MongoDbFactory ) ; GenericApplicationContext org.springframework.integration.mongodb.store.GenericApplicationContext = TestUtils . createTestApplicationContext ( ) ; org.springframework.integration.mongodb.store.GenericApplicationContext . refresh ( ) ; org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore . setApplicationContext ( org.springframework.integration.mongodb.store.GenericApplicationContext ) ; org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore . afterPropertiesSet ( ) ; ClaimCheckInTransformer org.springframework.integration.mongodb.store.ClaimCheckInTransformer = new ClaimCheckInTransformer ( org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore ) ; ClaimCheckOutTransformer org.springframework.integration.mongodb.store.ClaimCheckOutTransformer = new ClaimCheckOutTransformer ( org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.ClaimCheckInTransformer . transform ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.ClaimCheckOutTransformer . transform ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) , org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> , org.springframework.integration.mongodb.store.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.store.MongoDbFactory = new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ; ConfigurableMongoDbMessageStore org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore = new ConfigurableMongoDbMessageStore ( org.springframework.integration.mongodb.store.MongoDbFactory ) ; GenericApplicationContext org.springframework.integration.mongodb.store.GenericApplicationContext = TestUtils . createTestApplicationContext ( ) ; org.springframework.integration.mongodb.store.GenericApplicationContext . refresh ( ) ; org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore . setApplicationContext ( org.springframework.integration.mongodb.store.GenericApplicationContext ) ; org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore . afterPropertiesSet ( ) ; ClaimCheckInTransformer org.springframework.integration.mongodb.store.ClaimCheckInTransformer = new ClaimCheckInTransformer ( org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore ) ; ClaimCheckOutTransformer org.springframework.integration.mongodb.store.ClaimCheckOutTransformer = new ClaimCheckOutTransformer ( org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore ) ; org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage = new org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage ( ) ; org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage . void ( STRING ) ; org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage . void ( NUMBER ) ; org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage . void ( false ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = MessageBuilder . withPayload ( org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage ) . build ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.ClaimCheckInTransformer . transform ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.ClaimCheckOutTransformer . transform ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) , org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> , org.springframework.integration.mongodb.store.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { final int int = NUMBER ; int int = NUMBER ; int = int * int + ( boolean ? NUMBER : NUMBER ) ; int = int * int + ( ( java.lang.String == null ) ? NUMBER : java.lang.String . int ( ) ) ; int = int * int + int ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( java.lang.Class<? extends org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage = ( org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage ) java.lang.Object ; if ( boolean != org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage . boolean ) { return false ; } if ( java.lang.String == null ) { if ( org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage . java.lang.String != null ) { return false ; } } else if ( ! java.lang.String . boolean ( org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage . java.lang.String ) ) { return false ; } if ( int != org.springframework.integration.mongodb.store.MongoDbMessageStoreClaimCheckIntegrationTests.Beverage . int ) { return false ; } return true ; }  <METHOD_END>
