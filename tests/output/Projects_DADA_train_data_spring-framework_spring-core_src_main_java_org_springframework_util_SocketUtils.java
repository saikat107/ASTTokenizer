<METHOD_START> public void ( ) { }  <METHOD_END>
<METHOD_START> public static int int ( ) { return int ( int ) ; }  <METHOD_END>
<METHOD_START> public static int int ( int int ) { return int ( int , int ) ; }  <METHOD_END>
<METHOD_START> public static int int ( int int , int int ) { return org.springframework.util.SocketUtils.SocketType . org.springframework.util.SocketUtils.SocketType . int ( int , int ) ; }  <METHOD_END>
<METHOD_START> public static java.util.SortedSet<java.lang.Integer> < java.lang.Integer > java.util.SortedSet<java.lang.Integer> ( int int ) { return java.util.SortedSet<java.lang.Integer> ( int , int , int ) ; }  <METHOD_END>
<METHOD_START> public static java.util.SortedSet<java.lang.Integer> < java.lang.Integer > java.util.SortedSet<java.lang.Integer> ( int int , int int , int int ) { return org.springframework.util.SocketUtils.SocketType . org.springframework.util.SocketUtils.SocketType . java.util.SortedSet<java.lang.Integer> ( int , int , int ) ; }  <METHOD_END>
<METHOD_START> public static int int ( ) { return int ( int ) ; }  <METHOD_END>
<METHOD_START> public static int int ( int int ) { return int ( int , int ) ; }  <METHOD_END>
<METHOD_START> public static int int ( int int , int int ) { return org.springframework.util.SocketUtils.SocketType . org.springframework.util.SocketUtils.SocketType . int ( int , int ) ; }  <METHOD_END>
<METHOD_START> public static java.util.SortedSet<java.lang.Integer> < java.lang.Integer > java.util.SortedSet<java.lang.Integer> ( int int ) { return java.util.SortedSet<java.lang.Integer> ( int , int , int ) ; }  <METHOD_END>
<METHOD_START> public static java.util.SortedSet<java.lang.Integer> < java.lang.Integer > java.util.SortedSet<java.lang.Integer> ( int int , int int , int int ) { return org.springframework.util.SocketUtils.SocketType . org.springframework.util.SocketUtils.SocketType . java.util.SortedSet<java.lang.Integer> ( int , int , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( int int ) { try { java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( int , NUMBER , java.net.InetAddress . java.net.InetAddress ( STRING ) ) ; java.net.ServerSocket . void ( ) ; return true ; } catch ( java.lang.Exception java.lang.Exception ) { return false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( int int ) { try { java.net.DatagramSocket java.net.DatagramSocket = new java.net.DatagramSocket ( int , java.net.InetAddress . java.net.InetAddress ( STRING ) ) ; java.net.DatagramSocket . void ( ) ; return true ; } catch ( java.lang.Exception java.lang.Exception ) { return false ; } }  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( int int );  <METHOD_END>
<METHOD_START> private int int ( int int , int int ) { int int = int - int ; return int + java.util.Random . int ( int + NUMBER ) ; }  <METHOD_END>
<METHOD_START> int int ( int int , int int ) { Assert . isTrue ( int > NUMBER , STRING ) ; Assert . isTrue ( int >= int , STRING ) ; Assert . isTrue ( int <= int , STRING + int ) ; int int = int - int ; int int ; int int = NUMBER ; do { if ( ++ int > int ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.String ( ) , int , int , int ) ) ; } int = int ( int , int ) ; } while ( ! boolean ( int ) ); return int ; }  <METHOD_END>
<METHOD_START> java.util.SortedSet<java.lang.Integer> < java.lang.Integer > java.util.SortedSet<java.lang.Integer> ( int int , int int , int int ) { Assert . isTrue ( int > NUMBER , STRING ) ; Assert . isTrue ( int > int , STRING ) ; Assert . isTrue ( int <= int , STRING + int ) ; Assert . isTrue ( int > NUMBER , STRING ) ; Assert . isTrue ( ( int - int ) >= int , STRING ) ; java.util.SortedSet<java.lang.Integer> < java.lang.Integer > java.util.SortedSet<java.lang.Integer> = new java.util.TreeSet<java.lang.Integer> <> ( ) ; int int = NUMBER ; while ( ( ++ int <= int + NUMBER ) && java.util.SortedSet<java.lang.Integer> . int ( ) < int ) { java.util.SortedSet<java.lang.Integer> . boolean ( int ( int , int ) ) ; } if ( java.util.SortedSet<java.lang.Integer> . int ( ) != int ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , int , java.lang.String ( ) , int , int ) ) ; } return java.util.SortedSet<java.lang.Integer> ; }  <METHOD_END>
