<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> < java.lang.String , XPathExpressionEvaluatingHeaderValueMessageProcessor > java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> = new java.util.HashMap<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> < java.lang.String , XPathExpressionEvaluatingHeaderValueMessageProcessor > ( ) ; java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> . put ( STRING , new XPathExpressionEvaluatingHeaderValueMessageProcessor ( STRING ) ) ; java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> . put ( STRING , new XPathExpressionEvaluatingHeaderValueMessageProcessor ( STRING ) ) ; java.lang.String java.lang.String = STRING ; XPathHeaderEnricher org.springframework.integration.xml.transformer.XPathHeaderEnricher = new XPathHeaderEnricher ( java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> ) ; Message < ? > org.springframework.integration.xml.transformer.Message<?> = org.springframework.integration.xml.transformer.XPathHeaderEnricher . transform ( MessageBuilder . withPayload ( java.lang.String ) . build ( ) ) ; MessageHeaders org.springframework.integration.xml.transformer.MessageHeaders = org.springframework.integration.xml.transformer.Message<> . getHeaders ( ) ; assertEquals ( STRING , STRING , org.springframework.integration.xml.transformer.MessageHeaders . get ( STRING ) ) ; assertEquals ( STRING , STRING , org.springframework.integration.xml.transformer.MessageHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> < java.lang.String , XPathExpressionEvaluatingHeaderValueMessageProcessor > java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> = new java.util.HashMap<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> < java.lang.String , XPathExpressionEvaluatingHeaderValueMessageProcessor > ( ) ; XPathExpressionEvaluatingHeaderValueMessageProcessor org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor = new XPathExpressionEvaluatingHeaderValueMessageProcessor ( STRING ) ; org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor . setHeaderType ( java.util.TimeZone .class ) ; java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> . put ( STRING , org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor ) ; java.lang.String java.lang.String = STRING ; XPathHeaderEnricher org.springframework.integration.xml.transformer.XPathHeaderEnricher = new XPathHeaderEnricher ( java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> ) ; Message < ? > org.springframework.integration.xml.transformer.Message<?> = org.springframework.integration.xml.transformer.XPathHeaderEnricher . transform ( MessageBuilder . withPayload ( java.lang.String ) . build ( ) ) ; MessageHeaders org.springframework.integration.xml.transformer.MessageHeaders = org.springframework.integration.xml.transformer.Message<> . getHeaders ( ) ; assertEquals ( STRING , java.util.TimeZone . java.util.TimeZone ( STRING ) , org.springframework.integration.xml.transformer.MessageHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> < java.lang.String , XPathExpressionEvaluatingHeaderValueMessageProcessor > java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> = new java.util.HashMap<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> < java.lang.String , XPathExpressionEvaluatingHeaderValueMessageProcessor > ( ) ; java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> . put ( STRING , new XPathExpressionEvaluatingHeaderValueMessageProcessor ( STRING ) ) ; java.lang.String java.lang.String = STRING ; XPathHeaderEnricher org.springframework.integration.xml.transformer.XPathHeaderEnricher = new XPathHeaderEnricher ( java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> ) ; Message < ? > org.springframework.integration.xml.transformer.Message<?> = org.springframework.integration.xml.transformer.XPathHeaderEnricher . transform ( MessageBuilder . withPayload ( java.lang.String ) . build ( ) ) ; MessageHeaders org.springframework.integration.xml.transformer.MessageHeaders = org.springframework.integration.xml.transformer.Message<> . getHeaders ( ) ; assertNull ( STRING , org.springframework.integration.xml.transformer.MessageHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> < java.lang.String , XPathExpressionEvaluatingHeaderValueMessageProcessor > java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> = new java.util.HashMap<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> < java.lang.String , XPathExpressionEvaluatingHeaderValueMessageProcessor > ( ) ; java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> . put ( STRING , new XPathExpressionEvaluatingHeaderValueMessageProcessor ( STRING ) ) ; java.lang.String java.lang.String = STRING ; XPathHeaderEnricher org.springframework.integration.xml.transformer.XPathHeaderEnricher = new XPathHeaderEnricher ( java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> ) ; org.springframework.integration.xml.transformer.XPathHeaderEnricher . setShouldSkipNulls ( false ) ; org.springframework.integration.xml.transformer.XPathHeaderEnricher . setDefaultOverwrite ( true ) ; Message < ? > org.springframework.integration.xml.transformer.Message<?> = org.springframework.integration.xml.transformer.XPathHeaderEnricher . transform ( MessageBuilder . withPayload ( java.lang.String ) . setHeader ( STRING , STRING ) . build ( ) ) ; MessageHeaders org.springframework.integration.xml.transformer.MessageHeaders = org.springframework.integration.xml.transformer.Message<> . getHeaders ( ) ; assertNull ( org.springframework.integration.xml.transformer.MessageHeaders . get ( STRING ) ) ; assertFalse ( org.springframework.integration.xml.transformer.MessageHeaders . containsKey ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> < java.lang.String , XPathExpressionEvaluatingHeaderValueMessageProcessor > java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> = new java.util.HashMap<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> < java.lang.String , XPathExpressionEvaluatingHeaderValueMessageProcessor > ( ) ; XPathExpressionEvaluatingHeaderValueMessageProcessor org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor = new XPathExpressionEvaluatingHeaderValueMessageProcessor ( STRING ) ; XPathExpressionEvaluatingHeaderValueMessageProcessor org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor = new XPathExpressionEvaluatingHeaderValueMessageProcessor ( STRING ) ; org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor . setEvaluationType ( XPathEvaluationType . NUMBER_RESULT ) ; java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> . put ( STRING , org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor ) ; java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> . put ( STRING , org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor ) ; java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathEvaluationType> < java.lang.String , XPathEvaluationType > java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathEvaluationType> = new java.util.HashMap<java.lang.String,org.springframework.integration.xml.transformer.XPathEvaluationType> < java.lang.String , XPathEvaluationType > ( ) ; java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathEvaluationType> . put ( STRING , XPathEvaluationType . NUMBER_RESULT ) ; java.lang.String java.lang.String = STRING ; XPathHeaderEnricher org.springframework.integration.xml.transformer.XPathHeaderEnricher = new XPathHeaderEnricher ( java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.XPathExpressionEvaluatingHeaderValueMessageProcessor> ) ; Message < ? > org.springframework.integration.xml.transformer.Message<?> = org.springframework.integration.xml.transformer.XPathHeaderEnricher . transform ( MessageBuilder . withPayload ( java.lang.String ) . build ( ) ) ; MessageHeaders org.springframework.integration.xml.transformer.MessageHeaders = org.springframework.integration.xml.transformer.Message<> . getHeaders ( ) ; assertEquals ( STRING , STRING , org.springframework.integration.xml.transformer.MessageHeaders . get ( STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.xml.transformer.MessageHeaders . get ( STRING ) ) ; }  <METHOD_END>
