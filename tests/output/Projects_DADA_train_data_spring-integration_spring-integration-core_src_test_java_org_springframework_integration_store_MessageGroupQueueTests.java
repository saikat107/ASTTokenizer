<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageGroupQueue org.springframework.integration.store.MessageGroupQueue = new MessageGroupQueue ( new SimpleMessageStore ( ) , STRING ) ; org.springframework.integration.store.MessageGroupQueue . put ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.store.Message<?> = org.springframework.integration.store.MessageGroupQueue . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( org.springframework.integration.store.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageGroupQueue org.springframework.integration.store.MessageGroupQueue = new MessageGroupQueue ( new SimpleMessageStore ( ) , STRING ) ; org.springframework.integration.store.MessageGroupQueue . put ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.store.MessageGroupQueue . size ( ) ) ; org.springframework.integration.store.MessageGroupQueue . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( NUMBER , org.springframework.integration.store.MessageGroupQueue . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpleMessageStore org.springframework.integration.store.SimpleMessageStore = new SimpleMessageStore ( ) ; MessageGroupQueue org.springframework.integration.store.MessageGroupQueue = new MessageGroupQueue ( org.springframework.integration.store.SimpleMessageStore , STRING , NUMBER ) ; org.springframework.integration.store.MessageGroupQueue . put ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.store.MessageGroupQueue . remainingCapacity ( ) ) ; org.springframework.integration.store.MessageGroupQueue . put ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.store.MessageGroupQueue . remainingCapacity ( ) ) ; Message < ? > org.springframework.integration.store.Message<?> = org.springframework.integration.store.MessageGroupQueue . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( org.springframework.integration.store.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.store.MessageGroupQueue . remainingCapacity ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpleMessageStore org.springframework.integration.store.SimpleMessageStore = new SimpleMessageStore ( ) ; MessageGroupQueue org.springframework.integration.store.MessageGroupQueue = new MessageGroupQueue ( org.springframework.integration.store.SimpleMessageStore , STRING , NUMBER ) ; org.springframework.integration.store.MessageGroupQueue . put ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertFalse ( org.springframework.integration.store.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageGroupQueue org.springframework.integration.store.MessageGroupQueue = new MessageGroupQueue ( new SimpleMessageStore ( ) , STRING ) ; org.springframework.integration.store.MessageGroupQueue . put ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.store.Message<?> = org.springframework.integration.store.MessageGroupQueue . take ( ) ; assertNotNull ( org.springframework.integration.store.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( NUMBER , NUMBER , new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( NUMBER , NUMBER , null ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int , final int int , final java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ) throws java.lang.Exception { SimpleMessageStore org.springframework.integration.store.SimpleMessageStore = new SimpleMessageStore ( ) ; final MessageGroupQueue org.springframework.integration.store.MessageGroupQueue = new MessageGroupQueue ( org.springframework.integration.store.SimpleMessageStore , STRING ) ; java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ; java.util.concurrent.CompletionService<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.CompletionService<java.lang.Boolean> = new java.util.concurrent.ExecutorCompletionService<java.lang.Boolean> < java.lang.Boolean > ( java.util.concurrent.ExecutorService ) ; for ( int int = NUMBER ; int < int ; int ++ ) { final int int = int ; java.util.concurrent.CompletionService<java.lang.Boolean> . java.util.concurrent.Future<java.lang.Boolean> ( ( ) { boolean boolean = true ; for ( int int = NUMBER ; int < int ; int ++ ) { boolean &= org.springframework.integration.store.MessageGroupQueue . add ( new GenericMessage < java.lang.String > ( STRING + int + STRING + int ) ) ; if ( ! boolean ) { org.springframework.integration.store.Log . warn ( STRING ) ; } } return boolean ; } ) ; java.util.concurrent.CompletionService<java.lang.Boolean> . java.util.concurrent.Future<java.lang.Boolean> ( ( ) { boolean boolean = true ; for ( int int = NUMBER ; int < int ; int ++ ) { @ java.lang.SuppressWarnings ( STRING ) Message < java.lang.String > org.springframework.integration.store.Message<java.lang.String> = ( Message < java.lang.String > ) org.springframework.integration.store.MessageGroupQueue . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; boolean &= org.springframework.integration.store.Message<java.lang.String> != null ; if ( ! boolean ) { org.springframework.integration.store.Log . warn ( STRING ) ; } else if ( java.util.Set<java.lang.String> != null ) { synchronized ( java.util.Set<java.lang.String> ) { java.util.Set<java.lang.String> . boolean ( org.springframework.integration.store.Message<java.lang.String> . getPayload ( ) ) ; } } } return boolean ; } ) ; org.springframework.integration.store.SimpleMessageStore . expireMessageGroups ( - NUMBER ) ; } for ( int int = NUMBER ; int < NUMBER * int ; int ++ ) { assertTrue ( java.util.concurrent.CompletionService<java.lang.Boolean> . java.util.concurrent.Future<java.lang.Boolean> ( ) . java.lang.Boolean ( ) ) ; } if ( java.util.Set<java.lang.String> != null ) { assertEquals ( int * int , java.util.Set<java.lang.String> . int ( ) ) ; } assertEquals ( NUMBER , org.springframework.integration.store.MessageGroupQueue . size ( ) ) ; org.springframework.integration.store.SimpleMessageStore . expireMessageGroups ( - NUMBER ) ; assertEquals ( java.lang.Integer . int , org.springframework.integration.store.MessageGroupQueue . remainingCapacity ( ) ) ; java.util.concurrent.ExecutorService . void ( ) ; }  <METHOD_END>
