<METHOD_START> @ Before public void void ( ) { org.springframework.aop.support.AbstractRegexpMethodPointcut = org.springframework.aop.support.AbstractRegexpMethodPointcut ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.aop.support.AbstractRegexpMethodPointcut org.springframework.aop.support.AbstractRegexpMethodPointcut ( )  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.aop.support.AbstractRegexpMethodPointcut ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.aop.support.AbstractRegexpMethodPointcut = ( AbstractRegexpMethodPointcut ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.aop.support.AbstractRegexpMethodPointcut ) ; void ( org.springframework.aop.support.AbstractRegexpMethodPointcut ) ; }  <METHOD_END>
<METHOD_START> protected void void ( AbstractRegexpMethodPointcut org.springframework.aop.support.AbstractRegexpMethodPointcut ) throws java.lang.Exception { assertFalse ( org.springframework.aop.support.AbstractRegexpMethodPointcut . matches ( java.lang.Object .class . java.lang.reflect.Method ( STRING ) , java.lang.String .class ) ) ; assertFalse ( org.springframework.aop.support.AbstractRegexpMethodPointcut . matches ( java.lang.Object .class . java.lang.reflect.Method ( STRING ) , java.lang.Object .class ) ) ; assertEquals ( NUMBER , org.springframework.aop.support.AbstractRegexpMethodPointcut . getPatterns ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.aop.support.AbstractRegexpMethodPointcut . setPattern ( STRING ) ; void ( org.springframework.aop.support.AbstractRegexpMethodPointcut ) ; org.springframework.aop.support.AbstractRegexpMethodPointcut = ( AbstractRegexpMethodPointcut ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.aop.support.AbstractRegexpMethodPointcut ) ; void ( org.springframework.aop.support.AbstractRegexpMethodPointcut ) ; }  <METHOD_END>
<METHOD_START> protected void void ( AbstractRegexpMethodPointcut org.springframework.aop.support.AbstractRegexpMethodPointcut ) throws java.lang.Exception { assertTrue ( org.springframework.aop.support.AbstractRegexpMethodPointcut . matches ( java.lang.Object .class . java.lang.reflect.Method ( STRING ) , java.lang.String .class ) ) ; assertTrue ( org.springframework.aop.support.AbstractRegexpMethodPointcut . matches ( java.lang.Object .class . java.lang.reflect.Method ( STRING ) , java.lang.Object .class ) ) ; assertFalse ( org.springframework.aop.support.AbstractRegexpMethodPointcut . matches ( java.lang.Object .class . java.lang.reflect.Method ( STRING ) , java.lang.Object .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.aop.support.AbstractRegexpMethodPointcut . setPattern ( STRING ) ; assertTrue ( org.springframework.aop.support.AbstractRegexpMethodPointcut . matches ( java.lang.Object .class . java.lang.reflect.Method ( STRING ) , java.lang.String .class ) ) ; assertFalse ( org.springframework.aop.support.AbstractRegexpMethodPointcut . matches ( java.lang.Object .class . java.lang.reflect.Method ( STRING ) , java.lang.Object .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.aop.support.AbstractRegexpMethodPointcut . setPattern ( STRING ) ; assertTrue ( org.springframework.aop.support.AbstractRegexpMethodPointcut . matches ( java.lang.Object .class . java.lang.reflect.Method ( STRING ) , java.lang.Object .class ) ) ; assertFalse ( org.springframework.aop.support.AbstractRegexpMethodPointcut . matches ( java.lang.Object .class . java.lang.reflect.Method ( STRING ) , java.lang.Object .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.aop.support.AbstractRegexpMethodPointcut . setPattern ( STRING ) ; assertTrue ( org.springframework.aop.support.AbstractRegexpMethodPointcut . matches ( java.lang.Object .class . java.lang.reflect.Method ( STRING ) , java.lang.String .class ) ) ; assertTrue ( org.springframework.aop.support.AbstractRegexpMethodPointcut . matches ( java.lang.Object .class . java.lang.reflect.Method ( STRING ) , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.aop.support.AbstractRegexpMethodPointcut . setPattern ( STRING ) ; assertTrue ( org.springframework.aop.support.AbstractRegexpMethodPointcut . matches ( java.lang.Exception .class . java.lang.reflect.Method ( STRING ) , java.io.IOException .class ) ) ; assertFalse ( org.springframework.aop.support.AbstractRegexpMethodPointcut . matches ( java.lang.Exception .class . java.lang.reflect.Method ( STRING ) , java.lang.Exception .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.aop.support.AbstractRegexpMethodPointcut . setPattern ( STRING ) ; this . org.springframework.aop.support.AbstractRegexpMethodPointcut . setExcludedPattern ( STRING ) ; assertTrue ( this . org.springframework.aop.support.AbstractRegexpMethodPointcut . matches ( TestBean .class . java.lang.reflect.Method ( STRING ) , TestBean .class ) ) ; assertFalse ( this . org.springframework.aop.support.AbstractRegexpMethodPointcut . matches ( TestBean .class . java.lang.reflect.Method ( STRING ) , TestBean .class ) ) ; }  <METHOD_END>
