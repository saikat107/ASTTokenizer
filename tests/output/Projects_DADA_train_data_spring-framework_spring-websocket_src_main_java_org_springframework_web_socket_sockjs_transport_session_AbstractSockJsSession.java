<METHOD_START> public void ( java.lang.String java.lang.String , SockJsServiceConfig org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig , WebSocketHandler org.springframework.web.socket.sockjs.transport.session.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig , STRING ) ; Assert . notNull ( org.springframework.web.socket.sockjs.transport.session.WebSocketHandler , STRING ) ; this . java.lang.String = java.lang.String ; this . org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig = org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig ; this . org.springframework.web.socket.sockjs.transport.session.WebSocketHandler = org.springframework.web.socket.sockjs.transport.session.WebSocketHandler ; if ( java.util.Map<java.lang.String,java.lang.Object> != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.socket.sockjs.transport.session.SockJsMessageCodec org.springframework.web.socket.sockjs.transport.session.SockJsMessageCodec ( ) { return this . org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig . getMessageCodec ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig ( ) { return this . org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public final void void ( WebSocketMessage < ? > org.springframework.web.socket.sockjs.transport.session.WebSocketMessage<?> ) throws java.io.IOException { Assert . state ( ! boolean ( ) , STRING ) ; Assert . isInstanceOf ( TextMessage .class , org.springframework.web.socket.sockjs.transport.session.WebSocketMessage<> , STRING ) ; void ( ( ( TextMessage ) org.springframework.web.socket.sockjs.transport.session.WebSocketMessage<> ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( java.lang.String java.lang.String ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State . boolean ( this . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State . boolean ( this . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State . boolean ( this . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) java.io.IOException { void ( new CloseStatus ( NUMBER , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( CloseStatus org.springframework.web.socket.sockjs.transport.session.CloseStatus ) throws java.io.IOException { if ( boolean ( ) ) { if ( org.springframework.web.socket.sockjs.transport.session.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.sockjs.transport.session.Log . debug ( STRING + java.lang.String ( ) + STRING + org.springframework.web.socket.sockjs.transport.session.CloseStatus ) ; } this . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State = org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State ; try { if ( boolean ( ) && ! CloseStatus . SESSION_NOT_RELIABLE . equals ( org.springframework.web.socket.sockjs.transport.session.CloseStatus ) ) { try { void ( SockJsFrame . closeFrame ( org.springframework.web.socket.sockjs.transport.session.CloseStatus . getCode ( ) , org.springframework.web.socket.sockjs.transport.session.CloseStatus . getReason ( ) ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.sockjs.transport.session.Log . debug ( STRING , java.lang.Throwable ) ; } } void ( ) ; void ( ) ; void ( org.springframework.web.socket.sockjs.transport.session.CloseStatus ) ; } finally { try { this . org.springframework.web.socket.sockjs.transport.session.WebSocketHandler . afterConnectionClosed ( this , org.springframework.web.socket.sockjs.transport.session.CloseStatus ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.sockjs.transport.session.Log . debug ( STRING + this , java.lang.Throwable ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { if ( boolean ( ) ) { return ( java.lang.System . long ( ) - this . long ) ; } else { return ( boolean ( ) ? NUMBER : java.lang.System . long ( ) - this . long ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { this . long = java.lang.System . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) org.springframework.web.socket.sockjs.transport.session.SockJsTransportFailureException { synchronized ( this . java.lang.Object ) { if ( boolean ( ) && ! this . boolean ) { void ( SockJsFrame . heartbeatFrame ( ) ) ; void ( ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( this . boolean ) { return; } synchronized ( this . java.lang.Object ) { void ( ) ; if ( ! boolean ( ) ) { return; } java.util.Date java.util.Date = new java.util.Date ( java.lang.System . long ( ) + this . org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig . getHeartbeatTime ( ) ) ; this . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.HeartbeatTask = new org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.HeartbeatTask ( ) ; this . java.util.concurrent.ScheduledFuture<?> = this . org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig . getTaskScheduler ( ) . schedule ( this . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.HeartbeatTask , java.util.Date ) ; if ( org.springframework.web.socket.sockjs.transport.session.Log . isTraceEnabled ( ) ) { org.springframework.web.socket.sockjs.transport.session.Log . trace ( STRING + java.lang.String ( ) ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( ) { synchronized ( this . java.lang.Object ) { if ( this . java.util.concurrent.ScheduledFuture<> != null ) { if ( org.springframework.web.socket.sockjs.transport.session.Log . isTraceEnabled ( ) ) { org.springframework.web.socket.sockjs.transport.session.Log . trace ( STRING + java.lang.String ( ) ) ; } this . java.util.concurrent.ScheduledFuture<> . boolean ( false ) ; this . java.util.concurrent.ScheduledFuture<?> = null ; } if ( this . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.HeartbeatTask != null ) { this . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.HeartbeatTask . void ( ) ; this . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.HeartbeatTask = null ; } } }  <METHOD_END>
<METHOD_START> public abstract boolean boolean ( )  <METHOD_END>
<METHOD_START> protected abstract void void ( CloseStatus org.springframework.web.socket.sockjs.transport.session.CloseStatus ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> protected void void ( SockJsFrame org.springframework.web.socket.sockjs.transport.session.SockJsFrame ) throws org.springframework.web.socket.sockjs.transport.session.SockJsTransportFailureException { if ( org.springframework.web.socket.sockjs.transport.session.Log . isTraceEnabled ( ) ) { org.springframework.web.socket.sockjs.transport.session.Log . trace ( STRING + org.springframework.web.socket.sockjs.transport.session.SockJsFrame ) ; } try { void ( org.springframework.web.socket.sockjs.transport.session.SockJsFrame ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; try { void ( CloseStatus . SERVER_ERROR ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { } try { void ( CloseStatus . SERVER_ERROR ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { } throw new SockJsTransportFailureException ( STRING + org.springframework.web.socket.sockjs.transport.session.SockJsFrame , java.lang.String ( ) , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Throwable java.lang.Throwable ) { @ java.lang.SuppressWarnings ( STRING ) NestedCheckedException org.springframework.web.socket.sockjs.transport.session.NestedCheckedException = new NestedCheckedException ( STRING , java.lang.Throwable ) {} ; if ( STRING . boolean ( org.springframework.web.socket.sockjs.transport.session.NestedCheckedException . getMostSpecificCause ( ) . getMessage ( ) ) || java.util.Set<java.lang.String> . boolean ( java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) . java.lang.String ( ) ) ) { if ( org.springframework.web.socket.sockjs.transport.session.Log . isTraceEnabled ( ) ) { org.springframework.web.socket.sockjs.transport.session.Log . trace ( STRING , java.lang.Throwable ) ; } else if ( org.springframework.web.socket.sockjs.transport.session.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.sockjs.transport.session.Log . debug ( STRING + org.springframework.web.socket.sockjs.transport.session.NestedCheckedException . getMessage ( ) + STRING + java.lang.String + STRING ) ; } } else { org.springframework.web.socket.sockjs.transport.session.Log . debug ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected abstract void void ( SockJsFrame org.springframework.web.socket.sockjs.transport.session.SockJsFrame ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Exception { this . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State = org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State ; this . org.springframework.web.socket.sockjs.transport.session.WebSocketHandler . afterConnectionEstablished ( this ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) throws org.springframework.web.socket.sockjs.transport.session.SockJsMessageDeliveryException { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { try { if ( boolean ( ) ) { throw new SockJsMessageDeliveryException ( this . java.lang.String , java.util.List<java.lang.String> , STRING ) ; } else { this . org.springframework.web.socket.sockjs.transport.session.WebSocketHandler . handleMessage ( this , new TextMessage ( java.lang.String ) ) ; java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { throw new SockJsMessageDeliveryException ( this . java.lang.String , java.util.List<java.lang.String> , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> public final void void ( CloseStatus org.springframework.web.socket.sockjs.transport.session.CloseStatus ) throws java.lang.Exception { if ( ! boolean ( ) ) { try { void ( ) ; java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> = this . java.util.concurrent.ScheduledFuture<> ; if ( java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<?> = null ; java.util.concurrent.ScheduledFuture<> . boolean ( false ) ; } } finally { this . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State = org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State . org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.State ; this . org.springframework.web.socket.sockjs.transport.session.WebSocketHandler . afterConnectionClosed ( this , org.springframework.web.socket.sockjs.transport.session.CloseStatus ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Throwable java.lang.Throwable , CloseStatus org.springframework.web.socket.sockjs.transport.session.CloseStatus ) { if ( org.springframework.web.socket.sockjs.transport.session.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.sockjs.transport.session.Log . debug ( STRING + this ) ; } try { void ( java.lang.Throwable ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { } try { void ( org.springframework.web.socket.sockjs.transport.session.CloseStatus ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.sockjs.transport.session.Log . debug ( STRING + this , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Throwable java.lang.Throwable ) throws java.lang.Exception { this . org.springframework.web.socket.sockjs.transport.session.WebSocketHandler . handleTransportError ( this , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession> ( ) . java.lang.String ( ) + STRING + java.lang.String ( ) + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( java.lang.Object ) { if ( ! this . boolean && ! boolean ( ) ) { try { void ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { } finally { this . boolean = true ; } } } }  <METHOD_END>
<METHOD_START> void void ( ) { this . boolean = true ; }  <METHOD_END>
