<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter = new ContinuousQueryListenerAdapter ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.listener.adapter.CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent ( ) { return new CqEvent ( ) { final org.springframework.data.gemfire.listener.adapter.CqQuery org.springframework.data.gemfire.listener.adapter.CqQuery = mock ( CqQuery .class ) ; final byte [] byte[] = new byte [ NUMBER ] ; final java.lang.Object java.lang.Object = new java.lang.Object ( ) ; final java.lang.Object java.lang.Object = new java.lang.Object ( ) ; final java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; public org.springframework.data.gemfire.listener.adapter.Operation org.springframework.data.gemfire.listener.adapter.Operation ( ) { return Operation . CACHE_CLOSE ; } public org.springframework.data.gemfire.listener.adapter.CqQuery org.springframework.data.gemfire.listener.adapter.CqQuery ( ) { return org.springframework.data.gemfire.listener.adapter.CqQuery ; } public byte [] byte[] ( ) { return byte[] ; } public java.lang.Object java.lang.Object ( ) { return java.lang.Object ; } public java.lang.Object java.lang.Object ( ) { return java.lang.Object ; } public org.springframework.data.gemfire.listener.adapter.Operation org.springframework.data.gemfire.listener.adapter.Operation ( ) { return Operation . CACHE_CREATE ; } public java.lang.Throwable java.lang.Throwable ( ) { return java.lang.Exception ; } } ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.listener.adapter.Operation org.springframework.data.gemfire.listener.adapter.Operation ( ) { return Operation . CACHE_CLOSE ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.listener.adapter.CqQuery org.springframework.data.gemfire.listener.adapter.CqQuery ( ) { return org.springframework.data.gemfire.listener.adapter.CqQuery ; }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { return byte[] ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.listener.adapter.Operation org.springframework.data.gemfire.listener.adapter.Operation ( ) { return Operation . CACHE_CREATE ; }  <METHOD_END>
<METHOD_START> public java.lang.Throwable java.lang.Throwable ( ) { return java.lang.Exception ; }  <METHOD_END>
<METHOD_START> void void ( CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent );  <METHOD_END>
<METHOD_START> void void ( CqQuery org.springframework.data.gemfire.listener.adapter.CqQuery );  <METHOD_END>
<METHOD_START> void void ( Operation org.springframework.data.gemfire.listener.adapter.Operation );  <METHOD_END>
<METHOD_START> void void ( byte [] byte[] );  <METHOD_END>
<METHOD_START> void void ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> void void ( java.lang.Throwable java.lang.Throwable );  <METHOD_END>
<METHOD_START> void void ( Operation org.springframework.data.gemfire.listener.adapter.Operation , Operation org.springframework.data.gemfire.listener.adapter.Operation );  <METHOD_END>
<METHOD_START> void void ( CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent , CqQuery org.springframework.data.gemfire.listener.adapter.CqQuery , byte [] byte[] , java.lang.Object java.lang.Object , Operation org.springframework.data.gemfire.listener.adapter.Operation , java.lang.Throwable java.lang.Throwable , Operation org.springframework.data.gemfire.listener.adapter.Operation , java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertSame ( org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter , org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . getDelegate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( ContinuousQueryListenerAdapter . DEFAULT_LISTENER_METHOD_NAME , org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . getDefaultListenerMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ContinuousQueryListener org.springframework.data.gemfire.listener.adapter.ContinuousQueryListener = mock ( ContinuousQueryListener .class ) ; ContinuousQueryListenerAdapter org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter = new ContinuousQueryListenerAdapter ( org.springframework.data.gemfire.listener.adapter.ContinuousQueryListener ) ; CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent = org.springframework.data.gemfire.listener.adapter.CqEvent ( ) ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . onEvent ( org.springframework.data.gemfire.listener.adapter.CqEvent ) ; verify ( org.springframework.data.gemfire.listener.adapter.ContinuousQueryListener ) . onEvent ( same ( org.springframework.data.gemfire.listener.adapter.CqEvent ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate = mock ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate .class ) ; ContinuousQueryListenerAdapter org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter = new ContinuousQueryListenerAdapter ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate ) ; CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent = org.springframework.data.gemfire.listener.adapter.CqEvent ( ) ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . onEvent ( org.springframework.data.gemfire.listener.adapter.CqEvent ) ; verify ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate ) . handleEvent ( same ( org.springframework.data.gemfire.listener.adapter.CqEvent ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate = mock ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate .class ) ; ContinuousQueryListenerAdapter org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter = new ContinuousQueryListenerAdapter ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate ) ; CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent = org.springframework.data.gemfire.listener.adapter.CqEvent ( ) ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . setDefaultListenerMethod ( STRING ) ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . onEvent ( org.springframework.data.gemfire.listener.adapter.CqEvent ) ; verify ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate ) . handleArray ( eq ( org.springframework.data.gemfire.listener.adapter.CqEvent . getDeltaValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate = mock ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate .class ) ; ContinuousQueryListenerAdapter org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter = new ContinuousQueryListenerAdapter ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate ) ; CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent = org.springframework.data.gemfire.listener.adapter.CqEvent ( ) ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . setDefaultListenerMethod ( STRING ) ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . onEvent ( org.springframework.data.gemfire.listener.adapter.CqEvent ) ; verify ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate ) . handleKey ( eq ( org.springframework.data.gemfire.listener.adapter.CqEvent . getKey ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate = mock ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate .class ) ; ContinuousQueryListenerAdapter org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter = new ContinuousQueryListenerAdapter ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate ) ; CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent = org.springframework.data.gemfire.listener.adapter.CqEvent ( ) ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . setDefaultListenerMethod ( STRING ) ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . onEvent ( org.springframework.data.gemfire.listener.adapter.CqEvent ) ; verify ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate ) . handleKV ( eq ( org.springframework.data.gemfire.listener.adapter.CqEvent . getKey ( ) ) , eq ( org.springframework.data.gemfire.listener.adapter.CqEvent . getNewValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate = mock ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate .class ) ; ContinuousQueryListenerAdapter org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter = new ContinuousQueryListenerAdapter ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate ) ; CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent = org.springframework.data.gemfire.listener.adapter.CqEvent ( ) ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . setDefaultListenerMethod ( STRING ) ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . onEvent ( org.springframework.data.gemfire.listener.adapter.CqEvent ) ; verify ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate ) . handleEx ( eq ( org.springframework.data.gemfire.listener.adapter.CqEvent . getThrowable ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate = mock ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate .class ) ; ContinuousQueryListenerAdapter org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter = new ContinuousQueryListenerAdapter ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate ) ; CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent = org.springframework.data.gemfire.listener.adapter.CqEvent ( ) ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . setDefaultListenerMethod ( STRING ) ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . onEvent ( org.springframework.data.gemfire.listener.adapter.CqEvent ) ; verify ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate ) . handleOps ( eq ( org.springframework.data.gemfire.listener.adapter.CqEvent . getBaseOperation ( ) ) , eq ( org.springframework.data.gemfire.listener.adapter.CqEvent . getQueryOperation ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate = mock ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate .class ) ; ContinuousQueryListenerAdapter org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter = new ContinuousQueryListenerAdapter ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate ) ; CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent = org.springframework.data.gemfire.listener.adapter.CqEvent ( ) ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . setDefaultListenerMethod ( STRING ) ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . onEvent ( org.springframework.data.gemfire.listener.adapter.CqEvent ) ; verify ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate ) . handleAll ( eq ( org.springframework.data.gemfire.listener.adapter.CqEvent ) , eq ( org.springframework.data.gemfire.listener.adapter.CqEvent . getCq ( ) ) , eq ( org.springframework.data.gemfire.listener.adapter.CqEvent . getDeltaValue ( ) ) , eq ( org.springframework.data.gemfire.listener.adapter.CqEvent . getKey ( ) ) , eq ( org.springframework.data.gemfire.listener.adapter.CqEvent . getBaseOperation ( ) ) , eq ( org.springframework.data.gemfire.listener.adapter.CqEvent . getThrowable ( ) ) , eq ( org.springframework.data.gemfire.listener.adapter.CqEvent . getQueryOperation ( ) ) , eq ( org.springframework.data.gemfire.listener.adapter.CqEvent . getNewValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate = mock ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate .class ) ; ContinuousQueryListenerAdapter org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter = new ContinuousQueryListenerAdapter ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate ) ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . setDefaultListenerMethod ( STRING ) ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter . onEvent ( org.springframework.data.gemfire.listener.adapter.CqEvent ( ) ) ; doThrow ( new java.lang.IllegalArgumentException ( ) ) . when ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.Delegate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.SampleListener org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.SampleListener = new org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.SampleListener ( ) ; ContinuousQueryListener org.springframework.data.gemfire.listener.adapter.ContinuousQueryListener = new ContinuousQueryListenerAdapter ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.SampleListener ) { protected void void ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.RuntimeException ( java.lang.Throwable ) ; } } ; org.springframework.data.gemfire.listener.adapter.ContinuousQueryListener . onEvent ( org.springframework.data.gemfire.listener.adapter.CqEvent ( ) ) ; assertThat ( org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.SampleListener . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.RuntimeException ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent ) { int ++ ; }  <METHOD_END>
