<METHOD_START> @ Before @ After public void void ( ) { java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; ApplicationPidFileWriter . reset ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.system.TemporaryFolder . newFile ( ) ; ApplicationPidFileWriter org.springframework.boot.system.ApplicationPidFileWriter = new ApplicationPidFileWriter ( java.io.File ) ; org.springframework.boot.system.ApplicationPidFileWriter . onApplicationEvent ( org.springframework.boot.system.ApplicationPreparedEvent ) ; java.io.FileReader java.io.FileReader = new java.io.FileReader ( java.io.File ) ; assertThat ( FileCopyUtils . copyToString ( java.io.FileReader ) ) . isNotEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.system.TemporaryFolder . newFile ( ) ; java.lang.System . java.lang.String ( STRING , this . org.springframework.boot.system.TemporaryFolder . newFile ( ) . getAbsolutePath ( ) ) ; ApplicationPidFileWriter org.springframework.boot.system.ApplicationPidFileWriter = new ApplicationPidFileWriter ( java.io.File ) ; org.springframework.boot.system.ApplicationPidFileWriter . onApplicationEvent ( org.springframework.boot.system.ApplicationPreparedEvent ) ; java.io.FileReader java.io.FileReader = new java.io.FileReader ( java.lang.System . java.lang.String ( STRING ) ) ; assertThat ( FileCopyUtils . copyToString ( java.io.FileReader ) ) . isNotEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.system.TemporaryFolder . newFile ( ) ; SpringApplicationEvent org.springframework.boot.system.SpringApplicationEvent = org.springframework.boot.system.SpringApplicationEvent ( STRING , java.io.File . java.lang.String ( ) ) ; ApplicationPidFileWriter org.springframework.boot.system.ApplicationPidFileWriter = new ApplicationPidFileWriter ( ) ; org.springframework.boot.system.ApplicationPidFileWriter . onApplicationEvent ( org.springframework.boot.system.SpringApplicationEvent ) ; assertThat ( FileCopyUtils . copyToString ( new java.io.FileReader ( java.io.File ) ) ) . isNotEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.system.TemporaryFolder . newFile ( ) ; SpringApplicationEvent org.springframework.boot.system.SpringApplicationEvent = org.springframework.boot.system.SpringApplicationEvent ( STRING , java.io.File . java.lang.String ( ) ) ; ApplicationPidFileWriter org.springframework.boot.system.ApplicationPidFileWriter = new ApplicationPidFileWriter ( ) ; org.springframework.boot.system.ApplicationPidFileWriter . onApplicationEvent ( org.springframework.boot.system.SpringApplicationEvent ) ; assertThat ( FileCopyUtils . copyToString ( new java.io.FileReader ( java.io.File ) ) ) . isEmpty ( ) ; org.springframework.boot.system.ApplicationPidFileWriter . setTriggerEventType ( ApplicationEnvironmentPreparedEvent .class ) ; org.springframework.boot.system.ApplicationPidFileWriter . onApplicationEvent ( org.springframework.boot.system.SpringApplicationEvent ) ; assertThat ( FileCopyUtils . copyToString ( new java.io.FileReader ( java.io.File ) ) ) . isNotEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.system.TemporaryFolder . newFile ( ) ; SpringApplicationEvent org.springframework.boot.system.SpringApplicationEvent = org.springframework.boot.system.SpringApplicationEvent ( STRING , java.io.File . java.lang.String ( ) ) ; ApplicationPidFileWriter org.springframework.boot.system.ApplicationPidFileWriter = new ApplicationPidFileWriter ( ) ; org.springframework.boot.system.ApplicationPidFileWriter . onApplicationEvent ( org.springframework.boot.system.SpringApplicationEvent ) ; assertThat ( FileCopyUtils . copyToString ( new java.io.FileReader ( java.io.File ) ) ) . isEmpty ( ) ; org.springframework.boot.system.ApplicationPidFileWriter . setTriggerEventType ( ApplicationReadyEvent .class ) ; org.springframework.boot.system.ApplicationPidFileWriter . onApplicationEvent ( org.springframework.boot.system.SpringApplicationEvent ) ; assertThat ( FileCopyUtils . copyToString ( new java.io.FileReader ( java.io.File ) ) ) . isNotEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.system.TemporaryFolder . newFile ( ) ; ApplicationPidFileWriter org.springframework.boot.system.ApplicationPidFileWriter = new ApplicationPidFileWriter ( java.io.File ) ; org.springframework.boot.system.ApplicationPidFileWriter . setTriggerEventType ( ApplicationStartingEvent .class ) ; org.springframework.boot.system.ApplicationPidFileWriter . onApplicationEvent ( new ApplicationStartingEvent ( new SpringApplication ( ) , new java.lang.String [] {} ) ) ; assertThat ( FileCopyUtils . copyToString ( new java.io.FileReader ( java.io.File ) ) ) . isNotEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.system.TemporaryFolder . newFile ( ) ; java.io.File . boolean ( ) ; ApplicationPidFileWriter org.springframework.boot.system.ApplicationPidFileWriter = new ApplicationPidFileWriter ( java.io.File ) ; org.springframework.boot.system.ApplicationPidFileWriter . onApplicationEvent ( org.springframework.boot.system.ApplicationPreparedEvent ) ; assertThat ( FileCopyUtils . copyToString ( new java.io.FileReader ( java.io.File ) ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.system.TemporaryFolder . newFile ( ) ; java.io.File . boolean ( ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; ApplicationPidFileWriter org.springframework.boot.system.ApplicationPidFileWriter = new ApplicationPidFileWriter ( java.io.File ) ; this . org.springframework.boot.system.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.system.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.system.ApplicationPidFileWriter . onApplicationEvent ( org.springframework.boot.system.ApplicationPreparedEvent ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.system.TemporaryFolder . newFile ( ) ; java.io.File . boolean ( ) ; SpringApplicationEvent org.springframework.boot.system.SpringApplicationEvent = org.springframework.boot.system.SpringApplicationEvent ( STRING , STRING ) ; ApplicationPidFileWriter org.springframework.boot.system.ApplicationPidFileWriter = new ApplicationPidFileWriter ( java.io.File ) ; this . org.springframework.boot.system.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.system.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.system.ApplicationPidFileWriter . onApplicationEvent ( org.springframework.boot.system.SpringApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.system.SpringApplicationEvent org.springframework.boot.system.SpringApplicationEvent ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { ConfigurableEnvironment org.springframework.boot.system.ConfigurableEnvironment = org.springframework.boot.system.ConfigurableEnvironment ( java.lang.String , java.lang.String ) ; return new ApplicationEnvironmentPreparedEvent ( new SpringApplication ( ) , new java.lang.String [] {} , org.springframework.boot.system.ConfigurableEnvironment ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.system.SpringApplicationEvent org.springframework.boot.system.SpringApplicationEvent ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { ConfigurableEnvironment org.springframework.boot.system.ConfigurableEnvironment = org.springframework.boot.system.ConfigurableEnvironment ( java.lang.String , java.lang.String ) ; ConfigurableApplicationContext org.springframework.boot.system.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class ) ; given ( org.springframework.boot.system.ConfigurableApplicationContext . getEnvironment ( ) ) . willReturn ( org.springframework.boot.system.ConfigurableEnvironment ) ; return new ApplicationPreparedEvent ( new SpringApplication ( ) , new java.lang.String [] {} , org.springframework.boot.system.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.system.SpringApplicationEvent org.springframework.boot.system.SpringApplicationEvent ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { ConfigurableEnvironment org.springframework.boot.system.ConfigurableEnvironment = org.springframework.boot.system.ConfigurableEnvironment ( java.lang.String , java.lang.String ) ; ConfigurableApplicationContext org.springframework.boot.system.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class ) ; given ( org.springframework.boot.system.ConfigurableApplicationContext . getEnvironment ( ) ) . willReturn ( org.springframework.boot.system.ConfigurableEnvironment ) ; return new ApplicationReadyEvent ( new SpringApplication ( ) , new java.lang.String [] {} , org.springframework.boot.system.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.system.ConfigurableEnvironment org.springframework.boot.system.ConfigurableEnvironment ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { MockPropertySource org.springframework.boot.system.MockPropertySource = org.springframework.boot.system.MockPropertySource ( java.lang.String , java.lang.String ) ; ConfigurableEnvironment org.springframework.boot.system.ConfigurableEnvironment = new StandardEnvironment ( ) ; org.springframework.boot.system.ConfigurableEnvironment . getPropertySources ( ) . addLast ( org.springframework.boot.system.MockPropertySource ) ; return org.springframework.boot.system.ConfigurableEnvironment ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.system.MockPropertySource org.springframework.boot.system.MockPropertySource ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { MockPropertySource org.springframework.boot.system.MockPropertySource = new MockPropertySource ( ) ; org.springframework.boot.system.MockPropertySource . setProperty ( java.lang.String , java.lang.String ) ; return org.springframework.boot.system.MockPropertySource ; }  <METHOD_END>
