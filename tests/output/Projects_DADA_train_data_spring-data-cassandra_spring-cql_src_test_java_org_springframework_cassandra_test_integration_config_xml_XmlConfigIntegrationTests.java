<METHOD_START> @ Before public void void ( ) { this . org.springframework.cassandra.test.integration.config.xml.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.cassandra.test.integration.config.xml.XmlConfigIntegrationTests> ( ) ) ; this . org.springframework.cassandra.test.integration.config.xml.AddressTranslator = org.springframework.cassandra.test.integration.config.xml.ConfigurableApplicationContext . getBean ( AddressTranslator .class ) ; this . org.springframework.cassandra.test.integration.config.xml.Cluster = org.springframework.cassandra.test.integration.config.xml.ConfigurableApplicationContext . getBean ( Cluster .class ) ; this . org.springframework.cassandra.test.integration.config.xml.ClusterBuilderConfigurer = org.springframework.cassandra.test.integration.config.xml.ConfigurableApplicationContext . getBean ( ClusterBuilderConfigurer .class ) ; this . java.util.concurrent.Executor = org.springframework.cassandra.test.integration.config.xml.ConfigurableApplicationContext . getBean ( java.util.concurrent.Executor .class ) ; this . org.springframework.cassandra.test.integration.config.xml.Session = org.springframework.cassandra.test.integration.config.xml.ConfigurableApplicationContext . getBean ( Session .class ) ; this . org.springframework.cassandra.test.integration.config.xml.SpeculativeExecutionPolicy = org.springframework.cassandra.test.integration.config.xml.ConfigurableApplicationContext . getBean ( SpeculativeExecutionPolicy .class ) ; this . org.springframework.cassandra.test.integration.config.xml.TimestampGenerator = org.springframework.cassandra.test.integration.config.xml.ConfigurableApplicationContext . getBean ( TimestampGenerator .class ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.cassandra.test.integration.config.xml.ConfigurableApplicationContext != null ) { this . org.springframework.cassandra.test.integration.config.xml.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IntegrationTestUtils . assertKeyspaceExists ( java.lang.String , org.springframework.cassandra.test.integration.config.xml.Session ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.cassandra.test.integration.config.xml.Cluster . getConfiguration ( ) . getPolicies ( ) . getAddressTranslator ( ) ) . isEqualTo ( org.springframework.cassandra.test.integration.config.xml.AddressTranslator ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.Cluster . getClusterName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.Cluster . getConfiguration ( ) . getProtocolOptions ( ) . getMaxSchemaAgreementWaitSeconds ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.Cluster . getConfiguration ( ) . getPolicies ( ) . getSpeculativeExecutionPolicy ( ) ) . isEqualTo ( org.springframework.cassandra.test.integration.config.xml.SpeculativeExecutionPolicy ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.Cluster . getConfiguration ( ) . getPolicies ( ) . getTimestampGenerator ( ) ) . isEqualTo ( org.springframework.cassandra.test.integration.config.xml.TimestampGenerator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.cassandra.test.integration.config.xml.ClusterBuilderConfigurer ) . isInstanceOf ( org.springframework.cassandra.test.integration.config.xml.XmlConfigIntegrationTests.TestClusterBuilderConfigurer .class ) ; assertThat ( ( ( org.springframework.cassandra.test.integration.config.xml.XmlConfigIntegrationTests.TestClusterBuilderConfigurer ) org.springframework.cassandra.test.integration.config.xml.ClusterBuilderConfigurer ) . java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PoolingOptions org.springframework.cassandra.test.integration.config.xml.PoolingOptions = org.springframework.cassandra.test.integration.config.xml.Cluster . getConfiguration ( ) . getPoolingOptions ( ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions ) . isNotNull ( ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getHeartbeatIntervalSeconds ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getIdleTimeoutSeconds ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getInitializationExecutor ( ) ) . isEqualTo ( java.util.concurrent.Executor ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getCoreConnectionsPerHost ( HostDistance . LOCAL ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getMaxConnectionsPerHost ( HostDistance . LOCAL ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getMaxRequestsPerConnection ( HostDistance . LOCAL ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getNewConnectionThreshold ( HostDistance . LOCAL ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getCoreConnectionsPerHost ( HostDistance . REMOTE ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getMaxConnectionsPerHost ( HostDistance . REMOTE ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getMaxRequestsPerConnection ( HostDistance . REMOTE ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getNewConnectionThreshold ( HostDistance . REMOTE ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SocketOptions org.springframework.cassandra.test.integration.config.xml.SocketOptions = org.springframework.cassandra.test.integration.config.xml.Cluster . getConfiguration ( ) . getSocketOptions ( ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions ) . isNotNull ( ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions . getConnectTimeoutMillis ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions . getKeepAlive ( ) ) . isTrue ( ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions . getReadTimeoutMillis ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions . getReceiveBufferSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions . getReuseAddress ( ) ) . isTrue ( ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions . getSendBufferSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions . getSoLinger ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions . getTcpNoDelay ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public Cluster . Cluster.Builder Cluster.Builder ( Cluster . Cluster Cluster.Builder ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return Cluster.Builder ; }  <METHOD_END>
