<METHOD_START> @ Before public void void ( ) { org.springframework.data.couchbase.repository.xmlconfig.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.data.couchbase.repository.xmlconfig.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.data.couchbase.repository.xmlconfig.DefaultListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.couchbase.repository.xmlconfig.BeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( STRING ) ) ; BeanDefinition org.springframework.data.couchbase.repository.xmlconfig.BeanDefinition = org.springframework.data.couchbase.repository.xmlconfig.DefaultListableBeanFactory . getBeanDefinition ( STRING ) ; assertEquals ( STRING , org.springframework.data.couchbase.repository.xmlconfig.BeanDefinition . getBeanClassName ( ) ) ; void ( org.springframework.data.couchbase.repository.xmlconfig.BeanDefinition , STRING ) ; java.lang.Object java.lang.Object = org.springframework.data.couchbase.repository.xmlconfig.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( java.lang.Object instanceof XmlItemRepository ) ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinition org.springframework.data.couchbase.repository.xmlconfig.BeanDefinition , java.lang.String java.lang.String ) { assertTrue ( STRING + java.lang.String , org.springframework.data.couchbase.repository.xmlconfig.BeanDefinition . getPropertyValues ( ) . contains ( java.lang.String ) ) ; }  <METHOD_END>
