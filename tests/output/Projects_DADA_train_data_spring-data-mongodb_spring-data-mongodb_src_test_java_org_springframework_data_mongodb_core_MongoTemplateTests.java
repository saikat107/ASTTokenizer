<METHOD_START> @ Autowired public void void ( ConfigurableApplicationContext org.springframework.data.mongodb.core.ConfigurableApplicationContext ) { this . org.springframework.data.mongodb.core.ConfigurableApplicationContext = org.springframework.data.mongodb.core.ConfigurableApplicationContext ; org.springframework.data.mongodb.core.ConfigurableApplicationContext . addApplicationListener ( new org.springframework.data.mongodb.core.MongoTemplateTests.PersonWithIdPropertyOfTypeUUIDListener ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Autowired public void void ( Mongo org.springframework.data.mongodb.core.Mongo ) throws java.lang.Exception { CustomConversions org.springframework.data.mongodb.core.CustomConversions = new CustomConversions ( java.util.Arrays . java.util.List<java.lang.Enum<?>> ( org.springframework.data.mongodb.core.MongoTemplateTests.DateToDateTimeConverter . org.springframework.data.mongodb.core.MongoTemplateTests.DateToDateTimeConverter , org.springframework.data.mongodb.core.MongoTemplateTests.DateTimeToDateConverter . org.springframework.data.mongodb.core.MongoTemplateTests.DateTimeToDateConverter ) ) ; MongoMappingContext org.springframework.data.mongodb.core.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.mongodb.core.MongoMappingContext . setInitialEntitySet ( new java.util.HashSet<java.lang.Class<?>> < java.lang.Class<?> < ? > > ( java.util.Arrays . java.util.List<java.lang.Class<? extends java.lang.Object>> ( PersonWith_idPropertyOfTypeObjectId .class , PersonWith_idPropertyOfTypeString .class , PersonWithIdPropertyOfTypeObjectId .class , PersonWithIdPropertyOfTypeString .class , PersonWithIdPropertyOfTypeInteger .class , PersonWithIdPropertyOfTypeBigInteger .class , PersonWithIdPropertyOfPrimitiveInt .class , PersonWithIdPropertyOfTypeLong .class , PersonWithIdPropertyOfPrimitiveLong .class , PersonWithIdPropertyOfTypeUUID .class ) ) ) ; org.springframework.data.mongodb.core.MongoMappingContext . setSimpleTypeHolder ( org.springframework.data.mongodb.core.CustomConversions . getSimpleTypeHolder ( ) ) ; org.springframework.data.mongodb.core.MongoMappingContext . initialize ( ) ; DbRefResolver org.springframework.data.mongodb.core.DbRefResolver = new DefaultDbRefResolver ( org.springframework.data.mongodb.core.MongoDbFactory ) ; MappingMongoConverter org.springframework.data.mongodb.core.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.core.DbRefResolver , org.springframework.data.mongodb.core.MongoMappingContext ) ; org.springframework.data.mongodb.core.MappingMongoConverter . setCustomConversions ( org.springframework.data.mongodb.core.CustomConversions ) ; org.springframework.data.mongodb.core.MappingMongoConverter . afterPropertiesSet ( ) ; this . org.springframework.data.mongodb.core.MongoTemplate = new MongoTemplate ( org.springframework.data.mongodb.core.MongoDbFactory , org.springframework.data.mongodb.core.MappingMongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { void ( ) ; void ( ) ; this . org.springframework.data.mongodb.core.MongoTemplate . setApplicationContext ( org.springframework.data.mongodb.core.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( org.springframework.data.util.Version == null ) { org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.MongoTemplate . executeCommand ( STRING ) ; org.springframework.data.util.Version = org . springframework . data . org.springframework.data.util . Version . parse ( org.bson.Document . get ( STRING ) . toString ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( Person .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( PersonWithAList .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( PersonWith_idPropertyOfTypeObjectId .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( PersonWith_idPropertyOfTypeString .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( PersonWithIdPropertyOfTypeObjectId .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( PersonWithIdPropertyOfTypeString .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( PersonWithIdPropertyOfTypeInteger .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( PersonWithIdPropertyOfTypeBigInteger .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( PersonWithIdPropertyOfPrimitiveInt .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( PersonWithIdPropertyOfTypeLong .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( PersonWithIdPropertyOfPrimitiveLong .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( PersonWithIdPropertyOfTypeUUID .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( PersonWithVersionPropertyOfTypeInteger .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.TestClass .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithFieldAnnotation .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.Document .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFieldsAndNestedAddress .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( BaseDoc .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWithEnumValue .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithMultipleCollections .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.Address .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSamples .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.WithGeoJson .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) ; java.util.List<org.springframework.data.mongodb.core.Person> < Person > java.util.List<org.springframework.data.mongodb.core.Person> = org.springframework.data.mongodb.core.MongoTemplate . find ( new Query ( Criteria . where ( STRING ) . is ( org.springframework.data.mongodb.core.Person . getId ( ) ) ) , Person .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.Person> , hasItem ( org.springframework.data.mongodb.core.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoTemplate org.springframework.data.mongodb.core.MongoTemplate = new MongoTemplate ( org.springframework.data.mongodb.core.MongoDbFactory ) ; org.springframework.data.mongodb.core.MongoTemplate . setWriteResultChecking ( WriteResultChecking . EXCEPTION ) ; Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . gt ( NUMBER ) ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . set ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , Person .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoTemplate org.springframework.data.mongodb.core.MongoTemplate = new MongoTemplate ( org.springframework.data.mongodb.core.MongoDbFactory ) ; org.springframework.data.mongodb.core.MongoTemplate . setWriteResultChecking ( WriteResultChecking . EXCEPTION ) ; Person org.springframework.data.mongodb.core.Person = new Person ( new ObjectId ( ) , STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) ; try { org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) ; fail ( STRING ) ; } catch ( DataIntegrityViolationException org.springframework.data.mongodb.core.DataIntegrityViolationException ) { assertThat ( org.springframework.data.mongodb.core.DataIntegrityViolationException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoTemplate org.springframework.data.mongodb.core.MongoTemplate = new MongoTemplate ( org.springframework.data.mongodb.core.MongoDbFactory ) ; org.springframework.data.mongodb.core.MongoTemplate . setWriteResultChecking ( WriteResultChecking . EXCEPTION ) ; ObjectId org.springframework.data.mongodb.core.ObjectId = new ObjectId ( ) ; Person org.springframework.data.mongodb.core.Person = new Person ( org.springframework.data.mongodb.core.ObjectId , STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) ; org.springframework.data.mongodb.core.ExpectedException . expect ( DataIntegrityViolationException .class ) ; org.springframework.data.mongodb.core.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mongodb.core.ExpectedException . expectMessage ( STRING ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( STRING ) ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . push ( STRING , NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , Person .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoTemplate org.springframework.data.mongodb.core.MongoTemplate = new MongoTemplate ( org.springframework.data.mongodb.core.MongoDbFactory ) ; org.springframework.data.mongodb.core.MongoTemplate . setWriteResultChecking ( WriteResultChecking . EXCEPTION ) ; org.springframework.data.mongodb.core.MongoTemplate . indexOps ( Person .class ) . ensureIndex ( new Index ( ) . on ( STRING , Direction . DESC ) . unique ( ) ) ; Person org.springframework.data.mongodb.core.Person = new Person ( new ObjectId ( ) , STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.Person ) ; org.springframework.data.mongodb.core.Person = new Person ( new ObjectId ( ) , STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; try { org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.Person ) ; fail ( STRING ) ; } catch ( DataIntegrityViolationException org.springframework.data.mongodb.core.DataIntegrityViolationException ) { assertThat ( org.springframework.data.mongodb.core.DataIntegrityViolationException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.ExpectedException . expect ( DataIntegrityViolationException .class ) ; org.springframework.data.mongodb.core.ExpectedException . expectMessage ( STRING ) ; MongoTemplate org.springframework.data.mongodb.core.MongoTemplate = new MongoTemplate ( org.springframework.data.mongodb.core.MongoDbFactory ) ; org.springframework.data.mongodb.core.MongoTemplate . setWriteResultChecking ( WriteResultChecking . EXCEPTION ) ; ObjectId org.springframework.data.mongodb.core.ObjectId = new ObjectId ( ) ; Person org.springframework.data.mongodb.core.Person = new Person ( org.springframework.data.mongodb.core.ObjectId , STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; java.util.List<org.springframework.data.mongodb.core.Person> < Person > java.util.List<org.springframework.data.mongodb.core.Person> = new java.util.ArrayList<org.springframework.data.mongodb.core.Person> < Person > ( ) ; java.util.List<org.springframework.data.mongodb.core.Person> . add ( org.springframework.data.mongodb.core.Person ) ; java.util.List<org.springframework.data.mongodb.core.Person> . add ( org.springframework.data.mongodb.core.Person ) ; org.springframework.data.mongodb.core.MongoTemplate . insertAll ( java.util.List<org.springframework.data.mongodb.core.Person> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) ; Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) ; org.springframework.data.mongodb.core.MongoTemplate . indexOps ( Person .class ) . ensureIndex ( new Index ( ) . on ( STRING , Direction . DESC ) . unique ( ) ) ; MongoCollection < org . org.bson . org.bson > org.springframework.data.mongodb.core.MongoCollection<org.bson.Document> = org.springframework.data.mongodb.core.MongoTemplate . getCollection ( org.springframework.data.mongodb.core.MongoTemplate . getCollectionName ( Person .class ) ) ; java.util.List<org.bson.Document> < org . org.bson . org.bson > java.util.List<org.bson.Document> = new java.util.ArrayList<org.bson.Document> < org . org.bson . org.bson > ( ) ; org.springframework.data.mongodb.core.MongoCollection<org.bson.Document> . listIndexes ( ) . into ( java.util.List<org.bson.Document> ) ; assertThat ( java.util.List<org.bson.Document> . size ( ) , is ( NUMBER ) ) ; java.lang.Object java.lang.Object = null ; boolean boolean = false ; for ( org . org.bson . org.bson org.bson.Document : java.util.List<org.bson.Document> ) { if ( STRING . boolean ( org.bson.Document . get ( STRING ) ) ) { java.lang.Object = org.bson.Document . get ( STRING ) ; boolean = ( java.lang.Boolean ) org.bson.Document . get ( STRING ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( nullValue ( ) ) ) ; } } assertThat ( ( ( org . org.bson . org.bson ) java.lang.Object ) , IsMapContaining .< java.lang.String , java.lang.Object > hasEntry ( STRING , - NUMBER ) ) ; assertThat ( boolean , is ( true ) ) ; java.util.List<org.springframework.data.mongodb.core.IndexInfo> < IndexInfo > java.util.List<org.springframework.data.mongodb.core.IndexInfo> = org.springframework.data.mongodb.core.MongoTemplate . indexOps ( Person .class ) . getIndexInfo ( ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.IndexInfo> . size ( ) , is ( NUMBER ) ) ; IndexInfo org.springframework.data.mongodb.core.IndexInfo = java.util.List<org.springframework.data.mongodb.core.IndexInfo> . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.IndexInfo . isUnique ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.IndexInfo . isSparse ( ) , is ( false ) ) ; java.util.List<org.springframework.data.mongodb.core.IndexField> < IndexField > java.util.List<org.springframework.data.mongodb.core.IndexField> = org.springframework.data.mongodb.core.IndexInfo . getIndexFields ( ) ; IndexField org.springframework.data.mongodb.core.IndexField = java.util.List<org.springframework.data.mongodb.core.IndexField> . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.IndexField , is ( IndexField . create ( STRING , Direction . DESC ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + org.springframework.data.mongodb.core.MongoTemplate . getCollectionName ( Person .class ) + STRING ; org.springframework.data.mongodb.core.MongoTemplate . indexOps ( Person .class ) . dropAllIndexes ( ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . indexOps ( Person .class ) . getIndexInfo ( ) . isEmpty ( ) , is ( true ) ) ; org.springframework.data.mongodb.core.MongoDbFactory . getDb ( ) . runCommand ( new org . org.bson . org.bson ( STRING , java.lang.String ) ) ; ListIndexesIterable < org . org.bson . org.bson > org.springframework.data.mongodb.core.ListIndexesIterable<org.bson.Document> = org.springframework.data.mongodb.core.MongoTemplate . getCollection ( org.springframework.data.mongodb.core.MongoTemplate . getCollectionName ( Person .class ) ) . listIndexes ( ) ; org . org.bson . org.bson org.bson.Document = null ; boolean boolean = false ; MongoCursor < org . org.bson . org.bson > org.springframework.data.mongodb.core.MongoCursor<org.bson.Document> = org.springframework.data.mongodb.core.ListIndexesIterable<org.bson.Document> . iterator ( ) ; while ( org.springframework.data.mongodb.core.MongoCursor<org.bson.Document> . hasNext ( ) ) { org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.MongoCursor<org.bson.Document> . next ( ) ; if ( STRING . boolean ( org.bson.Document . get ( STRING ) ) ) { org.bson.Document = ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ; boolean = ( java.lang.Boolean ) org.bson.Document . get ( STRING ) ; } } assertThat ( org.bson.Document , IsMapContaining .< java.lang.String , java.lang.Object > hasEntry ( STRING , - NUMBER ) ) ; assertThat ( boolean , is ( true ) ) ; IndexInfo org.springframework.data.mongodb.core.IndexInfo = org.springframework.data.mongodb.core.MongoTemplate . indexOps ( Person .class ) . getIndexInfo ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.IndexInfo . isUnique ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.IndexInfo . isSparse ( ) , is ( true ) ) ; java.util.List<org.springframework.data.mongodb.core.IndexField> < IndexField > java.util.List<org.springframework.data.mongodb.core.IndexField> = org.springframework.data.mongodb.core.IndexInfo . getIndexFields ( ) ; IndexField org.springframework.data.mongodb.core.IndexField = java.util.List<org.springframework.data.mongodb.core.IndexField> . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.IndexField , is ( IndexField . create ( STRING , Direction . DESC ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( this . org.springframework.data.mongodb.core.MongoTemplate ) ; }  <METHOD_END>
<METHOD_START> private void void ( MongoTemplate org.springframework.data.mongodb.core.MongoTemplate ) throws java.lang.Exception { PersonWithIdPropertyOfTypeString org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString = new PersonWithIdPropertyOfTypeString ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . getId ( ) , notNullValue ( ) ) ; PersonWithIdPropertyOfTypeString org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString = org.springframework.data.mongodb.core.MongoTemplate . findOne ( new Query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . getId ( ) ) ) , PersonWithIdPropertyOfTypeString .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . getId ( ) , is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . getId ( ) ) ) ; void ( PersonWithIdPropertyOfTypeString .class , NUMBER ) ; PersonWithIdPropertyOfTypeString org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString = new PersonWithIdPropertyOfTypeString ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . setId ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . getId ( ) , notNullValue ( ) ) ; PersonWithIdPropertyOfTypeString org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString = org.springframework.data.mongodb.core.MongoTemplate . findOne ( new Query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . getId ( ) ) ) , PersonWithIdPropertyOfTypeString .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . getId ( ) , is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . getId ( ) ) ) ; void ( PersonWithIdPropertyOfTypeString .class , NUMBER ) ; PersonWith_idPropertyOfTypeString org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString = new PersonWith_idPropertyOfTypeString ( ) ; org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString ) ; assertThat ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString . get_id ( ) , notNullValue ( ) ) ; PersonWith_idPropertyOfTypeString org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString = org.springframework.data.mongodb.core.MongoTemplate . findOne ( new Query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString . get_id ( ) ) ) , PersonWith_idPropertyOfTypeString .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString . get_id ( ) , is ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString . get_id ( ) ) ) ; void ( PersonWith_idPropertyOfTypeString .class , NUMBER ) ; PersonWith_idPropertyOfTypeString org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString = new PersonWith_idPropertyOfTypeString ( ) ; org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString . set_id ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString ) ; assertThat ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString . get_id ( ) , notNullValue ( ) ) ; PersonWith_idPropertyOfTypeString org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString = org.springframework.data.mongodb.core.MongoTemplate . findOne ( new Query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString . get_id ( ) ) ) , PersonWith_idPropertyOfTypeString .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString . get_id ( ) , is ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeString . get_id ( ) ) ) ; void ( PersonWith_idPropertyOfTypeString .class , NUMBER ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) , notNullValue ( ) ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = org.springframework.data.mongodb.core.MongoTemplate . findOne ( new Query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) ) ) , PersonWithIdPropertyOfTypeObjectId .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) , is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) ) ) ; void ( PersonWithIdPropertyOfTypeObjectId .class , NUMBER ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setId ( new ObjectId ( ) ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) , notNullValue ( ) ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = org.springframework.data.mongodb.core.MongoTemplate . findOne ( new Query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) ) ) , PersonWithIdPropertyOfTypeObjectId .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) , is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) ) ) ; void ( PersonWithIdPropertyOfTypeObjectId .class , NUMBER ) ; PersonWith_idPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId = new PersonWith_idPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId ) ; assertThat ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId . get_id ( ) , notNullValue ( ) ) ; PersonWith_idPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId = org.springframework.data.mongodb.core.MongoTemplate . findOne ( new Query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId . get_id ( ) ) ) , PersonWith_idPropertyOfTypeObjectId .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId . get_id ( ) , is ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId . get_id ( ) ) ) ; void ( PersonWith_idPropertyOfTypeObjectId .class , NUMBER ) ; PersonWith_idPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId = new PersonWith_idPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId . set_id ( new ObjectId ( ) ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId ) ; assertThat ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId . get_id ( ) , notNullValue ( ) ) ; PersonWith_idPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId = org.springframework.data.mongodb.core.MongoTemplate . findOne ( new Query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId . get_id ( ) ) ) , PersonWith_idPropertyOfTypeObjectId .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId . get_id ( ) , is ( org.springframework.data.mongodb.core.PersonWith_idPropertyOfTypeObjectId . get_id ( ) ) ) ; void ( PersonWith_idPropertyOfTypeObjectId .class , NUMBER ) ; PersonWithIdPropertyOfTypeInteger org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeInteger = new PersonWithIdPropertyOfTypeInteger ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeInteger . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeInteger . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeInteger . setId ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeInteger ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeInteger ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeInteger . getId ( ) , notNullValue ( ) ) ; PersonWithIdPropertyOfTypeInteger org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeInteger = org.springframework.data.mongodb.core.MongoTemplate . findOne ( new Query ( where ( STRING ) . in ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeInteger . getId ( ) ) ) , PersonWithIdPropertyOfTypeInteger .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeInteger , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeInteger . getId ( ) , is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeInteger . getId ( ) ) ) ; void ( PersonWithIdPropertyOfTypeInteger .class , NUMBER ) ; PersonWithIdPropertyOfTypeBigInteger org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger = new PersonWithIdPropertyOfTypeBigInteger ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . setId ( java.math.BigInteger . java.math.BigInteger ( NUMBER ) ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . getId ( ) , notNullValue ( ) ) ; PersonWithIdPropertyOfTypeBigInteger org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger = org.springframework.data.mongodb.core.MongoTemplate . findOne ( new Query ( where ( STRING ) . in ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . getId ( ) ) ) , PersonWithIdPropertyOfTypeBigInteger .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . getId ( ) , is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . getId ( ) ) ) ; void ( PersonWithIdPropertyOfTypeBigInteger .class , NUMBER ) ; PersonWithIdPropertyOfPrimitiveInt org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt = new PersonWithIdPropertyOfPrimitiveInt ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . setId ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . getId ( ) , notNullValue ( ) ) ; PersonWithIdPropertyOfPrimitiveInt org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt = org.springframework.data.mongodb.core.MongoTemplate . findOne ( new Query ( where ( STRING ) . in ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . getId ( ) ) ) , PersonWithIdPropertyOfPrimitiveInt .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . getId ( ) , is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . getId ( ) ) ) ; void ( PersonWithIdPropertyOfPrimitiveInt .class , NUMBER ) ; PersonWithIdPropertyOfTypeLong org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong = new PersonWithIdPropertyOfTypeLong ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . setId ( java.lang.Long . java.lang.Long ( NUMBER ) ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . getId ( ) , notNullValue ( ) ) ; PersonWithIdPropertyOfTypeLong org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong = org.springframework.data.mongodb.core.MongoTemplate . findOne ( new Query ( where ( STRING ) . in ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . getId ( ) ) ) , PersonWithIdPropertyOfTypeLong .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . getId ( ) , is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . getId ( ) ) ) ; void ( PersonWithIdPropertyOfTypeLong .class , NUMBER ) ; PersonWithIdPropertyOfPrimitiveLong org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveLong = new PersonWithIdPropertyOfPrimitiveLong ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveLong . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveLong . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveLong . setId ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveLong ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveLong ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveLong . getId ( ) , notNullValue ( ) ) ; PersonWithIdPropertyOfPrimitiveLong org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveLong = org.springframework.data.mongodb.core.MongoTemplate . findOne ( new Query ( where ( STRING ) . in ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveLong . getId ( ) ) ) , PersonWithIdPropertyOfPrimitiveLong .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveLong , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveLong . getId ( ) , is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveLong . getId ( ) ) ) ; void ( PersonWithIdPropertyOfPrimitiveLong .class , NUMBER ) ; PersonWithIdPropertyOfTypeUUID org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID = new PersonWithIdPropertyOfTypeUUID ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID . getId ( ) , notNullValue ( ) ) ; PersonWithIdPropertyOfTypeUUID org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID = org.springframework.data.mongodb.core.MongoTemplate . findOne ( new Query ( where ( STRING ) . in ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID . getId ( ) ) ) , PersonWithIdPropertyOfTypeUUID .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID . getId ( ) , is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID . getId ( ) ) ) ; void ( PersonWithIdPropertyOfTypeUUID .class , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , int int ) { assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findAll ( java.lang.Class<> ) . size ( ) , is ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . insert ( new Person ( STRING , NUMBER ) ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( new Person ( STRING , NUMBER ) ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( new Person ( STRING , NUMBER ) ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( STRING ) ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . inc ( STRING , NUMBER ) ; Person org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , Person .class ) ; assertThat ( org.springframework.data.mongodb.core.Person . getFirstName ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , Person .class ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , Person .class , STRING ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , Person .class ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , new FindAndModifyOptions ( ) . returnNew ( true ) , Person .class ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , null , Person .class , STRING ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , Person .class ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( STRING ) ) ; org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , new FindAndModifyOptions ( ) . returnNew ( true ) . upsert ( true ) , Person .class ) ; assertThat ( org.springframework.data.mongodb.core.Person . getFirstName ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . insert ( new Person ( STRING , NUMBER ) ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( new Person ( STRING , NUMBER ) ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( STRING ) ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . set ( STRING , NUMBER ) ; Person org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , new FindAndModifyOptions ( ) . upsert ( true ) . returnNew ( true ) , Person .class ) ; assertThat ( org.springframework.data.mongodb.core.Person . getFirstName ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message org.springframework.data.mongodb.core.Message = new Message ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.Message ) ; Message org.springframework.data.mongodb.core.Message = new Message ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.Message ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . regex ( STRING ) ) ; Message org.springframework.data.mongodb.core.Message = org.springframework.data.mongodb.core.MongoTemplate . findAndRemove ( org.springframework.data.mongodb.core.Query , Message .class ) ; Message org.springframework.data.mongodb.core.Message = org.springframework.data.mongodb.core.MongoTemplate . findAndRemove ( org.springframework.data.mongodb.core.Query , Message .class ) ; Message org.springframework.data.mongodb.core.Message = org.springframework.data.mongodb.core.MongoTemplate . findAndRemove ( org.springframework.data.mongodb.core.Query , Message .class ) ; assertThat ( org.springframework.data.mongodb.core.Message , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.Message , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.Message , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.core.MongoTemplate . remove ( new Query ( ) , PersonWithIdPropertyOfTypeObjectId .class ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( NUMBER , NUMBER , NUMBER ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> < PersonWithIdPropertyOfTypeObjectId > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( STRING , STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> < PersonWithIdPropertyOfTypeObjectId > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> < PersonWithIdPropertyOfTypeObjectId > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.core.MongoTemplate . remove ( new Query ( ) , PersonWithIdPropertyOfTypeString .class ) ; PersonWithIdPropertyOfTypeString org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString = new PersonWithIdPropertyOfTypeString ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString ) ; PersonWithIdPropertyOfTypeString org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString = new PersonWithIdPropertyOfTypeString ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString ) ; PersonWithIdPropertyOfTypeString org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString = new PersonWithIdPropertyOfTypeString ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString ) ; PersonWithIdPropertyOfTypeString org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString = new PersonWithIdPropertyOfTypeString ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( NUMBER , NUMBER , NUMBER ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString> < PersonWithIdPropertyOfTypeString > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeString .class ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( STRING , STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString> < PersonWithIdPropertyOfTypeString > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeString .class ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . getId ( ) , org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString . getId ( ) ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString> < PersonWithIdPropertyOfTypeString > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeString .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeString> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.core.MongoTemplate . remove ( new Query ( ) , PersonWithIdPropertyOfTypeLong .class ) ; PersonWithIdPropertyOfTypeLong org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong = new PersonWithIdPropertyOfTypeLong ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . setId ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong ) ; PersonWithIdPropertyOfTypeLong org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong = new PersonWithIdPropertyOfTypeLong ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . setId ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong ) ; PersonWithIdPropertyOfTypeLong org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong = new PersonWithIdPropertyOfTypeLong ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . setId ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong ) ; PersonWithIdPropertyOfTypeLong org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong = new PersonWithIdPropertyOfTypeLong ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong . setId ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( NUMBER , NUMBER , NUMBER ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong> < PersonWithIdPropertyOfTypeLong > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeLong .class ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( STRING , STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong> < PersonWithIdPropertyOfTypeLong > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeLong .class ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( NUMBER , NUMBER ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong> < PersonWithIdPropertyOfTypeLong > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeLong .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeLong> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.core.MongoTemplate . remove ( new Query ( ) , PersonWithIdPropertyOfTypeBigInteger .class ) ; PersonWithIdPropertyOfTypeBigInteger org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger = new PersonWithIdPropertyOfTypeBigInteger ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . setId ( new java.math.BigInteger ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger ) ; PersonWithIdPropertyOfTypeBigInteger org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger = new PersonWithIdPropertyOfTypeBigInteger ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . setId ( new java.math.BigInteger ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger ) ; PersonWithIdPropertyOfTypeBigInteger org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger = new PersonWithIdPropertyOfTypeBigInteger ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . setId ( new java.math.BigInteger ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger ) ; PersonWithIdPropertyOfTypeBigInteger org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger = new PersonWithIdPropertyOfTypeBigInteger ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger . setId ( new java.math.BigInteger ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( NUMBER , NUMBER , NUMBER ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger> < PersonWithIdPropertyOfTypeBigInteger > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeBigInteger .class ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( STRING , STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger> < PersonWithIdPropertyOfTypeBigInteger > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeBigInteger .class ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( new java.math.BigInteger ( STRING ) , new java.math.BigInteger ( STRING ) ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger> < PersonWithIdPropertyOfTypeBigInteger > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeBigInteger .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeBigInteger> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.core.MongoTemplate . remove ( new Query ( ) , PersonWithIdPropertyOfPrimitiveInt .class ) ; PersonWithIdPropertyOfPrimitiveInt org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt = new PersonWithIdPropertyOfPrimitiveInt ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . setId ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt ) ; PersonWithIdPropertyOfPrimitiveInt org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt = new PersonWithIdPropertyOfPrimitiveInt ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . setId ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt ) ; PersonWithIdPropertyOfPrimitiveInt org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt = new PersonWithIdPropertyOfPrimitiveInt ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . setId ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt ) ; PersonWithIdPropertyOfPrimitiveInt org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt = new PersonWithIdPropertyOfPrimitiveInt ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt . setId ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( NUMBER , NUMBER , NUMBER ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt> < PersonWithIdPropertyOfPrimitiveInt > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfPrimitiveInt .class ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( STRING , STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt> < PersonWithIdPropertyOfPrimitiveInt > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfPrimitiveInt .class ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( NUMBER , NUMBER ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt> < PersonWithIdPropertyOfPrimitiveInt > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfPrimitiveInt .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfPrimitiveInt> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.core.MongoTemplate . remove ( new Query ( ) , PersonWithIdPropertyOfTypeObjectId .class ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> < java.lang.Integer > ( ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( java.util.List<java.lang.Integer> ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> < PersonWithIdPropertyOfTypeObjectId > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( java.util.List<java.lang.Integer> . java.lang.Object[] ( ) ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> < PersonWithIdPropertyOfTypeObjectId > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> . size ( ) , is ( NUMBER ) ) ; try { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> < java.lang.Integer > ( ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( java.util.List<java.lang.Integer> , java.util.List<java.lang.Integer> ) ) ; org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; fail ( STRING ) ; } catch ( InvalidMongoDbApiUsageException org.springframework.data.mongodb.core.InvalidMongoDbApiUsageException ) {} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.core.MongoTemplate . remove ( new Query ( ) , PersonWithIdPropertyOfTypeObjectId .class ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . regex ( STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> < PersonWithIdPropertyOfTypeObjectId > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . regex ( STRING , STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> < PersonWithIdPropertyOfTypeObjectId > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.core.MongoTemplate . remove ( new Query ( ) , PersonWithIdPropertyOfTypeObjectId .class ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; Query org.springframework.data.mongodb.core.Query = new Query ( new Criteria ( ) . orOperator ( where ( STRING ) . in ( NUMBER , NUMBER ) , where ( STRING ) . is ( NUMBER ) ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> < PersonWithIdPropertyOfTypeObjectId > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> . size ( ) , is ( NUMBER ) ) ; for ( PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId : java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> ) { assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getAge ( ) , isOneOf ( NUMBER , NUMBER , NUMBER ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.core.MongoTemplate . remove ( new Query ( ) , PersonWithIdPropertyOfTypeObjectId .class ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . set ( STRING , STRING ) . set ( STRING , NUMBER ) ; UpdateResult org.springframework.data.mongodb.core.UpdateResult = org.springframework.data.mongodb.core.MongoTemplate . updateMulti ( new Query ( ) , org.springframework.data.mongodb.core.Update , PersonWithIdPropertyOfTypeObjectId .class ) ; if ( org.springframework.data.mongodb.core.UpdateResult . wasAcknowledged ( ) ) { assertThat ( org.springframework.data.mongodb.core.UpdateResult . getModifiedCount ( ) , is ( NUMBER ) ) ; } Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( NUMBER , NUMBER ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> < PersonWithIdPropertyOfTypeObjectId > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> . size ( ) , is ( NUMBER ) ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( NUMBER ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> < PersonWithIdPropertyOfTypeObjectId > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> . size ( ) , is ( NUMBER ) ) ; for ( PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId : java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> ) { assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getAge ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getFirstName ( ) , is ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) ) ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId , notNullValue ( ) ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) ) ) ; org.springframework.data.mongodb.core.MongoTemplate . remove ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId , nullValue ( ) ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) ) ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId , notNullValue ( ) ) ; org.springframework.data.mongodb.core.MongoTemplate . remove ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , PersonWithIdPropertyOfTypeObjectId .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = new PersonWithAList ( ) ; org.springframework.data.mongodb.core.PersonWithAList . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithAList . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithAList ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( org.springframework.data.mongodb.core.PersonWithAList . getId ( ) ) ) ; PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , PersonWithAList .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithAList , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithAList . getWishList ( ) . size ( ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.PersonWithAList . addToWishList ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithAList ) ; PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , PersonWithAList .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithAList , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithAList . getWishList ( ) . size ( ) , is ( NUMBER ) ) ; Friend org.springframework.data.mongodb.core.Friend = new Friend ( ) ; org.springframework.data.mongodb.core.PersonWithAList . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithAList . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithAList . addFriend ( org.springframework.data.mongodb.core.Friend ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithAList ) ; PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , PersonWithAList .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithAList , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithAList . getWishList ( ) . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithAList . getFriends ( ) . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = new PersonWithAList ( ) ; org.springframework.data.mongodb.core.PersonWithAList . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithAList . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithAList ) ; PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = new PersonWithAList ( ) ; org.springframework.data.mongodb.core.PersonWithAList . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithAList . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithAList ) ; PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = new PersonWithAList ( ) ; org.springframework.data.mongodb.core.PersonWithAList . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithAList . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithAList ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . gt ( NUMBER ) ) ; org.springframework.data.mongodb.core.Query . with ( new Sort ( Direction . DESC , STRING ) ) ; PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , PersonWithAList .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithAList . getFirstName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.data.mongodb.core.MongoTemplate . execute ( STRING , new CollectionCallback < java.lang.Object > ( ) { public java.lang.Object java.lang.Object ( MongoCollection < org . org.bson . org.bson > org.springframework.data.mongodb.core.MongoCollection<org.bson.Document> )					throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { return null ; } } ) ; MongoTemplate org.springframework.data.mongodb.core.MongoTemplate = new MongoTemplate ( org.springframework.data.mongodb.core.MongoDbFactory ) ; org.springframework.data.mongodb.core.MongoTemplate . setReadPreference ( ReadPreference . secondary ( ) ) ; org.springframework.data.mongodb.core.MongoTemplate . execute ( STRING , new CollectionCallback < java.lang.Object > ( ) { public java.lang.Object java.lang.Object ( MongoCollection < org . org.bson . org.bson > org.springframework.data.mongodb.core.MongoCollection<org.bson.Document> )					throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { assertThat ( org.springframework.data.mongodb.core.MongoCollection<org.bson.Document> . getReadPreference ( ) , is ( ReadPreference . secondary ( ) ) ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( MongoCollection < org . org.bson . org.bson > org.springframework.data.mongodb.core.MongoCollection<org.bson.Document> )					throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( MongoCollection < org . org.bson . org.bson > org.springframework.data.mongodb.core.MongoCollection<org.bson.Document> )					throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { assertThat ( org.springframework.data.mongodb.core.MongoCollection<org.bson.Document> . getReadPreference ( ) , is ( ReadPreference . secondary ( ) ) ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . remove ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setId ( new ObjectId ( ) ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) ) ) , update ( STRING , STRING ) , PersonWithIdPropertyOfTypeObjectId .class ) ; PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = org.springframework.data.mongodb.core.MongoTemplate . findById ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) , PersonWithIdPropertyOfTypeObjectId .class ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) , is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getFirstName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithIdPropertyOfTypeObjectId org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId = new PersonWithIdPropertyOfTypeObjectId ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setId ( new ObjectId ( ) ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . setWriteConcern ( WriteConcern . UNACKNOWLEDGED ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId ) ; UpdateResult org.springframework.data.mongodb.core.UpdateResult = org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) ) ) , update ( STRING , STRING ) , PersonWithIdPropertyOfTypeObjectId .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.FsyncSafeWriteConcernResolver org.springframework.data.mongodb.core.MongoTemplateTests.FsyncSafeWriteConcernResolver = new org.springframework.data.mongodb.core.MongoTemplateTests.FsyncSafeWriteConcernResolver ( ) ; org.springframework.data.mongodb.core.MongoTemplate . setWriteConcernResolver ( org.springframework.data.mongodb.core.MongoTemplateTests.FsyncSafeWriteConcernResolver ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId . getId ( ) ) ) ; Update org.springframework.data.mongodb.core.Update = update ( STRING , STRING ) ; org.springframework.data.mongodb.core.UpdateResult = org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , PersonWithIdPropertyOfTypeObjectId .class ) ; MongoAction org.springframework.data.mongodb.core.MongoAction = org.springframework.data.mongodb.core.MongoTemplateTests.FsyncSafeWriteConcernResolver . org.springframework.data.mongodb.core.MongoAction ( ) ; assertThat ( org.springframework.data.mongodb.core.MongoAction . getCollectionName ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoAction . getDefaultWriteConcern ( ) , equalTo ( WriteConcern . UNACKNOWLEDGED ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoAction . getDocument ( ) , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoAction . getEntityType ( ) . toString ( ) , is ( PersonWithIdPropertyOfTypeObjectId .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoAction . getMongoActionOperation ( ) , is ( MongoActionOperation . UPDATE ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoAction . getQuery ( ) , equalTo ( org.springframework.data.mongodb.core.Query . getQueryObject ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.WriteConcern org.springframework.data.mongodb.core.WriteConcern ( MongoAction org.springframework.data.mongodb.core.MongoAction ) { this . org.springframework.data.mongodb.core.MongoAction = org.springframework.data.mongodb.core.MongoAction ; return WriteConcern . FSYNC_SAFE ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.MongoAction org.springframework.data.mongodb.core.MongoAction ( ) { return org.springframework.data.mongodb.core.MongoAction ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DBRef org.springframework.data.mongodb.core.DBRef = new DBRef ( STRING , new ObjectId ( ) ) ; DBRef org.springframework.data.mongodb.core.DBRef = new DBRef ( STRING , new ObjectId ( ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( null , update ( STRING , java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.DBRef , org.springframework.data.mongodb.core.DBRef ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.ClassWithDBRefs .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . insert ( new Person ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( new Person ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( new Person ( STRING ) ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; org.springframework.data.mongodb.core.MongoTemplate . executeQuery ( new Query ( ) , org.springframework.data.mongodb.core.MongoTemplate . getCollectionName ( Person .class ) , new DocumentCallbackHandler ( ) { public void void ( org . org.bson . org.bson org.bson.Document ) { java.lang.String java.lang.String = ( java.lang.String ) org.bson.Document . get ( STRING ) ; if ( java.lang.String != null ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } } ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( org . org.bson . org.bson org.bson.Document ) { java.lang.String java.lang.String = ( java.lang.String ) org.bson.Document . get ( STRING ) ; if ( java.lang.String != null ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . insert ( new Person ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( new Person ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( new Person ( STRING ) ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; org.springframework.data.mongodb.core.MongoTemplate . executeQuery ( new Query ( ) , org.springframework.data.mongodb.core.MongoTemplate . getCollectionName ( Person .class ) , new DocumentCallbackHandler ( ) { public void void ( org . org.bson . org.bson org.bson.Document ) { java.lang.String java.lang.String = ( java.lang.String ) org.bson.Document . get ( STRING ) ; if ( java.lang.String != null ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } } , new CursorPreparer ( ) { public org.springframework.data.mongodb.core.FindIterable<org.bson.Document> < org . org.bson . org.bson > org.springframework.data.mongodb.core.FindIterable<org.bson.Document> ( FindIterable < org . org.bson . org.bson > org.springframework.data.mongodb.core.FindIterable<org.bson.Document> ) { org.springframework.data.mongodb.core.FindIterable<org.bson.Document> . limit ( NUMBER ) ; return org.springframework.data.mongodb.core.FindIterable<org.bson.Document> ; } } ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; org.springframework.data.mongodb.core.MongoTemplate . remove ( new Query ( ) , Person .class ) ; }  <METHOD_END>
<METHOD_START> public void void ( org . org.bson . org.bson org.bson.Document ) { java.lang.String java.lang.String = ( java.lang.String ) org.bson.Document . get ( STRING ) ; if ( java.lang.String != null ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.FindIterable<org.bson.Document> < org . org.bson . org.bson > org.springframework.data.mongodb.core.FindIterable<org.bson.Document> ( FindIterable < org . org.bson . org.bson > org.springframework.data.mongodb.core.FindIterable<org.bson.Document> ) { org.springframework.data.mongodb.core.FindIterable<org.bson.Document> . limit ( NUMBER ) ; return org.springframework.data.mongodb.core.FindIterable<org.bson.Document> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.MongoTemplate . count ( new Query ( ) , Person .class ) , is ( NUMBER ) ) ; Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.Person ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.Person ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . count ( null , Person .class ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . count ( query ( where ( STRING ) . is ( STRING ) ) , Person .class ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . count ( null , ( java.lang.Class<?> < ? > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . count ( null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . count ( null , ( java.lang.String ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DateTime org.springframework.data.mongodb.core.DateTime = new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TestClass org.springframework.data.mongodb.core.MongoTemplateTests.TestClass = new org.springframework.data.mongodb.core.MongoTemplateTests.TestClass ( org.springframework.data.mongodb.core.DateTime ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.TestClass ) ; java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.TestClass> < org.springframework.data.mongodb.core.MongoTemplateTests.TestClass > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.TestClass> = org.springframework.data.mongodb.core.MongoTemplate . find ( new Query ( Criteria . where ( STRING ) . is ( org.springframework.data.mongodb.core.DateTime . toDate ( ) ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.TestClass .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.TestClass> . int ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.TestClass> . org.springframework.data.mongodb.core.MongoTemplateTests.TestClass ( NUMBER ) . org.springframework.data.mongodb.core.DateTime , is ( org.springframework.data.mongodb.core.MongoTemplateTests.TestClass . org.springframework.data.mongodb.core.DateTime ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . remove ( new Query ( ) , STRING ) ; Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.Person , STRING ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findAll ( org.springframework.data.mongodb.core.MongoTemplateTests.TestClass .class , STRING ) . size ( ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.MongoTemplate . remove ( org.springframework.data.mongodb.core.Person , STRING ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findAll ( Person .class , STRING ) . isEmpty ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = new ObjectId ( ) . toString ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Sample . java.lang.String = java.lang.String ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.Sample .class ) . id , is ( java.lang.String ) ) ; org.springframework.data.mongodb.core.MongoTemplate . remove ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.Sample .class ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Sample . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Sample . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . not ( ) . regex ( STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> < org.springframework.data.mongodb.core.MongoTemplateTests.Sample > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.Sample .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> . int ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> . org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( NUMBER ) . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.MyId org.springframework.data.mongodb.core.MongoTemplateTests.MyId = new org.springframework.data.mongodb.core.MongoTemplateTests.MyId ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.MyId . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.MyId . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithMyId org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithMyId = new org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithMyId ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithMyId . org.springframework.data.mongodb.core.MongoTemplateTests.MyId = org.springframework.data.mongodb.core.MongoTemplateTests.MyId ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithMyId ) ; org.springframework.data.mongodb.core.MongoTemplate . remove ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.MyId ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithMyId .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Address org.springframework.data.mongodb.core.MongoTemplateTests.Address = new org.springframework.data.mongodb.core.MongoTemplateTests.Address ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Address . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.Address . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson = new org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson . org.springframework.data.mongodb.core.MongoTemplateTests.Address = org.springframework.data.mongodb.core.MongoTemplateTests.Address ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson ) ; Query org.springframework.data.mongodb.core.Query = new BasicQuery ( STRING ) ; java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson> < org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson> . org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson ( NUMBER ) , hasProperty ( STRING , is ( STRING ) ) ) ; org.springframework.data.mongodb.core.Query = new BasicQuery ( STRING ) ; java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson> . org.springframework.data.mongodb.core.MongoTemplateTests.MyPerson ( NUMBER ) , hasProperty ( STRING , is ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = OptimisticLockingFailureException .class ) public void void ( ) { PersonWithVersionPropertyOfTypeInteger org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger = new PersonWithVersionPropertyOfTypeInteger ( ) ; person . age = NUMBER ; person . firstName = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger> < PersonWithVersionPropertyOfTypeInteger > java.util.List<org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger> = org.springframework.data.mongodb.core.MongoTemplate . findAll ( PersonWithVersionPropertyOfTypeInteger .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger> . get ( NUMBER ) . version , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger = java.util.List<org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger> . get ( NUMBER ) ; person . firstName = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger ) ; assertThat ( person . version , is ( NUMBER ) ) ; java.util.List<org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger> = org.springframework.data.mongodb.core.MongoTemplate . findAll ( PersonWithVersionPropertyOfTypeInteger .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger> . get ( NUMBER ) . version , is ( NUMBER ) ) ; person . version = NUMBER ; person . firstName = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithVersionPropertyOfTypeInteger org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger = new PersonWithVersionPropertyOfTypeInteger ( ) ; person . id = new ObjectId ( ) . toString ( ) ; person . age = NUMBER ; person . firstName = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . put ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.bson.Document , org.springframework.data.mongodb.core.MongoTemplate . determineCollectionName ( PersonWithVersionPropertyOfTypeInteger .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithIdPropertyOfTypeUUID org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID = new PersonWithIdPropertyOfTypeUUID ( ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID . getId ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . remove ( new Query ( ) , java.lang.String ) ; org.springframework.data.mongodb.core.MongoTemplateTests.PersonWithConvertedId org.springframework.data.mongodb.core.MongoTemplateTests.PersonWithConvertedId = new org.springframework.data.mongodb.core.MongoTemplateTests.PersonWithConvertedId ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.PersonWithConvertedId . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.PersonWithConvertedId , java.lang.String ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findAll ( org.springframework.data.mongodb.core.MongoTemplateTests.PersonWithConvertedId .class , java.lang.String ) . isEmpty ( ) , is ( false ) ) ; org.springframework.data.mongodb.core.MongoTemplate . remove ( org.springframework.data.mongodb.core.MongoTemplateTests.PersonWithConvertedId , java.lang.String ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findAll ( org.springframework.data.mongodb.core.MongoTemplateTests.PersonWithConvertedId .class , java.lang.String ) . isEmpty ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( java.util.Map<java.lang.String,java.lang.String> , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . save ( new java.lang.Object ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . save ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.bson.Document , STRING ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.bson.Document , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . findById ( org.bson.Document . get ( STRING ) , org . org.bson . org.bson .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.bson.Document , STRING ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.MongoTemplate . findById ( org.bson.Document . get ( STRING ) , org . org.bson . org.bson .class , STRING ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( org.bson.Document . get ( STRING ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( org.bson.Document . get ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . save ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MappingException .class ) public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . save ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithVersionPropertyOfTypeInteger org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger = new PersonWithVersionPropertyOfTypeInteger ( ) ; person . firstName = STRING ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger ) ; assertThat ( person . version , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithVersionPropertyOfTypeInteger org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger = new PersonWithVersionPropertyOfTypeInteger ( ) ; person . firstName = STRING ; org.springframework.data.mongodb.core.MongoTemplate . insertAll ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger ) ) ; assertThat ( person . version , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> < PersonWithIdPropertyOfTypeObjectId > java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> = org.springframework.data.mongodb.core.MongoTemplate . findAll ( PersonWithIdPropertyOfTypeObjectId .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . find ( null , PersonWithIdPropertyOfTypeObjectId .class ) , is ( java.util.List<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeObjectId> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithVersionPropertyOfTypeInteger org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger = new PersonWithVersionPropertyOfTypeInteger ( ) ; person . firstName = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger , STRING ) ; assertThat ( person . version , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger , STRING ) ; assertThat ( person . version , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithVersionPropertyOfTypeLong org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeLong = new PersonWithVersionPropertyOfTypeLong ( ) ; person . firstName = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeLong ) ; assertThat ( person . version , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = DuplicateKeyException .class ) public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . setWriteConcern ( WriteConcern . SAFE ) ; PersonWithVersionPropertyOfTypeInteger org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger = new PersonWithVersionPropertyOfTypeInteger ( ) ; person . firstName = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger ) ; assertThat ( person . version , is ( NUMBER ) ) ; person . version = null ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.core.Person = new Person ( ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.Person ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.Person . getId ( ) ) ) ; java.lang.String java.lang.String = org.springframework.data.mongodb.core.MongoTemplate . getCollectionName ( Person .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , java.util.HashMap .class , java.lang.String ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . count ( org.springframework.data.mongodb.core.Query , java.lang.String ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson = new org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String , is ( notNullValue ( ) ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String = null ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson ) ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson = org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.Person ) ; org.springframework.data.mongodb.core.Person . setFirstName ( null ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.Person ) ; org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.Person . getId ( ) ) ) , Person .class ) ; assertThat ( org.springframework.data.mongodb.core.Person . getFirstName ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.bson.Document , STRING ) ; java.util.List<org.bson.Document> < org . org.bson . org.bson > java.util.List<org.bson.Document> = org.springframework.data.mongodb.core.MongoTemplate . findAll ( org . org.bson . org.bson .class , STRING ) ; assertThat ( java.util.List<org.bson.Document> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.bson.Document> . get ( NUMBER ) . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . exists ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.Sample .class ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . exists ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplate . getCollectionName ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample .class ) ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . exists ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.Sample .class , org.springframework.data.mongodb.core.MongoTemplate . getCollectionName ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample .class ) ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithFieldAnnotation org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithFieldAnnotation = new org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithFieldAnnotation ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithFieldAnnotation . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithFieldAnnotation ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithFieldAnnotation . org.springframework.data.mongodb.core.ObjectId ) ) ; Update org.springframework.data.mongodb.core.Update = Update . update ( STRING , STRING ) ; FindAndModifyOptions org.springframework.data.mongodb.core.FindAndModifyOptions = new FindAndModifyOptions ( ) . returnNew ( true ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithFieldAnnotation org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithFieldAnnotation = org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.FindAndModifyOptions , org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithFieldAnnotation .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithFieldAnnotation . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate = new org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate . java.util.Date = new java.util.Date ( java.lang.System . long ( ) - NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . lt ( new java.util.Date ( ) ) ) ; java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate> < org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate> . org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate ( NUMBER ) . java.util.Date , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( java.lang.String ) ) ; java.lang.String java.lang.String = STRING ; Update org.springframework.data.mongodb.core.Update = Update . update ( STRING , java.lang.String ) ; org.springframework.data.mongodb.core.MongoTemplate . upsert ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.Sample .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.Sample .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample . java.lang.String , is ( java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample . java.lang.String , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Document org.springframework.data.mongodb.core.MongoTemplateTests.Document = new org.springframework.data.mongodb.core.MongoTemplateTests.Document ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Document . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.Document . org.springframework.data.mongodb.core.MongoTemplateTests.Model = new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.MongoTemplateTests.Document ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.Document . java.lang.String ) ) ; java.lang.String java.lang.String = STRING ; Update org.springframework.data.mongodb.core.Update = Update . update ( STRING , new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( java.lang.String ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.Document .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Document org.springframework.data.mongodb.core.MongoTemplateTests.Document = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.Document .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.Document , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.Document . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.Document . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.Document . org.springframework.data.mongodb.core.MongoTemplateTests.Model , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.Document . org.springframework.data.mongodb.core.MongoTemplateTests.Model . java.lang.String ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields = new org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String ) ) ; org.springframework.data.mongodb.core.Query . fields ( ) . include ( STRING ) . include ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields = new org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String ) ) ; org.springframework.data.mongodb.core.Query . fields ( ) . exclude ( STRING ) . exclude ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields = new org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields = new org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . in ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String ) ) ; org.springframework.data.mongodb.core.Query . fields ( ) . exclude ( STRING ) . exclude ( STRING ) ; java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields> < org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields> . int ( ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields = java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields> . org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( nullValue ( ) ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields = java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields> . org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFieldsAndNestedAddress org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFieldsAndNestedAddress = new org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFieldsAndNestedAddress ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.Address org.springframework.data.mongodb.core.MongoTemplateTests.Address = new org.springframework.data.mongodb.core.MongoTemplateTests.Address ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.Address . java.lang.String = java.lang.String ; org.springframework.data.mongodb.core.MongoTemplateTests.Address . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFieldsAndNestedAddress . org.springframework.data.mongodb.core.MongoTemplateTests.Address = org.springframework.data.mongodb.core.MongoTemplateTests.Address ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFieldsAndNestedAddress ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String ) ) ; org.springframework.data.mongodb.core.Query . fields ( ) . include ( STRING ) . include ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFieldsAndNestedAddress org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFieldsAndNestedAddress = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFieldsAndNestedAddress .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFields . java.lang.String , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFieldsAndNestedAddress . org.springframework.data.mongodb.core.MongoTemplateTests.Address , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFieldsAndNestedAddress . org.springframework.data.mongodb.core.MongoTemplateTests.Address . java.lang.String , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWith3AliasedFieldsAndNestedAddress . org.springframework.data.mongodb.core.MongoTemplateTests.Address . java.lang.String , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BaseDoc org.springframework.data.mongodb.core.BaseDoc = new BaseDoc ( ) ; doc0 . value = STRING ; SpecialDoc org.springframework.data.mongodb.core.SpecialDoc = new SpecialDoc ( ) ; doc1 . value = STRING ; doc1 . specialValue = STRING ; VerySpecialDoc org.springframework.data.mongodb.core.VerySpecialDoc = new VerySpecialDoc ( ) ; doc2 . value = STRING ; doc2 . specialValue = STRING ; doc2 . verySpecialValue = NUMBER ; java.lang.String java.lang.String = org.springframework.data.mongodb.core.MongoTemplate . getCollectionName ( BaseDoc .class ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.BaseDoc , java.lang.String ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.SpecialDoc , java.lang.String ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.VerySpecialDoc , java.lang.String ) ; Query org.springframework.data.mongodb.core.Query = Query . query ( where ( STRING ) . is ( STRING ) ) . restrict ( SpecialDoc .class ) ; java.util.List<org.springframework.data.mongodb.core.BaseDoc> < BaseDoc > java.util.List<org.springframework.data.mongodb.core.BaseDoc> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , BaseDoc .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> . get ( NUMBER ) , is ( instanceOf ( SpecialDoc .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BaseDoc org.springframework.data.mongodb.core.BaseDoc = new BaseDoc ( ) ; doc0 . value = STRING ; SpecialDoc org.springframework.data.mongodb.core.SpecialDoc = new SpecialDoc ( ) ; doc1 . value = STRING ; doc1 . specialValue = STRING ; VerySpecialDoc org.springframework.data.mongodb.core.VerySpecialDoc = new VerySpecialDoc ( ) ; doc2 . value = STRING ; doc2 . specialValue = STRING ; doc2 . verySpecialValue = NUMBER ; java.lang.String java.lang.String = org.springframework.data.mongodb.core.MongoTemplate . getCollectionName ( BaseDoc .class ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.BaseDoc , java.lang.String ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.SpecialDoc , java.lang.String ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.VerySpecialDoc , java.lang.String ) ; Query org.springframework.data.mongodb.core.Query = Query . query ( where ( STRING ) . is ( STRING ) ) . restrict ( BaseDoc .class , VerySpecialDoc .class ) ; java.util.List<org.springframework.data.mongodb.core.BaseDoc> < BaseDoc > java.util.List<org.springframework.data.mongodb.core.BaseDoc> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , BaseDoc .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> . get ( NUMBER ) . getClass ( ) , is ( ( java.lang.Object ) BaseDoc .class ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> . get ( NUMBER ) . getClass ( ) , is ( ( java.lang.Object ) VerySpecialDoc .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BaseDoc org.springframework.data.mongodb.core.BaseDoc = new BaseDoc ( ) ; doc0 . value = STRING ; SpecialDoc org.springframework.data.mongodb.core.SpecialDoc = new SpecialDoc ( ) ; doc1 . value = STRING ; doc1 . specialValue = STRING ; VerySpecialDoc org.springframework.data.mongodb.core.VerySpecialDoc = new VerySpecialDoc ( ) ; doc2 . value = STRING ; doc2 . specialValue = STRING ; doc2 . verySpecialValue = NUMBER ; java.lang.String java.lang.String = org.springframework.data.mongodb.core.MongoTemplate . getCollectionName ( BaseDoc .class ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.BaseDoc , java.lang.String ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.SpecialDoc , java.lang.String ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.VerySpecialDoc , java.lang.String ) ; Query org.springframework.data.mongodb.core.Query = Query . query ( where ( STRING ) . is ( STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.BaseDoc> < BaseDoc > java.util.List<org.springframework.data.mongodb.core.BaseDoc> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , BaseDoc .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> . get ( NUMBER ) . getClass ( ) , is ( ( java.lang.Object ) BaseDoc .class ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> . get ( NUMBER ) . getClass ( ) , is ( ( java.lang.Object ) SpecialDoc .class ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> . get ( NUMBER ) . getClass ( ) , is ( ( java.lang.Object ) VerySpecialDoc .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( java.lang.String , STRING ) ; java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> < org.springframework.data.mongodb.core.MongoTemplateTests.Sample > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> = org.springframework.data.mongodb.core.MongoTemplate . findAll ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> . int ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> . org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( NUMBER ) . java.lang.String , is ( java.lang.String ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> . org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( NUMBER ) . java.lang.String , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWithEnumValue org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWithEnumValue = new org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWithEnumValue ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWithEnumValue . org.springframework.data.mongodb.core.MongoTemplateTests.EnumValue = org.springframework.data.mongodb.core.MongoTemplateTests.EnumValue . org.springframework.data.mongodb.core.MongoTemplateTests.EnumValue ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWithEnumValue ) ; Query org.springframework.data.mongodb.core.Query = Query . query ( Criteria . where ( STRING ) . in ( org.springframework.data.mongodb.core.MongoTemplateTests.EnumValue . org.springframework.data.mongodb.core.MongoTemplateTests.EnumValue ) ) ; org.springframework.data.mongodb.core.MongoTemplate . executeQuery ( org.springframework.data.mongodb.core.Query , StringUtils . uncapitalize ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWithEnumValue .class . java.lang.String ( ) ) , new DocumentCallbackHandler ( ) { @ java.lang.Override public void void ( org . org.bson . org.bson org.bson.Document ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { assertThat ( org.bson.Document , is ( notNullValue ( ) ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWithEnumValue org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWithEnumValue = org.springframework.data.mongodb.core.MongoTemplate . getConverter ( ) . read ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWithEnumValue .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWithEnumValue . org.springframework.data.mongodb.core.MongoTemplateTests.EnumValue , is ( org.springframework.data.mongodb.core.MongoTemplateTests.EnumValue . org.springframework.data.mongodb.core.MongoTemplateTests.EnumValue ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( org . org.bson . org.bson org.bson.Document ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { assertThat ( org.bson.Document , is ( notNullValue ( ) ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWithEnumValue org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWithEnumValue = org.springframework.data.mongodb.core.MongoTemplate . getConverter ( ) . read ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWithEnumValue .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.ObjectWithEnumValue . org.springframework.data.mongodb.core.MongoTemplateTests.EnumValue , is ( org.springframework.data.mongodb.core.MongoTemplateTests.EnumValue . org.springframework.data.mongodb.core.MongoTemplateTests.EnumValue ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson = new org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String , is ( notNullValue ( ) ) ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.Long , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( org.springframework.data.mongodb.core.Query , Update . update ( STRING , STRING ) , org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.Long , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson = new org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson = new org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . in ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( org.springframework.data.mongodb.core.Query , Update . update ( STRING , STRING ) , org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson .class ) ; for ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson : org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson .class ) ) { if ( STRING . boolean ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String ) ) { assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.Long , equalTo ( java.lang.Long . java.lang.Long ( NUMBER ) ) ) ; } else { assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.Long , equalTo ( java.lang.Long . java.lang.Long ( NUMBER ) ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson = new org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson = new org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . in ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateMulti ( org.springframework.data.mongodb.core.Query , Update . update ( STRING , STRING ) , org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson .class ) ; for ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson : org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson .class ) ) { assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.Long , equalTo ( java.lang.Long . java.lang.Long ( NUMBER ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Sample . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.Sample . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; Query org.springframework.data.mongodb.core.Query = new Query ( ) ; org.springframework.data.mongodb.core.Query . addCriteria ( where ( STRING ) . in ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . count ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.Sample .class ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.Query . with ( new PageRequest ( NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.Query . with ( new Sort ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.Sample .class ) , is ( not ( empty ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Document org.springframework.data.mongodb.core.MongoTemplateTests.Document = new org.springframework.data.mongodb.core.MongoTemplateTests.Document ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Document . org.springframework.data.mongodb.core.MongoTemplateTests.Model = new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Document ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.Document . java.lang.String ) ) ; Update org.springframework.data.mongodb.core.Update = Update . update ( STRING , new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.Document .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Document org.springframework.data.mongodb.core.MongoTemplateTests.Document = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.Document .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.Document . org.springframework.data.mongodb.core.MongoTemplateTests.Model , instanceOf ( org.springframework.data.mongodb.core.MongoTemplateTests.ModelA .class ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.Document . org.springframework.data.mongodb.core.MongoTemplateTests.Model . java.lang.String ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection ( ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> < java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.Model > java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> = new java.util.HashMap<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> < java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.Model > ( ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING , new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . boolean ( java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING , new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.lang.String ) ) ; Update org.springframework.data.mongodb.core.Update = Update . update ( STRING , java.util.Collections . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> ( java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection .class ) , notNullValue ( ) ) ; org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . java.util.Set<java.util.Map.Entry<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING ) , instanceOf ( org.springframework.data.mongodb.core.MongoTemplateTests.ModelA .class ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING ) . java.lang.String ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING ) , instanceOf ( org.springframework.data.mongodb.core.MongoTemplateTests.ModelA .class ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING ) . java.lang.String ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection ( ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> < java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.Model > java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> = new java.util.HashMap<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> < java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.Model > ( ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING , new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . boolean ( java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING , new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.lang.String ) ) ; Update org.springframework.data.mongodb.core.Update = Update . update ( STRING , java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection .class ) , notNullValue ( ) ) ; org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . java.util.Set<java.util.Map.Entry<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING ) , instanceOf ( org.springframework.data.mongodb.core.MongoTemplateTests.ModelA .class ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING ) . java.lang.String ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING ) , instanceOf ( org.springframework.data.mongodb.core.MongoTemplateTests.ModelA .class ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING ) . java.lang.String ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection ( ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> < java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.Model > java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> = new java.util.HashMap<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> < java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.Model > ( ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING , new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . boolean ( java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.lang.String ) ) ; Update org.springframework.data.mongodb.core.Update = Update . update ( STRING , java.util.Collections . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.ModelA> ( STRING , new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection .class ) , notNullValue ( ) ) ; org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . java.util.Set<java.util.Map.Entry<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . java.util.Set<java.util.Map.Entry<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING ) , instanceOf ( org.springframework.data.mongodb.core.MongoTemplateTests.ModelA .class ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING ) . java.lang.String ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING ) , instanceOf ( org.springframework.data.mongodb.core.MongoTemplateTests.ModelA .class ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedCollection . java.util.List<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( STRING ) . java.lang.String ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> < org.springframework.data.mongodb.core.MongoTemplateTests.Model > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> = new java.util.ArrayList<org.springframework.data.mongodb.core.MongoTemplateTests.Model> < org.springframework.data.mongodb.core.MongoTemplateTests.Model > ( ) ; java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> . boolean ( new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection ( new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ) ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection . java.lang.String ) ) ; Update org.springframework.data.mongodb.core.Update = Update . update ( STRING , new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection .class ) , notNullValue ( ) ) ; org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection . org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection . org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( NUMBER ) . java.lang.String ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> < org.springframework.data.mongodb.core.MongoTemplateTests.Model > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> = new java.util.ArrayList<org.springframework.data.mongodb.core.MongoTemplateTests.Model> < org.springframework.data.mongodb.core.MongoTemplateTests.Model > ( ) ; java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> . boolean ( new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection ( new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ) ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection . java.lang.String ) ) ; Update org.springframework.data.mongodb.core.Update = Update . update ( STRING , new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection .class ) , notNullValue ( ) ) ; org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection . org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection . org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( NUMBER ) . java.lang.String ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection . org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( NUMBER ) . java.lang.String ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> < org.springframework.data.mongodb.core.MongoTemplateTests.Model > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> = java.util.Arrays .< org.springframework.data.mongodb.core.MongoTemplateTests.Model > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection ( new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ) ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection . java.lang.String ) ) ; Update org.springframework.data.mongodb.core.Update = Update . update ( STRING , new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection ( java.util.Arrays .< org.springframework.data.mongodb.core.MongoTemplateTests.Model > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection .class ) , notNullValue ( ) ) ; org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection . org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithEmbeddedDocumentWithCollection . org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( NUMBER ) . java.lang.String ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList ( ) ; java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> < org.springframework.data.mongodb.core.MongoTemplateTests.Model > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> = new java.util.ArrayList<org.springframework.data.mongodb.core.MongoTemplateTests.Model> < org.springframework.data.mongodb.core.MongoTemplateTests.Model > ( ) ; java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> . boolean ( new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList . java.util.List<java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . boolean ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList .class ) , notNullValue ( ) ) ; Update org.springframework.data.mongodb.core.Update = Update . update ( STRING , new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList . java.util.List<java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList . java.util.List<java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( NUMBER ) , instanceOf ( org.springframework.data.mongodb.core.MongoTemplateTests.ModelA .class ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList . java.util.List<java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( NUMBER ) . java.lang.String ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList . java.util.List<java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( NUMBER ) , instanceOf ( org.springframework.data.mongodb.core.MongoTemplateTests.ModelA .class ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithNestedList . java.util.List<java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model>> . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( NUMBER ) . java.lang.String ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> < org.springframework.data.mongodb.core.MongoTemplateTests.Model > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> = java.util.Arrays .< org.springframework.data.mongodb.core.MongoTemplateTests.Model > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.lang.String ) ) ; org.springframework.data.mongodb.core.Query . addCriteria ( where ( STRING ) . is ( STRING ) ) ; java.lang.String java.lang.String = STRING ; Update org.springframework.data.mongodb.core.Update = Update . update ( STRING , new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( java.lang.String ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection .class ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.lang.String ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( NUMBER ) . java.lang.String ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeThat ( org.springframework.data.util.Version . isGreaterThanOrEqualTo ( org.springframework.data.util.Version ) , is ( true ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection ( java.util.Collections .< org.springframework.data.mongodb.core.MongoTemplateTests.Model > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( ) ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.lang.String ) ) ; assumeThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection .class ) . models , hasSize ( NUMBER ) ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . push ( STRING ) . each ( new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) , new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateMulti ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection .class ) . models , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeThat ( org.springframework.data.util.Version . isGreaterThanOrEqualTo ( org.springframework.data.util.Version ) , is ( true ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType . java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType . java.lang.String ) ) ; assumeThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType .class ) . values , hasSize ( NUMBER ) ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . push ( STRING ) . each ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . updateMulti ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType .class ) . values , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( java.lang.Long . long ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( org.springframework.data.mongodb.core.Query , Update . update ( STRING , STRING ) , org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson .class ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithMultipleCollections org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithMultipleCollections = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithMultipleCollections ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithMultipleCollections . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithMultipleCollections . java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithMultipleCollections . java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithMultipleCollections ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . pushAll ( STRING , new java.lang.Object [] { STRING , STRING } ) ; org.springframework.data.mongodb.core.Update . pushAll ( STRING , new java.lang.String [] { STRING , STRING } ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithMultipleCollections . java.lang.String ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithMultipleCollections .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithMultipleCollections org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithMultipleCollections = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithMultipleCollections .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithMultipleCollections . java.util.List<java.lang.String> , hasItems ( STRING , STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithMultipleCollections . java.util.List<java.lang.String> , hasItems ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> = java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample , org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . pull ( STRING , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> . org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( NUMBER ) ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> . org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( NUMBER ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> . org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( NUMBER ) . java.lang.String , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> = java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample , org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . pull ( STRING , STRING ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> . org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( NUMBER ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> . org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( NUMBER ) . java.lang.String , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson = new org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String , is ( notNullValue ( ) ) ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.Long , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( org.springframework.data.mongodb.core.Query , Update . update ( STRING , STRING ) . set ( STRING , NUMBER ) , org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.Long , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.VersionedPerson . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . org.springframework.data.mongodb.core.MongoTemplateTests.Sample = org.springframework.data.mongodb.core.MongoTemplateTests.Sample ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . set ( STRING , org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . org.springframework.data.mongodb.core.MongoTemplateTests.Sample , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . org.springframework.data.mongodb.core.MongoTemplateTests.Sample . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . org.springframework.data.mongodb.core.MongoTemplateTests.Sample . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection ( java.util.Arrays .< org.springframework.data.mongodb.core.MongoTemplateTests.Model > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) , new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.lang.String ) . and ( STRING ) . exists ( true ) ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . set ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection = org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> . org.springframework.data.mongodb.core.MongoTemplateTests.Model ( NUMBER ) . java.lang.String ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . org.springframework.data.mongodb.core.MongoTemplateTests.Sample = org.springframework.data.mongodb.core.MongoTemplateTests.Sample ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.lang.String ) ) ; org.springframework.data.mongodb.core.Query . fields ( ) . include ( STRING ) ; java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection> < org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection> = org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection> . org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ( NUMBER ) , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection> . org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Sample , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection> . org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ( NUMBER ) . org.springframework.data.mongodb.core.MongoTemplateTests.Sample . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample , org.springframework.data.mongodb.core.MongoTemplateTests.Sample , org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) , org.springframework.data.mongodb.core.MongoTemplateTests.Sample .class ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . in ( STRING , STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> < org.springframework.data.mongodb.core.MongoTemplateTests.Sample > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> = org.springframework.data.mongodb.core.MongoTemplate . findAllAndRemove ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.Sample .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . getDb ( ) . getCollection ( STRING ) . count ( new org . org.bson . org.bson ( STRING , new org . org.bson . org.bson ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . getDb ( ) . getCollection ( STRING ) . count ( new org . org.bson . org.bson ( STRING , STRING ) ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent = new org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate = new org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent = org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate = org.springframework.data.mongodb.core.MongoTemplate . findById ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent = org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . void ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findById ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent .class ) . getText ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent = new org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate = new org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent = org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate = org.springframework.data.mongodb.core.MongoTemplate . findById ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage = new org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent = org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent = org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage = org.springframework.data.mongodb.core.MongoTemplate . findById ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage . java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate .class ) ; org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent = new org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate = new org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent = org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate = org.springframework.data.mongodb.core.MongoTemplate . findById ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate .class ) ; org.springframework.data.mongodb.core.MongoTemplate . remove ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) . java.lang.String ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) , is ( instanceOf ( LazyLoadingProxy .class ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) . java.lang.String ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType . java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType . java.lang.String ) ) ; assumeThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType .class ) . values , hasSize ( NUMBER ) ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . addToSet ( STRING ) . each ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . updateMulti ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSimpleType .class ) . values , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSamples org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSamples = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSamples ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSamples . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> = java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> ( new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( null , STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSamples ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSamples . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSamples .class ) , notNullValue ( ) ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . addToSet ( STRING ) . each ( new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( null , STRING ) , new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( null , STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSamples .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSamples org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSamples = org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSamples .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSamples , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSamples . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSamples . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> . org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( NUMBER ) . java.lang.String , is ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollectionOfSamples . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> . org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( NUMBER ) . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField = new org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField = new org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . in ( STRING , STRING ) ) . with ( new Sort ( Direction . DESC , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField .class ) , contains ( org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField , org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField = new org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField = new org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . in ( STRING , STRING ) ) . with ( new Sort ( Direction . DESC , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . find ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField .class ) , contains ( org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField , org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent = new org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate = new org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent = org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate = org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) . java.lang.String ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) . java.lang.String ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) . java.lang.String ( ) , is ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent = new org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate = new org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent = org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate = org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate = org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate .class ) ; assertNotNull ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) . java.lang.String ( ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeTemplate . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) . java.lang.String ( ) , is ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.bson.Document , STRING ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findAll ( org.springframework.data.mongodb.core.MongoTemplateTests.Document .class , STRING ) , hasSize ( NUMBER ) ) ; org.springframework.data.mongodb.core.MongoTemplate . remove ( org.bson.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findAll ( org.springframework.data.mongodb.core.MongoTemplateTests.Document .class , STRING ) , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Address org.springframework.data.mongodb.core.MongoTemplateTests.Address = new org.springframework.data.mongodb.core.MongoTemplateTests.Address ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Address org.springframework.data.mongodb.core.MongoTemplateTests.Address = new org.springframework.data.mongodb.core.MongoTemplateTests.Address ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . insertAll ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Address> ( org.springframework.data.mongodb.core.MongoTemplateTests.Address , null , org.springframework.data.mongodb.core.MongoTemplateTests.Address ) ) ; java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Address> < org.springframework.data.mongodb.core.MongoTemplateTests.Address > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Address> = org.springframework.data.mongodb.core.MongoTemplate . findAll ( org.springframework.data.mongodb.core.MongoTemplateTests.Address .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Address> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Address> , hasItems ( org.springframework.data.mongodb.core.MongoTemplateTests.Address , org.springframework.data.mongodb.core.MongoTemplateTests.Address ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.core.Person = new Person ( null , STRING ) ; Person org.springframework.data.mongodb.core.Person = new Person ( null , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . insertAll ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.Person , org.springframework.data.mongodb.core.Person ) ) ; java.util.List<org.springframework.data.mongodb.core.Person> < Person > java.util.List<org.springframework.data.mongodb.core.Person> = org.springframework.data.mongodb.core.MongoTemplate . findAll ( Person .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.Person> , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.Person . getId ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.Person . getId ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.core.Person = new Person ( STRING , NUMBER ) ; Person org.springframework.data.mongodb.core.Person = new Person ( STRING , NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insertAll ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.Person , org.springframework.data.mongodb.core.Person ) ) ; Query org.springframework.data.mongodb.core.Query = new Query ( ) ; org.springframework.data.mongodb.core.Query . with ( new Sort ( Direction . ASC , STRING ) ) ; CloseableIterator < Person > org.springframework.data.mongodb.core.CloseableIterator<org.springframework.data.mongodb.core.Person> = org.springframework.data.mongodb.core.MongoTemplate . stream ( org.springframework.data.mongodb.core.Query , Person .class ) ; assertThat ( org.springframework.data.mongodb.core.CloseableIterator<org.springframework.data.mongodb.core.Person> . next ( ) . getAge ( ) , is ( org.springframework.data.mongodb.core.Person . getAge ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.CloseableIterator<org.springframework.data.mongodb.core.Person> . next ( ) . getAge ( ) , is ( org.springframework.data.mongodb.core.Person . getAge ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.core.Person = new Person ( STRING , NUMBER ) ; Person org.springframework.data.mongodb.core.Person = new Person ( STRING , NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insertAll ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.Person , org.springframework.data.mongodb.core.Person ) ) ; Query org.springframework.data.mongodb.core.Query = new Query ( ) ; org.springframework.data.mongodb.core.Query . with ( new PageRequest ( NUMBER , NUMBER , new Sort ( Direction . ASC , STRING ) ) ) ; CloseableIterator < Person > org.springframework.data.mongodb.core.CloseableIterator<org.springframework.data.mongodb.core.Person> = org.springframework.data.mongodb.core.MongoTemplate . stream ( org.springframework.data.mongodb.core.Query , Person .class ) ; assertThat ( org.springframework.data.mongodb.core.CloseableIterator<org.springframework.data.mongodb.core.Person> . next ( ) . getAge ( ) , is ( org.springframework.data.mongodb.core.Person . getAge ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.CloseableIterator<org.springframework.data.mongodb.core.Person> . hasNext ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage = new org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent = new org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent = org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage = org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage = org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent = org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage . org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent . org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage . java.lang.String , is ( org.springframework.data.mongodb.core.MongoTemplateTests.SomeMessage . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Document org.springframework.data.mongodb.core.MongoTemplateTests.Document = new org.springframework.data.mongodb.core.MongoTemplateTests.Document ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Document . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Document ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor ( org.springframework.data.mongodb.core.MongoTemplateTests.Document ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor = org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor . org.springframework.data.mongodb.core.MongoTemplateTests.Document , not ( instanceOf ( LazyLoadingProxy .class ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor . org.springframework.data.mongodb.core.MongoTemplateTests.Document , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Document org.springframework.data.mongodb.core.MongoTemplateTests.Document = new org.springframework.data.mongodb.core.MongoTemplateTests.Document ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Document . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Document ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor ( null ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor . org.springframework.data.mongodb.core.MongoTemplateTests.Document = org.springframework.data.mongodb.core.MongoTemplateTests.Document ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor = org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor . org.springframework.data.mongodb.core.MongoTemplateTests.Document , instanceOf ( LazyLoadingProxy .class ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor . org.springframework.data.mongodb.core.MongoTemplateTests.Document , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Document org.springframework.data.mongodb.core.MongoTemplateTests.Document = new org.springframework.data.mongodb.core.MongoTemplateTests.Document ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Document . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Document ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Document org.springframework.data.mongodb.core.MongoTemplateTests.Document = new org.springframework.data.mongodb.core.MongoTemplateTests.Document ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Document . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Document ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor ( org.springframework.data.mongodb.core.MongoTemplateTests.Document ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor . org.springframework.data.mongodb.core.MongoTemplateTests.Document = org.springframework.data.mongodb.core.MongoTemplateTests.Document ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor = org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor . org.springframework.data.mongodb.core.MongoTemplateTests.Document , not ( instanceOf ( LazyLoadingProxy .class ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithLazyDBrefUsedInPresistenceConstructor . org.springframework.data.mongodb.core.MongoTemplateTests.Document , instanceOf ( LazyLoadingProxy .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.WithGeoJson org.springframework.data.mongodb.core.MongoTemplateTests.WithGeoJson = new org.springframework.data.mongodb.core.MongoTemplateTests.WithGeoJson ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.WithGeoJson . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.WithGeoJson . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.WithGeoJson . org.springframework.data.mongodb.core.GeoJsonPoint = new GeoJsonPoint ( NUMBER , NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.WithGeoJson ) ; org.springframework.data.mongodb.core.MongoTemplateTests.WithGeoJson . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.WithGeoJson ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.WithGeoJson . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.WithGeoJson .class ) . point , is ( equalTo ( org.springframework.data.mongodb.core.MongoTemplateTests.WithGeoJson . org.springframework.data.mongodb.core.GeoJsonPoint ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( java.util.Locale . java.util.Locale ) ; java.util.Calendar . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate = new org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate . java.util.Date = new java.util.Date ( ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate . java.lang.String ) ) , new Update ( ) . min ( STRING , java.util.Calendar . java.util.Date ( ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate = org.springframework.data.mongodb.core.MongoTemplate . find ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate .class ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate . java.util.Date , equalTo ( java.util.Calendar . java.util.Date ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers = new org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Byte = NUMBER ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Double = NUMBER ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Float = NUMBER ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Integer = NUMBER ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Long = NUMBER ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.math.BigInteger = new java.math.BigInteger ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.math.BigDecimal = new java.math.BigDecimal ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers ) ; byte byte = NUMBER ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . min ( STRING , byte ) . min ( STRING , NUMBER ) . min ( STRING , NUMBER ) . min ( STRING , NUMBER ) . min ( STRING , NUMBER ) . min ( STRING , new java.math.BigInteger ( STRING ) ) . min ( STRING , new java.math.BigDecimal ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.String ) ) , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers = org.springframework.data.mongodb.core.MongoTemplate . find ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers .class ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Byte , equalTo ( byte ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Double , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Float , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Integer , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Long , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.math.BigInteger , equalTo ( new java.math.BigInteger ( STRING ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.math.BigDecimal , equalTo ( new java.math.BigDecimal ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( java.util.Locale . java.util.Locale ) ; java.util.Calendar . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate = new org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate . java.util.Date = java.util.Calendar . java.util.Date ( ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate ) ; java.util.Calendar . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate . java.lang.String ) ) , new Update ( ) . max ( STRING , java.util.Calendar . java.util.Date ( ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate = org.springframework.data.mongodb.core.MongoTemplate . find ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate .class ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithDate . java.util.Date , equalTo ( java.util.Calendar . java.util.Date ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers = new org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Byte = NUMBER ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Double = NUMBER ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Float = NUMBER ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Integer = NUMBER ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Long = NUMBER ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.math.BigInteger = new java.math.BigInteger ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.math.BigDecimal = new java.math.BigDecimal ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers ) ; byte byte = NUMBER ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . max ( STRING , byte ) . max ( STRING , NUMBER ) . max ( STRING , NUMBER ) . max ( STRING , NUMBER ) . max ( STRING , NUMBER ) . max ( STRING , new java.math.BigInteger ( STRING ) ) . max ( STRING , new java.math.BigDecimal ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.String ) ) , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers = org.springframework.data.mongodb.core.MongoTemplate . find ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers .class ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Byte , equalTo ( byte ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Double , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Float , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Integer , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.Long , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.math.BigInteger , equalTo ( new java.math.BigInteger ( STRING ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.math.BigDecimal , equalTo ( new java.math.BigDecimal ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers = new org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.math.BigInteger = new java.math.BigInteger ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.math.BigDecimal = new java.math.BigDecimal ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . max ( STRING , new java.math.BigInteger ( STRING ) ) . max ( STRING , new java.math.BigDecimal ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.String ) ) , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers = org.springframework.data.mongodb.core.MongoTemplate . find ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers .class ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.math.BigInteger , equalTo ( new java.math.BigInteger ( STRING ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.math.BigDecimal , equalTo ( new java.math.BigDecimal ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers = new org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.math.BigInteger = new java.math.BigInteger ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.math.BigDecimal = new java.math.BigDecimal ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . min ( STRING , new java.math.BigInteger ( STRING ) ) . min ( STRING , new java.math.BigDecimal ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.String ) ) , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers = org.springframework.data.mongodb.core.MongoTemplate . find ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers .class ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.math.BigInteger , equalTo ( new java.math.BigInteger ( STRING ) ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.TypeWithNumbers . java.math.BigDecimal , equalTo ( new java.math.BigDecimal ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . remove ( new Query ( ) , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . remove ( new Query ( ) , org.springframework.data.mongodb.core.MongoTemplateTests.Document .class ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Document org.springframework.data.mongodb.core.MongoTemplateTests.Document = new org.springframework.data.mongodb.core.MongoTemplateTests.Document ( ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.MongoTemplateTests.Document , STRING ) ; CloseableIterator < org.springframework.data.mongodb.core.MongoTemplateTests.Document > org.springframework.data.mongodb.core.CloseableIterator<org.springframework.data.mongodb.core.MongoTemplateTests.Document> = org.springframework.data.mongodb.core.MongoTemplate . stream ( new Query ( ) , org.springframework.data.mongodb.core.MongoTemplateTests.Document .class ) ; assertThat ( org.springframework.data.mongodb.core.CloseableIterator<org.springframework.data.mongodb.core.MongoTemplateTests.Document> . hasNext ( ) , is ( false ) ) ; org.springframework.data.mongodb.core.CloseableIterator<org.springframework.data.mongodb.core.MongoTemplateTests.Document> = org.springframework.data.mongodb.core.MongoTemplate . stream ( new Query ( ) , org.springframework.data.mongodb.core.MongoTemplateTests.Document .class , STRING ) ; assertThat ( org.springframework.data.mongodb.core.CloseableIterator<org.springframework.data.mongodb.core.MongoTemplateTests.Document> . hasNext ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.CloseableIterator<org.springframework.data.mongodb.core.MongoTemplateTests.Document> . next ( ) . id , is ( org.springframework.data.mongodb.core.MongoTemplateTests.Document . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.CloseableIterator<org.springframework.data.mongodb.core.MongoTemplateTests.Document> . hasNext ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> = java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample , org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection .class ) , is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> = java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample , org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection = org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> , instanceOf ( LazyLoadingProxy .class ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . getLazyDbRefAnnotatedList ( ) , contains ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample , org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Sample org.springframework.data.mongodb.core.MongoTemplateTests.Sample = new org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Sample> = new java.util.LinkedHashMap<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Sample> < java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.Sample > ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Sample> . org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Sample> . org.springframework.data.mongodb.core.MongoTemplateTests.Sample ( STRING , org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection = org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Sample> , instanceOf ( LazyLoadingProxy .class ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithDBRefCollection . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.MongoTemplateTests.Sample> . java.util.Collection<org.springframework.data.mongodb.core.MongoTemplateTests.Sample> ( ) , contains ( org.springframework.data.mongodb.core.MongoTemplateTests.Sample , org.springframework.data.mongodb.core.MongoTemplateTests.Sample ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext public void void ( ) { org.springframework.data.mongodb.core.ConfigurableApplicationContext . addApplicationListener ( new AbstractMongoEventListener < org.springframework.data.mongodb.core.MongoTemplateTests.Document > ( ) { @ java.lang.Override public void void ( BeforeSaveEvent < org.springframework.data.mongodb.core.MongoTemplateTests.Document > org.springframework.data.mongodb.core.BeforeSaveEvent<org.springframework.data.mongodb.core.MongoTemplateTests.Document> ) { org.springframework.data.mongodb.core.BeforeSaveEvent<org.springframework.data.mongodb.core.MongoTemplateTests.Document> . getDocument ( ) . put ( STRING , java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ) ; } } ) ; org.springframework.data.mongodb.core.MongoTemplateTests.Document org.springframework.data.mongodb.core.MongoTemplateTests.Document = new org.springframework.data.mongodb.core.MongoTemplateTests.Document ( ) ; org.springframework.data.mongodb.core.MongoTemplate . insertAll ( java.util.Collections . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Document> ( org.springframework.data.mongodb.core.MongoTemplateTests.Document ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.Document . java.lang.String , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeforeSaveEvent < org.springframework.data.mongodb.core.MongoTemplateTests.Document > org.springframework.data.mongodb.core.BeforeSaveEvent<org.springframework.data.mongodb.core.MongoTemplateTests.Document> ) { org.springframework.data.mongodb.core.BeforeSaveEvent<org.springframework.data.mongodb.core.MongoTemplateTests.Document> . getDocument ( ) . put ( STRING , java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> < org.springframework.data.mongodb.core.MongoTemplateTests.Model > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> = java.util.Collections . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ( new org.springframework.data.mongodb.core.MongoTemplateTests.ModelA ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection = new org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection .class ) , is ( equalTo ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.IllegalAccessException , java.lang.reflect.InvocationTargetException , java.lang.InstantiationException { assumeThat ( org.springframework.data.util.Version . isGreaterThanOrEqualTo ( org.springframework.data.util.Version ) , is ( true ) ) ; assumeThat ( MongoClientVersion . isMongo34Driver ( ) , is ( true ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . resolveClassName ( STRING , null ) ; org.springframework.data.mongodb.core.MongoTemplateTests.WithObjectTypeProperty org.springframework.data.mongodb.core.MongoTemplateTests.WithObjectTypeProperty = new org.springframework.data.mongodb.core.MongoTemplateTests.WithObjectTypeProperty ( ) ; org.springframework.data.mongodb.core.MongoTemplateTests.WithObjectTypeProperty . java.lang.String = STRING ; org.springframework.data.mongodb.core.MongoTemplateTests.WithObjectTypeProperty . java.lang.Object = java.lang.Class<> . java.lang.reflect.Constructor<> ( java.math.BigDecimal .class ) . newInstance ( new java.math.BigDecimal ( NUMBER ) ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateTests.WithObjectTypeProperty ) ; org.springframework.data.mongodb.core.MongoTemplateTests.WithObjectTypeProperty org.springframework.data.mongodb.core.MongoTemplateTests.WithObjectTypeProperty = org.springframework.data.mongodb.core.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.MongoTemplateTests.WithObjectTypeProperty . java.lang.String ) ) , org.springframework.data.mongodb.core.MongoTemplateTests.WithObjectTypeProperty .class ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateTests.WithObjectTypeProperty . getValue ( ) , instanceOf ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { final int int = NUMBER ; int int = NUMBER ; int = int * int + ( java.lang.String == null ? NUMBER : java.lang.String . int ( ) ) ; int = int * int + ( java.lang.String == null ? NUMBER : java.lang.String . int ( ) ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( ! ( java.lang.Object instanceof org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField ) ) { return false ; } org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField = ( org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField ) java.lang.Object ; if ( java.lang.String == null ) { if ( org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField . java.lang.String != null ) { return false ; } } else if ( ! java.lang.String . boolean ( org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField . java.lang.String ) ) { return false ; } if ( java.lang.String == null ) { if ( org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField . java.lang.String != null ) { return false ; } } else if ( ! java.lang.String . boolean ( org.springframework.data.mongodb.core.MongoTemplateTests.DoucmentWithNamedIdField . java.lang.String ) ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> void ( java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> < org.springframework.data.mongodb.core.MongoTemplateTests.Model > java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ) { this . java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> = java.util.List<org.springframework.data.mongodb.core.MongoTemplateTests.Model> ; }  <METHOD_END>
<METHOD_START> void ( org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection ) { this . org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection = org.springframework.data.mongodb.core.MongoTemplateTests.DocumentWithCollection ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ PersistenceConstructor void ( DateTime org.springframework.data.mongodb.core.DateTime ) { this . org.springframework.data.mongodb.core.DateTime = org.springframework.data.mongodb.core.DateTime ; }  <METHOD_END>
<METHOD_START> public java.util.Date java.util.Date ( DateTime org.springframework.data.mongodb.core.DateTime ) { return org.springframework.data.mongodb.core.DateTime == null ? null : org.springframework.data.mongodb.core.DateTime . toDate ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.DateTime org.springframework.data.mongodb.core.DateTime ( java.util.Date java.util.Date ) { return java.util.Date == null ? null : new DateTime ( java.util.Date . long ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( ) {}  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == this ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.data.mongodb.core.MongoTemplateTests.Address ) ) { return false ; } org.springframework.data.mongodb.core.MongoTemplateTests.Address org.springframework.data.mongodb.core.MongoTemplateTests.Address = ( org.springframework.data.mongodb.core.MongoTemplateTests.Address ) java.lang.Object ; return ObjectUtils . nullSafeEquals ( this . java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.Address . java.lang.String ) && ObjectUtils . nullSafeEquals ( this . java.lang.String , org.springframework.data.mongodb.core.MongoTemplateTests.Address . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = NUMBER ; int += NUMBER * ObjectUtils . nullSafeHashCode ( this . java.lang.String ) ; int += NUMBER * ObjectUtils . nullSafeHashCode ( this . java.lang.String ) ; return int ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ( ) { return org.springframework.data.mongodb.core.MongoTemplateTests.SomeContent ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ PersistenceConstructor public void ( org.springframework.data.mongodb.core.MongoTemplateTests.Document org.springframework.data.mongodb.core.MongoTemplateTests.Document ) { this . org.springframework.data.mongodb.core.MongoTemplateTests.Document = org.springframework.data.mongodb.core.MongoTemplateTests.Document ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeforeConvertEvent < PersonWithIdPropertyOfTypeUUID > org.springframework.data.mongodb.core.BeforeConvertEvent<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID> ) { PersonWithIdPropertyOfTypeUUID org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID = org.springframework.data.mongodb.core.BeforeConvertEvent<org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID> . getSource ( ) ; if ( org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID . getId ( ) != null ) { return; } org.springframework.data.mongodb.core.PersonWithIdPropertyOfTypeUUID . setId ( java.util.UUID . java.util.UUID ( ) ) ; }  <METHOD_END>
