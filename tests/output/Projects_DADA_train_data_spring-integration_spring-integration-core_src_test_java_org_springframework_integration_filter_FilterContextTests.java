<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.filter.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.filter.Message<?> = this . org.springframework.integration.filter.PollableChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.filter.Message<> ) ; assertTrue ( this . org.springframework.integration.filter.TestBean . isRunning ( ) ) ; this . org.springframework.integration.filter.AbstractEndpoint . stop ( ) ; assertFalse ( this . org.springframework.integration.filter.TestBean . isRunning ( ) ) ; this . org.springframework.integration.filter.AbstractEndpoint . start ( ) ; assertTrue ( this . org.springframework.integration.filter.TestBean . isRunning ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.filter.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.filter.Message<?> = this . org.springframework.integration.filter.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.filter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
