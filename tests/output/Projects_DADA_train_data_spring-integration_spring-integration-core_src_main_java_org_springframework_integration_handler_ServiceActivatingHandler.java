<METHOD_START> public void ( final java.lang.Object java.lang.Object ) { this( new MethodInvokingMessageProcessor < java.lang.Object > ( java.lang.Object , ServiceActivator .class ) ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { this( new MethodInvokingMessageProcessor < java.lang.Object > ( java.lang.Object , java.lang.reflect.Method ) ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { this( new MethodInvokingMessageProcessor < java.lang.Object > ( java.lang.Object , java.lang.String ) ); }  <METHOD_END>
<METHOD_START> public < T > void ( MessageProcessor < T > org.springframework.integration.handler.MessageProcessor<T> ) { this . org.springframework.integration.handler.MessageProcessor<?> = org.springframework.integration.handler.MessageProcessor<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . org.springframework.integration.handler.MessageProcessor<> instanceof AbstractMessageProcessor ) { ConversionService org.springframework.integration.handler.ConversionService = getConversionService ( ) ; if ( org.springframework.integration.handler.ConversionService != null ) { ( ( AbstractMessageProcessor < ? > ) this . org.springframework.integration.handler.MessageProcessor<> ) . setConversionService ( org.springframework.integration.handler.ConversionService ) ; } } if ( this . org.springframework.integration.handler.MessageProcessor<> instanceof BeanFactoryAware && this . getBeanFactory ( ) != null ) { ( ( BeanFactoryAware ) this . org.springframework.integration.handler.MessageProcessor<> ) . setBeanFactory ( this . getBeanFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.handler.MessageProcessor<> instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.handler.MessageProcessor<> ) . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.handler.MessageProcessor<> instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.handler.MessageProcessor<> ) . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! ( this . org.springframework.integration.handler.MessageProcessor<> instanceof Lifecycle ) || ( ( Lifecycle ) this . org.springframework.integration.handler.MessageProcessor<> ) . isRunning ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.handler.Message<?> ) { return this . org.springframework.integration.handler.MessageProcessor<> . processMessage ( org.springframework.integration.handler.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . org.springframework.integration.handler.MessageProcessor<> + STRING + ( this . getComponentName ( ) == null ? STRING : STRING + this . getComponentName ( ) + STRING ) ; }  <METHOD_END>
