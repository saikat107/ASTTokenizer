<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMvc org.springframework.boot.autoconfigure.h2.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.autoconfigure.h2.WebApplicationContext ) . apply ( springSecurity ( ) ) . build ( ) ; org.springframework.boot.autoconfigure.h2.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMvc org.springframework.boot.autoconfigure.h2.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.autoconfigure.h2.WebApplicationContext ) . apply ( springSecurity ( ) ) . build ( ) ; org.springframework.boot.autoconfigure.h2.MockMvc . perform ( get ( STRING ) . with ( user ( STRING ) . roles ( STRING ) ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . string ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMvc org.springframework.boot.autoconfigure.h2.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.autoconfigure.h2.WebApplicationContext ) . apply ( springSecurity ( ) ) . build ( ) ; org.springframework.boot.autoconfigure.h2.MockMvc . perform ( get ( STRING ) . with ( user ( STRING ) . roles ( STRING ) ) ) . andExpect ( status ( ) . isForbidden ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( ) {		}  <METHOD_END>
