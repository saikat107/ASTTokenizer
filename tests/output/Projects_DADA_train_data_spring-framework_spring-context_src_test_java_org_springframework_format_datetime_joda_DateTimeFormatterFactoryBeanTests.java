<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean . isSingleton ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean . getObjectType ( ) , is ( equalTo ( ( java.lang.Class ) DateTimeFormatter .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean . getObject ( ) , is ( equalTo ( DateTimeFormat . mediumDateTime ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean . afterPropertiesSet ( ) ; DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter = org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean . getObject ( ) ; assertThat ( org.springframework.format.datetime.joda.DateTimeFormatter , is ( equalTo ( DateTimeFormat . mediumDateTime ( ) ) ) ) ; org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean . setStyle ( STRING ) ; assertThat ( org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean . getObject ( ) , is ( sameInstance ( org.springframework.format.datetime.joda.DateTimeFormatter ) ) ) ; }  <METHOD_END>
