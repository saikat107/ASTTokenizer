<METHOD_START> @ Test public void void ( ) { assertNull ( getMetaAnnotationTypes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.NonAnnotatedClass .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponent .class ) ) ; assertNull ( getMetaAnnotationTypes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.NonAnnotatedClass .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponent .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = getMetaAnnotationTypes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponentClass .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponent .class ) ; assertEquals ( java.util.Set<java.lang.String> ( org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional .class , Component .class , Indexed .class ) , java.util.Set<java.lang.String> ) ; java.util.Set<java.lang.String> = getMetaAnnotationTypes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponentClass .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponent .class . java.lang.String ( ) ) ; assertEquals ( java.util.Set<java.lang.String> ( org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional .class , Component .class , Indexed .class ) , java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = getMetaAnnotationTypes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.ComposedTransactionalComponentClass .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.ComposedTransactionalComponent .class ) ; assertEquals ( java.util.Set<java.lang.String> ( org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponent .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional .class , Component .class , Indexed .class ) , java.util.Set<java.lang.String> ) ; java.util.Set<java.lang.String> = getMetaAnnotationTypes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.ComposedTransactionalComponentClass .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.ComposedTransactionalComponent .class . java.lang.String ( ) ) ; assertEquals ( java.util.Set<java.lang.String> ( org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponent .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional .class , Component .class , Indexed .class ) , java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return java.util.stream.Stream<java.lang.Class<?>> ( java.lang.Class<?>[] ) . java.util.stream.Stream<java.lang.String> ( java.lang.Class :: java.lang.String ) . java.util.Set<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.Set<java.lang.String>> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( hasMetaAnnotationTypes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.NonAnnotatedClass .class , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( hasMetaAnnotationTypes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponentClass .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponent .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( hasMetaAnnotationTypes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponentClass .class , java.lang.String ) ) ; assertTrue ( hasMetaAnnotationTypes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponentClass .class , Component .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( hasMetaAnnotationTypes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.ComposedTransactionalComponentClass .class , java.lang.String ) ) ; assertTrue ( hasMetaAnnotationTypes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.ComposedTransactionalComponentClass .class , Component .class . java.lang.String ( ) ) ) ; assertFalse ( hasMetaAnnotationTypes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.ComposedTransactionalComponentClass .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.ComposedTransactionalComponent .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( isAnnotated ( org.springframework.core.annotation.AnnotatedElementUtilsTests.NonAnnotatedClass .class , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( isAnnotated ( org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponentClass .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponent .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( STRING , isAnnotated ( org.springframework.core.annotation.AnnotatedElementUtilsTests.SubTransactionalComponentClass .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponent .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( isAnnotated ( org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponentClass .class , java.lang.String ) ) ; assertTrue ( isAnnotated ( org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalComponentClass .class , Component .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( isAnnotated ( org.springframework.core.annotation.AnnotatedElementUtilsTests.ComposedTransactionalComponentClass .class , java.lang.String ) ) ; assertTrue ( isAnnotated ( org.springframework.core.annotation.AnnotatedElementUtilsTests.ComposedTransactionalComponentClass .class , Component .class . java.lang.String ( ) ) ) ; assertTrue ( isAnnotated ( org.springframework.core.annotation.AnnotatedElementUtilsTests.ComposedTransactionalComponentClass .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.ComposedTransactionalComponent .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( getAllAnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.NonAnnotatedClass .class , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> = getAllAnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.TxConfig .class , java.lang.String ) ; assertNotNull ( STRING , org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> ) ; assertEquals ( STRING , java.util.List<java.lang.String> ( STRING ) , org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> = getAllAnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.SubClassWithInheritedAnnotation .class , java.lang.String ) ; assertNotNull ( STRING , org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> ) ; assertEquals ( java.util.List<java.lang.String> ( STRING , STRING ) , org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> = getAllAnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.SubSubClassWithInheritedAnnotation .class , java.lang.String ) ; assertNotNull ( STRING , org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> ) ; assertEquals ( java.util.List<java.lang.String> ( STRING ) , org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> = getAllAnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.SubSubClassWithInheritedComposedAnnotation .class , java.lang.String ) ; assertNotNull ( STRING , org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> ) ; assertEquals ( java.util.List<java.lang.String> ( STRING ) , org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> = getAllAnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.DerivedTxConfig .class , java.lang.String ) ; assertNotNull ( STRING , org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> ) ; assertEquals ( STRING , java.util.List<java.lang.String> ( STRING ) , org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> = getAllAnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.TxFromMultipleComposedAnnotations .class , java.lang.String ) ; assertNotNull ( STRING , org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> ) ; assertEquals ( STRING , java.util.List<java.lang.String> ( STRING , STRING ) , org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.TxConfig .class ; java.lang.String java.lang.String = java.lang.String ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getMergedAnnotationAttributes ( java.lang.Class<> , java.lang.String ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationAttributes . getString ( STRING ) ) ; assertTrue ( isAnnotated ( java.lang.Class<> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.DerivedTxConfig .class ; java.lang.String java.lang.String = java.lang.String ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getMergedAnnotationAttributes ( java.lang.Class<> , java.lang.String ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationAttributes . getString ( STRING ) ) ; assertTrue ( isAnnotated ( java.lang.Class<> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getMergedAnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.MetaCycleAnnotatedClass .class , java.lang.String ) ; assertNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.SubClassWithInheritedAnnotation .class ; java.lang.String java.lang.String = java.lang.String ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getMergedAnnotationAttributes ( java.lang.Class<> , java.lang.String ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; assertTrue ( isAnnotated ( java.lang.Class<> , java.lang.String ) ) ; assertTrue ( STRING , org.springframework.core.annotation.AnnotationAttributes . getBoolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.SubSubClassWithInheritedAnnotation .class ; java.lang.String java.lang.String = java.lang.String ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getMergedAnnotationAttributes ( java.lang.Class<> , java.lang.String ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; assertTrue ( isAnnotated ( java.lang.Class<> , java.lang.String ) ) ; assertFalse ( STRING , org.springframework.core.annotation.AnnotationAttributes . getBoolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.SubSubClassWithInheritedComposedAnnotation .class ; java.lang.String java.lang.String = java.lang.String ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getMergedAnnotationAttributes ( java.lang.Class<> , java.lang.String ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; assertTrue ( isAnnotated ( java.lang.Class<> , java.lang.String ) ) ; assertFalse ( STRING , org.springframework.core.annotation.AnnotationAttributes . getBoolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.ConcreteClassWithInheritedAnnotation .class ; java.lang.String java.lang.String = java.lang.String ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getMergedAnnotationAttributes ( java.lang.Class<> , java.lang.String ) ; assertNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; assertFalse ( isAnnotated ( java.lang.Class<> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.InheritedAnnotationInterface .class ; java.lang.String java.lang.String = java.lang.String ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getMergedAnnotationAttributes ( java.lang.Class<> , java.lang.String ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; assertTrue ( isAnnotated ( java.lang.Class<> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.NonInheritedAnnotationInterface .class ; java.lang.String java.lang.String = Order .class . java.lang.String ( ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getMergedAnnotationAttributes ( java.lang.Class<> , java.lang.String ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; assertTrue ( isAnnotated ( java.lang.Class<> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.ConventionBasedComposedContextConfigClass .class ; java.lang.String java.lang.String = org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig .class . java.lang.String ( ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getMergedAnnotationAttributes ( java.lang.Class<> , java.lang.String ) ; assertNotNull ( STRING + java.lang.Class<> . java.lang.String ( ) , org.springframework.core.annotation.AnnotationAttributes ) ; assertArrayEquals ( STRING , asArray ( STRING ) , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; assertArrayEquals ( STRING , asArray ( STRING ) , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; assertTrue ( isAnnotated ( java.lang.Class<> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Ignore ( STRING ) @ Test public void void ( ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.List<java.lang.Class<? extends java.lang.Object>> ( org.springframework.core.annotation.AnnotatedElementUtilsTests.HalfConventionBasedAndHalfAliasedComposedContextConfigClassV1 .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.HalfConventionBasedAndHalfAliasedComposedContextConfigClassV2 .class ) ) { void ( java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.String [] java.lang.String[] = asArray ( STRING ) ; java.lang.String java.lang.String = org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig .class . java.lang.String ( ) ; java.lang.String java.lang.String = java.lang.Class<> . java.lang.String ( ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getMergedAnnotationAttributes ( java.lang.Class<> , java.lang.String ) ; assertNotNull ( STRING + java.lang.String , org.springframework.core.annotation.AnnotationAttributes ) ; assertArrayEquals ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING , java.lang.String[] , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; assertArrayEquals ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING , java.lang.String[] , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; assertTrue ( isAnnotated ( java.lang.Class<> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedComposedContextConfigClass .class ; java.lang.String java.lang.String = org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig .class . java.lang.String ( ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getMergedAnnotationAttributes ( java.lang.Class<> , java.lang.String ) ; assertNotNull ( STRING + java.lang.Class<> . java.lang.String ( ) , org.springframework.core.annotation.AnnotationAttributes ) ; assertArrayEquals ( STRING , asArray ( STRING ) , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; assertArrayEquals ( STRING , asArray ( STRING ) , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; assertTrue ( isAnnotated ( java.lang.Class<> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedValueComposedContextConfigClass .class ; java.lang.String java.lang.String = org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig .class . java.lang.String ( ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getMergedAnnotationAttributes ( java.lang.Class<> , java.lang.String ) ; assertNotNull ( STRING + java.lang.Class<> . java.lang.String ( ) , org.springframework.core.annotation.AnnotationAttributes ) ; assertArrayEquals ( STRING , asArray ( STRING ) , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; assertArrayEquals ( STRING , asArray ( STRING ) , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; assertTrue ( isAnnotated ( java.lang.Class<> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.ComposedImplicitAliasesContextConfigClass .class ; java.lang.String java.lang.String = org.springframework.core.annotation.AnnotatedElementUtilsTests.ImplicitAliasesContextConfig .class . java.lang.String ( ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getMergedAnnotationAttributes ( java.lang.Class<> , java.lang.String ) ; java.lang.String [] java.lang.String[] = asArray ( STRING , STRING ) ; assertNotNull ( STRING + java.lang.Class<> . java.lang.String ( ) , org.springframework.core.annotation.AnnotationAttributes ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; assertTrue ( isAnnotated ( java.lang.Class<> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedValueComposedContextConfigClass .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.core.annotation.AnnotatedElementUtilsTests.ImplicitAliasesContextConfigClass1 .class , STRING ) ; void ( org.springframework.core.annotation.AnnotatedElementUtilsTests.ImplicitAliasesContextConfigClass2 .class , STRING ) ; void ( org.springframework.core.annotation.AnnotatedElementUtilsTests.ImplicitAliasesContextConfigClass3 .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.core.annotation.AnnotatedElementUtilsTests.TransitiveImplicitAliasesContextConfigClass .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.core.annotation.AnnotatedElementUtilsTests.SingleLocationTransitiveImplicitAliasesContextConfigClass .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.core.annotation.AnnotatedElementUtilsTests.TransitiveImplicitAliasesWithSkippedLevelContextConfigClass .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.core.annotation.AnnotatedElementUtilsTests.SingleLocationTransitiveImplicitAliasesWithSkippedLevelContextConfigClass .class , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { java.lang.String java.lang.String = org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig .class . java.lang.String ( ) ; org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig = getMergedAnnotation ( java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig .class ) ; assertNotNull ( STRING + java.lang.Class<> . java.lang.String ( ) , org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig . java.lang.String[] ( ) ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig . java.lang.String[] ( ) ) ; assertArrayEquals ( STRING , new java.lang.Class<?> < ? > [ NUMBER ] , org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig . java.lang.Class<?>[] ( ) ) ; assertTrue ( isAnnotated ( java.lang.Class<> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.ComposedImplicitAliasesContextConfigClass .class ; java.lang.String java.lang.String = org.springframework.core.annotation.AnnotatedElementUtilsTests.ImplicitAliasesContextConfig .class . java.lang.String ( ) ; org.springframework.core.annotation.AnnotatedElementUtilsTests.ImplicitAliasesContextConfig org.springframework.core.annotation.AnnotatedElementUtilsTests.ImplicitAliasesContextConfig = getMergedAnnotation ( java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtilsTests.ImplicitAliasesContextConfig .class ) ; java.lang.String [] java.lang.String[] = asArray ( STRING , STRING ) ; assertNotNull ( STRING + java.lang.Class<> . java.lang.String ( ) , org.springframework.core.annotation.AnnotatedElementUtilsTests.ImplicitAliasesContextConfig ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotatedElementUtilsTests.ImplicitAliasesContextConfig . java.lang.String[] ( ) ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotatedElementUtilsTests.ImplicitAliasesContextConfig . java.lang.String[] ( ) ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotatedElementUtilsTests.ImplicitAliasesContextConfig . java.lang.String[] ( ) ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotatedElementUtilsTests.ImplicitAliasesContextConfig . java.lang.String[] ( ) ) ; assertTrue ( isAnnotated ( java.lang.Class<> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.InvalidConventionBasedComposedContextConfigClass .class ; org.springframework.core.annotation.ExpectedException . expect ( AnnotationConfigurationException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( either ( containsString ( STRING ) ) . or ( containsString ( STRING ) ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( either ( containsString ( STRING ) ) . or ( containsString ( STRING ) ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; getMergedAnnotationAttributes ( java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.ShadowedAliasComposedContextConfigClass .class ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getMergedAnnotationAttributes ( java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig .class ) ; java.lang.String [] java.lang.String[] = asArray ( STRING ) ; assertNotNull ( STRING + java.lang.Class<> . java.lang.String ( ) , org.springframework.core.annotation.AnnotationAttributes ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.InheritedAnnotationInterface .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.SubInheritedAnnotationInterface .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.SubSubInheritedAnnotationInterface .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.NonInheritedAnnotationInterface .class , Order .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.SubNonInheritedAnnotationInterface .class , Order .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.SubSubNonInheritedAnnotationInterface .class , Order .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotatedElementUtilsTests.ConcreteClassWithInheritedAnnotation .class . java.lang.reflect.Method ( STRING ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.Method , Order .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotatedElementUtilsTests.ConcreteClassWithInheritedAnnotation .class . java.lang.reflect.Method ( STRING ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotatedElementUtilsTests.ConcreteClassWithInheritedAnnotation .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional .class ) ; assertNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { java.lang.reflect.Method [] java.lang.reflect.Method[] = org.springframework.core.annotation.AnnotatedElementUtilsTests.StringGenericParameter .class . java.lang.reflect.Method[] ( ) ; java.lang.reflect.Method java.lang.reflect.Method = null ; java.lang.reflect.Method java.lang.reflect.Method = null ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { if ( STRING . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) && ! java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] . boolean ( java.lang.Integer .class ) ) { if ( java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( java.lang.Object .class ) ) { java.lang.reflect.Method = java.lang.reflect.Method ; } else { java.lang.reflect.Method = java.lang.reflect.Method ; } } } assertTrue ( java.lang.reflect.Method != null && java.lang.reflect.Method . boolean ( ) ) ; assertTrue ( java.lang.reflect.Method != null && ! java.lang.reflect.Method . boolean ( ) ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.Method , Order .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.MetaAndLocalTxConfigClass .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationAttributes . getString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedTransactionalComponentClass .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedTransactional .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedTransactional org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedTransactional = AnnotationUtils . synthesizeAnnotation ( org.springframework.core.annotation.AnnotationAttributes , org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedTransactional .class , org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedTransactionalComponentClass .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedTransactional ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotationAttributes . getString ( STRING ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedTransactional . java.lang.String ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotationAttributes . getString ( STRING ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedTransactional . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.TestComponentScanClass .class , STRING ) ; org.springframework.core.annotation.AnnotatedElementUtilsTests.Filter [] org.springframework.core.annotation.AnnotatedElementUtilsTests.Filter[] = org.springframework.core.annotation.AnnotationAttributes . getAnnotationArray ( STRING , org.springframework.core.annotation.AnnotatedElementUtilsTests.Filter .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotatedElementUtilsTests.Filter[] ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.stream.Stream<org.springframework.core.annotation.AnnotatedElementUtilsTests.Filter> ( org.springframework.core.annotation.AnnotatedElementUtilsTests.Filter[] ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotatedElementUtilsTests.Filter :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertEquals ( java.util.List<java.lang.String> ( STRING , STRING ) , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.annotation.AnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.ComponentScanWithBasePackagesAndValueAliasClass .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.annotation.AnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.ConventionBasedSinglePackageComponentScanClass .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.annotation.AnnotationAttributes ( org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasForBasedSinglePackageComponentScanClass .class , STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.core.annotation.AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtilsTests.ComponentScan .class ) ; assertNotNull ( STRING + java.lang.Class<> , org.springframework.core.annotation.AnnotationAttributes ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; return org.springframework.core.annotation.AnnotationAttributes ; }  <METHOD_END>
<METHOD_START> private org.springframework.core.annotation.AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return AnnotatedElementUtils . findMergedAnnotationAttributes ( java.lang.reflect.AnnotatedElement , java.lang.Class<> . java.lang.String ( ) , false , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedTransactionalComponentClass .class ; org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedTransactional org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedTransactional = findMergedAnnotation ( java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedTransactional .class ) ; assertNotNull ( STRING + java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedTransactional ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedTransactional . java.lang.String ( ) ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedTransactional . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = asArray ( STRING ) ; java.lang.String [] java.lang.String[] = asArray ( STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.AliasedComposedContextConfigAndTestPropSourceClass .class ; org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig = findMergedAnnotation ( java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig .class ) ; assertNotNull ( STRING + java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig . java.lang.String[] ( ) ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig . java.lang.String[] ( ) ) ; org.springframework.core.annotation.AnnotatedElementUtilsTests.TestPropSource org.springframework.core.annotation.AnnotatedElementUtilsTests.TestPropSource = AnnotationUtils . findAnnotation ( java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtilsTests.TestPropSource .class ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotatedElementUtilsTests.TestPropSource . java.lang.String[] ( ) ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotatedElementUtilsTests.TestPropSource . java.lang.String[] ( ) ) ; org.springframework.core.annotation.AnnotatedElementUtilsTests.TestPropSource = findMergedAnnotation ( java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtilsTests.TestPropSource .class ) ; assertNotNull ( STRING + java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtilsTests.TestPropSource ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotatedElementUtilsTests.TestPropSource . java.lang.String[] ( ) ) ; assertArrayEquals ( STRING , java.lang.String[] , org.springframework.core.annotation.AnnotatedElementUtilsTests.TestPropSource . java.lang.String[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.String [] java.lang.String[] = new java.lang.String [ NUMBER ] ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotatedElementUtilsTests.SpringAppConfigClass .class ; org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig = findMergedAnnotation ( java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig .class ) ; assertNotNull ( STRING + java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig ) ; assertArrayEquals ( STRING + java.lang.Class<> , java.lang.String[] , org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig . java.lang.String[] ( ) ) ; assertArrayEquals ( STRING + java.lang.Class<> , java.lang.String[] , org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig . java.lang.String[] ( ) ) ; assertArrayEquals ( STRING + java.lang.Class<> , new java.lang.Class<?> < ? > [] { java.lang.Number .class } , org.springframework.core.annotation.AnnotatedElementUtilsTests.ContextConfig . java.lang.Class<?>[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( WebController .class . java.lang.reflect.Method ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( WebController .class . java.lang.reflect.Method ( STRING ) ) ; void ( WebController .class . java.lang.reflect.Method ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ) throws org.springframework.core.annotation.ArrayComparisonFailure { WebMapping org.springframework.core.annotation.WebMapping = findMergedAnnotation ( java.lang.reflect.AnnotatedElement , WebMapping .class ) ; assertNotNull ( org.springframework.core.annotation.WebMapping ) ; assertArrayEquals ( STRING , asArray ( STRING ) , org.springframework.core.annotation.WebMapping . value ( ) ) ; assertArrayEquals ( STRING , asArray ( STRING ) , org.springframework.core.annotation.WebMapping . path ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = java.util.Date .class . java.lang.reflect.Constructor<java.util.Date> ( java.lang.String .class ) ; assertEquals ( java.lang.reflect.Constructor<> . java.lang.Deprecated ( java.lang.Deprecated .class ) , findMergedAnnotation ( java.lang.reflect.Constructor<> , java.lang.Deprecated .class ) ) ; assertEquals ( java.util.Date .class . java.lang.Deprecated ( java.lang.Deprecated .class ) , findMergedAnnotation ( java.util.Date .class , java.lang.Deprecated .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( org.springframework.core.annotation.AnnotatedElementUtilsTests.ResourceHolder .class . javax.annotation.Resource ( javax.annotation.Resource .class ) , findMergedAnnotation ( org.springframework.core.annotation.AnnotatedElementUtilsTests.ResourceHolder .class , javax.annotation.Resource .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotatedElementUtilsTests.SpringAppConfigClass .class . javax.annotation.Resource ( javax.annotation.Resource .class ) , findMergedAnnotation ( org.springframework.core.annotation.AnnotatedElementUtilsTests.SpringAppConfigClass .class , javax.annotation.Resource .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalServiceImpl .class . java.lang.reflect.Method ( STRING ) ; java.util.Set<org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional> < org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional > java.util.Set<org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional> = getAllMergedAnnotations ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional .class ) ; assertTrue ( java.util.Set<org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional> . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotatedElementUtilsTests.TransactionalServiceImpl .class . java.lang.reflect.Method ( STRING ) ; java.util.Set<org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional> < org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional > java.util.Set<org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional> = findAllMergedAnnotations ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional .class ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Order void void ( )  <METHOD_END>
<METHOD_START> @ org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional public abstract void void ( )  <METHOD_END>
<METHOD_START> @ org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional public void void ( T T ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> T T ( java.lang.Class<T> < T > java.lang.Class<T> );  <METHOD_END>
<METHOD_START> @ Order @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Class<java.lang.String> < java.lang.String > java.lang.Class<java.lang.String> ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ org.springframework.core.annotation.AnnotatedElementUtilsTests.Transactional void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
