<METHOD_START> public void ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { this( org.springframework.context.annotation.BeanDefinitionRegistry , org.springframework.context.annotation.Environment ( org.springframework.context.annotation.BeanDefinitionRegistry ) ); }  <METHOD_END>
<METHOD_START> public void ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry , Environment org.springframework.context.annotation.Environment ) { Assert . notNull ( org.springframework.context.annotation.BeanDefinitionRegistry , STRING ) ; Assert . notNull ( org.springframework.context.annotation.Environment , STRING ) ; this . org.springframework.context.annotation.BeanDefinitionRegistry = org.springframework.context.annotation.BeanDefinitionRegistry ; this . org.springframework.context.annotation.ConditionEvaluator = new ConditionEvaluator ( org.springframework.context.annotation.BeanDefinitionRegistry , org.springframework.context.annotation.Environment , null ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( this . org.springframework.context.annotation.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> public final org.springframework.context.annotation.BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ( ) { return this . org.springframework.context.annotation.BeanDefinitionRegistry ; }  <METHOD_END>
<METHOD_START> public void void ( Environment org.springframework.context.annotation.Environment ) { this . org.springframework.context.annotation.ConditionEvaluator = new ConditionEvaluator ( this . org.springframework.context.annotation.BeanDefinitionRegistry , org.springframework.context.annotation.Environment , null ) ; }  <METHOD_END>
<METHOD_START> public void void ( BeanNameGenerator org.springframework.context.annotation.BeanNameGenerator ) { this . org.springframework.context.annotation.BeanNameGenerator = ( org.springframework.context.annotation.BeanNameGenerator != null ? org.springframework.context.annotation.BeanNameGenerator : new AnnotationBeanNameGenerator ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ScopeMetadataResolver org.springframework.context.annotation.ScopeMetadataResolver ) { this . org.springframework.context.annotation.ScopeMetadataResolver = ( org.springframework.context.annotation.ScopeMetadataResolver != null ? org.springframework.context.annotation.ScopeMetadataResolver : new AnnotationScopeMetadataResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { void ( java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { void ( java.lang.Class<> , null , null , null ) ; }  <METHOD_END>
<METHOD_START> public < T > void void ( java.lang.Class<T> < T > java.lang.Class<T> , java.util.function.Supplier<T> < T > java.util.function.Supplier<T> ) { void ( java.lang.Class<T> , java.util.function.Supplier<T> , null , null ) ; }  <METHOD_END>
<METHOD_START> public < T > void void ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String , java.util.function.Supplier<T> < T > java.util.function.Supplier<T> ) { void ( java.lang.Class<T> , java.util.function.Supplier<T> , java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ... java.lang.Class<? extends java.lang.annotation.Annotation>[] ) { void ( java.lang.Class<> , null , null , java.lang.Class<? extends java.lang.annotation.Annotation>[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ... java.lang.Class<? extends java.lang.annotation.Annotation>[] ) { void ( java.lang.Class<> , null , java.lang.String , java.lang.Class<? extends java.lang.annotation.Annotation>[] ) ; }  <METHOD_END>
<METHOD_START> < T > void void ( java.lang.Class<T> < T > java.lang.Class<T> , java.util.function.Supplier<T> < T > java.util.function.Supplier<T> , java.lang.String java.lang.String , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > [] java.lang.Class<? extends java.lang.annotation.Annotation>[] , BeanDefinitionCustomizer ... org.springframework.context.annotation.BeanDefinitionCustomizer[] ) { AnnotatedGenericBeanDefinition org.springframework.context.annotation.AnnotatedGenericBeanDefinition = new AnnotatedGenericBeanDefinition ( java.lang.Class<T> ) ; if ( this . org.springframework.context.annotation.ConditionEvaluator . shouldSkip ( org.springframework.context.annotation.AnnotatedGenericBeanDefinition . getMetadata ( ) ) ) { return; } org.springframework.context.annotation.AnnotatedGenericBeanDefinition . setInstanceSupplier ( java.util.function.Supplier<T> ) ; ScopeMetadata org.springframework.context.annotation.ScopeMetadata = this . org.springframework.context.annotation.ScopeMetadataResolver . resolveScopeMetadata ( org.springframework.context.annotation.AnnotatedGenericBeanDefinition ) ; org.springframework.context.annotation.AnnotatedGenericBeanDefinition . setScope ( org.springframework.context.annotation.ScopeMetadata . getScopeName ( ) ) ; java.lang.String java.lang.String = ( java.lang.String != null ? java.lang.String : this . org.springframework.context.annotation.BeanNameGenerator . generateBeanName ( org.springframework.context.annotation.AnnotatedGenericBeanDefinition , this . org.springframework.context.annotation.BeanDefinitionRegistry ) ) ; AnnotationConfigUtils . processCommonDefinitionAnnotations ( org.springframework.context.annotation.AnnotatedGenericBeanDefinition ) ; if ( java.lang.Class<? extends java.lang.annotation.Annotation>[] != null ) { for ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> : java.lang.Class<? extends java.lang.annotation.Annotation>[] ) { if ( Primary .class == java.lang.Class<> ) { org.springframework.context.annotation.AnnotatedGenericBeanDefinition . setPrimary ( true ) ; } else if ( Lazy .class == java.lang.Class<> ) { org.springframework.context.annotation.AnnotatedGenericBeanDefinition . setLazyInit ( true ) ; } else { org.springframework.context.annotation.AnnotatedGenericBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( java.lang.Class<> ) ) ; } } } if ( org.springframework.context.annotation.BeanDefinitionCustomizer[] != null ) { for ( BeanDefinitionCustomizer org.springframework.context.annotation.BeanDefinitionCustomizer : org.springframework.context.annotation.BeanDefinitionCustomizer[] ) { org.springframework.context.annotation.BeanDefinitionCustomizer . customize ( org.springframework.context.annotation.AnnotatedGenericBeanDefinition ) ; } } BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.context.annotation.AnnotatedGenericBeanDefinition , java.lang.String ) ; org.springframework.context.annotation.BeanDefinitionHolder = AnnotationConfigUtils . applyScopedProxyMode ( org.springframework.context.annotation.ScopeMetadata , org.springframework.context.annotation.BeanDefinitionHolder , this . org.springframework.context.annotation.BeanDefinitionRegistry ) ; BeanDefinitionReaderUtils . registerBeanDefinition ( org.springframework.context.annotation.BeanDefinitionHolder , this . org.springframework.context.annotation.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.context.annotation.Environment org.springframework.context.annotation.Environment ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { Assert . notNull ( org.springframework.context.annotation.BeanDefinitionRegistry , STRING ) ; if ( org.springframework.context.annotation.BeanDefinitionRegistry instanceof EnvironmentCapable ) { return ( ( EnvironmentCapable ) org.springframework.context.annotation.BeanDefinitionRegistry ) . getEnvironment ( ) ; } return new StandardEnvironment ( ) ; }  <METHOD_END>
