<METHOD_START> @ Test public void void ( ) { DefaultAmqpHeaderMapper org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper = DefaultAmqpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . APP_ID , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CLUSTER_ID , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CONTENT_ENCODING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CONTENT_LENGTH , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CONTENT_TYPE , STRING ) ; java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CORRELATION_ID , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . DELAY , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . DELIVERY_MODE , MessageDeliveryMode . NON_PERSISTENT ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . DELIVERY_TAG , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . EXPIRATION , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . MESSAGE_COUNT , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . MESSAGE_ID , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . RECEIVED_EXCHANGE , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . RECEIVED_ROUTING_KEY , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . REPLY_TO , STRING ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . TIMESTAMP , java.util.Date ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . TYPE , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . USER_ID , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . SPRING_REPLY_CORRELATION , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . SPRING_REPLY_TO_STACK , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . ERROR_CHANNEL , mock ( MessageChannel .class ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . REPLY_CHANNEL , mock ( MessageChannel .class ) ) ; MessageHeaders org.springframework.integration.amqp.support.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; MessageProperties org.springframework.integration.amqp.support.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper . fromHeadersToRequest ( org.springframework.integration.amqp.support.MessageHeaders , org.springframework.integration.amqp.support.MessageProperties ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) . keySet ( ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { if ( java.lang.String . boolean ( AmqpHeaders . PREFIX ) ) { fail ( ) ; } } assertEquals ( STRING , org.springframework.integration.amqp.support.MessageProperties . getAppId ( ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.support.MessageProperties . getClusterId ( ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.support.MessageProperties . getContentEncoding ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.amqp.support.MessageProperties . getContentLength ( ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.support.MessageProperties . getContentType ( ) ) ; assertEquals ( java.lang.String , org.springframework.integration.amqp.support.MessageProperties . getCorrelationId ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.integration.amqp.support.MessageProperties . getDelay ( ) ) ; assertEquals ( MessageDeliveryMode . NON_PERSISTENT , org.springframework.integration.amqp.support.MessageProperties . getDeliveryMode ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.amqp.support.MessageProperties . getDeliveryTag ( ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.support.MessageProperties . getExpiration ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.amqp.support.MessageProperties . getMessageCount ( ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.support.MessageProperties . getMessageId ( ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.support.MessageProperties . getReceivedExchange ( ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.support.MessageProperties . getReceivedRoutingKey ( ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.support.MessageProperties . getReplyTo ( ) ) ; assertEquals ( java.util.Date , org.springframework.integration.amqp.support.MessageProperties . getTimestamp ( ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.support.MessageProperties . getType ( ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.support.MessageProperties . getUserId ( ) ) ; assertNull ( org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) . get ( MessageHeaders . ERROR_CHANNEL ) ) ; assertNull ( org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) . get ( MessageHeaders . REPLY_CHANNEL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultAmqpHeaderMapper org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper = DefaultAmqpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; MediaType org.springframework.integration.amqp.support.MediaType = MediaType . parseMediaType ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CONTENT_TYPE , org.springframework.integration.amqp.support.MediaType ) ; MessageHeaders org.springframework.integration.amqp.support.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; MessageProperties org.springframework.integration.amqp.support.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper . fromHeadersToRequest ( org.springframework.integration.amqp.support.MessageHeaders , org.springframework.integration.amqp.support.MessageProperties ) ; assertEquals ( STRING , org.springframework.integration.amqp.support.MessageProperties . getContentType ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CONTENT_TYPE , MimeTypeUtils . APPLICATION_JSON ) ; org.springframework.integration.amqp.support.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.integration.amqp.support.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper . fromHeadersToRequest ( org.springframework.integration.amqp.support.MessageHeaders , org.springframework.integration.amqp.support.MessageProperties ) ; assertEquals ( MimeTypeUtils . APPLICATION_JSON_VALUE , org.springframework.integration.amqp.support.MessageProperties . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultAmqpHeaderMapper org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper = DefaultAmqpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; MimeType org.springframework.integration.amqp.support.MimeType = MimeType . valueOf ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CONTENT_TYPE , org.springframework.integration.amqp.support.MimeType ) ; MessageHeaders org.springframework.integration.amqp.support.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; MessageProperties org.springframework.integration.amqp.support.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper . fromHeadersToRequest ( org.springframework.integration.amqp.support.MessageHeaders , org.springframework.integration.amqp.support.MessageProperties ) ; assertEquals ( STRING , org.springframework.integration.amqp.support.MessageProperties . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultAmqpHeaderMapper org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper = DefaultAmqpHeaderMapper . inboundMapper ( ) ; MessageProperties org.springframework.integration.amqp.support.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.support.MessageProperties . setAppId ( STRING ) ; org.springframework.integration.amqp.support.MessageProperties . setClusterId ( STRING ) ; org.springframework.integration.amqp.support.MessageProperties . setContentEncoding ( STRING ) ; org.springframework.integration.amqp.support.MessageProperties . setContentLength ( NUMBER ) ; org.springframework.integration.amqp.support.MessageProperties . setContentType ( STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.integration.amqp.support.MessageProperties . setCorrelationId ( java.lang.String ) ; org.springframework.integration.amqp.support.MessageProperties . setReceivedDeliveryMode ( MessageDeliveryMode . NON_PERSISTENT ) ; org.springframework.integration.amqp.support.MessageProperties . setDeliveryTag ( NUMBER ) ; org.springframework.integration.amqp.support.MessageProperties . setExpiration ( STRING ) ; org.springframework.integration.amqp.support.MessageProperties . setMessageCount ( NUMBER ) ; org.springframework.integration.amqp.support.MessageProperties . setMessageId ( STRING ) ; org.springframework.integration.amqp.support.MessageProperties . setPriority ( NUMBER ) ; org.springframework.integration.amqp.support.MessageProperties . setReceivedDelay ( NUMBER ) ; org.springframework.integration.amqp.support.MessageProperties . setReceivedExchange ( STRING ) ; org.springframework.integration.amqp.support.MessageProperties . setReceivedRoutingKey ( STRING ) ; org.springframework.integration.amqp.support.MessageProperties . setRedelivered ( true ) ; org.springframework.integration.amqp.support.MessageProperties . setReplyTo ( STRING ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; org.springframework.integration.amqp.support.MessageProperties . setTimestamp ( java.util.Date ) ; org.springframework.integration.amqp.support.MessageProperties . setType ( STRING ) ; org.springframework.integration.amqp.support.MessageProperties . setReceivedUserId ( STRING ) ; org.springframework.integration.amqp.support.MessageProperties . setHeader ( AmqpHeaders . SPRING_REPLY_CORRELATION , STRING ) ; org.springframework.integration.amqp.support.MessageProperties . setHeader ( AmqpHeaders . SPRING_REPLY_TO_STACK , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper . toHeadersFromReply ( org.springframework.integration.amqp.support.MessageProperties ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . APP_ID ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CLUSTER_ID ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CONTENT_ENCODING ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CONTENT_LENGTH ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CONTENT_TYPE ) ) ; assertEquals ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CORRELATION_ID ) ) ; assertEquals ( MessageDeliveryMode . NON_PERSISTENT , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . RECEIVED_DELIVERY_MODE ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . DELIVERY_TAG ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . EXPIRATION ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . MESSAGE_COUNT ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . MESSAGE_ID ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . RECEIVED_DELAY ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . RECEIVED_EXCHANGE ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . RECEIVED_ROUTING_KEY ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . REPLY_TO ) ) ; assertEquals ( java.util.Date , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . TIMESTAMP ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . TYPE ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . RECEIVED_USER_ID ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . SPRING_REPLY_CORRELATION ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . SPRING_REPLY_TO_STACK ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultAmqpHeaderMapper org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper = DefaultAmqpHeaderMapper . inboundMapper ( ) ; MessageProperties org.springframework.integration.amqp.support.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.support.MessageProperties . setConsumerTag ( STRING ) ; org.springframework.integration.amqp.support.MessageProperties . setConsumerQueue ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper . toHeadersFromRequest ( org.springframework.integration.amqp.support.MessageProperties ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CONSUMER_TAG ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CONSUMER_QUEUE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultAmqpHeaderMapper org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper = DefaultAmqpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . ID , STRING ) ; MessageHeaders org.springframework.integration.amqp.support.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; MessageProperties org.springframework.integration.amqp.support.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper . fromHeadersToRequest ( org.springframework.integration.amqp.support.MessageHeaders , org.springframework.integration.amqp.support.MessageProperties ) ; assertNull ( org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) . get ( MessageHeaders . ID ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultAmqpHeaderMapper org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper = DefaultAmqpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . TIMESTAMP , NUMBER ) ; MessageHeaders org.springframework.integration.amqp.support.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; MessageProperties org.springframework.integration.amqp.support.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper . fromHeadersToRequest ( org.springframework.integration.amqp.support.MessageHeaders , org.springframework.integration.amqp.support.MessageProperties ) ; assertNull ( org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) . get ( MessageHeaders . TIMESTAMP ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultAmqpHeaderMapper org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper = DefaultAmqpHeaderMapper . inboundMapper ( ) ; MessageConverter org.springframework.integration.amqp.support.MessageConverter = new Jackson2JsonMessageConverter ( ) ; MessageProperties org.springframework.integration.amqp.support.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.support.MessageConverter . toMessage ( STRING , org.springframework.integration.amqp.support.MessageProperties ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; MessageHeaders org.springframework.integration.amqp.support.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper . fromHeadersToRequest ( org.springframework.integration.amqp.support.MessageHeaders , org.springframework.integration.amqp.support.MessageProperties ) ; assertEquals ( STRING , org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) . get ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.amqp.support.MessageConverter . fromMessage ( new Message ( STRING . byte[] ( ) , org.springframework.integration.amqp.support.MessageProperties ) ) ; assertEquals ( java.lang.String .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultAmqpHeaderMapper org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper = DefaultAmqpHeaderMapper . inboundMapper ( ) ; MessageProperties org.springframework.integration.amqp.support.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.support.MessageProperties . setReceivedDeliveryMode ( MessageDeliveryMode . NON_PERSISTENT ) ; org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) . put ( STRING , STRING ) ; org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) . put ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper . toHeadersFromRequest ( org.springframework.integration.amqp.support.MessageProperties ) ; assertNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . DELIVERY_MODE ) ) ; assertEquals ( MessageDeliveryMode . NON_PERSISTENT , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . RECEIVED_DELIVERY_MODE ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.integration.amqp.support.MessageProperties = new MessageProperties ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . DELIVERY_MODE , MessageDeliveryMode . NON_PERSISTENT ) ; org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper . fromHeadersToReply ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.amqp.support.MessageProperties ) ; assertEquals ( MessageDeliveryMode . NON_PERSISTENT , org.springframework.integration.amqp.support.MessageProperties . getDeliveryMode ( ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) . get ( STRING ) ) ; org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper = DefaultAmqpHeaderMapper . outboundMapper ( ) ; org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper . fromHeadersToRequest ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.amqp.support.MessageProperties ) ; assertEquals ( MessageDeliveryMode . NON_PERSISTENT , org.springframework.integration.amqp.support.MessageProperties . getDeliveryMode ( ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) . get ( STRING ) ) ; org.springframework.integration.amqp.support.MessageProperties . setReceivedDeliveryMode ( MessageDeliveryMode . NON_PERSISTENT ) ; org.springframework.integration.amqp.support.MessageProperties . setHeader ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper . toHeadersFromReply ( org.springframework.integration.amqp.support.MessageProperties ) ; assertEquals ( MessageDeliveryMode . NON_PERSISTENT , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . RECEIVED_DELIVERY_MODE ) ) ; assertNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . DELIVERY_MODE ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
