<METHOD_START> public void void ( SubProtocolWebSocketHandler org.springframework.web.socket.config.SubProtocolWebSocketHandler ) { this . org.springframework.web.socket.config.SubProtocolWebSocketHandler = org.springframework.web.socket.config.SubProtocolWebSocketHandler ; this . org.springframework.web.socket.config.StompSubProtocolHandler = org.springframework.web.socket.config.StompSubProtocolHandler ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.StompSubProtocolHandler org.springframework.web.socket.config.StompSubProtocolHandler ( ) { for ( SubProtocolHandler org.springframework.web.socket.config.SubProtocolHandler : this . org.springframework.web.socket.config.SubProtocolWebSocketHandler . getProtocolHandlers ( ) ) { if ( org.springframework.web.socket.config.SubProtocolHandler instanceof StompSubProtocolHandler ) { return ( StompSubProtocolHandler ) org.springframework.web.socket.config.SubProtocolHandler ; } } SubProtocolHandler org.springframework.web.socket.config.SubProtocolHandler = this . org.springframework.web.socket.config.SubProtocolWebSocketHandler . getDefaultProtocolHandler ( ) ; if ( org.springframework.web.socket.config.SubProtocolHandler != null && org.springframework.web.socket.config.SubProtocolHandler instanceof StompSubProtocolHandler ) { return ( StompSubProtocolHandler ) org.springframework.web.socket.config.SubProtocolHandler ; } return null ; }  <METHOD_END>
<METHOD_START> public void void ( StompBrokerRelayMessageHandler org.springframework.web.socket.config.StompBrokerRelayMessageHandler ) { this . org.springframework.web.socket.config.StompBrokerRelayMessageHandler = org.springframework.web.socket.config.StompBrokerRelayMessageHandler ; }  <METHOD_END>
<METHOD_START> public void void ( ThreadPoolTaskExecutor org.springframework.web.socket.config.ThreadPoolTaskExecutor ) { this . java.util.concurrent.ThreadPoolExecutor = org.springframework.web.socket.config.ThreadPoolTaskExecutor . getThreadPoolExecutor ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ThreadPoolTaskExecutor org.springframework.web.socket.config.ThreadPoolTaskExecutor ) { this . java.util.concurrent.ThreadPoolExecutor = org.springframework.web.socket.config.ThreadPoolTaskExecutor . getThreadPoolExecutor ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ThreadPoolTaskScheduler org.springframework.web.socket.config.ThreadPoolTaskScheduler ) { this . java.util.concurrent.ScheduledThreadPoolExecutor = org.springframework.web.socket.config.ThreadPoolTaskScheduler . getScheduledThreadPoolExecutor ( ) ; this . java.util.concurrent.ScheduledFuture<?> = java.util.concurrent.ScheduledFuture<?> ( NUMBER * NUMBER * NUMBER ) ; }  <METHOD_END>
<METHOD_START> private java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> ( long long ) { if ( org.springframework.web.socket.config.Log . isInfoEnabled ( ) && this . long > NUMBER ) { return this . java.util.concurrent.ScheduledThreadPoolExecutor . java.util.concurrent.ScheduledFuture<?> ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { org.springframework.web.socket.config.Log . info ( org.springframework.web.socket.config.WebSocketMessageBrokerStats .this . java.lang.String ( ) ) ; } } , long , this . long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.web.socket.config.Log . info ( org.springframework.web.socket.config.WebSocketMessageBrokerStats .this . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { if ( this . java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; } this . long = long ; this . java.util.concurrent.ScheduledFuture<?> = java.util.concurrent.ScheduledFuture<?> ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return ( this . org.springframework.web.socket.config.SubProtocolWebSocketHandler != null ? this . org.springframework.web.socket.config.SubProtocolWebSocketHandler . getStatsInfo ( ) : STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return ( this . org.springframework.web.socket.config.StompSubProtocolHandler != null ? this . org.springframework.web.socket.config.StompSubProtocolHandler . getStatsInfo ( ) : STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return ( this . org.springframework.web.socket.config.StompBrokerRelayMessageHandler != null ? this . org.springframework.web.socket.config.StompBrokerRelayMessageHandler . getStatsInfo ( ) : STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return ( this . java.util.concurrent.ThreadPoolExecutor != null ? java.lang.String ( this . java.util.concurrent.ThreadPoolExecutor ) : STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return ( this . java.util.concurrent.ThreadPoolExecutor != null ? java.lang.String ( this . java.util.concurrent.ThreadPoolExecutor ) : STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return ( this . java.util.concurrent.ScheduledThreadPoolExecutor != null ? java.lang.String ( this . java.util.concurrent.ScheduledThreadPoolExecutor ) : STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.util.concurrent.Executor java.util.concurrent.Executor ) { java.lang.String java.lang.String = java.util.concurrent.Executor . java.lang.String ( ) ; return java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) , java.lang.String . int ( ) - NUMBER ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING + java.lang.String ( ) + STRING + STRING + java.lang.String ( ) + STRING + STRING + java.lang.String ( ) + STRING + STRING + java.lang.String ( ) + STRING + STRING + java.lang.String ( ) + STRING + STRING + java.lang.String ( ) + STRING ; }  <METHOD_END>
