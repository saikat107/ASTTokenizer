<METHOD_START> @ Before public void void ( ) { void ( org.springframework.jms.listener.adapter.DefaultMessageHandlerMethodFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.listener.adapter.JMSException { Destination org.springframework.jms.listener.adapter.Destination = new Destination ( ) {} ; Message < java.lang.String > org.springframework.jms.listener.adapter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( JmsHeaders . TYPE , STRING ) . setHeader ( JmsHeaders . REPLY_TO , org.springframework.jms.listener.adapter.Destination ) . build ( ) ; Session org.springframework.jms.listener.adapter.Session = mock ( Session .class ) ; given ( org.springframework.jms.listener.adapter.Session . createTextMessage ( STRING ) ) . willReturn ( new StubTextMessage ( STRING ) ) ; MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter = org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ( STRING , Message .class ) ; javax . javax.jms . javax.jms javax.jms.Message = org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . buildMessage ( org.springframework.jms.listener.adapter.Session , org.springframework.jms.listener.adapter.Message<java.lang.String> ) ; verify ( org.springframework.jms.listener.adapter.Session ) . createTextMessage ( STRING ) ; assertNotNull ( STRING , javax.jms.Message ) ; assertEquals ( STRING , ( ( TextMessage ) javax.jms.Message ) . getText ( ) ) ; assertEquals ( STRING , STRING , javax.jms.Message . getStringProperty ( STRING ) ) ; assertEquals ( STRING , STRING , javax.jms.Message . getJMSType ( ) ) ; assertEquals ( STRING , org.springframework.jms.listener.adapter.Destination , javax.jms.Message . getJMSReplyTo ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( STRING ) ; Session org.springframework.jms.listener.adapter.Session = mock ( Session .class ) ; MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter = org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ( STRING , java.lang.String .class ) ; try { org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . onMessage ( javax.jms.Message , org.springframework.jms.listener.adapter.Session ) ; fail ( STRING ) ; } catch ( JMSException org.springframework.jms.listener.adapter.JMSException ) { fail ( STRING ) ; } catch ( ListenerExecutionFailedException org.springframework.jms.listener.adapter.ListenerExecutionFailedException ) { assertEquals ( java.lang.IllegalArgumentException .class , org.springframework.jms.listener.adapter.ListenerExecutionFailedException . getCause ( ) . getClass ( ) ) ; assertEquals ( STRING , org.springframework.jms.listener.adapter.ListenerExecutionFailedException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( STRING ) ; Session org.springframework.jms.listener.adapter.Session = mock ( Session .class ) ; MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter = org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ( STRING , java.lang.Integer .class ) ; try { org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . onMessage ( javax.jms.Message , org.springframework.jms.listener.adapter.Session ) ; fail ( STRING ) ; } catch ( JMSException org.springframework.jms.listener.adapter.JMSException ) { fail ( STRING ) ; } catch ( ListenerExecutionFailedException org.springframework.jms.listener.adapter.ListenerExecutionFailedException ) { assertEquals ( MessageConversionException .class , org.springframework.jms.listener.adapter.ListenerExecutionFailedException . getCause ( ) . getClass ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.listener.adapter.JMSException { javax . javax.jms . javax.jms javax.jms.Message = mock ( javax . javax.jms . javax.jms .class ) ; MessageConverter org.springframework.jms.listener.adapter.MessageConverter = mock ( MessageConverter .class ) ; given ( org.springframework.jms.listener.adapter.MessageConverter . fromMessage ( javax.jms.Message ) ) . willReturn ( STRING ) ; MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter = org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ( STRING , Message .class ) ; org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . setMessageConverter ( org.springframework.jms.listener.adapter.MessageConverter ) ; Message < ? > org.springframework.jms.listener.adapter.Message<?> = org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . toMessagingMessage ( javax.jms.Message ) ; verify ( org.springframework.jms.listener.adapter.MessageConverter , never ( ) ) . fromMessage ( javax.jms.Message ) ; assertEquals ( STRING , org.springframework.jms.listener.adapter.Message<> . getPayload ( ) ) ; verify ( org.springframework.jms.listener.adapter.MessageConverter , times ( NUMBER ) ) . fromMessage ( javax.jms.Message ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.listener.adapter.JMSException { javax . javax.jms . javax.jms javax.jms.Message = mock ( javax . javax.jms . javax.jms .class ) ; when ( javax.jms.Message . getPropertyNames ( ) ) . thenThrow ( new java.lang.IllegalArgumentException ( STRING ) ) ; MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter = org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ( STRING , Message .class ) ; Message < ? > org.springframework.jms.listener.adapter.Message<?> = org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . toMessagingMessage ( javax.jms.Message ) ; this . org.springframework.jms.listener.adapter.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.jms.listener.adapter.ExpectedException . expectMessage ( STRING ) ; org.springframework.jms.listener.adapter.Message<> . getHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.listener.adapter.JMSException { javax . javax.jms . javax.jms javax.jms.Message = mock ( javax . javax.jms . javax.jms .class ) ; Session org.springframework.jms.listener.adapter.Session = mock ( Session .class ) ; MessageConverter org.springframework.jms.listener.adapter.MessageConverter = mock ( MessageConverter .class ) ; given ( org.springframework.jms.listener.adapter.MessageConverter . fromMessage ( javax.jms.Message ) ) . willReturn ( STRING ) ; MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter = org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ( STRING , Message .class ) ; org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . setMessageConverter ( org.springframework.jms.listener.adapter.MessageConverter ) ; org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . onMessage ( javax.jms.Message , org.springframework.jms.listener.adapter.Session ) ; verify ( org.springframework.jms.listener.adapter.MessageConverter , times ( NUMBER ) ) . fromMessage ( javax.jms.Message ) ; assertEquals ( NUMBER , org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleBean . java.util.List<org.springframework.jms.listener.adapter.Message<java.lang.String>> . size ( ) ) ; assertEquals ( STRING , org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleBean . java.util.List<org.springframework.jms.listener.adapter.Message<java.lang.String>> . get ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.listener.adapter.JMSException { Session org.springframework.jms.listener.adapter.Session = mock ( Session .class ) ; MessageConverter org.springframework.jms.listener.adapter.MessageConverter = mock ( MessageConverter .class ) ; given ( org.springframework.jms.listener.adapter.MessageConverter . toMessage ( STRING , org.springframework.jms.listener.adapter.Session ) ) . willReturn ( new StubTextMessage ( STRING ) ) ; Message < java.lang.String > org.springframework.jms.listener.adapter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter = org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ( STRING , Message .class ) ; org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . setMessageConverter ( org.springframework.jms.listener.adapter.MessageConverter ) ; javax . javax.jms . javax.jms javax.jms.Message = org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . buildMessage ( org.springframework.jms.listener.adapter.Session , org.springframework.jms.listener.adapter.Message<java.lang.String> ) ; verify ( org.springframework.jms.listener.adapter.MessageConverter , times ( NUMBER ) ) . toMessage ( STRING , org.springframework.jms.listener.adapter.Session ) ; assertNotNull ( STRING , javax.jms.Message ) ; assertEquals ( STRING , ( ( TextMessage ) javax.jms.Message ) . getText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.listener.adapter.JMSException { Session org.springframework.jms.listener.adapter.Session = mock ( Session .class ) ; Queue org.springframework.jms.listener.adapter.Queue = mock ( Queue .class ) ; given ( org.springframework.jms.listener.adapter.Session . createQueue ( STRING ) ) . willReturn ( org.springframework.jms.listener.adapter.Queue ) ; MessageProducer org.springframework.jms.listener.adapter.MessageProducer = mock ( MessageProducer .class ) ; TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.listener.adapter.Session . createTextMessage ( STRING ) ) . willReturn ( org.springframework.jms.listener.adapter.TextMessage ) ; given ( org.springframework.jms.listener.adapter.Session . createProducer ( org.springframework.jms.listener.adapter.Queue ) ) . willReturn ( org.springframework.jms.listener.adapter.MessageProducer ) ; MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter = org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ( STRING , STRING , Message .class ) ; org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . onMessage ( mock ( javax . javax.jms . javax.jms .class ) , org.springframework.jms.listener.adapter.Session ) ; verify ( org.springframework.jms.listener.adapter.Session ) . createQueue ( STRING ) ; verify ( org.springframework.jms.listener.adapter.Session ) . createTextMessage ( STRING ) ; verify ( org.springframework.jms.listener.adapter.MessageProducer ) . send ( org.springframework.jms.listener.adapter.TextMessage ) ; verify ( org.springframework.jms.listener.adapter.MessageProducer ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.listener.adapter.JMSException { Session org.springframework.jms.listener.adapter.Session = mock ( Session .class ) ; Topic org.springframework.jms.listener.adapter.Topic = mock ( Topic .class ) ; given ( org.springframework.jms.listener.adapter.Session . createTopic ( STRING ) ) . willReturn ( org.springframework.jms.listener.adapter.Topic ) ; MessageProducer org.springframework.jms.listener.adapter.MessageProducer = mock ( MessageProducer .class ) ; TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.listener.adapter.Session . createTextMessage ( STRING ) ) . willReturn ( org.springframework.jms.listener.adapter.TextMessage ) ; given ( org.springframework.jms.listener.adapter.Session . createProducer ( org.springframework.jms.listener.adapter.Topic ) ) . willReturn ( org.springframework.jms.listener.adapter.MessageProducer ) ; MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter = org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ( STRING , STRING , Message .class ) ; org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . onMessage ( mock ( javax . javax.jms . javax.jms .class ) , org.springframework.jms.listener.adapter.Session ) ; verify ( org.springframework.jms.listener.adapter.Session ) . createTopic ( STRING ) ; verify ( org.springframework.jms.listener.adapter.Session ) . createTextMessage ( STRING ) ; verify ( org.springframework.jms.listener.adapter.MessageProducer ) . send ( org.springframework.jms.listener.adapter.TextMessage ) ; verify ( org.springframework.jms.listener.adapter.MessageProducer ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.listener.adapter.JMSException { Session org.springframework.jms.listener.adapter.Session = mock ( Session .class ) ; MessageProducer org.springframework.jms.listener.adapter.MessageProducer = mock ( MessageProducer .class ) ; TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.listener.adapter.Session . createTextMessage ( STRING ) ) . willReturn ( org.springframework.jms.listener.adapter.TextMessage ) ; given ( org.springframework.jms.listener.adapter.Session . createProducer ( org.springframework.jms.listener.adapter.Destination ) ) . willReturn ( org.springframework.jms.listener.adapter.MessageProducer ) ; MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter = org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ( STRING , STRING , Message .class ) ; org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . onMessage ( mock ( javax . javax.jms . javax.jms .class ) , org.springframework.jms.listener.adapter.Session ) ; verify ( org.springframework.jms.listener.adapter.Session , times ( NUMBER ) ) . createQueue ( anyString ( ) ) ; verify ( org.springframework.jms.listener.adapter.Session ) . createTextMessage ( STRING ) ; verify ( org.springframework.jms.listener.adapter.MessageProducer ) . send ( org.springframework.jms.listener.adapter.TextMessage ) ; verify ( org.springframework.jms.listener.adapter.MessageProducer ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.listener.adapter.JMSException { Queue org.springframework.jms.listener.adapter.Queue = mock ( Queue .class ) ; Session org.springframework.jms.listener.adapter.Session = mock ( Session .class ) ; MessageProducer org.springframework.jms.listener.adapter.MessageProducer = mock ( MessageProducer .class ) ; TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.listener.adapter.Session . createTextMessage ( STRING ) ) . willReturn ( org.springframework.jms.listener.adapter.TextMessage ) ; given ( org.springframework.jms.listener.adapter.Session . createProducer ( org.springframework.jms.listener.adapter.Queue ) ) . willReturn ( org.springframework.jms.listener.adapter.MessageProducer ) ; MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter = org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ( STRING , STRING , Message .class ) ; org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . setDefaultResponseDestination ( org.springframework.jms.listener.adapter.Queue ) ; org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . onMessage ( mock ( javax . javax.jms . javax.jms .class ) , org.springframework.jms.listener.adapter.Session ) ; verify ( org.springframework.jms.listener.adapter.Session , times ( NUMBER ) ) . createQueue ( anyString ( ) ) ; verify ( org.springframework.jms.listener.adapter.Session ) . createTextMessage ( STRING ) ; verify ( org.springframework.jms.listener.adapter.MessageProducer ) . send ( org.springframework.jms.listener.adapter.TextMessage ) ; verify ( org.springframework.jms.listener.adapter.MessageProducer ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.listener.adapter.JMSException { TextMessage org.springframework.jms.listener.adapter.TextMessage = org.springframework.jms.listener.adapter.TextMessage ( STRING , STRING ) ; verify ( org.springframework.jms.listener.adapter.TextMessage ) . setObjectProperty ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.listener.adapter.JMSException { TextMessage org.springframework.jms.listener.adapter.TextMessage = org.springframework.jms.listener.adapter.TextMessage ( STRING , STRING ) ; verify ( org.springframework.jms.listener.adapter.TextMessage ) . setObjectProperty ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.listener.adapter.JMSException { TextMessage org.springframework.jms.listener.adapter.TextMessage = org.springframework.jms.listener.adapter.TextMessage ( STRING , STRING ) ; verify ( org.springframework.jms.listener.adapter.TextMessage , never ( ) ) . setObjectProperty ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.listener.adapter.TextMessage org.springframework.jms.listener.adapter.TextMessage ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.jms.listener.adapter.JMSException { Queue org.springframework.jms.listener.adapter.Queue = mock ( Queue .class ) ; Session org.springframework.jms.listener.adapter.Session = mock ( Session .class ) ; MessageProducer org.springframework.jms.listener.adapter.MessageProducer = mock ( MessageProducer .class ) ; TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.listener.adapter.Session . createTextMessage ( java.lang.String ) ) . willReturn ( org.springframework.jms.listener.adapter.TextMessage ) ; given ( org.springframework.jms.listener.adapter.Session . createProducer ( org.springframework.jms.listener.adapter.Queue ) ) . willReturn ( org.springframework.jms.listener.adapter.MessageProducer ) ; MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter = org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ( STRING , java.lang.String , Message .class ) ; MappingJackson2MessageConverter org.springframework.jms.listener.adapter.MappingJackson2MessageConverter = new MappingJackson2MessageConverter ( ) ; org.springframework.jms.listener.adapter.MappingJackson2MessageConverter . setTargetType ( MessageType . TEXT ) ; org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . setMessageConverter ( org.springframework.jms.listener.adapter.MappingJackson2MessageConverter ) ; org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . setDefaultResponseDestination ( org.springframework.jms.listener.adapter.Queue ) ; org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . onMessage ( mock ( javax . javax.jms . javax.jms .class ) , org.springframework.jms.listener.adapter.Session ) ; verify ( org.springframework.jms.listener.adapter.Session , times ( NUMBER ) ) . createQueue ( anyString ( ) ) ; verify ( org.springframework.jms.listener.adapter.Session ) . createTextMessage ( java.lang.String ) ; verify ( org.springframework.jms.listener.adapter.MessageProducer ) . send ( org.springframework.jms.listener.adapter.TextMessage ) ; verify ( org.springframework.jms.listener.adapter.MessageProducer ) . close ( ) ; return org.springframework.jms.listener.adapter.TextMessage ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ( java.lang.String java.lang.String , java.lang.Class ... java.lang.Class[] ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleBean .class , java.lang.String , java.lang.Class[] ) ; return org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ( java.lang.reflect.Method java.lang.reflect.Method ) { MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter = new MessagingMessageListenerAdapter ( ) ; org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . setHandlerMethod ( org.springframework.jms.listener.adapter.DefaultMessageHandlerMethodFactory . createInvocableHandlerMethod ( org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleBean , java.lang.reflect.Method ) ) ; return org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ( final java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Class ... java.lang.Class[] ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleBean .class , java.lang.String , java.lang.Class[] ) ; MessagingMessageListenerAdapter org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter = new MessagingMessageListenerAdapter ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( javax . javax.jms . javax.jms javax.jms.Message ) { return java.lang.Object ; } } ; org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter . setHandlerMethod ( org.springframework.jms.listener.adapter.DefaultMessageHandlerMethodFactory . createInvocableHandlerMethod ( org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleBean , java.lang.reflect.Method ) ) ; return org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( javax . javax.jms . javax.jms javax.jms.Message ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private void void ( DefaultMessageHandlerMethodFactory org.springframework.jms.listener.adapter.DefaultMessageHandlerMethodFactory ) { org.springframework.jms.listener.adapter.DefaultMessageHandlerMethodFactory . setBeanFactory ( new StaticListableBeanFactory ( ) ) ; org.springframework.jms.listener.adapter.DefaultMessageHandlerMethodFactory . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( Message < java.lang.String > org.springframework.jms.listener.adapter.Message<java.lang.String> ) { java.util.List<org.springframework.jms.listener.adapter.Message<java.lang.String>> . add ( org.springframework.jms.listener.adapter.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.listener.adapter.Message<java.lang.String> < java.lang.String > org.springframework.jms.listener.adapter.Message<java.lang.String> ( Message < java.lang.String > org.springframework.jms.listener.adapter.Message<java.lang.String> ) { return MessageBuilder . withPayload ( org.springframework.jms.listener.adapter.Message<java.lang.String> . getPayload ( ) ) . setHeader ( JmsHeaders . TYPE , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.listener.adapter.JmsResponse<java.lang.String> < java.lang.String > org.springframework.jms.listener.adapter.JmsResponse<java.lang.String> ( Message < java.lang.String > org.springframework.jms.listener.adapter.Message<java.lang.String> ) { return JmsResponse . forQueue ( org.springframework.jms.listener.adapter.Message<java.lang.String> . getPayload ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.listener.adapter.JmsResponse<java.lang.String> < java.lang.String > org.springframework.jms.listener.adapter.JmsResponse<java.lang.String> ( Message < java.lang.String > org.springframework.jms.listener.adapter.Message<java.lang.String> ) { return JmsResponse . forTopic ( org.springframework.jms.listener.adapter.Message<java.lang.String> . getPayload ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.listener.adapter.JmsResponse<java.lang.String> < java.lang.String > org.springframework.jms.listener.adapter.JmsResponse<java.lang.String> ( Message < java.lang.String > org.springframework.jms.listener.adapter.Message<java.lang.String> ) { return JmsResponse . forDestination ( org.springframework.jms.listener.adapter.Message<java.lang.String> . getPayload ( ) , org.springframework.jms.listener.adapter.Destination ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.listener.adapter.JmsResponse<java.lang.String> < java.lang.String > org.springframework.jms.listener.adapter.JmsResponse<java.lang.String> ( Message < java.lang.String > org.springframework.jms.listener.adapter.Message<java.lang.String> ) { return new JmsResponse <> ( org.springframework.jms.listener.adapter.Message<java.lang.String> . getPayload ( ) , null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.listener.adapter.Message<org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleResponse> < org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleResponse > org.springframework.jms.listener.adapter.Message<org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleResponse> ( Message < java.lang.String > org.springframework.jms.listener.adapter.Message<java.lang.String> ) { return MessageBuilder . withPayload ( org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleResponse ( org.springframework.jms.listener.adapter.Message<java.lang.String> . getPayload ( ) ) ) . setHeader ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ JsonView ( org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.Summary .class ) public org.springframework.jms.listener.adapter.Message<org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleResponse> < org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleResponse > org.springframework.jms.listener.adapter.Message<org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleResponse> ( Message < java.lang.String > org.springframework.jms.listener.adapter.Message<java.lang.String> ) { return MessageBuilder . withPayload ( org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleResponse ( org.springframework.jms.listener.adapter.Message<java.lang.String> . getPayload ( ) ) ) . setHeader ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ JsonView ( org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.Summary .class ) public org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleResponse org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleResponse ( Message < java.lang.String > org.springframework.jms.listener.adapter.Message<java.lang.String> ) { return org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleResponse ( org.springframework.jms.listener.adapter.Message<java.lang.String> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleResponse org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleResponse ( java.lang.String java.lang.String ) { return new org.springframework.jms.listener.adapter.MessagingMessageListenerAdapterTests.SampleResponse ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { throw new java.lang.IllegalArgumentException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { throw new java.lang.IllegalArgumentException ( STRING ) ; }  <METHOD_END>
<METHOD_START> void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
