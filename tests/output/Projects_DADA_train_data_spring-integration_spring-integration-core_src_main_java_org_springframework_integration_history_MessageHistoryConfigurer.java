<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { Assert . notEmpty ( java.lang.String[] , STRING ) ; Assert . state ( ! this . boolean , STRING ) ; java.lang.String [] java.lang.String[] = java.lang.String[] . java.lang.Object ( ) ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.String[] [ int ] = java.lang.String[] [ int ] . java.lang.String ( ) ; } java.util.Arrays . void ( java.lang.String[] ) ; Assert . isTrue ( ! this . boolean || java.util.Arrays . boolean ( this . java.lang.String[] , java.lang.String[] ) , STRING + STRING + STRING ) ; this . java.lang.String[] = java.lang.String[] ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ ManagedAttribute ( description = STRING ) public void void ( java.lang.String java.lang.String ) { this . void ( StringUtils . delimitedListToStringArray ( java.lang.String , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ ManagedAttribute public java.lang.String java.lang.String ( ) { return StringUtils . arrayToCommaDelimitedString ( this . java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ) { Assert . notNull ( java.util.Set<java.lang.String> , STRING ) ; Assert . state ( ! this . boolean , STRING ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { java.lang.String [] java.lang.String[] = StringUtils . delimitedListToStringArray ( java.lang.String , STRING , STRING ) ; java.util.Arrays . void ( java.lang.String[] ) ; if ( this . boolean && ! java.util.Arrays . boolean ( this . java.lang.String[] , java.lang.String[] ) ) { throw new BeanDefinitionValidationException ( STRING + STRING + STRING ) ; } else { this . java.lang.String[] = java.lang.String[] ; this . boolean = true ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.history.BeanFactory ) throws org.springframework.integration.history.BeansException { this . org.springframework.integration.history.BeanFactory = org.springframework.integration.history.BeanFactory ; }  <METHOD_END>
<METHOD_START> private static java.util.Collection<org.springframework.integration.history.TrackableComponent> < TrackableComponent > java.util.Collection<org.springframework.integration.history.TrackableComponent> ( ListableBeanFactory org.springframework.integration.history.ListableBeanFactory ) { return BeanFactoryUtils . beansOfTypeIncludingAncestors ( org.springframework.integration.history.ListableBeanFactory , TrackableComponent .class ) . values ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ ManagedOperation @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( ! this . boolean && this . org.springframework.integration.history.BeanFactory instanceof ListableBeanFactory ) { for ( TrackableComponent org.springframework.integration.history.TrackableComponent : java.util.Collection<org.springframework.integration.history.TrackableComponent> ( ( ListableBeanFactory ) this . org.springframework.integration.history.BeanFactory ) ) { java.lang.String java.lang.String = org.springframework.integration.history.TrackableComponent . getComponentName ( ) ; boolean boolean = PatternMatchUtils . simpleMatch ( this . java.lang.String[] , java.lang.String ) ; org.springframework.integration.history.TrackableComponent . setShouldTrack ( boolean ) ; if ( boolean ) { this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; if ( this . org.springframework.integration.history.Log . isInfoEnabled ( ) ) { this . org.springframework.integration.history.Log . info ( STRING + java.lang.String + STRING ) ; } } } this . boolean = true ; } } }  <METHOD_END>
<METHOD_START> @ ManagedOperation @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( this . boolean && this . org.springframework.integration.history.BeanFactory instanceof ListableBeanFactory ) { for ( TrackableComponent org.springframework.integration.history.TrackableComponent : java.util.Collection<org.springframework.integration.history.TrackableComponent> ( ( ListableBeanFactory ) this . org.springframework.integration.history.BeanFactory ) ) { java.lang.String java.lang.String = org.springframework.integration.history.TrackableComponent . getComponentName ( ) ; if ( this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { org.springframework.integration.history.TrackableComponent . setShouldTrack ( false ) ; if ( this . org.springframework.integration.history.Log . isInfoEnabled ( ) ) { this . org.springframework.integration.history.Log . info ( STRING + java.lang.String + STRING ) ; } } } this . java.util.Set<java.lang.String> . void ( ) ; this . boolean = false ; this . boolean = false ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { this . void ( ) ; java.lang.Runnable . void ( ) ; }  <METHOD_END>
