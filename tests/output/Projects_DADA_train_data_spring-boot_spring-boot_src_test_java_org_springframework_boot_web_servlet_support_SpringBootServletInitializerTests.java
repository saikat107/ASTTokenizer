<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.web.servlet.support.ExpectedException . expectMessage ( STRING ) ; new org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.MockSpringBootServletInitializer ( ) . createRootApplicationContext ( this . org.springframework.boot.web.servlet.support.ServletContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.WithConfigurationAnnotation ( ) . createRootApplicationContext ( this . org.springframework.boot.web.servlet.support.ServletContext ) ; assertThat ( this . org.springframework.boot.web.servlet.support.SpringApplication . getSources ( ) ) . containsOnly ( org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.WithConfigurationAnnotation .class , ErrorPageFilterConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.WithConfiguredSource ( ) . createRootApplicationContext ( this . org.springframework.boot.web.servlet.support.ServletContext ) ; assertThat ( this . org.springframework.boot.web.servlet.support.SpringApplication . getSources ( ) ) . containsOnly ( org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.Config .class , ErrorPageFilterConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.CustomSpringBootServletInitializer org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.CustomSpringBootServletInitializer = new org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.CustomSpringBootServletInitializer ( ) ; org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.CustomSpringBootServletInitializer . createRootApplicationContext ( this . org.springframework.boot.web.servlet.support.ServletContext ) ; assertThat ( org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.CustomSpringBootServletInitializer . org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.CustomSpringApplicationBuilder . boolean ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { new org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.WithConfigurationAnnotation ( ) . createRootApplicationContext ( this . org.springframework.boot.web.servlet.support.ServletContext ) ; java.lang.Class java.lang.Class = ( java.lang.Class<?> < ? > ) new DirectFieldAccessor ( this . org.springframework.boot.web.servlet.support.SpringApplication ) . getPropertyValue ( STRING ) ; assertThat ( java.lang.Class ) . isEqualTo ( org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.WithConfigurationAnnotation .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebServer org.springframework.boot.web.servlet.support.WebServer = new UndertowServletWebServerFactory ( NUMBER ) . getWebServer ( new ServletContextInitializer ( ) { @ java.lang.Override public void void ( ServletContext org.springframework.boot.web.servlet.support.ServletContext )							throws org.springframework.boot.web.servlet.support.ServletException { AbstractApplicationContext org.springframework.boot.web.servlet.support.AbstractApplicationContext = ( AbstractApplicationContext ) new org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.WithErrorPageFilterNotRegistered ( ) . createRootApplicationContext ( org.springframework.boot.web.servlet.support.ServletContext ) ; try { assertThat ( org.springframework.boot.web.servlet.support.AbstractApplicationContext . getBeansOfType ( ErrorPageFilter .class ) ) . hasSize ( NUMBER ) ; } finally { org.springframework.boot.web.servlet.support.AbstractApplicationContext . close ( ) ; } } } ) ; try { org.springframework.boot.web.servlet.support.WebServer . start ( ) ; } finally { org.springframework.boot.web.servlet.support.WebServer . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.boot.web.servlet.support.ServletContext )							throws org.springframework.boot.web.servlet.support.ServletException { AbstractApplicationContext org.springframework.boot.web.servlet.support.AbstractApplicationContext = ( AbstractApplicationContext ) new org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.WithErrorPageFilterNotRegistered ( ) . createRootApplicationContext ( org.springframework.boot.web.servlet.support.ServletContext ) ; try { assertThat ( org.springframework.boot.web.servlet.support.AbstractApplicationContext . getBeansOfType ( ErrorPageFilter .class ) ) . hasSize ( NUMBER ) ; } finally { org.springframework.boot.web.servlet.support.AbstractApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.boot.web.servlet.support.ConfigurableApplicationContext = new SpringApplication ( org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.ExecutableWar .class ) . run ( ) ; try { assertThat ( org.springframework.boot.web.servlet.support.ConfigurableApplicationContext . getBeansOfType ( ErrorPageFilter .class ) ) . hasSize ( NUMBER ) ; } finally { org.springframework.boot.web.servlet.support.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { new org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.WithConfiguredSource ( ) . createRootApplicationContext ( this . org.springframework.boot.web.servlet.support.ServletContext ) ; assertThat ( this . org.springframework.boot.web.servlet.support.SpringApplication . getListeners ( ) ) . hasAtLeastOneElementOfType ( ServletContextApplicationListener .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.web.servlet.support.WebApplicationContext org.springframework.boot.web.servlet.support.WebApplicationContext ( SpringApplication org.springframework.boot.web.servlet.support.SpringApplication ) { org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests .this . org.springframework.boot.web.servlet.support.SpringApplication = org.springframework.boot.web.servlet.support.SpringApplication ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.web.servlet.support.SpringApplicationBuilder org.springframework.boot.web.servlet.support.SpringApplicationBuilder ( ) { return this . org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.CustomSpringApplicationBuilder ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.web.servlet.support.SpringApplicationBuilder org.springframework.boot.web.servlet.support.SpringApplicationBuilder ( SpringApplicationBuilder org.springframework.boot.web.servlet.support.SpringApplicationBuilder ) { return org.springframework.boot.web.servlet.support.SpringApplicationBuilder . sources ( org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.Config .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.web.servlet.support.SpringApplicationBuilder org.springframework.boot.web.servlet.support.SpringApplicationBuilder ( SpringApplicationBuilder org.springframework.boot.web.servlet.support.SpringApplicationBuilder ) { return org.springframework.boot.web.servlet.support.SpringApplicationBuilder . sources ( org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.Config .class ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { setRegisterErrorPageFilter ( false ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.web.servlet.support.ServletWebServerFactory org.springframework.boot.web.servlet.support.ServletWebServerFactory ( ) { return new UndertowServletWebServerFactory ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.web.servlet.support.SpringApplication org.springframework.boot.web.servlet.support.SpringApplication ( ) { this . boolean = true ; return super. build ( ) ; }  <METHOD_END>
