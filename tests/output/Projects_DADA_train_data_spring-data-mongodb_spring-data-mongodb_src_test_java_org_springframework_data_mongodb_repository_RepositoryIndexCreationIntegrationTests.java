<METHOD_START> @ After public void void ( ) { org.springframework.data.mongodb.repository.MongoOperations . execute ( Person .class , new CollectionCallback < java.lang.Void > ( ) { public java.lang.Void java.lang.Void ( MongoCollection < Document > org.springframework.data.mongodb.repository.MongoCollection<org.springframework.data.mongodb.repository.Document> ) throws org.springframework.data.mongodb.repository.MongoException , org.springframework.data.mongodb.repository.DataAccessException { java.util.List<org.springframework.data.mongodb.repository.Document> < Document > java.util.List<org.springframework.data.mongodb.repository.Document> = new java.util.ArrayList<org.springframework.data.mongodb.repository.Document> < Document > ( ) ; org.springframework.data.mongodb.repository.MongoCollection<org.springframework.data.mongodb.repository.Document> . listIndexes ( Document .class ) . into ( java.util.List<org.springframework.data.mongodb.repository.Document> ) ; for ( Document org.springframework.data.mongodb.repository.Document : java.util.List<org.springframework.data.mongodb.repository.Document> ) { java.lang.String java.lang.String = org.springframework.data.mongodb.repository.Document . get ( STRING ) . toString ( ) ; if ( java.lang.String . boolean ( STRING ) ) { org.springframework.data.mongodb.repository.MongoCollection<org.springframework.data.mongodb.repository.Document> . dropIndex ( java.lang.String ) ; } } return null ; } } ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Void java.lang.Void ( MongoCollection < Document > org.springframework.data.mongodb.repository.MongoCollection<org.springframework.data.mongodb.repository.Document> ) throws org.springframework.data.mongodb.repository.MongoException , org.springframework.data.mongodb.repository.DataAccessException { java.util.List<org.springframework.data.mongodb.repository.Document> < Document > java.util.List<org.springframework.data.mongodb.repository.Document> = new java.util.ArrayList<org.springframework.data.mongodb.repository.Document> < Document > ( ) ; org.springframework.data.mongodb.repository.MongoCollection<org.springframework.data.mongodb.repository.Document> . listIndexes ( Document .class ) . into ( java.util.List<org.springframework.data.mongodb.repository.Document> ) ; for ( Document org.springframework.data.mongodb.repository.Document : java.util.List<org.springframework.data.mongodb.repository.Document> ) { java.lang.String java.lang.String = org.springframework.data.mongodb.repository.Document . get ( STRING ) . toString ( ) ; if ( java.lang.String . boolean ( STRING ) ) { org.springframework.data.mongodb.repository.MongoCollection<org.springframework.data.mongodb.repository.Document> . dropIndex ( java.lang.String ) ; } } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.IndexInfo> < IndexInfo > java.util.List<org.springframework.data.mongodb.repository.IndexInfo> = org.springframework.data.mongodb.repository.MongoOperations . indexOps ( Person .class ) . getIndexInfo ( ) ; void ( java.util.List<org.springframework.data.mongodb.repository.IndexInfo> , STRING ) ; void ( java.util.List<org.springframework.data.mongodb.repository.IndexInfo> , STRING ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.util.List<org.springframework.data.mongodb.repository.IndexInfo> < IndexInfo > java.util.List<org.springframework.data.mongodb.repository.IndexInfo> , java.lang.String ... java.lang.String[] ) { for ( IndexInfo org.springframework.data.mongodb.repository.IndexInfo : java.util.List<org.springframework.data.mongodb.repository.IndexInfo> ) { if ( org.springframework.data.mongodb.repository.IndexInfo . isIndexForFields ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ) { return; } } fail ( java.lang.String . java.lang.String ( STRING , java.lang.String[] , java.util.List<org.springframework.data.mongodb.repository.IndexInfo> ) ) ; }  <METHOD_END>
