<METHOD_START> public void void ( ResourceUrlProvider org.springframework.web.reactive.resource.ResourceUrlProvider ) { this . org.springframework.web.reactive.resource.ResourceUrlProvider = org.springframework.web.reactive.resource.ResourceUrlProvider ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.resource.ResourceUrlProvider org.springframework.web.reactive.resource.ResourceUrlProvider ( ) { return this . org.springframework.web.reactive.resource.ResourceUrlProvider ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.resource.Mono<java.lang.String> < java.lang.String > org.springframework.web.reactive.resource.Mono<java.lang.String> ( java.lang.String java.lang.String , ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange , Resource org.springframework.web.reactive.resource.Resource , ResourceTransformerChain org.springframework.web.reactive.resource.ResourceTransformerChain ) { if ( java.lang.String . boolean ( STRING ) ) { ResourceUrlProvider org.springframework.web.reactive.resource.ResourceUrlProvider = org.springframework.web.reactive.resource.ResourceUrlProvider ( ) ; return ( org.springframework.web.reactive.resource.ResourceUrlProvider != null ? org.springframework.web.reactive.resource.ResourceUrlProvider . getForRequestUrl ( org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String ) : Mono . empty ( ) ) ; } else { return org.springframework.web.reactive.resource.ResourceTransformerChain . getResolverChain ( ) . resolveUrlPath ( java.lang.String , java.util.Collections . java.util.List ( org.springframework.web.reactive.resource.Resource ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange ) { java.lang.String java.lang.String = org.springframework.web.reactive.resource.ServerWebExchange . getRequest ( ) . getURI ( ) . getPath ( ) ; java.lang.String java.lang.String = StringUtils . applyRelativePath ( java.lang.String , java.lang.String ) ; return StringUtils . cleanPath ( java.lang.String ) ; }  <METHOD_END>
