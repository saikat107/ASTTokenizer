<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; assertTrue ( STRING + java.io.File . java.lang.String ( ) , java.io.File . boolean ( ) ) ; SessionFactory < LsEntry > org.springframework.integration.sftp.outbound.SessionFactory<org.springframework.integration.sftp.outbound.LsEntry> = new org.springframework.integration.sftp.outbound.SftpOutboundTests.TestSftpSessionFactory ( ) ; FileTransferringMessageHandler < LsEntry > org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> = new FileTransferringMessageHandler < LsEntry > ( org.springframework.integration.sftp.outbound.SessionFactory<org.springframework.integration.sftp.outbound.LsEntry> ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . setRemoteDirectoryExpression ( new LiteralExpression ( java.io.File . java.lang.String ( ) ) ) ; DefaultFileNameGenerator org.springframework.integration.sftp.outbound.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.sftp.outbound.DefaultFileNameGenerator . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.sftp.outbound.DefaultFileNameGenerator . setExpression ( STRING ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . setFileNameGenerator ( org.springframework.integration.sftp.outbound.DefaultFileNameGenerator ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . afterPropertiesSet ( ) ; java.io.File java.io.File = java.io.File . java.io.File ( STRING , STRING , new java.io.File ( STRING ) ) ; java.io.File . void ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , java.io.File . java.lang.String ( ) + STRING ) ; java.io.File . void ( ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . handleMessage ( new GenericMessage <> ( java.io.File ) ) ; assertTrue ( STRING , java.io.File . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING , STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } SessionFactory < LsEntry > org.springframework.integration.sftp.outbound.SessionFactory<org.springframework.integration.sftp.outbound.LsEntry> = new org.springframework.integration.sftp.outbound.SftpOutboundTests.TestSftpSessionFactory ( ) ; FileTransferringMessageHandler < LsEntry > org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> = new FileTransferringMessageHandler <> ( org.springframework.integration.sftp.outbound.SessionFactory<org.springframework.integration.sftp.outbound.LsEntry> ) ; DefaultFileNameGenerator org.springframework.integration.sftp.outbound.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.sftp.outbound.DefaultFileNameGenerator . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.sftp.outbound.DefaultFileNameGenerator . setExpression ( STRING ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . setFileNameGenerator ( org.springframework.integration.sftp.outbound.DefaultFileNameGenerator ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . afterPropertiesSet ( ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( new java.io.File ( STRING , STRING ) . boolean ( ) ) ; byte [] byte[] = FileCopyUtils . copyToByteArray ( java.io.File ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING , STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } SessionFactory < LsEntry > org.springframework.integration.sftp.outbound.SessionFactory<org.springframework.integration.sftp.outbound.LsEntry> = new org.springframework.integration.sftp.outbound.SftpOutboundTests.TestSftpSessionFactory ( ) ; FileTransferringMessageHandler < LsEntry > org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> = new FileTransferringMessageHandler < LsEntry > ( org.springframework.integration.sftp.outbound.SessionFactory<org.springframework.integration.sftp.outbound.LsEntry> ) ; DefaultFileNameGenerator org.springframework.integration.sftp.outbound.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.sftp.outbound.DefaultFileNameGenerator . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.sftp.outbound.DefaultFileNameGenerator . setExpression ( STRING ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . setFileNameGenerator ( org.springframework.integration.sftp.outbound.DefaultFileNameGenerator ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . afterPropertiesSet ( ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . handleMessage ( new GenericMessage < byte [] > ( STRING . byte[] ( ) ) ) ; assertTrue ( new java.io.File ( STRING , STRING ) . boolean ( ) ) ; byte [] byte[] = FileCopyUtils . copyToByteArray ( java.io.File ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; assertTrue ( STRING + java.io.File . java.lang.String ( ) , java.io.File . boolean ( ) ) ; java.io.File java.io.File = java.io.File . java.io.File ( STRING , STRING ) ; java.io.File . void ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , java.io.File . java.lang.String ( ) ) ; java.io.File . void ( ) ; ClassPathXmlApplicationContext org.springframework.integration.sftp.outbound.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.sftp.outbound.SftpOutboundTests> ( ) ) ; MessageChannel org.springframework.integration.sftp.outbound.MessageChannel = org.springframework.integration.sftp.outbound.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.sftp.outbound.MessageChannel . send ( new GenericMessage < java.io.File > ( java.io.File ) ) ; assertTrue ( STRING , java.io.File . boolean ( ) ) ; org.springframework.integration.sftp.outbound.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.sftp.outbound.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.sftp.outbound.SftpOutboundTests> ( ) ) ; MessageChannel org.springframework.integration.sftp.outbound.MessageChannel = org.springframework.integration.sftp.outbound.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.sftp.outbound.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; PollableChannel org.springframework.integration.sftp.outbound.PollableChannel = org.springframework.integration.sftp.outbound.ClassPathXmlApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < ? > org.springframework.integration.sftp.outbound.Message<?> = org.springframework.integration.sftp.outbound.PollableChannel . receive ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.sftp.outbound.Message<> . getPayload ( ) ; assertTrue ( java.lang.Object instanceof java.util.List<?> < ? > ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<? extends org.springframework.integration.sftp.outbound.FileInfo<?>> < ? extends FileInfo < ? > > java.util.List<? extends org.springframework.integration.sftp.outbound.FileInfo<?>> = ( java.util.List<? extends org.springframework.integration.sftp.outbound.FileInfo<?>> < ? extends FileInfo < ? > > ) java.lang.Object ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( new java.io.File ( STRING ) . java.lang.String[] ( ) ) ; for ( FileInfo < ? > org.springframework.integration.sftp.outbound.FileInfo<?> : java.util.List<> ) { assertTrue ( java.util.List<java.lang.String> . boolean ( org.springframework.integration.sftp.outbound.FileInfo<> . getFilename ( ) ) ) ; } org.springframework.integration.sftp.outbound.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) Session < LsEntry > org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> = mock ( Session .class ) ; when ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> . exists ( anyString ( ) ) ) . thenReturn ( java.lang.Boolean . java.lang.Boolean ) ; @ java.lang.SuppressWarnings ( STRING ) SessionFactory < LsEntry > org.springframework.integration.sftp.outbound.SessionFactory<org.springframework.integration.sftp.outbound.LsEntry> = mock ( SessionFactory .class ) ; when ( org.springframework.integration.sftp.outbound.SessionFactory<org.springframework.integration.sftp.outbound.LsEntry> . getSession ( ) ) . thenReturn ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> ) ; FileTransferringMessageHandler < LsEntry > org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> = new FileTransferringMessageHandler < LsEntry > ( org.springframework.integration.sftp.outbound.SessionFactory<org.springframework.integration.sftp.outbound.LsEntry> ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . setAutoCreateDirectory ( true ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . afterPropertiesSet ( ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; doAnswer ( invocation -> { madeDirs . add ( invocation . getArgument ( NUMBER ) ) ; return null ; } ) . when ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> ) . mkdir ( anyString ( ) ) ; org.springframework.integration.sftp.outbound.FileTransferringMessageHandler<org.springframework.integration.sftp.outbound.LsEntry> . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JSch org.springframework.integration.sftp.outbound.JSch = spy ( new JSch ( ) ) ; java.lang.reflect.Constructor<com.jcraft.jsch.Session> < com . com.jcraft . com.jcraft . com.jcraft > java.lang.reflect.Constructor<com.jcraft.jsch.Session> = com . com.jcraft . com.jcraft . com.jcraft .class . java.lang.reflect.Constructor<com.jcraft.jsch.Session> ( JSch .class , java.lang.String .class , java.lang.String .class , int .class ) ; java.lang.reflect.Constructor<com.jcraft.jsch.Session> . setAccessible ( true ) ; com . com.jcraft . com.jcraft . com.jcraft com.jcraft.jsch.Session = spy ( java.lang.reflect.Constructor<com.jcraft.jsch.Session> . newInstance ( org.springframework.integration.sftp.outbound.JSch , STRING , STRING , NUMBER ) ) ; com . com.jcraft . com.jcraft . com.jcraft com.jcraft.jsch.Session = spy ( java.lang.reflect.Constructor<com.jcraft.jsch.Session> . newInstance ( org.springframework.integration.sftp.outbound.JSch , STRING , STRING , NUMBER ) ) ; willAnswer ( invocation -> { new DirectFieldAccessor ( jschSession1 ) . setPropertyValue ( STRING , true ) ; return null ; } ) . given ( com.jcraft.jsch.Session ) . connect ( ) ; willAnswer ( invocation -> { new DirectFieldAccessor ( jschSession2 ) . setPropertyValue ( STRING , true ) ; return null ; } ) . given ( com.jcraft.jsch.Session ) . connect ( ) ; when ( org.springframework.integration.sftp.outbound.JSch . getSession ( STRING , STRING , NUMBER ) ) . thenReturn ( com.jcraft.jsch.Session , com.jcraft.jsch.Session ) ; final ChannelSftp org.springframework.integration.sftp.outbound.ChannelSftp = spy ( new ChannelSftp ( ) ) ; doReturn ( STRING ) . when ( org.springframework.integration.sftp.outbound.ChannelSftp ) . toString ( ) ; final ChannelSftp org.springframework.integration.sftp.outbound.ChannelSftp = spy ( new ChannelSftp ( ) ) ; doReturn ( STRING ) . when ( org.springframework.integration.sftp.outbound.ChannelSftp ) . toString ( ) ; new DirectFieldAccessor ( org.springframework.integration.sftp.outbound.ChannelSftp ) . setPropertyValue ( STRING , com.jcraft.jsch.Session ) ; new DirectFieldAccessor ( org.springframework.integration.sftp.outbound.ChannelSftp ) . setPropertyValue ( STRING , com.jcraft.jsch.Session ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; doAnswer ( invocation -> n . getAndIncrement ( ) == NUMBER ? channel1 : channel2 ) . when ( com.jcraft.jsch.Session ) . openChannel ( STRING ) ; DefaultSftpSessionFactory org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory = new DefaultSftpSessionFactory ( org.springframework.integration.sftp.outbound.JSch , true ) ; org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory . setHost ( STRING ) ; org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory . setUser ( STRING ) ; org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory . setPassword ( STRING ) ; void ( org.springframework.integration.sftp.outbound.ChannelSftp ) ; void ( org.springframework.integration.sftp.outbound.ChannelSftp ) ; Session < LsEntry > org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> = org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory . getSession ( ) ; Session < LsEntry > org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> = org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory . getSession ( ) ; assertSame ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; assertSame ( org.springframework.integration.sftp.outbound.ChannelSftp , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; assertSame ( org.springframework.integration.sftp.outbound.ChannelSftp , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JSch org.springframework.integration.sftp.outbound.JSch = spy ( new JSch ( ) ) ; java.lang.reflect.Constructor<com.jcraft.jsch.Session> < com . com.jcraft . com.jcraft . com.jcraft > java.lang.reflect.Constructor<com.jcraft.jsch.Session> = com . com.jcraft . com.jcraft . com.jcraft .class . java.lang.reflect.Constructor<com.jcraft.jsch.Session> ( JSch .class , java.lang.String .class , java.lang.String .class , int .class ) ; java.lang.reflect.Constructor<com.jcraft.jsch.Session> . setAccessible ( true ) ; com . com.jcraft . com.jcraft . com.jcraft com.jcraft.jsch.Session = spy ( java.lang.reflect.Constructor<com.jcraft.jsch.Session> . newInstance ( org.springframework.integration.sftp.outbound.JSch , STRING , STRING , NUMBER ) ) ; com . com.jcraft . com.jcraft . com.jcraft com.jcraft.jsch.Session = spy ( java.lang.reflect.Constructor<com.jcraft.jsch.Session> . newInstance ( org.springframework.integration.sftp.outbound.JSch , STRING , STRING , NUMBER ) ) ; new DirectFieldAccessor ( com.jcraft.jsch.Session ) . setPropertyValue ( STRING , true ) ; new DirectFieldAccessor ( com.jcraft.jsch.Session ) . setPropertyValue ( STRING , true ) ; when ( org.springframework.integration.sftp.outbound.JSch . getSession ( STRING , STRING , NUMBER ) ) . thenReturn ( com.jcraft.jsch.Session , com.jcraft.jsch.Session ) ; ChannelSftp org.springframework.integration.sftp.outbound.ChannelSftp = spy ( new ChannelSftp ( ) ) ; ChannelSftp org.springframework.integration.sftp.outbound.ChannelSftp = spy ( new ChannelSftp ( ) ) ; new DirectFieldAccessor ( org.springframework.integration.sftp.outbound.ChannelSftp ) . setPropertyValue ( STRING , com.jcraft.jsch.Session ) ; new DirectFieldAccessor ( org.springframework.integration.sftp.outbound.ChannelSftp ) . setPropertyValue ( STRING , com.jcraft.jsch.Session ) ; doReturn ( org.springframework.integration.sftp.outbound.ChannelSftp ) . when ( com.jcraft.jsch.Session ) . openChannel ( STRING ) ; doReturn ( org.springframework.integration.sftp.outbound.ChannelSftp ) . when ( com.jcraft.jsch.Session ) . openChannel ( STRING ) ; DefaultSftpSessionFactory org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory = new DefaultSftpSessionFactory ( org.springframework.integration.sftp.outbound.JSch , false ) ; org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory . setHost ( STRING ) ; org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory . setUser ( STRING ) ; org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory . setPassword ( STRING ) ; void ( org.springframework.integration.sftp.outbound.ChannelSftp ) ; void ( org.springframework.integration.sftp.outbound.ChannelSftp ) ; Session < LsEntry > org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> = org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory . getSession ( ) ; Session < LsEntry > org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> = org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory . getSession ( ) ; assertNotSame ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; assertSame ( org.springframework.integration.sftp.outbound.ChannelSftp , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; assertSame ( org.springframework.integration.sftp.outbound.ChannelSftp , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JSch org.springframework.integration.sftp.outbound.JSch = spy ( new JSch ( ) ) ; java.lang.reflect.Constructor<com.jcraft.jsch.Session> < com . com.jcraft . com.jcraft . com.jcraft > java.lang.reflect.Constructor<com.jcraft.jsch.Session> = com . com.jcraft . com.jcraft . com.jcraft .class . java.lang.reflect.Constructor<com.jcraft.jsch.Session> ( JSch .class , java.lang.String .class , java.lang.String .class , int .class ) ; java.lang.reflect.Constructor<com.jcraft.jsch.Session> . setAccessible ( true ) ; com . com.jcraft . com.jcraft . com.jcraft com.jcraft.jsch.Session = spy ( java.lang.reflect.Constructor<com.jcraft.jsch.Session> . newInstance ( org.springframework.integration.sftp.outbound.JSch , STRING , STRING , NUMBER ) ) ; com . com.jcraft . com.jcraft . com.jcraft com.jcraft.jsch.Session = spy ( java.lang.reflect.Constructor<com.jcraft.jsch.Session> . newInstance ( org.springframework.integration.sftp.outbound.JSch , STRING , STRING , NUMBER ) ) ; willAnswer ( invocation -> { new DirectFieldAccessor ( jschSession1 ) . setPropertyValue ( STRING , true ) ; return null ; } ) . given ( com.jcraft.jsch.Session ) . connect ( ) ; willAnswer ( invocation -> { new DirectFieldAccessor ( jschSession2 ) . setPropertyValue ( STRING , true ) ; return null ; } ) . given ( com.jcraft.jsch.Session ) . connect ( ) ; when ( org.springframework.integration.sftp.outbound.JSch . getSession ( STRING , STRING , NUMBER ) ) . thenReturn ( com.jcraft.jsch.Session , com.jcraft.jsch.Session ) ; final ChannelSftp org.springframework.integration.sftp.outbound.ChannelSftp = spy ( new ChannelSftp ( ) ) ; doReturn ( STRING ) . when ( org.springframework.integration.sftp.outbound.ChannelSftp ) . toString ( ) ; final ChannelSftp org.springframework.integration.sftp.outbound.ChannelSftp = spy ( new ChannelSftp ( ) ) ; doReturn ( STRING ) . when ( org.springframework.integration.sftp.outbound.ChannelSftp ) . toString ( ) ; final ChannelSftp org.springframework.integration.sftp.outbound.ChannelSftp = spy ( new ChannelSftp ( ) ) ; doReturn ( STRING ) . when ( org.springframework.integration.sftp.outbound.ChannelSftp ) . toString ( ) ; final ChannelSftp org.springframework.integration.sftp.outbound.ChannelSftp = spy ( new ChannelSftp ( ) ) ; doReturn ( STRING ) . when ( org.springframework.integration.sftp.outbound.ChannelSftp ) . toString ( ) ; new DirectFieldAccessor ( org.springframework.integration.sftp.outbound.ChannelSftp ) . setPropertyValue ( STRING , com.jcraft.jsch.Session ) ; new DirectFieldAccessor ( org.springframework.integration.sftp.outbound.ChannelSftp ) . setPropertyValue ( STRING , com.jcraft.jsch.Session ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; doAnswer ( invocation -> n . getAndIncrement ( ) == NUMBER ? channel1 : channel2 ) . when ( com.jcraft.jsch.Session ) . openChannel ( STRING ) ; doAnswer ( invocation -> n . getAndIncrement ( ) < NUMBER ? channel3 : channel4 ) . when ( com.jcraft.jsch.Session ) . openChannel ( STRING ) ; DefaultSftpSessionFactory org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory = new DefaultSftpSessionFactory ( org.springframework.integration.sftp.outbound.JSch , true ) ; org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory . setHost ( STRING ) ; org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory . setUser ( STRING ) ; org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory . setPassword ( STRING ) ; CachingSessionFactory < LsEntry > org.springframework.integration.sftp.outbound.CachingSessionFactory<org.springframework.integration.sftp.outbound.LsEntry> = new CachingSessionFactory < LsEntry > ( org.springframework.integration.sftp.outbound.DefaultSftpSessionFactory ) ; void ( org.springframework.integration.sftp.outbound.ChannelSftp ) ; void ( org.springframework.integration.sftp.outbound.ChannelSftp ) ; void ( org.springframework.integration.sftp.outbound.ChannelSftp ) ; void ( org.springframework.integration.sftp.outbound.ChannelSftp ) ; Session < LsEntry > org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> = org.springframework.integration.sftp.outbound.CachingSessionFactory<org.springframework.integration.sftp.outbound.LsEntry> . getSession ( ) ; Session < LsEntry > org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> = org.springframework.integration.sftp.outbound.CachingSessionFactory<org.springframework.integration.sftp.outbound.LsEntry> . getSession ( ) ; assertSame ( com.jcraft.jsch.Session , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; assertSame ( org.springframework.integration.sftp.outbound.ChannelSftp , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; assertSame ( org.springframework.integration.sftp.outbound.ChannelSftp , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; assertSame ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> . close ( ) ; Session < LsEntry > org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> = org.springframework.integration.sftp.outbound.CachingSessionFactory<org.springframework.integration.sftp.outbound.LsEntry> . getSession ( ) ; assertSame ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; assertSame ( org.springframework.integration.sftp.outbound.ChannelSftp , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> . close ( ) ; org.springframework.integration.sftp.outbound.CachingSessionFactory<org.springframework.integration.sftp.outbound.LsEntry> . resetCache ( ) ; verify ( com.jcraft.jsch.Session , never ( ) ) . disconnect ( ) ; org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> = org.springframework.integration.sftp.outbound.CachingSessionFactory<org.springframework.integration.sftp.outbound.LsEntry> . getSession ( ) ; assertSame ( com.jcraft.jsch.Session , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; assertNotSame ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; assertSame ( org.springframework.integration.sftp.outbound.ChannelSftp , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> . close ( ) ; verify ( com.jcraft.jsch.Session ) . disconnect ( ) ; org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> = org.springframework.integration.sftp.outbound.CachingSessionFactory<org.springframework.integration.sftp.outbound.LsEntry> . getSession ( ) ; assertSame ( com.jcraft.jsch.Session , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; assertNotSame ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; assertSame ( org.springframework.integration.sftp.outbound.ChannelSftp , TestUtils . getPropertyValue ( org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> , STRING ) ) ; org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> . close ( ) ; org.springframework.integration.sftp.outbound.Session<org.springframework.integration.sftp.outbound.LsEntry> . close ( ) ; verify ( com.jcraft.jsch.Session , never ( ) ) . disconnect ( ) ; org.springframework.integration.sftp.outbound.CachingSessionFactory<org.springframework.integration.sftp.outbound.LsEntry> . resetCache ( ) ; verify ( com.jcraft.jsch.Session ) . disconnect ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ChannelSftp org.springframework.integration.sftp.outbound.ChannelSftp ) throws org.springframework.integration.sftp.outbound.JSchException { doAnswer ( invocation -> null ) . when ( org.springframework.integration.sftp.outbound.ChannelSftp ) . connect ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.sftp.outbound.SftpSession org.springframework.integration.sftp.outbound.SftpSession ( ) { try { ChannelSftp org.springframework.integration.sftp.outbound.ChannelSftp = mock ( ChannelSftp .class ) ; doAnswer ( invocation -> { File file = new File ( ( String ) invocation . getArgument ( NUMBER ) ) ; assertTrue ( file . getName ( ) . endsWith ( STRING ) ) ; FileCopyUtils . copy ( ( InputStream ) invocation . getArgument ( NUMBER ) , new FileOutputStream ( file ) ) ; return null ; } ) . when ( org.springframework.integration.sftp.outbound.ChannelSftp ) . put ( Mockito . any ( java.io.InputStream .class ) , Mockito . anyString ( ) ) ; doAnswer ( invocation -> { File file = new File ( ( String ) invocation . getArgument ( NUMBER ) ) ; assertTrue ( file . getName ( ) . endsWith ( STRING ) ) ; File renameToFile = new File ( ( String ) invocation . getArgument ( NUMBER ) ) ; file . renameTo ( renameToFile ) ; return null ; } ) . when ( org.springframework.integration.sftp.outbound.ChannelSftp ) . rename ( Mockito . anyString ( ) , Mockito . anyString ( ) ) ; java.lang.String [] java.lang.String[] = new java.io.File ( STRING ) . java.lang.String[] ( ) ; java.util.Vector<org.springframework.integration.sftp.outbound.LsEntry> < LsEntry > java.util.Vector<org.springframework.integration.sftp.outbound.LsEntry> = new java.util.Vector<org.springframework.integration.sftp.outbound.LsEntry> < LsEntry > ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { LsEntry org.springframework.integration.sftp.outbound.LsEntry = mock ( LsEntry .class ) ; SftpATTRS org.springframework.integration.sftp.outbound.SftpATTRS = mock ( SftpATTRS .class ) ; when ( org.springframework.integration.sftp.outbound.LsEntry . getAttrs ( ) ) . thenReturn ( org.springframework.integration.sftp.outbound.SftpATTRS ) ; when ( org.springframework.integration.sftp.outbound.LsEntry . getFilename ( ) ) . thenReturn ( java.lang.String ) ; java.util.Vector<org.springframework.integration.sftp.outbound.LsEntry> . add ( org.springframework.integration.sftp.outbound.LsEntry ) ; } when ( org.springframework.integration.sftp.outbound.ChannelSftp . ls ( STRING ) ) . thenReturn ( java.util.Vector<org.springframework.integration.sftp.outbound.LsEntry> ) ; when ( com.jcraft.jsch.Session . openChannel ( STRING ) ) . thenReturn ( org.springframework.integration.sftp.outbound.ChannelSftp ) ; return SftpTestSessionFactory . createSftpSession ( com.jcraft.jsch.Session ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
