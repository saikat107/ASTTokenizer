<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new OriginHandshakeInterceptor ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler = Mockito . mock ( WebSocketHandler .class ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; OriginHandshakeInterceptor org.springframework.web.socket.server.support.OriginHandshakeInterceptor = new OriginHandshakeInterceptor ( java.util.List<java.lang.String> ) ; assertTrue ( org.springframework.web.socket.server.support.OriginHandshakeInterceptor . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) ; assertNotEquals ( servletResponse . getStatus ( ) , HttpStatus . FORBIDDEN . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler = Mockito . mock ( WebSocketHandler .class ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; OriginHandshakeInterceptor org.springframework.web.socket.server.support.OriginHandshakeInterceptor = new OriginHandshakeInterceptor ( java.util.List<java.lang.String> ) ; assertFalse ( org.springframework.web.socket.server.support.OriginHandshakeInterceptor . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) ; assertEquals ( servletResponse . getStatus ( ) , HttpStatus . FORBIDDEN . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler = Mockito . mock ( WebSocketHandler .class ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; OriginHandshakeInterceptor org.springframework.web.socket.server.support.OriginHandshakeInterceptor = new OriginHandshakeInterceptor ( java.util.List<java.lang.String> ) ; assertTrue ( org.springframework.web.socket.server.support.OriginHandshakeInterceptor . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) ; assertNotEquals ( servletResponse . getStatus ( ) , HttpStatus . FORBIDDEN . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler = Mockito . mock ( WebSocketHandler .class ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; OriginHandshakeInterceptor org.springframework.web.socket.server.support.OriginHandshakeInterceptor = new OriginHandshakeInterceptor ( java.util.List<java.lang.String> ) ; assertFalse ( org.springframework.web.socket.server.support.OriginHandshakeInterceptor . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) ; assertEquals ( servletResponse . getStatus ( ) , HttpStatus . FORBIDDEN . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler = Mockito . mock ( WebSocketHandler .class ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; OriginHandshakeInterceptor org.springframework.web.socket.server.support.OriginHandshakeInterceptor = new OriginHandshakeInterceptor ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.concurrent.ConcurrentSkipListSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; org.springframework.web.socket.server.support.OriginHandshakeInterceptor . setAllowedOrigins ( java.util.Set<java.lang.String> ) ; assertFalse ( org.springframework.web.socket.server.support.OriginHandshakeInterceptor . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) ; assertEquals ( servletResponse . getStatus ( ) , HttpStatus . FORBIDDEN . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler = Mockito . mock ( WebSocketHandler .class ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; OriginHandshakeInterceptor org.springframework.web.socket.server.support.OriginHandshakeInterceptor = new OriginHandshakeInterceptor ( ) ; org.springframework.web.socket.server.support.OriginHandshakeInterceptor . setAllowedOrigins ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; assertTrue ( org.springframework.web.socket.server.support.OriginHandshakeInterceptor . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) ; assertNotEquals ( servletResponse . getStatus ( ) , HttpStatus . FORBIDDEN . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler = Mockito . mock ( WebSocketHandler .class ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; this . servletRequest . setServerName ( STRING ) ; OriginHandshakeInterceptor org.springframework.web.socket.server.support.OriginHandshakeInterceptor = new OriginHandshakeInterceptor ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; assertTrue ( org.springframework.web.socket.server.support.OriginHandshakeInterceptor . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) ; assertNotEquals ( servletResponse . getStatus ( ) , HttpStatus . FORBIDDEN . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler = Mockito . mock ( WebSocketHandler .class ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; this . servletRequest . setServerName ( STRING ) ; OriginHandshakeInterceptor org.springframework.web.socket.server.support.OriginHandshakeInterceptor = new OriginHandshakeInterceptor ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; assertTrue ( org.springframework.web.socket.server.support.OriginHandshakeInterceptor . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) ; assertNotEquals ( servletResponse . getStatus ( ) , HttpStatus . FORBIDDEN . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler = Mockito . mock ( WebSocketHandler .class ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; this . servletRequest . setServerName ( STRING ) ; OriginHandshakeInterceptor org.springframework.web.socket.server.support.OriginHandshakeInterceptor = new OriginHandshakeInterceptor ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; assertFalse ( org.springframework.web.socket.server.support.OriginHandshakeInterceptor . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) ; assertEquals ( servletResponse . getStatus ( ) , HttpStatus . FORBIDDEN . value ( ) ) ; }  <METHOD_END>
