<METHOD_START> public void ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { this( org.springframework.context.annotation.BeanDefinitionRegistry , true ); }  <METHOD_END>
<METHOD_START> public void ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry , boolean boolean ) { this( org.springframework.context.annotation.BeanDefinitionRegistry , boolean , org.springframework.context.annotation.Environment ( org.springframework.context.annotation.BeanDefinitionRegistry ) ); }  <METHOD_END>
<METHOD_START> public void ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry , boolean boolean , Environment org.springframework.context.annotation.Environment ) { this( org.springframework.context.annotation.BeanDefinitionRegistry , boolean , org.springframework.context.annotation.Environment , ( org.springframework.context.annotation.BeanDefinitionRegistry instanceof ResourceLoader ? ( ResourceLoader ) org.springframework.context.annotation.BeanDefinitionRegistry : null ) ); }  <METHOD_END>
<METHOD_START> public void ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry , boolean boolean , Environment org.springframework.context.annotation.Environment , ResourceLoader org.springframework.context.annotation.ResourceLoader ) { Assert . notNull ( org.springframework.context.annotation.BeanDefinitionRegistry , STRING ) ; this . org.springframework.context.annotation.BeanDefinitionRegistry = org.springframework.context.annotation.BeanDefinitionRegistry ; if ( boolean ) { registerDefaultFilters ( ) ; } setEnvironment ( org.springframework.context.annotation.Environment ) ; setResourceLoader ( org.springframework.context.annotation.ResourceLoader ) ; }  <METHOD_END>
<METHOD_START> public final org.springframework.context.annotation.BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ( ) { return this . org.springframework.context.annotation.BeanDefinitionRegistry ; }  <METHOD_END>
<METHOD_START> public void void ( BeanDefinitionDefaults org.springframework.context.annotation.BeanDefinitionDefaults ) { this . org.springframework.context.annotation.BeanDefinitionDefaults = ( org.springframework.context.annotation.BeanDefinitionDefaults != null ? org.springframework.context.annotation.BeanDefinitionDefaults : new BeanDefinitionDefaults ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.BeanDefinitionDefaults org.springframework.context.annotation.BeanDefinitionDefaults ( ) { return this . org.springframework.context.annotation.BeanDefinitionDefaults ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( BeanNameGenerator org.springframework.context.annotation.BeanNameGenerator ) { this . org.springframework.context.annotation.BeanNameGenerator = ( org.springframework.context.annotation.BeanNameGenerator != null ? org.springframework.context.annotation.BeanNameGenerator : new AnnotationBeanNameGenerator ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ScopeMetadataResolver org.springframework.context.annotation.ScopeMetadataResolver ) { this . org.springframework.context.annotation.ScopeMetadataResolver = ( org.springframework.context.annotation.ScopeMetadataResolver != null ? org.springframework.context.annotation.ScopeMetadataResolver : new AnnotationScopeMetadataResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ScopedProxyMode org.springframework.context.annotation.ScopedProxyMode ) { this . org.springframework.context.annotation.ScopeMetadataResolver = new AnnotationScopeMetadataResolver ( org.springframework.context.annotation.ScopedProxyMode ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.String ... java.lang.String[] ) { int int = this . org.springframework.context.annotation.BeanDefinitionRegistry . getBeanDefinitionCount ( ) ; java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> ( java.lang.String[] ) ; if ( this . boolean ) { AnnotationConfigUtils . registerAnnotationConfigProcessors ( this . org.springframework.context.annotation.BeanDefinitionRegistry ) ; } return ( this . org.springframework.context.annotation.BeanDefinitionRegistry . getBeanDefinitionCount ( ) - int ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> < BeanDefinitionHolder > java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> ( java.lang.String ... java.lang.String[] ) { Assert . notEmpty ( java.lang.String[] , STRING ) ; java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> < BeanDefinitionHolder > java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> = new java.util.LinkedHashSet<org.springframework.context.annotation.BeanDefinitionHolder> <> ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = findCandidateComponents ( java.lang.String ) ; for ( BeanDefinition org.springframework.context.annotation.BeanDefinition : java.util.Set<org.springframework.context.annotation.BeanDefinition> ) { ScopeMetadata org.springframework.context.annotation.ScopeMetadata = this . org.springframework.context.annotation.ScopeMetadataResolver . resolveScopeMetadata ( org.springframework.context.annotation.BeanDefinition ) ; org.springframework.context.annotation.BeanDefinition . setScope ( org.springframework.context.annotation.ScopeMetadata . getScopeName ( ) ) ; java.lang.String java.lang.String = this . org.springframework.context.annotation.BeanNameGenerator . generateBeanName ( org.springframework.context.annotation.BeanDefinition , this . org.springframework.context.annotation.BeanDefinitionRegistry ) ; if ( org.springframework.context.annotation.BeanDefinition instanceof AbstractBeanDefinition ) { void ( ( AbstractBeanDefinition ) org.springframework.context.annotation.BeanDefinition , java.lang.String ) ; } if ( org.springframework.context.annotation.BeanDefinition instanceof AnnotatedBeanDefinition ) { AnnotationConfigUtils . processCommonDefinitionAnnotations ( ( AnnotatedBeanDefinition ) org.springframework.context.annotation.BeanDefinition ) ; } if ( boolean ( java.lang.String , org.springframework.context.annotation.BeanDefinition ) ) { BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.context.annotation.BeanDefinition , java.lang.String ) ; org.springframework.context.annotation.BeanDefinitionHolder = AnnotationConfigUtils . applyScopedProxyMode ( org.springframework.context.annotation.ScopeMetadata , org.springframework.context.annotation.BeanDefinitionHolder , this . org.springframework.context.annotation.BeanDefinitionRegistry ) ; java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> . add ( org.springframework.context.annotation.BeanDefinitionHolder ) ; void ( org.springframework.context.annotation.BeanDefinitionHolder , this . org.springframework.context.annotation.BeanDefinitionRegistry ) ; } } } return java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> ; }  <METHOD_END>
<METHOD_START> protected void void ( AbstractBeanDefinition org.springframework.context.annotation.AbstractBeanDefinition , java.lang.String java.lang.String ) { org.springframework.context.annotation.AbstractBeanDefinition . applyDefaults ( this . org.springframework.context.annotation.BeanDefinitionDefaults ) ; if ( this . java.lang.String[] != null ) { org.springframework.context.annotation.AbstractBeanDefinition . setAutowireCandidate ( PatternMatchUtils . simpleMatch ( this . java.lang.String[] , java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder , BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { BeanDefinitionReaderUtils . registerBeanDefinition ( org.springframework.context.annotation.BeanDefinitionHolder , org.springframework.context.annotation.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String , BeanDefinition org.springframework.context.annotation.BeanDefinition ) throws java.lang.IllegalStateException { if ( ! this . org.springframework.context.annotation.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { return true ; } BeanDefinition org.springframework.context.annotation.BeanDefinition = this . org.springframework.context.annotation.BeanDefinitionRegistry . getBeanDefinition ( java.lang.String ) ; BeanDefinition org.springframework.context.annotation.BeanDefinition = org.springframework.context.annotation.BeanDefinition . getOriginatingBeanDefinition ( ) ; if ( org.springframework.context.annotation.BeanDefinition != null ) { org.springframework.context.annotation.BeanDefinition = org.springframework.context.annotation.BeanDefinition ; } if ( boolean ( org.springframework.context.annotation.BeanDefinition , org.springframework.context.annotation.BeanDefinition ) ) { return false ; } throw new ConflictingBeanDefinitionException ( STRING + java.lang.String + STRING + org.springframework.context.annotation.BeanDefinition . getBeanClassName ( ) + STRING + STRING + org.springframework.context.annotation.BeanDefinition . getBeanClassName ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( BeanDefinition org.springframework.context.annotation.BeanDefinition , BeanDefinition org.springframework.context.annotation.BeanDefinition ) { return ( ! ( org.springframework.context.annotation.BeanDefinition instanceof ScannedGenericBeanDefinition ) || org.springframework.context.annotation.BeanDefinition . getSource ( ) . equals ( org.springframework.context.annotation.BeanDefinition . getSource ( ) ) || org.springframework.context.annotation.BeanDefinition . equals ( org.springframework.context.annotation.BeanDefinition ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.context.annotation.Environment org.springframework.context.annotation.Environment ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { Assert . notNull ( org.springframework.context.annotation.BeanDefinitionRegistry , STRING ) ; if ( org.springframework.context.annotation.BeanDefinitionRegistry instanceof EnvironmentCapable ) { return ( ( EnvironmentCapable ) org.springframework.context.annotation.BeanDefinitionRegistry ) . getEnvironment ( ) ; } return new StandardEnvironment ( ) ; }  <METHOD_END>
