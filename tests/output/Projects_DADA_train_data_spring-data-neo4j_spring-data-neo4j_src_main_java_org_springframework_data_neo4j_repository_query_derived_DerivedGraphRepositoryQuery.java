<METHOD_START> public void ( GraphQueryMethod org.springframework.data.neo4j.repository.query.derived.GraphQueryMethod , Session org.springframework.data.neo4j.repository.query.derived.Session ) { super( org.springframework.data.neo4j.repository.query.derived.GraphQueryMethod , org.springframework.data.neo4j.repository.query.derived.Session ); this . org.springframework.data.neo4j.repository.query.derived.GraphQueryMethod = org.springframework.data.neo4j.repository.query.derived.GraphQueryMethod ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.neo4j.repository.query.derived.GraphQueryMethod . getEntityInformation ( ) . getJavaType ( ) ; this . org.springframework.data.neo4j.repository.query.derived.PartTree = new PartTree ( org.springframework.data.neo4j.repository.query.derived.GraphQueryMethod . getName ( ) , java.lang.Class<> ) ; this . org.springframework.data.neo4j.repository.query.derived.DerivedQueryDefinition = new DerivedQueryCreator ( org.springframework.data.neo4j.repository.query.derived.PartTree , java.lang.Class<> ) . createQuery ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Query org.springframework.data.neo4j.repository.query.derived.Query , java.lang.Object [] java.lang.Object[] ) { if ( org.springframework.data.neo4j.repository.query.derived.Logger . isDebugEnabled ( ) ) { org.springframework.data.neo4j.repository.query.derived.Logger . debug ( STRING , org.springframework.data.neo4j.repository.query.derived.GraphQueryMethod . getName ( ) ) ; } GraphParameterAccessor org.springframework.data.neo4j.repository.query.derived.GraphParameterAccessor = new GraphParametersParameterAccessor ( org.springframework.data.neo4j.repository.query.derived.GraphQueryMethod , java.lang.Object[] ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.neo4j.repository.query.derived.GraphQueryMethod . getMethod ( ) . getReturnType ( ) ; if ( java.lang.Class<> . boolean ( java.lang.Void .class ) ) { throw new java.lang.RuntimeException ( STRING ) ; } ResultProcessor org.springframework.data.neo4j.repository.query.derived.ResultProcessor = org.springframework.data.neo4j.repository.query.derived.GraphQueryMethod . getResultProcessor ( ) . withDynamicProjection ( org.springframework.data.neo4j.repository.query.derived.GraphParameterAccessor ) ; return getExecution ( org.springframework.data.neo4j.repository.query.derived.GraphParameterAccessor ) . execute ( org.springframework.data.neo4j.repository.query.derived.Query , org.springframework.data.neo4j.repository.query.derived.ResultProcessor . getReturnedType ( ) . getDomainType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.neo4j.repository.query.derived.Query org.springframework.data.neo4j.repository.query.derived.Query ( java.lang.Object [] java.lang.Object[] ) { return new Query ( org.springframework.data.neo4j.repository.query.derived.Filters ( java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return org.springframework.data.neo4j.repository.query.derived.PartTree . isCountProjection ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return org.springframework.data.neo4j.repository.query.derived.PartTree . isExistsProjection ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return org.springframework.data.neo4j.repository.query.derived.PartTree . isDelete ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.neo4j.repository.query.derived.Filters org.springframework.data.neo4j.repository.query.derived.Filters ( java.lang.Object [] java.lang.Object[] ) { java.util.Map<java.lang.Integer,java.lang.Object> < java.lang.Integer , java.lang.Object > java.util.Map<java.lang.Integer,java.lang.Object> = new java.util.HashMap<java.lang.Integer,java.lang.Object> <> ( ) ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { if ( org.springframework.data.neo4j.repository.query.derived.GraphQueryMethod . getQueryDepthParamIndex ( ) == null || ( org.springframework.data.neo4j.repository.query.derived.GraphQueryMethod . getQueryDepthParamIndex ( ) != null && org.springframework.data.neo4j.repository.query.derived.GraphQueryMethod . getQueryDepthParamIndex ( ) != int ) ) { java.util.Map<java.lang.Integer,java.lang.Object> . java.lang.Object ( int , java.lang.Object[] [ int ] ) ; } } return new Filters ( org.springframework.data.neo4j.repository.query.derived.DerivedQueryDefinition . getFilters ( java.util.Map<java.lang.Integer,java.lang.Object> ) ) ; }  <METHOD_END>
