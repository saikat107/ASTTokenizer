<METHOD_START> void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.Object java.lang.Object , S S ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( S , STRING ) ; this . java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<> ; this . java.lang.Object = java.lang.Object ; this . S = S ; this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> = AnnotationUtils . getAttributeAliasMap ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final S S ( ) { return this . S ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.Object java.lang.Object ( java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.reflect.Method ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.String ) ; if ( java.util.List<java.lang.String> != null ) { java.lang.Object java.lang.Object = AnnotationUtils . getDefaultValue ( this . java.lang.Class<> , java.lang.String ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; if ( ! ObjectUtils . nullSafeEquals ( java.lang.Object , java.lang.Object ) && ! ObjectUtils . nullSafeEquals ( java.lang.Object , java.lang.Object ) && ! ObjectUtils . nullSafeEquals ( java.lang.Object , java.lang.Object ) ) { java.lang.String java.lang.String = ( this . java.lang.Object != null ? this . java.lang.Object . java.lang.String ( ) : STRING ) ; throw new AnnotationConfigurationException ( java.lang.String . java.lang.String ( STRING + STRING , this . java.lang.Class<> . java.lang.String ( ) , java.lang.String , this . S , java.lang.String , java.lang.String , ObjectUtils . nullSafeToString ( java.lang.Object ) , ObjectUtils . nullSafeToString ( java.lang.Object ) ) ) ; } if ( ObjectUtils . nullSafeEquals ( java.lang.Object , java.lang.Object ) ) { java.lang.Object = java.lang.Object ; } } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( java.lang.reflect.Method java.lang.reflect.Method );  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( java.lang.String java.lang.String );  <METHOD_END>
