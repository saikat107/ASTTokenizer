<METHOD_START> @ Test public void void ( ) { try { AbstractAspectJAdvice . currentJoinPoint ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { AbstractAspectJAdvice . currentJoinPoint ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.Object java.lang.Object = new TestBean ( ) ; final int int = NUMBER ; ProxyFactory org.springframework.aop.aspectj.ProxyFactory = new ProxyFactory ( java.lang.Object ) ; org.springframework.aop.aspectj.ProxyFactory . setExposeProxy ( true ) ; org.springframework.aop.aspectj.ProxyFactory . addAdvisor ( ExposeInvocationInterceptor . ADVISOR ) ; org.springframework.aop.aspectj.ProxyFactory . addAdvice ( new MethodBeforeAdvice ( ) { private int int ; @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { JoinPoint org.springframework.aop.aspectj.JoinPoint = AbstractAspectJAdvice . currentJoinPoint ( ) ; assertTrue ( STRING , org.springframework.aop.aspectj.JoinPoint . toString ( ) . contains ( java.lang.reflect.Method . java.lang.String ( ) ) ) ; org.springframework.aop.aspectj.JoinPoint . toShortString ( ) ; org.springframework.aop.aspectj.JoinPoint . toLongString ( ) ; assertSame ( java.lang.Object , AbstractAspectJAdvice . currentJoinPoint ( ) . getTarget ( ) ) ; assertFalse ( AopUtils . isAopProxy ( AbstractAspectJAdvice . currentJoinPoint ( ) . getTarget ( ) ) ) ; ITestBean org.springframework.aop.aspectj.ITestBean = ( ITestBean ) AbstractAspectJAdvice . currentJoinPoint ( ) . getThis ( ) ; assertTrue ( AopUtils . isAopProxy ( AbstractAspectJAdvice . currentJoinPoint ( ) . getThis ( ) ) ) ; assertNotSame ( java.lang.Object , org.springframework.aop.aspectj.ITestBean ) ; assertSame ( org.springframework.aop.aspectj.ITestBean , AbstractAspectJAdvice . currentJoinPoint ( ) . getThis ( ) ) ; if ( int ++ == NUMBER ) { org.springframework.aop.aspectj.ITestBean . toString ( ) ; org.springframework.aop.aspectj.ITestBean . setAge ( int ) ; assertEquals ( int , org.springframework.aop.aspectj.ITestBean . getAge ( ) ) ; } assertSame ( AopContext . currentProxy ( ) , org.springframework.aop.aspectj.ITestBean ) ; assertSame ( java.lang.Object , java.lang.Object ) ; assertSame ( java.lang.reflect.Method . java.lang.String ( ) , AbstractAspectJAdvice . currentJoinPoint ( ) . getSignature ( ) . getName ( ) ) ; assertEquals ( java.lang.reflect.Method . int ( ) , AbstractAspectJAdvice . currentJoinPoint ( ) . getSignature ( ) . getModifiers ( ) ) ; MethodSignature org.springframework.aop.aspectj.MethodSignature = ( MethodSignature ) AbstractAspectJAdvice . currentJoinPoint ( ) . getSignature ( ) ; assertSame ( STRING , org.springframework.aop.aspectj.MethodSignature , AbstractAspectJAdvice . currentJoinPoint ( ) . getSignature ( ) ) ; assertSame ( STRING , AbstractAspectJAdvice . currentJoinPoint ( ) , AbstractAspectJAdvice . currentJoinPoint ( ) ) ; assertEquals ( java.lang.reflect.Method . java.lang.Class<?> ( ) , org.springframework.aop.aspectj.MethodSignature . getDeclaringType ( ) ) ; assertTrue ( java.util.Arrays . boolean ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) , org.springframework.aop.aspectj.MethodSignature . getParameterTypes ( ) ) ) ; assertEquals ( java.lang.reflect.Method . java.lang.Class<?> ( ) , org.springframework.aop.aspectj.MethodSignature . getReturnType ( ) ) ; assertTrue ( java.util.Arrays . boolean ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) , org.springframework.aop.aspectj.MethodSignature . getExceptionTypes ( ) ) ) ; org.springframework.aop.aspectj.MethodSignature . toLongString ( ) ; org.springframework.aop.aspectj.MethodSignature . toShortString ( ) ; } } ) ; ITestBean org.springframework.aop.aspectj.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.ProxyFactory . getProxy ( ) ; assertEquals ( STRING , int , org.springframework.aop.aspectj.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { JoinPoint org.springframework.aop.aspectj.JoinPoint = AbstractAspectJAdvice . currentJoinPoint ( ) ; assertTrue ( STRING , org.springframework.aop.aspectj.JoinPoint . toString ( ) . contains ( java.lang.reflect.Method . java.lang.String ( ) ) ) ; org.springframework.aop.aspectj.JoinPoint . toShortString ( ) ; org.springframework.aop.aspectj.JoinPoint . toLongString ( ) ; assertSame ( java.lang.Object , AbstractAspectJAdvice . currentJoinPoint ( ) . getTarget ( ) ) ; assertFalse ( AopUtils . isAopProxy ( AbstractAspectJAdvice . currentJoinPoint ( ) . getTarget ( ) ) ) ; ITestBean org.springframework.aop.aspectj.ITestBean = ( ITestBean ) AbstractAspectJAdvice . currentJoinPoint ( ) . getThis ( ) ; assertTrue ( AopUtils . isAopProxy ( AbstractAspectJAdvice . currentJoinPoint ( ) . getThis ( ) ) ) ; assertNotSame ( java.lang.Object , org.springframework.aop.aspectj.ITestBean ) ; assertSame ( org.springframework.aop.aspectj.ITestBean , AbstractAspectJAdvice . currentJoinPoint ( ) . getThis ( ) ) ; if ( int ++ == NUMBER ) { org.springframework.aop.aspectj.ITestBean . toString ( ) ; org.springframework.aop.aspectj.ITestBean . setAge ( int ) ; assertEquals ( int , org.springframework.aop.aspectj.ITestBean . getAge ( ) ) ; } assertSame ( AopContext . currentProxy ( ) , org.springframework.aop.aspectj.ITestBean ) ; assertSame ( java.lang.Object , java.lang.Object ) ; assertSame ( java.lang.reflect.Method . java.lang.String ( ) , AbstractAspectJAdvice . currentJoinPoint ( ) . getSignature ( ) . getName ( ) ) ; assertEquals ( java.lang.reflect.Method . int ( ) , AbstractAspectJAdvice . currentJoinPoint ( ) . getSignature ( ) . getModifiers ( ) ) ; MethodSignature org.springframework.aop.aspectj.MethodSignature = ( MethodSignature ) AbstractAspectJAdvice . currentJoinPoint ( ) . getSignature ( ) ; assertSame ( STRING , org.springframework.aop.aspectj.MethodSignature , AbstractAspectJAdvice . currentJoinPoint ( ) . getSignature ( ) ) ; assertSame ( STRING , AbstractAspectJAdvice . currentJoinPoint ( ) , AbstractAspectJAdvice . currentJoinPoint ( ) ) ; assertEquals ( java.lang.reflect.Method . java.lang.Class<?> ( ) , org.springframework.aop.aspectj.MethodSignature . getDeclaringType ( ) ) ; assertTrue ( java.util.Arrays . boolean ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) , org.springframework.aop.aspectj.MethodSignature . getParameterTypes ( ) ) ) ; assertEquals ( java.lang.reflect.Method . java.lang.Class<?> ( ) , org.springframework.aop.aspectj.MethodSignature . getReturnType ( ) ) ; assertTrue ( java.util.Arrays . boolean ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) , org.springframework.aop.aspectj.MethodSignature . getExceptionTypes ( ) ) ) ; org.springframework.aop.aspectj.MethodSignature . toLongString ( ) ; org.springframework.aop.aspectj.MethodSignature . toShortString ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.Object java.lang.Object = new TestBean ( ) ; ProxyFactory org.springframework.aop.aspectj.ProxyFactory = new ProxyFactory ( java.lang.Object ) ; org.springframework.aop.aspectj.ProxyFactory . addAdvisor ( ExposeInvocationInterceptor . ADVISOR ) ; org.springframework.aop.aspectj.ProxyFactory . addAdvice ( new MethodBeforeAdvice ( ) { @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { SourceLocation org.springframework.aop.aspectj.SourceLocation = AbstractAspectJAdvice . currentJoinPoint ( ) . getSourceLocation ( ) ; assertEquals ( STRING , org.springframework.aop.aspectj.SourceLocation , AbstractAspectJAdvice . currentJoinPoint ( ) . getSourceLocation ( ) ) ; assertEquals ( TestBean .class , org.springframework.aop.aspectj.SourceLocation . getWithinType ( ) ) ; try { org.springframework.aop.aspectj.SourceLocation . getLine ( ) ; fail ( STRING ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } try { org.springframework.aop.aspectj.SourceLocation . getFileName ( ) ; fail ( STRING ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } } } ) ; ITestBean org.springframework.aop.aspectj.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.ProxyFactory . getProxy ( ) ; org.springframework.aop.aspectj.ITestBean . getAge ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { SourceLocation org.springframework.aop.aspectj.SourceLocation = AbstractAspectJAdvice . currentJoinPoint ( ) . getSourceLocation ( ) ; assertEquals ( STRING , org.springframework.aop.aspectj.SourceLocation , AbstractAspectJAdvice . currentJoinPoint ( ) . getSourceLocation ( ) ) ; assertEquals ( TestBean .class , org.springframework.aop.aspectj.SourceLocation . getWithinType ( ) ) ; try { org.springframework.aop.aspectj.SourceLocation . getLine ( ) ; fail ( STRING ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } try { org.springframework.aop.aspectj.SourceLocation . getFileName ( ) ; fail ( STRING ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.Object java.lang.Object = new TestBean ( ) ; ProxyFactory org.springframework.aop.aspectj.ProxyFactory = new ProxyFactory ( java.lang.Object ) ; org.springframework.aop.aspectj.ProxyFactory . addAdvisor ( ExposeInvocationInterceptor . ADVISOR ) ; org.springframework.aop.aspectj.ProxyFactory . addAdvice ( new MethodBeforeAdvice ( ) { @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { StaticPart org.springframework.aop.aspectj.StaticPart = AbstractAspectJAdvice . currentJoinPoint ( ) . getStaticPart ( ) ; assertEquals ( STRING , org.springframework.aop.aspectj.StaticPart , AbstractAspectJAdvice . currentJoinPoint ( ) . getStaticPart ( ) ) ; assertEquals ( ProceedingJoinPoint . METHOD_EXECUTION , org.springframework.aop.aspectj.StaticPart . getKind ( ) ) ; assertSame ( AbstractAspectJAdvice . currentJoinPoint ( ) . getSignature ( ) , org.springframework.aop.aspectj.StaticPart . getSignature ( ) ) ; assertEquals ( AbstractAspectJAdvice . currentJoinPoint ( ) . getSourceLocation ( ) , org.springframework.aop.aspectj.StaticPart . getSourceLocation ( ) ) ; } } ) ; ITestBean org.springframework.aop.aspectj.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.ProxyFactory . getProxy ( ) ; org.springframework.aop.aspectj.ITestBean . getAge ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { StaticPart org.springframework.aop.aspectj.StaticPart = AbstractAspectJAdvice . currentJoinPoint ( ) . getStaticPart ( ) ; assertEquals ( STRING , org.springframework.aop.aspectj.StaticPart , AbstractAspectJAdvice . currentJoinPoint ( ) . getStaticPart ( ) ) ; assertEquals ( ProceedingJoinPoint . METHOD_EXECUTION , org.springframework.aop.aspectj.StaticPart . getKind ( ) ) ; assertSame ( AbstractAspectJAdvice . currentJoinPoint ( ) . getSignature ( ) , org.springframework.aop.aspectj.StaticPart . getSignature ( ) ) ; assertEquals ( AbstractAspectJAdvice . currentJoinPoint ( ) . getSourceLocation ( ) , org.springframework.aop.aspectj.StaticPart . getSourceLocation ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.Object java.lang.Object = new TestBean ( ) ; ProxyFactory org.springframework.aop.aspectj.ProxyFactory = new ProxyFactory ( java.lang.Object ) ; org.springframework.aop.aspectj.ProxyFactory . addAdvisor ( ExposeInvocationInterceptor . ADVISOR ) ; org.springframework.aop.aspectj.ProxyFactory . addAdvice ( new MethodBeforeAdvice ( ) { @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { JoinPoint . JoinPoint JoinPoint.StaticPart = Factory . makeEncSJP ( java.lang.reflect.Method ) ; JoinPoint org.springframework.aop.aspectj.JoinPoint = AbstractAspectJAdvice . currentJoinPoint ( ) ; assertEquals ( JoinPoint.StaticPart . getSignature ( ) . toLongString ( ) , org.springframework.aop.aspectj.JoinPoint . getSignature ( ) . toLongString ( ) ) ; assertEquals ( JoinPoint.StaticPart . getSignature ( ) . toShortString ( ) , org.springframework.aop.aspectj.JoinPoint . getSignature ( ) . toShortString ( ) ) ; assertEquals ( JoinPoint.StaticPart . getSignature ( ) . toString ( ) , org.springframework.aop.aspectj.JoinPoint . getSignature ( ) . toString ( ) ) ; assertEquals ( JoinPoint.StaticPart . toLongString ( ) , org.springframework.aop.aspectj.JoinPoint . toLongString ( ) ) ; assertEquals ( JoinPoint.StaticPart . toShortString ( ) , org.springframework.aop.aspectj.JoinPoint . toShortString ( ) ) ; assertEquals ( JoinPoint.StaticPart . toString ( ) , org.springframework.aop.aspectj.JoinPoint . toString ( ) ) ; } } ) ; ITestBean org.springframework.aop.aspectj.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.ProxyFactory . getProxy ( ) ; org.springframework.aop.aspectj.ITestBean . getAge ( ) ; org.springframework.aop.aspectj.ITestBean . setName ( STRING ) ; org.springframework.aop.aspectj.ITestBean . getDoctor ( ) ; org.springframework.aop.aspectj.ITestBean . getStringArray ( ) ; org.springframework.aop.aspectj.ITestBean . getSpouse ( ) ; org.springframework.aop.aspectj.ITestBean . setSpouse ( new TestBean ( ) ) ; try { org.springframework.aop.aspectj.ITestBean . unreliableFileOperation ( ) ; } catch ( java.io.IOException java.io.IOException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { JoinPoint . JoinPoint JoinPoint.StaticPart = Factory . makeEncSJP ( java.lang.reflect.Method ) ; JoinPoint org.springframework.aop.aspectj.JoinPoint = AbstractAspectJAdvice . currentJoinPoint ( ) ; assertEquals ( JoinPoint.StaticPart . getSignature ( ) . toLongString ( ) , org.springframework.aop.aspectj.JoinPoint . getSignature ( ) . toLongString ( ) ) ; assertEquals ( JoinPoint.StaticPart . getSignature ( ) . toShortString ( ) , org.springframework.aop.aspectj.JoinPoint . getSignature ( ) . toShortString ( ) ) ; assertEquals ( JoinPoint.StaticPart . getSignature ( ) . toString ( ) , org.springframework.aop.aspectj.JoinPoint . getSignature ( ) . toString ( ) ) ; assertEquals ( JoinPoint.StaticPart . toLongString ( ) , org.springframework.aop.aspectj.JoinPoint . toLongString ( ) ) ; assertEquals ( JoinPoint.StaticPart . toShortString ( ) , org.springframework.aop.aspectj.JoinPoint . toShortString ( ) ) ; assertEquals ( JoinPoint.StaticPart . toString ( ) , org.springframework.aop.aspectj.JoinPoint . toString ( ) ) ; }  <METHOD_END>
