<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Parameters public static java.lang.Iterable<? extends org.springframework.web.client.ClientHttpRequestFactory> < ? extends ClientHttpRequestFactory > java.lang.Iterable<? extends org.springframework.web.client.ClientHttpRequestFactory> ( ) { return java.util.Arrays . java.util.List ( new SimpleClientHttpRequestFactory ( ) , new HttpComponentsClientHttpRequestFactory ( ) , new Netty4ClientHttpRequestFactory ( ) , new OkHttp3ClientHttpRequestFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.client.RestTemplate = new RestTemplate ( this . org.springframework.web.client.ClientHttpRequestFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.web.client.RestTemplate . getForObject ( baseUrl + STRING , java.lang.String .class , STRING ) ; assertEquals ( STRING , helloWorld , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> = org.springframework.web.client.RestTemplate . getForEntity ( baseUrl + STRING , java.lang.String .class , STRING ) ; assertEquals ( STRING , helloWorld , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; assertFalse ( STRING , org.springframework.web.client.ResponseEntity<java.lang.String> . getHeaders ( ) . isEmpty ( ) ) ; assertEquals ( STRING , textContentType , org.springframework.web.client.ResponseEntity<java.lang.String> . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , HttpStatus . OK , org.springframework.web.client.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.web.client.RestTemplate . getForObject ( baseUrl + STRING , java.lang.String .class ) ; assertNull ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException { byte [] byte[] = org.springframework.web.client.RestTemplate . getForObject ( baseUrl + STRING , byte [] .class ) ; assertArrayEquals ( STRING , helloWorld . getBytes ( STRING ) , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.web.client.RestTemplate . getForObject ( baseUrl + STRING , java.lang.String .class ) ; assertNull ( STRING , java.lang.String ) ; ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> = org.springframework.web.client.RestTemplate . getForEntity ( baseUrl + STRING , java.lang.String .class ) ; assertEquals ( STRING , HttpStatus . NO_CONTENT , org.springframework.web.client.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertNull ( STRING , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.web.client.RestTemplate . getForObject ( baseUrl + STRING , java.lang.String .class ) ; assertNull ( STRING , java.lang.String ) ; ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> = org.springframework.web.client.RestTemplate . getForEntity ( baseUrl + STRING , java.lang.String .class ) ; assertEquals ( STRING , HttpStatus . NOT_MODIFIED , org.springframework.web.client.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertNull ( STRING , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { java.net.URI java.net.URI = org.springframework.web.client.RestTemplate . postForLocation ( baseUrl + STRING , helloWorld , STRING ) ; assertEquals ( STRING , new java.net.URI ( baseUrl + STRING ) , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( helloWorld , org.springframework.web.client.HttpHeaders ) ; java.net.URI java.net.URI = org.springframework.web.client.RestTemplate . postForLocation ( baseUrl + STRING , org.springframework.web.client.HttpEntity<java.lang.String> , STRING ) ; assertEquals ( STRING , new java.net.URI ( baseUrl + STRING ) , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { java.lang.String java.lang.String = org.springframework.web.client.RestTemplate . postForObject ( baseUrl + STRING , helloWorld , java.lang.String .class , STRING ) ; assertEquals ( STRING , helloWorld , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { Assume . assumeThat ( this . org.springframework.web.client.ClientHttpRequestFactory , Matchers . not ( Matchers . instanceOf ( SimpleClientHttpRequestFactory .class ) ) ) ; java.lang.String java.lang.String = org.springframework.web.client.RestTemplate . patchForObject ( baseUrl + STRING , helloWorld , java.lang.String .class , STRING ) ; assertEquals ( STRING , helloWorld , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.web.client.RestTemplate . execute ( baseUrl + STRING , HttpMethod . GET , null , null ) ; fail ( STRING ) ; } catch ( HttpClientErrorException org.springframework.web.client.HttpClientErrorException ) { assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.client.HttpClientErrorException . getStatusCode ( ) ) ; assertNotNull ( org.springframework.web.client.HttpClientErrorException . getStatusText ( ) ) ; assertNotNull ( org.springframework.web.client.HttpClientErrorException . getResponseBodyAsString ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.web.client.RestTemplate . execute ( baseUrl + STRING , HttpMethod . GET , null , null ) ; fail ( STRING ) ; } catch ( HttpServerErrorException org.springframework.web.client.HttpServerErrorException ) { assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR , org.springframework.web.client.HttpServerErrorException . getStatusCode ( ) ) ; assertNotNull ( org.springframework.web.client.HttpServerErrorException . getStatusText ( ) ) ; assertNotNull ( org.springframework.web.client.HttpServerErrorException . getResponseBodyAsString ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.client.HttpMethod> = org.springframework.web.client.RestTemplate . optionsForAllow ( new java.net.URI ( baseUrl + STRING ) ) ; assertEquals ( STRING , java.util.EnumSet . java.util.EnumSet ( HttpMethod . GET , HttpMethod . OPTIONS , HttpMethod . HEAD , HttpMethod . TRACE ) , java.util.Set<org.springframework.web.client.HttpMethod> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException , java.net.URISyntaxException { java.lang.String java.lang.String = org.springframework.web.client.RestTemplate . getForObject ( baseUrl + STRING , java.lang.String .class , STRING ) ; assertEquals ( STRING , STRING , java.lang.String ) ; java.lang.String = org.springframework.web.client.RestTemplate . getForObject ( baseUrl + STRING , java.lang.String .class , STRING ) ; assertEquals ( STRING , STRING , java.lang.String ) ; java.lang.String = org.springframework.web.client.RestTemplate . getForObject ( baseUrl + STRING , java.lang.String .class , STRING ) ; assertEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.Object> = new LinkedMultiValueMap <> ( ) ; org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , STRING ) ; org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , STRING ) ; org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , STRING ) ; Resource org.springframework.web.client.Resource = new ClassPathResource ( STRING ) ; org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , org.springframework.web.client.Resource ) ; org.springframework.web.client.RestTemplate . postForLocation ( baseUrl + STRING , org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.client.RestTemplate . postForLocation ( baseUrl + STRING , org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . set ( STRING , STRING ) ; HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( org.springframework.web.client.HttpHeaders ) ; ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> = org.springframework.web.client.RestTemplate . exchange ( baseUrl + STRING , HttpMethod . GET , org.springframework.web.client.HttpEntity<java.lang.String> , java.lang.String .class , STRING ) ; assertEquals ( STRING , helloWorld , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . set ( STRING , STRING ) ; org.springframework.web.client.HttpHeaders . setContentType ( MediaType . TEXT_PLAIN ) ; HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( helloWorld , org.springframework.web.client.HttpHeaders ) ; HttpEntity < java.lang.Void > org.springframework.web.client.HttpEntity<java.lang.Void> = org.springframework.web.client.RestTemplate . exchange ( baseUrl + STRING , HttpMethod . POST , org.springframework.web.client.HttpEntity<java.lang.String> , java.lang.Void .class , STRING ) ; assertEquals ( STRING , new java.net.URI ( baseUrl + STRING ) , org.springframework.web.client.HttpEntity<java.lang.Void> . getHeaders ( ) . getLocation ( ) ) ; assertFalse ( org.springframework.web.client.HttpEntity<java.lang.Void> . hasBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; org.springframework.web.client.RestTemplateIntegrationTests.MySampleBean org.springframework.web.client.RestTemplateIntegrationTests.MySampleBean = new org.springframework.web.client.RestTemplateIntegrationTests.MySampleBean ( ) ; org.springframework.web.client.RestTemplateIntegrationTests.MySampleBean . void ( STRING ) ; org.springframework.web.client.RestTemplateIntegrationTests.MySampleBean . void ( STRING ) ; org.springframework.web.client.RestTemplateIntegrationTests.MySampleBean . void ( STRING ) ; HttpEntity < org.springframework.web.client.RestTemplateIntegrationTests.MySampleBean > org.springframework.web.client.HttpEntity<org.springframework.web.client.RestTemplateIntegrationTests.MySampleBean> = new HttpEntity <> ( org.springframework.web.client.RestTemplateIntegrationTests.MySampleBean , org.springframework.web.client.HttpHeaders ) ; java.lang.String java.lang.String = org.springframework.web.client.RestTemplate . postForObject ( baseUrl + STRING , org.springframework.web.client.HttpEntity<org.springframework.web.client.RestTemplateIntegrationTests.MySampleBean> , java.lang.String .class ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; org.springframework.web.client.RestTemplateIntegrationTests.MySampleBean org.springframework.web.client.RestTemplateIntegrationTests.MySampleBean = new org.springframework.web.client.RestTemplateIntegrationTests.MySampleBean ( STRING , STRING , STRING ) ; MappingJacksonValue org.springframework.web.client.MappingJacksonValue = new MappingJacksonValue ( org.springframework.web.client.RestTemplateIntegrationTests.MySampleBean ) ; org.springframework.web.client.MappingJacksonValue . setSerializationView ( org.springframework.web.client.RestTemplateIntegrationTests.MyJacksonView1 .class ) ; HttpEntity < MappingJacksonValue > org.springframework.web.client.HttpEntity<org.springframework.web.client.MappingJacksonValue> = new HttpEntity <> ( org.springframework.web.client.MappingJacksonValue , org.springframework.web.client.HttpHeaders ) ; java.lang.String java.lang.String = org.springframework.web.client.RestTemplate . postForObject ( baseUrl + STRING , org.springframework.web.client.HttpEntity<org.springframework.web.client.MappingJacksonValue> , java.lang.String .class ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.web.client.RestTemplate . getForObject ( STRING , java.lang.String .class , port ) ; assertEquals ( STRING , helloWorld , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { java.util.List<org.springframework.web.client.RestTemplateIntegrationTests.ParentClass> < org.springframework.web.client.RestTemplateIntegrationTests.ParentClass > java.util.List<org.springframework.web.client.RestTemplateIntegrationTests.ParentClass> = new java.util.ArrayList<org.springframework.web.client.RestTemplateIntegrationTests.ParentClass> <> ( ) ; java.util.List<org.springframework.web.client.RestTemplateIntegrationTests.ParentClass> . boolean ( new org.springframework.web.client.RestTemplateIntegrationTests.Foo ( STRING ) ) ; java.util.List<org.springframework.web.client.RestTemplateIntegrationTests.ParentClass> . boolean ( new org.springframework.web.client.RestTemplateIntegrationTests.Bar ( STRING ) ) ; ParameterizedTypeReference < ? > org.springframework.web.client.ParameterizedTypeReference<?> = new ParameterizedTypeReference < java.util.List<org.springframework.web.client.RestTemplateIntegrationTests.ParentClass> < org.springframework.web.client.RestTemplateIntegrationTests.ParentClass > > ( ) {} ; RequestEntity < java.util.List<org.springframework.web.client.RestTemplateIntegrationTests.ParentClass> < org.springframework.web.client.RestTemplateIntegrationTests.ParentClass > > org.springframework.web.client.RequestEntity<java.util.List<org.springframework.web.client.RestTemplateIntegrationTests.ParentClass>> = RequestEntity . post ( new java.net.URI ( baseUrl + STRING ) ) . contentType ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) . body ( java.util.List<org.springframework.web.client.RestTemplateIntegrationTests.ParentClass> , org.springframework.web.client.ParameterizedTypeReference<> . getType ( ) ) ; java.lang.String java.lang.String = org.springframework.web.client.RestTemplate . exchange ( org.springframework.web.client.RequestEntity<java.util.List<org.springframework.web.client.RestTemplateIntegrationTests.ParentClass>> , java.lang.String .class ) . getBody ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNull ( org.springframework.web.client.RestTemplate . postForObject ( baseUrl + STRING , null , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> private void ( ) {		}  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
