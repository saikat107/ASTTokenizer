<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; ChannelPurger org.springframework.integration.channel.ChannelPurger = new ChannelPurger ( org.springframework.integration.channel.QueueChannel ) ; java.util.List<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.channel.Message<?>> = org.springframework.integration.channel.ChannelPurger . purge ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.channel.Message<?>> . size ( ) ) ; assertNull ( org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; ChannelPurger org.springframework.integration.channel.ChannelPurger = new ChannelPurger ( message -> false , org.springframework.integration.channel.QueueChannel ) ; java.util.List<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.channel.Message<?>> = org.springframework.integration.channel.ChannelPurger . purge ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.channel.Message<?>> . size ( ) ) ; assertNull ( org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; ChannelPurger org.springframework.integration.channel.ChannelPurger = new ChannelPurger ( message -> true , org.springframework.integration.channel.QueueChannel ) ; java.util.List<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.channel.Message<?>> = org.springframework.integration.channel.ChannelPurger . purge ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.channel.Message<?>> . size ( ) ) ; assertNotNull ( org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; ChannelPurger org.springframework.integration.channel.ChannelPurger = new ChannelPurger ( message -> ( message . getPayload ( ) . equals ( STRING ) ) , org.springframework.integration.channel.QueueChannel ) ; java.util.List<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.channel.Message<?>> = org.springframework.integration.channel.ChannelPurger . purge ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.channel.Message<?>> . size ( ) ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; ChannelPurger org.springframework.integration.channel.ChannelPurger = new ChannelPurger ( org.springframework.integration.channel.QueueChannel , org.springframework.integration.channel.QueueChannel ) ; java.util.List<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.channel.Message<?>> = org.springframework.integration.channel.ChannelPurger . purge ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.channel.Message<?>> . size ( ) ) ; assertNull ( org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; ChannelPurger org.springframework.integration.channel.ChannelPurger = new ChannelPurger ( message -> ( message . getPayload ( ) . equals ( STRING ) ) , org.springframework.integration.channel.QueueChannel , org.springframework.integration.channel.QueueChannel ) ; java.util.List<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.channel.Message<?>> = org.springframework.integration.channel.ChannelPurger . purge ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.channel.Message<?>> . size ( ) ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; ChannelPurger org.springframework.integration.channel.ChannelPurger = new ChannelPurger ( message -> true , org.springframework.integration.channel.QueueChannel , org.springframework.integration.channel.QueueChannel ) ; java.util.List<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.channel.Message<?>> = org.springframework.integration.channel.ChannelPurger . purge ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.channel.Message<?>> . size ( ) ) ; assertNotNull ( org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { QueueChannel org.springframework.integration.channel.QueueChannel = null ; new ChannelPurger ( org.springframework.integration.channel.QueueChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { QueueChannel [] org.springframework.integration.channel.QueueChannel[] = new QueueChannel [ NUMBER ] ; new ChannelPurger ( org.springframework.integration.channel.QueueChannel[] ) ; }  <METHOD_END>
