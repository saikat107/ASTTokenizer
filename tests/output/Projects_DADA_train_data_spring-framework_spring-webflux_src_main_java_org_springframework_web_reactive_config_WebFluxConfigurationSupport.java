<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.web.reactive.config.ApplicationContext ) { this . org.springframework.web.reactive.config.ApplicationContext = org.springframework.web.reactive.config.ApplicationContext ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.config.ApplicationContext org.springframework.web.reactive.config.ApplicationContext ( ) { return this . org.springframework.web.reactive.config.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.config.DispatcherHandler org.springframework.web.reactive.config.DispatcherHandler ( ) { return new DispatcherHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Order ( NUMBER ) public org.springframework.web.reactive.config.WebExceptionHandler org.springframework.web.reactive.config.WebExceptionHandler ( ) { return new ResponseStatusExceptionHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.config.RequestMappingHandlerMapping org.springframework.web.reactive.config.RequestMappingHandlerMapping ( ) { RequestMappingHandlerMapping org.springframework.web.reactive.config.RequestMappingHandlerMapping = org.springframework.web.reactive.config.RequestMappingHandlerMapping ( ) ; org.springframework.web.reactive.config.RequestMappingHandlerMapping . setOrder ( NUMBER ) ; org.springframework.web.reactive.config.RequestMappingHandlerMapping . setContentTypeResolver ( org.springframework.web.reactive.config.CompositeContentTypeResolver ( ) ) ; org.springframework.web.reactive.config.RequestMappingHandlerMapping . setCorsConfigurations ( java.util.Map<java.lang.String,org.springframework.web.reactive.config.CorsConfiguration> ( ) ) ; PathMatchConfigurer org.springframework.web.reactive.config.PathMatchConfigurer = org.springframework.web.reactive.config.PathMatchConfigurer ( ) ; if ( org.springframework.web.reactive.config.PathMatchConfigurer . isUseSuffixPatternMatch ( ) != null ) { org.springframework.web.reactive.config.RequestMappingHandlerMapping . setUseSuffixPatternMatch ( org.springframework.web.reactive.config.PathMatchConfigurer . isUseSuffixPatternMatch ( ) ) ; } if ( org.springframework.web.reactive.config.PathMatchConfigurer . isUseRegisteredSuffixPatternMatch ( ) != null ) { org.springframework.web.reactive.config.RequestMappingHandlerMapping . setUseRegisteredSuffixPatternMatch ( org.springframework.web.reactive.config.PathMatchConfigurer . isUseRegisteredSuffixPatternMatch ( ) ) ; } if ( org.springframework.web.reactive.config.PathMatchConfigurer . isUseTrailingSlashMatch ( ) != null ) { org.springframework.web.reactive.config.RequestMappingHandlerMapping . setUseTrailingSlashMatch ( org.springframework.web.reactive.config.PathMatchConfigurer . isUseTrailingSlashMatch ( ) ) ; } if ( org.springframework.web.reactive.config.PathMatchConfigurer . getPathMatcher ( ) != null ) { org.springframework.web.reactive.config.RequestMappingHandlerMapping . setPathMatcher ( org.springframework.web.reactive.config.PathMatchConfigurer . getPathMatcher ( ) ) ; } if ( org.springframework.web.reactive.config.PathMatchConfigurer . getPathHelper ( ) != null ) { org.springframework.web.reactive.config.RequestMappingHandlerMapping . setPathHelper ( org.springframework.web.reactive.config.PathMatchConfigurer . getPathHelper ( ) ) ; } return org.springframework.web.reactive.config.RequestMappingHandlerMapping ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.config.RequestMappingHandlerMapping org.springframework.web.reactive.config.RequestMappingHandlerMapping ( ) { return new RequestMappingHandlerMapping ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.config.CompositeContentTypeResolver org.springframework.web.reactive.config.CompositeContentTypeResolver ( ) { RequestedContentTypeResolverBuilder org.springframework.web.reactive.config.RequestedContentTypeResolverBuilder = new RequestedContentTypeResolverBuilder ( ) ; org.springframework.web.reactive.config.RequestedContentTypeResolverBuilder . mediaTypes ( java.util.Map<java.lang.String,org.springframework.web.reactive.config.MediaType> ( ) ) ; void ( org.springframework.web.reactive.config.RequestedContentTypeResolverBuilder ) ; return org.springframework.web.reactive.config.RequestedContentTypeResolverBuilder . build ( ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,org.springframework.web.reactive.config.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.reactive.config.MediaType> ( ) { java.util.Map<java.lang.String,org.springframework.web.reactive.config.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.reactive.config.MediaType> = new java.util.HashMap<java.lang.String,org.springframework.web.reactive.config.MediaType> <> ( ) ; if ( ServerCodecConfigurer . jackson2Present ) { java.util.Map<java.lang.String,org.springframework.web.reactive.config.MediaType> . put ( STRING , MediaType . APPLICATION_JSON ) ; } return java.util.Map<java.lang.String,org.springframework.web.reactive.config.MediaType> ; }  <METHOD_END>
<METHOD_START> protected void void ( RequestedContentTypeResolverBuilder org.springframework.web.reactive.config.RequestedContentTypeResolverBuilder ) {	}  <METHOD_END>
<METHOD_START> protected final java.util.Map<java.lang.String,org.springframework.web.reactive.config.CorsConfiguration> < java.lang.String , CorsConfiguration > java.util.Map<java.lang.String,org.springframework.web.reactive.config.CorsConfiguration> ( ) { if ( this . java.util.Map<java.lang.String,org.springframework.web.reactive.config.CorsConfiguration> == null ) { CorsRegistry org.springframework.web.reactive.config.CorsRegistry = new CorsRegistry ( ) ; void ( org.springframework.web.reactive.config.CorsRegistry ) ; this . java.util.Map<java.lang.String,org.springframework.web.reactive.config.CorsConfiguration> = org.springframework.web.reactive.config.CorsRegistry . getCorsConfigurations ( ) ; } return this . java.util.Map<java.lang.String,org.springframework.web.reactive.config.CorsConfiguration> ; }  <METHOD_END>
<METHOD_START> protected void void ( CorsRegistry org.springframework.web.reactive.config.CorsRegistry ) {	}  <METHOD_END>
<METHOD_START> protected final org.springframework.web.reactive.config.PathMatchConfigurer org.springframework.web.reactive.config.PathMatchConfigurer ( ) { if ( this . org.springframework.web.reactive.config.PathMatchConfigurer == null ) { this . org.springframework.web.reactive.config.PathMatchConfigurer = new PathMatchConfigurer ( ) ; void ( this . org.springframework.web.reactive.config.PathMatchConfigurer ) ; } return this . org.springframework.web.reactive.config.PathMatchConfigurer ; }  <METHOD_END>
<METHOD_START> public void void ( PathMatchConfigurer org.springframework.web.reactive.config.PathMatchConfigurer ) {	}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.config.HandlerMapping org.springframework.web.reactive.config.HandlerMapping ( ) { ResourceHandlerRegistry org.springframework.web.reactive.config.ResourceHandlerRegistry = new ResourceHandlerRegistry ( this . org.springframework.web.reactive.config.ApplicationContext , org.springframework.web.reactive.config.CompositeContentTypeResolver ( ) ) ; void ( org.springframework.web.reactive.config.ResourceHandlerRegistry ) ; AbstractHandlerMapping org.springframework.web.reactive.config.AbstractHandlerMapping = org.springframework.web.reactive.config.ResourceHandlerRegistry . getHandlerMapping ( ) ; if ( org.springframework.web.reactive.config.AbstractHandlerMapping != null ) { PathMatchConfigurer org.springframework.web.reactive.config.PathMatchConfigurer = org.springframework.web.reactive.config.PathMatchConfigurer ( ) ; if ( org.springframework.web.reactive.config.PathMatchConfigurer . getPathMatcher ( ) != null ) { org.springframework.web.reactive.config.AbstractHandlerMapping . setPathMatcher ( org.springframework.web.reactive.config.PathMatchConfigurer . getPathMatcher ( ) ) ; } if ( org.springframework.web.reactive.config.PathMatchConfigurer . getPathHelper ( ) != null ) { org.springframework.web.reactive.config.AbstractHandlerMapping . setPathHelper ( org.springframework.web.reactive.config.PathMatchConfigurer . getPathHelper ( ) ) ; } } else { org.springframework.web.reactive.config.AbstractHandlerMapping = new org.springframework.web.reactive.config.WebFluxConfigurationSupport.EmptyHandlerMapping ( ) ; } return org.springframework.web.reactive.config.AbstractHandlerMapping ; }  <METHOD_END>
<METHOD_START> protected void void ( ResourceHandlerRegistry org.springframework.web.reactive.config.ResourceHandlerRegistry ) {	}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.config.RequestMappingHandlerAdapter org.springframework.web.reactive.config.RequestMappingHandlerAdapter ( ) { RequestMappingHandlerAdapter org.springframework.web.reactive.config.RequestMappingHandlerAdapter = org.springframework.web.reactive.config.RequestMappingHandlerAdapter ( ) ; org.springframework.web.reactive.config.RequestMappingHandlerAdapter . setMessageCodecConfigurer ( org.springframework.web.reactive.config.ServerCodecConfigurer ( ) ) ; org.springframework.web.reactive.config.RequestMappingHandlerAdapter . setWebBindingInitializer ( org.springframework.web.reactive.config.ConfigurableWebBindingInitializer ( ) ) ; org.springframework.web.reactive.config.RequestMappingHandlerAdapter . setReactiveAdapterRegistry ( org.springframework.web.reactive.config.ReactiveAdapterRegistry ( ) ) ; ArgumentResolverConfigurer org.springframework.web.reactive.config.ArgumentResolverConfigurer = new ArgumentResolverConfigurer ( ) ; void ( org.springframework.web.reactive.config.ArgumentResolverConfigurer ) ; org.springframework.web.reactive.config.RequestMappingHandlerAdapter . setArgumentResolverConfigurer ( org.springframework.web.reactive.config.ArgumentResolverConfigurer ) ; return org.springframework.web.reactive.config.RequestMappingHandlerAdapter ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.config.RequestMappingHandlerAdapter org.springframework.web.reactive.config.RequestMappingHandlerAdapter ( ) { return new RequestMappingHandlerAdapter ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ArgumentResolverConfigurer org.springframework.web.reactive.config.ArgumentResolverConfigurer ) {	}  <METHOD_END>
<METHOD_START> protected final org.springframework.web.reactive.config.ServerCodecConfigurer org.springframework.web.reactive.config.ServerCodecConfigurer ( ) { if ( this . org.springframework.web.reactive.config.ServerCodecConfigurer == null ) { this . org.springframework.web.reactive.config.ServerCodecConfigurer = new ServerCodecConfigurer ( ) ; void ( this . org.springframework.web.reactive.config.ServerCodecConfigurer ( ) ) ; } return this . org.springframework.web.reactive.config.ServerCodecConfigurer ; }  <METHOD_END>
<METHOD_START> protected void void ( ServerCodecConfigurer org.springframework.web.reactive.config.ServerCodecConfigurer ) {	}  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.config.ConfigurableWebBindingInitializer org.springframework.web.reactive.config.ConfigurableWebBindingInitializer ( ) { ConfigurableWebBindingInitializer org.springframework.web.reactive.config.ConfigurableWebBindingInitializer = new ConfigurableWebBindingInitializer ( ) ; org.springframework.web.reactive.config.ConfigurableWebBindingInitializer . setConversionService ( org.springframework.web.reactive.config.FormattingConversionService ( ) ) ; org.springframework.web.reactive.config.ConfigurableWebBindingInitializer . setValidator ( org.springframework.web.reactive.config.Validator ( ) ) ; org.springframework.web.reactive.config.ConfigurableWebBindingInitializer . setMessageCodesResolver ( org.springframework.web.reactive.config.MessageCodesResolver ( ) ) ; return org.springframework.web.reactive.config.ConfigurableWebBindingInitializer ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.config.FormattingConversionService org.springframework.web.reactive.config.FormattingConversionService ( ) { FormattingConversionService org.springframework.web.reactive.config.FormattingConversionService = new DefaultFormattingConversionService ( ) ; void ( org.springframework.web.reactive.config.FormattingConversionService ) ; return org.springframework.web.reactive.config.FormattingConversionService ; }  <METHOD_END>
<METHOD_START> protected void void ( FormatterRegistry org.springframework.web.reactive.config.FormatterRegistry ) {	}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.config.ReactiveAdapterRegistry org.springframework.web.reactive.config.ReactiveAdapterRegistry ( ) { return new ReactiveAdapterRegistry ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.config.Validator org.springframework.web.reactive.config.Validator ( ) { Validator org.springframework.web.reactive.config.Validator = org.springframework.web.reactive.config.Validator ( ) ; if ( org.springframework.web.reactive.config.Validator == null ) { if ( ClassUtils . isPresent ( STRING , java.lang.Class<? extends org.springframework.web.reactive.config.WebFluxConfigurationSupport> ( ) . java.lang.ClassLoader ( ) ) ) { java.lang.Class<?> < ? > java.lang.Class<?> ; try { java.lang.String java.lang.String = STRING ; java.lang.Class<?> = ClassUtils . forName ( java.lang.String , java.lang.Class<? extends org.springframework.web.reactive.config.WebFluxConfigurationSupport> ( ) . java.lang.ClassLoader ( ) ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new BeanInitializationException ( STRING , java.lang.ClassNotFoundException ) ; } catch ( java.lang.LinkageError java.lang.LinkageError ) { throw new BeanInitializationException ( STRING , java.lang.LinkageError ) ; } org.springframework.web.reactive.config.Validator = ( Validator ) BeanUtils . instantiateClass ( java.lang.Class<> ) ; } else { org.springframework.web.reactive.config.Validator = new org.springframework.web.reactive.config.WebFluxConfigurationSupport.NoOpValidator ( ) ; } } return org.springframework.web.reactive.config.Validator ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.config.Validator org.springframework.web.reactive.config.Validator ( ) { return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.config.MessageCodesResolver org.springframework.web.reactive.config.MessageCodesResolver ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.config.SimpleHandlerAdapter org.springframework.web.reactive.config.SimpleHandlerAdapter ( ) { return new SimpleHandlerAdapter ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.config.ResponseEntityResultHandler org.springframework.web.reactive.config.ResponseEntityResultHandler ( ) { return new ResponseEntityResultHandler ( org.springframework.web.reactive.config.ServerCodecConfigurer ( ) . getWriters ( ) , org.springframework.web.reactive.config.CompositeContentTypeResolver ( ) , org.springframework.web.reactive.config.ReactiveAdapterRegistry ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.config.ResponseBodyResultHandler org.springframework.web.reactive.config.ResponseBodyResultHandler ( ) { return new ResponseBodyResultHandler ( org.springframework.web.reactive.config.ServerCodecConfigurer ( ) . getWriters ( ) , org.springframework.web.reactive.config.CompositeContentTypeResolver ( ) , org.springframework.web.reactive.config.ReactiveAdapterRegistry ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.config.ViewResolutionResultHandler org.springframework.web.reactive.config.ViewResolutionResultHandler ( ) { ViewResolverRegistry org.springframework.web.reactive.config.ViewResolverRegistry = new ViewResolverRegistry ( org.springframework.web.reactive.config.ApplicationContext ( ) ) ; void ( org.springframework.web.reactive.config.ViewResolverRegistry ) ; java.util.List<org.springframework.web.reactive.config.ViewResolver> < ViewResolver > java.util.List<org.springframework.web.reactive.config.ViewResolver> = org.springframework.web.reactive.config.ViewResolverRegistry . getViewResolvers ( ) ; ViewResolutionResultHandler org.springframework.web.reactive.config.ViewResolutionResultHandler = new ViewResolutionResultHandler ( java.util.List<org.springframework.web.reactive.config.ViewResolver> , org.springframework.web.reactive.config.CompositeContentTypeResolver ( ) , org.springframework.web.reactive.config.ReactiveAdapterRegistry ( ) ) ; org.springframework.web.reactive.config.ViewResolutionResultHandler . setDefaultViews ( org.springframework.web.reactive.config.ViewResolverRegistry . getDefaultViews ( ) ) ; org.springframework.web.reactive.config.ViewResolutionResultHandler . setOrder ( org.springframework.web.reactive.config.ViewResolverRegistry . getOrder ( ) ) ; return org.springframework.web.reactive.config.ViewResolutionResultHandler ; }  <METHOD_END>
<METHOD_START> protected void void ( ViewResolverRegistry org.springframework.web.reactive.config.ViewResolverRegistry ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.config.Mono<java.lang.Object> < java.lang.Object > org.springframework.web.reactive.config.Mono<java.lang.Object> ( ServerWebExchange org.springframework.web.reactive.config.ServerWebExchange ) { return Mono . empty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.web.reactive.config.Errors ) {		}  <METHOD_END>
