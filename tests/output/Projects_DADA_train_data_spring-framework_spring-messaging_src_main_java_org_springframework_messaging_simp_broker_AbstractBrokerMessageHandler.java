<METHOD_START> public void ( SubscribableChannel org.springframework.messaging.simp.broker.SubscribableChannel , MessageChannel org.springframework.messaging.simp.broker.MessageChannel , SubscribableChannel org.springframework.messaging.simp.broker.SubscribableChannel ) { this( org.springframework.messaging.simp.broker.SubscribableChannel , org.springframework.messaging.simp.broker.MessageChannel , org.springframework.messaging.simp.broker.SubscribableChannel , java.util.Collections . java.util.List<java.lang.Object> ( ) ); }  <METHOD_END>
<METHOD_START> public void ( SubscribableChannel org.springframework.messaging.simp.broker.SubscribableChannel , MessageChannel org.springframework.messaging.simp.broker.MessageChannel , SubscribableChannel org.springframework.messaging.simp.broker.SubscribableChannel , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { Assert . notNull ( org.springframework.messaging.simp.broker.SubscribableChannel , STRING ) ; Assert . notNull ( org.springframework.messaging.simp.broker.MessageChannel , STRING ) ; Assert . notNull ( org.springframework.messaging.simp.broker.SubscribableChannel , STRING ) ; this . org.springframework.messaging.simp.broker.SubscribableChannel = org.springframework.messaging.simp.broker.SubscribableChannel ; this . org.springframework.messaging.simp.broker.MessageChannel = org.springframework.messaging.simp.broker.MessageChannel ; this . org.springframework.messaging.simp.broker.SubscribableChannel = org.springframework.messaging.simp.broker.SubscribableChannel ; java.util.Collection<java.lang.String> = ( java.util.Collection<java.lang.String> != null ) ? java.util.Collection<java.lang.String> : java.util.Collections . java.util.List<java.lang.String> ( ) ; this . java.util.Collection<java.lang.String> = java.util.Collections . java.util.Collection<java.lang.String> ( java.util.Collection<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.broker.SubscribableChannel org.springframework.messaging.simp.broker.SubscribableChannel ( ) { return this . org.springframework.messaging.simp.broker.SubscribableChannel ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.broker.MessageChannel org.springframework.messaging.simp.broker.MessageChannel ( ) { return this . org.springframework.messaging.simp.broker.MessageChannel ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.broker.SubscribableChannel org.springframework.messaging.simp.broker.SubscribableChannel ( ) { return this . org.springframework.messaging.simp.broker.SubscribableChannel ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return this . java.util.Collection<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.messaging.simp.broker.ApplicationEventPublisher ) { this . org.springframework.messaging.simp.broker.ApplicationEventPublisher = org.springframework.messaging.simp.broker.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.broker.ApplicationEventPublisher org.springframework.messaging.simp.broker.ApplicationEventPublisher ( ) { return this . org.springframework.messaging.simp.broker.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.Integer . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( org.springframework.messaging.simp.broker.Log . isInfoEnabled ( ) ) { org.springframework.messaging.simp.broker.Log . info ( STRING ) ; } this . org.springframework.messaging.simp.broker.SubscribableChannel . subscribe ( this ) ; this . org.springframework.messaging.simp.broker.SubscribableChannel . subscribe ( this ) ; if ( this . org.springframework.messaging.simp.broker.SubscribableChannel instanceof InterceptableChannel ) { ( ( InterceptableChannel ) this . org.springframework.messaging.simp.broker.SubscribableChannel ) . addInterceptor ( NUMBER , this . org.springframework.messaging.simp.broker.ChannelInterceptor ) ; } void ( ) ; this . boolean = true ; org.springframework.messaging.simp.broker.Log . info ( STRING ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( org.springframework.messaging.simp.broker.Log . isInfoEnabled ( ) ) { org.springframework.messaging.simp.broker.Log . info ( STRING ) ; } void ( ) ; this . org.springframework.messaging.simp.broker.SubscribableChannel . unsubscribe ( this ) ; this . org.springframework.messaging.simp.broker.SubscribableChannel . unsubscribe ( this ) ; if ( this . org.springframework.messaging.simp.broker.SubscribableChannel instanceof InterceptableChannel ) { ( ( InterceptableChannel ) this . org.springframework.messaging.simp.broker.SubscribableChannel ) . removeInterceptor ( this . org.springframework.messaging.simp.broker.ChannelInterceptor ) ; } this . boolean = false ; org.springframework.messaging.simp.broker.Log . info ( STRING ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( java.lang.Runnable java.lang.Runnable ) { synchronized ( this . java.lang.Object ) { void ( ) ; java.lang.Runnable . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final boolean boolean ( ) { synchronized ( this . java.lang.Object ) { return this . boolean ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.simp.broker.Message<?> ) { if ( ! this . boolean ) { if ( org.springframework.messaging.simp.broker.Log . isTraceEnabled ( ) ) { org.springframework.messaging.simp.broker.Log . trace ( this + STRING + org.springframework.messaging.simp.broker.Message<> ) ; } return; } void ( org.springframework.messaging.simp.broker.Message<> ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( Message < ? > org.springframework.messaging.simp.broker.Message<?> );  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { if ( ( java.lang.String == null ) || CollectionUtils . isEmpty ( this . java.util.Collection<java.lang.String> ) ) { return true ; } for ( java.lang.String java.lang.String : this . java.util.Collection<java.lang.String> ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { boolean boolean = this . java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ; if ( this . org.springframework.messaging.simp.broker.ApplicationEventPublisher != null && boolean ) { if ( org.springframework.messaging.simp.broker.Log . isInfoEnabled ( ) ) { org.springframework.messaging.simp.broker.Log . info ( this . org.springframework.messaging.simp.broker.BrokerAvailabilityEvent ) ; } this . org.springframework.messaging.simp.broker.ApplicationEventPublisher . publishEvent ( this . org.springframework.messaging.simp.broker.BrokerAvailabilityEvent ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { boolean boolean = this . java.util.concurrent.atomic.AtomicBoolean . boolean ( true , false ) ; if ( this . org.springframework.messaging.simp.broker.ApplicationEventPublisher != null && boolean ) { if ( org.springframework.messaging.simp.broker.Log . isInfoEnabled ( ) ) { org.springframework.messaging.simp.broker.Log . info ( this . org.springframework.messaging.simp.broker.BrokerAvailabilityEvent ) ; } this . org.springframework.messaging.simp.broker.ApplicationEventPublisher . publishEvent ( this . org.springframework.messaging.simp.broker.BrokerAvailabilityEvent ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.simp.broker.Message<?> , MessageChannel org.springframework.messaging.simp.broker.MessageChannel , boolean boolean , java.lang.Exception java.lang.Exception ) { if ( ! boolean ) { SimpMessageType org.springframework.messaging.simp.broker.SimpMessageType = SimpMessageHeaderAccessor . getMessageType ( org.springframework.messaging.simp.broker.Message<> . getHeaders ( ) ) ; if ( SimpMessageType . DISCONNECT . equals ( org.springframework.messaging.simp.broker.SimpMessageType ) ) { org.springframework.messaging.simp.broker.Log . debug ( STRING ) ; void ( org.springframework.messaging.simp.broker.Message<> ) ; } } }  <METHOD_END>
