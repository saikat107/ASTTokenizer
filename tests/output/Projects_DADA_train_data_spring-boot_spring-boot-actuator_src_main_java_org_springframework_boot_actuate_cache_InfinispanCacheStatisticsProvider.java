<METHOD_START> @ java.lang.Override protected javax.management.ObjectName javax.management.ObjectName ( SpringCache org.springframework.boot.actuate.cache.SpringCache )			throws javax.management.MalformedObjectNameException { javax.management.ObjectName javax.management.ObjectName = new javax.management.ObjectName ( STRING + org.springframework.boot.actuate.cache.SpringCache . getName ( ) + STRING ) ; java.util.Set<javax.management.ObjectInstance> < javax.management.ObjectInstance > java.util.Set<javax.management.ObjectInstance> = getMBeanServer ( ) . queryMBeans ( javax.management.ObjectName , null ) ; if ( java.util.Set<javax.management.ObjectInstance> . int ( ) == NUMBER ) { return java.util.Set<javax.management.ObjectInstance> . java.util.Iterator<javax.management.ObjectInstance> ( ) . javax.management.ObjectInstance ( ) . javax.management.ObjectName ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.actuate.cache.CacheStatistics org.springframework.boot.actuate.cache.CacheStatistics ( javax.management.ObjectName javax.management.ObjectName ) { DefaultCacheStatistics org.springframework.boot.actuate.cache.DefaultCacheStatistics = new DefaultCacheStatistics ( ) ; java.lang.Integer java.lang.Integer = getAttribute ( javax.management.ObjectName , STRING , java.lang.Integer .class ) ; if ( java.lang.Integer != null ) { org.springframework.boot.actuate.cache.DefaultCacheStatistics . setSize ( ( long ) java.lang.Integer ) ; if ( java.lang.Integer > NUMBER ) { void ( javax.management.ObjectName , org.springframework.boot.actuate.cache.DefaultCacheStatistics ) ; } } return org.springframework.boot.actuate.cache.DefaultCacheStatistics ; }  <METHOD_END>
<METHOD_START> private void void ( javax.management.ObjectName javax.management.ObjectName , DefaultCacheStatistics org.springframework.boot.actuate.cache.DefaultCacheStatistics ) { java.lang.Double java.lang.Double = getAttribute ( javax.management.ObjectName , STRING , java.lang.Double .class ) ; if ( ( java.lang.Double != null ) ) { org.springframework.boot.actuate.cache.DefaultCacheStatistics . setHitRatio ( java.lang.Double ) ; org.springframework.boot.actuate.cache.DefaultCacheStatistics . setMissRatio ( NUMBER - java.lang.Double ) ; } }  <METHOD_END>
