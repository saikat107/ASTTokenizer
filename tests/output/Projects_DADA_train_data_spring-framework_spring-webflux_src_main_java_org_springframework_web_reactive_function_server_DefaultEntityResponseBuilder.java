<METHOD_START> public void ( T T , BodyInserter < T , ? super ServerHttpResponse > org.springframework.web.reactive.function.server.BodyInserter<T,? super org.springframework.web.reactive.function.server.ServerHttpResponse> ) { this . T = T ; this . org.springframework.web.reactive.function.server.BodyInserter<T,? super org.springframework.web.reactive.function.server.ServerHttpResponse> = org.springframework.web.reactive.function.server.BodyInserter<T,> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public EntityResponse . EntityResponse < T > status ( HttpStatus org.springframework.web.reactive.function.server.HttpStatus ) { Assert . notNull ( org.springframework.web.reactive.function.server.HttpStatus , STRING ) ; this . org.springframework.web.reactive.function.server.HttpStatus = org.springframework.web.reactive.function.server.HttpStatus ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public EntityResponse . EntityResponse < T > header ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { this . org.springframework.web.reactive.function.server.HttpHeaders . add ( java.lang.String , java.lang.String ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public EntityResponse . EntityResponse < T > headers ( HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders ) { if ( org.springframework.web.reactive.function.server.HttpHeaders != null ) { this . org.springframework.web.reactive.function.server.HttpHeaders . putAll ( org.springframework.web.reactive.function.server.HttpHeaders ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public EntityResponse . EntityResponse < T > allow ( HttpMethod ... org.springframework.web.reactive.function.server.HttpMethod[] ) { this . org.springframework.web.reactive.function.server.HttpHeaders . setAllow ( new java.util.LinkedHashSet <> ( java.util.Arrays . java.util.List ( org.springframework.web.reactive.function.server.HttpMethod[] ) ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public EntityResponse . EntityResponse < T > allow ( java.util.Set<org.springframework.web.reactive.function.server.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.reactive.function.server.HttpMethod> ) { this . org.springframework.web.reactive.function.server.HttpHeaders . setAllow ( java.util.Set<org.springframework.web.reactive.function.server.HttpMethod> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public EntityResponse . EntityResponse < T > contentLength ( long long ) { this . org.springframework.web.reactive.function.server.HttpHeaders . setContentLength ( long ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public EntityResponse . EntityResponse < T > contentType ( MediaType org.springframework.web.reactive.function.server.MediaType ) { this . org.springframework.web.reactive.function.server.HttpHeaders . setContentType ( org.springframework.web.reactive.function.server.MediaType ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public EntityResponse . EntityResponse < T > eTag ( java.lang.String java.lang.String ) { if ( java.lang.String != null ) { if ( ! java.lang.String . boolean ( STRING ) && ! java.lang.String . boolean ( STRING ) ) { java.lang.String = STRING + java.lang.String ; } if ( ! java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String + STRING ; } } this . org.springframework.web.reactive.function.server.HttpHeaders . setETag ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public EntityResponse . EntityResponse < T > hint ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public EntityResponse . EntityResponse < T > lastModified ( java.time.ZonedDateTime java.time.ZonedDateTime ) { java.time.ZonedDateTime java.time.ZonedDateTime = java.time.ZonedDateTime . java.time.ZonedDateTime ( java.time.ZoneId . java.time.ZoneId ( STRING ) ) ; java.lang.String java.lang.String = java.time.format.DateTimeFormatter . java.time.format.DateTimeFormatter . java.lang.String ( java.time.ZonedDateTime ) ; this . org.springframework.web.reactive.function.server.HttpHeaders . set ( HttpHeaders . LAST_MODIFIED , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public EntityResponse . EntityResponse < T > location ( java.net.URI java.net.URI ) { this . org.springframework.web.reactive.function.server.HttpHeaders . setLocation ( java.net.URI ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public EntityResponse . EntityResponse < T > cacheControl ( CacheControl org.springframework.web.reactive.function.server.CacheControl ) { java.lang.String java.lang.String = org.springframework.web.reactive.function.server.CacheControl . getHeaderValue ( ) ; if ( java.lang.String != null ) { this . org.springframework.web.reactive.function.server.HttpHeaders . setCacheControl ( org.springframework.web.reactive.function.server.CacheControl . getHeaderValue ( ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public EntityResponse . EntityResponse < T > varyBy ( java.lang.String ... java.lang.String[] ) { this . org.springframework.web.reactive.function.server.HttpHeaders . setVary ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<T>> < EntityResponse < T > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<T>> ( ) { return Mono . just ( new org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.DefaultEntityResponse<T> < T > ( this . org.springframework.web.reactive.function.server.HttpStatus , this . org.springframework.web.reactive.function.server.HttpHeaders , this . T , this . org.springframework.web.reactive.function.server.BodyInserter<T,> , this . java.util.Map<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> public void ( HttpStatus org.springframework.web.reactive.function.server.HttpStatus , HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders , T T , BodyInserter < T , ? super ServerHttpResponse > org.springframework.web.reactive.function.server.BodyInserter<T,? super org.springframework.web.reactive.function.server.ServerHttpResponse> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { super( org.springframework.web.reactive.function.server.HttpStatus , org.springframework.web.reactive.function.server.HttpHeaders ); this . T = T ; this . org.springframework.web.reactive.function.server.BodyInserter<T,? super org.springframework.web.reactive.function.server.ServerHttpResponse> = org.springframework.web.reactive.function.server.BodyInserter<T,> ; this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) { return this . T ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.BodyInserter<T,? super org.springframework.web.reactive.function.server.ServerHttpResponse> < T , ? super ServerHttpResponse > org.springframework.web.reactive.function.server.BodyInserter<T,? super org.springframework.web.reactive.function.server.ServerHttpResponse> ( ) { return this . org.springframework.web.reactive.function.server.BodyInserter<T,> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.function.server.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.reactive.function.server.ServerWebExchange , HandlerStrategies org.springframework.web.reactive.function.server.HandlerStrategies ) { ServerHttpResponse org.springframework.web.reactive.function.server.ServerHttpResponse = org.springframework.web.reactive.function.server.ServerWebExchange . getResponse ( ) ; writeStatusAndHeaders ( org.springframework.web.reactive.function.server.ServerHttpResponse ) ; return org.springframework.web.reactive.function.server.BodyInserter<T,? super org.springframework.web.reactive.function.server.ServerHttpResponse> ( ) . insert ( org.springframework.web.reactive.function.server.ServerHttpResponse , new BodyInserter . BodyInserter ( ) { @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>>> ( ) { return org.springframework.web.reactive.function.server.HandlerStrategies . messageWriters ( ) ; } @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.server.ServerHttpRequest> < ServerHttpRequest > java.util.Optional<org.springframework.web.reactive.function.server.ServerHttpRequest> ( ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.server.ServerWebExchange . getRequest ( ) ) ; } @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>>> ( ) { return org.springframework.web.reactive.function.server.HandlerStrategies . messageWriters ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.server.ServerHttpRequest> < ServerHttpRequest > java.util.Optional<org.springframework.web.reactive.function.server.ServerHttpRequest> ( ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.server.ServerWebExchange . getRequest ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
