<METHOD_START> public void ( org.springframework.web.reactive.socket.WebSocketMessage.Type org.springframework.web.reactive.socket.WebSocketMessage.Type , DataBuffer org.springframework.web.reactive.socket.DataBuffer ) { Assert . notNull ( org.springframework.web.reactive.socket.WebSocketMessage.Type , STRING ) ; Assert . notNull ( org.springframework.web.reactive.socket.DataBuffer , STRING ) ; this . org.springframework.web.reactive.socket.WebSocketMessage.Type = org.springframework.web.reactive.socket.WebSocketMessage.Type ; this . org.springframework.web.reactive.socket.DataBuffer = org.springframework.web.reactive.socket.DataBuffer ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.socket.WebSocketMessage.Type org.springframework.web.reactive.socket.WebSocketMessage.Type ( ) { return this . org.springframework.web.reactive.socket.WebSocketMessage.Type ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.socket.DataBuffer org.springframework.web.reactive.socket.DataBuffer ( ) { return this . org.springframework.web.reactive.socket.DataBuffer ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { byte [] byte[] = new byte [ this . org.springframework.web.reactive.socket.DataBuffer . readableByteCount ( ) ] ; this . org.springframework.web.reactive.socket.DataBuffer . read ( byte[] ) ; return new java.lang.String ( byte[] , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.socket.WebSocketMessage org.springframework.web.reactive.socket.WebSocketMessage ( ) { DataBufferUtils . retain ( this . org.springframework.web.reactive.socket.DataBuffer ) ; return this ; }  <METHOD_END>
<METHOD_START> public void void ( ) { DataBufferUtils . release ( this . org.springframework.web.reactive.socket.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.web.reactive.socket.WebSocketMessage ) ) { return false ; } org.springframework.web.reactive.socket.WebSocketMessage org.springframework.web.reactive.socket.WebSocketMessage = ( org.springframework.web.reactive.socket.WebSocketMessage ) java.lang.Object ; return ( this . org.springframework.web.reactive.socket.WebSocketMessage.Type . boolean ( org.springframework.web.reactive.socket.WebSocketMessage . org.springframework.web.reactive.socket.WebSocketMessage.Type ) && ObjectUtils . nullSafeEquals ( this . org.springframework.web.reactive.socket.DataBuffer , org.springframework.web.reactive.socket.WebSocketMessage . org.springframework.web.reactive.socket.DataBuffer ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.web.reactive.socket.WebSocketMessage.Type . int ( ) * NUMBER + this . org.springframework.web.reactive.socket.DataBuffer . hashCode ( ) ; }  <METHOD_END>
