<METHOD_START> protected java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( ) { return EnableExpiration .class ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.String java.lang.String ( ) { return java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata ) { if ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata . hasAnnotation ( java.lang.String ( ) ) ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.data.gemfire.config.annotation.AnnotationMetadata . getAnnotationAttributes ( java.lang.String ( ) ) ; AnnotationAttributes [] org.springframework.data.gemfire.config.annotation.AnnotationAttributes[] = ( AnnotationAttributes [] ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; for ( AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes : ArrayUtils . nullSafeArray ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes[] , AnnotationAttributes .class ) ) { this . org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer = org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ComposableExpirationPolicyConfigurer . org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ( this . org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer , org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyMetaData . org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyMetaData ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) ) ; } this . org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer = ( this . org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer != null ? this . org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer : org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyMetaData . org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyMetaData ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Object java.lang.Object ) { return ( java.lang.Object instanceof Region ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ( ) { Assert . state ( this . org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer != null , STRING ) ; return org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.gemfire.config.annotation.BeanPostProcessor org.springframework.data.gemfire.config.annotation.BeanPostProcessor ( ) { return new BeanPostProcessor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.gemfire.config.annotation.BeansException { return java.lang.Object ; } @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.gemfire.config.annotation.BeansException { return ( boolean ( java.lang.Object ) ? org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ( ) . org.springframework.data.gemfire.config.annotation.Region<K,V> ( ( Region < java.lang.Object , java.lang.Object > ) java.lang.Object ) : java.lang.Object ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.gemfire.config.annotation.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.gemfire.config.annotation.BeansException { return ( boolean ( java.lang.Object ) ? org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ( ) . org.springframework.data.gemfire.config.annotation.Region<K,V> ( ( Region < java.lang.Object , java.lang.Object > ) java.lang.Object ) : java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> ( Region < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> );  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ( org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer [] org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer[] ) { return org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ( java.util.Arrays . java.util.List ( ArrayUtils . nullSafeArray ( org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer[] , org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer .class ) ) ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ( java.lang.Iterable<org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer> < org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer > java.lang.Iterable<org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer> ) { org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer = null ; for ( org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer : CollectionUtils . nullSafeIterable ( java.lang.Iterable<org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer> ) ) { org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer = org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ( org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer , org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ) ; } return org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ( org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer , org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ) { return ( org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer == null ? org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer : ( org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer == null ? org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer : new org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ComposableExpirationPolicyConfigurer ( org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer , org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ) ) ) ; }  <METHOD_END>
<METHOD_START> private void ( org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer , org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ) { this . org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer = org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ; this . org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer = org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> ( Region < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> ) { return this . org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer . org.springframework.data.gemfire.config.annotation.Region ( this . org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyConfigurer . org.springframework.data.gemfire.config.annotation.Region ( org.springframework.data.gemfire.config.annotation.Region<K,V> ) ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyMetaData org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyMetaData ( AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) { Assert . isAssignable ( ExpirationPolicy .class , org.springframework.data.gemfire.config.annotation.AnnotationAttributes . annotationType ( ) ) ; return org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyMetaData ( ( java.lang.Integer ) org.springframework.data.gemfire.config.annotation.AnnotationAttributes . get ( STRING ) , org.springframework.data.gemfire.config.annotation.AnnotationAttributes .< ExpirationActionType > getEnum ( STRING ) , org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getStringArray ( STRING ) , ( ExpirationType [] ) org.springframework.data.gemfire.config.annotation.AnnotationAttributes . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyMetaData org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyMetaData ( ExpirationPolicy org.springframework.data.gemfire.config.annotation.ExpirationPolicy ) { return org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyMetaData ( org.springframework.data.gemfire.config.annotation.ExpirationPolicy . timeout ( ) , org.springframework.data.gemfire.config.annotation.ExpirationPolicy . action ( ) , org.springframework.data.gemfire.config.annotation.ExpirationPolicy . regionNames ( ) , org.springframework.data.gemfire.config.annotation.ExpirationPolicy . types ( ) ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyMetaData org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyMetaData ( ) { return org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyMetaData ( int , org.springframework.data.gemfire.config.annotation.ExpirationActionType , java.lang.String[] , org.springframework.data.gemfire.config.annotation.ExpirationType[] ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.config.annotation.ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes ( int int , ExpirationActionType org.springframework.data.gemfire.config.annotation.ExpirationActionType ) { return org.springframework.data.gemfire.config.annotation.ExpirationAttributes ( int , org.springframework.data.gemfire.config.annotation.ExpirationActionType . getExpirationAction ( ) ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.config.annotation.ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes ( int int , ExpirationAction org.springframework.data.gemfire.config.annotation.ExpirationAction ) { return new ExpirationAttributes ( int , org.springframework.data.gemfire.config.annotation.ExpirationAction ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyMetaData org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyMetaData ( int int , ExpirationActionType org.springframework.data.gemfire.config.annotation.ExpirationActionType , java.lang.String [] java.lang.String[] , ExpirationType [] org.springframework.data.gemfire.config.annotation.ExpirationType[] ) { return new org.springframework.data.gemfire.config.annotation.ExpirationConfiguration.ExpirationPolicyMetaData ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes ( int , org.springframework.data.gemfire.config.annotation.ExpirationActionType ) , CollectionUtils . asSet ( ArrayUtils . nullSafeArray ( java.lang.String[] , java.lang.String .class ) ) , CollectionUtils . asSet ( ArrayUtils . nullSafeArray ( org.springframework.data.gemfire.config.annotation.ExpirationType[] , ExpirationType .class ) ) ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.config.annotation.ExpirationActionType org.springframework.data.gemfire.config.annotation.ExpirationActionType ( ExpirationActionType org.springframework.data.gemfire.config.annotation.ExpirationActionType ) { return SpringUtils . defaultIfNull ( org.springframework.data.gemfire.config.annotation.ExpirationActionType , org.springframework.data.gemfire.config.annotation.ExpirationActionType ) ; }  <METHOD_END>
<METHOD_START> protected static int int ( int int ) { return java.lang.Math . int ( int , int ) ; }  <METHOD_END>
<METHOD_START> protected void ( int int , ExpirationActionType org.springframework.data.gemfire.config.annotation.ExpirationActionType , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , java.util.Set<org.springframework.data.gemfire.config.annotation.ExpirationType> < ExpirationType > java.util.Set<org.springframework.data.gemfire.config.annotation.ExpirationType> ) { this( org.springframework.data.gemfire.config.annotation.ExpirationAttributes ( int ( int ) , org.springframework.data.gemfire.config.annotation.ExpirationActionType ( org.springframework.data.gemfire.config.annotation.ExpirationActionType ) ) , java.util.Set<java.lang.String> , java.util.Set<org.springframework.data.gemfire.config.annotation.ExpirationType> ); }  <METHOD_END>
<METHOD_START> protected void ( ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , java.util.Set<org.springframework.data.gemfire.config.annotation.ExpirationType> < ExpirationType > java.util.Set<org.springframework.data.gemfire.config.annotation.ExpirationType> ) { Assert . notEmpty ( java.util.Set<org.springframework.data.gemfire.config.annotation.ExpirationType> , STRING ) ; this . org.springframework.data.gemfire.config.annotation.ExpirationAttributes = org.springframework.data.gemfire.config.annotation.ExpirationAttributes ; this . java.util.Set<java.lang.String> . boolean ( CollectionUtils . nullSafeSet ( java.util.Set<java.lang.String> ) ) ; this . java.util.Set<org.springframework.data.gemfire.config.annotation.ExpirationType> . addAll ( CollectionUtils . nullSafeSet ( java.util.Set<org.springframework.data.gemfire.config.annotation.ExpirationType> ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( Region org.springframework.data.gemfire.config.annotation.Region ) { return ( org.springframework.data.gemfire.config.annotation.Region != null && boolean ( org.springframework.data.gemfire.config.annotation.Region . getName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { return ( this . java.util.Set<java.lang.String> . boolean ( ) || this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . java.util.Set<org.springframework.data.gemfire.config.annotation.ExpirationType> . contains ( ExpirationType . IDLE_TIMEOUT ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . java.util.Set<org.springframework.data.gemfire.config.annotation.ExpirationType> . contains ( ExpirationType . TIME_TO_LIVE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> ( Region < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> ) { if ( boolean ( org.springframework.data.gemfire.config.annotation.Region<K,V> ) ) { AttributesMutator < K , V > org.springframework.data.gemfire.config.annotation.AttributesMutator<K,V> = org.springframework.data.gemfire.config.annotation.Region<K,V> . getAttributesMutator ( ) ; ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes = org.springframework.data.gemfire.config.annotation.ExpirationAttributes ( ) ; if ( boolean ( ) ) { org.springframework.data.gemfire.config.annotation.AttributesMutator<K,V> . setCustomEntryIdleTimeout ( AnnotationBasedExpiration .< K , V > forIdleTimeout ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes ) ) ; } if ( boolean ( ) ) { org.springframework.data.gemfire.config.annotation.AttributesMutator<K,V> . setCustomEntryTimeToLive ( AnnotationBasedExpiration .< K , V > forTimeToLive ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes ) ) ; } } return org.springframework.data.gemfire.config.annotation.Region<K,V> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes ( ) { return this . org.springframework.data.gemfire.config.annotation.ExpirationAttributes ; }  <METHOD_END>
