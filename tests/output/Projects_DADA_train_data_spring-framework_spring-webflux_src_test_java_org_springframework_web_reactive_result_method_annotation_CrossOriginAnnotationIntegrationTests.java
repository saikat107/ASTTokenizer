<METHOD_START> @ Before public void void ( ) java.lang.Exception { super. setup ( ) ; this . org.springframework.web.reactive.result.method.annotation.HttpHeaders = new HttpHeaders ( ) ; this . org.springframework.web.reactive.result.method.annotation.HttpHeaders . setOrigin ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.ApplicationContext org.springframework.web.reactive.result.method.annotation.ApplicationContext ( ) { AnnotationConfigApplicationContext org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . register ( org.springframework.web.reactive.result.method.annotation.CrossOriginAnnotationIntegrationTests.WebConfig .class ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . getPropertySources ( ) . addFirst ( new PropertiesPropertySource ( STRING , java.util.Properties ) ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . register ( PropertySourcesPlaceholderConfigurer .class ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.RestTemplate org.springframework.web.reactive.result.method.annotation.RestTemplate ( ) { return new RestTemplate ( new HttpComponentsClientHttpRequestFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = performGet ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertNull ( org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = performPost ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , null , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertNull ( org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = performGet ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; assertEquals ( true , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowCredentials ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.method.annotation.HttpHeaders . add ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = performOptions ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getHeaders ( ) . getAccessControlMaxAge ( ) ) ; assertEquals ( true , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getHeaders ( ) . getAccessControlAllowCredentials ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.reactive.result.method.annotation.HttpHeaders = new HttpHeaders ( ) ; ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = performGet ( STRING , org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertNull ( org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = performGet ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; assertEquals ( false , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowCredentials ( ) ) ; assertEquals ( - NUMBER , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlMaxAge ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.method.annotation.HttpHeaders . add ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; this . org.springframework.web.reactive.result.method.annotation.HttpHeaders . add ( HttpHeaders . ACCESS_CONTROL_REQUEST_HEADERS , STRING ) ; ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = performOptions ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; assertArrayEquals ( new HttpMethod [] { HttpMethod . GET } , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowMethods ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowHeaders ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlExposeHeaders ( ) . toArray ( ) ) ; assertEquals ( false , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowCredentials ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlMaxAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = performGet ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = performGet ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = performGet ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; assertEquals ( false , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowCredentials ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getBody ( ) ) ; org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = performGet ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; assertEquals ( false , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowCredentials ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getBody ( ) ) ; org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = performGet ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; assertEquals ( true , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowCredentials ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.method.annotation.HttpHeaders . add ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; this . org.springframework.web.reactive.result.method.annotation.HttpHeaders . add ( HttpHeaders . ACCESS_CONTROL_REQUEST_HEADERS , STRING ) ; ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = performOptions ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; assertArrayEquals ( new HttpMethod [] { HttpMethod . GET } , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowMethods ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowHeaders ( ) . toArray ( ) ) ; assertEquals ( true , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowCredentials ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.method.annotation.HttpHeaders . add ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = performOptions ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; assertArrayEquals ( new HttpMethod [] { HttpMethod . GET } , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowMethods ( ) . toArray ( ) ) ; assertEquals ( true , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowCredentials ( ) ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ CrossOrigin @ GetMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ CrossOrigin @ GetMapping ( path = STRING , params = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ CrossOrigin @ GetMapping ( path = STRING , headers = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ CrossOrigin @ GetMapping ( path = STRING , headers = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ CrossOrigin @ GetMapping ( path = STRING , produces = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ CrossOrigin @ GetMapping ( path = STRING , produces = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ CrossOrigin ( origins = { STRING , STRING } , allowedHeaders = { STRING , STRING } , exposedHeaders = { STRING , STRING } , methods = RequestMethod . GET , maxAge = NUMBER , allowCredentials = STRING ) @ RequestMapping ( path = STRING , method = { RequestMethod . GET , RequestMethod . POST } ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ CrossOrigin ( STRING ) @ GetMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ CrossOrigin ( STRING ) @ GetMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ CrossOrigin @ GetMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ CrossOrigin ( allowCredentials = STRING ) @ GetMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
