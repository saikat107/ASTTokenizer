<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = java.util.Properties ( org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ( org.springframework.boot.gradle.tasks.buildinfo.Project ( STRING ) ) ) ; assertThat ( java.util.Properties ) . containsKey ( STRING ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BuildInfo org.springframework.boot.gradle.tasks.buildinfo.BuildInfo = org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ( org.springframework.boot.gradle.tasks.buildinfo.Project ( STRING ) ) ; org.springframework.boot.gradle.tasks.buildinfo.BuildInfo . getProperties ( ) . setArtifact ( STRING ) ; assertThat ( java.util.Properties ( org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BuildInfo org.springframework.boot.gradle.tasks.buildinfo.BuildInfo = org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ( org.springframework.boot.gradle.tasks.buildinfo.Project ( STRING ) ) ; org.springframework.boot.gradle.tasks.buildinfo.BuildInfo . getProject ( ) . setGroup ( STRING ) ; assertThat ( java.util.Properties ( org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BuildInfo org.springframework.boot.gradle.tasks.buildinfo.BuildInfo = org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ( org.springframework.boot.gradle.tasks.buildinfo.Project ( STRING ) ) ; org.springframework.boot.gradle.tasks.buildinfo.BuildInfo . getProperties ( ) . setGroup ( STRING ) ; assertThat ( java.util.Properties ( org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BuildInfo org.springframework.boot.gradle.tasks.buildinfo.BuildInfo = org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ( org.springframework.boot.gradle.tasks.buildinfo.Project ( STRING ) ) ; org.springframework.boot.gradle.tasks.buildinfo.BuildInfo . getProperties ( ) . setName ( STRING ) ; assertThat ( java.util.Properties ( org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BuildInfo org.springframework.boot.gradle.tasks.buildinfo.BuildInfo = org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ( org.springframework.boot.gradle.tasks.buildinfo.Project ( STRING ) ) ; org.springframework.boot.gradle.tasks.buildinfo.BuildInfo . getProject ( ) . setVersion ( STRING ) ; assertThat ( java.util.Properties ( org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BuildInfo org.springframework.boot.gradle.tasks.buildinfo.BuildInfo = org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ( org.springframework.boot.gradle.tasks.buildinfo.Project ( STRING ) ) ; org.springframework.boot.gradle.tasks.buildinfo.BuildInfo . getProperties ( ) . setVersion ( STRING ) ; assertThat ( java.util.Properties ( org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BuildInfo org.springframework.boot.gradle.tasks.buildinfo.BuildInfo = org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ( org.springframework.boot.gradle.tasks.buildinfo.Project ( STRING ) ) ; org.springframework.boot.gradle.tasks.buildinfo.BuildInfo . getProperties ( ) . getAdditional ( ) . put ( STRING , STRING ) ; org.springframework.boot.gradle.tasks.buildinfo.BuildInfo . getProperties ( ) . getAdditional ( ) . put ( STRING , STRING ) ; assertThat ( java.util.Properties ( org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ) ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Properties ( org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.gradle.tasks.buildinfo.Project org.springframework.boot.gradle.tasks.buildinfo.Project ( java.lang.String java.lang.String ) { try { java.io.File java.io.File = this . org.springframework.boot.gradle.tasks.buildinfo.TemporaryFolder . newFolder ( java.lang.String ) ; return ProjectBuilder . builder ( ) . withProjectDir ( java.io.File ) . withName ( java.lang.String ) . build ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.RuntimeException ( java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.gradle.tasks.buildinfo.BuildInfo org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ( Project org.springframework.boot.gradle.tasks.buildinfo.Project ) { return org.springframework.boot.gradle.tasks.buildinfo.Project . getTasks ( ) . create ( STRING , BuildInfo .class ) ; }  <METHOD_END>
<METHOD_START> private java.util.Properties java.util.Properties ( BuildInfo org.springframework.boot.gradle.tasks.buildinfo.BuildInfo ) { org.springframework.boot.gradle.tasks.buildinfo.BuildInfo . generateBuildProperties ( ) ; return java.util.Properties ( new java.io.File ( org.springframework.boot.gradle.tasks.buildinfo.BuildInfo . getDestinationDir ( ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Properties java.util.Properties ( java.io.File java.io.File ) { assertThat ( java.io.File ) . isFile ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; try ( java.io.FileReader java.io.FileReader = new java.io.FileReader ( java.io.File ) ) { java.util.Properties . void ( java.io.FileReader ) ; return java.util.Properties ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.RuntimeException ( java.io.IOException ) ; } }  <METHOD_END>
