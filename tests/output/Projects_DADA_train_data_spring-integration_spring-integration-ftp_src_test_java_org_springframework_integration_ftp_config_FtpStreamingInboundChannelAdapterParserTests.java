<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertFalse ( TestUtils . getPropertyValue ( this . org.springframework.integration.ftp.config.SourcePollingChannelAdapter , STRING , java.lang.Boolean .class ) ) ; assertEquals ( STRING , this . org.springframework.integration.ftp.config.SourcePollingChannelAdapter . getComponentName ( ) ) ; assertEquals ( STRING , this . org.springframework.integration.ftp.config.SourcePollingChannelAdapter . getComponentType ( ) ) ; assertSame ( this . org.springframework.integration.ftp.config.MessageChannel , TestUtils . getPropertyValue ( this . org.springframework.integration.ftp.config.SourcePollingChannelAdapter , STRING ) ) ; FtpStreamingMessageSource org.springframework.integration.ftp.config.FtpStreamingMessageSource = TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.SourcePollingChannelAdapter , STRING , FtpStreamingMessageSource .class ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FtpStreamingMessageSource , STRING ) ) ; assertThat ( TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FtpStreamingMessageSource , STRING , java.lang.String .class ) , equalTo ( STRING ) ) ; FileListFilter < ? > org.springframework.integration.ftp.config.FileListFilter<?> = TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FtpStreamingMessageSource , STRING , FileListFilter .class ) ; assertNotNull ( org.springframework.integration.ftp.config.FileListFilter<> ) ; assertThat ( org.springframework.integration.ftp.config.FileListFilter<> , instanceOf ( CompositeFileListFilter .class ) ) ; java.util.Set<?> < ? > java.util.Set<?> = TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FileListFilter<> , STRING , java.util.Set .class ) ; java.util.Iterator<?> < ? > java.util.Iterator<?> = java.util.Set<> . java.util.Iterator<> ( ) ; assertThat ( java.util.Iterator<> . next ( ) , instanceOf ( FtpSimplePatternFileListFilter .class ) ) ; assertThat ( java.util.Iterator<> . next ( ) , instanceOf ( FtpPersistentAcceptOnceFileListFilter .class ) ) ; assertSame ( this . org.springframework.integration.ftp.config.CachingSessionFactory<> , TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FtpStreamingMessageSource , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.ftp.config.FtpStreamingMessageSource , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ftp.config.DefaultFtpSessionFactory org.springframework.integration.ftp.config.DefaultFtpSessionFactory ( ) java.lang.Exception { DefaultFtpSessionFactory org.springframework.integration.ftp.config.DefaultFtpSessionFactory = mock ( DefaultFtpSessionFactory .class ) ; FtpSession org.springframework.integration.ftp.config.FtpSession = mock ( FtpSession .class ) ; when ( org.springframework.integration.ftp.config.DefaultFtpSessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.ftp.config.FtpSession ) ; return org.springframework.integration.ftp.config.DefaultFtpSessionFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return DefaultFtpSessionFactory .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
