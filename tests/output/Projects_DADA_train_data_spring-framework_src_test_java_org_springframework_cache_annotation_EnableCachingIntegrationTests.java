<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.cache.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.cache.annotation.AnnotationConfigApplicationContext . register ( org.springframework.cache.annotation.EnableCachingIntegrationTests.Config .class , org.springframework.cache.annotation.EnableCachingIntegrationTests.ProxyTargetClassCachingConfig .class ) ; org.springframework.cache.annotation.AnnotationConfigApplicationContext . refresh ( ) ; void ( org.springframework.cache.annotation.AnnotationConfigApplicationContext ) ; assertThat ( AopUtils . isCglibProxy ( org.springframework.cache.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.cache.annotation.EnableCachingIntegrationTests.FooRepository .class ) ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.cache.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.cache.annotation.AnnotationConfigApplicationContext . register ( org.springframework.cache.annotation.EnableCachingIntegrationTests.Config .class , org.springframework.cache.annotation.EnableCachingIntegrationTests.AspectJCacheConfig .class ) ; try { org.springframework.cache.annotation.AnnotationConfigApplicationContext . refresh ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( java.lang.Exception . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AnnotationConfigApplicationContext org.springframework.cache.annotation.AnnotationConfigApplicationContext ) { org.springframework.cache.annotation.EnableCachingIntegrationTests.FooRepository org.springframework.cache.annotation.EnableCachingIntegrationTests.FooRepository = org.springframework.cache.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.cache.annotation.EnableCachingIntegrationTests.FooRepository .class ) ; boolean boolean = false ; if ( AopUtils . isAopProxy ( org.springframework.cache.annotation.EnableCachingIntegrationTests.FooRepository ) ) { for ( Advisor org.springframework.cache.annotation.Advisor : ( ( Advised ) org.springframework.cache.annotation.EnableCachingIntegrationTests.FooRepository ) . getAdvisors ( ) ) { if ( org.springframework.cache.annotation.Advisor instanceof BeanFactoryCacheOperationSourceAdvisor ) { boolean = true ; break; } } } assertTrue ( STRING , boolean ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.cache.annotation.CacheManager org.springframework.cache.annotation.CacheManager ( ) { return new NoOpCacheManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.cache.annotation.EnableCachingIntegrationTests.FooRepository org.springframework.cache.annotation.EnableCachingIntegrationTests.FooRepository ( ) { return new org.springframework.cache.annotation.EnableCachingIntegrationTests.DummyFooRepository ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.cache.annotation.CacheManager org.springframework.cache.annotation.CacheManager ( ) { return new NoOpCacheManager ( ) ; }  <METHOD_END>
<METHOD_START> java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Cacheable ( STRING ) public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( ) { return java.util.Collections . java.util.List<java.lang.Object> ( ) ; }  <METHOD_END>
