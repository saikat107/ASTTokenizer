<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { newAggregation ( ( AggregationOperation [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { newAggregation ( java.lang.String .class , ( AggregationOperation [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { newAggregation ( new AggregationOperation [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { newAggregation ( java.lang.String .class , new AggregationOperation [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.aggregation.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.mongodb.core.aggregation.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mongodb.core.aggregation.ExpectedException . expectMessage ( STRING ) ; newAggregation ( project ( STRING , STRING ) , group ( STRING ) . count ( ) . as ( STRING ) , project ( STRING , STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { newAggregation ( project ( STRING , STRING ) , unwind ( STRING ) , project ( STRING , STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { newAggregation ( project ( STRING , STRING ) , unwind ( STRING , STRING ) , project ( STRING , STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { newAggregation ( project ( STRING , STRING ) , unwind ( STRING , STRING ) , project ( STRING , STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = newAggregation ( unwind ( STRING , STRING , true ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; @ java.lang.SuppressWarnings ( STRING ) Document org.springframework.data.mongodb.core.aggregation.Document = ( ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> < Document > ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) ) . org.springframework.data.mongodb.core.aggregation.Document ( NUMBER ) ; assertThat ( ( Document ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = newAggregation ( unwind ( STRING , true ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; @ java.lang.SuppressWarnings ( STRING ) Document org.springframework.data.mongodb.core.aggregation.Document = ( ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> < Document > ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) ) . org.springframework.data.mongodb.core.aggregation.Document ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . notContaining ( STRING ) . containing ( STRING , true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = newAggregation ( replaceRoot ( ) . withDocument ( ) . andValue ( STRING ) . as ( STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; @ java.lang.SuppressWarnings ( STRING ) Document org.springframework.data.mongodb.core.aggregation.Document = ( ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> < Document > ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) ) . org.springframework.data.mongodb.core.aggregation.Document ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , new Document ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { newAggregation ( project ( STRING , STRING ) , match ( where ( STRING ) . gte ( NUMBER ) ) , project ( STRING , STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = newAggregation ( project ( STRING ) , group ( STRING ) . count ( ) . as ( STRING ) , project ( STRING , STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; @ java.lang.SuppressWarnings ( STRING ) Document org.springframework.data.mongodb.core.aggregation.Document = ( ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> < Document > ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) ) . org.springframework.data.mongodb.core.aggregation.Document ( NUMBER ) ; Document org.springframework.data.mongodb.core.aggregation.Document = getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> < AggregationOperation > java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> = new java.util.ArrayList<org.springframework.data.mongodb.core.aggregation.AggregationOperation> < AggregationOperation > ( ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> . add ( project ( STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> . add ( group ( STRING ) . count ( ) . as ( STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> . add ( project ( STRING , STRING ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = newAggregation ( java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; @ java.lang.SuppressWarnings ( STRING ) Document org.springframework.data.mongodb.core.aggregation.Document = ( ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> < Document > ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) ) . org.springframework.data.mongodb.core.aggregation.Document ( NUMBER ) ; Document org.springframework.data.mongodb.core.aggregation.Document = getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> < AggregationOperation > java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> = new java.util.ArrayList<org.springframework.data.mongodb.core.aggregation.AggregationOperation> < AggregationOperation > ( ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> . add ( project ( STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> . add ( group ( STRING ) . count ( ) . as ( STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> . add ( project ( STRING , STRING ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = newAggregation ( Document .class , java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; @ java.lang.SuppressWarnings ( STRING ) Document org.springframework.data.mongodb.core.aggregation.Document = ( ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> < Document > ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) ) . org.springframework.data.mongodb.core.aggregation.Document ( NUMBER ) ; Document org.springframework.data.mongodb.core.aggregation.Document = getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = newAggregation ( project ( STRING ) . andExpression ( STRING ) . as ( STRING ) , group ( STRING ) . sum ( STRING ) . as ( STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; @ java.lang.SuppressWarnings ( STRING ) Document org.springframework.data.mongodb.core.aggregation.Document = ( ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> < Document > ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) ) . org.springframework.data.mongodb.core.aggregation.Document ( NUMBER ) ; Document org.springframework.data.mongodb.core.aggregation.Document = getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) new Document ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = newAggregation ( project ( STRING , STRING ) , unwind ( STRING ) , group ( STRING , STRING ) . count ( ) . as ( STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( notNullValue ( ) ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = ( ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> < Document > ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) ) . org.springframework.data.mongodb.core.aggregation.Document ( NUMBER ) ; Document org.springframework.data.mongodb.core.aggregation.Document = getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = newAggregation ( group ( STRING ) . addToSet ( STRING ) . as ( STRING ) , sort ( Direction . ASC , STRING , STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( notNullValue ( ) ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = ( ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> < Document > ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) ) . org.springframework.data.mongodb.core.aggregation.Document ( NUMBER ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = newAggregation ( project ( STRING ) . and ( SystemVariable . CURRENT + STRING ) . as ( STRING ) . and ( STRING ) . as ( STRING ) , sort ( Direction . ASC , STRING , STRING , STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( notNullValue ( ) ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = ( ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> < Document > ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) ) . org.springframework.data.mongodb.core.aggregation.Document ( NUMBER ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , NUMBER ) . containing ( STRING , NUMBER ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = newAggregation ( project ( ) . and ( STRING ) . as ( STRING ) , project ( ) . and ( STRING ) . as ( STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( ( Document ) new Document ( STRING , STRING ) ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( ( Document ) new Document ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = newAggregation ( project ( ) . and ( STRING ) . as ( STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AggregationOptions org.springframework.data.mongodb.core.aggregation.AggregationOptions = newAggregationOptions ( ) . explain ( true ) . cursor ( new Document ( STRING , NUMBER ) ) . allowDiskUse ( true ) . build ( ) ; Document org.springframework.data.mongodb.core.aggregation.Document = newAggregation ( project ( ) . and ( STRING ) . as ( STRING ) ) . withOptions ( org.springframework.data.mongodb.core.aggregation.AggregationOptions ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING + STRING + STRING + STRING + STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = newAggregation ( project ( STRING ) . and ( STRING ) . as ( STRING ) . and ( Aggregation . CURRENT + STRING ) . as ( STRING ) , sort ( Direction . DESC , STRING ) , group ( STRING ) . first ( Aggregation . ROOT ) . as ( STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( ( Document ) new Document ( STRING , NUMBER ) . append ( STRING , STRING ) . append ( STRING , STRING ) ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( ( Document ) new Document ( STRING , - NUMBER ) ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( ( Document ) new Document ( STRING , STRING ) . append ( STRING , new Document ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = Aggregation . newAggregation ( project ( STRING ) . and ( STRING ) . minus ( NUMBER ) . as ( STRING ) , group ( STRING ) . sum ( STRING ) . as ( STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER , STRING ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , is ( new Document ( ) . append ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = Aggregation . newAggregation ( project ( STRING ) . andExpression ( STRING ) , group ( STRING ) . sum ( STRING ) . as ( STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER , STRING ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , is ( new Document ( ) . append ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = newAggregation ( project ( STRING , STRING ) , group ( STRING ) . first ( Cond . newBuilder ( ) . when ( Criteria . where ( STRING ) . gte ( NUMBER ) ) . thenValueOf ( STRING ) . otherwise ( STRING ) ) . as ( STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; java.lang.System . java.io.PrintStream . void ( STRING + org.springframework.data.mongodb.core.aggregation.Document ) ; @ java.lang.SuppressWarnings ( STRING ) Document org.springframework.data.mongodb.core.aggregation.Document = ( ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> < Document > ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) ) . org.springframework.data.mongodb.core.aggregation.Document ( NUMBER ) ; Document org.springframework.data.mongodb.core.aggregation.Document = getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING ) ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , STRING ) ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = Aggregation . newAggregation ( project ( ) . and ( ConditionalOperators . Cond . newBuilder ( ) . when ( STRING ) . then ( STRING ) . otherwise ( STRING ) ) . as ( STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( ) . append ( STRING , STRING ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = Aggregation . newAggregation ( project ( ) . and ( STRING ) . applyCondition ( ConditionalOperators . Cond . newBuilder ( ) . when ( STRING ) . then ( STRING ) . otherwise ( STRING ) ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( ) . append ( STRING , STRING ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = Aggregation . newAggregation ( project ( ) . and ( STRING ) . applyCondition ( ConditionalOperators . Cond . newBuilder ( ) . when ( Criteria . where ( STRING ) . gt ( NUMBER ) ) . then ( STRING ) . otherwise ( STRING ) ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( ) . append ( STRING , new Document ( STRING , java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = Aggregation . newAggregation ( project ( ) . and ( STRING ) . as ( STRING ) , project ( ) . and ( STRING ) . applyCondition ( ConditionalOperators . when ( STRING ) . thenValueOf ( STRING ) . otherwise ( STRING ) ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( ) . append ( STRING , STRING ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = Aggregation . newAggregation ( project ( ) . and ( STRING ) . as ( STRING ) , project ( ) . and ( STRING ) . applyCondition ( ConditionalOperators . Cond . newBuilder ( ) . when ( Criteria . where ( STRING ) . is ( NUMBER ) ) . then ( STRING ) . otherwise ( STRING ) ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( ) . append ( STRING , new Document ( STRING , java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = Aggregation . newAggregation ( project ( ) . and ( STRING ) , project ( ) . and ( STRING ) . applyCondition ( ConditionalOperators . ifNull ( STRING ) . then ( STRING ) ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER , STRING ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = Aggregation . newAggregation ( project ( STRING ) . and ( STRING ) . as ( STRING ) , project ( ) . and ( STRING ) . applyCondition ( ConditionalOperators . ifNull ( STRING ) . thenValueOf ( STRING ) ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER , STRING ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = Aggregation . newAggregation ( bucket ( STRING ) , project ( STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = newAggregation ( project ( STRING ) , group ( STRING ) . first ( AggregationSpELExpression . expressionOf ( STRING ) ) . as ( STRING ) ) . toDocument ( STRING , Aggregation . DEFAULT_CONTEXT ) ; @ java.lang.SuppressWarnings ( STRING ) Document org.springframework.data.mongodb.core.aggregation.Document = ( ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> < Document > ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) ) . org.springframework.data.mongodb.core.aggregation.Document ( NUMBER ) ; Document org.springframework.data.mongodb.core.aggregation.Document = getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING ) ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , new Document ( STRING , new Document ( STRING , NUMBER ) ) ) ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , STRING ) ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.aggregation.Document org.springframework.data.mongodb.core.aggregation.Document ( Document org.springframework.data.mongodb.core.aggregation.Document , int int , java.lang.String java.lang.String ) { java.util.List<org.springframework.data.mongodb.core.aggregation.Document> < Document > java.util.List<org.springframework.data.mongodb.core.aggregation.Document> = ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> < Document > ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) ; return ( Document ) java.util.List<org.springframework.data.mongodb.core.aggregation.Document> . get ( int ) . get ( java.lang.String ) ; }  <METHOD_END>
