<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void void ( XMPPTCPConnectionConfiguration org.springframework.integration.xmpp.config.XMPPTCPConnectionConfiguration ) { this . org.springframework.integration.xmpp.config.XMPPTCPConnectionConfiguration = org.springframework.integration.xmpp.config.XMPPTCPConnectionConfiguration ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( Roster . Roster Roster.SubscriptionMode ) { this . Roster.SubscriptionMode = Roster.SubscriptionMode ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends org.springframework.integration.xmpp.config.XMPPConnection> < ? extends XMPPConnection > java.lang.Class<? extends org.springframework.integration.xmpp.config.XMPPConnection> ( ) { return XMPPConnection .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.xmpp.config.XMPPConnection org.springframework.integration.xmpp.config.XMPPConnection ( ) java.lang.Exception { XMPPTCPConnectionConfiguration org.springframework.integration.xmpp.config.XMPPTCPConnectionConfiguration = this . org.springframework.integration.xmpp.config.XMPPTCPConnectionConfiguration ; if ( this . org.springframework.integration.xmpp.config.XMPPTCPConnectionConfiguration == null ) { XMPPTCPConnectionConfiguration . XMPPTCPConnectionConfiguration XMPPTCPConnectionConfiguration.Builder = XMPPTCPConnectionConfiguration . builder ( ) . setHost ( this . java.lang.String ) . setPort ( this . int ) . setResource ( this . java.lang.String ) . setUsernameAndPassword ( this . java.lang.String , this . java.lang.String ) . setServiceName ( this . java.lang.String ) ; if ( ! StringUtils . hasText ( this . java.lang.String ) && StringUtils . hasText ( this . java.lang.String ) ) { XMPPTCPConnectionConfiguration.Builder . setUsernameAndPassword ( XmppStringUtils . parseLocalpart ( this . java.lang.String ) , this . java.lang.String ) . setServiceName ( XmppStringUtils . parseDomain ( this . java.lang.String ) ) ; } org.springframework.integration.xmpp.config.XMPPTCPConnectionConfiguration = XMPPTCPConnectionConfiguration.Builder . build ( ) ; } this . org.springframework.integration.xmpp.config.XMPPTCPConnection = new XMPPTCPConnection ( org.springframework.integration.xmpp.config.XMPPTCPConnectionConfiguration ) ; return this . org.springframework.integration.xmpp.config.XMPPTCPConnection ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( this . boolean ) { return; } try { this . org.springframework.integration.xmpp.config.XMPPTCPConnection . connect ( ) ; this . org.springframework.integration.xmpp.config.XMPPTCPConnection . addConnectionListener ( new org.springframework.integration.xmpp.config.XmppConnectionFactoryBean.LoggingConnectionListener ( ) ) ; this . org.springframework.integration.xmpp.config.XMPPTCPConnection . login ( ) ; if ( this . Roster.SubscriptionMode != null ) { Roster . getInstanceFor ( this . org.springframework.integration.xmpp.config.XMPPTCPConnection ) . setSubscriptionMode ( this . Roster.SubscriptionMode ) ; } this . boolean = true ; } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanInitializationException ( STRING + this . org.springframework.integration.xmpp.config.XMPPTCPConnection . getServiceName ( ) , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( this . boolean ( ) ) { this . org.springframework.integration.xmpp.config.XMPPTCPConnection . disconnect ( ) ; this . boolean = false ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { void ( ) ; java.lang.Runnable . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { logger . debug ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Exception java.lang.Exception ) { logger . debug ( STRING , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { logger . debug ( STRING + int + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Exception java.lang.Exception ) { logger . debug ( STRING , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { logger . debug ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( XMPPConnection org.springframework.integration.xmpp.config.XMPPConnection ) { logger . debug ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( XMPPConnection org.springframework.integration.xmpp.config.XMPPConnection , boolean boolean ) { logger . debug ( STRING ) ; }  <METHOD_END>
