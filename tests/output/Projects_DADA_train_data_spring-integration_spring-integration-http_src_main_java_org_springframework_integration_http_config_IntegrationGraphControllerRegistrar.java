<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.integration.http.config.AnnotationMetadata , BeanDefinitionRegistry org.springframework.integration.http.config.BeanDefinitionRegistry ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.http.config.AnnotationMetadata . getAnnotationAttributes ( EnableIntegrationGraphController .class . java.lang.String ( ) ) ; if ( ! org.springframework.integration.http.config.BeanDefinitionRegistry . containsBeanDefinition ( IntegrationContextUtils . INTEGRATION_GRAPH_SERVER_BEAN_NAME ) ) { org.springframework.integration.http.config.BeanDefinitionRegistry . registerBeanDefinition ( IntegrationContextUtils . INTEGRATION_GRAPH_SERVER_BEAN_NAME , new RootBeanDefinition ( IntegrationGraphServer .class ) ) ; } java.lang.String [] java.lang.String[] = ( java.lang.String [] ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; if ( java.lang.String[] != null && java.lang.String[] . int > NUMBER ) { AbstractBeanDefinition org.springframework.integration.http.config.AbstractBeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( org.springframework.integration.http.config.IntegrationGraphControllerRegistrar.IntegrationGraphCorsConfigurer .class ) . addConstructorArgValue ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . addConstructorArgValue ( java.lang.String[] ) . getBeanDefinition ( ) ; BeanDefinitionReaderUtils . registerWithGeneratedName ( org.springframework.integration.http.config.AbstractBeanDefinition , org.springframework.integration.http.config.BeanDefinitionRegistry ) ; } if ( ! org.springframework.integration.http.config.BeanDefinitionRegistry . containsBeanDefinition ( HttpContextUtils . GRAPH_CONTROLLER_BEAN_NAME ) ) { AbstractBeanDefinition org.springframework.integration.http.config.AbstractBeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( org.springframework.integration.http.config.IntegrationGraphControllerRegistrar.GraphControllerPropertiesPopulator .class ) . addConstructorArgValue ( java.util.Map<java.lang.String,java.lang.Object> ) . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) . getBeanDefinition ( ) ; BeanDefinitionReaderUtils . registerWithGeneratedName ( org.springframework.integration.http.config.AbstractBeanDefinition , org.springframework.integration.http.config.BeanDefinitionRegistry ) ; BeanDefinition org.springframework.integration.http.config.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( IntegrationGraphController .class ) . addConstructorArgReference ( IntegrationContextUtils . INTEGRATION_GRAPH_SERVER_BEAN_NAME ) . getBeanDefinition ( ) ; org.springframework.integration.http.config.BeanDefinitionRegistry . registerBeanDefinition ( HttpContextUtils . GRAPH_CONTROLLER_BEAN_NAME , org.springframework.integration.http.config.BeanDefinition ) ; } }  <METHOD_END>
<METHOD_START> private void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AnnotationUtils . VALUE ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( HttpContextUtils . GRAPH_CONTROLLER_PATH_PROPERTY , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.integration.http.config.Environment ) { ( ( ConfigurableEnvironment ) org.springframework.integration.http.config.Environment ) . getPropertySources ( ) . addLast ( new MapPropertySource ( HttpContextUtils . GRAPH_CONTROLLER_BEAN_NAME + STRING , this . java.util.Map<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.integration.http.config.ConfigurableListableBeanFactory ) throws org.springframework.integration.http.config.BeansException {		}  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String , java.lang.String [] java.lang.String[] ) { this . java.lang.String = java.lang.String ; this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CorsRegistry org.springframework.integration.http.config.CorsRegistry ) { org.springframework.integration.http.config.CorsRegistry . addMapping ( this . java.lang.String ) . allowedOrigins ( this . java.lang.String[] ) . allowedMethods ( STRING ) ; }  <METHOD_END>
