<METHOD_START> @ java.lang.Override protected void void ( java.lang.Throwable java.lang.Throwable , Description org.springframework.data.gemfire.Description ) { java.lang.System . java.io.PrintStream . void ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.Description . getDisplayName ( ) ) ) ; java.lang.System . java.io.PrintStream . void ( ThrowableUtils . toString ( java.lang.Throwable ) ) ; java.lang.System . java.io.PrintStream . void ( STRING ) ; java.lang.System . java.io.PrintStream . void ( java.lang.String ( org.springframework.data.gemfire.Description ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Description org.springframework.data.gemfire.Description ) { if ( java.lang.Boolean . java.lang.Boolean ( java.lang.System . java.lang.String ( STRING , java.lang.Boolean . java.lang.Boolean . java.lang.String ( ) ) ) ) { try { FileUtils . write ( new java.io.File ( java.io.File . java.lang.String ( ) , java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.Description . getMethodName ( ) ) ) , java.lang.String ( org.springframework.data.gemfire.Description ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.RuntimeException ( STRING , java.io.IOException ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( Description org.springframework.data.gemfire.Description ) { try { java.lang.String java.lang.String = StringUtils . collectionToDelimitedString ( java.util.List<java.lang.String> , FileUtils . LINE_SEPARATOR , java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.Description . getMethodName ( ) ) , STRING ) ; java.lang.String = ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : org.springframework.data.gemfire.ProcessWrapper . readLogFile ( ) ) ; return java.lang.String ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.RuntimeException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ BeforeClass public static void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; java.io.File = new java.io.File ( java.lang.System . java.lang.String ( STRING ) , java.lang.String . java.lang.String ( ) ) ; assertTrue ( java.io.File . boolean ( ) || java.io.File . boolean ( ) ) ; ZipUtils . unzip ( new ClassPathResource ( STRING ) , java.io.File ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING + java.lang.String ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.data.gemfire.ProcessWrapper = ProcessExecutor . launch ( java.io.File , LocatorProcess .class , java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ) ; org.springframework.data.gemfire.ProcessWrapper . register ( new ProcessInputStreamListener ( ) { @ java.lang.Override public void void ( final java.lang.String java.lang.String ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } ) ; org.springframework.data.gemfire.ProcessWrapper . registerShutdownHook ( ) ; void ( java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) ) ; java.lang.System . java.io.PrintStream . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.lang.String java.lang.String ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static void void ( final long long ) { ThreadUtils . timedWait ( long , NUMBER , new ThreadUtils . ThreadUtils ( ) { java.io.File java.io.File = new java.io.File ( java.io.File , LocatorProcess . getLocatorProcessControlFilename ( ) ) ; @ java.lang.Override public boolean boolean ( ) { return ! java.io.File . boolean ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.data.gemfire.ProcessWrapper . shutdown ( ) ; if ( java.lang.Boolean . java.lang.Boolean ( java.lang.System . java.lang.String ( STRING , java.lang.Boolean . java.lang.Boolean . java.lang.String ( ) ) ) ) { FileSystemUtils . deleteRecursively ( java.io.File ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.Region org.springframework.data.gemfire.Region ( final Region org.springframework.data.gemfire.Region , final java.lang.String java.lang.String ) { return org.springframework.data.gemfire.Region ( org.springframework.data.gemfire.Region , java.lang.String , Region . SEPARATOR + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.Region org.springframework.data.gemfire.Region ( final Region org.springframework.data.gemfire.Region , final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { assertNotNull ( java.lang.String . java.lang.String ( STRING , java.lang.String ) , org.springframework.data.gemfire.Region ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.Region . getName ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.Region . getFullPath ( ) ) ; return org.springframework.data.gemfire.Region ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.Region org.springframework.data.gemfire.Region ( final Region org.springframework.data.gemfire.Region , final DataPolicy org.springframework.data.gemfire.DataPolicy , final Scope org.springframework.data.gemfire.Scope ) { assertNotNull ( org.springframework.data.gemfire.Region ) ; assertNotNull ( org.springframework.data.gemfire.Region . getAttributes ( ) ) ; assertEquals ( org.springframework.data.gemfire.DataPolicy , org.springframework.data.gemfire.Region . getAttributes ( ) . getDataPolicy ( ) ) ; assertEquals ( org.springframework.data.gemfire.Scope , org.springframework.data.gemfire.Region . getAttributes ( ) . getScope ( ) ) ; return org.springframework.data.gemfire.Region ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( final java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.Class<? extends org.springframework.data.gemfire.CacheClusterConfigurationIntegrationTest> ( ) . java.lang.Package ( ) . java.lang.String ( ) . java.lang.String ( '.' , java.io.File . char ) ; return java.lang.String . java.lang.String ( java.io.File . java.lang.String ) . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.Region org.springframework.data.gemfire.Region ( ConfigurableApplicationContext org.springframework.data.gemfire.ConfigurableApplicationContext , java.lang.String java.lang.String ) { return org.springframework.data.gemfire.ConfigurableApplicationContext . getBean ( java.lang.String , Region .class ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.ConfigurableApplicationContext org.springframework.data.gemfire.ConfigurableApplicationContext ( java.lang.String ... java.lang.String[] ) { ConfigurableApplicationContext org.springframework.data.gemfire.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String[] ) ; org.springframework.data.gemfire.ConfigurableApplicationContext . registerShutdownHook ( ) ; return org.springframework.data.gemfire.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { ConfigurableApplicationContext org.springframework.data.gemfire.ConfigurableApplicationContext = org.springframework.data.gemfire.ConfigurableApplicationContext ( java.lang.String ( STRING ) ) ; org.springframework.data.gemfire.Region ( org.springframework.data.gemfire.Region ( org.springframework.data.gemfire.Region ( org.springframework.data.gemfire.ConfigurableApplicationContext , STRING ) , STRING ) , DataPolicy . PARTITION , Scope . DISTRIBUTED_NO_ACK ) ; org.springframework.data.gemfire.Region ( org.springframework.data.gemfire.Region ( org.springframework.data.gemfire.Region ( org.springframework.data.gemfire.ConfigurableApplicationContext , STRING ) , STRING ) , DataPolicy . NORMAL , Scope . LOCAL ) ; org.springframework.data.gemfire.Region ( org.springframework.data.gemfire.Region ( org.springframework.data.gemfire.Region ( org.springframework.data.gemfire.ConfigurableApplicationContext , STRING ) , STRING ) , DataPolicy . PARTITION , Scope . DISTRIBUTED_NO_ACK ) ; org.springframework.data.gemfire.Region ( org.springframework.data.gemfire.Region ( org.springframework.data.gemfire.Region ( org.springframework.data.gemfire.ConfigurableApplicationContext , STRING ) , STRING ) , DataPolicy . REPLICATE , Scope . DISTRIBUTED_ACK ) ; org.springframework.data.gemfire.Region ( org.springframework.data.gemfire.Region ( org.springframework.data.gemfire.Region ( org.springframework.data.gemfire.ConfigurableApplicationContext , STRING ) , STRING ) , DataPolicy . NORMAL , Scope . LOCAL ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.gemfire.ConfigurableApplicationContext ( java.lang.String ( STRING ) ) ; fail ( STRING + STRING + STRING ) ; } catch ( BeanCreationException org.springframework.data.gemfire.BeanCreationException ) { assertTrue ( org.springframework.data.gemfire.BeanCreationException . getCause ( ) instanceof BeanInitializationException ) ; assertTrue ( org.springframework.data.gemfire.BeanCreationException . getCause ( ) . getMessage ( ) . matches ( STRING ) ) ; } }  <METHOD_END>
