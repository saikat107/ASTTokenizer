<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.cache.config.ConfigurableApplicationContext != null ) { this . org.springframework.cache.config.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.cache.config.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.cache.config.EnableCachingIntegrationTests.FooConfig .class ) ; org.springframework.cache.config.EnableCachingIntegrationTests.FooService org.springframework.cache.config.EnableCachingIntegrationTests.FooService = this . org.springframework.cache.config.ConfigurableApplicationContext . getBean ( org.springframework.cache.config.EnableCachingIntegrationTests.FooService .class ) ; void ( org.springframework.cache.config.EnableCachingIntegrationTests.FooService ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.cache.config.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.cache.config.EnableCachingIntegrationTests.FooConfigCglib .class ) ; org.springframework.cache.config.EnableCachingIntegrationTests.FooService org.springframework.cache.config.EnableCachingIntegrationTests.FooService = this . org.springframework.cache.config.ConfigurableApplicationContext . getBean ( org.springframework.cache.config.EnableCachingIntegrationTests.FooService .class ) ; void ( org.springframework.cache.config.EnableCachingIntegrationTests.FooService ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.cache.config.EnableCachingIntegrationTests.FooService org.springframework.cache.config.EnableCachingIntegrationTests.FooService ) { Cache org.springframework.cache.config.Cache = org.springframework.cache.config.Cache ( ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertCacheMiss ( java.lang.Object , org.springframework.cache.config.Cache ) ; java.lang.Object java.lang.Object = org.springframework.cache.config.EnableCachingIntegrationTests.FooService . java.lang.Object ( java.lang.Object ) ; assertCacheHit ( java.lang.Object , java.lang.Object , org.springframework.cache.config.Cache ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.cache.config.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.cache.config.EnableCachingIntegrationTests.BeanConditionConfig .class ) ; Cache org.springframework.cache.config.Cache = org.springframework.cache.config.Cache ( ) ; org.springframework.cache.config.EnableCachingIntegrationTests.FooService org.springframework.cache.config.EnableCachingIntegrationTests.FooService = this . org.springframework.cache.config.ConfigurableApplicationContext . getBean ( org.springframework.cache.config.EnableCachingIntegrationTests.FooService .class ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.cache.config.EnableCachingIntegrationTests.FooService . java.lang.Object ( java.lang.Object ) ; assertCacheMiss ( java.lang.Object , org.springframework.cache.config.Cache ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cache.config.Cache org.springframework.cache.config.Cache ( ) { return this . org.springframework.cache.config.ConfigurableApplicationContext . getBean ( CacheManager .class ) . getCache ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.config.CacheManager org.springframework.cache.config.CacheManager ( ) { return CacheTestUtils . createSimpleCacheManager ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.config.EnableCachingIntegrationTests.FooService org.springframework.cache.config.EnableCachingIntegrationTests.FooService ( ) { return new org.springframework.cache.config.EnableCachingIntegrationTests.FooServiceImpl ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.config.EnableCachingIntegrationTests.FooService org.springframework.cache.config.EnableCachingIntegrationTests.FooService ( ) { return new org.springframework.cache.config.EnableCachingIntegrationTests.FooServiceImpl ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Cacheable public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Cacheable ( condition = STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.config.EnableCachingIntegrationTests.BeanConditionConfig.Bar org.springframework.cache.config.EnableCachingIntegrationTests.BeanConditionConfig.Bar ( ) { return new org.springframework.cache.config.EnableCachingIntegrationTests.BeanConditionConfig.Bar ( false ) ; }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
