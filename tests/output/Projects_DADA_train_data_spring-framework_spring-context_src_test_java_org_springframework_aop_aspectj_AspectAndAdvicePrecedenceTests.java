<METHOD_START> @ Before public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.aspectj.AspectAndAdvicePrecedenceTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.aspectj.AspectAndAdvicePrecedenceTests> ( ) ) ; org.springframework.aop.aspectj.PrecedenceTestAspect = ( org.springframework.aop.aspectj.PrecedenceTestAspect ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.PrecedenceTestAspect = ( org.springframework.aop.aspectj.PrecedenceTestAspect ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.SimpleSpringBeforeAdvice = ( org.springframework.aop.aspectj.SimpleSpringBeforeAdvice ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.SimpleSpringBeforeAdvice = ( org.springframework.aop.aspectj.SimpleSpringBeforeAdvice ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.PrecedenceTestAspect . org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator = new org.springframework.aop.aspectj.AspectAndAdvicePrecedenceTests.PrecedenceVerifyingCollaborator ( ) ; this . org.springframework.aop.aspectj.PrecedenceTestAspect . void ( org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator ) ; this . org.springframework.aop.aspectj.PrecedenceTestAspect . void ( org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator ) ; this . org.springframework.aop.aspectj.SimpleSpringBeforeAdvice . void ( org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator ) ; this . org.springframework.aop.aspectj.SimpleSpringBeforeAdvice . void ( org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator ) ; this . org.springframework.aop.aspectj.ITestBean . getAge ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { if ( int > ( java.lang.String[] . int - NUMBER ) ) { fail ( STRING + java.lang.String[] . int + STRING + int ) ; } java.lang.String java.lang.String = java.lang.String[] [ int ++ ] ; if ( ! java.lang.String . boolean ( java.lang.String ) ) { fail ( STRING + java.lang.String + STRING + int + STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator ) { this . org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator = org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator . void ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator . void ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public int int ( ProceedingJoinPoint org.springframework.aop.aspectj.ProceedingJoinPoint ) { int int = - NUMBER ; this . org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator . void ( this . java.lang.String ) ; try { int = ( ( java.lang.Integer ) org.springframework.aop.aspectj.ProceedingJoinPoint . proceed ( ) ) . int ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.RuntimeException ( java.lang.Throwable ) ; } this . org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator . void ( this . java.lang.String ) ; return int ; }  <METHOD_END>
<METHOD_START> public int int ( ProceedingJoinPoint org.springframework.aop.aspectj.ProceedingJoinPoint ) { int int = - NUMBER ; this . org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator . void ( this . java.lang.String ) ; try { int = ( ( java.lang.Integer ) org.springframework.aop.aspectj.ProceedingJoinPoint . proceed ( ) ) . int ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.RuntimeException ( java.lang.Throwable ) ; } this . org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator . void ( this . java.lang.String ) ; return int ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator . void ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator . void ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object )			throws java.lang.Throwable { this . org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator . void ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.aop.aspectj.PrecedenceTestAspect . org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator ) { this . org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator = org.springframework.aop.aspectj.PrecedenceTestAspect.Collaborator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
