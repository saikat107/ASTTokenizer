<METHOD_START> void ( final ClassWriter org.springframework.asm.ClassWriter , final int int , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.Object java.lang.Object ) { super( Opcodes . ASM5 ); if ( cw . firstField == null ) { cw . firstField = this ; } else { cw . lastField . fv = this ; } cw . lastField = this ; this . org.springframework.asm.ClassWriter = org.springframework.asm.ClassWriter ; this . int = int ; this . int = org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ; this . int = org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ; if ( ClassReader . SIGNATURES && java.lang.String != null ) { this . int = org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ; } if ( java.lang.Object != null ) { this . int = org.springframework.asm.ClassWriter . newConstItem ( java.lang.Object ) . index ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.asm.AnnotationVisitor org.springframework.asm.AnnotationVisitor ( final java.lang.String java.lang.String , final boolean boolean ) { if ( ! ClassReader . ANNOTATIONS ) { return null ; } ByteVector org.springframework.asm.ByteVector = new ByteVector ( ) ; org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) . putShort ( NUMBER ) ; AnnotationWriter org.springframework.asm.AnnotationWriter = new AnnotationWriter ( org.springframework.asm.ClassWriter , true , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector , NUMBER ) ; if ( boolean ) { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } else { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } return org.springframework.asm.AnnotationWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.asm.AnnotationVisitor org.springframework.asm.AnnotationVisitor ( final int int , final TypePath org.springframework.asm.TypePath , final java.lang.String java.lang.String , final boolean boolean ) { if ( ! ClassReader . ANNOTATIONS ) { return null ; } ByteVector org.springframework.asm.ByteVector = new ByteVector ( ) ; AnnotationWriter . putTarget ( int , org.springframework.asm.TypePath , org.springframework.asm.ByteVector ) ; org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) . putShort ( NUMBER ) ; AnnotationWriter org.springframework.asm.AnnotationWriter = new AnnotationWriter ( org.springframework.asm.ClassWriter , true , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector , bv . length - NUMBER ) ; if ( boolean ) { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } else { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } return org.springframework.asm.AnnotationWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final Attribute org.springframework.asm.Attribute ) { attr . next = org.springframework.asm.Attribute ; org.springframework.asm.Attribute = org.springframework.asm.Attribute ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {    }  <METHOD_END>
<METHOD_START> int int ( ) { int int = NUMBER ; if ( int != NUMBER ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER ; } if ( ( int & Opcodes . ACC_SYNTHETIC ) != NUMBER ) { if ( ( org.springframework.asm.ClassWriter . version & NUMBER ) < Opcodes . V1_5 || ( int & ClassWriter . ACC_SYNTHETIC_ATTRIBUTE ) != NUMBER ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER ; } } if ( ( int & Opcodes . ACC_DEPRECATED ) != NUMBER ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER ; } if ( ClassReader . SIGNATURES && int != NUMBER ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + org.springframework.asm.AnnotationWriter . getSize ( ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + org.springframework.asm.AnnotationWriter . getSize ( ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + org.springframework.asm.AnnotationWriter . getSize ( ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + org.springframework.asm.AnnotationWriter . getSize ( ) ; } if ( org.springframework.asm.Attribute != null ) { int += org.springframework.asm.Attribute . getSize ( org.springframework.asm.ClassWriter , null , NUMBER , - NUMBER , - NUMBER ) ; } return int ; }  <METHOD_END>
<METHOD_START> void void ( final ByteVector org.springframework.asm.ByteVector ) { final int int = ClassWriter . TO_ACC_SYNTHETIC ; int int = Opcodes . ACC_DEPRECATED | ClassWriter . ACC_SYNTHETIC_ATTRIBUTE | ( ( int & ClassWriter . ACC_SYNTHETIC_ATTRIBUTE ) / int ) ; org.springframework.asm.ByteVector . putShort ( int & ~ int ) . putShort ( int ) . putShort ( int ) ; int int = NUMBER ; if ( int != NUMBER ) { ++ int ; } if ( ( int & Opcodes . ACC_SYNTHETIC ) != NUMBER ) { if ( ( org.springframework.asm.ClassWriter . version & NUMBER ) < Opcodes . V1_5 || ( int & ClassWriter . ACC_SYNTHETIC_ATTRIBUTE ) != NUMBER ) { ++ int ; } } if ( ( int & Opcodes . ACC_DEPRECATED ) != NUMBER ) { ++ int ; } if ( ClassReader . SIGNATURES && int != NUMBER ) { ++ int ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { ++ int ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { ++ int ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { ++ int ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { ++ int ; } if ( org.springframework.asm.Attribute != null ) { int += org.springframework.asm.Attribute . getCount ( ) ; } org.springframework.asm.ByteVector . putShort ( int ) ; if ( int != NUMBER ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.ByteVector . putInt ( NUMBER ) . putShort ( int ) ; } if ( ( int & Opcodes . ACC_SYNTHETIC ) != NUMBER ) { if ( ( org.springframework.asm.ClassWriter . version & NUMBER ) < Opcodes . V1_5 || ( int & ClassWriter . ACC_SYNTHETIC_ATTRIBUTE ) != NUMBER ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) . putInt ( NUMBER ) ; } } if ( ( int & Opcodes . ACC_DEPRECATED ) != NUMBER ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) . putInt ( NUMBER ) ; } if ( ClassReader . SIGNATURES && int != NUMBER ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.ByteVector . putInt ( NUMBER ) . putShort ( int ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.AnnotationWriter . put ( org.springframework.asm.ByteVector ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.AnnotationWriter . put ( org.springframework.asm.ByteVector ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.AnnotationWriter . put ( org.springframework.asm.ByteVector ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.AnnotationWriter . put ( org.springframework.asm.ByteVector ) ; } if ( org.springframework.asm.Attribute != null ) { org.springframework.asm.Attribute . put ( org.springframework.asm.ClassWriter , null , NUMBER , - NUMBER , - NUMBER , org.springframework.asm.ByteVector ) ; } }  <METHOD_END>
