<METHOD_START> @ Before public void void ( ) { this . org.springframework.integration.aggregator.ResequencingMessageHandler = new ResequencingMessageHandler ( org.springframework.integration.aggregator.ResequencingMessageGroupProcessor , org.springframework.integration.aggregator.MessageGroupStore , null , null ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertThat ( new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) , is ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertThat ( new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) , is ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertThat ( new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { SequenceSizeReleaseStrategy org.springframework.integration.aggregator.SequenceSizeReleaseStrategy = new SequenceSizeReleaseStrategy ( ) ; org.springframework.integration.aggregator.SequenceSizeReleaseStrategy . setReleasePartialSequences ( true ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler = new ResequencingMessageHandler ( org.springframework.integration.aggregator.ResequencingMessageGroupProcessor , org.springframework.integration.aggregator.MessageGroupStore , null , org.springframework.integration.aggregator.SequenceSizeReleaseStrategy ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . afterPropertiesSet ( ) ; QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; assertNull ( org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; assertNotNull ( org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { SequenceSizeReleaseStrategy org.springframework.integration.aggregator.SequenceSizeReleaseStrategy = new SequenceSizeReleaseStrategy ( ) ; org.springframework.integration.aggregator.SequenceSizeReleaseStrategy . setReleasePartialSequences ( true ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler = new ResequencingMessageHandler ( org.springframework.integration.aggregator.ResequencingMessageGroupProcessor , org.springframework.integration.aggregator.MessageGroupStore , null , org.springframework.integration.aggregator.SequenceSizeReleaseStrategy ) ; QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setCorrelationStrategy ( message -> STRING ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . afterPropertiesSet ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( NUMBER ) . setReplyChannel ( org.springframework.integration.aggregator.QueueChannel ) . build ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( NUMBER ) . setReplyChannel ( org.springframework.integration.aggregator.QueueChannel ) . build ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( NUMBER ) . setReplyChannel ( org.springframework.integration.aggregator.QueueChannel ) . build ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( NUMBER ) . setReplyChannel ( org.springframework.integration.aggregator.QueueChannel ) . build ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( NUMBER ) . setReplyChannel ( org.springframework.integration.aggregator.QueueChannel ) . build ( ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; assertNull ( org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; assertNotNull ( org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; assertNotNull ( org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; assertNull ( org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; assertNotNull ( org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { this . org.springframework.integration.aggregator.ResequencingMessageHandler . setReleaseStrategy ( new SequenceSizeReleaseStrategy ( true ) ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setMessageStore ( new SimpleMessageStore ( NUMBER ) ) ; QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ; assertNull ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { this . org.springframework.integration.aggregator.ResequencingMessageHandler . setReleaseStrategy ( new SequenceSizeReleaseStrategy ( true ) ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setMessageStore ( new SimpleMessageStore ( NUMBER , NUMBER ) ) ; QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; try { this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; fail ( STRING ) ; } catch ( MessagingException org.springframework.integration.aggregator.MessagingException ) { assertThat ( org.springframework.integration.aggregator.MessagingException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { this . org.springframework.integration.aggregator.ResequencingMessageHandler . setReleaseStrategy ( new SequenceSizeReleaseStrategy ( true ) ) ; QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ; assertNull ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , null ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setSendPartialResultOnExpiry ( false ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setDiscardChannel ( org.springframework.integration.aggregator.QueueChannel ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.MessageGroupStore . expireMessageGroups ( - NUMBER ) ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertNull ( org.springframework.integration.aggregator.Message<> ) ; java.util.ArrayList<java.lang.Integer> < java.lang.Integer > java.util.ArrayList<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> < java.lang.Integer > ( java.util.Arrays . java.util.List ( new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ) ; java.util.Collections . void ( java.util.ArrayList<java.lang.Integer> ) ; assertEquals ( STRING , java.util.ArrayList<java.lang.Integer> . java.lang.String ( ) ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , null ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setSendPartialResultOnExpiry ( false ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setDiscardChannel ( org.springframework.integration.aggregator.QueueChannel ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setReleasePartialSequences ( true ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ; assertNull ( org.springframework.integration.aggregator.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , null ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setSendPartialResultOnExpiry ( false ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setDiscardChannel ( org.springframework.integration.aggregator.QueueChannel ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.aggregator.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.aggregator.Message<> ) ; assertNull ( org.springframework.integration.aggregator.Message<> ) ; assertNull ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , java.lang.String , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel ) ; org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.MessageGroupStore . getMessageGroup ( java.lang.String ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { this . org.springframework.integration.aggregator.ResequencingMessageHandler . setGroupTimeoutExpression ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; ThreadPoolTaskScheduler org.springframework.integration.aggregator.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.aggregator.ThreadPoolTaskScheduler . afterPropertiesSet ( ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setTaskScheduler ( org.springframework.integration.aggregator.ThreadPoolTaskScheduler ) ; QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setDiscardChannel ( org.springframework.integration.aggregator.QueueChannel ) ; QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setOutputChannel ( org.springframework.integration.aggregator.QueueChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , null ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.aggregator.Message<> ) ; org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , null ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { this . org.springframework.integration.aggregator.ResequencingMessageHandler . setGroupTimeoutExpression ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; ThreadPoolTaskScheduler org.springframework.integration.aggregator.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.aggregator.ThreadPoolTaskScheduler . afterPropertiesSet ( ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setTaskScheduler ( org.springframework.integration.aggregator.ThreadPoolTaskScheduler ) ; QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setDiscardChannel ( org.springframework.integration.aggregator.QueueChannel ) ; QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setOutputChannel ( org.springframework.integration.aggregator.QueueChannel ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . setExpireGroupsUponTimeout ( true ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , null ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.aggregator.Message<> ) ; org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( STRING , STRING , NUMBER , NUMBER , null ) ; this . org.springframework.integration.aggregator.ResequencingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.aggregator.Message<> ) ; org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.integration.aggregator.Message<?> < ? > org.springframework.integration.aggregator.Message<?> ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , int int , int int , MessageChannel org.springframework.integration.aggregator.MessageChannel ) { return MessageBuilder . withPayload ( java.lang.String ) . setCorrelationId ( java.lang.Object ) . setSequenceSize ( int ) . setSequenceNumber ( int ) . setReplyChannel ( org.springframework.integration.aggregator.MessageChannel ) . build ( ) ; }  <METHOD_END>
