<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.transaction.annotation.EnableTransactionManagementTests.EnableTxConfig .class , org.springframework.transaction.annotation.EnableTransactionManagementTests.TxManagerConfig .class ) ; org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean .class ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean ) ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBeansWithAnnotation ( Service .class ) ; assertTrue ( STRING , java.util.Map<,> . boolean ( STRING ) ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.transaction.annotation.EnableTransactionManagementTests.InheritedEnableTxConfig .class , org.springframework.transaction.annotation.EnableTransactionManagementTests.TxManagerConfig .class ) ; org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean .class ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean ) ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBeansWithAnnotation ( Service .class ) ; assertTrue ( STRING , java.util.Map<,> . boolean ( STRING ) ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.transaction.annotation.EnableTransactionManagementTests.ParentEnableTxConfig .class , org.springframework.transaction.annotation.EnableTransactionManagementTests.ChildEnableTxConfig .class , org.springframework.transaction.annotation.EnableTransactionManagementTests.TxManagerConfig .class ) ; org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean .class ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean ) ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBeansWithAnnotation ( Service .class ) ; assertTrue ( STRING , java.util.Map<,> . boolean ( STRING ) ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.transaction.annotation.EnableTransactionManagementTests.EnableTxConfig .class , org.springframework.transaction.annotation.EnableTransactionManagementTests.TxManagerConfig .class ) ; org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean .class ) ; org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean . java.util.Collection<?> ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.transaction.annotation.EnableTransactionManagementTests.EnableTxConfig .class , org.springframework.transaction.annotation.EnableTransactionManagementTests.MultiTxManagerConfig .class ) ; org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean .class ) ; org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean . java.util.Collection<?> ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { try { new AnnotationConfigApplicationContext ( org.springframework.transaction.annotation.EnableTransactionManagementTests.EnableAspectjTxConfig .class , org.springframework.transaction.annotation.EnableTransactionManagementTests.TxManagerConfig .class ) ; fail ( STRING + STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception . java.lang.String ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.transaction.annotation.EnableTransactionManagementTests.EnableTxConfig .class ) ; assertTrue ( org.springframework.transaction.annotation.AnnotationConfigApplicationContext . containsBean ( TransactionManagementConfigUtils . TRANSACTIONAL_EVENT_LISTENER_FACTORY_BEAN_NAME ) ) ; assertEquals ( NUMBER , org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBeansOfType ( TransactionalEventListenerFactory .class ) . size ( ) ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.transaction.annotation.EnableTransactionManagementTests.Spr11915Config .class ) ; org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean .class ) ; CallCountingTransactionManager org.springframework.transaction.annotation.CallCountingTransactionManager = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( STRING , CallCountingTransactionManager .class ) ; org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean . void ( ) ; assertThat ( txManager . begun , equalTo ( NUMBER ) ) ; assertThat ( txManager . commits , equalTo ( NUMBER ) ) ; assertThat ( txManager . rollbacks , equalTo ( NUMBER ) ) ; org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean . void ( ) ; assertThat ( txManager . begun , equalTo ( NUMBER ) ) ; assertThat ( txManager . commits , equalTo ( NUMBER ) ) ; assertThat ( txManager . rollbacks , equalTo ( NUMBER ) ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.transaction.annotation.EnableTransactionManagementTests.Spr14322ConfigA .class ) ; org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestInterface org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestInterface = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestInterface .class ) ; CallCountingTransactionManager org.springframework.transaction.annotation.CallCountingTransactionManager = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( CallCountingTransactionManager .class ) ; org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestInterface . void ( ) ; assertThat ( txManager . begun , equalTo ( NUMBER ) ) ; assertThat ( txManager . commits , equalTo ( NUMBER ) ) ; assertThat ( txManager . rollbacks , equalTo ( NUMBER ) ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.transaction.annotation.EnableTransactionManagementTests.Spr14322ConfigB .class ) ; org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestInterface org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestInterface = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestInterface .class ) ; CallCountingTransactionManager org.springframework.transaction.annotation.CallCountingTransactionManager = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( CallCountingTransactionManager .class ) ; org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestInterface . void ( ) ; assertThat ( txManager . begun , equalTo ( NUMBER ) ) ; assertThat ( txManager . commits , equalTo ( NUMBER ) ) ; assertThat ( txManager . rollbacks , equalTo ( NUMBER ) ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Transactional ( readOnly = true ) public java.util.Collection<?> < ? > java.util.Collection<?> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Transactional ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Transactional ( transactionManager = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Bean java.lang.Object java.lang.Object ( ) { return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override java.lang.Object java.lang.Object ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ConditionContext org.springframework.transaction.annotation.ConditionContext , AnnotatedTypeMetadata org.springframework.transaction.annotation.AnnotatedTypeMetadata ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.transaction.annotation.ConfigurationPhase org.springframework.transaction.annotation.ConfigurationPhase ( ) { return ConfigurationPhase . REGISTER_BEAN ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean ( ) { return new org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.annotation.PlatformTransactionManager org.springframework.transaction.annotation.PlatformTransactionManager ( ) { return new CallCountingTransactionManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.annotation.PlatformTransactionManager org.springframework.transaction.annotation.PlatformTransactionManager ( ) { return new CallCountingTransactionManager ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.transaction.annotation.PlatformTransactionManager org.springframework.transaction.annotation.PlatformTransactionManager ( ) { return org.springframework.transaction.annotation.PlatformTransactionManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Autowired public void void ( ConfigurableApplicationContext org.springframework.transaction.annotation.ConfigurableApplicationContext ) { org.springframework.transaction.annotation.ConfigurableApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , new CallCountingTransactionManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean ( ) { return new org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Transactional void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestInterface org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestInterface ( ) { return new org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestService ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.annotation.PlatformTransactionManager org.springframework.transaction.annotation.PlatformTransactionManager ( ) { return new CallCountingTransactionManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestInterface org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestInterface ( ) { return new org.springframework.transaction.annotation.EnableTransactionManagementTests.TransactionalTestService ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.annotation.PlatformTransactionManager org.springframework.transaction.annotation.PlatformTransactionManager ( ) { return new CallCountingTransactionManager ( ) ; }  <METHOD_END>
