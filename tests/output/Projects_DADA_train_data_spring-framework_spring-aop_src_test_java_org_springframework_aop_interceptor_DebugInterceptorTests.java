<METHOD_START> @ Test public void void ( ) java.lang.Throwable { MethodInvocation org.springframework.aop.interceptor.MethodInvocation = mock ( MethodInvocation .class ) ; Log org.springframework.aop.interceptor.Log = mock ( Log .class ) ; given ( org.springframework.aop.interceptor.Log . isTraceEnabled ( ) ) . willReturn ( true ) ; DebugInterceptor org.springframework.aop.interceptor.DebugInterceptor = new org.springframework.aop.interceptor.DebugInterceptorTests.StubDebugInterceptor ( org.springframework.aop.interceptor.Log ) ; org.springframework.aop.interceptor.DebugInterceptor . invoke ( org.springframework.aop.interceptor.MethodInvocation ) ; void ( org.springframework.aop.interceptor.DebugInterceptor ) ; verify ( org.springframework.aop.interceptor.Log , times ( NUMBER ) ) . trace ( anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { MethodInvocation org.springframework.aop.interceptor.MethodInvocation = mock ( MethodInvocation .class ) ; java.lang.IllegalArgumentException java.lang.IllegalArgumentException = new java.lang.IllegalArgumentException ( ) ; given ( org.springframework.aop.interceptor.MethodInvocation . proceed ( ) ) . willThrow ( java.lang.IllegalArgumentException ) ; Log org.springframework.aop.interceptor.Log = mock ( Log .class ) ; given ( org.springframework.aop.interceptor.Log . isTraceEnabled ( ) ) . willReturn ( true ) ; DebugInterceptor org.springframework.aop.interceptor.DebugInterceptor = new org.springframework.aop.interceptor.DebugInterceptorTests.StubDebugInterceptor ( org.springframework.aop.interceptor.Log ) ; try { org.springframework.aop.interceptor.DebugInterceptor . invoke ( org.springframework.aop.interceptor.MethodInvocation ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} void ( org.springframework.aop.interceptor.DebugInterceptor ) ; verify ( org.springframework.aop.interceptor.Log ) . trace ( anyString ( ) ) ; verify ( org.springframework.aop.interceptor.Log ) . trace ( anyString ( ) , eq ( java.lang.IllegalArgumentException ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( DebugInterceptor org.springframework.aop.interceptor.DebugInterceptor ) { assertEquals ( STRING , NUMBER , org.springframework.aop.interceptor.DebugInterceptor . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( Log org.springframework.aop.interceptor.Log ) { super( true ); this . org.springframework.aop.interceptor.Log = org.springframework.aop.interceptor.Log ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.aop.interceptor.Log org.springframework.aop.interceptor.Log ( MethodInvocation org.springframework.aop.interceptor.MethodInvocation ) { return org.springframework.aop.interceptor.Log ; }  <METHOD_END>
