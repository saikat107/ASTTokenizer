<METHOD_START> @ Before public void void ( ) { when ( org.springframework.data.rest.webmvc.ResourceMetadata . isExported ( ) ) . thenReturn ( true ) ; this . org.springframework.data.rest.webmvc.RepositoryInvoker = mock ( RepositoryInvoker .class , new org.springframework.data.rest.webmvc.RootResourceInformationUnitTests.DefaultBooleanToTrue ( ) ) ; this . org.springframework.data.rest.webmvc.RootResourceInformation = new RootResourceInformation ( org.springframework.data.rest.webmvc.ResourceMetadata , org.springframework.data.rest.webmvc.PersistentEntity<,> , org.springframework.data.rest.webmvc.RepositoryInvoker ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ResourceNotFoundException .class ) public void void ( ) org.springframework.data.rest.webmvc.HttpRequestMethodNotSupportedException { when ( org.springframework.data.rest.webmvc.ResourceMetadata . isExported ( ) ) . thenReturn ( false ) ; org.springframework.data.rest.webmvc.RootResourceInformation . verifySupportedMethod ( HEAD , COLLECTION ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.data.rest.webmvc.InvocationOnMock ) throws java.lang.Throwable { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.rest.webmvc.InvocationOnMock . getMethod ( ) . getReturnType ( ) ; return java.lang.Class<> . boolean ( java.lang.Boolean .class ) || java.lang.Class<> . boolean ( boolean .class ) ? true : org.springframework.data.rest.webmvc.Answer<java.lang.Object> . answer ( org.springframework.data.rest.webmvc.InvocationOnMock ) ; }  <METHOD_END>
