<METHOD_START> public void ( ReactiveCassandraQueryMethod org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod , ReactiveCassandraOperations org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations ) { super( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod , org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations ); this . org.springframework.data.cassandra.repository.query.PartTree = new PartTree ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod . getName ( ) , org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod . getEntityInformation ( ) . getJavaType ( ) ) ; this . org.springframework.data.cassandra.repository.query.CassandraMappingContext = org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations . getConverter ( ) . getMappingContext ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.cassandra.repository.query.PartTree org.springframework.data.cassandra.repository.query.PartTree ( ) { return org.springframework.data.cassandra.repository.query.PartTree ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) { CassandraQueryCreator org.springframework.data.cassandra.repository.query.CassandraQueryCreator = new CassandraQueryCreator ( org.springframework.data.cassandra.repository.query.PartTree , org.springframework.data.cassandra.repository.query.CassandraParameterAccessor , org.springframework.data.cassandra.repository.query.CassandraMappingContext , getQueryMethod ( ) . getEntityInformation ( ) ) ; return org.springframework.data.cassandra.repository.query.CassandraQueryCreator . createQuery ( ) . toString ( ) ; }  <METHOD_END>
