<METHOD_START> @ Parameters ( name = STRING ) public static java.lang.Iterable<java.lang.Object[]> < java.lang.Object [] > java.lang.Iterable<java.lang.Object[]> ( ) { return java.util.Arrays . java.util.List<java.lang.Object[]> ( new java.lang.Object [] [] { { new JettyWebSocketTestServer ( ) , new JettyWebSocketClient ( ) } , { new TomcatWebSocketTestServer ( ) , new StandardWebSocketClient ( ) } , { new UndertowTestServer ( ) , new StandardWebSocketClient ( ) } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class<?> < ? > [] { org.springframework.web.socket.config.annotation.WebSocketConfigurationTests.TestConfig .class } ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebSocketSession org.springframework.web.socket.config.annotation.WebSocketSession = this . webSocketClient . doHandshake ( new AbstractWebSocketHandler ( ) {} , getWsBaseUrl ( ) + STRING ) . get ( ) ; org.springframework.web.socket.config.annotation.WebSocketConfigurationTests.TestHandler org.springframework.web.socket.config.annotation.WebSocketConfigurationTests.TestHandler = this . wac . getBean ( org.springframework.web.socket.config.annotation.WebSocketConfigurationTests.TestHandler .class ) ; assertTrue ( org.springframework.web.socket.config.annotation.WebSocketConfigurationTests.TestHandler . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.web.socket.config.annotation.WebSocketSession . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebSocketSession org.springframework.web.socket.config.annotation.WebSocketSession = this . webSocketClient . doHandshake ( new AbstractWebSocketHandler ( ) {} , getWsBaseUrl ( ) + STRING ) . get ( ) ; org.springframework.web.socket.config.annotation.WebSocketConfigurationTests.TestHandler org.springframework.web.socket.config.annotation.WebSocketConfigurationTests.TestHandler = this . wac . getBean ( org.springframework.web.socket.config.annotation.WebSocketConfigurationTests.TestHandler .class ) ; assertTrue ( org.springframework.web.socket.config.annotation.WebSocketConfigurationTests.TestHandler . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.web.socket.config.annotation.WebSocketSession . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketHandlerRegistry org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry ) { org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry . addHandler ( org.springframework.web.socket.config.annotation.WebSocketConfigurationTests.TestHandler ( ) , STRING ) . setHandshakeHandler ( this . org.springframework.web.socket.config.annotation.HandshakeHandler ) ; org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry . addHandler ( org.springframework.web.socket.config.annotation.WebSocketConfigurationTests.TestHandler ( ) , STRING ) . withSockJS ( ) . setTransportHandlerOverrides ( new WebSocketTransportHandler ( this . org.springframework.web.socket.config.annotation.HandshakeHandler ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.socket.config.annotation.WebSocketConfigurationTests.TestHandler org.springframework.web.socket.config.annotation.WebSocketConfigurationTests.TestHandler ( ) { return new org.springframework.web.socket.config.annotation.WebSocketConfigurationTests.TestHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.config.annotation.WebSocketSession ) throws java.lang.Exception { this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
