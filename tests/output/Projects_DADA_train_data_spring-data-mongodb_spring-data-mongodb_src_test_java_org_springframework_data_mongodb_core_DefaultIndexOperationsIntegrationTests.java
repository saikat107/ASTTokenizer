<METHOD_START> @ Before public void void ( ) { void ( ) ; java.lang.String java.lang.String = this . org.springframework.data.mongodb.core.MongoTemplate . getCollectionName ( org.springframework.data.mongodb.core.DefaultIndexOperationsIntegrationTests.DefaultIndexOperationsIntegrationTestsSample .class ) ; this . org.springframework.data.mongodb.core.MongoCollection<org.bson.Document> = this . org.springframework.data.mongodb.core.MongoTemplate . getDb ( ) . getCollection ( java.lang.String , Document .class ) ; this . org.springframework.data.mongodb.core.MongoCollection<org.bson.Document> . dropIndexes ( ) ; this . org.springframework.data.mongodb.core.DefaultIndexOperations = new DefaultIndexOperations ( org.springframework.data.mongodb.core.MongoTemplate . getMongoDbFactory ( ) , java.lang.String , new QueryMapper ( org.springframework.data.mongodb.core.MongoTemplate . getConverter ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( org.springframework.data.mongodb.core.Version == null ) { Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.MongoTemplate . executeCommand ( STRING ) ; org.springframework.data.mongodb.core.Version = Version . parse ( org.springframework.data.mongodb.core.Document . get ( STRING ) . toString ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoCollection<org.bson.Document> . createIndex ( org.bson.Document ) ; IndexInfo org.springframework.data.mongodb.core.IndexInfo = org.springframework.data.mongodb.core.IndexInfo ( org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.IndexInfo . getIndexFields ( ) . get ( NUMBER ) . isGeo ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeThat ( org.springframework.data.mongodb.core.Version . isGreaterThanOrEqualTo ( org.springframework.data.mongodb.core.Version ) , is ( true ) ) ; IndexDefinition org.springframework.data.mongodb.core.IndexDefinition = new Index ( ) . named ( STRING ) . on ( STRING , Direction . ASC ) . partial ( of ( where ( STRING ) . gte ( NUMBER ) ) ) ; org.springframework.data.mongodb.core.DefaultIndexOperations . ensureIndex ( org.springframework.data.mongodb.core.IndexDefinition ) ; IndexInfo org.springframework.data.mongodb.core.IndexInfo = org.springframework.data.mongodb.core.IndexInfo ( org.springframework.data.mongodb.core.DefaultIndexOperations . getIndexInfo ( ) , STRING ) ; assertThat ( org.springframework.data.mongodb.core.IndexInfo . getPartialFilterExpression ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeThat ( org.springframework.data.mongodb.core.Version . isGreaterThanOrEqualTo ( org.springframework.data.mongodb.core.Version ) , is ( true ) ) ; IndexDefinition org.springframework.data.mongodb.core.IndexDefinition = new Index ( ) . named ( STRING ) . on ( STRING , Direction . ASC ) . partial ( of ( where ( STRING ) . gte ( NUMBER ) ) ) ; org.springframework.data.mongodb.core.DefaultIndexOperations . ensureIndex ( org.springframework.data.mongodb.core.IndexDefinition ) ; IndexInfo org.springframework.data.mongodb.core.IndexInfo = org.springframework.data.mongodb.core.IndexInfo ( org.springframework.data.mongodb.core.DefaultIndexOperations . getIndexInfo ( ) , STRING ) ; assertThat ( org.springframework.data.mongodb.core.IndexInfo . getPartialFilterExpression ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeThat ( org.springframework.data.mongodb.core.Version . isGreaterThanOrEqualTo ( org.springframework.data.mongodb.core.Version ) , is ( true ) ) ; IndexDefinition org.springframework.data.mongodb.core.IndexDefinition = new Index ( ) . named ( STRING ) . on ( STRING , Direction . ASC ) . partial ( of ( new org . org.bson . org.bson ( STRING , new org . org.bson . org.bson ( STRING , NUMBER ) ) ) ) ; org.springframework.data.mongodb.core.DefaultIndexOperations . ensureIndex ( org.springframework.data.mongodb.core.IndexDefinition ) ; IndexInfo org.springframework.data.mongodb.core.IndexInfo = org.springframework.data.mongodb.core.IndexInfo ( org.springframework.data.mongodb.core.DefaultIndexOperations . getIndexInfo ( ) , STRING ) ; assertThat ( org.springframework.data.mongodb.core.IndexInfo . getPartialFilterExpression ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeThat ( org.springframework.data.mongodb.core.Version . isGreaterThanOrEqualTo ( org.springframework.data.mongodb.core.Version ) , is ( true ) ) ; IndexDefinition org.springframework.data.mongodb.core.IndexDefinition = new Index ( ) . named ( STRING ) . on ( STRING , Direction . ASC ) . partial ( of ( where ( STRING ) . gte ( NUMBER ) ) ) ; org.springframework.data.mongodb.core.DefaultIndexOperations = new DefaultIndexOperations ( org.springframework.data.mongodb.core.MongoTemplate . getMongoDbFactory ( ) , this . org.springframework.data.mongodb.core.MongoTemplate . getCollectionName ( org.springframework.data.mongodb.core.DefaultIndexOperationsIntegrationTests.DefaultIndexOperationsIntegrationTestsSample .class ) , new QueryMapper ( org.springframework.data.mongodb.core.MongoTemplate . getConverter ( ) ) , org.springframework.data.mongodb.core.DefaultIndexOperationsIntegrationTests.MappingToSameCollection .class ) ; org.springframework.data.mongodb.core.DefaultIndexOperations . ensureIndex ( org.springframework.data.mongodb.core.IndexDefinition ) ; IndexInfo org.springframework.data.mongodb.core.IndexInfo = org.springframework.data.mongodb.core.IndexInfo ( org.springframework.data.mongodb.core.DefaultIndexOperations . getIndexInfo ( ) , STRING ) ; assertThat ( org.springframework.data.mongodb.core.IndexInfo . getPartialFilterExpression ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.IndexInfo org.springframework.data.mongodb.core.IndexInfo ( org . org.bson . org.bson org.bson.Document ) { return org.springframework.data.mongodb.core.IndexInfo ( org.springframework.data.mongodb.core.DefaultIndexOperations . getIndexInfo ( ) , org.bson.Document ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.IndexInfo org.springframework.data.mongodb.core.IndexInfo ( java.lang.Iterable<org.springframework.data.mongodb.core.IndexInfo> < IndexInfo > java.lang.Iterable<org.springframework.data.mongodb.core.IndexInfo> , org . org.bson . org.bson org.bson.Document ) { return org.springframework.data.mongodb.core.IndexInfo ( java.lang.Iterable<org.springframework.data.mongodb.core.IndexInfo> , java.lang.String ( org.bson.Document ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.IndexInfo org.springframework.data.mongodb.core.IndexInfo ( java.lang.Iterable<org.springframework.data.mongodb.core.IndexInfo> < IndexInfo > java.lang.Iterable<org.springframework.data.mongodb.core.IndexInfo> , java.lang.String java.lang.String ) { for ( IndexInfo org.springframework.data.mongodb.core.IndexInfo : java.lang.Iterable<org.springframework.data.mongodb.core.IndexInfo> ) { if ( ObjectUtils . nullSafeEquals ( java.lang.String , org.springframework.data.mongodb.core.IndexInfo . getName ( ) ) ) { return org.springframework.data.mongodb.core.IndexInfo ; } } throw new java.lang.AssertionError ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( Document org.springframework.data.mongodb.core.Document ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.String java.lang.String : org.springframework.data.mongodb.core.Document . keySet ( ) ) { if ( java.lang.StringBuilder . int ( ) > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( '_' ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( '_' ) ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.Document . get ( java.lang.String ) ; if ( java.lang.Object instanceof java.lang.Number || java.lang.Object instanceof java.lang.String ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Object . java.lang.String ( ) . java.lang.String ( ' ' , '_' ) ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
