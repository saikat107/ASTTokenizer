<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.security.channel.Message<?> , MessageChannel org.springframework.integration.security.channel.MessageChannel , MessageHandler org.springframework.integration.security.channel.MessageHandler , java.lang.Exception java.lang.Exception ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.security.channel.Authentication org.springframework.integration.security.channel.Authentication ( Message < ? > org.springframework.integration.security.channel.Message<?> , MessageChannel org.springframework.integration.security.channel.MessageChannel ) { if ( ! DirectChannel .class . boolean ( AopUtils . getTargetClass ( org.springframework.integration.security.channel.MessageChannel ) ) ) { return SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Authentication org.springframework.integration.security.channel.Authentication , Message < ? > org.springframework.integration.security.channel.Message<?> , MessageChannel org.springframework.integration.security.channel.MessageChannel ) { if ( org.springframework.integration.security.channel.Authentication != null ) { SecurityContext org.springframework.integration.security.channel.SecurityContext = SecurityContextHolder . getContext ( ) ; java.lang.ThreadLocal<org.springframework.integration.security.channel.SecurityContext> . set ( org.springframework.integration.security.channel.SecurityContext ) ; SecurityContext org.springframework.integration.security.channel.SecurityContext = SecurityContextHolder . createEmptyContext ( ) ; org.springframework.integration.security.channel.SecurityContext . setAuthentication ( org.springframework.integration.security.channel.Authentication ) ; SecurityContextHolder . setContext ( org.springframework.integration.security.channel.SecurityContext ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { SecurityContext org.springframework.integration.security.channel.SecurityContext = java.lang.ThreadLocal<org.springframework.integration.security.channel.SecurityContext> . get ( ) ; try { if ( org.springframework.integration.security.channel.SecurityContext == null || org.springframework.integration.security.channel.SecurityContext . equals ( org.springframework.integration.security.channel.SecurityContext ) ) { SecurityContextHolder . clearContext ( ) ; java.lang.ThreadLocal<org.springframework.integration.security.channel.SecurityContext> . remove ( ) ; } else { SecurityContextHolder . setContext ( org.springframework.integration.security.channel.SecurityContext ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { SecurityContextHolder . clearContext ( ) ; } }  <METHOD_END>
