<METHOD_START> public void ( WebApplicationContext org.springframework.boot.test.autoconfigure.web.servlet.WebApplicationContext ) { Assert . notNull ( org.springframework.boot.test.autoconfigure.web.servlet.WebApplicationContext , STRING ) ; this . org.springframework.boot.test.autoconfigure.web.servlet.WebApplicationContext = org.springframework.boot.test.autoconfigure.web.servlet.WebApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableMockMvcBuilder < ? > org.springframework.boot.test.autoconfigure.web.servlet.ConfigurableMockMvcBuilder<?> ) { if ( this . boolean ) { void ( org.springframework.boot.test.autoconfigure.web.servlet.ConfigurableMockMvcBuilder<> ) ; } ResultHandler org.springframework.boot.test.autoconfigure.web.servlet.ResultHandler = org.springframework.boot.test.autoconfigure.web.servlet.ResultHandler ( ) ; if ( org.springframework.boot.test.autoconfigure.web.servlet.ResultHandler != null ) { org.springframework.boot.test.autoconfigure.web.servlet.ConfigurableMockMvcBuilder<> . alwaysDo ( org.springframework.boot.test.autoconfigure.web.servlet.ResultHandler ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.autoconfigure.web.servlet.ResultHandler org.springframework.boot.test.autoconfigure.web.servlet.ResultHandler ( ) { org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter = org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter ( ) ; if ( org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter == null ) { return null ; } if ( this . boolean ) { org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter = new org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.DeferredLinesWriter ( this . org.springframework.boot.test.autoconfigure.web.servlet.WebApplicationContext , org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter ) ; } return new org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWritingResultHandler ( org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter ( ) { if ( this . org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint == MockMvcPrint . NONE ) { return null ; } if ( this . org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint == MockMvcPrint . LOG_DEBUG ) { return new org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LoggingLinesWriter ( ) ; } return new org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.SystemLinesWriter ( this . org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableMockMvcBuilder < ? > org.springframework.boot.test.autoconfigure.web.servlet.ConfigurableMockMvcBuilder<?> ) { ServletContextInitializerBeans org.springframework.boot.test.autoconfigure.web.servlet.ServletContextInitializerBeans = new ServletContextInitializerBeans ( this . org.springframework.boot.test.autoconfigure.web.servlet.WebApplicationContext ) ; for ( ServletContextInitializer org.springframework.boot.test.autoconfigure.web.servlet.ServletContextInitializer : org.springframework.boot.test.autoconfigure.web.servlet.ServletContextInitializerBeans ) { if ( org.springframework.boot.test.autoconfigure.web.servlet.ServletContextInitializer instanceof FilterRegistrationBean ) { void ( org.springframework.boot.test.autoconfigure.web.servlet.ConfigurableMockMvcBuilder<> , ( FilterRegistrationBean < ? > ) org.springframework.boot.test.autoconfigure.web.servlet.ServletContextInitializer ) ; } if ( org.springframework.boot.test.autoconfigure.web.servlet.ServletContextInitializer instanceof DelegatingFilterProxyRegistrationBean ) { void ( org.springframework.boot.test.autoconfigure.web.servlet.ConfigurableMockMvcBuilder<> , ( DelegatingFilterProxyRegistrationBean ) org.springframework.boot.test.autoconfigure.web.servlet.ServletContextInitializer ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableMockMvcBuilder < ? > org.springframework.boot.test.autoconfigure.web.servlet.ConfigurableMockMvcBuilder<?> , FilterRegistrationBean < ? > org.springframework.boot.test.autoconfigure.web.servlet.FilterRegistrationBean<?> ) { void ( org.springframework.boot.test.autoconfigure.web.servlet.ConfigurableMockMvcBuilder<> , org.springframework.boot.test.autoconfigure.web.servlet.FilterRegistrationBean<> . getFilter ( ) , org.springframework.boot.test.autoconfigure.web.servlet.FilterRegistrationBean<> . getUrlPatterns ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableMockMvcBuilder < ? > org.springframework.boot.test.autoconfigure.web.servlet.ConfigurableMockMvcBuilder<?> , DelegatingFilterProxyRegistrationBean org.springframework.boot.test.autoconfigure.web.servlet.DelegatingFilterProxyRegistrationBean ) { void ( org.springframework.boot.test.autoconfigure.web.servlet.ConfigurableMockMvcBuilder<> , org.springframework.boot.test.autoconfigure.web.servlet.DelegatingFilterProxyRegistrationBean . getFilter ( ) , org.springframework.boot.test.autoconfigure.web.servlet.DelegatingFilterProxyRegistrationBean . getUrlPatterns ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableMockMvcBuilder < ? > org.springframework.boot.test.autoconfigure.web.servlet.ConfigurableMockMvcBuilder<?> , Filter org.springframework.boot.test.autoconfigure.web.servlet.Filter , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { if ( java.util.Collection<java.lang.String> . boolean ( ) ) { org.springframework.boot.test.autoconfigure.web.servlet.ConfigurableMockMvcBuilder<> . addFilters ( org.springframework.boot.test.autoconfigure.web.servlet.Filter ) ; } else { org.springframework.boot.test.autoconfigure.web.servlet.ConfigurableMockMvcBuilder<> . addFilter ( org.springframework.boot.test.autoconfigure.web.servlet.Filter , java.util.Collection<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.Collection<java.lang.String> . int ( ) ] ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( MockMvcPrint org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint ) { this . org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint = org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint ( ) { return this . org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> void ( org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter ) { this . org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter = org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.boot.test.autoconfigure.web.servlet.MvcResult ) throws java.lang.Exception { org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWritingResultHandler.LinesPrintingResultHandler org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWritingResultHandler.LinesPrintingResultHandler = new org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWritingResultHandler.LinesPrintingResultHandler ( ) ; org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWritingResultHandler.LinesPrintingResultHandler . handle ( org.springframework.boot.test.autoconfigure.web.servlet.MvcResult ) ; org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWritingResultHandler.LinesPrintingResultHandler . void ( this . org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter ) ; }  <METHOD_END>
<METHOD_START> protected void ( ) { super( new org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWritingResultHandler.LinesPrintingResultHandler.Printer ( ) ); }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter ) { org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter . void ( ( ( org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWritingResultHandler.LinesPrintingResultHandler.Printer ) getPrinter ( ) ) . java.util.List<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.util.List<java.lang.String> . boolean ( STRING ) ; this . java.util.List<java.lang.String> . boolean ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( java.lang.Object != null && java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { java.lang.Object = CollectionUtils . arrayToList ( java.lang.Object ) ; } this . java.util.List<java.lang.String> . boolean ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> );  <METHOD_END>
<METHOD_START> void ( WebApplicationContext org.springframework.boot.test.autoconfigure.web.servlet.WebApplicationContext , org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter ) { Assert . state ( org.springframework.boot.test.autoconfigure.web.servlet.WebApplicationContext instanceof ConfigurableApplicationContext , STRING ) ; ( ( ConfigurableApplicationContext ) org.springframework.boot.test.autoconfigure.web.servlet.WebApplicationContext ) . getBeanFactory ( ) . registerSingleton ( java.lang.String , this ) ; this . org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter = org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { this . java.util.List<java.lang.String> . boolean ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.LinesWriter . void ( this . java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.DeferredLinesWriter org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.DeferredLinesWriter ( ApplicationContext org.springframework.boot.test.autoconfigure.web.servlet.ApplicationContext ) { try { return org.springframework.boot.test.autoconfigure.web.servlet.ApplicationContext . getBean ( java.lang.String , org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer.DeferredLinesWriter .class ) ; } catch ( NoSuchBeanDefinitionException org.springframework.boot.test.autoconfigure.web.servlet.NoSuchBeanDefinitionException ) { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { if ( org.springframework.boot.test.autoconfigure.web.servlet.Log . isDebugEnabled ( ) ) { java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; java.io.PrintWriter java.io.PrintWriter = new java.io.PrintWriter ( java.io.StringWriter ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.io.PrintWriter . void ( java.lang.String ) ; } org.springframework.boot.test.autoconfigure.web.servlet.Log . debug ( STRING + java.io.StringWriter ) ; } }  <METHOD_END>
<METHOD_START> void ( MockMvcPrint org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint ) { this . org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint = org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { java.io.PrintStream java.io.PrintStream = java.io.PrintStream ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.io.PrintStream . void ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private java.io.PrintStream java.io.PrintStream ( ) { if ( this . org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint == MockMvcPrint . SYSTEM_ERR ) { return java.lang.System . java.io.PrintStream ; } return java.lang.System . java.io.PrintStream ; }  <METHOD_END>
