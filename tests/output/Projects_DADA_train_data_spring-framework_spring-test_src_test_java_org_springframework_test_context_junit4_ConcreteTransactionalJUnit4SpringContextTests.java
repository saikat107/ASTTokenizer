<METHOD_START> @ Autowired private final void void ( final Employee org.springframework.test.context.junit4.Employee ) { this . org.springframework.test.context.junit4.Employee = org.springframework.test.context.junit4.Employee ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.Resource private final void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) java.lang.Exception { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public final void void ( ) { assertInTransaction ( false ) ; assertNotNull ( STRING , super. applicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public final void void ( ) { assertInTransaction ( false ) ; assertTrue ( STRING , this . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public final void void ( ) { assertInTransaction ( false ) ; assertEquals ( STRING + STRING , java.lang.Class<? extends org.springframework.test.context.junit4.ConcreteTransactionalJUnit4SpringContextTests> ( ) . java.lang.String ( ) , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public final void void ( ) { assertInTransaction ( false ) ; assertNull ( STRING , this . java.lang.Long ) ; assertNotNull ( STRING , this . org.springframework.test.context.junit4.Pet ) ; assertEquals ( STRING , this . org.springframework.test.context.junit4.Pet . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public final void void ( ) { assertInTransaction ( false ) ; assertNotNull ( STRING , this . org.springframework.test.context.junit4.Employee ) ; assertEquals ( STRING , this . org.springframework.test.context.junit4.Employee . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public final void void ( ) { assertInTransaction ( false ) ; assertEquals ( STRING , STRING , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public final void void ( ) { assertInTransaction ( false ) ; assertEquals ( STRING , STRING , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ BeforeTransaction public void void ( ) { assertEquals ( STRING , NUMBER , int ( ) ) ; assertEquals ( STRING , NUMBER , int ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { assertEquals ( STRING , ( inTransaction ( ) ? NUMBER : NUMBER ) , int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertInTransaction ( true ) ; assertEquals ( STRING , NUMBER , int ( java.lang.String ) ) ; assertEquals ( STRING , NUMBER , int ( java.lang.String ) ) ; assertEquals ( STRING , NUMBER , int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { assertEquals ( STRING , ( inTransaction ( ) ? NUMBER : NUMBER ) , int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ AfterTransaction public void void ( ) { assertEquals ( STRING , NUMBER , int ( java.lang.String ) ) ; assertEquals ( STRING , NUMBER , int ( ) ) ; }  <METHOD_END>
<METHOD_START> private int int ( final java.lang.String java.lang.String ) { return super. jdbcTemplate . update ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private int int ( final java.lang.String java.lang.String ) { return super. jdbcTemplate . update ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private int int ( ) { return countRowsInTable ( STRING ) ; }  <METHOD_END>
