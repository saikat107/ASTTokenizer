<METHOD_START> public void ( final GroovyCompilerConfiguration org.springframework.boot.cli.compiler.GroovyCompilerConfiguration ) { this . org.springframework.boot.cli.compiler.GroovyCompilerConfiguration = org.springframework.boot.cli.compiler.GroovyCompilerConfiguration ; this . org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader = org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader ( org.springframework.boot.cli.compiler.GroovyCompilerConfiguration ) ; DependencyResolutionContext org.springframework.boot.cli.compiler.DependencyResolutionContext = new DependencyResolutionContext ( ) ; org.springframework.boot.cli.compiler.DependencyResolutionContext . addDependencyManagement ( new SpringBootDependenciesDependencyManagement ( ) ) ; AetherGrapeEngine org.springframework.boot.cli.compiler.AetherGrapeEngine = AetherGrapeEngineFactory . create ( this . org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader , org.springframework.boot.cli.compiler.GroovyCompilerConfiguration . getRepositoryConfiguration ( ) , org.springframework.boot.cli.compiler.DependencyResolutionContext ) ; GrapeEngineInstaller . install ( org.springframework.boot.cli.compiler.AetherGrapeEngine ) ; this . org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader . getConfiguration ( ) . addCompilationCustomizers ( new org.springframework.boot.cli.compiler.GroovyCompiler.CompilerAutoConfigureCustomizer ( ) ) ; if ( org.springframework.boot.cli.compiler.GroovyCompilerConfiguration . isAutoconfigure ( ) ) { this . java.lang.Iterable<org.springframework.boot.cli.compiler.CompilerAutoConfiguration> = java.util.ServiceLoader . java.util.ServiceLoader<org.springframework.boot.cli.compiler.CompilerAutoConfiguration> ( CompilerAutoConfiguration .class ) ; } else { this . java.lang.Iterable<org.springframework.boot.cli.compiler.CompilerAutoConfiguration> = java.util.Collections . java.util.Set<java.lang.Object> ( ) ; } this . java.util.List<org.springframework.boot.cli.compiler.ASTTransformation> = new java.util.ArrayList <> ( ) ; this . java.util.List<org.springframework.boot.cli.compiler.ASTTransformation> . add ( new DependencyManagementBomTransformation ( org.springframework.boot.cli.compiler.DependencyResolutionContext ) ) ; this . java.util.List<org.springframework.boot.cli.compiler.ASTTransformation> . add ( new DependencyAutoConfigurationTransformation ( this . org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader , org.springframework.boot.cli.compiler.DependencyResolutionContext , this . java.lang.Iterable<org.springframework.boot.cli.compiler.CompilerAutoConfiguration> ) ) ; this . java.util.List<org.springframework.boot.cli.compiler.ASTTransformation> . add ( new GroovyBeansTransformation ( ) ) ; if ( this . org.springframework.boot.cli.compiler.GroovyCompilerConfiguration . isGuessDependencies ( ) ) { this . java.util.List<org.springframework.boot.cli.compiler.ASTTransformation> . add ( new ResolveDependencyCoordinatesTransformation ( org.springframework.boot.cli.compiler.DependencyResolutionContext ) ) ; } for ( ASTTransformation org.springframework.boot.cli.compiler.ASTTransformation : java.util.ServiceLoader . java.util.ServiceLoader<org.springframework.boot.cli.compiler.SpringBootAstTransformation> ( SpringBootAstTransformation .class ) ) { this . java.util.List<org.springframework.boot.cli.compiler.ASTTransformation> . add ( org.springframework.boot.cli.compiler.ASTTransformation ) ; } java.util.Collections . void ( this . java.util.List<org.springframework.boot.cli.compiler.ASTTransformation> , AnnotationAwareOrderComparator . INSTANCE ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.cli.compiler.ASTTransformation> < ASTTransformation > java.util.List<org.springframework.boot.cli.compiler.ASTTransformation> ( ) { return this . java.util.List<org.springframework.boot.cli.compiler.ASTTransformation> ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader ( ) { return this . org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader ( GroovyCompilerConfiguration org.springframework.boot.cli.compiler.GroovyCompilerConfiguration ) { ExtendedGroovyClassLoader org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader = new ExtendedGroovyClassLoader ( org.springframework.boot.cli.compiler.GroovyCompilerConfiguration . getScope ( ) ) ; for ( java.net.URL java.net.URL : java.net.URL[] ( ) ) { org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader . addURL ( java.net.URL ) ; } for ( java.lang.String java.lang.String : org.springframework.boot.cli.compiler.GroovyCompilerConfiguration . getClasspath ( ) ) { org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader . addClasspath ( java.lang.String ) ; } return org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader ; }  <METHOD_END>
<METHOD_START> private java.net.URL [] java.net.URL[] ( ) { java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; if ( java.lang.ClassLoader instanceof ExtendedGroovyClassLoader ) { return ( ( ExtendedGroovyClassLoader ) java.lang.ClassLoader ) . getURLs ( ) ; } else { return new java.net.URL [ NUMBER ] ; } }  <METHOD_END>
<METHOD_START> public void void ( CompilationCustomizer ... org.springframework.boot.cli.compiler.CompilationCustomizer[] ) { this . org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader . getConfiguration ( ) . addCompilationCustomizers ( org.springframework.boot.cli.compiler.CompilationCustomizer[] ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( java.lang.String ... java.lang.String[] )			throws org.springframework.boot.cli.compiler.CompilationFailedException , java.io.IOException { this . org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader . clearCache ( ) ; java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( ) ; CompilerConfiguration org.springframework.boot.cli.compiler.CompilerConfiguration = this . org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader . getConfiguration ( ) ; CompilationUnit org.springframework.boot.cli.compiler.CompilationUnit = new CompilationUnit ( org.springframework.boot.cli.compiler.CompilerConfiguration , null , this . org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader ) ; ClassCollector org.springframework.boot.cli.compiler.ClassCollector = this . org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader . createCollector ( org.springframework.boot.cli.compiler.CompilationUnit , null ) ; org.springframework.boot.cli.compiler.CompilationUnit . setClassgenCallback ( org.springframework.boot.cli.compiler.ClassCollector ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = ResourceUtils . getUrls ( java.lang.String , this . org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { org.springframework.boot.cli.compiler.CompilationUnit . addSource ( new java.net.URL ( java.lang.String ) ) ; } } void ( org.springframework.boot.cli.compiler.CompilationUnit ) ; org.springframework.boot.cli.compiler.CompilationUnit . compile ( Phases . CLASS_GENERATION ) ; for ( java.lang.Object java.lang.Object : org.springframework.boot.cli.compiler.ClassCollector . getLoadedClasses ( ) ) { java.util.List<java.lang.Class<?>> . boolean ( ( java.lang.Class<?> < ? > ) java.lang.Object ) ; } ClassNode org.springframework.boot.cli.compiler.ClassNode = org.springframework.boot.cli.compiler.GroovyCompiler.MainClass . org.springframework.boot.cli.compiler.ClassNode ( org.springframework.boot.cli.compiler.CompilationUnit ) ; java.lang.Class<?> < ? > java.lang.Class<?> = null ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.List<java.lang.Class<?>> ) { if ( org.springframework.boot.cli.compiler.ClassNode . getName ( ) . equals ( java.lang.Class<> . java.lang.String ( ) ) ) { java.lang.Class<?> = java.lang.Class<> ; } } if ( java.lang.Class<> != null ) { java.util.List<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ; java.util.List<java.lang.Class<?>> . void ( NUMBER , java.lang.Class<> ) ; } return java.util.List<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.List<java.lang.Class<?>> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( CompilationUnit org.springframework.boot.cli.compiler.CompilationUnit ) { java.util.LinkedList [] java.util.LinkedList[] = java.util.LinkedList[] ( org.springframework.boot.cli.compiler.CompilationUnit ) ; void ( java.util.LinkedList[] [ Phases . CONVERSION ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.LinkedList [] java.util.LinkedList[] ( CompilationUnit org.springframework.boot.cli.compiler.CompilationUnit ) { try { java.lang.reflect.Field java.lang.reflect.Field = CompilationUnit .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; java.util.LinkedList [] java.util.LinkedList[] = ( java.util.LinkedList [] ) java.lang.reflect.Field . java.lang.Object ( org.springframework.boot.cli.compiler.CompilationUnit ) ; return java.util.LinkedList[] ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private void void ( java.util.LinkedList java.util.LinkedList ) { int int = int ( java.util.LinkedList ) ; java.util.LinkedList . void ( int , new CompilationUnit . CompilationUnit ( ) { @ java.lang.Override public void void ( SourceUnit org.springframework.boot.cli.compiler.SourceUnit ) throws org.springframework.boot.cli.compiler.CompilationFailedException { ASTNode [] org.springframework.boot.cli.compiler.ASTNode[] = new ASTNode [] { org.springframework.boot.cli.compiler.SourceUnit . getAST ( ) } ; for ( ASTTransformation org.springframework.boot.cli.compiler.ASTTransformation : org.springframework.boot.cli.compiler.GroovyCompiler .this . java.util.List<org.springframework.boot.cli.compiler.ASTTransformation> ) { org.springframework.boot.cli.compiler.ASTTransformation . visit ( org.springframework.boot.cli.compiler.ASTNode[] , org.springframework.boot.cli.compiler.SourceUnit ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( SourceUnit org.springframework.boot.cli.compiler.SourceUnit ) throws org.springframework.boot.cli.compiler.CompilationFailedException { ASTNode [] org.springframework.boot.cli.compiler.ASTNode[] = new ASTNode [] { org.springframework.boot.cli.compiler.SourceUnit . getAST ( ) } ; for ( ASTTransformation org.springframework.boot.cli.compiler.ASTTransformation : org.springframework.boot.cli.compiler.GroovyCompiler .this . java.util.List<org.springframework.boot.cli.compiler.ASTTransformation> ) { org.springframework.boot.cli.compiler.ASTTransformation . visit ( org.springframework.boot.cli.compiler.ASTNode[] , org.springframework.boot.cli.compiler.SourceUnit ) ; } }  <METHOD_END>
<METHOD_START> private int int ( java.util.LinkedList<?> < ? > java.util.LinkedList<?> ) { for ( int int = NUMBER ; int < java.util.LinkedList<> . int ( ) ; int ++ ) { if ( java.util.LinkedList<> . get ( int ) . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) . boolean ( ASTTransformationVisitor .class . java.lang.String ( ) ) ) { return int ; } } return java.util.LinkedList<> . int ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( CompilePhase . CONVERSION ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( SourceUnit org.springframework.boot.cli.compiler.SourceUnit , GeneratorContext org.springframework.boot.cli.compiler.GeneratorContext , ClassNode org.springframework.boot.cli.compiler.ClassNode )				throws org.springframework.boot.cli.compiler.CompilationFailedException { ImportCustomizer org.springframework.boot.cli.compiler.ImportCustomizer = new SmartImportCustomizer ( org.springframework.boot.cli.compiler.SourceUnit , org.springframework.boot.cli.compiler.GeneratorContext , org.springframework.boot.cli.compiler.ClassNode ) ; ClassNode org.springframework.boot.cli.compiler.ClassNode = org.springframework.boot.cli.compiler.GroovyCompiler.MainClass . org.springframework.boot.cli.compiler.ClassNode ( org.springframework.boot.cli.compiler.SourceUnit . getAST ( ) . getClasses ( ) ) ; for ( CompilerAutoConfiguration org.springframework.boot.cli.compiler.CompilerAutoConfiguration : org.springframework.boot.cli.compiler.GroovyCompiler .this . java.lang.Iterable<org.springframework.boot.cli.compiler.CompilerAutoConfiguration> ) { if ( org.springframework.boot.cli.compiler.CompilerAutoConfiguration . matches ( org.springframework.boot.cli.compiler.ClassNode ) ) { if ( org.springframework.boot.cli.compiler.GroovyCompiler .this . org.springframework.boot.cli.compiler.GroovyCompilerConfiguration . isGuessImports ( ) ) { org.springframework.boot.cli.compiler.CompilerAutoConfiguration . applyImports ( org.springframework.boot.cli.compiler.ImportCustomizer ) ; org.springframework.boot.cli.compiler.ImportCustomizer . call ( org.springframework.boot.cli.compiler.SourceUnit , org.springframework.boot.cli.compiler.GeneratorContext , org.springframework.boot.cli.compiler.ClassNode ) ; } if ( org.springframework.boot.cli.compiler.ClassNode . equals ( org.springframework.boot.cli.compiler.ClassNode ) ) { org.springframework.boot.cli.compiler.CompilerAutoConfiguration . applyToMainClass ( org.springframework.boot.cli.compiler.GroovyCompiler .this . org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader , org.springframework.boot.cli.compiler.GroovyCompiler .this . org.springframework.boot.cli.compiler.GroovyCompilerConfiguration , org.springframework.boot.cli.compiler.GeneratorContext , org.springframework.boot.cli.compiler.SourceUnit , org.springframework.boot.cli.compiler.ClassNode ) ; } org.springframework.boot.cli.compiler.CompilerAutoConfiguration . apply ( org.springframework.boot.cli.compiler.GroovyCompiler .this . org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader , org.springframework.boot.cli.compiler.GroovyCompiler .this . org.springframework.boot.cli.compiler.GroovyCompilerConfiguration , org.springframework.boot.cli.compiler.GeneratorContext , org.springframework.boot.cli.compiler.SourceUnit , org.springframework.boot.cli.compiler.ClassNode ) ; } } org.springframework.boot.cli.compiler.ImportCustomizer . call ( org.springframework.boot.cli.compiler.SourceUnit , org.springframework.boot.cli.compiler.GeneratorContext , org.springframework.boot.cli.compiler.ClassNode ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static org.springframework.boot.cli.compiler.ClassNode org.springframework.boot.cli.compiler.ClassNode ( CompilationUnit org.springframework.boot.cli.compiler.CompilationUnit ) { return org.springframework.boot.cli.compiler.ClassNode ( org.springframework.boot.cli.compiler.CompilationUnit . getAST ( ) . getClasses ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.cli.compiler.ClassNode org.springframework.boot.cli.compiler.ClassNode ( java.util.List<org.springframework.boot.cli.compiler.ClassNode> < ClassNode > java.util.List<org.springframework.boot.cli.compiler.ClassNode> ) { for ( ClassNode org.springframework.boot.cli.compiler.ClassNode : java.util.List<org.springframework.boot.cli.compiler.ClassNode> ) { if ( AstUtils . hasAtLeastOneAnnotation ( org.springframework.boot.cli.compiler.ClassNode , STRING ) ) { return null ; } if ( AstUtils . hasAtLeastOneAnnotation ( org.springframework.boot.cli.compiler.ClassNode , STRING , STRING , STRING , STRING , STRING , STRING ) ) { return org.springframework.boot.cli.compiler.ClassNode ; } } return ( java.util.List<org.springframework.boot.cli.compiler.ClassNode> . isEmpty ( ) ? null : java.util.List<org.springframework.boot.cli.compiler.ClassNode> . get ( NUMBER ) ) ; }  <METHOD_END>
