<METHOD_START> public void ( PropertySources org.springframework.boot.bind.PropertySources ) { this( org.springframework.boot.bind.PropertySources , true ); }  <METHOD_END>
<METHOD_START> public void ( PropertySources org.springframework.boot.bind.PropertySources , boolean boolean ) { this( org.springframework.boot.bind.PropertySources , ( java.util.Collection<java.lang.String> < java.lang.String > ) null , PropertyNamePatternsMatcher . ALL , boolean ); }  <METHOD_END>
<METHOD_START> public void ( PropertySources org.springframework.boot.bind.PropertySources , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { this( org.springframework.boot.bind.PropertySources , java.util.Collection<java.lang.String> , new PatternPropertyNamePatternsMatcher ( java.util.Collection<java.lang.String> ) , true ); }  <METHOD_END>
<METHOD_START> void ( PropertySources org.springframework.boot.bind.PropertySources , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> , PropertyNamePatternsMatcher org.springframework.boot.bind.PropertyNamePatternsMatcher , boolean boolean ) { Assert . notNull ( org.springframework.boot.bind.PropertySources , STRING ) ; Assert . notNull ( org.springframework.boot.bind.PropertyNamePatternsMatcher , STRING ) ; this . org.springframework.boot.bind.PropertySources = org.springframework.boot.bind.PropertySources ; this . java.util.Collection<java.lang.String> = java.util.Collection<java.lang.String> ; this . org.springframework.boot.bind.PropertyNamePatternsMatcher = org.springframework.boot.bind.PropertyNamePatternsMatcher ; this . boolean = boolean ; PropertySourcesPropertyResolver org.springframework.boot.bind.PropertySourcesPropertyResolver = new PropertySourcesPropertyResolver ( org.springframework.boot.bind.PropertySources ) ; for ( PropertySource < ? > org.springframework.boot.bind.PropertySource<?> : org.springframework.boot.bind.PropertySources ) { void ( org.springframework.boot.bind.PropertySource<> , org.springframework.boot.bind.PropertySourcesPropertyResolver ) ; } }  <METHOD_END>
<METHOD_START> private void void ( PropertySource < ? > org.springframework.boot.bind.PropertySource<?> , PropertySourcesPropertyResolver org.springframework.boot.bind.PropertySourcesPropertyResolver ) { if ( org.springframework.boot.bind.PropertySource<> instanceof CompositePropertySource ) { void ( ( CompositePropertySource ) org.springframework.boot.bind.PropertySource<> , org.springframework.boot.bind.PropertySourcesPropertyResolver ) ; } else if ( org.springframework.boot.bind.PropertySource<> instanceof EnumerablePropertySource ) { void ( ( EnumerablePropertySource < ? > ) org.springframework.boot.bind.PropertySource<> , org.springframework.boot.bind.PropertySourcesPropertyResolver , this . org.springframework.boot.bind.PropertyNamePatternsMatcher ) ; } else { void ( org.springframework.boot.bind.PropertySource<> , org.springframework.boot.bind.PropertySourcesPropertyResolver ) ; } }  <METHOD_END>
<METHOD_START> private void void ( CompositePropertySource org.springframework.boot.bind.CompositePropertySource , PropertySourcesPropertyResolver org.springframework.boot.bind.PropertySourcesPropertyResolver ) { for ( PropertySource < ? > org.springframework.boot.bind.PropertySource<?> : org.springframework.boot.bind.CompositePropertySource . getPropertySources ( ) ) { void ( org.springframework.boot.bind.PropertySource<> , org.springframework.boot.bind.PropertySourcesPropertyResolver ) ; } }  <METHOD_END>
<METHOD_START> private void void ( EnumerablePropertySource < ? > org.springframework.boot.bind.EnumerablePropertySource<?> , PropertySourcesPropertyResolver org.springframework.boot.bind.PropertySourcesPropertyResolver , PropertyNamePatternsMatcher org.springframework.boot.bind.PropertyNamePatternsMatcher ) { if ( org.springframework.boot.bind.EnumerablePropertySource<> . getPropertyNames ( ) . length > NUMBER ) { for ( java.lang.String java.lang.String : org.springframework.boot.bind.EnumerablePropertySource<> . getPropertyNames ( ) ) { if ( org.springframework.boot.bind.PropertyNamePatternsMatcher . matches ( java.lang.String ) ) { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.boot.bind.EnumerablePropertySource<> , org.springframework.boot.bind.PropertySourcesPropertyResolver , java.lang.String ) ; org.springframework.boot.bind.PropertyValue ( java.lang.String , java.lang.Object , org.springframework.boot.bind.EnumerablePropertySource<> ) ; } } } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( EnumerablePropertySource < ? > org.springframework.boot.bind.EnumerablePropertySource<?> , PropertySourcesPropertyResolver org.springframework.boot.bind.PropertySourcesPropertyResolver , java.lang.String java.lang.String ) { try { if ( this . boolean ) { return org.springframework.boot.bind.PropertySourcesPropertyResolver . getProperty ( java.lang.String , java.lang.Object .class ) ; } } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { } return org.springframework.boot.bind.EnumerablePropertySource<> . getProperty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( PropertySource < ? > org.springframework.boot.bind.PropertySource<?> , PropertySourcesPropertyResolver org.springframework.boot.bind.PropertySourcesPropertyResolver ) { if ( this . java.util.Collection<java.lang.String> == null ) { return; } for ( java.lang.String java.lang.String : this . java.util.Collection<java.lang.String> ) { if ( ! org.springframework.boot.bind.PropertySource<> . containsProperty ( java.lang.String ) ) { continue; } java.lang.Object java.lang.Object = null ; try { java.lang.Object = org.springframework.boot.bind.PropertySourcesPropertyResolver . getProperty ( java.lang.String , java.lang.Object .class ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { } if ( java.lang.Object == null ) { java.lang.Object = org.springframework.boot.bind.PropertySource<> . getProperty ( java.lang.String . java.lang.String ( ) ) ; } org.springframework.boot.bind.PropertyValue ( java.lang.String , java.lang.Object , org.springframework.boot.bind.PropertySource<> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.bind.PropertyValue [] org.springframework.boot.bind.PropertyValue[] ( ) { java.util.Collection<org.springframework.boot.bind.PropertyValue> < PropertyValue > java.util.Collection<org.springframework.boot.bind.PropertyValue> = this . java.util.Map<java.lang.String,org.springframework.boot.bind.PropertyValue> . values ( ) ; return java.util.Collection<org.springframework.boot.bind.PropertyValue> . toArray ( new PropertyValue [ java.util.Collection<org.springframework.boot.bind.PropertyValue> . size ( ) ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.bind.PropertyValue org.springframework.boot.bind.PropertyValue ( java.lang.String java.lang.String ) { PropertyValue org.springframework.boot.bind.PropertyValue = this . java.util.Map<java.lang.String,org.springframework.boot.bind.PropertyValue> . get ( java.lang.String ) ; if ( org.springframework.boot.bind.PropertyValue != null ) { return org.springframework.boot.bind.PropertyValue ; } for ( PropertySource < ? > org.springframework.boot.bind.PropertySource<?> : this . org.springframework.boot.bind.PropertySources ) { java.lang.Object java.lang.Object = org.springframework.boot.bind.PropertySource<> . getProperty ( java.lang.String ) ; org.springframework.boot.bind.PropertyValue = org.springframework.boot.bind.PropertyValue ( java.lang.String , java.lang.Object , org.springframework.boot.bind.PropertySource<> ) ; if ( org.springframework.boot.bind.PropertyValue != null ) { return org.springframework.boot.bind.PropertyValue ; } } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.bind.PropertyValue org.springframework.boot.bind.PropertyValue ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , PropertySource < ? > org.springframework.boot.bind.PropertySource<?> ) { if ( java.lang.Object != null && ! this . java.util.Map<java.lang.String,org.springframework.boot.bind.PropertyValue> . containsKey ( java.lang.String ) ) { PropertySource < ? > org.springframework.boot.bind.PropertySource<?> = this . java.util.concurrent.ConcurrentHashMap<java.lang.String,org.springframework.boot.bind.PropertySource<?>> . putIfAbsent ( java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) . java.lang.String ( STRING ) , org.springframework.boot.bind.PropertySource<> ) ; if ( org.springframework.boot.bind.PropertySource<> == null || org.springframework.boot.bind.PropertySource<> == org.springframework.boot.bind.PropertySource<> ) { PropertyValue org.springframework.boot.bind.PropertyValue = new OriginCapablePropertyValue ( java.lang.String , java.lang.Object , java.lang.String , org.springframework.boot.bind.PropertySource<> ) ; this . java.util.Map<java.lang.String,org.springframework.boot.bind.PropertyValue> . put ( java.lang.String , org.springframework.boot.bind.PropertyValue ) ; return org.springframework.boot.bind.PropertyValue ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.bind.PropertyValues org.springframework.boot.bind.PropertyValues ( PropertyValues org.springframework.boot.bind.PropertyValues ) { MutablePropertyValues org.springframework.boot.bind.MutablePropertyValues = new MutablePropertyValues ( ) ; for ( PropertyValue org.springframework.boot.bind.PropertyValue : org.springframework.boot.bind.PropertyValue[] ( ) ) { PropertyValue org.springframework.boot.bind.PropertyValue = org.springframework.boot.bind.PropertyValues . getPropertyValue ( org.springframework.boot.bind.PropertyValue . getName ( ) ) ; if ( org.springframework.boot.bind.PropertyValue == null || ! org.springframework.boot.bind.PropertyValue . equals ( org.springframework.boot.bind.PropertyValue ) ) { org.springframework.boot.bind.MutablePropertyValues . addPropertyValue ( org.springframework.boot.bind.PropertyValue ) ; } } return org.springframework.boot.bind.MutablePropertyValues ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return org.springframework.boot.bind.PropertyValue ( java.lang.String ) != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.Map<java.lang.String,org.springframework.boot.bind.PropertyValue> . isEmpty ( ) ; }  <METHOD_END>
