<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new AutoPopulatingList <> ( TestObject .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new AutoPopulatingList < java.lang.Object > ( new java.util.LinkedList <> ( ) , TestObject .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new AutoPopulatingList <> ( new org.springframework.util.AutoPopulatingListTests.MockElementFactory ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new AutoPopulatingList < java.lang.Object > ( new java.util.LinkedList <> ( ) , new org.springframework.util.AutoPopulatingListTests.MockElementFactory ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( AutoPopulatingList < java.lang.Object > org.springframework.util.AutoPopulatingList<java.lang.Object> ) { java.lang.Object java.lang.Object = null ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.lang.Object java.lang.Object = org.springframework.util.AutoPopulatingList<java.lang.Object> . get ( int ) ; assertNotNull ( STRING , org.springframework.util.AutoPopulatingList<java.lang.Object> . get ( int ) ) ; assertTrue ( STRING , java.lang.Object instanceof TestObject ) ; assertNotSame ( java.lang.Object , java.lang.Object ) ; java.lang.Object = java.lang.Object ; } java.lang.String java.lang.String = STRING ; org.springframework.util.AutoPopulatingList<java.lang.Object> . add ( NUMBER , null ) ; org.springframework.util.AutoPopulatingList<java.lang.Object> . add ( NUMBER , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.util.AutoPopulatingList<java.lang.Object> . get ( NUMBER ) ) ; assertTrue ( org.springframework.util.AutoPopulatingList<java.lang.Object> . get ( NUMBER ) instanceof TestObject ) ; assertTrue ( org.springframework.util.AutoPopulatingList<java.lang.Object> . get ( NUMBER ) instanceof TestObject ) ; assertTrue ( org.springframework.util.AutoPopulatingList<java.lang.Object> . get ( NUMBER ) instanceof TestObject ) ; assertTrue ( org.springframework.util.AutoPopulatingList<java.lang.Object> . get ( NUMBER ) instanceof TestObject ) ; }  <METHOD_END>
<METHOD_START> private void void ( AutoPopulatingList < java.lang.Object > org.springframework.util.AutoPopulatingList<java.lang.Object> ) { void ( org.springframework.util.AutoPopulatingList<java.lang.Object> ) ; for ( int int = NUMBER ; int < org.springframework.util.AutoPopulatingList<java.lang.Object> . size ( ) ; int ++ ) { java.lang.Object java.lang.Object = org.springframework.util.AutoPopulatingList<java.lang.Object> . get ( int ) ; if ( java.lang.Object instanceof TestObject ) { assertEquals ( int , ( ( TestObject ) java.lang.Object ) . getAge ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AutoPopulatingList < ? > org.springframework.util.AutoPopulatingList<?> = new AutoPopulatingList < java.lang.Object > ( TestObject .class ) ; assertEquals ( org.springframework.util.AutoPopulatingList<> , SerializationTestUtils . serializeAndDeserialize ( org.springframework.util.AutoPopulatingList<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( int int ) { TestObject org.springframework.util.TestObject = new TestObject ( ) ; org.springframework.util.TestObject . setAge ( int ) ; return org.springframework.util.TestObject ; }  <METHOD_END>
