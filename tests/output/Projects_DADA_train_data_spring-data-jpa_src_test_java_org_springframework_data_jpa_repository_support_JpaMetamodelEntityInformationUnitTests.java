<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { when ( org.springframework.data.jpa.repository.support.SingularAttribute<org.springframework.data.jpa.repository.support.PersistableWithIdClass,> . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.jpa.repository.support.SingularAttribute . getName ( ) ) . thenReturn ( STRING ) ; java.util.Set<org.springframework.data.jpa.repository.support.SingularAttribute<? super org.springframework.data.jpa.repository.support.PersistableWithIdClass,?>> < SingularAttribute < ? super PersistableWithIdClass , ? > > java.util.Set<org.springframework.data.jpa.repository.support.SingularAttribute<? super org.springframework.data.jpa.repository.support.PersistableWithIdClass,?>> = new java.util.HashSet<org.springframework.data.jpa.repository.support.SingularAttribute<? super org.springframework.data.jpa.repository.support.PersistableWithIdClass,?>> < SingularAttribute < ? super PersistableWithIdClass , ? > > ( java.util.List ( org.springframework.data.jpa.repository.support.SingularAttribute<org.springframework.data.jpa.repository.support.PersistableWithIdClass,> , org.springframework.data.jpa.repository.support.SingularAttribute ) ) ; when ( org.springframework.data.jpa.repository.support.IdentifiableType<org.springframework.data.jpa.repository.support.PersistableWithIdClass> . getIdClassAttributes ( ) ) . thenReturn ( java.util.Set<org.springframework.data.jpa.repository.support.SingularAttribute<? super org.springframework.data.jpa.repository.support.PersistableWithIdClass,?>> ) ; when ( org.springframework.data.jpa.repository.support.Metamodel . managedType ( java.lang.Object .class ) ) . thenThrow ( java.lang.IllegalArgumentException .class ) ; when ( org.springframework.data.jpa.repository.support.Metamodel . managedType ( PersistableWithIdClass .class ) ) . thenReturn ( org.springframework.data.jpa.repository.support.IdentifiableType<org.springframework.data.jpa.repository.support.PersistableWithIdClass> ) ; when ( org.springframework.data.jpa.repository.support.IdentifiableType<org.springframework.data.jpa.repository.support.PersistableWithIdClass> . getIdType ( ) ) . thenReturn ( org.springframework.data.jpa.repository.support.Type ) ; when ( org.springframework.data.jpa.repository.support.Type . getJavaType ( ) ) . thenReturn ( PersistableWithIdClassPK .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaMetamodelEntityInformation < PersistableWithIdClass , java.io.Serializable > org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation<org.springframework.data.jpa.repository.support.PersistableWithIdClass,java.io.Serializable> = new JpaMetamodelEntityInformation < PersistableWithIdClass , java.io.Serializable > ( PersistableWithIdClass .class , org.springframework.data.jpa.repository.support.Metamodel ) ; PersistableWithIdClass org.springframework.data.jpa.repository.support.PersistableWithIdClass = new PersistableWithIdClass ( null , null ) ; assertThat ( org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation<org.springframework.data.jpa.repository.support.PersistableWithIdClass,java.io.Serializable> . getId ( org.springframework.data.jpa.repository.support.PersistableWithIdClass ) , is ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; org.springframework.data.jpa.repository.support.PersistableWithIdClass = new PersistableWithIdClass ( NUMBER , null ) ; assertThat ( org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation<org.springframework.data.jpa.repository.support.PersistableWithIdClass,java.io.Serializable> . getId ( org.springframework.data.jpa.repository.support.PersistableWithIdClass ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
