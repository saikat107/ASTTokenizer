<METHOD_START> public void ( int int , PartTree org.springframework.data.couchbase.repository.query.PartTree , ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor , SpatialViewQuery org.springframework.data.couchbase.repository.query.SpatialViewQuery , CouchbaseConverter org.springframework.data.couchbase.repository.query.CouchbaseConverter ) { super( org.springframework.data.couchbase.repository.query.PartTree , org.springframework.data.couchbase.repository.query.ParameterAccessor ); this . org.springframework.data.couchbase.repository.query.SpatialViewQuery = org.springframework.data.couchbase.repository.query.SpatialViewQuery ; this . org.springframework.data.couchbase.repository.query.PartTree = org.springframework.data.couchbase.repository.query.PartTree ; this . org.springframework.data.couchbase.repository.query.CouchbaseConverter = org.springframework.data.couchbase.repository.query.CouchbaseConverter ; this . int = int ; this . org.springframework.data.couchbase.repository.query.JsonArray = JsonArray . create ( ) ; this . org.springframework.data.couchbase.repository.query.JsonArray = JsonArray . create ( ) ; this . java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> = new java.util.ArrayList<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> < org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator > ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.repository.query.SpatialViewQuery org.springframework.data.couchbase.repository.query.SpatialViewQuery ( Part org.springframework.data.couchbase.repository.query.Part , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { ConvertingIterator org.springframework.data.couchbase.repository.query.ConvertingIterator = new ConvertingIterator ( java.util.Iterator<java.lang.Object> , org.springframework.data.couchbase.repository.query.CouchbaseConverter ) ; switch ( org.springframework.data.couchbase.repository.query.Part . getType ( ) ) { case WITHIN : void ( org.springframework.data.couchbase.repository.query.JsonArray , org.springframework.data.couchbase.repository.query.JsonArray , org.springframework.data.couchbase.repository.query.ConvertingIterator , java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> , org.springframework.data.couchbase.repository.query.Part . getProperty ( ) ) ; break; case NEAR : void ( org.springframework.data.couchbase.repository.query.JsonArray , org.springframework.data.couchbase.repository.query.JsonArray , org.springframework.data.couchbase.repository.query.ConvertingIterator , java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> , org.springframework.data.couchbase.repository.query.Part . getProperty ( ) ) ; break; case GREATER_THAN : case GREATER_THAN_EQUAL : case AFTER : org.springframework.data.couchbase.repository.query.JsonArray . add ( java.lang.Object ( org.springframework.data.couchbase.repository.query.ConvertingIterator , java.lang.Object .class , null ) ) ; org.springframework.data.couchbase.repository.query.JsonArray . addNull ( ) ; break; case LESS_THAN : case LESS_THAN_EQUAL : case BEFORE : org.springframework.data.couchbase.repository.query.JsonArray . addNull ( ) ; org.springframework.data.couchbase.repository.query.JsonArray . add ( java.lang.Object ( org.springframework.data.couchbase.repository.query.ConvertingIterator , java.lang.Object .class , null ) ) ; break; case SIMPLE_PROPERTY : java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.data.couchbase.repository.query.ConvertingIterator , java.lang.Object .class , null ) ; org.springframework.data.couchbase.repository.query.JsonArray . add ( java.lang.Object ) ; org.springframework.data.couchbase.repository.query.JsonArray . add ( java.lang.Object ) ; break; case BETWEEN : org.springframework.data.couchbase.repository.query.JsonArray . add ( java.lang.Object ( org.springframework.data.couchbase.repository.query.ConvertingIterator , java.lang.Object .class , null ) ) ; org.springframework.data.couchbase.repository.query.JsonArray . add ( java.lang.Object ( org.springframework.data.couchbase.repository.query.ConvertingIterator , java.lang.Object .class , null ) ) ; break; default: throw new java.lang.IllegalArgumentException ( STRING + org.springframework.data.couchbase.repository.query.Part . toString ( ) ) ; } return org.springframework.data.couchbase.repository.query.SpatialViewQuery ; }  <METHOD_END>
<METHOD_START> private static void void ( JsonArray org.springframework.data.couchbase.repository.query.JsonArray , int int ) { for ( int int = org.springframework.data.couchbase.repository.query.JsonArray . size ( ) ; int < int ; int ++ ) { org.springframework.data.couchbase.repository.query.JsonArray . addNull ( ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( JsonArray org.springframework.data.couchbase.repository.query.JsonArray , JsonArray org.springframework.data.couchbase.repository.query.JsonArray , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> , java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> < org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator > java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> , PropertyPath org.springframework.data.couchbase.repository.query.PropertyPath ) { if ( ! java.util.Iterator<java.lang.Object> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof Circle ) { java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> . boolean ( new org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.CircleFalsePositiveEvaluator ( org.springframework.data.couchbase.repository.query.PropertyPath , ( Circle ) java.lang.Object ) ) ; GeoUtils . convertShapeTo2DRanges ( org.springframework.data.couchbase.repository.query.JsonArray , org.springframework.data.couchbase.repository.query.JsonArray , ( Circle ) java.lang.Object ) ; } else if ( java.lang.Object instanceof Polygon ) { java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> . boolean ( new org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.PolygonFalsePositiveEvaluator ( org.springframework.data.couchbase.repository.query.PropertyPath , ( Polygon ) java.lang.Object ) ) ; GeoUtils . convertShapeTo2DRanges ( org.springframework.data.couchbase.repository.query.JsonArray , org.springframework.data.couchbase.repository.query.JsonArray , ( Polygon ) java.lang.Object ) ; } else if ( java.lang.Object instanceof Box ) { GeoUtils . convertShapeTo2DRanges ( org.springframework.data.couchbase.repository.query.JsonArray , org.springframework.data.couchbase.repository.query.JsonArray , ( Box ) java.lang.Object ) ; } else if ( java.lang.Object instanceof Point ) { Point org.springframework.data.couchbase.repository.query.Point = ( Point ) java.lang.Object ; Point org.springframework.data.couchbase.repository.query.Point = org.springframework.data.couchbase.repository.query.Point ( java.util.Iterator<java.lang.Object> , Point .class , STRING ) ; GeoUtils . convertPointsTo2DRanges ( org.springframework.data.couchbase.repository.query.JsonArray , org.springframework.data.couchbase.repository.query.JsonArray , true , org.springframework.data.couchbase.repository.query.Point , org.springframework.data.couchbase.repository.query.Point ) ; } else if ( java.lang.Object instanceof Point [] ) { java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> . boolean ( new org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.PointArrayFalsePositiveEvaluator ( org.springframework.data.couchbase.repository.query.PropertyPath , ( Point [] ) java.lang.Object ) ) ; GeoUtils . convertPointsTo2DRanges ( org.springframework.data.couchbase.repository.query.JsonArray , org.springframework.data.couchbase.repository.query.JsonArray , false , ( Point [] ) java.lang.Object ) ; } else if ( java.lang.Object instanceof JsonArray ) { JsonArray org.springframework.data.couchbase.repository.query.JsonArray = ( JsonArray ) java.lang.Object ; for ( java.lang.Object java.lang.Object : org.springframework.data.couchbase.repository.query.JsonArray ) { org.springframework.data.couchbase.repository.query.JsonArray . add ( java.lang.Object ) ; } JsonArray org.springframework.data.couchbase.repository.query.JsonArray = org.springframework.data.couchbase.repository.query.JsonArray ( java.util.Iterator<java.lang.Object> , JsonArray .class , STRING ) ; for ( java.lang.Object java.lang.Object : org.springframework.data.couchbase.repository.query.JsonArray ) { org.springframework.data.couchbase.repository.query.JsonArray . add ( java.lang.Object ) ; } } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( JsonArray org.springframework.data.couchbase.repository.query.JsonArray , JsonArray org.springframework.data.couchbase.repository.query.JsonArray , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> , java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> < org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator > java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> , PropertyPath org.springframework.data.couchbase.repository.query.PropertyPath ) { if ( ! java.util.Iterator<java.lang.Object> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } Point org.springframework.data.couchbase.repository.query.Point = org.springframework.data.couchbase.repository.query.Point ( java.util.Iterator<java.lang.Object> , Point .class , STRING ) ; Distance org.springframework.data.couchbase.repository.query.Distance = org.springframework.data.couchbase.repository.query.Distance ( java.util.Iterator<java.lang.Object> , Distance .class , STRING ) ; java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> . boolean ( new org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.CircleFalsePositiveEvaluator ( org.springframework.data.couchbase.repository.query.PropertyPath , new Circle ( org.springframework.data.couchbase.repository.query.Point , org.springframework.data.couchbase.repository.query.Distance ) ) ) ; double [] double[] = GeoUtils . getBoundingBoxForNear ( org.springframework.data.couchbase.repository.query.Point , org.springframework.data.couchbase.repository.query.Distance ) ; org.springframework.data.couchbase.repository.query.JsonArray . add ( double[] [ NUMBER ] ) . add ( double[] [ NUMBER ] ) ; org.springframework.data.couchbase.repository.query.JsonArray . add ( double[] [ NUMBER ] ) . add ( double[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> private static < T > T T ( java.util.Iterator<?> < ? > java.util.Iterator<?> , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { if ( java.lang.String == null ) { java.lang.String = STRING + java.lang.Class<T> . java.lang.String ( ) ; } if ( ! java.util.Iterator<> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( java.lang.String + STRING ) ; } java.lang.Object java.lang.Object = java.util.Iterator<> . next ( ) ; if ( java.lang.Class<T> . boolean ( java.lang.Object ) ) { return ( T ) java.lang.Object ; } else if ( java.lang.Object == null ) { throw new java.lang.IllegalArgumentException ( java.lang.String + STRING ) ; } else { throw new java.lang.IllegalArgumentException ( java.lang.String + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.repository.query.SpatialViewQuery org.springframework.data.couchbase.repository.query.SpatialViewQuery ( Part org.springframework.data.couchbase.repository.query.Part , SpatialViewQuery org.springframework.data.couchbase.repository.query.SpatialViewQuery , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { return org.springframework.data.couchbase.repository.query.SpatialViewQuery ( org.springframework.data.couchbase.repository.query.Part , java.util.Iterator<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.repository.query.SpatialViewQuery org.springframework.data.couchbase.repository.query.SpatialViewQuery ( SpatialViewQuery org.springframework.data.couchbase.repository.query.SpatialViewQuery , SpatialViewQuery org.springframework.data.couchbase.repository.query.SpatialViewQuery ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.SpatialViewQueryWrapper org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.SpatialViewQueryWrapper ( SpatialViewQuery org.springframework.data.couchbase.repository.query.SpatialViewQuery , Sort org.springframework.data.couchbase.repository.query.Sort ) { if ( org.springframework.data.couchbase.repository.query.Sort . isSorted ( ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( org.springframework.data.couchbase.repository.query.PartTree . isLimiting ( ) ) { org.springframework.data.couchbase.repository.query.SpatialViewQuery . limit ( org.springframework.data.couchbase.repository.query.PartTree . getMaxResults ( ) ) ; } if ( org.springframework.data.couchbase.repository.query.JsonArray . isEmpty ( ) && org.springframework.data.couchbase.repository.query.JsonArray . isEmpty ( ) ) { return new org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.SpatialViewQueryWrapper ( org.springframework.data.couchbase.repository.query.SpatialViewQuery , java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> ) ; } void ( org.springframework.data.couchbase.repository.query.JsonArray , int ) ; void ( org.springframework.data.couchbase.repository.query.JsonArray , int ) ; return new org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.SpatialViewQueryWrapper ( org.springframework.data.couchbase.repository.query.SpatialViewQuery . range ( org.springframework.data.couchbase.repository.query.JsonArray , org.springframework.data.couchbase.repository.query.JsonArray ) , java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> ) ; }  <METHOD_END>
<METHOD_START> protected void ( PropertyPath org.springframework.data.couchbase.repository.query.PropertyPath ) { this . org.springframework.data.couchbase.repository.query.PropertyPath = org.springframework.data.couchbase.repository.query.PropertyPath ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Object java.lang.Object , BeanWrapper org.springframework.data.couchbase.repository.query.BeanWrapper ) { java.lang.Object java.lang.Object = org.springframework.data.couchbase.repository.query.BeanWrapper . getPropertyValue ( org.springframework.data.couchbase.repository.query.PropertyPath . toDotPath ( ) ) ; if ( java.lang.Object instanceof Point ) { return boolean ( ( Point ) java.lang.Object ) ; } else if ( java.lang.Object == null ) { org.springframework.data.couchbase.repository.query.Logger . trace ( STRING , org.springframework.data.couchbase.repository.query.PropertyPath . toDotPath ( ) , java.lang.Object ) ; return false ; } else { org.springframework.data.couchbase.repository.query.Logger . trace ( STRING , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) , org.springframework.data.couchbase.repository.query.PropertyPath . toDotPath ( ) , java.lang.Object ) ; return false ; } }  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( Point org.springframework.data.couchbase.repository.query.Point );  <METHOD_END>
<METHOD_START> public void ( PropertyPath org.springframework.data.couchbase.repository.query.PropertyPath , Circle org.springframework.data.couchbase.repository.query.Circle ) { super( org.springframework.data.couchbase.repository.query.PropertyPath ); this . org.springframework.data.couchbase.repository.query.Circle = org.springframework.data.couchbase.repository.query.Circle ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( Point org.springframework.data.couchbase.repository.query.Point ) { return org.springframework.data.couchbase.repository.query.PointInShapeEvaluator . pointInCircle ( org.springframework.data.couchbase.repository.query.Point , org.springframework.data.couchbase.repository.query.Circle ) ; }  <METHOD_END>
<METHOD_START> public void ( PropertyPath org.springframework.data.couchbase.repository.query.PropertyPath , Polygon org.springframework.data.couchbase.repository.query.Polygon ) { super( org.springframework.data.couchbase.repository.query.PropertyPath ); this . org.springframework.data.couchbase.repository.query.Polygon = org.springframework.data.couchbase.repository.query.Polygon ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Point org.springframework.data.couchbase.repository.query.Point ) { return org.springframework.data.couchbase.repository.query.PointInShapeEvaluator . pointInPolygon ( org.springframework.data.couchbase.repository.query.Point , org.springframework.data.couchbase.repository.query.Polygon ) ; }  <METHOD_END>
<METHOD_START> public void ( PropertyPath org.springframework.data.couchbase.repository.query.PropertyPath , Point [] org.springframework.data.couchbase.repository.query.Point[] ) { super( org.springframework.data.couchbase.repository.query.PropertyPath ); this . org.springframework.data.couchbase.repository.query.Point[] = org.springframework.data.couchbase.repository.query.Point[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Point org.springframework.data.couchbase.repository.query.Point ) { return org.springframework.data.couchbase.repository.query.PointInShapeEvaluator . pointInPolygon ( org.springframework.data.couchbase.repository.query.Point , org.springframework.data.couchbase.repository.query.Point[] ) ; }  <METHOD_END>
<METHOD_START> public void ( SpatialViewQuery org.springframework.data.couchbase.repository.query.SpatialViewQuery , java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> < org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator > java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> ) { this . org.springframework.data.couchbase.repository.query.SpatialViewQuery = org.springframework.data.couchbase.repository.query.SpatialViewQuery ; this . java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> = java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.couchbase.repository.query.SpatialViewQuery org.springframework.data.couchbase.repository.query.SpatialViewQuery ( ) { return org.springframework.data.couchbase.repository.query.SpatialViewQuery ; }  <METHOD_END>
<METHOD_START> public < T > java.util.List<T> < T > java.util.List<T> ( java.util.List<T> < T > java.util.List<T> ) { java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( java.util.List<T> . int ( ) ) ; for ( T T : java.util.List<T> ) { BeanWrapper org.springframework.data.couchbase.repository.query.BeanWrapper = new BeanWrapperImpl ( T ) ; boolean boolean = true ; for ( org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator : java.util.List<org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator> ) { boolean = boolean && org.springframework.data.couchbase.repository.query.SpatialViewQueryCreator.AbstractFalsePositiveEvaluator . boolean ( T , org.springframework.data.couchbase.repository.query.BeanWrapper ) ; } if ( boolean ) { java.util.List<T> . boolean ( T ) ; } else { org.springframework.data.couchbase.repository.query.Logger . trace ( STRING , T ) ; } } return java.util.List<T> ; }  <METHOD_END>
