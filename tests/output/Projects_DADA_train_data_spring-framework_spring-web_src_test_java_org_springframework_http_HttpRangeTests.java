<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { HttpRange . createByteRange ( - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { HttpRange . createByteRange ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { HttpRange . createSuffixRange ( - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRange org.springframework.http.HttpRange = HttpRange . createByteRange ( NUMBER , NUMBER ) ; assertEquals ( NUMBER , org.springframework.http.HttpRange . getRangeStart ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.http.HttpRange . getRangeEnd ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRange org.springframework.http.HttpRange = HttpRange . createByteRange ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.http.HttpRange . getRangeStart ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.http.HttpRange . getRangeEnd ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRange org.springframework.http.HttpRange = HttpRange . createByteRange ( NUMBER , NUMBER ) ; assertEquals ( NUMBER , org.springframework.http.HttpRange . getRangeStart ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.http.HttpRange . getRangeEnd ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRange org.springframework.http.HttpRange = HttpRange . createSuffixRange ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.http.HttpRange . getRangeStart ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.http.HttpRange . getRangeEnd ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRange org.springframework.http.HttpRange = HttpRange . createSuffixRange ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.http.HttpRange . getRangeStart ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.http.HttpRange . getRangeEnd ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.http.HttpRange> < HttpRange > java.util.List<org.springframework.http.HttpRange> = HttpRange . parseRanges ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.HttpRange> . size ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.HttpRange> . get ( NUMBER ) . getRangeStart ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.HttpRange> . get ( NUMBER ) . getRangeEnd ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.HttpRange> . get ( NUMBER ) . getRangeStart ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.HttpRange> . get ( NUMBER ) . getRangeEnd ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.HttpRange> . get ( NUMBER ) . getRangeStart ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.HttpRange> . get ( NUMBER ) . getRangeEnd ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.http.HttpRange> < HttpRange > java.util.List<org.springframework.http.HttpRange> = new java.util.ArrayList<org.springframework.http.HttpRange> <> ( ) ; java.util.List<org.springframework.http.HttpRange> . add ( HttpRange . createByteRange ( NUMBER , NUMBER ) ) ; java.util.List<org.springframework.http.HttpRange> . add ( HttpRange . createByteRange ( NUMBER ) ) ; java.util.List<org.springframework.http.HttpRange> . add ( HttpRange . createSuffixRange ( NUMBER ) ) ; assertEquals ( STRING , STRING , HttpRange . toString ( java.util.List<org.springframework.http.HttpRange> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { byte [] byte[] = STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; ByteArrayResource org.springframework.http.ByteArrayResource = new ByteArrayResource ( byte[] ) ; HttpRange org.springframework.http.HttpRange = HttpRange . createByteRange ( NUMBER , NUMBER ) ; ResourceRegion org.springframework.http.ResourceRegion = org.springframework.http.HttpRange . toResourceRegion ( org.springframework.http.ByteArrayResource ) ; assertEquals ( org.springframework.http.ByteArrayResource , org.springframework.http.ResourceRegion . getResource ( ) ) ; assertEquals ( NUMBER , org.springframework.http.ResourceRegion . getPosition ( ) ) ; assertEquals ( NUMBER , org.springframework.http.ResourceRegion . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { InputStreamResource org.springframework.http.InputStreamResource = mock ( InputStreamResource .class ) ; HttpRange org.springframework.http.HttpRange = HttpRange . createByteRange ( NUMBER , NUMBER ) ; org.springframework.http.HttpRange . toResourceRegion ( org.springframework.http.InputStreamResource ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { ByteArrayResource org.springframework.http.ByteArrayResource = mock ( ByteArrayResource .class ) ; given ( org.springframework.http.ByteArrayResource . contentLength ( ) ) . willReturn ( - NUMBER ) ; HttpRange org.springframework.http.HttpRange = HttpRange . createByteRange ( NUMBER , NUMBER ) ; org.springframework.http.HttpRange . toResourceRegion ( org.springframework.http.ByteArrayResource ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ByteArrayResource org.springframework.http.ByteArrayResource = mock ( ByteArrayResource .class ) ; given ( org.springframework.http.ByteArrayResource . contentLength ( ) ) . willThrow ( java.io.IOException .class ) ; HttpRange org.springframework.http.HttpRange = HttpRange . createByteRange ( NUMBER , NUMBER ) ; org.springframework.http.HttpRange . toResourceRegion ( org.springframework.http.ByteArrayResource ) ; }  <METHOD_END>
