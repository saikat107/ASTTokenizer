<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ILoggingEvent org.springframework.boot.logging.logback.ILoggingEvent , java.lang.String java.lang.String ) { AnsiElement org.springframework.boot.logging.logback.AnsiElement = java.util.Map<java.lang.String,org.springframework.boot.logging.logback.AnsiElement> . get ( getFirstOption ( ) ) ; if ( org.springframework.boot.logging.logback.AnsiElement == null ) { org.springframework.boot.logging.logback.AnsiElement = java.util.Map<java.lang.Integer,org.springframework.boot.logging.logback.AnsiElement> . get ( org.springframework.boot.logging.logback.ILoggingEvent . getLevel ( ) . toInteger ( ) ) ; org.springframework.boot.logging.logback.AnsiElement = ( org.springframework.boot.logging.logback.AnsiElement == null ? AnsiColor . GREEN : org.springframework.boot.logging.logback.AnsiElement ) ; } return java.lang.String ( java.lang.String , org.springframework.boot.logging.logback.AnsiElement ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , AnsiElement org.springframework.boot.logging.logback.AnsiElement ) { return AnsiOutput . toString ( org.springframework.boot.logging.logback.AnsiElement , java.lang.String ) ; }  <METHOD_END>
