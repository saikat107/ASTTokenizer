<METHOD_START> @ Test public void void ( ) java.lang.Exception { new DefaultControllerSpec ( new org.springframework.test.web.reactive.server.DefaultControllerSpecTests.MyController ( ) ) . build ( ) . get ( ) . uri ( STRING ) . exchange ( ) . expectStatus ( ) . isOk ( ) . expectBody ( java.lang.String .class ) . value ( ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new DefaultControllerSpec ( new org.springframework.test.web.reactive.server.DefaultControllerSpecTests.MyController ( ) ) . controllerAdvice ( new org.springframework.test.web.reactive.server.DefaultControllerSpecTests.MyControllerAdvice ( ) ) . build ( ) . get ( ) . uri ( STRING ) . exchange ( ) . expectStatus ( ) . isBadRequest ( ) . expectBody ( java.lang.String .class ) . value ( ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public void void ( ) { throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler public org.springframework.test.web.reactive.server.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.test.web.reactive.server.ResponseEntity<java.lang.String> ( java.lang.IllegalStateException java.lang.IllegalStateException ) { return ResponseEntity . status ( NUMBER ) . body ( STRING ) ; }  <METHOD_END>
