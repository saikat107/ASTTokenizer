<METHOD_START> public org.springframework.cache.interceptor.EvaluationContext org.springframework.cache.interceptor.EvaluationContext ( java.util.Collection<? extends org.springframework.cache.interceptor.Cache> < ? extends Cache > java.util.Collection<? extends org.springframework.cache.interceptor.Cache> , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> , BeanFactory org.springframework.cache.interceptor.BeanFactory ) { return org.springframework.cache.interceptor.EvaluationContext ( java.util.Collection<> , java.lang.reflect.Method , java.lang.Object[] , java.lang.Object , java.lang.Class<> , java.lang.Object , org.springframework.cache.interceptor.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.cache.interceptor.EvaluationContext org.springframework.cache.interceptor.EvaluationContext ( java.util.Collection<? extends org.springframework.cache.interceptor.Cache> < ? extends Cache > java.util.Collection<? extends org.springframework.cache.interceptor.Cache> , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object java.lang.Object , BeanFactory org.springframework.cache.interceptor.BeanFactory ) { CacheExpressionRootObject org.springframework.cache.interceptor.CacheExpressionRootObject = new CacheExpressionRootObject ( java.util.Collection<> , java.lang.reflect.Method , java.lang.Object[] , java.lang.Object , java.lang.Class<> ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( java.lang.Class<> , java.lang.reflect.Method ) ; CacheEvaluationContext org.springframework.cache.interceptor.CacheEvaluationContext = new CacheEvaluationContext ( org.springframework.cache.interceptor.CacheExpressionRootObject , java.lang.reflect.Method , java.lang.Object[] , getParameterNameDiscoverer ( ) ) ; if ( java.lang.Object == java.lang.Object ) { org.springframework.cache.interceptor.CacheEvaluationContext . addUnavailableVariable ( java.lang.String ) ; } else if ( java.lang.Object != java.lang.Object ) { org.springframework.cache.interceptor.CacheEvaluationContext . setVariable ( java.lang.String , java.lang.Object ) ; } if ( org.springframework.cache.interceptor.BeanFactory != null ) { org.springframework.cache.interceptor.CacheEvaluationContext . setBeanResolver ( new BeanFactoryResolver ( org.springframework.cache.interceptor.BeanFactory ) ) ; } return org.springframework.cache.interceptor.CacheEvaluationContext ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , AnnotatedElementKey org.springframework.cache.interceptor.AnnotatedElementKey , EvaluationContext org.springframework.cache.interceptor.EvaluationContext ) { return getExpression ( this . java.util.Map<org.springframework.cache.interceptor.ExpressionKey,org.springframework.cache.interceptor.Expression> , org.springframework.cache.interceptor.AnnotatedElementKey , java.lang.String ) . getValue ( org.springframework.cache.interceptor.EvaluationContext ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String , AnnotatedElementKey org.springframework.cache.interceptor.AnnotatedElementKey , EvaluationContext org.springframework.cache.interceptor.EvaluationContext ) { return getExpression ( this . java.util.Map<org.springframework.cache.interceptor.ExpressionKey,org.springframework.cache.interceptor.Expression> , org.springframework.cache.interceptor.AnnotatedElementKey , java.lang.String ) . getValue ( org.springframework.cache.interceptor.EvaluationContext , boolean .class ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String , AnnotatedElementKey org.springframework.cache.interceptor.AnnotatedElementKey , EvaluationContext org.springframework.cache.interceptor.EvaluationContext ) { return getExpression ( this . java.util.Map<org.springframework.cache.interceptor.ExpressionKey,org.springframework.cache.interceptor.Expression> , org.springframework.cache.interceptor.AnnotatedElementKey , java.lang.String ) . getValue ( org.springframework.cache.interceptor.EvaluationContext , boolean .class ) ; }  <METHOD_END>
<METHOD_START> void void ( ) { this . java.util.Map<org.springframework.cache.interceptor.ExpressionKey,org.springframework.cache.interceptor.Expression> . clear ( ) ; this . java.util.Map<org.springframework.cache.interceptor.ExpressionKey,org.springframework.cache.interceptor.Expression> . clear ( ) ; this . java.util.Map<org.springframework.cache.interceptor.ExpressionKey,org.springframework.cache.interceptor.Expression> . clear ( ) ; this . java.util.Map<org.springframework.cache.interceptor.AnnotatedElementKey,java.lang.reflect.Method> . clear ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.reflect.Method java.lang.reflect.Method ) { AnnotatedElementKey org.springframework.cache.interceptor.AnnotatedElementKey = new AnnotatedElementKey ( java.lang.reflect.Method , java.lang.Class<> ) ; java.lang.reflect.Method java.lang.reflect.Method = this . java.util.Map<org.springframework.cache.interceptor.AnnotatedElementKey,java.lang.reflect.Method> . get ( org.springframework.cache.interceptor.AnnotatedElementKey ) ; if ( java.lang.reflect.Method == null ) { java.lang.reflect.Method = AopUtils . getMostSpecificMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( java.lang.reflect.Method == null ) { java.lang.reflect.Method = java.lang.reflect.Method ; } this . java.util.Map<org.springframework.cache.interceptor.AnnotatedElementKey,java.lang.reflect.Method> . put ( org.springframework.cache.interceptor.AnnotatedElementKey , java.lang.reflect.Method ) ; } return java.lang.reflect.Method ; }  <METHOD_END>
