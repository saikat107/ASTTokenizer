<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; InfoProperties org.springframework.boot.info.InfoProperties = new InfoProperties ( java.util.Properties ) ; assertThat ( org.springframework.boot.info.InfoProperties . get ( STRING ) ) . isEqualTo ( STRING ) ; java.util.Properties . java.lang.Object ( STRING ) ; assertThat ( org.springframework.boot.info.InfoProperties . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; InfoProperties org.springframework.boot.info.InfoProperties = new InfoProperties ( java.util.Properties ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; for ( InfoProperties . InfoProperties InfoProperties.Entry : org.springframework.boot.info.InfoProperties ) { java.util.Properties . java.lang.Object ( InfoProperties.Entry . getKey ( ) , InfoProperties.Entry . getValue ( ) ) ; } assertThat ( java.util.Properties ) . isEqualTo ( java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; InfoProperties org.springframework.boot.info.InfoProperties = new InfoProperties ( java.util.Properties ) ; this . org.springframework.boot.info.ExpectedException . expect ( java.lang.UnsupportedOperationException .class ) ; org.springframework.boot.info.InfoProperties . iterator ( ) . remove ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; InfoProperties org.springframework.boot.info.InfoProperties = new org.springframework.boot.info.InfoPropertiesTests.MyInfoProperties ( java.util.Properties ) ; PropertySource < ? > org.springframework.boot.info.PropertySource<?> = org.springframework.boot.info.InfoProperties . toPropertySource ( ) ; assertThat ( org.springframework.boot.info.PropertySource<> . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.info.PropertySource<> . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.info.PropertySource<> . getName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> void ( java.util.Properties java.util.Properties ) { super( java.util.Properties ); }  <METHOD_END>
