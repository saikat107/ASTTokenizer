<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( T T , org.springframework.data.repository.support.RepositoryInvocationTestUtils.VerifyingMethodInterceptor org.springframework.data.repository.support.RepositoryInvocationTestUtils.VerifyingMethodInterceptor ) { ProxyFactory org.springframework.data.repository.support.ProxyFactory = new ProxyFactory ( ) ; org.springframework.data.repository.support.ProxyFactory . setInterfaces ( T . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.Class<?>[] ( ) ) ; org.springframework.data.repository.support.ProxyFactory . setTarget ( T ) ; org.springframework.data.repository.support.ProxyFactory . addAdvice ( org.springframework.data.repository.support.RepositoryInvocationTestUtils.VerifyingMethodInterceptor ) ; return ( T ) org.springframework.data.repository.support.ProxyFactory . getProxy ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.repository.support.RepositoryInvocationTestUtils.VerifyingMethodInterceptor org.springframework.data.repository.support.RepositoryInvocationTestUtils.VerifyingMethodInterceptor ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new org.springframework.data.repository.support.RepositoryInvocationTestUtils.VerifyingMethodInterceptor ( java.lang.Class<> , new java.lang.reflect.Method [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.repository.support.RepositoryInvocationTestUtils.VerifyingMethodInterceptor org.springframework.data.repository.support.RepositoryInvocationTestUtils.VerifyingMethodInterceptor ( java.lang.reflect.Method ... java.lang.reflect.Method[] ) { return new org.springframework.data.repository.support.RepositoryInvocationTestUtils.VerifyingMethodInterceptor ( null , java.lang.reflect.Method[] ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.reflect.Method ... java.lang.reflect.Method[] ) { this . java.lang.Class = java.lang.Class<> ; this . java.util.List<java.lang.reflect.Method> = java.util.Arrays . java.util.List<java.lang.reflect.Method> ( java.lang.reflect.Method[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.data.repository.support.MethodInvocation ) throws java.lang.Throwable { if ( ! java.util.List<java.lang.reflect.Method> . boolean ( ) ) { assertThat ( java.util.List<java.lang.reflect.Method> ) . contains ( org.springframework.data.repository.support.MethodInvocation . getMethod ( ) ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.repository.support.MethodInvocation . getMethod ( ) . getDeclaringClass ( ) ; assertThat ( java.lang.Class<> ) . as ( STRING , java.lang.Class , java.lang.Class<> ) . isEqualTo ( java.lang.Class ) ; } return org.springframework.data.repository.support.MethodInvocation . proceed ( ) ; }  <METHOD_END>
