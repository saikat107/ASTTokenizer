<METHOD_START> @ Test public void void ( ) java.io.IOException { assertThat ( this . org.springframework.boot.gradle.dsl.GradleBuild . build ( STRING , STRING ) . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; java.util.Properties java.util.Properties = java.util.Properties ( ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , this . org.springframework.boot.gradle.dsl.GradleBuild . getProjectDir ( ) . getName ( ) ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , this . org.springframework.boot.gradle.dsl.GradleBuild . getProjectDir ( ) . getName ( ) ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertThat ( this . org.springframework.boot.gradle.dsl.GradleBuild . build ( STRING , STRING ) . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; java.util.Properties java.util.Properties = java.util.Properties ( ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , this . org.springframework.boot.gradle.dsl.GradleBuild . getProjectDir ( ) . getName ( ) ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertThat ( this . org.springframework.boot.gradle.dsl.GradleBuild . build ( STRING , STRING ) . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; java.util.Properties java.util.Properties = java.util.Properties ( ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , this . org.springframework.boot.gradle.dsl.GradleBuild . getProjectDir ( ) . getName ( ) ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , this . org.springframework.boot.gradle.dsl.GradleBuild . getProjectDir ( ) . getName ( ) ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertThat ( this . org.springframework.boot.gradle.dsl.GradleBuild . build ( STRING , STRING ) . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; java.util.Properties java.util.Properties = java.util.Properties ( ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , this . org.springframework.boot.gradle.dsl.GradleBuild . getProjectDir ( ) . getName ( ) ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertThat ( this . org.springframework.boot.gradle.dsl.GradleBuild . build ( STRING , STRING ) . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; java.util.Properties java.util.Properties = java.util.Properties ( ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , this . org.springframework.boot.gradle.dsl.GradleBuild . getProjectDir ( ) . getName ( ) ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , this . org.springframework.boot.gradle.dsl.GradleBuild . getProjectDir ( ) . getName ( ) ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Properties ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertThat ( this . org.springframework.boot.gradle.dsl.GradleBuild . build ( STRING , STRING ) . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; }  <METHOD_END>
<METHOD_START> private java.util.Properties java.util.Properties ( ) { java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.dsl.GradleBuild . getProjectDir ( ) , STRING ) ; assertThat ( java.io.File ) . isFile ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; try ( java.io.FileReader java.io.FileReader = new java.io.FileReader ( java.io.File ) ) { java.util.Properties . void ( java.io.FileReader ) ; return java.util.Properties ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.RuntimeException ( java.io.IOException ) ; } }  <METHOD_END>
