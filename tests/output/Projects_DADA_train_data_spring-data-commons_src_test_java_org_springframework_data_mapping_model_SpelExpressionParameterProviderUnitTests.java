<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.mapping.model.SpELExpressionParameterValueProvider<org.springframework.data.mapping.model.SamplePersistentProperty> = new SpELExpressionParameterValueProvider <> ( org.springframework.data.mapping.model.SpELExpressionEvaluator , org.springframework.data.mapping.model.ConversionService , org.springframework.data.mapping.model.ParameterValueProvider<org.springframework.data.mapping.model.SamplePersistentProperty> ) ; org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> = mock ( Parameter .class ) ; when ( org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> . getSpelExpression ( ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; when ( org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> . getRawType ( ) ) . thenReturn ( java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Parameter < java.lang.Object , SamplePersistentProperty > org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> = mock ( Parameter .class ) ; org.springframework.data.mapping.model.SpELExpressionParameterValueProvider<org.springframework.data.mapping.model.SamplePersistentProperty> . getParameterValue ( org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> ) ; verify ( org.springframework.data.mapping.model.ParameterValueProvider<org.springframework.data.mapping.model.SamplePersistentProperty> , times ( NUMBER ) ) . getParameterValue ( org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> ) ; verify ( org.springframework.data.mapping.model.SpELExpressionEvaluator , times ( NUMBER ) ) . evaluate ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> . getSpelExpression ( ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.String> ( STRING ) ) ; org.springframework.data.mapping.model.SpELExpressionParameterValueProvider<org.springframework.data.mapping.model.SamplePersistentProperty> . getParameterValue ( org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> ) ; verify ( org.springframework.data.mapping.model.ParameterValueProvider<org.springframework.data.mapping.model.SamplePersistentProperty> , times ( NUMBER ) ) . getParameterValue ( org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> ) ; verify ( org.springframework.data.mapping.model.SpELExpressionEvaluator , times ( NUMBER ) ) . evaluate ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( java.util.Optional . java.util.Optional<java.lang.String> ( STRING ) ) . when ( org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> ) . getSpelExpression ( ) ; doReturn ( STRING ) . when ( org.springframework.data.mapping.model.SpELExpressionEvaluator ) . evaluate ( any ( ) ) ; org.springframework.data.mapping.model.SpELExpressionParameterValueProvider<org.springframework.data.mapping.model.SamplePersistentProperty> . getParameterValue ( org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> ) ; verify ( org.springframework.data.mapping.model.ParameterValueProvider<org.springframework.data.mapping.model.SamplePersistentProperty> , times ( NUMBER ) ) . getParameterValue ( org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> ) ; verify ( org.springframework.data.mapping.model.ConversionService , times ( NUMBER ) ) . convert ( STRING , java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( java.util.Optional . java.util.Optional<java.lang.String> ( STRING ) ) . when ( org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> ) . getSpelExpression ( ) ; doReturn ( null ) . when ( org.springframework.data.mapping.model.SpELExpressionEvaluator ) . evaluate ( any ( ) ) ; org.springframework.data.mapping.model.SpELExpressionParameterValueProvider<org.springframework.data.mapping.model.SamplePersistentProperty> . getParameterValue ( org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> ) ; verify ( org.springframework.data.mapping.model.ParameterValueProvider<org.springframework.data.mapping.model.SamplePersistentProperty> , times ( NUMBER ) ) . getParameterValue ( org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> ) ; verify ( org.springframework.data.mapping.model.ConversionService , times ( NUMBER ) ) . convert ( STRING , java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.model.SpELExpressionParameterValueProvider<org.springframework.data.mapping.model.SamplePersistentProperty> = new SpELExpressionParameterValueProvider < SamplePersistentProperty > ( org.springframework.data.mapping.model.SpELExpressionEvaluator , org.springframework.data.mapping.model.ConversionService , org.springframework.data.mapping.model.ParameterValueProvider<org.springframework.data.mapping.model.SamplePersistentProperty> ) { @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected < T > T T ( java.lang.Object java.lang.Object , Parameter < T , SamplePersistentProperty > org.springframework.data.mapping.model.Parameter<T,org.springframework.data.mapping.model.SamplePersistentProperty> ) { return ( T ) STRING ; } } ; doReturn ( java.util.Optional . java.util.Optional<java.lang.String> ( STRING ) ) . when ( org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> ) . getSpelExpression ( ) ; doReturn ( STRING ) . when ( org.springframework.data.mapping.model.SpELExpressionEvaluator ) . evaluate ( any ( ) ) ; assertThat ( org.springframework.data.mapping.model.SpELExpressionParameterValueProvider<org.springframework.data.mapping.model.SamplePersistentProperty> . getParameterValue ( org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> ) ) . hasValue ( STRING ) ; verify ( org.springframework.data.mapping.model.ParameterValueProvider<org.springframework.data.mapping.model.SamplePersistentProperty> , times ( NUMBER ) ) . getParameterValue ( org.springframework.data.mapping.model.Parameter<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected < T > T T ( java.lang.Object java.lang.Object , Parameter < T , SamplePersistentProperty > org.springframework.data.mapping.model.Parameter<T,org.springframework.data.mapping.model.SamplePersistentProperty> ) { return ( T ) STRING ; }  <METHOD_END>
