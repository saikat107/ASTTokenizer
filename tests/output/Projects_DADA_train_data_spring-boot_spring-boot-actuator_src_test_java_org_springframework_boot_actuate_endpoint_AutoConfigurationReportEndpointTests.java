<METHOD_START> public void ( ) { super( org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpointTests.Config .class , AutoConfigurationReportEndpoint .class , STRING , true , STRING ); }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . context = new AnnotationConfigApplicationContext ( ) ; this . context . register ( this . configClass ) ; this . context . refresh ( ) ; Report org.springframework.boot.actuate.endpoint.Report = getEndpointBean ( ) . invoke ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.Report . getPositiveMatches ( ) ) . isEmpty ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.Report . getNegativeMatches ( ) ) . containsKey ( STRING ) ; assertThat ( org.springframework.boot.actuate.endpoint.Report . getExclusions ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( ConfigurableApplicationContext org.springframework.boot.actuate.endpoint.ConfigurableApplicationContext ) { this . org.springframework.boot.actuate.endpoint.ConfigurableApplicationContext = org.springframework.boot.actuate.endpoint.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { ConditionEvaluationReport org.springframework.boot.actuate.endpoint.ConditionEvaluationReport = ConditionEvaluationReport . get ( this . org.springframework.boot.actuate.endpoint.ConfigurableApplicationContext . getBeanFactory ( ) ) ; org.springframework.boot.actuate.endpoint.ConditionEvaluationReport . recordConditionEvaluation ( STRING , mock ( Condition .class ) , mock ( ConditionOutcome .class ) ) ; org.springframework.boot.actuate.endpoint.ConditionEvaluationReport . recordExclusions ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpoint org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpoint ( ) { return new AutoConfigurationReportEndpoint ( ) ; }  <METHOD_END>
