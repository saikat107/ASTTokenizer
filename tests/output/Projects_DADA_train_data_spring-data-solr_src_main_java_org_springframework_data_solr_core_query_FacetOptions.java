<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( java.lang.String ... java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; Assert . noNullElements ( java.lang.String[] , STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.data.solr.core.query.FacetOptions ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public void ( Field ... org.springframework.data.solr.core.query.Field[] ) { Assert . notNull ( org.springframework.data.solr.core.query.Field[] , STRING ) ; Assert . noNullElements ( org.springframework.data.solr.core.query.Field[] , STRING ) ; for ( Field org.springframework.data.solr.core.query.Field : org.springframework.data.solr.core.query.Field[] ) { org.springframework.data.solr.core.query.FacetOptions ( org.springframework.data.solr.core.query.Field ) ; } }  <METHOD_END>
<METHOD_START> public void ( SolrDataQuery ... org.springframework.data.solr.core.query.SolrDataQuery[] ) { Assert . notNull ( org.springframework.data.solr.core.query.SolrDataQuery[] , STRING ) ; Assert . noNullElements ( org.springframework.data.solr.core.query.SolrDataQuery[] , STRING ) ; this . java.util.List<org.springframework.data.solr.core.query.SolrDataQuery> . addAll ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.query.SolrDataQuery[] ) ) ; }  <METHOD_END>
<METHOD_START> public final org.springframework.data.solr.core.query.FacetOptions org.springframework.data.solr.core.query.FacetOptions ( Field org.springframework.data.solr.core.query.Field ) { Assert . notNull ( org.springframework.data.solr.core.query.Field , STRING ) ; Assert . hasText ( org.springframework.data.solr.core.query.Field . getName ( ) , STRING ) ; this . java.util.List<org.springframework.data.solr.core.query.Field> . add ( org.springframework.data.solr.core.query.Field ) ; return this ; }  <METHOD_END>
<METHOD_START> public final org.springframework.data.solr.core.query.FacetOptions org.springframework.data.solr.core.query.FacetOptions ( java.lang.String java.lang.String ) { org.springframework.data.solr.core.query.FacetOptions ( new SimpleField ( java.lang.String ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public final org.springframework.data.solr.core.query.FacetOptions org.springframework.data.solr.core.query.FacetOptions ( org.springframework.data.solr.core.query.FacetOptions.FieldWithRangeParameters<?,?,?> < ? , ? , ? > org.springframework.data.solr.core.query.FacetOptions.FieldWithRangeParameters<?,?,?> ) { Assert . notNull ( org.springframework.data.solr.core.query.FacetOptions.FieldWithRangeParameters<,,> , STRING ) ; Assert . hasText ( org.springframework.data.solr.core.query.FacetOptions.FieldWithRangeParameters<,,> . getName ( ) , STRING ) ; this . java.util.List<org.springframework.data.solr.core.query.FacetOptions.FieldWithRangeParameters<?,?,?>> . boolean ( org.springframework.data.solr.core.query.FacetOptions.FieldWithRangeParameters<,,> ) ; return this ; }  <METHOD_END>
<METHOD_START> public final org.springframework.data.solr.core.query.FacetOptions org.springframework.data.solr.core.query.FacetOptions ( Field ... org.springframework.data.solr.core.query.Field[] ) { Assert . notNull ( org.springframework.data.solr.core.query.Field[] , STRING ) ; for ( Field org.springframework.data.solr.core.query.Field : org.springframework.data.solr.core.query.Field[] ) { Assert . notNull ( org.springframework.data.solr.core.query.Field , STRING ) ; Assert . hasText ( org.springframework.data.solr.core.query.Field . getName ( ) , STRING ) ; } java.util.List<org.springframework.data.solr.core.query.Field> < Field > java.util.List<org.springframework.data.solr.core.query.Field> = java.util.Arrays . java.util.List ( org.springframework.data.solr.core.query.Field[] ) ; this . java.util.List<org.springframework.data.solr.core.query.PivotField> . add ( new SimplePivotField ( java.util.List<org.springframework.data.solr.core.query.Field> ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public final org.springframework.data.solr.core.query.FacetOptions org.springframework.data.solr.core.query.FacetOptions ( java.lang.String ... java.lang.String[] ) { Assert . state ( java.lang.String[] . int > NUMBER , STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { Assert . hasText ( java.lang.String , STRING ) ; } this . java.util.List<org.springframework.data.solr.core.query.PivotField> . add ( new SimplePivotField ( java.lang.String[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public final org.springframework.data.solr.core.query.FacetOptions org.springframework.data.solr.core.query.FacetOptions ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { Assert . notNull ( java.util.Collection<java.lang.String> , STRING ) ; for ( java.lang.String java.lang.String : java.util.Collection<java.lang.String> ) { org.springframework.data.solr.core.query.FacetOptions ( java.lang.String ) ; } return this ; }  <METHOD_END>
<METHOD_START> public final org.springframework.data.solr.core.query.FacetOptions org.springframework.data.solr.core.query.FacetOptions ( SolrDataQuery org.springframework.data.solr.core.query.SolrDataQuery ) { Assert . notNull ( org.springframework.data.solr.core.query.SolrDataQuery , STRING ) ; this . java.util.List<org.springframework.data.solr.core.query.SolrDataQuery> . add ( org.springframework.data.solr.core.query.SolrDataQuery ) ; return this ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.solr.core.query.SolrDataQuery> < SolrDataQuery > java.util.List<org.springframework.data.solr.core.query.SolrDataQuery> ( ) { return java.util.Collections . java.util.List<org.springframework.data.solr.core.query.SolrDataQuery> ( this . java.util.List<org.springframework.data.solr.core.query.SolrDataQuery> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetOptions org.springframework.data.solr.core.query.FacetOptions ( int int ) { this . int = java.lang.Math . int ( NUMBER , int ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetOptions org.springframework.data.solr.core.query.FacetOptions ( int int ) { this . int = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetOptions org.springframework.data.solr.core.query.FacetOptions ( org.springframework.data.solr.core.query.FacetOptions.FacetSort org.springframework.data.solr.core.query.FacetOptions.FacetSort ) { Assert . notNull ( org.springframework.data.solr.core.query.FacetOptions.FacetSort , STRING ) ; this . org.springframework.data.solr.core.query.FacetOptions.FacetSort = org.springframework.data.solr.core.query.FacetOptions.FacetSort ; return this ; }  <METHOD_END>
<METHOD_START> public final java.util.List<org.springframework.data.solr.core.query.Field> < Field > java.util.List<org.springframework.data.solr.core.query.Field> ( ) { return java.util.Collections . java.util.List<org.springframework.data.solr.core.query.Field> ( this . java.util.List<org.springframework.data.solr.core.query.Field> ) ; }  <METHOD_END>
<METHOD_START> public final java.util.List<org.springframework.data.solr.core.query.PivotField> < PivotField > java.util.List<org.springframework.data.solr.core.query.PivotField> ( ) { return java.util.Collections . java.util.List<org.springframework.data.solr.core.query.PivotField> ( java.util.List<org.springframework.data.solr.core.query.PivotField> ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetOptions.FacetSort org.springframework.data.solr.core.query.FacetOptions.FacetSort ( ) { return this . org.springframework.data.solr.core.query.FacetOptions.FacetSort ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.Pageable org.springframework.data.solr.core.query.Pageable ( ) { return this . org.springframework.data.solr.core.query.Pageable != null ? this . org.springframework.data.solr.core.query.Pageable : new SolrPageRequest ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetOptions org.springframework.data.solr.core.query.FacetOptions ( Pageable org.springframework.data.solr.core.query.Pageable ) { this . org.springframework.data.solr.core.query.Pageable = org.springframework.data.solr.core.query.Pageable ; return this ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetOptions org.springframework.data.solr.core.query.FacetOptions ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ! this . java.util.List<org.springframework.data.solr.core.query.Field> . isEmpty ( ) || ! this . java.util.List<org.springframework.data.solr.core.query.PivotField> . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ! this . java.util.List<org.springframework.data.solr.core.query.SolrDataQuery> . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ! java.util.List<org.springframework.data.solr.core.query.PivotField> . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return ! java.util.List<org.springframework.data.solr.core.query.FacetOptions.FieldWithRangeParameters<?,?,?>> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ( ) || boolean ( ) || boolean ( ) || boolean ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return StringUtils . hasText ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.Collection<org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters> < org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters > java.util.Collection<org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters> ( ) { java.util.List<org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters> < org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters > java.util.List<org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters> = new java.util.ArrayList<org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters> <> ( ) ; for ( Field org.springframework.data.solr.core.query.Field : java.util.List<org.springframework.data.solr.core.query.Field> ) { if ( org.springframework.data.solr.core.query.Field instanceof org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ) { java.util.List<org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters> . boolean ( ( org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ) org.springframework.data.solr.core.query.Field ) ; } } return java.util.List<org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { super( java.lang.String , java.lang.Object ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( java.lang.String java.lang.String ) { org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( FacetParams . FACET_PREFIX , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return getQueryParameterValue ( FacetParams . FACET_PREFIX ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( org.springframework.data.solr.core.query.FacetOptions.FacetSort org.springframework.data.solr.core.query.FacetOptions.FacetSort ) { this . org.springframework.data.solr.core.query.FacetOptions.FacetSort = org.springframework.data.solr.core.query.FacetOptions.FacetSort ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetOptions.FacetSort org.springframework.data.solr.core.query.FacetOptions.FacetSort ( ) { return this . org.springframework.data.solr.core.query.FacetOptions.FacetSort ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( java.lang.Integer java.lang.Integer ) { org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( FacetParams . FACET_LIMIT , java.lang.Math . int ( NUMBER , java.lang.Integer ) , true ) ; return this ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return getQueryParameterValue ( FacetParams . FACET_LIMIT ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( java.lang.Integer java.lang.Integer ) { org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( FacetParams . FACET_OFFSET , java.lang.Integer , true ) ; return this ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return getQueryParameterValue ( FacetParams . FACET_OFFSET ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( java.lang.Integer java.lang.Integer ) { org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( FacetParams . FACET_MINCOUNT , java.lang.Math . int ( NUMBER , java.lang.Integer ) , true ) ; return this ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return getQueryParameterValue ( FacetParams . FACET_MINCOUNT ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( java.lang.Boolean java.lang.Boolean ) { org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( FacetParams . FACET_MISSING , java.lang.Boolean , true ) ; return this ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( ) { return getQueryParameterValue ( FacetParams . FACET_MISSING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( java.lang.String java.lang.String ) { org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( FacetParams . FACET_METHOD , java.lang.String , true ) ; return this ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return getQueryParameterValue ( FacetParams . FACET_METHOD ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { return org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( java.lang.String , java.lang.Object , false ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , boolean boolean ) { if ( boolean && java.lang.Object == null ) { removeQueryParameter ( java.lang.String ) ; return this ; } return this . org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( new org.springframework.data.solr.core.query.FacetOptions.FacetParameter ( java.lang.String , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters org.springframework.data.solr.core.query.FacetOptions.FieldWithFacetParameters ( org.springframework.data.solr.core.query.FacetOptions.FacetParameter org.springframework.data.solr.core.query.FacetOptions.FacetParameter ) { this . addQueryParameter ( org.springframework.data.solr.core.query.FacetOptions.FacetParameter ) ; return this ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.data.solr.core.query.FacetOptions.FieldWithRangeParameters<?,?,?>> < org.springframework.data.solr.core.query.FacetOptions.FieldWithRangeParameters<?,?,?> < ? , ? , ? > > java.util.Collection<org.springframework.data.solr.core.query.FacetOptions.FieldWithRangeParameters<?,?,?>> ( ) { return java.util.Collections . java.util.Collection<org.springframework.data.solr.core.query.FacetOptions.FieldWithRangeParameters<?,?,?>> ( java.util.List<org.springframework.data.solr.core.query.FacetOptions.FieldWithRangeParameters<?,?,?>> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , R R , R R , G G ) { super( java.lang.String ); Assert . notNull ( R , STRING + java.lang.String ) ; Assert . notNull ( R , STRING + java.lang.String ) ; Assert . notNull ( G , STRING + G ) ; T ( FacetParams . FACET_RANGE , java.lang.String ) ; T ( FacetParams . FACET_RANGE_START , R ) ; T ( FacetParams . FACET_RANGE_END , R ) ; T ( FacetParams . FACET_RANGE_GAP , G ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public T T ( java.lang.Boolean java.lang.Boolean ) { T ( FacetParams . FACET_RANGE_HARD_END , java.lang.Boolean ) ; return ( T ) this ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( ) { return getQueryParameterValue ( FacetParams . FACET_RANGE_HARD_END ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public T T ( FacetParams . FacetParams FacetParams.FacetRangeOther ) { T ( FacetParams . FACET_RANGE_OTHER , FacetParams.FacetRangeOther ) ; return ( T ) this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetRangeOther org.springframework.data.solr.core.query.FacetRangeOther ( ) { return getQueryParameterValue ( FacetParams . FACET_RANGE_OTHER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public T T ( FacetParams . FacetParams FacetParams.FacetRangeInclude ) { T ( FacetParams . FACET_RANGE_INCLUDE , FacetParams.FacetRangeInclude ) ; return ( T ) this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.FacetRangeInclude org.springframework.data.solr.core.query.FacetRangeInclude ( ) { return getQueryParameterValue ( FacetParams . FACET_RANGE_INCLUDE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected T T ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { removeQueryParameter ( java.lang.String ) ; } else { addQueryParameter ( new org.springframework.data.solr.core.query.FacetOptions.FacetParameter ( java.lang.String , java.lang.Object ) ) ; } return ( T ) this ; }  <METHOD_END>
<METHOD_START> public G G ( ) { return getQueryParameterValue ( FacetParams . FACET_RANGE_GAP ) ; }  <METHOD_END>
<METHOD_START> public R R ( ) { return getQueryParameterValue ( FacetParams . FACET_RANGE_START ) ; }  <METHOD_END>
<METHOD_START> public R R ( ) { return getQueryParameterValue ( FacetParams . FACET_RANGE_END ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.util.Date java.util.Date , java.util.Date java.util.Date , java.lang.String java.lang.String ) { super( java.lang.String , java.util.Date , java.util.Date , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Number java.lang.Number , java.lang.Number java.lang.Number , java.lang.Number java.lang.Number ) { super( java.lang.String , java.lang.Number , java.lang.Number , java.lang.Number ); }  <METHOD_END>
