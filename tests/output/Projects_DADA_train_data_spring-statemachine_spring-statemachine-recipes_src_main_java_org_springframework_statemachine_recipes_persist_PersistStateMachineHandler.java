<METHOD_START> public void ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.persist.StateMachine<java.lang.String,java.lang.String> ) { Assert . notNull ( org.springframework.statemachine.recipes.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; this . org.springframework.statemachine.recipes.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.persist.StateMachine<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { org.springframework.statemachine.recipes.persist.StateMachine<java.lang.String,java.lang.String> . getStateMachineAccessor ( ) . doWithAllRegions ( new StateMachineFunction < StateMachineAccess < java.lang.String , java.lang.String > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.persist.StateMachineAccess<java.lang.String,java.lang.String> ) { org.springframework.statemachine.recipes.persist.StateMachineAccess<java.lang.String,java.lang.String> . addStateMachineInterceptor ( org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.PersistingStateChangeInterceptor ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.persist.StateMachineAccess<java.lang.String,java.lang.String> ) { org.springframework.statemachine.recipes.persist.StateMachineAccess<java.lang.String,java.lang.String> . addStateMachineInterceptor ( org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.PersistingStateChangeInterceptor ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( Message < java.lang.String > org.springframework.statemachine.recipes.persist.Message<java.lang.String> , java.lang.String java.lang.String ) { org.springframework.statemachine.recipes.persist.StateMachine<java.lang.String,java.lang.String> . stop ( ) ; java.util.List<org.springframework.statemachine.recipes.persist.StateMachineAccess<java.lang.String,java.lang.String>> < StateMachineAccess < java.lang.String , java.lang.String > > java.util.List<org.springframework.statemachine.recipes.persist.StateMachineAccess<java.lang.String,java.lang.String>> = org.springframework.statemachine.recipes.persist.StateMachine<java.lang.String,java.lang.String> . getStateMachineAccessor ( ) . withAllRegions ( ) ; for ( StateMachineAccess < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.persist.StateMachineAccess<java.lang.String,java.lang.String> : java.util.List<org.springframework.statemachine.recipes.persist.StateMachineAccess<java.lang.String,java.lang.String>> ) { org.springframework.statemachine.recipes.persist.StateMachineAccess<java.lang.String,java.lang.String> . resetStateMachine ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( java.lang.String , null , null , null ) ) ; } org.springframework.statemachine.recipes.persist.StateMachine<java.lang.String,java.lang.String> . start ( ) ; return org.springframework.statemachine.recipes.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( org.springframework.statemachine.recipes.persist.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.PersistStateChangeListener org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.PersistStateChangeListener ) { org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.CompositePersistStateChangeListener . register ( org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.PersistStateChangeListener ) ; }  <METHOD_END>
<METHOD_START> void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.persist.State<java.lang.String,java.lang.String> , Message < java.lang.String > org.springframework.statemachine.recipes.persist.Message<java.lang.String> , Transition < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.persist.Transition<java.lang.String,java.lang.String> , StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.persist.StateMachine<java.lang.String,java.lang.String> );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.persist.State<java.lang.String,java.lang.String> , Message < java.lang.String > org.springframework.statemachine.recipes.persist.Message<java.lang.String> , Transition < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.persist.Transition<java.lang.String,java.lang.String> , StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.persist.StateMachine<java.lang.String,java.lang.String> ) { org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.CompositePersistStateChangeListener . void ( org.springframework.statemachine.recipes.persist.State<java.lang.String,java.lang.String> , org.springframework.statemachine.recipes.persist.Message<java.lang.String> , org.springframework.statemachine.recipes.persist.Transition<java.lang.String,java.lang.String> , org.springframework.statemachine.recipes.persist.StateMachine<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.persist.State<java.lang.String,java.lang.String> , Message < java.lang.String > org.springframework.statemachine.recipes.persist.Message<java.lang.String> , Transition < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.persist.Transition<java.lang.String,java.lang.String> , StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.persist.StateMachine<java.lang.String,java.lang.String> ) { for ( java.util.Iterator<org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.PersistStateChangeListener> < org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.PersistStateChangeListener > java.util.Iterator<org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.PersistStateChangeListener> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.PersistStateChangeListener> . boolean ( ) ;) { org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.PersistStateChangeListener org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.PersistStateChangeListener = java.util.Iterator<org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.PersistStateChangeListener> . org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.PersistStateChangeListener ( ) ; org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.PersistStateChangeListener . void ( org.springframework.statemachine.recipes.persist.State<java.lang.String,java.lang.String> , org.springframework.statemachine.recipes.persist.Message<java.lang.String> , org.springframework.statemachine.recipes.persist.Transition<java.lang.String,java.lang.String> , org.springframework.statemachine.recipes.persist.StateMachine<java.lang.String,java.lang.String> ) ; } }  <METHOD_END>
