<METHOD_START> @ Before public void void ( ) java.lang.Exception { MBeanServerFactoryBean org.springframework.integration.jmx.MBeanServerFactoryBean = new MBeanServerFactoryBean ( ) ; org.springframework.integration.jmx.MBeanServerFactoryBean . setLocateExistingServerIfPossible ( true ) ; org.springframework.integration.jmx.MBeanServerFactoryBean . afterPropertiesSet ( ) ; this . javax.management.MBeanServer = org.springframework.integration.jmx.MBeanServerFactoryBean . getObject ( ) ; this . javax.management.MBeanServer . javax.management.ObjectInstance ( new org.springframework.integration.jmx.OperationInvokingMessageHandlerTests.TestOps ( ) , ObjectNameManager . getInstance ( this . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { this . javax.management.MBeanServer . void ( ObjectNameManager . getInstance ( this . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.jmx.QueueChannel = new QueueChannel ( ) ; OperationInvokingMessageHandler org.springframework.integration.jmx.OperationInvokingMessageHandler = new OperationInvokingMessageHandler ( ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setServer ( this . javax.management.MBeanServer ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setObjectName ( this . java.lang.String ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setOutputChannel ( org.springframework.integration.jmx.QueueChannel ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setOperationName ( STRING ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.jmx.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . handleMessage ( org.springframework.integration.jmx.Message<> ) ; Message < ? > org.springframework.integration.jmx.Message<?> = org.springframework.integration.jmx.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jmx.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jmx.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.jmx.QueueChannel = new QueueChannel ( ) ; OperationInvokingMessageHandler org.springframework.integration.jmx.OperationInvokingMessageHandler = new OperationInvokingMessageHandler ( ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setServer ( this . javax.management.MBeanServer ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setObjectName ( this . java.lang.String ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setOutputChannel ( org.springframework.integration.jmx.QueueChannel ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setOperationName ( STRING ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . afterPropertiesSet ( ) ; Message < ? > org.springframework.integration.jmx.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . handleMessage ( org.springframework.integration.jmx.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.jmx.QueueChannel = new QueueChannel ( ) ; OperationInvokingMessageHandler org.springframework.integration.jmx.OperationInvokingMessageHandler = new OperationInvokingMessageHandler ( ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setServer ( this . javax.management.MBeanServer ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setObjectName ( this . java.lang.String ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setOutputChannel ( org.springframework.integration.jmx.QueueChannel ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setOperationName ( STRING ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.jmx.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . handleMessage ( org.springframework.integration.jmx.Message<> ) ; Message < ? > org.springframework.integration.jmx.Message<?> = org.springframework.integration.jmx.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jmx.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jmx.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.jmx.QueueChannel = new QueueChannel ( ) ; OperationInvokingMessageHandler org.springframework.integration.jmx.OperationInvokingMessageHandler = new OperationInvokingMessageHandler ( ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setServer ( this . javax.management.MBeanServer ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setObjectName ( this . java.lang.String ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setOutputChannel ( org.springframework.integration.jmx.QueueChannel ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setOperationName ( STRING ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . afterPropertiesSet ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Arrays . java.util.List<java.lang.Object> ( new java.lang.Object [] { STRING , new java.lang.Integer ( NUMBER ) } ) ; Message < ? > org.springframework.integration.jmx.Message<?> = MessageBuilder . withPayload ( java.util.List<java.lang.Object> ) . build ( ) ; org.springframework.integration.jmx.OperationInvokingMessageHandler . handleMessage ( org.springframework.integration.jmx.Message<> ) ; Message < ? > org.springframework.integration.jmx.Message<?> = org.springframework.integration.jmx.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jmx.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jmx.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.lang.String + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Integer java.lang.Integer ) { return java.lang.String + java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { }  <METHOD_END>
