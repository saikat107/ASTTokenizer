<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.aop.target.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( this . org.springframework.aop.target.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.aop.target.Resource ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.aop.target.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SideEffectBean org.springframework.aop.target.SideEffectBean = ( SideEffectBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( int , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; org.springframework.aop.target.SideEffectBean . doWork ( ) ; assertEquals ( int + NUMBER , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; org.springframework.aop.target.SideEffectBean = ( SideEffectBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.aop.target.SideEffectBean . doWork ( ) ; assertEquals ( int + NUMBER , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SideEffectBean org.springframework.aop.target.SideEffectBean = ( SideEffectBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; SideEffectBean org.springframework.aop.target.SideEffectBean = ( SideEffectBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; SideEffectBean org.springframework.aop.target.SideEffectBean = ( SideEffectBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.aop.target.SideEffectBean . getCount ( ) , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; org.springframework.aop.target.SideEffectBean . doWork ( ) ; assertEquals ( int + NUMBER , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; HotSwappableTargetSource org.springframework.aop.target.HotSwappableTargetSource = ( HotSwappableTargetSource ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.aop.target.HotSwappableTargetSource . swap ( org.springframework.aop.target.SideEffectBean ) ; assertEquals ( STRING , org.springframework.aop.target.SideEffectBean , java.lang.Object ) ; assertEquals ( NUMBER , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; org.springframework.aop.target.SideEffectBean . doWork ( ) ; assertEquals ( NUMBER , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; org.springframework.aop.target.HotSwappableTargetSource . swap ( org.springframework.aop.target.SideEffectBean ) ; assertEquals ( org.springframework.aop.target.SideEffectBean . getCount ( ) , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.IllegalArgumentException java.lang.IllegalArgumentException ( java.lang.Object java.lang.Object ) { HotSwappableTargetSource org.springframework.aop.target.HotSwappableTargetSource = ( HotSwappableTargetSource ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; java.lang.IllegalArgumentException java.lang.IllegalArgumentException = null ; try { org.springframework.aop.target.HotSwappableTargetSource . swap ( java.lang.Object ) ; fail ( STRING + java.lang.Object + STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { java.lang.IllegalArgumentException = java.lang.IllegalArgumentException ; } void ( ) ; return java.lang.IllegalArgumentException ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.IllegalArgumentException java.lang.IllegalArgumentException = java.lang.IllegalArgumentException ( null ) ; assertTrue ( java.lang.IllegalArgumentException . java.lang.String ( ) . int ( STRING ) != - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SerializablePerson org.springframework.aop.target.SerializablePerson = new SerializablePerson ( ) ; org.springframework.aop.target.SerializablePerson . setName ( STRING ) ; SerializablePerson org.springframework.aop.target.SerializablePerson = new SerializablePerson ( ) ; org.springframework.aop.target.SerializablePerson . setName ( STRING ) ; HotSwappableTargetSource org.springframework.aop.target.HotSwappableTargetSource = new HotSwappableTargetSource ( org.springframework.aop.target.SerializablePerson ) ; ProxyFactory org.springframework.aop.target.ProxyFactory = new ProxyFactory ( ) ; org.springframework.aop.target.ProxyFactory . addInterface ( Person .class ) ; org.springframework.aop.target.ProxyFactory . setTargetSource ( org.springframework.aop.target.HotSwappableTargetSource ) ; org.springframework.aop.target.ProxyFactory . addAdvisor ( new DefaultPointcutAdvisor ( new SerializableNopInterceptor ( ) ) ) ; Person org.springframework.aop.target.Person = ( Person ) org.springframework.aop.target.ProxyFactory . getProxy ( ) ; assertEquals ( org.springframework.aop.target.SerializablePerson . getName ( ) , org.springframework.aop.target.Person . getName ( ) ) ; org.springframework.aop.target.HotSwappableTargetSource . swap ( org.springframework.aop.target.SerializablePerson ) ; assertEquals ( org.springframework.aop.target.SerializablePerson . getName ( ) , org.springframework.aop.target.Person . getName ( ) ) ; org.springframework.aop.target.Person = ( Person ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.aop.target.Person ) ; org.springframework.aop.target.HotSwappableTargetSource = ( HotSwappableTargetSource ) ( ( Advised ) org.springframework.aop.target.Person ) . getTargetSource ( ) ; assertEquals ( org.springframework.aop.target.SerializablePerson . getName ( ) , org.springframework.aop.target.Person . getName ( ) ) ; org.springframework.aop.target.HotSwappableTargetSource . swap ( org.springframework.aop.target.SerializablePerson ) ; assertEquals ( org.springframework.aop.target.SerializablePerson . getName ( ) , org.springframework.aop.target.Person . getName ( ) ) ; }  <METHOD_END>
