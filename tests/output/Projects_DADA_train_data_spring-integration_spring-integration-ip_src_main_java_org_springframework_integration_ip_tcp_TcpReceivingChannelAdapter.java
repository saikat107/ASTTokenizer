<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.integration.ip.tcp.Message<?> ) { boolean boolean = org.springframework.integration.ip.tcp.Message<> instanceof ErrorMessage ; try { if ( this . boolean ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + org.springframework.integration.ip.tcp.Message<> . toString ( ) ) ; } } else { if ( boolean ) { return false ; } this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; try { sendMessage ( org.springframework.integration.ip.tcp.Message<> ) ; } finally { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; } } return false ; } finally { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.ip.tcp.Message<> . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID ) ; if ( java.lang.String != null && ! boolean && this . boolean ) { if ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory != null ) { if ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory . getSender ( ) == null ) { this . org.springframework.integration.ip.tcp.AbstractConnectionFactory . closeConnection ( java.lang.String ) ; } } else { this . org.springframework.integration.ip.tcp.AbstractConnectionFactory . closeConnection ( java.lang.String ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. onInit ( ) ; if ( this . boolean ) { Assert . notNull ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory , STRING ) ; Assert . isTrue ( ! this . org.springframework.integration.ip.tcp.AbstractConnectionFactory . isSingleUse ( ) , STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. doStart ( ) ; if ( ! this . boolean ) { this . boolean = true ; this . boolean = false ; if ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory != null ) { this . org.springframework.integration.ip.tcp.AbstractConnectionFactory . start ( ) ; } if ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory != null ) { this . org.springframework.integration.ip.tcp.AbstractConnectionFactory . start ( ) ; } if ( this . boolean ) { ClientModeConnectionManager org.springframework.integration.ip.tcp.ClientModeConnectionManager = new ClientModeConnectionManager ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory ) ; this . org.springframework.integration.ip.tcp.ClientModeConnectionManager = org.springframework.integration.ip.tcp.ClientModeConnectionManager ; Assert . state ( this . getTaskScheduler ( ) != null , STRING ) ; this . java.util.concurrent.ScheduledFuture<?> = this . getTaskScheduler ( ) . scheduleAtFixedRate ( org.springframework.integration.ip.tcp.ClientModeConnectionManager , this . long ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. doStop ( ) ; if ( this . boolean ) { this . boolean = false ; if ( this . java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; } this . org.springframework.integration.ip.tcp.ClientModeConnectionManager = null ; if ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory != null ) { this . org.springframework.integration.ip.tcp.AbstractConnectionFactory . stop ( ) ; } if ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory != null ) { this . org.springframework.integration.ip.tcp.AbstractConnectionFactory . stop ( ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( AbstractConnectionFactory org.springframework.integration.ip.tcp.AbstractConnectionFactory ) { if ( org.springframework.integration.ip.tcp.AbstractConnectionFactory instanceof AbstractClientConnectionFactory ) { this . org.springframework.integration.ip.tcp.AbstractConnectionFactory = org.springframework.integration.ip.tcp.AbstractConnectionFactory ; } else { this . org.springframework.integration.ip.tcp.AbstractConnectionFactory = org.springframework.integration.ip.tcp.AbstractConnectionFactory ; } org.springframework.integration.ip.tcp.AbstractConnectionFactory . registerListener ( this ) ; this . boolean = org.springframework.integration.ip.tcp.AbstractConnectionFactory . isSingleUse ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { if ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory == null ) { return false ; } if ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory instanceof AbstractServerConnectionFactory ) { return ( ( AbstractServerConnectionFactory ) this . org.springframework.integration.ip.tcp.AbstractConnectionFactory ) . isListening ( ) ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.ip.tcp.ConnectionFactory org.springframework.integration.ip.tcp.ConnectionFactory ( ) { return this . org.springframework.integration.ip.tcp.AbstractConnectionFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.ip.tcp.ConnectionFactory org.springframework.integration.ip.tcp.ConnectionFactory ( ) { return this . org.springframework.integration.ip.tcp.AbstractConnectionFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { if ( this . boolean && this . org.springframework.integration.ip.tcp.ClientModeConnectionManager != null ) { return this . org.springframework.integration.ip.tcp.ClientModeConnectionManager . isConnected ( ) ; } else { return false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean && this . boolean && this . org.springframework.integration.ip.tcp.ClientModeConnectionManager != null ) { this . org.springframework.integration.ip.tcp.ClientModeConnectionManager . run ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { this . boolean = true ; return this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { this . stop ( ) ; return this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
