<METHOD_START> protected void ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> ) { this( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> , new ReactiveAdapterRegistry ( ) ); }  <METHOD_END>
<METHOD_START> protected void ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> , ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) { super( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ); Assert . notEmpty ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> , STRING ) ; Assert . notNull ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , STRING ) ; this . java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> = java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> ; this . java.util.List<org.springframework.web.reactive.result.method.annotation.MediaType> = java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> . stream ( ) . flatMap ( converter -> converter . getReadableMediaTypes ( ) . stream ( ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> ( ) { return this . java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , boolean boolean , BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { ResolvableType org.springframework.web.reactive.result.method.annotation.ResolvableType = ResolvableType . forMethodParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; ReactiveAdapter org.springframework.web.reactive.result.method.annotation.ReactiveAdapter = getAdapterRegistry ( ) . getAdapter ( org.springframework.web.reactive.result.method.annotation.ResolvableType . resolve ( ) ) ; ResolvableType org.springframework.web.reactive.result.method.annotation.ResolvableType = ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapter != null ? org.springframework.web.reactive.result.method.annotation.ResolvableType . getGeneric ( NUMBER ) : org.springframework.web.reactive.result.method.annotation.ResolvableType ) ; ServerHttpRequest org.springframework.web.reactive.result.method.annotation.ServerHttpRequest = org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getRequest ( ) ; ServerHttpResponse org.springframework.web.reactive.result.method.annotation.ServerHttpResponse = org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getResponse ( ) ; MediaType org.springframework.web.reactive.result.method.annotation.MediaType = org.springframework.web.reactive.result.method.annotation.ServerHttpRequest . getHeaders ( ) . getContentType ( ) ; if ( org.springframework.web.reactive.result.method.annotation.MediaType == null ) { org.springframework.web.reactive.result.method.annotation.MediaType = MediaType . APPLICATION_OCTET_STREAM ; } for ( HttpMessageReader < ? > org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?> : java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> ( ) ) { if ( org.springframework.web.reactive.result.method.annotation.HttpMessageReader<> . canRead ( org.springframework.web.reactive.result.method.annotation.ResolvableType , org.springframework.web.reactive.result.method.annotation.MediaType ) ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; if ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapter != null && org.springframework.web.reactive.result.method.annotation.ReactiveAdapter . isMultiValue ( ) ) { Flux < ? > org.springframework.web.reactive.result.method.annotation.Flux<?> = org.springframework.web.reactive.result.method.annotation.HttpMessageReader<> . read ( org.springframework.web.reactive.result.method.annotation.ResolvableType , org.springframework.web.reactive.result.method.annotation.ResolvableType , org.springframework.web.reactive.result.method.annotation.ServerHttpRequest , org.springframework.web.reactive.result.method.annotation.ServerHttpResponse , java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.web.reactive.result.method.annotation.Flux<?> = org.springframework.web.reactive.result.method.annotation.Flux<> . onErrorResumeWith ( ex -> Flux . error ( getReadError ( bodyParameter , ex ) ) ) ; if ( boolean || ! org.springframework.web.reactive.result.method.annotation.ReactiveAdapter . supportsEmpty ( ) ) { org.springframework.web.reactive.result.method.annotation.Flux<?> = org.springframework.web.reactive.result.method.annotation.Flux<> . switchIfEmpty ( Flux . error ( org.springframework.web.reactive.result.method.annotation.ServerWebInputException ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ) ; } java.lang.Object [] java.lang.Object[] = java.lang.Object[] ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; if ( java.lang.Object[] != null ) { org.springframework.web.reactive.result.method.annotation.Flux<?> = org.springframework.web.reactive.result.method.annotation.Flux<> . doOnNext ( target -> validate ( target , hints , bodyParameter , bindingContext , exchange ) ) ; } return Mono . just ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapter . fromPublisher ( org.springframework.web.reactive.result.method.annotation.Flux<> ) ) ; } else { Mono < ? > org.springframework.web.reactive.result.method.annotation.Mono<?> = org.springframework.web.reactive.result.method.annotation.HttpMessageReader<> . readMono ( org.springframework.web.reactive.result.method.annotation.ResolvableType , org.springframework.web.reactive.result.method.annotation.ResolvableType , org.springframework.web.reactive.result.method.annotation.ServerHttpRequest , org.springframework.web.reactive.result.method.annotation.ServerHttpResponse , java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.web.reactive.result.method.annotation.Mono<?> = org.springframework.web.reactive.result.method.annotation.Mono<> . otherwise ( ex -> Mono . error ( getReadError ( bodyParameter , ex ) ) ) ; if ( boolean || ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapter != null && ! org.springframework.web.reactive.result.method.annotation.ReactiveAdapter . supportsEmpty ( ) ) ) { org.springframework.web.reactive.result.method.annotation.Mono<?> = org.springframework.web.reactive.result.method.annotation.Mono<> . otherwiseIfEmpty ( Mono . error ( org.springframework.web.reactive.result.method.annotation.ServerWebInputException ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ) ; } java.lang.Object [] java.lang.Object[] = java.lang.Object[] ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; if ( java.lang.Object[] != null ) { org.springframework.web.reactive.result.method.annotation.Mono<?> = org.springframework.web.reactive.result.method.annotation.Mono<> . doOnNext ( target -> validate ( target , hints , bodyParameter , bindingContext , exchange ) ) ; } if ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapter != null ) { return Mono . just ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapter . fromPublisher ( org.springframework.web.reactive.result.method.annotation.Mono<> ) ) ; } else { return Mono . from ( org.springframework.web.reactive.result.method.annotation.Mono<> ) ; } } } } return Mono . error ( new UnsupportedMediaTypeStatusException ( org.springframework.web.reactive.result.method.annotation.MediaType , this . java.util.List<org.springframework.web.reactive.result.method.annotation.MediaType> ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.ServerWebInputException org.springframework.web.reactive.result.method.annotation.ServerWebInputException ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , java.lang.Throwable java.lang.Throwable ) { return new ServerWebInputException ( STRING , org.springframework.web.reactive.result.method.annotation.MethodParameter , java.lang.Throwable instanceof ResponseStatusException ? java.lang.Throwable . java.lang.Throwable ( ) : java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.ServerWebInputException org.springframework.web.reactive.result.method.annotation.ServerWebInputException ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { return new ServerWebInputException ( STRING + org.springframework.web.reactive.result.method.annotation.MethodParameter . getMethod ( ) . toGenericString ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object [] java.lang.Object[] ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterAnnotations ( ) ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ) { Validated org.springframework.web.reactive.result.method.annotation.Validated = AnnotationUtils . getAnnotation ( java.lang.annotation.Annotation , Validated .class ) ; if ( org.springframework.web.reactive.result.method.annotation.Validated != null || java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) . boolean ( STRING ) ) { java.lang.Object java.lang.Object = ( org.springframework.web.reactive.result.method.annotation.Validated != null ? org.springframework.web.reactive.result.method.annotation.Validated . value ( ) : AnnotationUtils . getValue ( java.lang.annotation.Annotation ) ) ; return ( java.lang.Object instanceof java.lang.Object [] ? ( java.lang.Object [] ) java.lang.Object : new java.lang.Object [] { java.lang.Object } ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.Object [] java.lang.Object[] , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { java.lang.String java.lang.String = Conventions . getVariableNameForParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; WebExchangeDataBinder org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder = org.springframework.web.reactive.result.method.annotation.BindingContext . createDataBinder ( org.springframework.web.reactive.result.method.annotation.ServerWebExchange , java.lang.Object , java.lang.String ) ; org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder . validate ( java.lang.Object[] ) ; if ( org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder . getBindingResult ( ) . hasErrors ( ) ) { throw new WebExchangeBindException ( org.springframework.web.reactive.result.method.annotation.MethodParameter , org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder . getBindingResult ( ) ) ; } }  <METHOD_END>
