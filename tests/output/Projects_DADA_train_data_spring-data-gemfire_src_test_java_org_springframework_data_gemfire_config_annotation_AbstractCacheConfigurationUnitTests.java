<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration = new org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < T > T T ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws java.lang.Exception { MethodInvoker org.springframework.data.gemfire.config.annotation.MethodInvoker = new MethodInvoker ( ) ; org.springframework.data.gemfire.config.annotation.MethodInvoker . setTargetObject ( java.lang.Object ) ; org.springframework.data.gemfire.config.annotation.MethodInvoker . setTargetMethod ( java.lang.String ) ; org.springframework.data.gemfire.config.annotation.MethodInvoker . prepare ( ) ; return ( T ) org.springframework.data.gemfire.config.annotation.MethodInvoker . invoke ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata = mock ( AnnotationMetadata .class ) ; PdxSerializer org.springframework.data.gemfire.config.annotation.PdxSerializer = mock ( PdxSerializer .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Boolean . java.lang.Boolean ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Boolean . java.lang.Boolean ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Boolean . java.lang.Boolean ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; when ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata . hasAnnotation ( eq ( EnablePdx .class . java.lang.String ( ) ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata . getAnnotationAttributes ( eq ( EnablePdx .class . java.lang.String ( ) ) ) ) . thenReturn ( java.util.Map<java.lang.String,java.lang.Object> ) ; when ( org.springframework.data.gemfire.config.annotation.BeanFactory . containsBean ( eq ( STRING ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.config.annotation.BeanFactory . getBean ( eq ( STRING ) , eq ( PdxSerializer .class ) ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.PdxSerializer ) ; org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . setBeanFactory ( org.springframework.data.gemfire.config.annotation.BeanFactory ) ; org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . configurePdx ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata ) ; assertThat ( org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . pdxDiskStoreName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . pdxIgnoreUnreadFields ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . pdxPersistent ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . pdxReadSerialized ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . pdxSerializer ( ) ) . isEqualTo ( org.springframework.data.gemfire.config.annotation.PdxSerializer ) ; verify ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata , times ( NUMBER ) ) . hasAnnotation ( eq ( EnablePdx .class . java.lang.String ( ) ) ) ; verify ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata , times ( NUMBER ) ) . getAnnotationAttributes ( eq ( EnablePdx .class . java.lang.String ( ) ) ) ; verify ( org.springframework.data.gemfire.config.annotation.BeanFactory , times ( NUMBER ) ) . containsBean ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.config.annotation.BeanFactory , times ( NUMBER ) ) . getBean ( eq ( STRING ) , eq ( PdxSerializer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata = mock ( AnnotationMetadata .class ) ; when ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata . hasAnnotation ( anyString ( ) ) ) . thenReturn ( false ) ; org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . configurePdx ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata ) ; assertThat ( org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . pdxDiskStoreName ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . pdxIgnoreUnreadFields ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . pdxPersistent ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . pdxReadSerialized ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . pdxSerializer ( ) ) . isNull ( ) ; verify ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata , times ( NUMBER ) ) . hasAnnotation ( eq ( EnablePdx .class . java.lang.String ( ) ) ) ; verifyNoMoreInteractions ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PdxSerializer org.springframework.data.gemfire.config.annotation.PdxSerializer = mock ( PdxSerializer .class ) ; when ( org.springframework.data.gemfire.config.annotation.BeanFactory . containsBean ( anyString ( ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.config.annotation.BeanFactory . getBean ( anyString ( ) , eq ( PdxSerializer .class ) ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.PdxSerializer ) ; org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . setBeanFactory ( org.springframework.data.gemfire.config.annotation.BeanFactory ) ; PdxSerializer org.springframework.data.gemfire.config.annotation.PdxSerializer = org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . resolvePdxSerializer ( STRING ) ; assertThat ( org.springframework.data.gemfire.config.annotation.PdxSerializer ) . isEqualTo ( org.springframework.data.gemfire.config.annotation.PdxSerializer ) ; verify ( org.springframework.data.gemfire.config.annotation.BeanFactory , times ( NUMBER ) ) . containsBean ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.config.annotation.BeanFactory , times ( NUMBER ) ) . getBean ( eq ( STRING ) , eq ( PdxSerializer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PdxSerializer org.springframework.data.gemfire.config.annotation.PdxSerializer = mock ( PdxSerializer .class ) ; when ( org.springframework.data.gemfire.config.annotation.BeanFactory . containsBean ( anyString ( ) ) ) . thenReturn ( false ) ; org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . setBeanFactory ( org.springframework.data.gemfire.config.annotation.BeanFactory ) ; org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . setPdxSerializer ( org.springframework.data.gemfire.config.annotation.PdxSerializer ) ; PdxSerializer org.springframework.data.gemfire.config.annotation.PdxSerializer = org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . resolvePdxSerializer ( STRING ) ; assertThat ( org.springframework.data.gemfire.config.annotation.PdxSerializer ) . isEqualTo ( org.springframework.data.gemfire.config.annotation.PdxSerializer ) ; verify ( org.springframework.data.gemfire.config.annotation.BeanFactory , times ( NUMBER ) ) . containsBean ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.config.annotation.BeanFactory , never ( ) ) . getBean ( anyString ( ) , eq ( PdxSerializer .class ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.config.annotation.PdxSerializer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractCacheConfiguration org.springframework.data.gemfire.config.annotation.AbstractCacheConfiguration = spy ( this . org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration ) ; MappingPdxSerializer org.springframework.data.gemfire.config.annotation.MappingPdxSerializer = mock ( MappingPdxSerializer .class ) ; when ( org.springframework.data.gemfire.config.annotation.BeanFactory . containsBean ( anyString ( ) ) ) . thenReturn ( false ) ; doReturn ( org.springframework.data.gemfire.config.annotation.MappingPdxSerializer ) . when ( org.springframework.data.gemfire.config.annotation.AbstractCacheConfiguration ) . newPdxSerializer ( ) ; org.springframework.data.gemfire.config.annotation.AbstractCacheConfiguration . setBeanFactory ( org.springframework.data.gemfire.config.annotation.BeanFactory ) ; PdxSerializer org.springframework.data.gemfire.config.annotation.PdxSerializer = org.springframework.data.gemfire.config.annotation.AbstractCacheConfiguration . resolvePdxSerializer ( STRING ) ; assertThat ( org.springframework.data.gemfire.config.annotation.PdxSerializer ) . isEqualTo ( org.springframework.data.gemfire.config.annotation.MappingPdxSerializer ) ; verify ( org.springframework.data.gemfire.config.annotation.BeanFactory , times ( NUMBER ) ) . containsBean ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.config.annotation.BeanFactory , never ( ) ) . getBean ( anyString ( ) , eq ( PdxSerializer .class ) ) ; verify ( org.springframework.data.gemfire.config.annotation.AbstractCacheConfiguration , times ( NUMBER ) ) . newPdxSerializer ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableBeanFactory org.springframework.data.gemfire.config.annotation.ConfigurableBeanFactory = mock ( ConfigurableBeanFactory .class ) ; ConversionService org.springframework.data.gemfire.config.annotation.ConversionService = mock ( ConversionService .class ) ; GemfireMappingContext org.springframework.data.gemfire.config.annotation.GemfireMappingContext = mock ( GemfireMappingContext .class ) ; when ( org.springframework.data.gemfire.config.annotation.ConfigurableBeanFactory . getConversionService ( ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.ConversionService ) ; org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . setBeanFactory ( org.springframework.data.gemfire.config.annotation.ConfigurableBeanFactory ) ; org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . setMappingContext ( org.springframework.data.gemfire.config.annotation.GemfireMappingContext ) ; MappingPdxSerializer org.springframework.data.gemfire.config.annotation.MappingPdxSerializer = org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . newPdxSerializer ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.MappingPdxSerializer ) . isNotNull ( ) ; assertThat ( ( java.lang.Object ) java.lang.Object ( org.springframework.data.gemfire.config.annotation.MappingPdxSerializer , STRING ) ) . isEqualTo ( org.springframework.data.gemfire.config.annotation.ConversionService ) ; assertThat ( ( java.lang.Object ) java.lang.Object ( org.springframework.data.gemfire.config.annotation.MappingPdxSerializer , STRING ) ) . isEqualTo ( org.springframework.data.gemfire.config.annotation.GemfireMappingContext ) ; verify ( org.springframework.data.gemfire.config.annotation.ConfigurableBeanFactory , times ( NUMBER ) ) . getConversionService ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.config.annotation.ConversionService ) ; verifyZeroInteractions ( org.springframework.data.gemfire.config.annotation.GemfireMappingContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . setBeanFactory ( org.springframework.data.gemfire.config.annotation.BeanFactory ) ; MappingPdxSerializer org.springframework.data.gemfire.config.annotation.MappingPdxSerializer = org.springframework.data.gemfire.config.annotation.AbstractCacheConfigurationUnitTests.TestCacheConfiguration . newPdxSerializer ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.MappingPdxSerializer ) . isNotNull ( ) ; assertThat ( ( java.lang.Object ) java.lang.Object ( org.springframework.data.gemfire.config.annotation.MappingPdxSerializer , STRING ) ) . isInstanceOf ( ConversionService .class ) ; assertThat ( ( java.lang.Object ) java.lang.Object ( org.springframework.data.gemfire.config.annotation.MappingPdxSerializer , STRING ) ) . isInstanceOf ( GemfireMappingContext .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class java.lang.Class ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T extends org.springframework.data.gemfire.config.annotation.CacheFactoryBean > T T ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
