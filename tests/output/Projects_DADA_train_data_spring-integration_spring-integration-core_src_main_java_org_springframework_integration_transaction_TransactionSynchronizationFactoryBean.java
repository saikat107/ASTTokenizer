<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.transaction.BeanFactory ) throws org.springframework.integration.transaction.BeansException { this . org.springframework.integration.transaction.BeanFactory = org.springframework.integration.transaction.BeanFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.transaction.TransactionSynchronizationFactoryBean org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( DestinationResolver < MessageChannel > org.springframework.integration.transaction.DestinationResolver<org.springframework.integration.transaction.MessageChannel> ) { Assert . notNull ( org.springframework.integration.transaction.DestinationResolver<org.springframework.integration.transaction.MessageChannel> , STRING ) ; this . org.springframework.integration.transaction.DestinationResolver<org.springframework.integration.transaction.MessageChannel> = org.springframework.integration.transaction.DestinationResolver<org.springframework.integration.transaction.MessageChannel> ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.transaction.TransactionSynchronizationFactoryBean org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( java.lang.String java.lang.String ) { return org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( java.lang.String , this . org.springframework.integration.transaction.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.transaction.TransactionSynchronizationFactoryBean org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . state ( StringUtils . hasText ( java.lang.String ) || StringUtils . hasText ( java.lang.String ) , STRING ) ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . org.springframework.integration.transaction.MessageChannel = null ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.transaction.TransactionSynchronizationFactoryBean org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( MessageChannel org.springframework.integration.transaction.MessageChannel ) { return org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( this . java.lang.String , org.springframework.integration.transaction.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.transaction.TransactionSynchronizationFactoryBean org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( java.lang.String java.lang.String , MessageChannel org.springframework.integration.transaction.MessageChannel ) { Assert . state ( StringUtils . hasText ( java.lang.String ) || org.springframework.integration.transaction.MessageChannel != null , STRING ) ; this . java.lang.String = java.lang.String ; this . org.springframework.integration.transaction.MessageChannel = org.springframework.integration.transaction.MessageChannel ; this . java.lang.String = null ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.transaction.TransactionSynchronizationFactoryBean org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( java.lang.String java.lang.String ) { return org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( java.lang.String , this . org.springframework.integration.transaction.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.transaction.TransactionSynchronizationFactoryBean org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . state ( StringUtils . hasText ( java.lang.String ) || StringUtils . hasText ( java.lang.String ) , STRING ) ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . org.springframework.integration.transaction.MessageChannel = null ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.transaction.TransactionSynchronizationFactoryBean org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( MessageChannel org.springframework.integration.transaction.MessageChannel ) { return org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( this . java.lang.String , org.springframework.integration.transaction.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.transaction.TransactionSynchronizationFactoryBean org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( java.lang.String java.lang.String , MessageChannel org.springframework.integration.transaction.MessageChannel ) { Assert . state ( StringUtils . hasText ( java.lang.String ) || org.springframework.integration.transaction.MessageChannel != null , STRING ) ; this . java.lang.String = java.lang.String ; this . org.springframework.integration.transaction.MessageChannel = org.springframework.integration.transaction.MessageChannel ; this . java.lang.String = null ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.transaction.TransactionSynchronizationFactoryBean org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( java.lang.String java.lang.String ) { return org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( java.lang.String , this . org.springframework.integration.transaction.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.transaction.TransactionSynchronizationFactoryBean org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . state ( StringUtils . hasText ( java.lang.String ) || StringUtils . hasText ( java.lang.String ) , STRING ) ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . org.springframework.integration.transaction.MessageChannel = null ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.transaction.TransactionSynchronizationFactoryBean org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( MessageChannel org.springframework.integration.transaction.MessageChannel ) { return org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( this . java.lang.String , org.springframework.integration.transaction.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.transaction.TransactionSynchronizationFactoryBean org.springframework.integration.transaction.TransactionSynchronizationFactoryBean ( java.lang.String java.lang.String , MessageChannel org.springframework.integration.transaction.MessageChannel ) { Assert . state ( StringUtils . hasText ( java.lang.String ) || org.springframework.integration.transaction.MessageChannel != null , STRING ) ; this . java.lang.String = java.lang.String ; this . org.springframework.integration.transaction.MessageChannel = org.springframework.integration.transaction.MessageChannel ; this . java.lang.String = null ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory ( ) java.lang.Exception { if ( this . org.springframework.integration.transaction.DestinationResolver<org.springframework.integration.transaction.MessageChannel> == null ) { this . org.springframework.integration.transaction.DestinationResolver<org.springframework.integration.transaction.MessageChannel> = new BeanFactoryMessageChannelDestinationResolver ( this . org.springframework.integration.transaction.BeanFactory ) ; } ExpressionEvaluatingTransactionSynchronizationProcessor org.springframework.integration.transaction.ExpressionEvaluatingTransactionSynchronizationProcessor = new ExpressionEvaluatingTransactionSynchronizationProcessor ( ) ; if ( StringUtils . hasText ( this . java.lang.String ) ) { org.springframework.integration.transaction.ExpressionEvaluatingTransactionSynchronizationProcessor . setBeforeCommitExpression ( this . org.springframework.integration.transaction.SpelExpressionParser . parseExpression ( this . java.lang.String ) ) ; } if ( StringUtils . hasText ( this . java.lang.String ) ) { org.springframework.integration.transaction.ExpressionEvaluatingTransactionSynchronizationProcessor . setAfterCommitExpression ( this . org.springframework.integration.transaction.SpelExpressionParser . parseExpression ( this . java.lang.String ) ) ; } if ( StringUtils . hasText ( this . java.lang.String ) ) { org.springframework.integration.transaction.ExpressionEvaluatingTransactionSynchronizationProcessor . setAfterRollbackExpression ( this . org.springframework.integration.transaction.SpelExpressionParser . parseExpression ( this . java.lang.String ) ) ; } if ( StringUtils . hasText ( this . java.lang.String ) ) { this . org.springframework.integration.transaction.MessageChannel = this . org.springframework.integration.transaction.DestinationResolver<org.springframework.integration.transaction.MessageChannel> . resolveDestination ( this . java.lang.String ) ; } if ( this . org.springframework.integration.transaction.MessageChannel != null ) { org.springframework.integration.transaction.ExpressionEvaluatingTransactionSynchronizationProcessor . setBeforeCommitChannel ( this . org.springframework.integration.transaction.MessageChannel ) ; } if ( StringUtils . hasText ( this . java.lang.String ) ) { this . org.springframework.integration.transaction.MessageChannel = this . org.springframework.integration.transaction.DestinationResolver<org.springframework.integration.transaction.MessageChannel> . resolveDestination ( this . java.lang.String ) ; } if ( this . org.springframework.integration.transaction.MessageChannel != null ) { org.springframework.integration.transaction.ExpressionEvaluatingTransactionSynchronizationProcessor . setAfterCommitChannel ( this . org.springframework.integration.transaction.MessageChannel ) ; } if ( StringUtils . hasText ( this . java.lang.String ) ) { this . org.springframework.integration.transaction.MessageChannel = this . org.springframework.integration.transaction.DestinationResolver<org.springframework.integration.transaction.MessageChannel> . resolveDestination ( this . java.lang.String ) ; } if ( this . org.springframework.integration.transaction.MessageChannel != null ) { org.springframework.integration.transaction.ExpressionEvaluatingTransactionSynchronizationProcessor . setAfterRollbackChannel ( this . org.springframework.integration.transaction.MessageChannel ) ; } if ( this . org.springframework.integration.transaction.BeanFactory instanceof AutowireCapableBeanFactory ) { ( ( AutowireCapableBeanFactory ) this . org.springframework.integration.transaction.BeanFactory ) . initializeBean ( org.springframework.integration.transaction.ExpressionEvaluatingTransactionSynchronizationProcessor , null ) ; } return new DefaultTransactionSynchronizationFactory ( org.springframework.integration.transaction.ExpressionEvaluatingTransactionSynchronizationProcessor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return DefaultTransactionSynchronizationFactory .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
