<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.groovy.ApplicationContext . getBeanNamesForType ( Calculator .class ) ) . contains ( STRING ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.groovy.ApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; Calculator org.springframework.scripting.groovy.Calculator = ( Calculator ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; Messenger org.springframework.scripting.groovy.Messenger = ( Messenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertFalse ( STRING , AopUtils . isAopProxy ( org.springframework.scripting.groovy.Calculator ) ) ; assertFalse ( STRING , AopUtils . isAopProxy ( org.springframework.scripting.groovy.Messenger ) ) ; assertFalse ( STRING , org.springframework.scripting.groovy.Calculator instanceof Refreshable ) ; assertFalse ( STRING , org.springframework.scripting.groovy.Messenger instanceof Refreshable ) ; assertEquals ( org.springframework.scripting.groovy.Calculator , org.springframework.scripting.groovy.Calculator ) ; assertEquals ( org.springframework.scripting.groovy.Messenger , org.springframework.scripting.groovy.Messenger ) ; assertTrue ( ! org.springframework.scripting.groovy.Messenger . equals ( org.springframework.scripting.groovy.Calculator ) ) ; assertTrue ( org.springframework.scripting.groovy.Messenger . hashCode ( ) != org.springframework.scripting.groovy.Calculator . hashCode ( ) ) ; assertTrue ( ! org.springframework.scripting.groovy.Messenger . toString ( ) . equals ( org.springframework.scripting.groovy.Calculator . toString ( ) ) ) ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , java.lang.String , org.springframework.scripting.groovy.Messenger . getMessage ( ) ) ; assertTrue ( org.springframework.scripting.groovy.ApplicationContext . getBeansOfType ( Calculator .class ) . values ( ) . contains ( org.springframework.scripting.groovy.Calculator ) ) ; assertTrue ( org.springframework.scripting.groovy.ApplicationContext . getBeansOfType ( Messenger .class ) . values ( ) . contains ( org.springframework.scripting.groovy.Messenger ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.groovy.ApplicationContext . getBeanNamesForType ( Calculator .class ) ) . contains ( STRING ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.groovy.ApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; Calculator org.springframework.scripting.groovy.Calculator = ( Calculator ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; Messenger org.springframework.scripting.groovy.Messenger = ( Messenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertFalse ( STRING , AopUtils . isAopProxy ( org.springframework.scripting.groovy.Calculator ) ) ; assertFalse ( STRING , AopUtils . isAopProxy ( org.springframework.scripting.groovy.Messenger ) ) ; assertFalse ( STRING , org.springframework.scripting.groovy.Calculator instanceof Refreshable ) ; assertFalse ( STRING , org.springframework.scripting.groovy.Messenger instanceof Refreshable ) ; assertEquals ( org.springframework.scripting.groovy.Calculator , org.springframework.scripting.groovy.Calculator ) ; assertEquals ( org.springframework.scripting.groovy.Messenger , org.springframework.scripting.groovy.Messenger ) ; assertTrue ( ! org.springframework.scripting.groovy.Messenger . equals ( org.springframework.scripting.groovy.Calculator ) ) ; assertTrue ( org.springframework.scripting.groovy.Messenger . hashCode ( ) != org.springframework.scripting.groovy.Calculator . hashCode ( ) ) ; assertTrue ( ! org.springframework.scripting.groovy.Messenger . toString ( ) . equals ( org.springframework.scripting.groovy.Calculator . toString ( ) ) ) ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , java.lang.String , org.springframework.scripting.groovy.Messenger . getMessage ( ) ) ; assertTrue ( org.springframework.scripting.groovy.ApplicationContext . getBeansOfType ( Calculator .class ) . values ( ) . contains ( org.springframework.scripting.groovy.Calculator ) ) ; assertTrue ( org.springframework.scripting.groovy.ApplicationContext . getBeansOfType ( Messenger .class ) . values ( ) . contains ( org.springframework.scripting.groovy.Messenger ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; ConfigurableMessenger org.springframework.scripting.groovy.ConfigurableMessenger = ( ConfigurableMessenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; ConfigurableMessenger org.springframework.scripting.groovy.ConfigurableMessenger = ( ConfigurableMessenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertFalse ( STRING , AopUtils . isAopProxy ( org.springframework.scripting.groovy.ConfigurableMessenger ) ) ; assertFalse ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger instanceof Refreshable ) ; assertNotSame ( org.springframework.scripting.groovy.ConfigurableMessenger , org.springframework.scripting.groovy.ConfigurableMessenger ) ; assertSame ( org.springframework.scripting.groovy.ConfigurableMessenger . getClass ( ) , org.springframework.scripting.groovy.ConfigurableMessenger . getClass ( ) ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; org.springframework.scripting.groovy.ConfigurableMessenger . setMessage ( STRING ) ; org.springframework.scripting.groovy.ConfigurableMessenger . setMessage ( STRING ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; ConfigurableMessenger org.springframework.scripting.groovy.ConfigurableMessenger = ( ConfigurableMessenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; ConfigurableMessenger org.springframework.scripting.groovy.ConfigurableMessenger = ( ConfigurableMessenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertFalse ( STRING , AopUtils . isAopProxy ( org.springframework.scripting.groovy.ConfigurableMessenger ) ) ; assertFalse ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger instanceof Refreshable ) ; assertNotSame ( org.springframework.scripting.groovy.ConfigurableMessenger , org.springframework.scripting.groovy.ConfigurableMessenger ) ; assertSame ( org.springframework.scripting.groovy.ConfigurableMessenger . getClass ( ) , org.springframework.scripting.groovy.ConfigurableMessenger . getClass ( ) ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; org.springframework.scripting.groovy.ConfigurableMessenger . setMessage ( STRING ) ; org.springframework.scripting.groovy.ConfigurableMessenger . setMessage ( STRING ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.groovy.ApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; Messenger org.springframework.scripting.groovy.Messenger = ( Messenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertFalse ( STRING , AopUtils . isAopProxy ( org.springframework.scripting.groovy.Messenger ) ) ; assertFalse ( STRING , org.springframework.scripting.groovy.Messenger instanceof Refreshable ) ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , java.lang.String , org.springframework.scripting.groovy.Messenger . getMessage ( ) ) ; assertTrue ( org.springframework.scripting.groovy.ApplicationContext . getBeansOfType ( Messenger .class ) . values ( ) . contains ( org.springframework.scripting.groovy.Messenger ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.groovy.ApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; Messenger org.springframework.scripting.groovy.Messenger = ( Messenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertFalse ( STRING , AopUtils . isAopProxy ( org.springframework.scripting.groovy.Messenger ) ) ; assertFalse ( STRING , org.springframework.scripting.groovy.Messenger instanceof Refreshable ) ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , java.lang.String , org.springframework.scripting.groovy.Messenger . getMessage ( ) ) ; assertTrue ( org.springframework.scripting.groovy.ApplicationContext . getBeansOfType ( Messenger .class ) . values ( ) . contains ( org.springframework.scripting.groovy.Messenger ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.groovy.ApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; Messenger org.springframework.scripting.groovy.Messenger = ( Messenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertFalse ( STRING , AopUtils . isAopProxy ( org.springframework.scripting.groovy.Messenger ) ) ; assertFalse ( STRING , org.springframework.scripting.groovy.Messenger instanceof Refreshable ) ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , java.lang.String , org.springframework.scripting.groovy.Messenger . getMessage ( ) ) ; assertTrue ( org.springframework.scripting.groovy.ApplicationContext . getBeansOfType ( Messenger .class ) . values ( ) . contains ( org.springframework.scripting.groovy.Messenger ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.groovy.ApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; Messenger org.springframework.scripting.groovy.Messenger = ( Messenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertFalse ( STRING , AopUtils . isAopProxy ( org.springframework.scripting.groovy.Messenger ) ) ; assertFalse ( STRING , org.springframework.scripting.groovy.Messenger instanceof Refreshable ) ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , java.lang.String , org.springframework.scripting.groovy.Messenger . getMessage ( ) ) ; assertTrue ( org.springframework.scripting.groovy.ApplicationContext . getBeansOfType ( Messenger .class ) . values ( ) . contains ( org.springframework.scripting.groovy.Messenger ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; Messenger org.springframework.scripting.groovy.Messenger = ( Messenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.scripting.groovy.Messenger ) ) ; assertTrue ( STRING , org.springframework.scripting.groovy.Messenger instanceof Refreshable ) ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , java.lang.String , org.springframework.scripting.groovy.Messenger . getMessage ( ) ) ; Refreshable org.springframework.scripting.groovy.Refreshable = ( Refreshable ) org.springframework.scripting.groovy.Messenger ; org.springframework.scripting.groovy.Refreshable . refresh ( ) ; assertEquals ( STRING , java.lang.String , org.springframework.scripting.groovy.Messenger . getMessage ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.scripting.groovy.Refreshable . getRefreshCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; ConfigurableMessenger org.springframework.scripting.groovy.ConfigurableMessenger = ( ConfigurableMessenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; ConfigurableMessenger org.springframework.scripting.groovy.ConfigurableMessenger = ( ConfigurableMessenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.scripting.groovy.ConfigurableMessenger ) ) ; assertTrue ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger instanceof Refreshable ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; org.springframework.scripting.groovy.ConfigurableMessenger . setMessage ( STRING ) ; org.springframework.scripting.groovy.ConfigurableMessenger . setMessage ( STRING ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; Refreshable org.springframework.scripting.groovy.Refreshable = ( Refreshable ) org.springframework.scripting.groovy.ConfigurableMessenger ; org.springframework.scripting.groovy.Refreshable . refresh ( ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.scripting.groovy.Refreshable . getRefreshCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { new ClassPathXmlApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( NestedRuntimeException org.springframework.scripting.groovy.NestedRuntimeException ) { assertTrue ( STRING + org.springframework.scripting.groovy.NestedRuntimeException , org.springframework.scripting.groovy.NestedRuntimeException . contains ( ScriptCompilationException .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ScriptSource org.springframework.scripting.groovy.ScriptSource = mock ( ScriptSource .class ) ; java.lang.String java.lang.String = STRING ; given ( org.springframework.scripting.groovy.ScriptSource . getScriptAsString ( ) ) . willReturn ( java.lang.String ) ; given ( org.springframework.scripting.groovy.ScriptSource . suggestedClassName ( ) ) . willReturn ( STRING ) ; GroovyScriptFactory org.springframework.scripting.groovy.GroovyScriptFactory = new GroovyScriptFactory ( ScriptFactoryPostProcessor . INLINE_SCRIPT_PREFIX + java.lang.String ) ; try { org.springframework.scripting.groovy.GroovyScriptFactory . getScriptedObject ( org.springframework.scripting.groovy.ScriptSource ) ; fail ( STRING ) ; } catch ( ScriptCompilationException org.springframework.scripting.groovy.ScriptCompilationException ) { assertTrue ( org.springframework.scripting.groovy.ScriptCompilationException . contains ( java.lang.NoSuchMethodException .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ScriptSource org.springframework.scripting.groovy.ScriptSource = mock ( ScriptSource .class ) ; java.lang.String java.lang.String = STRING ; given ( org.springframework.scripting.groovy.ScriptSource . getScriptAsString ( ) ) . willReturn ( java.lang.String ) ; given ( org.springframework.scripting.groovy.ScriptSource . suggestedClassName ( ) ) . willReturn ( STRING ) ; GroovyScriptFactory org.springframework.scripting.groovy.GroovyScriptFactory = new GroovyScriptFactory ( ScriptFactoryPostProcessor . INLINE_SCRIPT_PREFIX + java.lang.String ) ; assertEquals ( STRING , org.springframework.scripting.groovy.GroovyScriptFactory . getScriptedObject ( org.springframework.scripting.groovy.ScriptSource ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; Messenger org.springframework.scripting.groovy.Messenger = ( Messenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertNotNull ( org.springframework.scripting.groovy.Messenger ) ; assertEquals ( STRING , org.springframework.scripting.groovy.Messenger . getMessage ( ) ) ; GroovyObject org.springframework.scripting.groovy.GroovyObject = ( GroovyObject ) org.springframework.scripting.groovy.Messenger ; assertNotNull ( org.springframework.scripting.groovy.GroovyObject ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING , Messenger .class ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { new GroovyScriptFactory ( null ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { new GroovyScriptFactory ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { new GroovyScriptFactory ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.scripting.groovy.BeanCreationException ) { assertTrue ( org.springframework.scripting.groovy.BeanCreationException . contains ( java.io.FileNotFoundException .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ScriptSource org.springframework.scripting.groovy.ScriptSource = mock ( ScriptSource .class ) ; given ( org.springframework.scripting.groovy.ScriptSource . getScriptAsString ( ) ) . willReturn ( STRING ) ; given ( org.springframework.scripting.groovy.ScriptSource . suggestedClassName ( ) ) . willReturn ( STRING ) ; GroovyScriptFactory org.springframework.scripting.groovy.GroovyScriptFactory = new GroovyScriptFactory ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.scripting.groovy.GroovyScriptFactory . getScriptedObject ( org.springframework.scripting.groovy.ScriptSource ) ; assertNotNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GroovyScriptFactory org.springframework.scripting.groovy.GroovyScriptFactory = new GroovyScriptFactory ( STRING ) ; try { org.springframework.scripting.groovy.GroovyScriptFactory . getScriptedObject ( null ) ; fail ( STRING ) ; } catch ( java.lang.NullPointerException java.lang.NullPointerException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.scripting.groovy.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; Messenger org.springframework.scripting.groovy.Messenger = ( Messenger ) org.springframework.scripting.groovy.ClassPathXmlApplicationContext . getBean ( STRING ) ; CallCounter org.springframework.scripting.groovy.CallCounter = ( CallCounter ) org.springframework.scripting.groovy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.scripting.groovy.Messenger ) ) ; assertFalse ( org.springframework.scripting.groovy.Messenger instanceof Refreshable ) ; assertEquals ( NUMBER , org.springframework.scripting.groovy.CallCounter . getCalls ( ) ) ; assertEquals ( STRING , org.springframework.scripting.groovy.Messenger . getMessage ( ) ) ; assertEquals ( NUMBER , org.springframework.scripting.groovy.CallCounter . getCalls ( ) ) ; org.springframework.scripting.groovy.ClassPathXmlApplicationContext . close ( ) ; assertEquals ( - NUMBER , org.springframework.scripting.groovy.CallCounter . getCalls ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; ConfigurableMessenger org.springframework.scripting.groovy.ConfigurableMessenger = ( ConfigurableMessenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; ConfigurableMessenger org.springframework.scripting.groovy.ConfigurableMessenger = ( ConfigurableMessenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertNotSame ( org.springframework.scripting.groovy.ConfigurableMessenger , org.springframework.scripting.groovy.ConfigurableMessenger ) ; assertSame ( org.springframework.scripting.groovy.ConfigurableMessenger . getClass ( ) , org.springframework.scripting.groovy.ConfigurableMessenger . getClass ( ) ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; org.springframework.scripting.groovy.ConfigurableMessenger . setMessage ( STRING ) ; org.springframework.scripting.groovy.ConfigurableMessenger . setMessage ( STRING ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.scripting.groovy.ConfigurableMessenger . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.scripting.groovy.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; BeanDefinition org.springframework.scripting.groovy.BeanDefinition = org.springframework.scripting.groovy.ClassPathXmlApplicationContext . getBeanFactory ( ) . getBeanDefinition ( STRING ) ; assertTrue ( ObjectUtils . containsElement ( org.springframework.scripting.groovy.BeanDefinition . getDependsOn ( ) , STRING ) ) ; Calculator org.springframework.scripting.groovy.Calculator = ( Calculator ) org.springframework.scripting.groovy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertNotNull ( org.springframework.scripting.groovy.Calculator ) ; assertFalse ( org.springframework.scripting.groovy.Calculator instanceof Refreshable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.groovy.ApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; Messenger org.springframework.scripting.groovy.Messenger = ( Messenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; CallCounter org.springframework.scripting.groovy.CallCounter = ( CallCounter ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.scripting.groovy.Messenger ) ) ; assertTrue ( org.springframework.scripting.groovy.Messenger instanceof Refreshable ) ; assertEquals ( NUMBER , org.springframework.scripting.groovy.CallCounter . getCalls ( ) ) ; assertEquals ( STRING , org.springframework.scripting.groovy.Messenger . getMessage ( ) ) ; assertEquals ( NUMBER , org.springframework.scripting.groovy.CallCounter . getCalls ( ) ) ; assertTrue ( org.springframework.scripting.groovy.ApplicationContext . getBeansOfType ( Messenger .class ) . values ( ) . contains ( org.springframework.scripting.groovy.Messenger ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.groovy.ApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; Messenger org.springframework.scripting.groovy.Messenger = ( Messenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.scripting.groovy.Messenger ) ) ; assertTrue ( org.springframework.scripting.groovy.Messenger instanceof Refreshable ) ; assertEquals ( STRING , org.springframework.scripting.groovy.Messenger . getMessage ( ) ) ; assertTrue ( org.springframework.scripting.groovy.ApplicationContext . getBeansOfType ( ConcreteMessenger .class ) . values ( ) . contains ( org.springframework.scripting.groovy.Messenger ) ) ; assertNotNull ( AnnotationUtils . findAnnotation ( org.springframework.scripting.groovy.Messenger . getClass ( ) , Component .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; } catch ( BeanCreationException org.springframework.scripting.groovy.BeanCreationException ) { assertTrue ( org.springframework.scripting.groovy.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; java.util.Map<?,org.springframework.scripting.groovy.Messenger> < ? , Messenger > java.util.Map<?,org.springframework.scripting.groovy.Messenger> = org.springframework.scripting.groovy.ApplicationContext . getBeansOfType ( Messenger .class ) ; assertEquals ( NUMBER , java.util.Map<,org.springframework.scripting.groovy.Messenger> . size ( ) ) ; assertTrue ( org.springframework.scripting.groovy.ApplicationContext . getBean ( MyBytecodeProcessor .class ) . processed . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.groovy.ApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; Messenger org.springframework.scripting.groovy.Messenger = ( Messenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.scripting.groovy.Messenger ) ) ; assertEquals ( STRING , org.springframework.scripting.groovy.Messenger . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.groovy.ApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; Messenger org.springframework.scripting.groovy.Messenger = ( Messenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.scripting.groovy.Messenger ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.groovy.ApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; Messenger org.springframework.scripting.groovy.Messenger = ( Messenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.scripting.groovy.Messenger ) ) ; assertTrue ( org.springframework.scripting.groovy.Messenger instanceof Refreshable ) ; assertEquals ( STRING , org.springframework.scripting.groovy.Messenger . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.groovy.ApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; Messenger org.springframework.scripting.groovy.Messenger = ( Messenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.scripting.groovy.Messenger ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.groovy.ApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; Messenger org.springframework.scripting.groovy.Messenger = ( Messenger ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.scripting.groovy.Messenger ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; TestBean org.springframework.scripting.groovy.TestBean = ( TestBean ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; ContextScriptBean org.springframework.scripting.groovy.ContextScriptBean = ( ContextScriptBean ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.scripting.groovy.ContextScriptBean . getName ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.scripting.groovy.ContextScriptBean . getAge ( ) ) ; assertEquals ( org.springframework.scripting.groovy.TestBean , org.springframework.scripting.groovy.ContextScriptBean . getTestBean ( ) ) ; assertEquals ( org.springframework.scripting.groovy.ApplicationContext , org.springframework.scripting.groovy.ContextScriptBean . getApplicationContext ( ) ) ; ContextScriptBean org.springframework.scripting.groovy.ContextScriptBean = ( ContextScriptBean ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertEquals ( org.springframework.scripting.groovy.TestBean , org.springframework.scripting.groovy.ContextScriptBean . getTestBean ( ) ) ; assertEquals ( org.springframework.scripting.groovy.ApplicationContext , org.springframework.scripting.groovy.ContextScriptBean . getApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { try { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) ; Calculator org.springframework.scripting.groovy.Calculator = ( Calculator ) org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; org.springframework.scripting.groovy.Calculator . add ( NUMBER , NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( STRING , java.lang.IllegalStateException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; java.lang.Object java.lang.Object = org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertTrue ( java.lang.Object instanceof FactoryBean ) ; java.lang.Object java.lang.Object = org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.scripting.groovy.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.groovy.GroovyScriptFactoryTests> ( ) ) ; java.lang.Object java.lang.Object = org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertTrue ( java.lang.Object instanceof FactoryBean ) ; java.lang.Object java.lang.Object = org.springframework.scripting.groovy.ApplicationContext . getBean ( STRING ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GroovyObject org.springframework.scripting.groovy.GroovyObject ) { DelegatingMetaClass org.springframework.scripting.groovy.DelegatingMetaClass = new DelegatingMetaClass ( org.springframework.scripting.groovy.GroovyObject . getMetaClass ( ) ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] ) { if ( java.lang.String . boolean ( STRING ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } else { return super. invokeMethod ( java.lang.Object , java.lang.String , java.lang.Object[] ) ; } } } ; org.springframework.scripting.groovy.DelegatingMetaClass . initialize ( ) ; org.springframework.scripting.groovy.GroovyObject . setMetaClass ( org.springframework.scripting.groovy.DelegatingMetaClass ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] ) { if ( java.lang.String . boolean ( STRING ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } else { return super. invokeMethod ( java.lang.Object , java.lang.String , java.lang.Object[] ) ; } }  <METHOD_END>
