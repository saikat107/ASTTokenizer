<METHOD_START> void ( StompCommand org.springframework.messaging.simp.stomp.StompCommand , java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) { super( org.springframework.messaging.simp.stomp.StompCommand . getMessageType ( ) , java.util.Map<java.lang.String,java.util.List<java.lang.String>> ); setHeader ( java.lang.String , org.springframework.messaging.simp.stomp.StompCommand ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> void ( Message < ? > org.springframework.messaging.simp.stomp.Message<?> ) { super( org.springframework.messaging.simp.stomp.Message<> ); void ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( SimpMessageType . HEARTBEAT , null ); }  <METHOD_END>
<METHOD_START> void void ( ) { if ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( ) == null ) { return; } java.lang.String java.lang.String = getFirstNativeHeader ( java.lang.String ) ; if ( java.lang.String != null ) { super. setDestination ( java.lang.String ) ; } java.lang.String = getFirstNativeHeader ( java.lang.String ) ; if ( java.lang.String != null ) { super. setContentType ( MimeTypeUtils . parseMimeType ( java.lang.String ) ) ; } StompCommand org.springframework.messaging.simp.stomp.StompCommand = org.springframework.messaging.simp.stomp.StompCommand ( ) ; if ( StompCommand . MESSAGE . equals ( org.springframework.messaging.simp.stomp.StompCommand ) ) { java.lang.String = getFirstNativeHeader ( java.lang.String ) ; if ( java.lang.String != null ) { super. setSubscriptionId ( java.lang.String ) ; } } else if ( StompCommand . SUBSCRIBE . equals ( org.springframework.messaging.simp.stomp.StompCommand ) || StompCommand . UNSUBSCRIBE . equals ( org.springframework.messaging.simp.stomp.StompCommand ) ) { java.lang.String = getFirstNativeHeader ( java.lang.String ) ; if ( java.lang.String != null ) { super. setSubscriptionId ( java.lang.String ) ; } } else if ( StompCommand . CONNECT . equals ( org.springframework.messaging.simp.stomp.StompCommand ) ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> void void ( ) { if ( getDestination ( ) != null ) { setNativeHeader ( java.lang.String , getDestination ( ) ) ; } if ( getContentType ( ) != null ) { setNativeHeader ( java.lang.String , getContentType ( ) . toString ( ) ) ; } void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.messaging.simp.stomp.MessageHeaderAccessor org.springframework.messaging.simp.stomp.MessageHeaderAccessor ( Message < ? > org.springframework.messaging.simp.stomp.Message<?> ) { return org.springframework.messaging.simp.stomp.StompHeaderAccessor ( org.springframework.messaging.simp.stomp.Message<> ) ; }  <METHOD_END>
<METHOD_START> java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( ) { @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > ) getHeader ( NATIVE_HEADERS ) ; return ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> != null ? java.util.Map<java.lang.String,java.util.List<java.lang.String>> : java.util.Collections . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.stomp.StompCommand org.springframework.messaging.simp.stomp.StompCommand ( ) { if ( getMessageType ( ) != SimpMessageType . MESSAGE ) { throw new java.lang.IllegalStateException ( STRING + getMessageType ( ) ) ; } if ( org.springframework.messaging.simp.stomp.StompCommand ( ) == null ) { setHeader ( java.lang.String , StompCommand . SEND ) ; } else if ( ! org.springframework.messaging.simp.stomp.StompCommand ( ) . equals ( StompCommand . SEND ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.messaging.simp.stomp.StompCommand ( ) ) ; } return org.springframework.messaging.simp.stomp.StompCommand ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( getMessageType ( ) != SimpMessageType . MESSAGE ) { throw new java.lang.IllegalStateException ( STRING + getMessageType ( ) ) ; } StompCommand org.springframework.messaging.simp.stomp.StompCommand = org.springframework.messaging.simp.stomp.StompCommand ( ) ; if ( ( org.springframework.messaging.simp.stomp.StompCommand == null ) || StompCommand . SEND . equals ( org.springframework.messaging.simp.stomp.StompCommand ) ) { setHeader ( java.lang.String , StompCommand . MESSAGE ) ; } else if ( ! StompCommand . MESSAGE . equals ( org.springframework.messaging.simp.stomp.StompCommand ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.messaging.simp.stomp.StompCommand ) ; } void ( ) ; if ( java.lang.String ( ) == null ) { java.lang.String java.lang.String = getSessionId ( ) + '-' + java.util.concurrent.atomic.AtomicLong . long ( ) ; setNativeHeader ( java.lang.String , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.stomp.StompCommand org.springframework.messaging.simp.stomp.StompCommand ( ) { return ( StompCommand ) getHeader ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( SimpMessageType . HEARTBEAT == getMessageType ( ) ) ; }  <METHOD_END>
<METHOD_START> public long [] long[] ( ) { java.lang.String java.lang.String = getFirstNativeHeader ( java.lang.String ) ; java.lang.String [] java.lang.String[] = StringUtils . split ( java.lang.String , STRING ) ; if ( java.lang.String[] == null ) { return java.util.Arrays . long[] ( long[] , NUMBER ) ; } return new long [] { java.lang.Long . java.lang.Long ( java.lang.String[] [ NUMBER ] ) , java.lang.Long . java.lang.Long ( java.lang.String[] [ NUMBER ] ) } ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { setNativeHeader ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { java.lang.String java.lang.String = getFirstNativeHeader ( java.lang.String ) ; return ( java.lang.String != null ? StringUtils . commaDelimitedListToSet ( java.lang.String ) : java.util.Collections . java.util.Set<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { setNativeHeader ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return getFirstNativeHeader ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { super. setDestination ( java.lang.String ) ; setNativeHeader ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MimeType org.springframework.messaging.simp.stomp.MimeType ) { super. setContentType ( org.springframework.messaging.simp.stomp.MimeType ) ; setNativeHeader ( java.lang.String , org.springframework.messaging.simp.stomp.MimeType . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { super. setSubscriptionId ( java.lang.String ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { java.lang.String java.lang.String = getSubscriptionId ( ) ; if ( java.lang.String != null ) { if ( org.springframework.messaging.simp.stomp.StompCommand ( ) != null && StompCommand . MESSAGE . equals ( org.springframework.messaging.simp.stomp.StompCommand ( ) ) ) { setNativeHeader ( java.lang.String , java.lang.String ) ; } else { SimpMessageType org.springframework.messaging.simp.stomp.SimpMessageType = getMessageType ( ) ; if ( SimpMessageType . SUBSCRIBE . equals ( org.springframework.messaging.simp.stomp.SimpMessageType ) || SimpMessageType . UNSUBSCRIBE . equals ( org.springframework.messaging.simp.stomp.SimpMessageType ) ) { setNativeHeader ( java.lang.String , java.lang.String ) ; } } } }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { if ( containsNativeHeader ( java.lang.String ) ) { return java.lang.Integer . java.lang.Integer ( getFirstNativeHeader ( java.lang.String ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { setNativeHeader ( java.lang.String , java.lang.String . java.lang.String ( int ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long , long long ) { setNativeHeader ( java.lang.String , long + STRING + long ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { setNativeHeader ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return getFirstNativeHeader ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { setNativeHeader ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return getFirstNativeHeader ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { setNativeHeader ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return getFirstNativeHeader ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { setNativeHeader ( java.lang.String , java.lang.String ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { java.lang.String java.lang.String = getFirstNativeHeader ( java.lang.String ) ; if ( java.lang.String != null && ! STRING . boolean ( java.lang.String ) ) { setHeader ( java.lang.String , new org.springframework.messaging.simp.stomp.StompHeaderAccessor.StompPasscode ( java.lang.String ) ) ; setNativeHeader ( java.lang.String , STRING ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { org.springframework.messaging.simp.stomp.StompHeaderAccessor.StompPasscode org.springframework.messaging.simp.stomp.StompHeaderAccessor.StompPasscode = ( org.springframework.messaging.simp.stomp.StompHeaderAccessor.StompPasscode ) getHeader ( java.lang.String ) ; return ( org.springframework.messaging.simp.stomp.StompHeaderAccessor.StompPasscode != null ? org.springframework.messaging.simp.stomp.StompHeaderAccessor.StompPasscode . java.lang.String : null ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { setNativeHeader ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return getFirstNativeHeader ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { setNativeHeader ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return getFirstNativeHeader ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return getFirstNativeHeader ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { setNativeHeader ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return getFirstNativeHeader ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { setNativeHeader ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return getFirstNativeHeader ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { setNativeHeader ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { if ( StompCommand . SUBSCRIBE . equals ( org.springframework.messaging.simp.stomp.StompCommand ( ) ) ) { return STRING + getDestination ( ) + STRING + getSubscriptionId ( ) + java.lang.String ( ) ; } else if ( StompCommand . UNSUBSCRIBE . equals ( org.springframework.messaging.simp.stomp.StompCommand ( ) ) ) { return STRING + getSubscriptionId ( ) + java.lang.String ( ) ; } else if ( StompCommand . SEND . equals ( org.springframework.messaging.simp.stomp.StompCommand ( ) ) ) { return STRING + getDestination ( ) + java.lang.String ( ) + java.lang.String ( java.lang.Object ) ; } else if ( StompCommand . CONNECT . equals ( org.springframework.messaging.simp.stomp.StompCommand ( ) ) ) { return STRING + ( getUser ( ) != null ? STRING + getUser ( ) . getName ( ) : STRING ) + java.lang.String ( ) ; } else if ( StompCommand . CONNECTED . equals ( org.springframework.messaging.simp.stomp.StompCommand ( ) ) ) { return STRING + java.util.Arrays . java.lang.String ( long[] ( ) ) + java.lang.String ( ) ; } else if ( StompCommand . DISCONNECT . equals ( org.springframework.messaging.simp.stomp.StompCommand ( ) ) ) { return STRING + ( java.lang.String ( ) != null ? STRING + java.lang.String ( ) : STRING ) + java.lang.String ( ) ; } else { return java.lang.String ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { if ( boolean ( ) ) { return STRING + getSessionId ( ) ; } StompCommand org.springframework.messaging.simp.stomp.StompCommand = org.springframework.messaging.simp.stomp.StompCommand ( ) ; if ( org.springframework.messaging.simp.stomp.StompCommand == null ) { return super. getDetailedLogMessage ( java.lang.Object ) ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.messaging.simp.stomp.StompCommand . name ( ) ) . append ( STRING ) . append ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( ) ) . append ( java.lang.String ( ) ) ; if ( getUser ( ) != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( getUser ( ) . getName ( ) ) ; } if ( org.springframework.messaging.simp.stomp.StompCommand . isBodyAllowed ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.Object ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return STRING + getSessionId ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) != byte [] .class ) { throw new java.lang.IllegalStateException ( STRING + ClassUtils . getQualifiedName ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; } byte [] byte[] = ( byte [] ) java.lang.Object ; java.lang.String java.lang.String = ( getContentType ( ) != null ? STRING + getContentType ( ) . toString ( ) : STRING ) ; if ( byte[] . int == NUMBER || getContentType ( ) == null || ! isReadableContentType ( ) ) { return java.lang.String ; } java.nio.charset.Charset java.nio.charset.Charset = getContentType ( ) . getCharset ( ) ; java.nio.charset.Charset = ( java.nio.charset.Charset != null ? java.nio.charset.Charset : java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; return ( byte[] . int < NUMBER ) ? java.lang.String + STRING + new java.lang.String ( byte[] , java.nio.charset.Charset ) : java.lang.String + STRING + new java.lang.String ( java.util.Arrays . byte[] ( byte[] , NUMBER ) , java.nio.charset.Charset ) + STRING ; }  <METHOD_END>
<METHOD_START> public static org.springframework.messaging.simp.stomp.StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor ( StompCommand org.springframework.messaging.simp.stomp.StompCommand ) { return new org.springframework.messaging.simp.stomp.StompHeaderAccessor ( org.springframework.messaging.simp.stomp.StompCommand , null ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.messaging.simp.stomp.StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor ( StompCommand org.springframework.messaging.simp.stomp.StompCommand , java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) { return new org.springframework.messaging.simp.stomp.StompHeaderAccessor ( org.springframework.messaging.simp.stomp.StompCommand , java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.messaging.simp.stomp.StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor ( ) { return new org.springframework.messaging.simp.stomp.StompHeaderAccessor ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.messaging.simp.stomp.StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor ( Message < ? > org.springframework.messaging.simp.stomp.Message<?> ) { return new org.springframework.messaging.simp.stomp.StompHeaderAccessor ( org.springframework.messaging.simp.stomp.Message<> ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.messaging.simp.stomp.StompCommand org.springframework.messaging.simp.stomp.StompCommand ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return ( StompCommand ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { org.springframework.messaging.simp.stomp.StompHeaderAccessor.StompPasscode org.springframework.messaging.simp.stomp.StompHeaderAccessor.StompPasscode = ( org.springframework.messaging.simp.stomp.StompHeaderAccessor.StompPasscode ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; return ( org.springframework.messaging.simp.stomp.StompHeaderAccessor.StompPasscode != null ? org.springframework.messaging.simp.stomp.StompHeaderAccessor.StompPasscode . java.lang.String : null ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Integer java.lang.Integer ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.String ) ; return ( ! CollectionUtils . isEmpty ( java.util.List<java.lang.String> ) ? java.lang.Integer . java.lang.Integer ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) : null ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
