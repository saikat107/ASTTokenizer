<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new DelegatingIntroductionInterceptor ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.aop.support.TestBean = new TestBean ( ) ; assertTrue ( ! ( org.springframework.aop.support.TestBean instanceof TimeStamped ) ) ; ProxyFactory org.springframework.aop.support.ProxyFactory = new ProxyFactory ( org.springframework.aop.support.TestBean ) ; TimeStamped org.springframework.aop.support.TimeStamped = mock ( TimeStamped .class ) ; long long = NUMBER ; given ( org.springframework.aop.support.TimeStamped . getTimeStamp ( ) ) . willReturn ( long ) ; org.springframework.aop.support.ProxyFactory . addAdvisor ( NUMBER , new DefaultIntroductionAdvisor ( new DelegatingIntroductionInterceptor ( org.springframework.aop.support.TimeStamped ) ) ) ; TimeStamped org.springframework.aop.support.TimeStamped = ( TimeStamped ) org.springframework.aop.support.ProxyFactory . getProxy ( ) ; assertTrue ( org.springframework.aop.support.TimeStamped . getTimeStamp ( ) == long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.aop.support.TestBean = new TestBean ( ) ; assertTrue ( ! ( org.springframework.aop.support.TestBean instanceof org.springframework.aop.support.DelegatingIntroductionInterceptorTests.SubTimeStamped ) ) ; ProxyFactory org.springframework.aop.support.ProxyFactory = new ProxyFactory ( org.springframework.aop.support.TestBean ) ; TimeStamped org.springframework.aop.support.TimeStamped = mock ( org.springframework.aop.support.DelegatingIntroductionInterceptorTests.SubTimeStamped .class ) ; long long = NUMBER ; given ( org.springframework.aop.support.TimeStamped . getTimeStamp ( ) ) . willReturn ( long ) ; org.springframework.aop.support.ProxyFactory . addAdvisor ( NUMBER , new DefaultIntroductionAdvisor ( new DelegatingIntroductionInterceptor ( org.springframework.aop.support.TimeStamped ) , org.springframework.aop.support.DelegatingIntroductionInterceptorTests.SubTimeStamped .class ) ) ; org.springframework.aop.support.DelegatingIntroductionInterceptorTests.SubTimeStamped org.springframework.aop.support.DelegatingIntroductionInterceptorTests.SubTimeStamped = ( org.springframework.aop.support.DelegatingIntroductionInterceptorTests.SubTimeStamped ) org.springframework.aop.support.ProxyFactory . getProxy ( ) ; assertTrue ( org.springframework.aop.support.DelegatingIntroductionInterceptorTests.SubTimeStamped . getTimeStamp ( ) == long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.aop.support.TestBean = new TestBean ( ) ; assertTrue ( ! ( org.springframework.aop.support.TestBean instanceof TimeStamped ) ) ; ProxyFactory org.springframework.aop.support.ProxyFactory = new ProxyFactory ( org.springframework.aop.support.TestBean ) ; TimeStamped org.springframework.aop.support.TimeStamped = mock ( org.springframework.aop.support.DelegatingIntroductionInterceptorTests.SubTimeStamped .class ) ; long long = NUMBER ; given ( org.springframework.aop.support.TimeStamped . getTimeStamp ( ) ) . willReturn ( long ) ; org.springframework.aop.support.ProxyFactory . addAdvisor ( NUMBER , new DefaultIntroductionAdvisor ( new DelegatingIntroductionInterceptor ( org.springframework.aop.support.TimeStamped ) , TimeStamped .class ) ) ; TimeStamped org.springframework.aop.support.TimeStamped = ( TimeStamped ) org.springframework.aop.support.ProxyFactory . getProxy ( ) ; assertTrue ( ! ( org.springframework.aop.support.TimeStamped instanceof org.springframework.aop.support.DelegatingIntroductionInterceptorTests.SubTimeStamped ) ) ; assertTrue ( org.springframework.aop.support.TimeStamped . getTimeStamp ( ) == long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final long long = NUMBER ; class Tester implements TimeStamped , org.springframework.aop.support.DelegatingIntroductionInterceptorTests.ITester { @ java.lang.Override public void void ( ) java.lang.Exception {			} @ java.lang.Override public long long ( ) { return long ; } } DelegatingIntroductionInterceptor org.springframework.aop.support.DelegatingIntroductionInterceptor = new DelegatingIntroductionInterceptor ( new Tester ( ) ) ; TestBean org.springframework.aop.support.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.support.ProxyFactory = new ProxyFactory ( org.springframework.aop.support.TestBean ) ; org.springframework.aop.support.ProxyFactory . addAdvisor ( NUMBER , new DefaultIntroductionAdvisor ( org.springframework.aop.support.DelegatingIntroductionInterceptor ) ) ; TimeStamped org.springframework.aop.support.TimeStamped = ( TimeStamped ) org.springframework.aop.support.ProxyFactory . getProxy ( ) ; assertTrue ( org.springframework.aop.support.TimeStamped . getTimeStamp ( ) == long ) ; ( ( org.springframework.aop.support.DelegatingIntroductionInterceptorTests.ITester ) org.springframework.aop.support.TimeStamped ) . void ( ) ; ( ( ITestBean ) org.springframework.aop.support.TimeStamped ) . getAge ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return long ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final long long = NUMBER ; @ java.lang.SuppressWarnings ( STRING ) class TestII extends DelegatingIntroductionInterceptor implements TimeStamped , org.springframework.aop.support.DelegatingIntroductionInterceptorTests.ITester { @ java.lang.Override public void void ( ) java.lang.Exception {			} @ java.lang.Override public long long ( ) { return long ; } } DelegatingIntroductionInterceptor org.springframework.aop.support.DelegatingIntroductionInterceptor = new TestII ( ) ; TestBean org.springframework.aop.support.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.support.ProxyFactory = new ProxyFactory ( org.springframework.aop.support.TestBean ) ; IntroductionAdvisor org.springframework.aop.support.IntroductionAdvisor = new DefaultIntroductionAdvisor ( org.springframework.aop.support.DelegatingIntroductionInterceptor ) ; assertTrue ( org.springframework.aop.support.IntroductionAdvisor . isPerInstance ( ) ) ; org.springframework.aop.support.ProxyFactory . addAdvisor ( NUMBER , org.springframework.aop.support.IntroductionAdvisor ) ; TimeStamped org.springframework.aop.support.TimeStamped = ( TimeStamped ) org.springframework.aop.support.ProxyFactory . getProxy ( ) ; assertThat ( org.springframework.aop.support.TimeStamped , instanceOf ( TimeStamped .class ) ) ; assertTrue ( ! ( org.springframework.aop.support.TimeStamped instanceof MethodInterceptor ) ) ; assertTrue ( ! ( org.springframework.aop.support.TimeStamped instanceof IntroductionInterceptor ) ) ; assertTrue ( org.springframework.aop.support.TimeStamped . getTimeStamp ( ) == long ) ; ( ( org.springframework.aop.support.DelegatingIntroductionInterceptorTests.ITester ) org.springframework.aop.support.TimeStamped ) . void ( ) ; ( ( ITestBean ) org.springframework.aop.support.TimeStamped ) . getAge ( ) ; org.springframework.aop.support.DelegatingIntroductionInterceptor . suppressInterface ( TimeStamped .class ) ; org.springframework.aop.support.ProxyFactory = new ProxyFactory ( org.springframework.aop.support.TestBean ) ; org.springframework.aop.support.ProxyFactory . addAdvisor ( NUMBER , new DefaultIntroductionAdvisor ( org.springframework.aop.support.DelegatingIntroductionInterceptor ) ) ; java.lang.Object java.lang.Object = org.springframework.aop.support.ProxyFactory . getProxy ( ) ; assertTrue ( ! ( java.lang.Object instanceof TimeStamped ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return long ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.aop.support.TestBean = new TestBean ( ) ; assertTrue ( ! ( org.springframework.aop.support.TestBean instanceof TimeStamped ) ) ; ProxyFactory org.springframework.aop.support.ProxyFactory = new ProxyFactory ( org.springframework.aop.support.TestBean ) ; TimeStamped org.springframework.aop.support.TimeStamped = new org.springframework.aop.support.DelegatingIntroductionInterceptorTests.SerializableTimeStamped ( NUMBER ) ; org.springframework.aop.support.ProxyFactory . addAdvisor ( NUMBER , new DefaultIntroductionAdvisor ( new DelegatingIntroductionInterceptor ( org.springframework.aop.support.TimeStamped ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; } } ) ) ; TimeStamped org.springframework.aop.support.TimeStamped = ( TimeStamped ) org.springframework.aop.support.ProxyFactory . getProxy ( ) ; assertEquals ( NUMBER , org.springframework.aop.support.TimeStamped . getTimeStamp ( ) ) ; assertEquals ( org.springframework.aop.support.TestBean . toString ( ) , org.springframework.aop.support.TimeStamped . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { NestedTestBean org.springframework.aop.support.NestedTestBean = new NestedTestBean ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.aop.support.NestedTestBean . setCompany ( java.lang.String ) ; TestBean org.springframework.aop.support.TestBean = new TestBean ( ) { @ java.lang.Override public org.springframework.aop.support.ITestBean org.springframework.aop.support.ITestBean ( ) { return this ; } } ; ProxyFactory org.springframework.aop.support.ProxyFactory = new ProxyFactory ( org.springframework.aop.support.NestedTestBean ) ; org.springframework.aop.support.ProxyFactory . addAdvice ( new DelegatingIntroductionInterceptor ( org.springframework.aop.support.TestBean ) ) ; INestedTestBean org.springframework.aop.support.INestedTestBean = ( INestedTestBean ) org.springframework.aop.support.ProxyFactory . getProxy ( ) ; assertEquals ( java.lang.String , org.springframework.aop.support.INestedTestBean . getCompany ( ) ) ; ITestBean org.springframework.aop.support.ITestBean = ( ITestBean ) org.springframework.aop.support.INestedTestBean ; assertSame ( STRING , org.springframework.aop.support.ITestBean , org.springframework.aop.support.ITestBean . getSpouse ( ) ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.aop.support.ITestBean . getSpouse ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.support.ITestBean org.springframework.aop.support.ITestBean ( ) { return this ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SerializablePerson org.springframework.aop.support.SerializablePerson = new SerializablePerson ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.aop.support.SerializablePerson . setName ( STRING ) ; ProxyFactory org.springframework.aop.support.ProxyFactory = new ProxyFactory ( org.springframework.aop.support.SerializablePerson ) ; org.springframework.aop.support.ProxyFactory . addInterface ( Person .class ) ; long long = NUMBER ; TimeStamped org.springframework.aop.support.TimeStamped = new org.springframework.aop.support.DelegatingIntroductionInterceptorTests.SerializableTimeStamped ( long ) ; org.springframework.aop.support.ProxyFactory . addAdvisor ( new DefaultIntroductionAdvisor ( new DelegatingIntroductionInterceptor ( org.springframework.aop.support.TimeStamped ) ) ) ; org.springframework.aop.support.ProxyFactory . addAdvice ( new SerializableNopInterceptor ( ) ) ; Person org.springframework.aop.support.Person = ( Person ) org.springframework.aop.support.ProxyFactory . getProxy ( ) ; assertEquals ( java.lang.String , org.springframework.aop.support.Person . getName ( ) ) ; assertEquals ( long , ( ( TimeStamped ) org.springframework.aop.support.Person ) . getTimeStamp ( ) ) ; Person org.springframework.aop.support.Person = ( Person ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.aop.support.Person ) ; assertEquals ( java.lang.String , org.springframework.aop.support.Person . getName ( ) ) ; assertEquals ( long , ( ( TimeStamped ) org.springframework.aop.support.Person ) . getTimeStamp ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final long long = NUMBER ; @ java.lang.SuppressWarnings ( STRING ) class TestII extends DelegatingIntroductionInterceptor implements TimeStamped { @ java.lang.Override public long long ( ) { return long ; } } DelegatingIntroductionInterceptor org.springframework.aop.support.DelegatingIntroductionInterceptor = new TestII ( ) ; TestBean org.springframework.aop.support.TestBean = new org.springframework.aop.support.DelegatingIntroductionInterceptorTests.TargetClass ( long + NUMBER ) ; ProxyFactory org.springframework.aop.support.ProxyFactory = new ProxyFactory ( org.springframework.aop.support.TestBean ) ; org.springframework.aop.support.ProxyFactory . addAdvisor ( NUMBER , new DefaultIntroductionAdvisor ( org.springframework.aop.support.DelegatingIntroductionInterceptor ) ) ; TimeStamped org.springframework.aop.support.TimeStamped = ( TimeStamped ) org.springframework.aop.support.ProxyFactory . getProxy ( ) ; assertTrue ( org.springframework.aop.support.TimeStamped . getTimeStamp ( ) == long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return long ; }  <METHOD_END>
<METHOD_START> public void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return long ; }  <METHOD_END>
<METHOD_START> public void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return long ; }  <METHOD_END>
<METHOD_START> void void ( ) java.lang.Exception ;  <METHOD_END>
