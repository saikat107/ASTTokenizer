<METHOD_START> public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { Assert . hasText ( java.lang.String , STRING ) ; void ( java.lang.String ) ; Assert . doesNotContain ( java.lang.String , java.lang.String , STRING + java.lang.String + STRING ) ; Assert . doesNotContain ( java.lang.String , java.lang.String , STRING + java.lang.String + STRING ) ; Assert . doesNotContain ( java.lang.String , java.lang.String , STRING + java.lang.String + STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; void ( java.lang.String ) ; Assert . doesNotContain ( java.lang.String , java.lang.String , STRING + java.lang.String + STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; void ( java.lang.String ) ; Assert . doesNotContain ( java.lang.String , java.lang.String , STRING + java.lang.String + STRING ) ; Assert . doesNotContain ( java.lang.String , java.lang.String , STRING + java.lang.String + STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.interceptor.MethodInvocation , Log org.springframework.aop.interceptor.Log ) throws java.lang.Throwable { java.lang.String java.lang.String = ClassUtils . getQualifiedMethodName ( org.springframework.aop.interceptor.MethodInvocation . getMethod ( ) ) ; StopWatch org.springframework.aop.interceptor.StopWatch = new StopWatch ( java.lang.String ) ; java.lang.Object java.lang.Object = null ; boolean boolean = false ; try { org.springframework.aop.interceptor.StopWatch . start ( java.lang.String ) ; void ( org.springframework.aop.interceptor.Log , java.lang.String ( this . java.lang.String , org.springframework.aop.interceptor.MethodInvocation , null , null , - NUMBER ) ) ; java.lang.Object = org.springframework.aop.interceptor.MethodInvocation . proceed ( ) ; return java.lang.Object ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.aop.interceptor.StopWatch . isRunning ( ) ) { org.springframework.aop.interceptor.StopWatch . stop ( ) ; } boolean = true ; void ( org.springframework.aop.interceptor.Log , java.lang.String ( this . java.lang.String , org.springframework.aop.interceptor.MethodInvocation , null , java.lang.Throwable , org.springframework.aop.interceptor.StopWatch . getTotalTimeMillis ( ) ) , java.lang.Throwable ) ; throw java.lang.Throwable ; } finally { if ( ! boolean ) { if ( org.springframework.aop.interceptor.StopWatch . isRunning ( ) ) { org.springframework.aop.interceptor.StopWatch . stop ( ) ; } void ( org.springframework.aop.interceptor.Log , java.lang.String ( this . java.lang.String , org.springframework.aop.interceptor.MethodInvocation , java.lang.Object , null , org.springframework.aop.interceptor.StopWatch . getTotalTimeMillis ( ) ) ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( Log org.springframework.aop.interceptor.Log , java.lang.String java.lang.String ) { void ( org.springframework.aop.interceptor.Log , java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Log org.springframework.aop.interceptor.Log , java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable != null ) { org.springframework.aop.interceptor.Log . trace ( java.lang.String , java.lang.Throwable ) ; } else { org.springframework.aop.interceptor.Log . trace ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , MethodInvocation org.springframework.aop.interceptor.MethodInvocation , java.lang.Object java.lang.Object , java.lang.Throwable java.lang.Throwable , long long ) { java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; while ( java.util.regex.Matcher . boolean ( ) ) { java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { java.util.regex.Matcher . java.util.regex.Matcher ( java.lang.StringBuffer , java.util.regex.Matcher . java.lang.String ( org.springframework.aop.interceptor.MethodInvocation . getMethod ( ) . getName ( ) ) ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = getClassForLogging ( org.springframework.aop.interceptor.MethodInvocation . getThis ( ) ) . getName ( ) ; java.util.regex.Matcher . java.util.regex.Matcher ( java.lang.StringBuffer , java.util.regex.Matcher . java.lang.String ( java.lang.String ) ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = ClassUtils . getShortName ( getClassForLogging ( org.springframework.aop.interceptor.MethodInvocation . getThis ( ) ) ) ; java.util.regex.Matcher . java.util.regex.Matcher ( java.lang.StringBuffer , java.util.regex.Matcher . java.lang.String ( java.lang.String ) ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.util.regex.Matcher . java.util.regex.Matcher ( java.lang.StringBuffer , java.util.regex.Matcher . java.lang.String ( StringUtils . arrayToCommaDelimitedString ( org.springframework.aop.interceptor.MethodInvocation . getArguments ( ) ) ) ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { void ( org.springframework.aop.interceptor.MethodInvocation , java.util.regex.Matcher , java.lang.StringBuffer ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { void ( org.springframework.aop.interceptor.MethodInvocation , java.util.regex.Matcher , java.lang.StringBuffer , java.lang.Object ) ; } else if ( java.lang.Throwable != null && java.lang.String . boolean ( java.lang.String ) ) { java.util.regex.Matcher . java.util.regex.Matcher ( java.lang.StringBuffer , java.util.regex.Matcher . java.lang.String ( java.lang.Throwable . java.lang.String ( ) ) ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.util.regex.Matcher . java.util.regex.Matcher ( java.lang.StringBuffer , java.lang.Long . java.lang.String ( long ) ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } } java.util.regex.Matcher . java.lang.StringBuffer ( java.lang.StringBuffer ) ; return java.lang.StringBuffer . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodInvocation org.springframework.aop.interceptor.MethodInvocation , java.util.regex.Matcher java.util.regex.Matcher , java.lang.StringBuffer java.lang.StringBuffer , java.lang.Object java.lang.Object ) { if ( org.springframework.aop.interceptor.MethodInvocation . getMethod ( ) . getReturnType ( ) == void .class ) { java.util.regex.Matcher . java.util.regex.Matcher ( java.lang.StringBuffer , STRING ) ; } else if ( java.lang.Object == null ) { java.util.regex.Matcher . java.util.regex.Matcher ( java.lang.StringBuffer , STRING ) ; } else { java.util.regex.Matcher . java.util.regex.Matcher ( java.lang.StringBuffer , java.util.regex.Matcher . java.lang.String ( java.lang.Object . java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( MethodInvocation org.springframework.aop.interceptor.MethodInvocation , java.util.regex.Matcher java.util.regex.Matcher , java.lang.StringBuffer java.lang.StringBuffer ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.aop.interceptor.MethodInvocation . getMethod ( ) . getParameterTypes ( ) ; java.lang.String [] java.lang.String[] = new java.lang.String [ java.lang.Class<?>[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.String[] [ int ] = ClassUtils . getShortName ( java.lang.Class<?>[] [ int ] ) ; } java.util.regex.Matcher . java.util.regex.Matcher ( java.lang.StringBuffer , java.util.regex.Matcher . java.lang.String ( StringUtils . arrayToCommaDelimitedString ( java.lang.String[] ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; while ( java.util.regex.Matcher . boolean ( ) ) { java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( ) ; if ( ! java.util.Set<java.lang.Object> . boolean ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } } }  <METHOD_END>
