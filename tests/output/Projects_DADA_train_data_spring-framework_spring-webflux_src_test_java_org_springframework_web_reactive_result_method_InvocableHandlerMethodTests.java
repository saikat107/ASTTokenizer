<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController .class ) . mockCall ( org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController :: java.lang.String ) . method ( ) ; Mono < HandlerResult > org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> = org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> ( new org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController ( ) , java.lang.reflect.Method ) ; void ( org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mono < java.lang.Object > org.springframework.web.reactive.result.method.Mono<java.lang.Object> = Mono . empty ( ) ; java.lang.reflect.Method java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController .class ) . mockCall ( o -> o . singleArg ( null ) ) . method ( ) ; Mono < HandlerResult > org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> = org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> ( new org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController ( ) , java.lang.reflect.Method , org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver ( org.springframework.web.reactive.result.method.Mono<java.lang.Object> ) ) ; void ( org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mono < java.lang.Object > org.springframework.web.reactive.result.method.Mono<java.lang.Object> = Mono . just ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController .class ) . mockCall ( o -> o . singleArg ( null ) ) . method ( ) ; Mono < HandlerResult > org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> = org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> ( new org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController ( ) , java.lang.reflect.Method , org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver ( org.springframework.web.reactive.result.method.Mono<java.lang.Object> ) ) ; void ( org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController .class ) . mockCall ( o -> o . singleArg ( null ) ) . method ( ) ; Mono < HandlerResult > org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> = org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> ( new org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController ( ) , java.lang.reflect.Method ) ; try { org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> . block ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertThat ( java.lang.IllegalStateException . java.lang.String ( ) , is ( STRING + STRING + java.lang.reflect.Method . java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mono < java.lang.Object > org.springframework.web.reactive.result.method.Mono<java.lang.Object> = Mono . error ( new UnsupportedMediaTypeStatusException ( STRING ) ) ; java.lang.reflect.Method java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController .class ) . mockCall ( o -> o . singleArg ( null ) ) . method ( ) ; Mono < HandlerResult > org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> = org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> ( new org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController ( ) , java.lang.reflect.Method , org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver ( org.springframework.web.reactive.result.method.Mono<java.lang.Object> ) ) ; try { org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> . block ( ) ; fail ( STRING ) ; } catch ( UnsupportedMediaTypeStatusException org.springframework.web.reactive.result.method.UnsupportedMediaTypeStatusException ) { assertThat ( org.springframework.web.reactive.result.method.UnsupportedMediaTypeStatusException . getMessage ( ) , is ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mono < java.lang.Object > org.springframework.web.reactive.result.method.Mono<java.lang.Object> = Mono . just ( NUMBER ) ; java.lang.reflect.Method java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController .class ) . mockCall ( o -> o . singleArg ( null ) ) . method ( ) ; Mono < HandlerResult > org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> = org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> ( new org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController ( ) , java.lang.reflect.Method , org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver ( org.springframework.web.reactive.result.method.Mono<java.lang.Object> ) ) ; try { org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> . block ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertThat ( java.lang.IllegalStateException . java.lang.String ( ) , is ( STRING + STRING + STRING + java.lang.reflect.Method . java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController .class ) . mockCall ( org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController :: void ) . method ( ) ; Mono < HandlerResult > org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> = org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> ( new org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController ( ) , java.lang.reflect.Method ) ; try { org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> . block ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertThat ( java.lang.IllegalStateException . java.lang.String ( ) , is ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController .class ) . annotPresent ( ResponseStatus .class ) . resolveMethod ( ) ; Mono < HandlerResult > org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> = org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> ( new org.springframework.web.reactive.result.method.InvocableHandlerMethodTests.TestController ( ) , java.lang.reflect.Method ) ; void ( org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> , STRING ) ; assertThat ( this . org.springframework.web.reactive.result.method.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) , is ( HttpStatus . CREATED ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> < HandlerResult > org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { return this . org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> ( java.lang.Object , java.lang.reflect.Method , new HandlerMethodArgumentResolver [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> < HandlerResult > org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , HandlerMethodArgumentResolver ... org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver[] ) { InvocableHandlerMethod org.springframework.web.reactive.result.method.InvocableHandlerMethod = new InvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; org.springframework.web.reactive.result.method.InvocableHandlerMethod . setArgumentResolvers ( java.util.Arrays . java.util.List ( org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver[] ) ) ; return org.springframework.web.reactive.result.method.InvocableHandlerMethod . invoke ( this . org.springframework.web.reactive.result.method.MockServerWebExchange , new BindingContext ( ) ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver ( Mono < java.lang.Object > org.springframework.web.reactive.result.method.Mono<java.lang.Object> ) { HandlerMethodArgumentResolver org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver = mock ( HandlerMethodArgumentResolver .class ) ; when ( org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver . supportsParameter ( any ( ) ) ) . thenReturn ( true ) ; when ( org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver . resolveArgument ( any ( ) , any ( ) , any ( ) ) ) . thenReturn ( org.springframework.web.reactive.result.method.Mono<java.lang.Object> ) ; return org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver ; }  <METHOD_END>
<METHOD_START> private void void ( Mono < HandlerResult > org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> , java.lang.String java.lang.String ) { StepVerifier . create ( org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> ) . consumeNextWith ( result -> { Optional < ? > optional = result . getReturnValue ( ) ; assertTrue ( optional . isPresent ( ) ) ; assertEquals ( expected , optional . get ( ) ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( ) { throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ ResponseStatus ( HttpStatus . CREATED ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
