<METHOD_START> @ Test public void void ( ) { Transformer org.springframework.integration.transformer.Transformer = new ObjectToStringTransformer ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.Transformer . transform ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Transformer org.springframework.integration.transformer.Transformer = new ObjectToStringTransformer ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.Transformer . transform ( new GenericMessage < org.springframework.integration.transformer.ObjectToStringTransformerTests.TestBean > ( new org.springframework.integration.transformer.ObjectToStringTransformerTests.TestBean ( ) ) ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Transformer org.springframework.integration.transformer.Transformer = new ObjectToStringTransformer ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.Transformer . transform ( new GenericMessage < byte [] > ( ( STRING + '\u0fff' ) . byte[] ( STRING ) ) ) ; assertEquals ( STRING + '\u0fff' , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.nio.charset.Charset . java.nio.charset.Charset ( ) . java.lang.String ( ) ; Transformer org.springframework.integration.transformer.Transformer = new ObjectToStringTransformer ( java.lang.String ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.Transformer . transform ( new GenericMessage < byte [] > ( STRING . byte[] ( java.lang.String ) ) ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Transformer org.springframework.integration.transformer.Transformer = new ObjectToStringTransformer ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.Transformer . transform ( new GenericMessage < char [] > ( STRING . char[] ( ) ) ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
