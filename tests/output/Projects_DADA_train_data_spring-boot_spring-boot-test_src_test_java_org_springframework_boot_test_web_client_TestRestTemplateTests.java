<METHOD_START> @ Test public void void ( ) { RestTemplateBuilder org.springframework.boot.test.web.client.RestTemplateBuilder = mock ( RestTemplateBuilder .class ) ; RestTemplate org.springframework.boot.test.web.client.RestTemplate = new RestTemplate ( ) ; given ( org.springframework.boot.test.web.client.RestTemplateBuilder . build ( ) ) . willReturn ( org.springframework.boot.test.web.client.RestTemplate ) ; assertThat ( new TestRestTemplate ( org.springframework.boot.test.web.client.RestTemplateBuilder ) . getRestTemplate ( ) ) . isEqualTo ( org.springframework.boot.test.web.client.RestTemplate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new TestRestTemplate ( ) . getRestTemplate ( ) . getRequestFactory ( ) ) . isInstanceOf ( HttpComponentsClientHttpRequestFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new TestRestTemplate ( STRING , STRING ) . getRestTemplate ( ) . getRequestFactory ( ) ) . isInstanceOf ( InterceptingClientHttpRequestFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate = new TestRestTemplate ( HttpClientOption . ENABLE_REDIRECTS ) ; CustomHttpComponentsClientHttpRequestFactory org.springframework.boot.test.web.client.CustomHttpComponentsClientHttpRequestFactory = ( CustomHttpComponentsClientHttpRequestFactory ) org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getRequestFactory ( ) ; RequestConfig org.springframework.boot.test.web.client.RequestConfig = org.springframework.boot.test.web.client.CustomHttpComponentsClientHttpRequestFactory . getRequestConfig ( ) ; assertThat ( org.springframework.boot.test.web.client.RequestConfig . isRedirectsEnabled ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RestTemplate org.springframework.boot.test.web.client.RestTemplate = mock ( RestTemplate .class ) ; given ( org.springframework.boot.test.web.client.RestTemplate . getUriTemplateHandler ( ) ) . willReturn ( new DefaultUriBuilderFactory ( ) ) ; final TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate = new TestRestTemplate ( org.springframework.boot.test.web.client.RestTemplate ) ; ReflectionUtils . doWithMethods ( RestOperations .class , new MethodCallback ( ) { @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method )					throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( TestRestTemplate .class , java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ; assertThat ( java.lang.reflect.Method ) . as ( STRING , java.lang.reflect.Method ) . isNotNull ( ) ; assertThat ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) . as ( STRING , java.lang.reflect.Method ) . isTrue ( ) ; try { java.lang.reflect.Method . java.lang.Object ( org.springframework.boot.test.web.client.TestRestTemplate , java.lang.Object[] ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } } private java.lang.Object [] java.lang.Object[] ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) throws java.lang.Exception { java.lang.Object [] java.lang.Object[] = new java.lang.Object [ java.lang.Class<?>[] . int ] ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { java.lang.Object[] [ int ] = java.lang.Object ( java.lang.Class<?>[] [ int ] ) ; } return java.lang.Object[] ; } @ java.lang.SuppressWarnings ( STRING ) private java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.lang.Exception { if ( java.lang.String .class . boolean ( java.lang.Class<> ) ) { return STRING ; } if ( java.lang.Object [] .class . boolean ( java.lang.Class<> ) ) { return new java.lang.Object [ NUMBER ] ; } if ( java.net.URI .class . boolean ( java.lang.Class<> ) ) { return new java.net.URI ( STRING ) ; } if ( HttpMethod .class . boolean ( java.lang.Class<> ) ) { return HttpMethod . GET ; } if ( java.lang.Class .class . boolean ( java.lang.Class<> ) ) { return java.lang.Object .class ; } if ( RequestEntity .class . boolean ( java.lang.Class<> ) ) { return new RequestEntity ( HttpMethod . GET , new java.net.URI ( STRING ) ) ; } return mock ( java.lang.Class<> ) ; } } , new ReflectionUtils . ReflectionUtils ( ) { @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method )					throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( TestRestTemplate .class , java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ; assertThat ( java.lang.reflect.Method ) . as ( STRING , java.lang.reflect.Method ) . isNotNull ( ) ; assertThat ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) . as ( STRING , java.lang.reflect.Method ) . isTrue ( ) ; try { java.lang.reflect.Method . java.lang.Object ( org.springframework.boot.test.web.client.TestRestTemplate , java.lang.Object[] ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object [] java.lang.Object[] ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) throws java.lang.Exception { java.lang.Object [] java.lang.Object[] = new java.lang.Object [ java.lang.Class<?>[] . int ] ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { java.lang.Object[] [ int ] = java.lang.Object ( java.lang.Class<?>[] [ int ] ) ; } return java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.lang.Exception { if ( java.lang.String .class . boolean ( java.lang.Class<> ) ) { return STRING ; } if ( java.lang.Object [] .class . boolean ( java.lang.Class<> ) ) { return new java.lang.Object [ NUMBER ] ; } if ( java.net.URI .class . boolean ( java.lang.Class<> ) ) { return new java.net.URI ( STRING ) ; } if ( HttpMethod .class . boolean ( java.lang.Class<> ) ) { return HttpMethod . GET ; } if ( java.lang.Class .class . boolean ( java.lang.Class<> ) ) { return java.lang.Object .class ; } if ( RequestEntity .class . boolean ( java.lang.Class<> ) ) { return new RequestEntity ( HttpMethod . GET , new java.net.URI ( STRING ) ) ; } return mock ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate = new TestRestTemplate ( ) ; TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate = org.springframework.boot.test.web.client.TestRestTemplate . withBasicAuth ( STRING , STRING ) ; assertThat ( org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getMessageConverters ( ) ) . containsExactlyElementsOf ( org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getMessageConverters ( ) ) ; assertThat ( org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getRequestFactory ( ) ) . isInstanceOf ( InterceptingClientHttpRequestFactory .class ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getRequestFactory ( ) , STRING ) ) . isInstanceOf ( CustomHttpComponentsClientHttpRequestFactory .class ) ; assertThat ( org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getUriTemplateHandler ( ) ) . isSameAs ( org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getUriTemplateHandler ( ) ) ; assertThat ( org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getInterceptors ( ) ) . hasSize ( NUMBER ) ; void ( org.springframework.boot.test.web.client.TestRestTemplate , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate = new TestRestTemplate ( STRING , STRING ) . withBasicAuth ( STRING , STRING ) ; TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate = org.springframework.boot.test.web.client.TestRestTemplate . withBasicAuth ( STRING , STRING ) ; assertThat ( org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getMessageConverters ( ) ) . containsExactlyElementsOf ( org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getMessageConverters ( ) ) ; assertThat ( org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getRequestFactory ( ) ) . isInstanceOf ( InterceptingClientHttpRequestFactory .class ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getRequestFactory ( ) , STRING ) ) . isInstanceOf ( CustomHttpComponentsClientHttpRequestFactory .class ) ; assertThat ( org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getUriTemplateHandler ( ) ) . isSameAs ( org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getUriTemplateHandler ( ) ) ; assertThat ( org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getInterceptors ( ) ) . hasSize ( NUMBER ) ; void ( org.springframework.boot.test.web.client.TestRestTemplate , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate = new TestRestTemplate ( STRING , STRING ) ; ResponseErrorHandler org.springframework.boot.test.web.client.ResponseErrorHandler = mock ( ResponseErrorHandler .class ) ; org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . setErrorHandler ( org.springframework.boot.test.web.client.ResponseErrorHandler ) ; TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate = org.springframework.boot.test.web.client.TestRestTemplate . withBasicAuth ( STRING , STRING ) ; assertThat ( org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getErrorHandler ( ) ) . isSameAs ( org.springframework.boot.test.web.client.ResponseErrorHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback ( ) { @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . delete ( java.net.URI ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . delete ( java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback ( ) { @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . exchange ( new RequestEntity < java.lang.String > ( HttpMethod . GET , java.net.URI ) , java.lang.String .class ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . exchange ( new RequestEntity < java.lang.String > ( HttpMethod . GET , java.net.URI ) , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback ( ) { @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . exchange ( new RequestEntity < java.lang.String > ( HttpMethod . GET , java.net.URI ) , new ParameterizedTypeReference < java.lang.String > ( ) {				} ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . exchange ( new RequestEntity < java.lang.String > ( HttpMethod . GET , java.net.URI ) , new ParameterizedTypeReference < java.lang.String > ( ) {				} ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback ( ) { @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . exchange ( java.net.URI , HttpMethod . GET , new HttpEntity <> ( new byte [ NUMBER ] ) , java.lang.String .class ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . exchange ( java.net.URI , HttpMethod . GET , new HttpEntity <> ( new byte [ NUMBER ] ) , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback ( ) { @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . exchange ( java.net.URI , HttpMethod . GET , new HttpEntity <> ( new byte [ NUMBER ] ) , new ParameterizedTypeReference < java.lang.String > ( ) {				} ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . exchange ( java.net.URI , HttpMethod . GET , new HttpEntity <> ( new byte [ NUMBER ] ) , new ParameterizedTypeReference < java.lang.String > ( ) {				} ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback ( ) { @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . execute ( java.net.URI , HttpMethod . GET , null , null ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . execute ( java.net.URI , HttpMethod . GET , null , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback ( ) { @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . getForEntity ( java.net.URI , java.lang.String .class ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . getForEntity ( java.net.URI , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback ( ) { @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . getForObject ( java.net.URI , java.lang.String .class ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . getForObject ( java.net.URI , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback ( ) { @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . headForHeaders ( java.net.URI ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . headForHeaders ( java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback ( ) { @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . optionsForAllow ( java.net.URI ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . optionsForAllow ( java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback ( ) { @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . patchForObject ( java.net.URI , STRING , java.lang.String .class ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . patchForObject ( java.net.URI , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback ( ) { @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . postForEntity ( java.net.URI , STRING , java.lang.String .class ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . postForEntity ( java.net.URI , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback ( ) { @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . postForLocation ( java.net.URI , STRING ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . postForLocation ( java.net.URI , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback ( ) { @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . postForObject ( java.net.URI , STRING , java.lang.String .class ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . postForObject ( java.net.URI , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback ( ) { @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . put ( java.net.URI , STRING ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI ) { org.springframework.boot.test.web.client.TestRestTemplate . put ( java.net.URI , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback )			throws java.io.IOException { ClientHttpRequestFactory org.springframework.boot.test.web.client.ClientHttpRequestFactory = mock ( ClientHttpRequestFactory .class ) ; MockClientHttpRequest org.springframework.boot.test.web.client.MockClientHttpRequest = new MockClientHttpRequest ( ) ; org.springframework.boot.test.web.client.MockClientHttpRequest . setResponse ( new MockClientHttpResponse ( new byte [ NUMBER ] , HttpStatus . OK ) ) ; java.net.URI java.net.URI = java.net.URI . java.net.URI ( STRING ) ; given ( org.springframework.boot.test.web.client.ClientHttpRequestFactory . createRequest ( eq ( java.net.URI ) , ( HttpMethod ) any ( ) ) ) . willReturn ( org.springframework.boot.test.web.client.MockClientHttpRequest ) ; RestTemplate org.springframework.boot.test.web.client.RestTemplate = new RestTemplate ( ) ; TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate = new TestRestTemplate ( org.springframework.boot.test.web.client.RestTemplate ) ; org.springframework.boot.test.web.client.RestTemplate . setRequestFactory ( org.springframework.boot.test.web.client.ClientHttpRequestFactory ) ; LocalHostUriTemplateHandler org.springframework.boot.test.web.client.LocalHostUriTemplateHandler = new LocalHostUriTemplateHandler ( new MockEnvironment ( ) ) ; org.springframework.boot.test.web.client.TestRestTemplate . setUriTemplateHandler ( org.springframework.boot.test.web.client.LocalHostUriTemplateHandler ) ; org.springframework.boot.test.web.client.TestRestTemplateTests.TestRestTemplateCallback . void ( org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI . java.net.URI ( STRING ) ) ; verify ( org.springframework.boot.test.web.client.ClientHttpRequestFactory ) . createRequest ( eq ( java.net.URI ) , ( HttpMethod ) any ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.lang.String java.lang.String , java.lang.String java.lang.String ) { @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.boot.test.web.client.ClientHttpRequestInterceptor> < ClientHttpRequestInterceptor > java.util.List<org.springframework.boot.test.web.client.ClientHttpRequestInterceptor> = ( java.util.List<org.springframework.boot.test.web.client.ClientHttpRequestInterceptor> < ClientHttpRequestInterceptor > ) ReflectionTestUtils . getField ( org.springframework.boot.test.web.client.TestRestTemplate . getRestTemplate ( ) . getRequestFactory ( ) , STRING ) ; assertThat ( java.util.List<org.springframework.boot.test.web.client.ClientHttpRequestInterceptor> ) . hasSize ( NUMBER ) ; ClientHttpRequestInterceptor org.springframework.boot.test.web.client.ClientHttpRequestInterceptor = java.util.List<org.springframework.boot.test.web.client.ClientHttpRequestInterceptor> . get ( NUMBER ) ; assertThat ( org.springframework.boot.test.web.client.ClientHttpRequestInterceptor ) . isInstanceOf ( BasicAuthorizationInterceptor .class ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.test.web.client.ClientHttpRequestInterceptor , STRING ) ) . isEqualTo ( java.lang.String ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.test.web.client.ClientHttpRequestInterceptor , STRING ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> void void ( TestRestTemplate org.springframework.boot.test.web.client.TestRestTemplate , java.net.URI java.net.URI );  <METHOD_END>
