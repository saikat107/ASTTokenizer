<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = this . org.springframework.integration.splitter.MethodInvokingSplitter ( STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = this . org.springframework.integration.splitter.MethodInvokingSplitter ( STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = this . org.springframework.integration.splitter.MethodInvokingSplitter ( STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = this . org.springframework.integration.splitter.MethodInvokingSplitter ( STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = this . org.springframework.integration.splitter.MethodInvokingSplitter ( STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = this . org.springframework.integration.splitter.MethodInvokingSplitter ( STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.splitter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = new MethodInvokingSplitter ( org.springframework.integration.splitter.MethodInvokingSplitterTests.SplitterTestBean , STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.Message<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getHeaders ( ) . get ( STRING ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = this . org.springframework.integration.splitter.MethodInvokingSplitter ( STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = this . org.springframework.integration.splitter.MethodInvokingSplitter ( STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = new MethodInvokingSplitter ( org.springframework.integration.splitter.MethodInvokingSplitterTests.SplitterTestBean , STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = new MethodInvokingSplitter ( org.springframework.integration.splitter.MethodInvokingSplitterTests.SplitterTestBean , STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = new MethodInvokingSplitter ( org.springframework.integration.splitter.MethodInvokingSplitterTests.SplitterTestBean , STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = new MethodInvokingSplitter ( org.springframework.integration.splitter.MethodInvokingSplitterTests.SplitterTestBean , STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = new MethodInvokingSplitter ( org.springframework.integration.splitter.MethodInvokingSplitterTests.SplitterTestBean , STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = new MethodInvokingSplitter ( org.springframework.integration.splitter.MethodInvokingSplitterTests.SplitterTestBean , STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = new MethodInvokingSplitter ( org.springframework.integration.splitter.MethodInvokingSplitterTests.SplitterTestBean , STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = new MethodInvokingSplitter ( org.springframework.integration.splitter.MethodInvokingSplitterTests.SplitterTestBean , STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { class ListSplitter { @ java.lang.SuppressWarnings ( STRING ) public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.util.List<java.lang.String> ; } } GenericMessage < java.util.List<?> < ? > > org.springframework.integration.splitter.GenericMessage<java.util.List<?>> = new GenericMessage < java.util.List<?> < ? > > ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = new MethodInvokingSplitter ( new ListSplitter ( ) , STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.util.List<?>> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = this . org.springframework.integration.splitter.MethodInvokingSplitter ( STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.splitter.Message<> ) . getSequenceSize ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.splitter.Message<> ) . getSequenceNumber ( ) ) ; assertEquals ( org.springframework.integration.splitter.GenericMessage<java.lang.String> . getHeaders ( ) . getId ( ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.splitter.Message<> ) . getCorrelationId ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.splitter.Message<> ) . getSequenceSize ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.splitter.Message<> ) . getSequenceNumber ( ) ) ; assertEquals ( org.springframework.integration.splitter.GenericMessage<java.lang.String> . getHeaders ( ) . getId ( ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.splitter.Message<> ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = this . org.springframework.integration.splitter.MethodInvokingSplitter ( STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.splitter.Message<> ) . getSequenceSize ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.splitter.Message<> ) . getSequenceNumber ( ) ) ; assertEquals ( org.springframework.integration.splitter.GenericMessage<java.lang.String> . getHeaders ( ) . getId ( ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.splitter.Message<> ) . getCorrelationId ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.splitter.Message<> ) . getSequenceSize ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.splitter.Message<> ) . getSequenceNumber ( ) ) ; assertEquals ( org.springframework.integration.splitter.GenericMessage<java.lang.String> . getHeaders ( ) . getId ( ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.splitter.Message<> ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.splitter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = this . org.springframework.integration.splitter.MethodInvokingSplitter ( STRING ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.Message<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.splitter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.reflect.Method java.lang.reflect.Method = this . org.springframework.integration.splitter.MethodInvokingSplitterTests.SplitterTestBean . java.lang.Class<? extends org.springframework.integration.splitter.MethodInvokingSplitterTests.SplitterTestBean> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.String .class ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = new MethodInvokingSplitter ( org.springframework.integration.splitter.MethodInvokingSplitterTests.SplitterTestBean , java.lang.reflect.Method ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.Message<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.splitter.MethodInvokingSplitterTests.SingleAnnotationTestBean org.springframework.integration.splitter.MethodInvokingSplitterTests.SingleAnnotationTestBean = new org.springframework.integration.splitter.MethodInvokingSplitterTests.SingleAnnotationTestBean ( ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = new MethodInvokingSplitter ( org.springframework.integration.splitter.MethodInvokingSplitterTests.SingleAnnotationTestBean ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new MethodInvokingSplitter ( new org.springframework.integration.splitter.MethodInvokingSplitterTests.AmbiguousTypeMatchTestBean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericMessage < java.lang.String > org.springframework.integration.splitter.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.splitter.MethodInvokingSplitterTests.SinglePublicMethodTestBean org.springframework.integration.splitter.MethodInvokingSplitterTests.SinglePublicMethodTestBean = new org.springframework.integration.splitter.MethodInvokingSplitterTests.SinglePublicMethodTestBean ( ) ; MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter = new MethodInvokingSplitter ( org.springframework.integration.splitter.MethodInvokingSplitterTests.SinglePublicMethodTestBean ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.MethodInvokingSplitter . handleMessage ( org.springframework.integration.splitter.GenericMessage<java.lang.String> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new MethodInvokingSplitter ( new org.springframework.integration.splitter.MethodInvokingSplitterTests.MultiplePublicMethodTestBean ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.splitter.MethodInvokingSplitter org.springframework.integration.splitter.MethodInvokingSplitter ( java.lang.String java.lang.String ) throws java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.String . boolean ( STRING ) ? Message .class : java.lang.String .class ; java.lang.reflect.Method java.lang.reflect.Method = this . org.springframework.integration.splitter.MethodInvokingSplitterTests.SplitterTestBean . java.lang.Class<? extends org.springframework.integration.splitter.MethodInvokingSplitterTests.SplitterTestBean> ( ) . java.lang.reflect.Method ( java.lang.String , java.lang.Class<> ) ; return new MethodInvokingSplitter ( org.springframework.integration.splitter.MethodInvokingSplitterTests.SplitterTestBean , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String[] ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) { return java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String . java.lang.String[] ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( Message < ? > org.springframework.integration.splitter.Message<?> ) { return org.springframework.integration.splitter.Message<> . getPayload ( ) . toString ( ) . split ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( Message < ? > org.springframework.integration.splitter.Message<?> ) { return java.util.Arrays . java.util.List ( org.springframework.integration.splitter.Message<> . getPayload ( ) . toString ( ) . split ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.splitter.Message<java.lang.String> < java.lang.String > [] org.springframework.integration.splitter.Message<java.lang.String>[] ( Message < ? > org.springframework.integration.splitter.Message<?> ) { java.lang.String [] java.lang.String[] = org.springframework.integration.splitter.Message<> . getPayload ( ) . toString ( ) . split ( STRING ) ; org.springframework.integration.splitter.Message<java.lang.String> < java.lang.String > [] org.springframework.integration.splitter.Message<java.lang.String>[] = new org.springframework.integration.splitter.MethodInvokingSplitterTests.TestStringMessage [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { org.springframework.integration.splitter.Message<java.lang.String>[] [ int ] = new org.springframework.integration.splitter.MethodInvokingSplitterTests.TestStringMessage ( java.lang.String[] [ int ] ) ; } return org.springframework.integration.splitter.Message<java.lang.String>[] ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.integration.splitter.Message<java.lang.String>> < Message < java.lang.String > > java.util.List<org.springframework.integration.splitter.Message<java.lang.String>> ( Message < ? > org.springframework.integration.splitter.Message<?> ) { java.lang.String [] java.lang.String[] = org.springframework.integration.splitter.Message<> . getPayload ( ) . toString ( ) . split ( STRING ) ; java.util.List<org.springframework.integration.splitter.Message<java.lang.String>> < Message < java.lang.String > > java.util.List<org.springframework.integration.splitter.Message<java.lang.String>> = new java.util.ArrayList<org.springframework.integration.splitter.Message<java.lang.String>> < Message < java.lang.String > > ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<org.springframework.integration.splitter.Message<java.lang.String>> . add ( new GenericMessage < java.lang.String > ( java.lang.String ) ) ; } return java.util.List<org.springframework.integration.splitter.Message<java.lang.String>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.integration.splitter.AbstractIntegrationMessageBuilder<java.lang.String>> < AbstractIntegrationMessageBuilder < java.lang.String > > java.util.List<org.springframework.integration.splitter.AbstractIntegrationMessageBuilder<java.lang.String>> ( Message < ? > org.springframework.integration.splitter.Message<?> ) { java.lang.String [] java.lang.String[] = org.springframework.integration.splitter.Message<> . getPayload ( ) . toString ( ) . split ( STRING ) ; java.util.List<org.springframework.integration.splitter.AbstractIntegrationMessageBuilder<java.lang.String>> < AbstractIntegrationMessageBuilder < java.lang.String > > java.util.List<org.springframework.integration.splitter.AbstractIntegrationMessageBuilder<java.lang.String>> = new java.util.ArrayList<org.springframework.integration.splitter.AbstractIntegrationMessageBuilder<java.lang.String>> <> ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { MessageBuilder < java.lang.String > org.springframework.integration.splitter.MessageBuilder<java.lang.String> = MessageBuilder . withPayload ( java.lang.String ) . setHeader ( STRING , STRING ) ; java.util.List<org.springframework.integration.splitter.AbstractIntegrationMessageBuilder<java.lang.String>> . add ( org.springframework.integration.splitter.MessageBuilder<java.lang.String> ) ; } return java.util.List<org.springframework.integration.splitter.AbstractIntegrationMessageBuilder<java.lang.String>> ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.splitter.Message<java.lang.String> < java.lang.String > [] org.springframework.integration.splitter.Message<java.lang.String>[] ( java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( STRING ) ; org.springframework.integration.splitter.Message<java.lang.String> < java.lang.String > [] org.springframework.integration.splitter.Message<java.lang.String>[] = new org.springframework.integration.splitter.MethodInvokingSplitterTests.TestStringMessage [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { org.springframework.integration.splitter.Message<java.lang.String>[] [ int ] = new org.springframework.integration.splitter.MethodInvokingSplitterTests.TestStringMessage ( java.lang.String[] [ int ] ) ; } return org.springframework.integration.splitter.Message<java.lang.String>[] ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.integration.splitter.Message<java.lang.String>> < Message < java.lang.String > > java.util.List<org.springframework.integration.splitter.Message<java.lang.String>> ( java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( STRING ) ; java.util.List<org.springframework.integration.splitter.Message<java.lang.String>> < Message < java.lang.String > > java.util.List<org.springframework.integration.splitter.Message<java.lang.String>> = new java.util.ArrayList<org.springframework.integration.splitter.Message<java.lang.String>> < Message < java.lang.String > > ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<org.springframework.integration.splitter.Message<java.lang.String>> . add ( new GenericMessage < java.lang.String > ( java.lang.String ) ) ; } return java.util.List<org.springframework.integration.splitter.Message<java.lang.String>> ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( @ Header ( STRING ) java.lang.String java.lang.String ) { return java.lang.String . java.lang.String[] ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String , @ Header ( STRING ) java.lang.String java.lang.String ) { java.lang.String java.lang.String = STRING ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.Collections . boolean ( java.util.List<java.lang.String> , java.lang.String . java.lang.String[] ( java.lang.String ) ) ; java.util.Collections . boolean ( java.util.List<java.lang.String> , java.lang.String . java.lang.String[] ( java.lang.String ) ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Splitter public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String[] ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Splitter public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Splitter public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String[] ( STRING ) ; }  <METHOD_END>
<METHOD_START> java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
