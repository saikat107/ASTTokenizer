<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method , RepositoryMetadata org.springframework.data.gemfire.repository.query.RepositoryMetadata , ProjectionFactory org.springframework.data.gemfire.repository.query.ProjectionFactory , MappingContext < ? extends GemfirePersistentEntity < ? > , GemfirePersistentProperty > org.springframework.data.gemfire.repository.query.MappingContext<? extends org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<?>,org.springframework.data.gemfire.repository.query.GemfirePersistentProperty> ) { super( java.lang.reflect.Method , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory ); Assert . notNull ( org.springframework.data.gemfire.repository.query.MappingContext<,org.springframework.data.gemfire.repository.query.GemfirePersistentProperty> , STRING ) ; void ( java.lang.reflect.Method ) ; this . java.lang.reflect.Method = java.lang.reflect.Method ; this . org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<?> = org.springframework.data.gemfire.repository.query.MappingContext<,org.springframework.data.gemfire.repository.query.GemfirePersistentProperty> . getPersistentEntity ( getDomainClass ( ) ) . orElseThrow ( ( ) new IllegalArgumentException ( String . format ( STRING , getDomainClass ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.reflect.Method java.lang.reflect.Method ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) { if ( Pageable .class . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.reflect.Method . java.lang.String ( ) ) ) ; } } }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<?> < ? > org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<?> ( ) { return org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return StringUtils . hasText ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { Query org.springframework.data.gemfire.repository.query.Query = java.lang.reflect.Method . T ( Query .class ) ; java.lang.String java.lang.String = ( org.springframework.data.gemfire.repository.query.Query != null ? ( java.lang.String ) AnnotationUtils . getValue ( org.springframework.data.gemfire.repository.query.Query ) : null ) ; return ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : null ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.reflect.Method . boolean ( Hint .class ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { Hint org.springframework.data.gemfire.repository.query.Hint = java.lang.reflect.Method . T ( Hint .class ) ; return ( org.springframework.data.gemfire.repository.query.Hint != null ? org.springframework.data.gemfire.repository.query.Hint . value ( ) : java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.reflect.Method . boolean ( Import .class ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { Import org.springframework.data.gemfire.repository.query.Import = java.lang.reflect.Method . T ( Import .class ) ; return ( org.springframework.data.gemfire.repository.query.Import != null ? org.springframework.data.gemfire.repository.query.Import . value ( ) : null ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.reflect.Method . boolean ( Limit .class ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { Limit org.springframework.data.gemfire.repository.query.Limit = java.lang.reflect.Method . T ( Limit .class ) ; return ( org.springframework.data.gemfire.repository.query.Limit != null ? org.springframework.data.gemfire.repository.query.Limit . value ( ) : java.lang.Integer . int ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.reflect.Method . boolean ( Trace .class ) ; }  <METHOD_END>
