<METHOD_START> public static org.springframework.jdbc.core.metadata.TableMetaDataProvider org.springframework.jdbc.core.metadata.TableMetaDataProvider ( javax.sql.DataSource javax.sql.DataSource , TableMetaDataContext org.springframework.jdbc.core.metadata.TableMetaDataContext ) { try { return ( TableMetaDataProvider ) JdbcUtils . extractDatabaseMetaData ( javax.sql.DataSource , new DatabaseMetaDataCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.DatabaseMetaData java.sql.DatabaseMetaData ) throws java.sql.SQLException { java.lang.String java.lang.String = JdbcUtils . commonDatabaseName ( java.sql.DatabaseMetaData . java.lang.String ( ) ) ; boolean boolean = org.springframework.jdbc.core.metadata.TableMetaDataContext . isAccessTableColumnMetaData ( ) ; TableMetaDataProvider org.springframework.jdbc.core.metadata.TableMetaDataProvider ; if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.TableMetaDataProvider = new OracleTableMetaDataProvider ( java.sql.DatabaseMetaData , org.springframework.jdbc.core.metadata.TableMetaDataContext . isOverrideIncludeSynonymsDefault ( ) ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.TableMetaDataProvider = new HsqlTableMetaDataProvider ( java.sql.DatabaseMetaData ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.TableMetaDataProvider = new PostgresTableMetaDataProvider ( java.sql.DatabaseMetaData ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.TableMetaDataProvider = new DerbyTableMetaDataProvider ( java.sql.DatabaseMetaData ) ; } else { org.springframework.jdbc.core.metadata.TableMetaDataProvider = new GenericTableMetaDataProvider ( java.sql.DatabaseMetaData ) ; } if ( org.springframework.jdbc.core.metadata.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . debug ( STRING + org.springframework.jdbc.core.metadata.TableMetaDataProvider . getClass ( ) . getSimpleName ( ) ) ; } org.springframework.jdbc.core.metadata.TableMetaDataProvider . initializeWithMetaData ( java.sql.DatabaseMetaData ) ; if ( boolean ) { org.springframework.jdbc.core.metadata.TableMetaDataProvider . initializeWithTableColumnMetaData ( java.sql.DatabaseMetaData , org.springframework.jdbc.core.metadata.TableMetaDataContext . getCatalogName ( ) , org.springframework.jdbc.core.metadata.TableMetaDataContext . getSchemaName ( ) , org.springframework.jdbc.core.metadata.TableMetaDataContext . getTableName ( ) ) ; } return org.springframework.jdbc.core.metadata.TableMetaDataProvider ; } } ) ; } catch ( MetaDataAccessException org.springframework.jdbc.core.metadata.MetaDataAccessException ) { throw new DataAccessResourceFailureException ( STRING , org.springframework.jdbc.core.metadata.MetaDataAccessException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.DatabaseMetaData java.sql.DatabaseMetaData ) throws java.sql.SQLException { java.lang.String java.lang.String = JdbcUtils . commonDatabaseName ( java.sql.DatabaseMetaData . java.lang.String ( ) ) ; boolean boolean = org.springframework.jdbc.core.metadata.TableMetaDataContext . isAccessTableColumnMetaData ( ) ; TableMetaDataProvider org.springframework.jdbc.core.metadata.TableMetaDataProvider ; if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.TableMetaDataProvider = new OracleTableMetaDataProvider ( java.sql.DatabaseMetaData , org.springframework.jdbc.core.metadata.TableMetaDataContext . isOverrideIncludeSynonymsDefault ( ) ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.TableMetaDataProvider = new HsqlTableMetaDataProvider ( java.sql.DatabaseMetaData ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.TableMetaDataProvider = new PostgresTableMetaDataProvider ( java.sql.DatabaseMetaData ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.TableMetaDataProvider = new DerbyTableMetaDataProvider ( java.sql.DatabaseMetaData ) ; } else { org.springframework.jdbc.core.metadata.TableMetaDataProvider = new GenericTableMetaDataProvider ( java.sql.DatabaseMetaData ) ; } if ( org.springframework.jdbc.core.metadata.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . debug ( STRING + org.springframework.jdbc.core.metadata.TableMetaDataProvider . getClass ( ) . getSimpleName ( ) ) ; } org.springframework.jdbc.core.metadata.TableMetaDataProvider . initializeWithMetaData ( java.sql.DatabaseMetaData ) ; if ( boolean ) { org.springframework.jdbc.core.metadata.TableMetaDataProvider . initializeWithTableColumnMetaData ( java.sql.DatabaseMetaData , org.springframework.jdbc.core.metadata.TableMetaDataContext . getCatalogName ( ) , org.springframework.jdbc.core.metadata.TableMetaDataContext . getSchemaName ( ) , org.springframework.jdbc.core.metadata.TableMetaDataContext . getTableName ( ) ) ; } return org.springframework.jdbc.core.metadata.TableMetaDataProvider ; }  <METHOD_END>
