<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.messaging.core.BeanFactory ) throws org.springframework.messaging.core.BeansException { setDestinationResolver ( new BeanFactoryMessageChannelDestinationResolver ( org.springframework.messaging.core.BeanFactory ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final void void ( MessageChannel org.springframework.messaging.core.MessageChannel , Message < ? > org.springframework.messaging.core.Message<?> ) { Assert . notNull ( org.springframework.messaging.core.MessageChannel , STRING ) ; MessageHeaderAccessor org.springframework.messaging.core.MessageHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.messaging.core.Message<> , MessageHeaderAccessor .class ) ; if ( org.springframework.messaging.core.MessageHeaderAccessor != null && org.springframework.messaging.core.MessageHeaderAccessor . isMutable ( ) ) { org.springframework.messaging.core.MessageHeaderAccessor . setImmutable ( ) ; } long long = this . long ; boolean boolean = ( long >= NUMBER ? org.springframework.messaging.core.MessageChannel . send ( org.springframework.messaging.core.Message<> , long ) : org.springframework.messaging.core.MessageChannel . send ( org.springframework.messaging.core.Message<> ) ) ; if ( ! boolean ) { throw new MessageDeliveryException ( org.springframework.messaging.core.Message<> , STRING + org.springframework.messaging.core.MessageChannel + STRING + long ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final org.springframework.messaging.core.Message<?> < ? > org.springframework.messaging.core.Message<?> ( MessageChannel org.springframework.messaging.core.MessageChannel ) { Assert . notNull ( org.springframework.messaging.core.MessageChannel , STRING ) ; Assert . state ( org.springframework.messaging.core.MessageChannel instanceof PollableChannel , STRING ) ; long long = this . long ; Message < ? > org.springframework.messaging.core.Message<?> = ( long >= NUMBER ? ( ( PollableChannel ) org.springframework.messaging.core.MessageChannel ) . receive ( long ) : ( ( PollableChannel ) org.springframework.messaging.core.MessageChannel ) . receive ( ) ) ; if ( org.springframework.messaging.core.Message<> == null && this . logger . isTraceEnabled ( ) ) { this . logger . trace ( STRING + org.springframework.messaging.core.MessageChannel + STRING + long ) ; } return org.springframework.messaging.core.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final org.springframework.messaging.core.Message<?> < ? > org.springframework.messaging.core.Message<?> ( MessageChannel org.springframework.messaging.core.MessageChannel , Message < ? > org.springframework.messaging.core.Message<?> ) { Assert . notNull ( org.springframework.messaging.core.MessageChannel , STRING ) ; java.lang.Object java.lang.Object = org.springframework.messaging.core.Message<> . getHeaders ( ) . getReplyChannel ( ) ; java.lang.Object java.lang.Object = org.springframework.messaging.core.Message<> . getHeaders ( ) . getErrorChannel ( ) ; org.springframework.messaging.core.GenericMessagingTemplate.TemporaryReplyChannel org.springframework.messaging.core.GenericMessagingTemplate.TemporaryReplyChannel = new org.springframework.messaging.core.GenericMessagingTemplate.TemporaryReplyChannel ( ) ; org.springframework.messaging.core.Message<?> = MessageBuilder . fromMessage ( org.springframework.messaging.core.Message<> ) . setReplyChannel ( org.springframework.messaging.core.GenericMessagingTemplate.TemporaryReplyChannel ) . setErrorChannel ( org.springframework.messaging.core.GenericMessagingTemplate.TemporaryReplyChannel ) . build ( ) ; try { void ( org.springframework.messaging.core.MessageChannel , org.springframework.messaging.core.Message<> ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { org.springframework.messaging.core.GenericMessagingTemplate.TemporaryReplyChannel . void ( true ) ; throw java.lang.RuntimeException ; } Message < ? > org.springframework.messaging.core.Message<?> = this . org.springframework.messaging.core.Message<?> ( org.springframework.messaging.core.GenericMessagingTemplate.TemporaryReplyChannel ) ; if ( org.springframework.messaging.core.Message<> != null ) { org.springframework.messaging.core.Message<?> = MessageBuilder . fromMessage ( org.springframework.messaging.core.Message<> ) . setHeader ( MessageHeaders . REPLY_CHANNEL , java.lang.Object ) . setHeader ( MessageHeaders . ERROR_CHANNEL , java.lang.Object ) . build ( ) ; } return org.springframework.messaging.core.Message<> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.core.Message<?> < ? > org.springframework.messaging.core.Message<?> ( ) { return this . org.springframework.messaging.core.Message<?> ( - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.core.Message<?> < ? > org.springframework.messaging.core.Message<?> ( long long ) { try { if ( org.springframework.messaging.core.GenericMessagingTemplate .this . long < NUMBER ) { this . java.util.concurrent.CountDownLatch . void ( ) ; this . boolean = true ; } else { if ( this . java.util.concurrent.CountDownLatch . boolean ( org.springframework.messaging.core.GenericMessagingTemplate .this . long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) { this . boolean = true ; } else { this . boolean = true ; } } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } return this . org.springframework.messaging.core.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.messaging.core.Message<?> ) { return this . boolean ( org.springframework.messaging.core.Message<> , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.messaging.core.Message<?> , long long ) { this . org.springframework.messaging.core.Message<?> = org.springframework.messaging.core.Message<> ; boolean boolean = this . boolean ; this . java.util.concurrent.CountDownLatch . void ( ) ; java.lang.String java.lang.String = null ; if ( this . boolean ) { java.lang.String = STRING ; } else if ( boolean ) { java.lang.String = STRING ; } else if ( this . boolean ) { java.lang.String = STRING + STRING ; } if ( java.lang.String != null ) { if ( org.springframework.messaging.core.Log . isWarnEnabled ( ) ) { org.springframework.messaging.core.Log . warn ( java.lang.String + STRING + org.springframework.messaging.core.Message<> ) ; } if ( org.springframework.messaging.core.GenericMessagingTemplate .this . boolean ) { throw new MessageDeliveryException ( org.springframework.messaging.core.Message<> , java.lang.String ) ; } } return true ; }  <METHOD_END>
