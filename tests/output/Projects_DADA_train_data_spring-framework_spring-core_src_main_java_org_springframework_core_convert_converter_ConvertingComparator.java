<METHOD_START> public void ( Converter < S , T > org.springframework.core.convert.converter.Converter<S,T> ) { this( Comparators . comparable ( ) , org.springframework.core.convert.converter.Converter<S,T> ); }  <METHOD_END>
<METHOD_START> public void ( java.util.Comparator<T> < T > java.util.Comparator<T> , Converter < S , T > org.springframework.core.convert.converter.Converter<S,T> ) { Assert . notNull ( java.util.Comparator<T> , STRING ) ; Assert . notNull ( org.springframework.core.convert.converter.Converter<S,T> , STRING ) ; this . java.util.Comparator<T> = java.util.Comparator<T> ; this . org.springframework.core.convert.converter.Converter<S,T> = org.springframework.core.convert.converter.Converter<S,T> ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Comparator<T> < T > java.util.Comparator<T> , ConversionService org.springframework.core.convert.converter.ConversionService , java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> ) { this( java.util.Comparator<T> , new org.springframework.core.convert.converter.ConvertingComparator.ConversionServiceConverter <> ( org.springframework.core.convert.converter.ConversionService , java.lang.Class<> ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( S S , S S ) { T T = this . org.springframework.core.convert.converter.Converter<S,T> . convert ( S ) ; T T = this . org.springframework.core.convert.converter.Converter<S,T> . convert ( S ) ; return this . java.util.Comparator<T> . int ( T , T ) ; }  <METHOD_END>
<METHOD_START> public static < K , V > org.springframework.core.convert.converter.ConvertingComparator<java.util.Map.Entry<K,V>,K> < java.util.Map . java.util.Map.Entry<K,V> < K , V > , K > org.springframework.core.convert.converter.ConvertingComparator<java.util.Map.Entry<K,V>,K> ( java.util.Comparator<K> < K > java.util.Comparator<K> ) { return new org.springframework.core.convert.converter.ConvertingComparator <> ( java.util.Comparator<K> , new Converter < java.util.Map . java.util.Map.Entry<K,V> < K , V > , K > ( ) { @ java.lang.Override public K K ( java.util.Map . java.util.Map.Entry<K,V> < K , V > java.util.Map.Entry<K,V> ) { return java.util.Map.Entry<K,V> . K ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public K K ( java.util.Map . java.util.Map.Entry<K,V> < K , V > java.util.Map.Entry<K,V> ) { return java.util.Map.Entry<K,V> . K ( ) ; }  <METHOD_END>
<METHOD_START> public static < K , V > org.springframework.core.convert.converter.ConvertingComparator<java.util.Map.Entry<K,V>,V> < java.util.Map . java.util.Map.Entry<K,V> < K , V > , V > org.springframework.core.convert.converter.ConvertingComparator<java.util.Map.Entry<K,V>,V> ( java.util.Comparator<V> < V > java.util.Comparator<V> ) { return new org.springframework.core.convert.converter.ConvertingComparator <> ( java.util.Comparator<V> , new Converter < java.util.Map . java.util.Map.Entry<K,V> < K , V > , V > ( ) { @ java.lang.Override public V V ( java.util.Map . java.util.Map.Entry<K,V> < K , V > java.util.Map.Entry<K,V> ) { return java.util.Map.Entry<K,V> . V ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public V V ( java.util.Map . java.util.Map.Entry<K,V> < K , V > java.util.Map.Entry<K,V> ) { return java.util.Map.Entry<K,V> . V ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ConversionService org.springframework.core.convert.converter.ConversionService , java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> ) { Assert . notNull ( org.springframework.core.convert.converter.ConversionService , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; this . org.springframework.core.convert.converter.ConversionService = org.springframework.core.convert.converter.ConversionService ; this . java.lang.Class<? extends T> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( S S ) { return this . org.springframework.core.convert.converter.ConversionService . convert ( S , this . java.lang.Class<> ) ; }  <METHOD_END>
