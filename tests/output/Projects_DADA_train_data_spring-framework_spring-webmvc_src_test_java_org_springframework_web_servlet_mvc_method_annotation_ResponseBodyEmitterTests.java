<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter = new ResponseBodyEmitter ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( STRING , MediaType . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( STRING , MediaType . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . complete ( ) ; verifyNoMoreInteractions ( this . ResponseBodyEmitter.Handler ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . initialize ( this . ResponseBodyEmitter.Handler ) ; verify ( this . ResponseBodyEmitter.Handler ) . send ( STRING , MediaType . TEXT_PLAIN ) ; verify ( this . ResponseBodyEmitter.Handler ) . send ( STRING , MediaType . TEXT_PLAIN ) ; verify ( this . ResponseBodyEmitter.Handler ) . complete ( ) ; verifyNoMoreInteractions ( this . ResponseBodyEmitter.Handler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( STRING , MediaType . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( STRING , MediaType . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . complete ( ) ; verifyNoMoreInteractions ( this . ResponseBodyEmitter.Handler ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . initialize ( this . ResponseBodyEmitter.Handler ) ; verify ( this . ResponseBodyEmitter.Handler , times ( NUMBER ) ) . send ( STRING , MediaType . TEXT_PLAIN ) ; verify ( this . ResponseBodyEmitter.Handler ) . complete ( ) ; verifyNoMoreInteractions ( this . ResponseBodyEmitter.Handler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.IllegalStateException java.lang.IllegalStateException = new java.lang.IllegalStateException ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( STRING , MediaType . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( STRING , MediaType . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . completeWithError ( java.lang.IllegalStateException ) ; verifyNoMoreInteractions ( this . ResponseBodyEmitter.Handler ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . initialize ( this . ResponseBodyEmitter.Handler ) ; verify ( this . ResponseBodyEmitter.Handler ) . send ( STRING , MediaType . TEXT_PLAIN ) ; verify ( this . ResponseBodyEmitter.Handler ) . send ( STRING , MediaType . TEXT_PLAIN ) ; verify ( this . ResponseBodyEmitter.Handler ) . completeWithError ( java.lang.IllegalStateException ) ; verifyNoMoreInteractions ( this . ResponseBodyEmitter.Handler ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . complete ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . initialize ( this . ResponseBodyEmitter.Handler ) ; verify ( this . ResponseBodyEmitter.Handler ) . onTimeout ( any ( ) ) ; verify ( this . ResponseBodyEmitter.Handler ) . onCompletion ( any ( ) ) ; verifyNoMoreInteractions ( this . ResponseBodyEmitter.Handler ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( STRING , MediaType . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( STRING , MediaType . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . complete ( ) ; verify ( this . ResponseBodyEmitter.Handler ) . send ( STRING , MediaType . TEXT_PLAIN ) ; verify ( this . ResponseBodyEmitter.Handler ) . send ( STRING , MediaType . TEXT_PLAIN ) ; verify ( this . ResponseBodyEmitter.Handler ) . complete ( ) ; verifyNoMoreInteractions ( this . ResponseBodyEmitter.Handler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . initialize ( this . ResponseBodyEmitter.Handler ) ; verify ( this . ResponseBodyEmitter.Handler ) . onTimeout ( any ( ) ) ; verify ( this . ResponseBodyEmitter.Handler ) . onCompletion ( any ( ) ) ; verifyNoMoreInteractions ( this . ResponseBodyEmitter.Handler ) ; java.lang.IllegalStateException java.lang.IllegalStateException = new java.lang.IllegalStateException ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( STRING , MediaType . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( STRING , MediaType . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . completeWithError ( java.lang.IllegalStateException ) ; verify ( this . ResponseBodyEmitter.Handler ) . send ( STRING , MediaType . TEXT_PLAIN ) ; verify ( this . ResponseBodyEmitter.Handler ) . send ( STRING , MediaType . TEXT_PLAIN ) ; verify ( this . ResponseBodyEmitter.Handler ) . completeWithError ( java.lang.IllegalStateException ) ; verifyNoMoreInteractions ( this . ResponseBodyEmitter.Handler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . initialize ( this . ResponseBodyEmitter.Handler ) ; verify ( this . ResponseBodyEmitter.Handler ) . onTimeout ( any ( ) ) ; verify ( this . ResponseBodyEmitter.Handler ) . onCompletion ( any ( ) ) ; verifyNoMoreInteractions ( this . ResponseBodyEmitter.Handler ) ; java.io.IOException java.io.IOException = new java.io.IOException ( ) ; doThrow ( java.io.IOException ) . when ( this . ResponseBodyEmitter.Handler ) . send ( STRING , MediaType . TEXT_PLAIN ) ; try { this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( STRING , MediaType . TEXT_PLAIN ) ; fail ( STRING ) ; } catch ( java.io.IOException java.io.IOException ) { } verify ( this . ResponseBodyEmitter.Handler ) . send ( STRING , MediaType . TEXT_PLAIN ) ; verify ( this . ResponseBodyEmitter.Handler ) . completeWithError ( java.io.IOException ) ; verifyNoMoreInteractions ( this . ResponseBodyEmitter.Handler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Runnable java.lang.Runnable = mock ( java.lang.Runnable .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . onTimeout ( java.lang.Runnable ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . initialize ( this . ResponseBodyEmitter.Handler ) ; ArgumentCaptor < java.lang.Runnable > org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<java.lang.Runnable> = ArgumentCaptor . forClass ( java.lang.Runnable .class ) ; verify ( this . ResponseBodyEmitter.Handler ) . onTimeout ( org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<java.lang.Runnable> . capture ( ) ) ; verify ( this . ResponseBodyEmitter.Handler ) . onCompletion ( any ( ) ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<java.lang.Runnable> . getValue ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<java.lang.Runnable> . getValue ( ) . run ( ) ; verify ( java.lang.Runnable ) . run ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . initialize ( this . ResponseBodyEmitter.Handler ) ; ArgumentCaptor < java.lang.Runnable > org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<java.lang.Runnable> = ArgumentCaptor . forClass ( java.lang.Runnable .class ) ; verify ( this . ResponseBodyEmitter.Handler ) . onTimeout ( org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<java.lang.Runnable> . capture ( ) ) ; verify ( this . ResponseBodyEmitter.Handler ) . onCompletion ( any ( ) ) ; java.lang.Runnable java.lang.Runnable = mock ( java.lang.Runnable .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . onTimeout ( java.lang.Runnable ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<java.lang.Runnable> . getValue ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<java.lang.Runnable> . getValue ( ) . run ( ) ; verify ( java.lang.Runnable ) . run ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Runnable java.lang.Runnable = mock ( java.lang.Runnable .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . onCompletion ( java.lang.Runnable ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . initialize ( this . ResponseBodyEmitter.Handler ) ; ArgumentCaptor < java.lang.Runnable > org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<java.lang.Runnable> = ArgumentCaptor . forClass ( java.lang.Runnable .class ) ; verify ( this . ResponseBodyEmitter.Handler ) . onTimeout ( any ( ) ) ; verify ( this . ResponseBodyEmitter.Handler ) . onCompletion ( org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<java.lang.Runnable> . capture ( ) ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<java.lang.Runnable> . getValue ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<java.lang.Runnable> . getValue ( ) . run ( ) ; verify ( java.lang.Runnable ) . run ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . initialize ( this . ResponseBodyEmitter.Handler ) ; ArgumentCaptor < java.lang.Runnable > org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<java.lang.Runnable> = ArgumentCaptor . forClass ( java.lang.Runnable .class ) ; verify ( this . ResponseBodyEmitter.Handler ) . onTimeout ( any ( ) ) ; verify ( this . ResponseBodyEmitter.Handler ) . onCompletion ( org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<java.lang.Runnable> . capture ( ) ) ; java.lang.Runnable java.lang.Runnable = mock ( java.lang.Runnable .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . onCompletion ( java.lang.Runnable ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<java.lang.Runnable> . getValue ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<java.lang.Runnable> . getValue ( ) . run ( ) ; verify ( java.lang.Runnable ) . run ( ) ; }  <METHOD_END>
