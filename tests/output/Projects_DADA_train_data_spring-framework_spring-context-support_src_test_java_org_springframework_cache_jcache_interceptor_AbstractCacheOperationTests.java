<METHOD_START> protected abstract O O ( )  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { O O = O ( ) ; assertEquals ( STRING , STRING , O . getCacheName ( ) ) ; assertEquals ( STRING + O . getMethod ( ) , NUMBER , O . getAnnotations ( ) . size ( ) ) ; assertEquals ( STRING , O . getCacheAnnotation ( ) , O . getAnnotations ( ) . iterator ( ) . next ( ) ) ; assertNotNull ( STRING , O . getCacheResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( CacheInvocationParameter org.springframework.cache.jcache.interceptor.CacheInvocationParameter , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object java.lang.Object , int int ) { assertEquals ( STRING + org.springframework.cache.jcache.interceptor.CacheInvocationParameter , java.lang.Class<> , org.springframework.cache.jcache.interceptor.CacheInvocationParameter . getRawType ( ) ) ; assertEquals ( STRING + org.springframework.cache.jcache.interceptor.CacheInvocationParameter , java.lang.Object , org.springframework.cache.jcache.interceptor.CacheInvocationParameter . getValue ( ) ) ; assertEquals ( STRING + org.springframework.cache.jcache.interceptor.CacheInvocationParameter , int , org.springframework.cache.jcache.interceptor.CacheInvocationParameter . getParameterPosition ( ) ) ; }  <METHOD_END>
<METHOD_START> protected < A extends java.lang.annotation.Annotation > org.springframework.cache.jcache.interceptor.CacheMethodDetails<A> < A > org.springframework.cache.jcache.interceptor.CacheMethodDetails<A> ( java.lang.Class<A> < A > java.lang.Class<A> , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<> , java.lang.String , java.lang.Class<?>[] ) ; Assert . notNull ( java.lang.reflect.Method , STRING + java.lang.String + STRING ) ; A A = java.lang.reflect.Method . A ( java.lang.Class<A> ) ; return new DefaultCacheMethodDetails <> ( java.lang.reflect.Method , A , java.lang.String ( A ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.annotation.Annotation java.lang.annotation.Annotation ) { java.lang.Object java.lang.Object = AnnotationUtils . getValue ( java.lang.annotation.Annotation , STRING ) ; return java.lang.Object != null ? java.lang.Object . java.lang.String ( ) : STRING ; }  <METHOD_END>
