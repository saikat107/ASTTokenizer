<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.aop.support.BeanFactory ) { this . org.springframework.aop.support.BeanFactory = org.springframework.aop.support.BeanFactory ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . org.springframework.aop.support.BeanFactory instanceof ConfigurableBeanFactory ) { this . java.lang.Object = ( ( ConfigurableBeanFactory ) this . org.springframework.aop.support.BeanFactory ) . getSingletonMutex ( ) ; } else { this . java.lang.Object = new java.lang.Object ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( Advice org.springframework.aop.support.Advice ) { synchronized ( this . java.lang.Object ) { this . org.springframework.aop.support.Advice = org.springframework.aop.support.Advice ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.support.Advice org.springframework.aop.support.Advice ( ) { Advice org.springframework.aop.support.Advice = this . org.springframework.aop.support.Advice ; if ( org.springframework.aop.support.Advice != null || this . java.lang.String == null ) { return org.springframework.aop.support.Advice ; } Assert . state ( this . org.springframework.aop.support.BeanFactory != null , STRING ) ; if ( this . org.springframework.aop.support.BeanFactory . isSingleton ( this . java.lang.String ) ) { org.springframework.aop.support.Advice = this . org.springframework.aop.support.BeanFactory . getBean ( this . java.lang.String , Advice .class ) ; this . org.springframework.aop.support.Advice = org.springframework.aop.support.Advice ; return org.springframework.aop.support.Advice ; } else { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.aop.support.Advice == null ) { this . org.springframework.aop.support.Advice = this . org.springframework.aop.support.BeanFactory . getBean ( this . java.lang.String , Advice .class ) ; } return this . org.springframework.aop.support.Advice ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.Class<? extends org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor> ( ) . java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; if ( this . java.lang.String != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( this . java.lang.String ) . java.lang.StringBuilder ( STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( this . org.springframework.aop.support.Advice ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.ObjectInputStream java.io.ObjectInputStream ) throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ObjectInputStream . void ( ) ; void ( ) ; }  <METHOD_END>
