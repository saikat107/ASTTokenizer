<METHOD_START> @ Before public void void ( ) java.io.IOException { this . org.springframework.test.web.client.match.MockClientHttpRequest = new MockClientHttpRequest ( ) ; this . org.springframework.test.web.client.match.MockClientHttpRequest . getBody ( ) . write ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new XpathRequestMatchers ( STRING , null ) . node ( Matchers . notNullValue ( ) ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new XpathRequestMatchers ( STRING , null ) . node ( Matchers . nullValue ( ) ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new XpathRequestMatchers ( STRING , null ) . exists ( ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new XpathRequestMatchers ( STRING , null ) . exists ( ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new XpathRequestMatchers ( STRING , null ) . doesNotExist ( ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new XpathRequestMatchers ( STRING , null ) . doesNotExist ( ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new XpathRequestMatchers ( STRING , null ) . nodeCount ( NUMBER ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new XpathRequestMatchers ( STRING , null ) . nodeCount ( NUMBER ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new XpathRequestMatchers ( STRING , null ) . string ( STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new XpathRequestMatchers ( STRING , null ) . string ( STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new XpathRequestMatchers ( STRING , null ) . number ( NUMBER ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new XpathRequestMatchers ( STRING , null ) . number ( NUMBER ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new XpathRequestMatchers ( STRING , null ) . booleanValue ( true ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new XpathRequestMatchers ( STRING , null ) . booleanValue ( false ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
