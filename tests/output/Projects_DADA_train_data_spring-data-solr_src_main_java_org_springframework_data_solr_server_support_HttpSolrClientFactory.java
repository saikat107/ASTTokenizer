<METHOD_START> protected void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( SolrClient org.springframework.data.solr.server.support.SolrClient ) { this( org.springframework.data.solr.server.support.SolrClient , null , null ); }  <METHOD_END>
<METHOD_START> public void ( SolrClient org.springframework.data.solr.server.support.SolrClient , Credentials org.springframework.data.solr.server.support.Credentials , java.lang.String java.lang.String ) { super( org.springframework.data.solr.server.support.SolrClient ); Assert . notNull ( org.springframework.data.solr.server.support.SolrClient , STRING ) ; if ( java.lang.String != null ) { Assert . hasText ( java.lang.String , STRING ) ; } this . org.springframework.data.solr.server.support.Credentials = org.springframework.data.solr.server.support.Credentials ; this . java.lang.String = java.lang.String ; void ( this . org.springframework.data.solr.server.support.Credentials , this . java.lang.String , this . getSolrClient ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( Credentials org.springframework.data.solr.server.support.Credentials , java.lang.String java.lang.String , SolrClient org.springframework.data.solr.server.support.SolrClient ) { if ( isHttpSolrClient ( org.springframework.data.solr.server.support.SolrClient ) ) { HttpSolrClient org.springframework.data.solr.server.support.HttpSolrClient = ( HttpSolrClient ) org.springframework.data.solr.server.support.SolrClient ; if ( org.springframework.data.solr.server.support.Credentials != null && StringUtils . isNotBlank ( java.lang.String ) && boolean ( org.springframework.data.solr.server.support.HttpSolrClient . getHttpClient ( ) ) ) { AbstractHttpClient org.springframework.data.solr.server.support.AbstractHttpClient = ( AbstractHttpClient ) org.springframework.data.solr.server.support.HttpSolrClient . getHttpClient ( ) ; org.springframework.data.solr.server.support.AbstractHttpClient . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( AuthScope . ANY ) , org.springframework.data.solr.server.support.Credentials ) ; org.springframework.data.solr.server.support.AbstractHttpClient . getParams ( ) . setParameter ( AuthPNames . TARGET_AUTH_PREF , java.util.Collections . java.util.List<java.lang.String> ( java.lang.String ) ) ; } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( HttpClient org.springframework.data.solr.server.support.HttpClient ) { Assert . isInstanceOf ( AbstractHttpClient .class , org.springframework.data.solr.server.support.HttpClient , STRING ) ; return true ; }  <METHOD_END>
