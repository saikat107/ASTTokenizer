<METHOD_START> public void ( ) { this . org.springframework.boot.web.servlet.context.AnnotatedBeanDefinitionReader = new AnnotatedBeanDefinitionReader ( this ) ; this . org.springframework.boot.web.servlet.context.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( this ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this(); void ( java.lang.Class<?>[] ) ; refresh ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String ... java.lang.String[] ) { this(); void ( java.lang.String[] ) ; refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableEnvironment org.springframework.boot.web.servlet.context.ConfigurableEnvironment ) { super. setEnvironment ( org.springframework.boot.web.servlet.context.ConfigurableEnvironment ) ; this . org.springframework.boot.web.servlet.context.AnnotatedBeanDefinitionReader . setEnvironment ( org.springframework.boot.web.servlet.context.ConfigurableEnvironment ) ; this . org.springframework.boot.web.servlet.context.ClassPathBeanDefinitionScanner . setEnvironment ( org.springframework.boot.web.servlet.context.ConfigurableEnvironment ) ; }  <METHOD_END>
<METHOD_START> public void void ( BeanNameGenerator org.springframework.boot.web.servlet.context.BeanNameGenerator ) { this . org.springframework.boot.web.servlet.context.AnnotatedBeanDefinitionReader . setBeanNameGenerator ( org.springframework.boot.web.servlet.context.BeanNameGenerator ) ; this . org.springframework.boot.web.servlet.context.ClassPathBeanDefinitionScanner . setBeanNameGenerator ( org.springframework.boot.web.servlet.context.BeanNameGenerator ) ; this . getBeanFactory ( ) . registerSingleton ( AnnotationConfigUtils . CONFIGURATION_BEAN_NAME_GENERATOR , org.springframework.boot.web.servlet.context.BeanNameGenerator ) ; }  <METHOD_END>
<METHOD_START> public void void ( ScopeMetadataResolver org.springframework.boot.web.servlet.context.ScopeMetadataResolver ) { this . org.springframework.boot.web.servlet.context.AnnotatedBeanDefinitionReader . setScopeMetadataResolver ( org.springframework.boot.web.servlet.context.ScopeMetadataResolver ) ; this . org.springframework.boot.web.servlet.context.ClassPathBeanDefinitionScanner . setScopeMetadataResolver ( org.springframework.boot.web.servlet.context.ScopeMetadataResolver ) ; }  <METHOD_END>
<METHOD_START> public final void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . java.lang.Class<?>[] = java.lang.Class<?>[] ; Assert . notEmpty ( java.lang.Class<?>[] , STRING ) ; }  <METHOD_END>
<METHOD_START> public final void void ( java.lang.String ... java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; Assert . notEmpty ( java.lang.String[] , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.boot.web.servlet.context.ClassPathBeanDefinitionScanner . clearCache ( ) ; super. prepareRefresh ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ConfigurableListableBeanFactory org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory ) { super. postProcessBeanFactory ( org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory ) ; if ( this . java.lang.String[] != null && this . java.lang.String[] . int > NUMBER ) { this . org.springframework.boot.web.servlet.context.ClassPathBeanDefinitionScanner . scan ( this . java.lang.String[] ) ; } if ( this . java.lang.Class<?>[] != null && this . java.lang.Class<?>[] . int > NUMBER ) { this . org.springframework.boot.web.servlet.context.AnnotatedBeanDefinitionReader . register ( this . java.lang.Class<?>[] ) ; } }  <METHOD_END>
