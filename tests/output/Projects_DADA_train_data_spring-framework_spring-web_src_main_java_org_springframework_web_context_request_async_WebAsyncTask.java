<METHOD_START> public void ( java.util.concurrent.Callable<V> < V > java.util.concurrent.Callable<V> ) { Assert . notNull ( java.util.concurrent.Callable<V> , STRING ) ; this . java.util.concurrent.Callable<V> = java.util.concurrent.Callable<V> ; }  <METHOD_END>
<METHOD_START> public void ( long long , java.util.concurrent.Callable<V> < V > java.util.concurrent.Callable<V> ) { this( java.util.concurrent.Callable<V> ); this . java.lang.Long = long ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Long java.lang.Long , java.lang.String java.lang.String , java.util.concurrent.Callable<V> < V > java.util.concurrent.Callable<V> ) { this( java.util.concurrent.Callable<V> ); Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Long java.lang.Long , AsyncTaskExecutor org.springframework.web.context.request.async.AsyncTaskExecutor , java.util.concurrent.Callable<V> < V > java.util.concurrent.Callable<V> ) { this( java.util.concurrent.Callable<V> ); Assert . notNull ( org.springframework.web.context.request.async.AsyncTaskExecutor , STRING ) ; this . org.springframework.web.context.request.async.AsyncTaskExecutor = org.springframework.web.context.request.async.AsyncTaskExecutor ; this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public java.util.concurrent.Callable<?> < ? > java.util.concurrent.Callable<?> ( ) { return this . java.util.concurrent.Callable<V> ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return this . java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( BeanFactory org.springframework.web.context.request.async.BeanFactory ) { this . org.springframework.web.context.request.async.BeanFactory = org.springframework.web.context.request.async.BeanFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.context.request.async.AsyncTaskExecutor org.springframework.web.context.request.async.AsyncTaskExecutor ( ) { if ( this . org.springframework.web.context.request.async.AsyncTaskExecutor != null ) { return this . org.springframework.web.context.request.async.AsyncTaskExecutor ; } else if ( this . java.lang.String != null ) { Assert . state ( this . org.springframework.web.context.request.async.BeanFactory != null , STRING ) ; return this . org.springframework.web.context.request.async.BeanFactory . getBean ( this . java.lang.String , AsyncTaskExecutor .class ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.Callable<V> < V > java.util.concurrent.Callable<V> ) { this . java.util.concurrent.Callable<V> = java.util.concurrent.Callable<V> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Runnable java.lang.Runnable ) { this . java.lang.Runnable = java.lang.Runnable ; }  <METHOD_END>
<METHOD_START> org.springframework.web.context.request.async.CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor ( ) { return new CallableProcessingInterceptorAdapter ( ) { @ java.lang.Override public < T > java.lang.Object java.lang.Object ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , java.util.concurrent.Callable<T> < T > java.util.concurrent.Callable<T> ) throws java.lang.Exception { return ( java.util.concurrent.Callable<V> != null ? java.util.concurrent.Callable<V> . V ( ) : CallableProcessingInterceptor . RESULT_NONE ) ; } @ java.lang.Override public < T > void void ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , java.util.concurrent.Callable<T> < T > java.util.concurrent.Callable<T> ) throws java.lang.Exception { if ( java.lang.Runnable != null ) { java.lang.Runnable . void ( ) ; } } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.lang.Object java.lang.Object ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , java.util.concurrent.Callable<T> < T > java.util.concurrent.Callable<T> ) throws java.lang.Exception { return ( java.util.concurrent.Callable<V> != null ? java.util.concurrent.Callable<V> . V ( ) : CallableProcessingInterceptor . RESULT_NONE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > void void ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , java.util.concurrent.Callable<T> < T > java.util.concurrent.Callable<T> ) throws java.lang.Exception { if ( java.lang.Runnable != null ) { java.lang.Runnable . void ( ) ; } }  <METHOD_END>
