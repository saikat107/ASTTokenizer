<METHOD_START> public void ( ServerHttpRequest org.springframework.web.server.adapter.ServerHttpRequest , ServerHttpResponse org.springframework.web.server.adapter.ServerHttpResponse , WebSessionManager org.springframework.web.server.adapter.WebSessionManager ) { Assert . notNull ( org.springframework.web.server.adapter.ServerHttpRequest , STRING ) ; Assert . notNull ( org.springframework.web.server.adapter.ServerHttpResponse , STRING ) ; Assert . notNull ( org.springframework.web.server.adapter.ServerHttpResponse , STRING ) ; Assert . notNull ( org.springframework.web.server.adapter.ServerHttpResponse , STRING ) ; this . org.springframework.web.server.adapter.ServerHttpRequest = org.springframework.web.server.adapter.ServerHttpRequest ; this . org.springframework.web.server.adapter.ServerHttpResponse = org.springframework.web.server.adapter.ServerHttpResponse ; this . org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.WebSession> = org.springframework.web.server.adapter.WebSessionManager . getSession ( this ) . cache ( ) ; this . org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> = org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> ( org.springframework.web.server.adapter.ServerHttpRequest ) ; this . org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> = org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> ( org.springframework.web.server.adapter.ServerHttpRequest , this . org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> < MultiValueMap < java.lang.String , java.lang.String > > org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> ( ServerHttpRequest org.springframework.web.server.adapter.ServerHttpRequest ) { MediaType org.springframework.web.server.adapter.MediaType ; try { org.springframework.web.server.adapter.MediaType = org.springframework.web.server.adapter.ServerHttpRequest . getHeaders ( ) . getContentType ( ) ; if ( MediaType . APPLICATION_FORM_URLENCODED . isCompatibleWith ( org.springframework.web.server.adapter.MediaType ) ) { return org.springframework.web.server.adapter.FormHttpMessageReader . readMono ( org.springframework.web.server.adapter.ResolvableType , org.springframework.web.server.adapter.ServerHttpRequest , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) . otherwiseIfEmpty ( org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> ) . cache ( ) ; } } catch ( InvalidMediaTypeException org.springframework.web.server.adapter.InvalidMediaTypeException ) { } return org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> < MultiValueMap < java.lang.String , java.lang.String > > org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> ( ServerHttpRequest org.springframework.web.server.adapter.ServerHttpRequest , Mono < MultiValueMap < java.lang.String , java.lang.String > > org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> ) { return org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> . map ( formData -> { MultiValueMap < String , String > result = new LinkedMultiValueMap <> ( ) ; result . putAll ( request . getQueryParams ( ) ) ; result . putAll ( formData ) ; return CollectionUtils . unmodifiableMultiValueMap ( result ) ; } ) . defaultIfEmpty ( org.springframework.web.server.adapter.ServerHttpRequest . getQueryParams ( ) ) . cache ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.adapter.ServerHttpRequest org.springframework.web.server.adapter.ServerHttpRequest ( ) { return this . org.springframework.web.server.adapter.ServerHttpRequest ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.server.adapter.HttpHeaders org.springframework.web.server.adapter.HttpHeaders ( ) { return org.springframework.web.server.adapter.ServerHttpRequest ( ) . getHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.adapter.ServerHttpResponse org.springframework.web.server.adapter.ServerHttpResponse ( ) { return this . org.springframework.web.server.adapter.ServerHttpResponse ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.server.adapter.HttpHeaders org.springframework.web.server.adapter.HttpHeaders ( ) { return org.springframework.web.server.adapter.ServerHttpResponse ( ) . getHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > java.util.Optional<T> < T > java.util.Optional<T> ( java.lang.String java.lang.String ) { return java.util.Optional . java.util.Optional<T> ( ( T ) this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.WebSession> < WebSession > org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.WebSession> ( ) { return this . org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.WebSession> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T extends java.security.Principal > org.springframework.web.server.adapter.Mono<T> < T > org.springframework.web.server.adapter.Mono<T> ( ) { return Mono . empty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> < MultiValueMap < java.lang.String , java.lang.String > > org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> ( ) { return this . org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> < MultiValueMap < java.lang.String , java.lang.String > > org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> ( ) { return this . org.springframework.web.server.adapter.Mono<org.springframework.web.server.adapter.MultiValueMap<java.lang.String,java.lang.String>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.time.Instant java.time.Instant ) { return boolean ( null , java.time.Instant ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return boolean ( java.lang.String , java.time.Instant . java.time.Instant ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.time.Instant java.time.Instant ) { HttpStatus org.springframework.web.server.adapter.HttpStatus = org.springframework.web.server.adapter.ServerHttpResponse ( ) . getStatusCode ( ) ; if ( this . boolean || ( org.springframework.web.server.adapter.HttpStatus != null && ! HttpStatus . OK . equals ( org.springframework.web.server.adapter.HttpStatus ) ) ) { return this . boolean ; } if ( boolean ( java.time.Instant ) ) { if ( this . boolean ) { org.springframework.web.server.adapter.ServerHttpResponse ( ) . setStatusCode ( HttpStatus . PRECONDITION_FAILED ) ; } return this . boolean ; } boolean boolean = boolean ( java.lang.String ) ; if ( ! boolean ) { boolean ( java.time.Instant ) ; } boolean boolean = java.util.List<org.springframework.web.server.adapter.HttpMethod> . contains ( org.springframework.web.server.adapter.ServerHttpRequest ( ) . getMethod ( ) ) ; if ( this . boolean ) { org.springframework.web.server.adapter.ServerHttpResponse ( ) . setStatusCode ( boolean ? HttpStatus . NOT_MODIFIED : HttpStatus . PRECONDITION_FAILED ) ; } if ( boolean ) { if ( java.time.Instant . boolean ( java.time.Instant . java.time.Instant ) && org.springframework.web.server.adapter.HttpHeaders ( ) . getLastModified ( ) == - NUMBER ) { org.springframework.web.server.adapter.HttpHeaders ( ) . setLastModified ( java.time.Instant . long ( ) ) ; } if ( StringUtils . hasLength ( java.lang.String ) && org.springframework.web.server.adapter.HttpHeaders ( ) . getETag ( ) == null ) { org.springframework.web.server.adapter.HttpHeaders ( ) . setETag ( java.lang.String ( java.lang.String ) ) ; } } return this . boolean ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.time.Instant java.time.Instant ) { if ( java.time.Instant . boolean ( java.time.Instant . java.time.Instant ) ) { return false ; } long long = org.springframework.web.server.adapter.HttpHeaders ( ) . getIfUnmodifiedSince ( ) ; if ( long == - NUMBER ) { return false ; } java.time.Instant java.time.Instant = java.time.Instant . java.time.Instant ( long ) ; this . boolean = java.time.Instant . boolean ( java.time.Instant . java.time.Instant ( java.time.temporal.ChronoUnit . java.time.temporal.ChronoUnit ) ) ; return true ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { if ( ! StringUtils . hasLength ( java.lang.String ) ) { return false ; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ; try { java.util.List<java.lang.String> = org.springframework.web.server.adapter.HttpHeaders ( ) . getIfNoneMatch ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { return false ; } if ( java.util.List<java.lang.String> . boolean ( ) ) { return false ; } java.lang.String = java.lang.String ( java.lang.String ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { if ( StringUtils . hasLength ( java.lang.String ) && java.lang.String . java.lang.String ( STRING , STRING ) . boolean ( java.lang.String . java.lang.String ( STRING , STRING ) ) ) { this . boolean = true ; break; } } return true ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( ! StringUtils . hasLength ( java.lang.String ) ) { return java.lang.String ; } if ( ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) && java.lang.String . boolean ( STRING ) ) { return java.lang.String ; } return STRING + java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.time.Instant java.time.Instant ) { if ( java.time.Instant . boolean ( java.time.Instant . java.time.Instant ) ) { return false ; } long long = org.springframework.web.server.adapter.HttpHeaders ( ) . getIfModifiedSince ( ) ; if ( long == - NUMBER ) { return false ; } this . boolean = java.time.temporal.ChronoUnit . java.time.temporal.ChronoUnit . long ( java.time.Instant , java.time.Instant . java.time.Instant ( long ) ) >= NUMBER ; return true ; }  <METHOD_END>
