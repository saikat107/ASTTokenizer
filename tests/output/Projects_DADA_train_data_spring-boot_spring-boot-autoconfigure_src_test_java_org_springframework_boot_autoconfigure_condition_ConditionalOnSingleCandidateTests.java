<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.OnBeanSingleCandidateConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.FooConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.OnBeanSingleCandidateConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.FooConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.OnBeanSingleCandidateInAncestorsConfiguration .class ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . setParent ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.FooConfiguration .class ) ; AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.OnBeanSingleCandidateInAncestorsConfiguration .class ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . setParent ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( STRING ) ) . isEqualTo ( STRING ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.FooConfiguration .class ) ; AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . setParent ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.OnBeanSingleCandidateInAncestorsConfiguration .class ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . setParent ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( STRING ) ) . isEqualTo ( STRING ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . close ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.FooConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.BarConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.OnBeanSingleCandidateConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.FooPrimaryConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.BarConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.OnBeanSingleCandidateConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.FooPrimaryConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.BarPrimaryConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.OnBeanSingleCandidateConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.autoconfigure.condition.ExpectedException . expectCause ( isA ( java.lang.IllegalArgumentException .class ) ) ; this . org.springframework.boot.autoconfigure.condition.ExpectedException . expectMessage ( org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.OnBeanSingleCandidateTwoTypesConfiguration .class . java.lang.String ( ) ) ; void ( org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.OnBeanSingleCandidateTwoTypesConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.autoconfigure.condition.ExpectedException . expectCause ( isA ( java.lang.IllegalArgumentException .class ) ) ; this . org.springframework.boot.autoconfigure.condition.ExpectedException . expectMessage ( org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.OnBeanSingleCandidateNoTypeConfiguration .class . java.lang.String ( ) ) ; void ( org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.OnBeanSingleCandidateNoTypeConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.FooPrimaryConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.BarConfiguration .class ) ; AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . setParent ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidateTests.OnBeanSingleCandidateConfiguration .class ) ; try { org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( STRING ) ) . isEqualTo ( STRING ) ; } finally { org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { if ( java.lang.Class<?>[] . int > NUMBER ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; } this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean @ Primary public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean @ Primary public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
