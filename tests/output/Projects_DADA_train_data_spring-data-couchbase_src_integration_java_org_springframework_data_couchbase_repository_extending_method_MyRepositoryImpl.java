<METHOD_START> @ java.lang.Override public long long ( ) { CouchbaseOperations org.springframework.data.couchbase.repository.extending.method.CouchbaseOperations = org.springframework.data.couchbase.repository.extending.method.RepositoryOperationsMapping . resolve ( MyRepository .class , Item .class ) ; CouchbasePersistentEntity < java.lang.Object > org.springframework.data.couchbase.repository.extending.method.CouchbasePersistentEntity<java.lang.Object> = ( CouchbasePersistentEntity < java.lang.Object > ) org.springframework.data.couchbase.repository.extending.method.CouchbaseOperations . getConverter ( ) . getMappingContext ( ) . getRequiredPersistentEntity ( MyItem .class ) ; CouchbaseEntityInformation < ? extends java.lang.Object , java.lang.String > org.springframework.data.couchbase.repository.extending.method.CouchbaseEntityInformation<? extends java.lang.Object,java.lang.String> = new MappingCouchbaseEntityInformation < java.lang.Object , java.lang.String > ( org.springframework.data.couchbase.repository.extending.method.CouchbasePersistentEntity<java.lang.Object> ) ; Statement org.springframework.data.couchbase.repository.extending.method.Statement = N1qlUtils . createCountQueryForEntity ( org.springframework.data.couchbase.repository.extending.method.CouchbaseOperations . getCouchbaseBucket ( ) . name ( ) , org.springframework.data.couchbase.repository.extending.method.CouchbaseOperations . getConverter ( ) , org.springframework.data.couchbase.repository.extending.method.CouchbaseEntityInformation<,java.lang.String> ) ; ScanConsistency org.springframework.data.couchbase.repository.extending.method.ScanConsistency = org.springframework.data.couchbase.repository.extending.method.CouchbaseOperations . getDefaultConsistency ( ) . n1qlConsistency ( ) ; N1qlParams org.springframework.data.couchbase.repository.extending.method.N1qlParams = N1qlParams . build ( ) . consistency ( org.springframework.data.couchbase.repository.extending.method.ScanConsistency ) ; N1qlQuery org.springframework.data.couchbase.repository.extending.method.N1qlQuery = N1qlQuery . simple ( org.springframework.data.couchbase.repository.extending.method.Statement , org.springframework.data.couchbase.repository.extending.method.N1qlParams ) ; java.util.List<org.springframework.data.couchbase.repository.extending.method.CountFragment> < CountFragment > java.util.List<org.springframework.data.couchbase.repository.extending.method.CountFragment> = org.springframework.data.couchbase.repository.extending.method.CouchbaseOperations . findByN1QLProjection ( org.springframework.data.couchbase.repository.extending.method.N1qlQuery , CountFragment .class ) ; if ( java.util.List<org.springframework.data.couchbase.repository.extending.method.CountFragment> == null || java.util.List<org.springframework.data.couchbase.repository.extending.method.CountFragment> . isEmpty ( ) ) { return NUMBER ; } else { return java.util.List<org.springframework.data.couchbase.repository.extending.method.CountFragment> . get ( NUMBER ) . count * - NUMBER ; } }  <METHOD_END>
<METHOD_START> public long long ( ) { return NUMBER ; }  <METHOD_END>
