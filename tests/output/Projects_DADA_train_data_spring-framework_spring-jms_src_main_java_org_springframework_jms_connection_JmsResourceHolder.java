<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( ConnectionFactory org.springframework.jms.connection.ConnectionFactory ) { this . org.springframework.jms.connection.ConnectionFactory = org.springframework.jms.connection.ConnectionFactory ; }  <METHOD_END>
<METHOD_START> public void ( Session org.springframework.jms.connection.Session ) { void ( org.springframework.jms.connection.Session ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void ( Connection org.springframework.jms.connection.Connection , Session org.springframework.jms.connection.Session ) { void ( org.springframework.jms.connection.Connection ) ; void ( org.springframework.jms.connection.Session , org.springframework.jms.connection.Connection ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void ( ConnectionFactory org.springframework.jms.connection.ConnectionFactory , Connection org.springframework.jms.connection.Connection , Session org.springframework.jms.connection.Session ) { this . org.springframework.jms.connection.ConnectionFactory = org.springframework.jms.connection.ConnectionFactory ; void ( org.springframework.jms.connection.Connection ) ; void ( org.springframework.jms.connection.Session , org.springframework.jms.connection.Connection ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public final boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public final void void ( Connection org.springframework.jms.connection.Connection ) { Assert . isTrue ( ! this . boolean , STRING ) ; Assert . notNull ( org.springframework.jms.connection.Connection , STRING ) ; if ( ! this . java.util.List<org.springframework.jms.connection.Connection> . contains ( org.springframework.jms.connection.Connection ) ) { this . java.util.List<org.springframework.jms.connection.Connection> . add ( org.springframework.jms.connection.Connection ) ; } }  <METHOD_END>
<METHOD_START> public final void void ( Session org.springframework.jms.connection.Session ) { void ( org.springframework.jms.connection.Session , null ) ; }  <METHOD_END>
<METHOD_START> public final void void ( Session org.springframework.jms.connection.Session , Connection org.springframework.jms.connection.Connection ) { Assert . isTrue ( ! this . boolean , STRING ) ; Assert . notNull ( org.springframework.jms.connection.Session , STRING ) ; if ( ! this . java.util.List<org.springframework.jms.connection.Session> . contains ( org.springframework.jms.connection.Session ) ) { this . java.util.List<org.springframework.jms.connection.Session> . add ( org.springframework.jms.connection.Session ) ; if ( org.springframework.jms.connection.Connection != null ) { java.util.List<org.springframework.jms.connection.Session> < Session > java.util.List<org.springframework.jms.connection.Session> = this . java.util.Map<org.springframework.jms.connection.Connection,java.util.List<org.springframework.jms.connection.Session>> . get ( org.springframework.jms.connection.Connection ) ; if ( java.util.List<org.springframework.jms.connection.Session> == null ) { java.util.List<org.springframework.jms.connection.Session> = new java.util.LinkedList <> ( ) ; this . java.util.Map<org.springframework.jms.connection.Connection,java.util.List<org.springframework.jms.connection.Session>> . put ( org.springframework.jms.connection.Connection , java.util.List<org.springframework.jms.connection.Session> ) ; } java.util.List<org.springframework.jms.connection.Session> . add ( org.springframework.jms.connection.Session ) ; } } }  <METHOD_END>
<METHOD_START> public boolean boolean ( Session org.springframework.jms.connection.Session ) { return this . java.util.List<org.springframework.jms.connection.Session> . contains ( org.springframework.jms.connection.Session ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( ) { return ( ! this . java.util.List<org.springframework.jms.connection.Connection> . isEmpty ( ) ? this . java.util.List<org.springframework.jms.connection.Connection> . get ( NUMBER ) : null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( java.lang.Class<? extends org.springframework.jms.connection.Connection> < ? extends Connection > java.lang.Class<? extends org.springframework.jms.connection.Connection> ) { return CollectionUtils . findValueOfType ( this . java.util.List<org.springframework.jms.connection.Connection> , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( ) { return ( ! this . java.util.List<org.springframework.jms.connection.Session> . isEmpty ( ) ? this . java.util.List<org.springframework.jms.connection.Session> . get ( NUMBER ) : null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( java.lang.Class<? extends org.springframework.jms.connection.Session> < ? extends Session > java.lang.Class<? extends org.springframework.jms.connection.Session> ) { return org.springframework.jms.connection.Session ( java.lang.Class<> , null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( java.lang.Class<? extends org.springframework.jms.connection.Session> < ? extends Session > java.lang.Class<? extends org.springframework.jms.connection.Session> , Connection org.springframework.jms.connection.Connection ) { java.util.List<org.springframework.jms.connection.Session> < Session > java.util.List<org.springframework.jms.connection.Session> = this . java.util.List<org.springframework.jms.connection.Session> ; if ( org.springframework.jms.connection.Connection != null ) { java.util.List<org.springframework.jms.connection.Session> = this . java.util.Map<org.springframework.jms.connection.Connection,java.util.List<org.springframework.jms.connection.Session>> . get ( org.springframework.jms.connection.Connection ) ; } return CollectionUtils . findValueOfType ( java.util.List<org.springframework.jms.connection.Session> , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) org.springframework.jms.connection.JMSException { for ( Session org.springframework.jms.connection.Session : this . java.util.List<org.springframework.jms.connection.Session> ) { try { org.springframework.jms.connection.Session . commit ( ) ; } catch ( TransactionInProgressException org.springframework.jms.connection.TransactionInProgressException ) { } catch ( javax . javax.jms . javax.jms javax.jms.IllegalStateException ) { if ( this . org.springframework.jms.connection.ConnectionFactory != null ) { try { java.lang.reflect.Method java.lang.reflect.Method = this . org.springframework.jms.connection.ConnectionFactory . getClass ( ) . getMethod ( STRING ) ; java.lang.Object java.lang.Object = ReflectionUtils . invokeMethod ( java.lang.reflect.Method , this . org.springframework.jms.connection.ConnectionFactory ) ; while ( java.lang.Object != null ) { if ( TransactionSynchronizationManager . hasResource ( java.lang.Object ) ) { return; } try { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method ( STRING ) ; java.lang.Object = ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.Object ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { java.lang.Object = null ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.jms.connection.Log . isDebugEnabled ( ) ) { org.springframework.jms.connection.Log . debug ( STRING + java.lang.Throwable ) ; } } } throw javax.jms.IllegalStateException ; } } }  <METHOD_END>
<METHOD_START> public void void ( ) { for ( Session org.springframework.jms.connection.Session : this . java.util.List<org.springframework.jms.connection.Session> ) { try { org.springframework.jms.connection.Session . close ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.jms.connection.Log . debug ( STRING , java.lang.Throwable ) ; } } for ( Connection org.springframework.jms.connection.Connection : this . java.util.List<org.springframework.jms.connection.Connection> ) { ConnectionFactoryUtils . releaseConnection ( org.springframework.jms.connection.Connection , this . org.springframework.jms.connection.ConnectionFactory , true ) ; } this . java.util.List<org.springframework.jms.connection.Connection> . clear ( ) ; this . java.util.List<org.springframework.jms.connection.Session> . clear ( ) ; this . java.util.Map<org.springframework.jms.connection.Connection,java.util.List<org.springframework.jms.connection.Session>> . clear ( ) ; }  <METHOD_END>
