<METHOD_START> public void ( ) { this( new HandshakeWebSocketService ( ) ); }  <METHOD_END>
<METHOD_START> public void ( WebSocketService org.springframework.web.reactive.socket.server.support.WebSocketService ) { Assert . notNull ( org.springframework.web.reactive.socket.server.support.WebSocketService , STRING ) ; this . org.springframework.web.reactive.socket.server.support.WebSocketService = org.springframework.web.reactive.socket.server.support.WebSocketService ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.socket.server.support.WebSocketService org.springframework.web.reactive.socket.server.support.WebSocketService ( ) { return this . org.springframework.web.reactive.socket.server.support.WebSocketService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return WebSocketHandler .class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.server.support.Mono<org.springframework.web.reactive.socket.server.support.HandlerResult> < HandlerResult > org.springframework.web.reactive.socket.server.support.Mono<org.springframework.web.reactive.socket.server.support.HandlerResult> ( ServerWebExchange org.springframework.web.reactive.socket.server.support.ServerWebExchange , java.lang.Object java.lang.Object ) { WebSocketHandler org.springframework.web.reactive.socket.server.support.WebSocketHandler = ( WebSocketHandler ) java.lang.Object ; return org.springframework.web.reactive.socket.server.support.WebSocketService ( ) . handleRequest ( org.springframework.web.reactive.socket.server.support.ServerWebExchange , org.springframework.web.reactive.socket.server.support.WebSocketHandler ) . then ( Mono . empty ( ) ) ; }  <METHOD_END>
