<METHOD_START> @ Test public void void ( ) { MutablePropertySources org.springframework.core.env.MutablePropertySources = new MutablePropertySources ( ) ; org.springframework.core.env.MutablePropertySources . addLast ( new MockPropertySource ( STRING ) . withProperty ( STRING , STRING ) ) ; org.springframework.core.env.MutablePropertySources . addLast ( new MockPropertySource ( STRING ) . withProperty ( STRING , STRING ) ) ; org.springframework.core.env.MutablePropertySources . addLast ( new MockPropertySource ( STRING ) . withProperty ( STRING , STRING ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . contains ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . contains ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . contains ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . contains ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . contains ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . contains ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . contains ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . get ( STRING ) , not ( nullValue ( ) ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . get ( STRING ) . getProperty ( STRING ) , equalTo ( ( java.lang.Object ) STRING ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . get ( STRING ) , not ( nullValue ( ) ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . get ( STRING ) . getProperty ( STRING ) , equalTo ( ( java.lang.Object ) STRING ) ) ; org.springframework.core.env.MutablePropertySources . addBefore ( STRING , new MockPropertySource ( STRING ) ) ; org.springframework.core.env.MutablePropertySources . addAfter ( STRING , new MockPropertySource ( STRING ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; org.springframework.core.env.MutablePropertySources . addBefore ( STRING , new MockPropertySource ( STRING ) ) ; org.springframework.core.env.MutablePropertySources . addAfter ( STRING , new MockPropertySource ( STRING ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; org.springframework.core.env.MutablePropertySources . addLast ( new MockPropertySource ( STRING ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; org.springframework.core.env.MutablePropertySources . addFirst ( new MockPropertySource ( STRING ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertEquals ( org.springframework.core.env.MutablePropertySources . remove ( STRING ) , PropertySource . named ( STRING ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . contains ( STRING ) , is ( false ) ) ; assertEquals ( org.springframework.core.env.MutablePropertySources . remove ( STRING ) , null ) ; assertThat ( org.springframework.core.env.MutablePropertySources . size ( ) , equalTo ( NUMBER ) ) ; java.lang.String java.lang.String = STRING ; try { org.springframework.core.env.MutablePropertySources . addAfter ( java.lang.String , new MockPropertySource ( STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertTrue ( java.lang.IllegalArgumentException . java.lang.String ( ) . boolean ( STRING ) ) ; } org.springframework.core.env.MutablePropertySources . addFirst ( new MockPropertySource ( STRING ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; org.springframework.core.env.MutablePropertySources . replace ( STRING , new MockPropertySource ( STRING ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; org.springframework.core.env.MutablePropertySources . replace ( STRING , new MockPropertySource ( STRING ) ) ; try { org.springframework.core.env.MutablePropertySources . replace ( java.lang.String , new MockPropertySource ( STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertTrue ( java.lang.IllegalArgumentException . java.lang.String ( ) . boolean ( STRING ) ) ; } try { org.springframework.core.env.MutablePropertySources . addBefore ( STRING , new MockPropertySource ( STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertTrue ( java.lang.IllegalArgumentException . java.lang.String ( ) . boolean ( STRING ) ) ; } try { org.springframework.core.env.MutablePropertySources . addAfter ( STRING , new MockPropertySource ( STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertTrue ( java.lang.IllegalArgumentException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertySources org.springframework.core.env.MutablePropertySources = new MutablePropertySources ( ) ; assertThat ( org.springframework.core.env.MutablePropertySources . get ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
