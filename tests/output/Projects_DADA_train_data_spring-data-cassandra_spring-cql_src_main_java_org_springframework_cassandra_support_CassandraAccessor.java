<METHOD_START> @ java.lang.Override public void void ( ) { Assert . state ( org.springframework.cassandra.support.SessionFactory != null , STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( ConsistencyLevel org.springframework.cassandra.support.ConsistencyLevel ) { this . com.datastax.driver.core.ConsistencyLevel = org.springframework.cassandra.support.ConsistencyLevel ; }  <METHOD_END>
<METHOD_START> public org.springframework.cassandra.support.ConsistencyLevel org.springframework.cassandra.support.ConsistencyLevel ( ) { return this . com.datastax.driver.core.ConsistencyLevel ; }  <METHOD_END>
<METHOD_START> public void void ( CQLExceptionTranslator org.springframework.cassandra.support.CQLExceptionTranslator ) { Assert . notNull ( org.springframework.cassandra.support.CQLExceptionTranslator , STRING ) ; this . org.springframework.cassandra.support.CQLExceptionTranslator = org.springframework.cassandra.support.CQLExceptionTranslator ; }  <METHOD_END>
<METHOD_START> public org.springframework.cassandra.support.CQLExceptionTranslator org.springframework.cassandra.support.CQLExceptionTranslator ( ) { Assert . state ( this . org.springframework.cassandra.support.CQLExceptionTranslator != null , STRING ) ; return this . org.springframework.cassandra.support.CQLExceptionTranslator ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( RetryPolicy org.springframework.cassandra.support.RetryPolicy ) { this . com.datastax.driver.core.policies.RetryPolicy = org.springframework.cassandra.support.RetryPolicy ; }  <METHOD_END>
<METHOD_START> public org.springframework.cassandra.support.RetryPolicy org.springframework.cassandra.support.RetryPolicy ( ) { return this . com.datastax.driver.core.policies.RetryPolicy ; }  <METHOD_END>
<METHOD_START> public void void ( Session org.springframework.cassandra.support.Session ) { Assert . notNull ( org.springframework.cassandra.support.Session , STRING ) ; void ( new DefaultSessionFactory ( org.springframework.cassandra.support.Session ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public org.springframework.cassandra.support.Session org.springframework.cassandra.support.Session ( ) { Assert . state ( org.springframework.cassandra.support.SessionFactory ( ) != null , STRING ) ; return org.springframework.cassandra.support.SessionFactory ( ) . getSession ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( SessionFactory org.springframework.cassandra.support.SessionFactory ) { Assert . notNull ( org.springframework.cassandra.support.SessionFactory , STRING ) ; this . org.springframework.cassandra.support.SessionFactory = org.springframework.cassandra.support.SessionFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.cassandra.support.SessionFactory org.springframework.cassandra.support.SessionFactory ( ) { return this . org.springframework.cassandra.support.SessionFactory ; }  <METHOD_END>
<METHOD_START> protected < T extends org.springframework.cassandra.support.PreparedStatement > T T ( T T ) { ConsistencyLevel org.springframework.cassandra.support.ConsistencyLevel = org.springframework.cassandra.support.ConsistencyLevel ( ) ; if ( org.springframework.cassandra.support.ConsistencyLevel != null ) { T . setConsistencyLevel ( org.springframework.cassandra.support.ConsistencyLevel ) ; } RetryPolicy org.springframework.cassandra.support.RetryPolicy = org.springframework.cassandra.support.RetryPolicy ( ) ; if ( org.springframework.cassandra.support.RetryPolicy != null ) { T . setRetryPolicy ( org.springframework.cassandra.support.RetryPolicy ) ; } return T ; }  <METHOD_END>
<METHOD_START> protected < T extends org.springframework.cassandra.support.Statement > T T ( T T ) { ConsistencyLevel org.springframework.cassandra.support.ConsistencyLevel = org.springframework.cassandra.support.ConsistencyLevel ( ) ; if ( org.springframework.cassandra.support.ConsistencyLevel != null && T . getConsistencyLevel ( ) == org.springframework.cassandra.support.Statement . getConsistencyLevel ( ) ) { T . setConsistencyLevel ( org.springframework.cassandra.support.ConsistencyLevel ) ; } int int = int ( ) ; if ( int != - NUMBER && T . getFetchSize ( ) == org.springframework.cassandra.support.Statement . getFetchSize ( ) ) { T . setFetchSize ( int ) ; } RetryPolicy org.springframework.cassandra.support.RetryPolicy = org.springframework.cassandra.support.RetryPolicy ( ) ; if ( org.springframework.cassandra.support.RetryPolicy != null && T . getRetryPolicy ( ) == org.springframework.cassandra.support.Statement . getRetryPolicy ( ) ) { T . setRetryPolicy ( org.springframework.cassandra.support.RetryPolicy ) ; } return T ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cassandra.support.PreparedStatementBinder org.springframework.cassandra.support.PreparedStatementBinder ( java.lang.Object [] java.lang.Object[] ) { return new ArgumentPreparedStatementBinder ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cassandra.support.CassandraAccessor.RowCallbackHandlerResultSetExtractor org.springframework.cassandra.support.CassandraAccessor.RowCallbackHandlerResultSetExtractor ( RowCallbackHandler org.springframework.cassandra.support.RowCallbackHandler ) { return new org.springframework.cassandra.support.CassandraAccessor.RowCallbackHandlerResultSetExtractor ( org.springframework.cassandra.support.RowCallbackHandler ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.cassandra.support.RowMapperResultSetExtractor<T> < T > org.springframework.cassandra.support.RowMapperResultSetExtractor<T> ( RowMapper < T > org.springframework.cassandra.support.RowMapper<T> ) { return new RowMapperResultSetExtractor <> ( org.springframework.cassandra.support.RowMapper<T> ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.cassandra.support.RowMapperResultSetExtractor<T> < T > org.springframework.cassandra.support.RowMapperResultSetExtractor<T> ( RowMapper < T > org.springframework.cassandra.support.RowMapper<T> , int int ) { return new RowMapperResultSetExtractor <> ( org.springframework.cassandra.support.RowMapper<T> , int ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cassandra.support.RowMapper<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > org.springframework.cassandra.support.RowMapper<java.util.Map<java.lang.String,java.lang.Object>> ( ) { return new ColumnMapRowMapper ( ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.cassandra.support.RowMapper<T> < T > org.springframework.cassandra.support.RowMapper<T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return SingleColumnRowMapper . newInstance ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> protected static java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { return java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) . java.util.Optional<java.lang.Object> ( java.lang.Object -> java.lang.Object instanceof CqlProvider ) . java.util.Optional<java.lang.Object> ( java.lang.Object -> ( CqlProvider ) java.lang.Object ) . map ( CqlProvider :: getCql ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { if ( org.springframework.cassandra.support.Logger . isDebugEnabled ( ) ) { org.springframework.cassandra.support.Logger . debug ( java.lang.String , java.lang.Object[] ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.cassandra.support.DataAccessException org.springframework.cassandra.support.DataAccessException ( DriverException org.springframework.cassandra.support.DriverException ) { Assert . notNull ( org.springframework.cassandra.support.DriverException , STRING ) ; return org.springframework.cassandra.support.CQLExceptionTranslator ( ) . translateExceptionIfPossible ( org.springframework.cassandra.support.DriverException ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cassandra.support.DataAccessException org.springframework.cassandra.support.DataAccessException ( java.lang.String java.lang.String , java.lang.String java.lang.String , DriverException org.springframework.cassandra.support.DriverException ) { Assert . notNull ( org.springframework.cassandra.support.DriverException , STRING ) ; return org.springframework.cassandra.support.CQLExceptionTranslator ( ) . translate ( java.lang.String , java.lang.String , org.springframework.cassandra.support.DriverException ) ; }  <METHOD_END>
<METHOD_START> protected void ( RowCallbackHandler org.springframework.cassandra.support.RowCallbackHandler ) { this . org.springframework.cassandra.support.RowCallbackHandler = org.springframework.cassandra.support.RowCallbackHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ResultSet org.springframework.cassandra.support.ResultSet ) { java.util.stream.StreamSupport . java.util.stream.Stream ( org.springframework.cassandra.support.ResultSet . spliterator ( ) , false ) . forEach ( org.springframework.cassandra.support.RowCallbackHandler :: processRow ) ; return null ; }  <METHOD_END>
