<METHOD_START> public void ( NarayanaProperties org.springframework.boot.jta.narayana.NarayanaProperties ) { this . org.springframework.boot.jta.narayana.NarayanaProperties = org.springframework.boot.jta.narayana.NarayanaProperties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( boolean ( ) ) { return; } void ( this . org.springframework.boot.jta.narayana.NarayanaProperties . getTransactionManagerId ( ) ) ; void ( this . org.springframework.boot.jta.narayana.NarayanaProperties . getLogDir ( ) ) ; void ( this . org.springframework.boot.jta.narayana.NarayanaProperties . isOnePhaseCommit ( ) ) ; void ( this . org.springframework.boot.jta.narayana.NarayanaProperties . getDefaultTimeout ( ) ) ; void ( this . org.springframework.boot.jta.narayana.NarayanaProperties . getPeriodicRecoveryPeriod ( ) ) ; void ( this . org.springframework.boot.jta.narayana.NarayanaProperties . getRecoveryBackoffPeriod ( ) ) ; void ( this . org.springframework.boot.jta.narayana.NarayanaProperties . getXaResourceOrphanFilters ( ) ) ; void ( this . org.springframework.boot.jta.narayana.NarayanaProperties . getRecoveryModules ( ) ) ; void ( this . org.springframework.boot.jta.narayana.NarayanaProperties . getExpiryScanners ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) . java.net.URL ( java.lang.String ) != null ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String )			throws org.springframework.boot.jta.narayana.CoreEnvironmentBeanException { org.springframework.boot.jta.narayana.CoreEnvironmentBean ( CoreEnvironmentBean .class ) . setNodeIdentifier ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { if ( java.lang.String != null ) { org.springframework.boot.jta.narayana.ObjectStoreEnvironmentBean ( ObjectStoreEnvironmentBean .class ) . setObjectStoreDir ( java.lang.String ) ; org.springframework.boot.jta.narayana.ObjectStoreEnvironmentBean ( ObjectStoreEnvironmentBean .class , STRING ) . setObjectStoreDir ( java.lang.String ) ; org.springframework.boot.jta.narayana.ObjectStoreEnvironmentBean ( ObjectStoreEnvironmentBean .class , STRING ) . setObjectStoreDir ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { org.springframework.boot.jta.narayana.CoordinatorEnvironmentBean ( CoordinatorEnvironmentBean .class ) . setCommitOnePhase ( boolean ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int ) { org.springframework.boot.jta.narayana.CoordinatorEnvironmentBean ( CoordinatorEnvironmentBean .class ) . setDefaultTimeout ( int ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int ) { org.springframework.boot.jta.narayana.RecoveryEnvironmentBean ( RecoveryEnvironmentBean .class ) . setPeriodicRecoveryPeriod ( int ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int ) { org.springframework.boot.jta.narayana.RecoveryEnvironmentBean ( RecoveryEnvironmentBean .class ) . setRecoveryBackoffPeriod ( int ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { org.springframework.boot.jta.narayana.JTAEnvironmentBean ( JTAEnvironmentBean .class ) . setXaResourceOrphanFilterClassNames ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { org.springframework.boot.jta.narayana.RecoveryEnvironmentBean ( RecoveryEnvironmentBean .class ) . setRecoveryModuleClassNames ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { org.springframework.boot.jta.narayana.RecoveryEnvironmentBean ( RecoveryEnvironmentBean .class ) . setExpiryScannerClassNames ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { return BeanPopulator . getDefaultInstance ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> private < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { return BeanPopulator . getNamedInstance ( java.lang.Class<T> , java.lang.String ) ; }  <METHOD_END>
