<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.BeanDefinition org.springframework.web.socket.config.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.socket.config.ParserContext ) { java.lang.Object java.lang.Object = org.springframework.web.socket.config.ParserContext . extractSource ( org.w3c.dom.Element ) ; CompositeComponentDefinition org.springframework.web.socket.config.CompositeComponentDefinition = new CompositeComponentDefinition ( org.w3c.dom.Element . java.lang.String ( ) , java.lang.Object ) ; org.springframework.web.socket.config.ParserContext . pushContainingComponent ( org.springframework.web.socket.config.CompositeComponentDefinition ) ; org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference = org.springframework.web.socket.config.RuntimeBeanReference ( STRING , org.w3c.dom.Element , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference = org.springframework.web.socket.config.RuntimeBeanReference ( STRING , org.w3c.dom.Element , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference = org.springframework.web.socket.config.RuntimeBeanReference ( STRING , org.w3c.dom.Element , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference = org.springframework.web.socket.config.RuntimeBeanReference ( org.w3c.dom.Element , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.web.socket.config.RuntimeBeanReference ( org.w3c.dom.Element , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference = org.springframework.web.socket.config.RuntimeBeanReference ( org.w3c.dom.Element , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference = org.springframework.web.socket.config.RuntimeBeanReference ( org.w3c.dom.Element , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; void ( org.w3c.dom.Element , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = org.springframework.web.socket.config.RootBeanDefinition ( org.w3c.dom.Element , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.RuntimeBeanReference , java.lang.Object , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; ManagedMap < java.lang.String , java.lang.Object > org.springframework.web.socket.config.ManagedMap<java.lang.String,java.lang.Object> = org.springframework.web.socket.config.ManagedMap<java.lang.String,java.lang.Object> ( org.w3c.dom.Element , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference = org.springframework.web.socket.config.RuntimeBeanReference ( org.w3c.dom.Element , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING ) ) { RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference = org.springframework.web.socket.config.RuntimeBeanReference ( org.w3c.dom.Element , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; Assert . state ( StringUtils . hasText ( java.lang.String ) , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.lang.String = java.lang.String . java.lang.String ( ) ; Assert . state ( StringUtils . hasText ( java.lang.String ) , STRING + java.lang.String ) ; if ( DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) != null ) { java.lang.String = java.lang.String . boolean ( STRING ) ? java.lang.String + STRING : java.lang.String + STRING ; } org.springframework.web.socket.config.ManagedMap<java.lang.String,java.lang.Object> . put ( java.lang.String , org.springframework.web.socket.config.RuntimeBeanReference ) ; } } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , new SimpSessionScope ( ) ) ; RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( CustomScopeConfigurer .class ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; void ( STRING , org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; void ( org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; org.springframework.web.socket.config.ParserContext . popAndRegisterContainingComponent ( ) ; return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.socket.config.ParserContext , java.lang.Object java.lang.Object ) { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; boolean boolean = ( org.w3c.dom.Element != null && org.w3c.dom.Element . boolean ( STRING ) ) ; if ( boolean ) { RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( DefaultSimpUserRegistry .class ) ; RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( MultiServerUserRegistry .class ) ; org.springframework.web.socket.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RootBeanDefinition ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; return new RuntimeBeanReference ( java.lang.String ) ; } else { RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( DefaultSimpUserRegistry .class ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; return new RuntimeBeanReference ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.ManagedMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > org.springframework.web.socket.config.ManagedMap<java.lang.String,java.lang.Object> ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.socket.config.ParserContext , java.lang.Object java.lang.Object ) { RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( WebSocketHandlerMapping .class ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; int int = java.lang.String . boolean ( ) ? int : java.lang.Integer . java.lang.Integer ( java.lang.String ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , int ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new RuntimeBeanReference ( java.lang.String ) ) ; } ManagedMap < java.lang.String , java.lang.Object > org.springframework.web.socket.config.ManagedMap<java.lang.String,java.lang.Object> = new ManagedMap <> ( ) ; org.springframework.web.socket.config.ManagedMap<java.lang.String,java.lang.Object> . setSource ( java.lang.Object ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.socket.config.ManagedMap<java.lang.String,java.lang.Object> ) ; java.lang.String ( org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; return org.springframework.web.socket.config.ManagedMap<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference ( java.lang.String java.lang.String , org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.socket.config.ParserContext , java.lang.Object java.lang.Object ) { RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition ; if ( org.w3c.dom.Element == null ) { org.springframework.web.socket.config.RootBeanDefinition = org.springframework.web.socket.config.RootBeanDefinition ( java.lang.String ) ; } else { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element == null ) { org.springframework.web.socket.config.RootBeanDefinition = org.springframework.web.socket.config.RootBeanDefinition ( java.lang.String ) ; } else { org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( ThreadPoolTaskExecutor .class ) ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } } } ConstructorArgumentValues org.springframework.web.socket.config.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; if ( org.springframework.web.socket.config.RootBeanDefinition != null ) { org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.lang.String + STRING ) ; java.lang.String java.lang.String = java.lang.String + STRING ; void ( java.lang.String , org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , new RuntimeBeanReference ( java.lang.String ) ) ; } RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( ExecutorSubscribableChannel .class , org.springframework.web.socket.config.ConstructorArgumentValues , null ) ; ManagedList < ? super java.lang.Object > org.springframework.web.socket.config.ManagedList<? super java.lang.Object> = new ManagedList <> ( ) ; if ( org.w3c.dom.Element != null ) { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; org.springframework.web.socket.config.ManagedList<java.lang.Object> . addAll ( WebSocketNamespaceUtils . parseBeanSubElements ( org.w3c.dom.Element , org.springframework.web.socket.config.ParserContext ) ) ; } org.springframework.web.socket.config.ManagedList<java.lang.Object> . add ( new ImmutableMessageChannelInterceptor ( ) ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.socket.config.ManagedList<java.lang.Object> ) ; void ( java.lang.String , org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; return new RuntimeBeanReference ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( STRING ) ) { return null ; } RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( ThreadPoolTaskExecutor .class ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.lang.Runtime . java.lang.Runtime ( ) . int ( ) * NUMBER ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.lang.Integer . int ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.lang.Integer . int ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , true ) ; return org.springframework.web.socket.config.RootBeanDefinition ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference ( org.w3c.dom.Element org.w3c.dom.Element , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , ParserContext org.springframework.web.socket.config.ParserContext , java.lang.Object java.lang.Object ) { RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( StompSubProtocolHandler .class ) ; java.lang.String ( org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null ) { RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference = new RuntimeBeanReference ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.socket.config.RuntimeBeanReference ) ; } ConstructorArgumentValues org.springframework.web.socket.config.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( SubProtocolWebSocketHandler .class , org.springframework.web.socket.config.ConstructorArgumentValues , null ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . addPropertyValue ( STRING , org.springframework.web.socket.config.RootBeanDefinition ) ; void ( java.lang.String , org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference = new RuntimeBeanReference ( java.lang.String ) ; org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null ) { if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null ) { ManagedList < java.lang.Object > org.springframework.web.socket.config.ManagedList<java.lang.Object> = org.springframework.web.socket.config.ManagedList<java.lang.Object> ( org.w3c.dom.Element , org.springframework.web.socket.config.ParserContext ) ; RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser.DecoratingFactoryBean .class ) ; org.springframework.web.socket.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; org.springframework.web.socket.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.ManagedList<java.lang.Object> ) ; org.springframework.web.socket.config.RuntimeBeanReference = new RuntimeBeanReference ( java.lang.String ( org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ) ; } } return org.springframework.web.socket.config.RuntimeBeanReference ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference ( org.w3c.dom.Element org.w3c.dom.Element , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , ParserContext org.springframework.web.socket.config.ParserContext , java.lang.Object java.lang.Object ) { RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition ; RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference = WebSocketNamespaceUtils . registerSockJsService ( org.w3c.dom.Element , java.lang.String , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; if ( org.springframework.web.socket.config.RuntimeBeanReference != null ) { ConstructorArgumentValues org.springframework.web.socket.config.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( SockJsHttpRequestHandler .class , org.springframework.web.socket.config.ConstructorArgumentValues , null ) ; org.springframework.web.socket.config.ParserContext . getRegistry ( ) . registerAlias ( java.lang.String , java.lang.String ) ; } else { RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference = WebSocketNamespaceUtils . registerHandshakeHandler ( org.w3c.dom.Element , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; ManagedList < ? super java.lang.Object > org.springframework.web.socket.config.ManagedList<? super java.lang.Object> = WebSocketNamespaceUtils . parseBeanSubElements ( org.w3c.dom.Element , org.springframework.web.socket.config.ParserContext ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ) ; org.springframework.web.socket.config.ManagedList<java.lang.Object> . add ( new OriginHandshakeInterceptor ( java.util.List<java.lang.String> ) ) ; ConstructorArgumentValues org.springframework.web.socket.config.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; if ( org.springframework.web.socket.config.RuntimeBeanReference != null ) { org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; } org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( WebSocketHttpRequestHandler .class , org.springframework.web.socket.config.ConstructorArgumentValues , null ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.socket.config.ManagedList<java.lang.Object> ) ; } return new RuntimeBeanReference ( java.lang.String ( org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , java.lang.Object java.lang.Object , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , ParserContext org.springframework.web.socket.config.ParserContext , java.lang.Object java.lang.Object ) { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; ConstructorArgumentValues org.springframework.web.socket.config.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition ; if ( org.w3c.dom.Element != null ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , java.util.Arrays . java.util.List ( StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ) ) ; org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( SimpleBrokerMessageHandler .class , org.springframework.web.socket.config.ConstructorArgumentValues , null ) ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new RuntimeBeanReference ( java.lang.String ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new RuntimeBeanReference ( java.lang.String ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.lang.String ) ; } } else if ( org.w3c.dom.Element != null ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , java.util.Arrays . java.util.List ( StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ) ) ; MutablePropertyValues org.springframework.web.socket.config.MutablePropertyValues = new MutablePropertyValues ( ) ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.MutablePropertyValues . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.MutablePropertyValues . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.MutablePropertyValues . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.MutablePropertyValues . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.MutablePropertyValues . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.MutablePropertyValues . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.MutablePropertyValues . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.MutablePropertyValues . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.MutablePropertyValues . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } ManagedMap < java.lang.String , java.lang.Object > org.springframework.web.socket.config.ManagedMap<java.lang.String,java.lang.Object> = new ManagedMap <> ( ) ; org.springframework.web.socket.config.ManagedMap<java.lang.String,java.lang.Object> . setSource ( java.lang.Object ) ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; org.springframework.web.socket.config.ManagedMap<java.lang.String,java.lang.Object> . put ( java.lang.String , java.lang.Object ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; org.springframework.web.socket.config.ManagedMap<java.lang.String,java.lang.Object> . put ( java.lang.String , org.springframework.web.socket.config.RuntimeBeanReference ( org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.RuntimeBeanReference , java.lang.String , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ) ; } if ( ! org.springframework.web.socket.config.ManagedMap<java.lang.String,java.lang.Object> . isEmpty ( ) ) { org.springframework.web.socket.config.MutablePropertyValues . add ( STRING , org.springframework.web.socket.config.ManagedMap<java.lang.String,java.lang.Object> ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = StompBrokerRelayMessageHandler .class ; org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( java.lang.Class<> , org.springframework.web.socket.config.ConstructorArgumentValues , org.springframework.web.socket.config.MutablePropertyValues ) ; } else { throw new java.lang.IllegalStateException ( STRING ) ; } java.lang.String ( org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; return org.springframework.web.socket.config.RootBeanDefinition ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference ( RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , java.lang.String java.lang.String , ParserContext org.springframework.web.socket.config.ParserContext , java.lang.Object java.lang.Object ) { java.lang.Object java.lang.Object = WebSocketNamespaceUtils . registerScheduler ( java.lang.String , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( UserRegistryMessageHandler .class ) ; org.springframework.web.socket.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; org.springframework.web.socket.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; org.springframework.web.socket.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , java.lang.String ) ; org.springframework.web.socket.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , java.lang.Object ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; return new RuntimeBeanReference ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.socket.config.ParserContext , java.lang.Object java.lang.Object ) { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; ManagedList < ? super java.lang.Object > org.springframework.web.socket.config.ManagedList<? super java.lang.Object> = new ManagedList <> ( ) ; if ( org.w3c.dom.Element != null ) { org.springframework.web.socket.config.ManagedList<java.lang.Object> . setSource ( java.lang.Object ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING , STRING ) ) { java.lang.Object java.lang.Object = org.springframework.web.socket.config.ParserContext . getDelegate ( ) . parsePropertySubElement ( org.w3c.dom.Element , null ) ; org.springframework.web.socket.config.ManagedList<java.lang.Object> . add ( java.lang.Object ) ; } } if ( org.w3c.dom.Element == null || java.lang.Boolean . java.lang.Boolean ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) { org.springframework.web.socket.config.ManagedList<java.lang.Object> . setSource ( java.lang.Object ) ; org.springframework.web.socket.config.ManagedList<java.lang.Object> . add ( new RootBeanDefinition ( StringMessageConverter .class ) ) ; org.springframework.web.socket.config.ManagedList<java.lang.Object> . add ( new RootBeanDefinition ( ByteArrayMessageConverter .class ) ) ; if ( boolean ) { RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( MappingJackson2MessageConverter .class ) ; RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( DefaultContentTypeResolver .class ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , MimeTypeUtils . APPLICATION_JSON ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.socket.config.RootBeanDefinition ) ; GenericBeanDefinition org.springframework.web.socket.config.GenericBeanDefinition = new GenericBeanDefinition ( ) ; org.springframework.web.socket.config.GenericBeanDefinition . setBeanClass ( Jackson2ObjectMapperFactoryBean .class ) ; org.springframework.web.socket.config.GenericBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.socket.config.GenericBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.socket.config.GenericBeanDefinition ) ; org.springframework.web.socket.config.ManagedList<java.lang.Object> . add ( org.springframework.web.socket.config.RootBeanDefinition ) ; } } ConstructorArgumentValues org.springframework.web.socket.config.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.ManagedList<java.lang.Object> ) ; RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( CompositeMessageConverter .class , org.springframework.web.socket.config.ConstructorArgumentValues , null ) ; java.lang.String java.lang.String = java.lang.String ; void ( java.lang.String , org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; return new RuntimeBeanReference ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference ( org.w3c.dom.Element org.w3c.dom.Element , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , ParserContext org.springframework.web.socket.config.ParserContext , java.lang.Object java.lang.Object ) { ConstructorArgumentValues org.springframework.web.socket.config.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( SimpMessagingTemplate .class , org.springframework.web.socket.config.ConstructorArgumentValues , null ) ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.socket.config.RuntimeBeanReference ) ; java.lang.String java.lang.String = java.lang.String ; void ( java.lang.String , org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; return new RuntimeBeanReference ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.w3c.dom.Element org.w3c.dom.Element , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , ParserContext org.springframework.web.socket.config.ParserContext , java.lang.Object java.lang.Object ) { ConstructorArgumentValues org.springframework.web.socket.config.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; org.springframework.web.socket.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; MutablePropertyValues org.springframework.web.socket.config.MutablePropertyValues = new MutablePropertyValues ( ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; org.springframework.web.socket.config.MutablePropertyValues . add ( STRING , java.util.Arrays . java.util.List ( StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ) ) ; org.springframework.web.socket.config.MutablePropertyValues . add ( STRING , org.springframework.web.socket.config.RuntimeBeanReference ) ; RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( WebSocketAnnotationMethodMessageHandler .class , org.springframework.web.socket.config.ConstructorArgumentValues , org.springframework.web.socket.config.MutablePropertyValues ) ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new RuntimeBeanReference ( java.lang.String ) ) ; } RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference = org.springframework.web.socket.config.RuntimeBeanReference ( org.w3c.dom.Element , java.lang.Object , org.springframework.web.socket.config.ParserContext ) ; if ( org.springframework.web.socket.config.RuntimeBeanReference != null ) { org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.socket.config.RuntimeBeanReference ) ; } org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null ) { org.springframework.web.socket.config.MutablePropertyValues . add ( STRING , org.springframework.web.socket.config.ManagedList<java.lang.Object> ( org.w3c.dom.Element , org.springframework.web.socket.config.ParserContext ) ) ; } org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null ) { org.springframework.web.socket.config.MutablePropertyValues . add ( STRING , org.springframework.web.socket.config.ManagedList<java.lang.Object> ( org.w3c.dom.Element , org.springframework.web.socket.config.ParserContext ) ) ; } java.lang.String ( org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference ( org.w3c.dom.Element org.w3c.dom.Element , java.lang.Object java.lang.Object , ParserContext org.springframework.web.socket.config.ParserContext ) { if ( org.w3c.dom.Element . boolean ( STRING ) ) { return new RuntimeBeanReference ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } else if ( boolean ) { RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( STRING ) ; org.springframework.web.socket.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.socket.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; java.lang.String java.lang.String = org.springframework.web.socket.config.ParserContext . getReaderContext ( ) . registerWithGeneratedName ( org.springframework.web.socket.config.RootBeanDefinition ) ; org.springframework.web.socket.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.socket.config.RootBeanDefinition , java.lang.String ) ) ; return new RuntimeBeanReference ( java.lang.String ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.ManagedList<java.lang.Object> < java.lang.Object > org.springframework.web.socket.config.ManagedList<java.lang.Object> ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.socket.config.ParserContext ) { ManagedList < java.lang.Object > org.springframework.web.socket.config.ManagedList<java.lang.Object> = new ManagedList <> ( ) ; org.springframework.web.socket.config.ManagedList<java.lang.Object> . setSource ( org.springframework.web.socket.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING , STRING ) ) { java.lang.Object java.lang.Object = org.springframework.web.socket.config.ParserContext . getDelegate ( ) . parsePropertySubElement ( org.w3c.dom.Element , null ) ; org.springframework.web.socket.config.ManagedList<java.lang.Object> . add ( java.lang.Object ) ; } return org.springframework.web.socket.config.ManagedList<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference ( org.w3c.dom.Element org.w3c.dom.Element , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , ParserContext org.springframework.web.socket.config.ParserContext , java.lang.Object java.lang.Object ) { RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( DefaultUserDestinationResolver .class ) ; org.springframework.web.socket.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new RuntimeBeanReference ( java.lang.String ) ) ; } return new RuntimeBeanReference ( java.lang.String ( org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference ( org.w3c.dom.Element org.w3c.dom.Element , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , ParserContext org.springframework.web.socket.config.ParserContext , java.lang.Object java.lang.Object ) { java.lang.Object java.lang.Object = org.springframework.web.socket.config.RuntimeBeanReference ( org.w3c.dom.Element , org.springframework.web.socket.config.RuntimeBeanReference , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( UserDestinationMessageHandler .class ) ; org.springframework.web.socket.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; org.springframework.web.socket.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.socket.config.RuntimeBeanReference ) ; org.springframework.web.socket.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , java.lang.Object ) ; org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null && org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.lang.String ) ; } java.lang.String java.lang.String = java.lang.String ( org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; return new RuntimeBeanReference ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference , ParserContext org.springframework.web.socket.config.ParserContext , java.lang.Object java.lang.Object ) { RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition = new RootBeanDefinition ( WebSocketMessageBrokerStats .class ) ; RuntimeBeanReference org.springframework.web.socket.config.RuntimeBeanReference = new RuntimeBeanReference ( java.lang.String ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.socket.config.RuntimeBeanReference ) ; if ( StompBrokerRelayMessageHandler .class == org.springframework.web.socket.config.RootBeanDefinition . getBeanClass ( ) ) { org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.socket.config.RootBeanDefinition ) ; } java.lang.String java.lang.String = org.springframework.web.socket.config.RuntimeBeanReference . getBeanName ( ) + STRING ; if ( org.springframework.web.socket.config.ParserContext . getRegistry ( ) . containsBeanDefinition ( java.lang.String ) ) { org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.socket.config.ParserContext . getRegistry ( ) . getBeanDefinition ( java.lang.String ) ) ; } java.lang.String = org.springframework.web.socket.config.RuntimeBeanReference . getBeanName ( ) + STRING ; if ( org.springframework.web.socket.config.ParserContext . getRegistry ( ) . containsBeanDefinition ( java.lang.String ) ) { org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.socket.config.ParserContext . getRegistry ( ) . getBeanDefinition ( java.lang.String ) ) ; } java.lang.Object java.lang.Object = WebSocketNamespaceUtils . registerScheduler ( java.lang.String , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; org.springframework.web.socket.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.lang.Object ) ; void ( STRING , org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition , ParserContext org.springframework.web.socket.config.ParserContext , java.lang.Object java.lang.Object ) { java.lang.String java.lang.String = org.springframework.web.socket.config.ParserContext . getReaderContext ( ) . generateBeanName ( org.springframework.web.socket.config.RootBeanDefinition ) ; void ( java.lang.String , org.springframework.web.socket.config.RootBeanDefinition , org.springframework.web.socket.config.ParserContext , java.lang.Object ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.web.socket.config.RootBeanDefinition , ParserContext org.springframework.web.socket.config.ParserContext , java.lang.Object java.lang.Object ) { org.springframework.web.socket.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.socket.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.socket.config.ParserContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.web.socket.config.RootBeanDefinition ) ; org.springframework.web.socket.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.socket.config.RootBeanDefinition , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void ( WebSocketHandler org.springframework.web.socket.config.WebSocketHandler , java.util.List<org.springframework.web.socket.config.WebSocketHandlerDecoratorFactory> < WebSocketHandlerDecoratorFactory > java.util.List<org.springframework.web.socket.config.WebSocketHandlerDecoratorFactory> ) { this . org.springframework.web.socket.config.WebSocketHandler = org.springframework.web.socket.config.WebSocketHandler ; this . java.util.List<org.springframework.web.socket.config.WebSocketHandlerDecoratorFactory> = java.util.List<org.springframework.web.socket.config.WebSocketHandlerDecoratorFactory> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.WebSocketHandler org.springframework.web.socket.config.WebSocketHandler ( ) java.lang.Exception { WebSocketHandler org.springframework.web.socket.config.WebSocketHandler = this . org.springframework.web.socket.config.WebSocketHandler ; for ( WebSocketHandlerDecoratorFactory org.springframework.web.socket.config.WebSocketHandlerDecoratorFactory : this . java.util.List<org.springframework.web.socket.config.WebSocketHandlerDecoratorFactory> ) { org.springframework.web.socket.config.WebSocketHandler = org.springframework.web.socket.config.WebSocketHandlerDecoratorFactory . decorate ( org.springframework.web.socket.config.WebSocketHandler ) ; } return org.springframework.web.socket.config.WebSocketHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return WebSocketHandler .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
