<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.servlet.config.annotation.InterceptorRegistry = new InterceptorRegistry ( ) ; this . org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor = new org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor ( ) ; this . org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor = new org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.InterceptorRegistry . addInterceptor ( this . org.springframework.web.servlet.config.annotation.HandlerInterceptor ) ; java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> < HandlerInterceptor > java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> = java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> ( null ) ; assertEquals ( java.util.Arrays . java.util.List ( this . org.springframework.web.servlet.config.annotation.HandlerInterceptor ) , java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.InterceptorRegistry . addInterceptor ( this . org.springframework.web.servlet.config.annotation.HandlerInterceptor ) ; this . org.springframework.web.servlet.config.annotation.InterceptorRegistry . addInterceptor ( this . org.springframework.web.servlet.config.annotation.HandlerInterceptor ) ; java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> < HandlerInterceptor > java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> = java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> ( null ) ; assertEquals ( java.util.Arrays . java.util.List ( this . org.springframework.web.servlet.config.annotation.HandlerInterceptor , this . org.springframework.web.servlet.config.annotation.HandlerInterceptor ) , java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.InterceptorRegistry . addInterceptor ( this . org.springframework.web.servlet.config.annotation.HandlerInterceptor ) . addPathPatterns ( STRING ) . excludePathPatterns ( STRING ) ; this . org.springframework.web.servlet.config.annotation.InterceptorRegistry . addInterceptor ( this . org.springframework.web.servlet.config.annotation.HandlerInterceptor ) . addPathPatterns ( STRING ) ; assertEquals ( java.util.Arrays . java.util.List ( this . org.springframework.web.servlet.config.annotation.HandlerInterceptor ) , java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> ( STRING ) ) ; assertEquals ( java.util.Arrays . java.util.List ( this . org.springframework.web.servlet.config.annotation.HandlerInterceptor ) , java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> ( STRING ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.Object> ( ) , java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.config.annotation.InterceptorRegistry . addWebRequestInterceptor ( this . org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor ) ; java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> < HandlerInterceptor > java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> = java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> ( null ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> . size ( ) ) ; void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> . get ( NUMBER ) , this . org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.config.annotation.InterceptorRegistry . addWebRequestInterceptor ( this . org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor ) ; this . org.springframework.web.servlet.config.annotation.InterceptorRegistry . addWebRequestInterceptor ( this . org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor ) ; java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> < HandlerInterceptor > java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> = java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> ( null ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> . size ( ) ) ; void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> . get ( NUMBER ) , this . org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor ) ; void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> . get ( NUMBER ) , this . org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PathMatcher org.springframework.web.servlet.config.annotation.PathMatcher = Mockito . mock ( PathMatcher .class ) ; this . org.springframework.web.servlet.config.annotation.InterceptorRegistry . addInterceptor ( org.springframework.web.servlet.config.annotation.HandlerInterceptor ) . addPathPatterns ( STRING ) . pathMatcher ( org.springframework.web.servlet.config.annotation.PathMatcher ) ; MappedInterceptor org.springframework.web.servlet.config.annotation.MappedInterceptor = ( MappedInterceptor ) this . org.springframework.web.servlet.config.annotation.InterceptorRegistry . getInterceptors ( ) . get ( NUMBER ) ; assertSame ( org.springframework.web.servlet.config.annotation.PathMatcher , org.springframework.web.servlet.config.annotation.MappedInterceptor . getPathMatcher ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.config.annotation.InterceptorRegistry . addWebRequestInterceptor ( this . org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor ) . addPathPatterns ( STRING ) ; this . org.springframework.web.servlet.config.annotation.InterceptorRegistry . addWebRequestInterceptor ( this . org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor ) . addPathPatterns ( STRING ) ; java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> < HandlerInterceptor > java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> = java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> . size ( ) ) ; void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> . get ( NUMBER ) , this . org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor ) ; java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> = java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> . size ( ) ) ; void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> . get ( NUMBER ) , this . org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.InterceptorRegistry . addInterceptor ( this . org.springframework.web.servlet.config.annotation.HandlerInterceptor ) . excludePathPatterns ( STRING ) ; this . org.springframework.web.servlet.config.annotation.InterceptorRegistry . addInterceptor ( this . org.springframework.web.servlet.config.annotation.HandlerInterceptor ) . addPathPatterns ( STRING ) ; assertEquals ( java.util.Arrays . java.util.List ( this . org.springframework.web.servlet.config.annotation.HandlerInterceptor ) , java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> ( STRING ) ) ; assertEquals ( java.util.Arrays . java.util.List ( this . org.springframework.web.servlet.config.annotation.HandlerInterceptor , this . org.springframework.web.servlet.config.annotation.HandlerInterceptor ) , java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> ( STRING ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.Object> ( ) , java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> < HandlerInterceptor > java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> ( java.lang.String java.lang.String ) { PathMatcher org.springframework.web.servlet.config.annotation.PathMatcher = new AntPathMatcher ( ) ; java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> < HandlerInterceptor > java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> = new java.util.ArrayList<org.springframework.web.servlet.config.annotation.HandlerInterceptor> <> ( ) ; for ( java.lang.Object java.lang.Object : this . org.springframework.web.servlet.config.annotation.InterceptorRegistry . getInterceptors ( ) ) { if ( java.lang.Object instanceof MappedInterceptor ) { MappedInterceptor org.springframework.web.servlet.config.annotation.MappedInterceptor = ( MappedInterceptor ) java.lang.Object ; if ( org.springframework.web.servlet.config.annotation.MappedInterceptor . matches ( java.lang.String , org.springframework.web.servlet.config.annotation.PathMatcher ) ) { java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> . add ( org.springframework.web.servlet.config.annotation.MappedInterceptor . getInterceptor ( ) ) ; } } else if ( java.lang.Object instanceof HandlerInterceptor ) { java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> . add ( ( HandlerInterceptor ) java.lang.Object ) ; } else { fail ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; } } return java.util.List<org.springframework.web.servlet.config.annotation.HandlerInterceptor> ; }  <METHOD_END>
<METHOD_START> private void void ( HandlerInterceptor org.springframework.web.servlet.config.annotation.HandlerInterceptor , org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor ) throws java.lang.Exception { assertTrue ( org.springframework.web.servlet.config.annotation.HandlerInterceptor instanceof WebRequestHandlerInterceptorAdapter ) ; org.springframework.web.servlet.config.annotation.HandlerInterceptor . preHandle ( this . org.springframework.web.servlet.config.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.config.annotation.MockHttpServletResponse , null ) ; assertTrue ( org.springframework.web.servlet.config.annotation.InterceptorRegistryTests.TestWebRequestInterceptor . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebRequest org.springframework.web.servlet.config.annotation.WebRequest ) throws java.lang.Exception { boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebRequest org.springframework.web.servlet.config.annotation.WebRequest , ModelMap org.springframework.web.servlet.config.annotation.ModelMap ) throws java.lang.Exception {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebRequest org.springframework.web.servlet.config.annotation.WebRequest , java.lang.Exception java.lang.Exception ) throws java.lang.Exception {		}  <METHOD_END>
