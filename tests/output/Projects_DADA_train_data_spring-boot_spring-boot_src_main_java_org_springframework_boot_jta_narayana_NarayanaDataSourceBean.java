<METHOD_START> public void ( javax.sql.XADataSource javax.sql.XADataSource ) { Assert . notNull ( javax.sql.XADataSource , STRING ) ; this . javax.sql.XADataSource = javax.sql.XADataSource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.Connection java.sql.Connection ( ) java.sql.SQLException { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( TransactionalDriver . XADataSource , this . javax.sql.XADataSource ) ; return ConnectionManager . create ( null , java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.Connection java.sql.Connection ( java.lang.String java.lang.String , java.lang.String java.lang.String )			throws java.sql.SQLException { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( TransactionalDriver . XADataSource , this . javax.sql.XADataSource ) ; java.util.Properties . java.lang.Object ( TransactionalDriver . userName , java.lang.String ) ; java.util.Properties . java.lang.Object ( TransactionalDriver . password , java.lang.String ) ; return ConnectionManager . create ( null , java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.PrintWriter java.io.PrintWriter ( ) java.sql.SQLException { return this . javax.sql.XADataSource . java.io.PrintWriter ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.PrintWriter java.io.PrintWriter ) throws java.sql.SQLException { this . javax.sql.XADataSource . void ( java.io.PrintWriter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) throws java.sql.SQLException { this . javax.sql.XADataSource . void ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) java.sql.SQLException { return this . javax.sql.XADataSource . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.logging.Logger java.util.logging.Logger ( ) java.sql.SQLFeatureNotSupportedException { throw new java.sql.SQLFeatureNotSupportedException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) throws java.sql.SQLException { if ( boolean ( java.lang.Class<T> ) ) { return ( T ) this ; } if ( ClassUtils . isAssignableValue ( java.lang.Class<T> , this . javax.sql.XADataSource ) ) { return ( T ) this . javax.sql.XADataSource ; } throw new java.sql.SQLException ( java.lang.Class<? extends org.springframework.boot.jta.narayana.NarayanaDataSourceBean> ( ) + STRING + java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.sql.SQLException { return java.lang.Class<> . boolean ( java.lang.Class<? extends org.springframework.boot.jta.narayana.NarayanaDataSourceBean> ( ) ) ; }  <METHOD_END>
