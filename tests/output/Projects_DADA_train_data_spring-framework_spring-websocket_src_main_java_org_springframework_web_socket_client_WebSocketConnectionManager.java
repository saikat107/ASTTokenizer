<METHOD_START> public void ( WebSocketClient org.springframework.web.socket.client.WebSocketClient , WebSocketHandler org.springframework.web.socket.client.WebSocketHandler , java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { super( java.lang.String , java.lang.Object[] ); this . org.springframework.web.socket.client.WebSocketClient = org.springframework.web.socket.client.WebSocketClient ; this . org.springframework.web.socket.client.WebSocketHandler = org.springframework.web.socket.client.WebSocketHandler ( org.springframework.web.socket.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.socket.client.WebSocketHandler org.springframework.web.socket.client.WebSocketHandler ( WebSocketHandler org.springframework.web.socket.client.WebSocketHandler ) { return new LoggingWebSocketHandlerDecorator ( org.springframework.web.socket.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { this . org.springframework.web.socket.client.WebSocketHttpHeaders . setSecWebSocketProtocol ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . org.springframework.web.socket.client.WebSocketHttpHeaders . getSecWebSocketProtocol ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.web.socket.client.WebSocketHttpHeaders . setOrigin ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . org.springframework.web.socket.client.WebSocketHttpHeaders . getOrigin ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( HttpHeaders org.springframework.web.socket.client.HttpHeaders ) { this . org.springframework.web.socket.client.WebSocketHttpHeaders . clear ( ) ; this . org.springframework.web.socket.client.WebSocketHttpHeaders . putAll ( org.springframework.web.socket.client.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.client.HttpHeaders org.springframework.web.socket.client.HttpHeaders ( ) { return this . org.springframework.web.socket.client.WebSocketHttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.web.socket.client.WebSocketClient instanceof Lifecycle && ! ( ( Lifecycle ) org.springframework.web.socket.client.WebSocketClient ) . isRunning ( ) ) { ( ( Lifecycle ) org.springframework.web.socket.client.WebSocketClient ) . start ( ) ; } super. startInternal ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( this . org.springframework.web.socket.client.WebSocketClient instanceof Lifecycle && ( ( Lifecycle ) org.springframework.web.socket.client.WebSocketClient ) . isRunning ( ) ) { ( ( Lifecycle ) org.springframework.web.socket.client.WebSocketClient ) . stop ( ) ; } super. stopInternal ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + getUri ( ) ) ; } ListenableFuture < WebSocketSession > org.springframework.web.socket.client.ListenableFuture<org.springframework.web.socket.client.WebSocketSession> = this . org.springframework.web.socket.client.WebSocketClient . doHandshake ( this . org.springframework.web.socket.client.WebSocketHandler , this . org.springframework.web.socket.client.WebSocketHttpHeaders , getUri ( ) ) ; org.springframework.web.socket.client.ListenableFuture<org.springframework.web.socket.client.WebSocketSession> . addCallback ( new ListenableFutureCallback < WebSocketSession > ( ) { @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.client.WebSocketSession ) { org.springframework.web.socket.client.WebSocketSession = org.springframework.web.socket.client.WebSocketSession ; logger . info ( STRING ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { logger . error ( STRING , java.lang.Throwable ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.client.WebSocketSession ) { org.springframework.web.socket.client.WebSocketSession = org.springframework.web.socket.client.WebSocketSession ; logger . info ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { logger . error ( STRING , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { this . org.springframework.web.socket.client.WebSocketSession . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return ( this . org.springframework.web.socket.client.WebSocketSession != null && this . org.springframework.web.socket.client.WebSocketSession . isOpen ( ) ) ; }  <METHOD_END>
