<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractMessageListenerContainer org.springframework.integration.jms.config.AbstractMessageListenerContainer = mock ( AbstractMessageListenerContainer .class ) ; JmsTemplate org.springframework.integration.jms.config.JmsTemplate = mock ( JmsTemplate .class ) ; SubscribableJmsChannel org.springframework.integration.jms.config.SubscribableJmsChannel = new SubscribableJmsChannel ( org.springframework.integration.jms.config.AbstractMessageListenerContainer , org.springframework.integration.jms.config.JmsTemplate ) ; org.springframework.integration.jms.config.SubscribableJmsChannel . setShouldTrack ( true ) ; org.springframework.integration.jms.config.SubscribableJmsChannel . setBeanName ( STRING ) ; Message < java.lang.String > org.springframework.integration.jms.config.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; doAnswer ( invocation -> { @ SuppressWarnings ( STRING ) Message < String > msg = invocation . getArgument ( NUMBER ) ; MessageHistory history = MessageHistory . read ( msg ) ; assertTrue ( history . get ( NUMBER ) . contains ( STRING ) ) ; return null ; } ) . when ( org.springframework.integration.jms.config.JmsTemplate ) . convertAndSend ( Mockito . any ( Message .class ) ) ; org.springframework.integration.jms.config.SubscribableJmsChannel . send ( org.springframework.integration.jms.config.Message<java.lang.String> ) ; verify ( org.springframework.integration.jms.config.JmsTemplate , times ( NUMBER ) ) . convertAndSend ( Mockito . any ( Message .class ) ) ; org.springframework.integration.jms.config.SubscribableJmsChannel . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ActiveMqTestUtils . prepare ( ) ; ConfigurableApplicationContext org.springframework.integration.jms.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.config.JmsChannelHistoryTests> ( ) ) ; SubscribableChannel org.springframework.integration.jms.config.SubscribableChannel = org.springframework.integration.jms.config.ConfigurableApplicationContext . getBean ( STRING , SubscribableChannel .class ) ; PollableChannel org.springframework.integration.jms.config.PollableChannel = org.springframework.integration.jms.config.ConfigurableApplicationContext . getBean ( STRING , PollableChannel .class ) ; org.springframework.integration.jms.config.SubscribableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = org.springframework.integration.jms.config.PollableChannel . receive ( NUMBER ) ; MessageHistory org.springframework.integration.jms.config.MessageHistory = MessageHistory . read ( org.springframework.integration.jms.config.Message<> ) ; assertTrue ( org.springframework.integration.jms.config.MessageHistory . get ( NUMBER ) . contains ( STRING ) ) ; org.springframework.integration.jms.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
