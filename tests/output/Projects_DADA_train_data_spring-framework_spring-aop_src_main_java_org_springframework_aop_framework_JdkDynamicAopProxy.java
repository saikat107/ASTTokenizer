<METHOD_START> public void ( AdvisedSupport org.springframework.aop.framework.AdvisedSupport ) throws org.springframework.aop.framework.AopConfigException { Assert . notNull ( org.springframework.aop.framework.AdvisedSupport , STRING ) ; if ( org.springframework.aop.framework.AdvisedSupport . getAdvisors ( ) . length == NUMBER && org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) == AdvisedSupport . EMPTY_TARGET_SOURCE ) { throw new AopConfigException ( STRING ) ; } this . org.springframework.aop.framework.AdvisedSupport = org.springframework.aop.framework.AdvisedSupport ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return java.lang.Object ( ClassUtils . getDefaultClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.ClassLoader java.lang.ClassLoader ) { if ( org.springframework.aop.framework.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.Log . debug ( STRING + this . org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) ) ; } java.lang.Class<?> < ? > [] java.lang.Class<?>[] = AopProxyUtils . completeProxiedInterfaces ( this . org.springframework.aop.framework.AdvisedSupport , true ) ; void ( java.lang.Class<?>[] ) ; return java.lang.reflect.Proxy . java.lang.Object ( java.lang.ClassLoader , java.lang.Class<?>[] , this ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { java.lang.reflect.Method [] java.lang.reflect.Method[] = java.lang.Class<> . java.lang.reflect.Method[] ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { if ( AopUtils . isEqualsMethod ( java.lang.reflect.Method ) ) { this . boolean = true ; } if ( AopUtils . isHashCodeMethod ( java.lang.reflect.Method ) ) { this . boolean = true ; } if ( this . boolean && this . boolean ) { return; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { MethodInvocation org.springframework.aop.framework.MethodInvocation ; java.lang.Object java.lang.Object = null ; boolean boolean = false ; TargetSource org.springframework.aop.framework.TargetSource = this . org.springframework.aop.framework.AdvisedSupport . targetSource ; java.lang.Class<?> < ? > java.lang.Class<?> = null ; java.lang.Object java.lang.Object = null ; try { if ( ! this . boolean && AopUtils . isEqualsMethod ( java.lang.reflect.Method ) ) { return boolean ( java.lang.Object[] [ NUMBER ] ) ; } else if ( ! this . boolean && AopUtils . isHashCodeMethod ( java.lang.reflect.Method ) ) { return int ( ) ; } else if ( java.lang.reflect.Method . java.lang.Class<?> ( ) == DecoratingProxy .class ) { return AopProxyUtils . ultimateTargetClass ( this . org.springframework.aop.framework.AdvisedSupport ) ; } else if ( ! this . org.springframework.aop.framework.AdvisedSupport . opaque && java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( ) && java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( Advised .class ) ) { return AopUtils . invokeJoinpointUsingReflection ( this . org.springframework.aop.framework.AdvisedSupport , java.lang.reflect.Method , java.lang.Object[] ) ; } java.lang.Object java.lang.Object ; if ( this . org.springframework.aop.framework.AdvisedSupport . exposeProxy ) { java.lang.Object = AopContext . setCurrentProxy ( java.lang.Object ) ; boolean = true ; } java.lang.Object = org.springframework.aop.framework.TargetSource . getTarget ( ) ; if ( java.lang.Object != null ) { java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; } java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = this . org.springframework.aop.framework.AdvisedSupport . getInterceptorsAndDynamicInterceptionAdvice ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( java.util.List<java.lang.Object> . boolean ( ) ) { java.lang.Object [] java.lang.Object[] = AopProxyUtils . adaptArgumentsIfNecessary ( java.lang.reflect.Method , java.lang.Object[] ) ; java.lang.Object = AopUtils . invokeJoinpointUsingReflection ( java.lang.Object , java.lang.reflect.Method , java.lang.Object[] ) ; } else { org.springframework.aop.framework.MethodInvocation = new ReflectiveMethodInvocation ( java.lang.Object , java.lang.Object , java.lang.reflect.Method , java.lang.Object[] , java.lang.Class<> , java.util.List<java.lang.Object> ) ; java.lang.Object = org.springframework.aop.framework.MethodInvocation . proceed ( ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; if ( java.lang.Object != null && java.lang.Object == java.lang.Object && java.lang.Class<> != java.lang.Object .class && java.lang.Class<> . boolean ( java.lang.Object ) && ! RawTargetAccess .class . boolean ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ) { java.lang.Object = java.lang.Object ; } else if ( java.lang.Object == null && java.lang.Class<> != java.lang.Void . java.lang.Class<java.lang.Void> && java.lang.Class<> . boolean ( ) ) { throw new AopInvocationException ( STRING + java.lang.reflect.Method ) ; } return java.lang.Object ; } finally { if ( java.lang.Object != null && ! org.springframework.aop.framework.TargetSource . isStatic ( ) ) { org.springframework.aop.framework.TargetSource . releaseTarget ( java.lang.Object ) ; } if ( boolean ) { AopContext . setCurrentProxy ( java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == this ) { return true ; } if ( java.lang.Object == null ) { return false ; } org.springframework.aop.framework.JdkDynamicAopProxy org.springframework.aop.framework.JdkDynamicAopProxy ; if ( java.lang.Object instanceof org.springframework.aop.framework.JdkDynamicAopProxy ) { org.springframework.aop.framework.JdkDynamicAopProxy = ( org.springframework.aop.framework.JdkDynamicAopProxy ) java.lang.Object ; } else if ( java.lang.reflect.Proxy . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { java.lang.reflect.InvocationHandler java.lang.reflect.InvocationHandler = java.lang.reflect.Proxy . java.lang.reflect.InvocationHandler ( java.lang.Object ) ; if ( ! ( java.lang.reflect.InvocationHandler instanceof org.springframework.aop.framework.JdkDynamicAopProxy ) ) { return false ; } org.springframework.aop.framework.JdkDynamicAopProxy = ( org.springframework.aop.framework.JdkDynamicAopProxy ) java.lang.reflect.InvocationHandler ; } else { return false ; } return AopProxyUtils . equalsInProxy ( this . org.springframework.aop.framework.AdvisedSupport , org.springframework.aop.framework.JdkDynamicAopProxy . org.springframework.aop.framework.AdvisedSupport ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return org.springframework.aop.framework.JdkDynamicAopProxy .class . int ( ) * NUMBER + this . org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) . hashCode ( ) ; }  <METHOD_END>
