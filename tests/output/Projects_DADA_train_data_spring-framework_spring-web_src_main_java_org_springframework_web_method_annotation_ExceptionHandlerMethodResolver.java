<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ( AnnotationUtils . findAnnotation ( java.lang.reflect.Method , ExceptionHandler .class ) != null ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { for ( java.lang.reflect.Method java.lang.reflect.Method : MethodIntrospector . selectMethods ( java.lang.Class<> , org.springframework.web.method.annotation.MethodFilter ) ) { for ( java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > java.lang.Class<? extends java.lang.Throwable> : java.util.List<java.lang.Class<? extends java.lang.Throwable>> ( java.lang.reflect.Method ) ) { void ( java.lang.Class<> , java.lang.reflect.Method ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<java.lang.Class<? extends java.lang.Throwable>> < java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > > java.util.List<java.lang.Class<? extends java.lang.Throwable>> ( java.lang.reflect.Method java.lang.reflect.Method ) { java.util.List<java.lang.Class<? extends java.lang.Throwable>> < java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > > java.util.List<java.lang.Class<? extends java.lang.Throwable>> = new java.util.ArrayList<java.lang.Class<? extends java.lang.Throwable>> <> ( ) ; void ( java.lang.reflect.Method , java.util.List<java.lang.Class<? extends java.lang.Throwable>> ) ; if ( java.util.List<java.lang.Class<? extends java.lang.Throwable>> . boolean ( ) ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) { if ( java.lang.Throwable .class . boolean ( java.lang.Class<> ) ) { java.util.List<java.lang.Class<? extends java.lang.Throwable>> . boolean ( ( java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > ) java.lang.Class<> ) ; } } } Assert . notEmpty ( java.util.List<java.lang.Class<? extends java.lang.Throwable>> , STRING + java.lang.reflect.Method + STRING ) ; return java.util.List<java.lang.Class<? extends java.lang.Throwable>> ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.reflect.Method java.lang.reflect.Method , java.util.List<java.lang.Class<? extends java.lang.Throwable>> < java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > > java.util.List<java.lang.Class<? extends java.lang.Throwable>> ) { ExceptionHandler org.springframework.web.method.annotation.ExceptionHandler = AnnotationUtils . findAnnotation ( java.lang.reflect.Method , ExceptionHandler .class ) ; java.util.List<java.lang.Class<? extends java.lang.Throwable>> . boolean ( java.util.Arrays . java.util.List ( org.springframework.web.method.annotation.ExceptionHandler . value ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > java.lang.Class<? extends java.lang.Throwable> , java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.reflect.Method java.lang.reflect.Method = this . java.util.Map<java.lang.Class<? extends java.lang.Throwable>,java.lang.reflect.Method> . java.lang.reflect.Method ( java.lang.Class<> , java.lang.reflect.Method ) ; if ( java.lang.reflect.Method != null && ! java.lang.reflect.Method . boolean ( java.lang.reflect.Method ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> + STRING + java.lang.reflect.Method + STRING + java.lang.reflect.Method + STRING ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ! this . java.util.Map<java.lang.Class<? extends java.lang.Throwable>,java.lang.reflect.Method> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Exception java.lang.Exception ) { return java.lang.reflect.Method ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Throwable java.lang.Throwable ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) ) ; if ( java.lang.reflect.Method == null ) { java.lang.Throwable java.lang.Throwable = java.lang.Throwable . java.lang.Throwable ( ) ; if ( java.lang.Throwable != null ) { java.lang.reflect.Method = java.lang.reflect.Method ( java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) ) ; } } return java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > java.lang.Class<? extends java.lang.Throwable> ) { java.lang.reflect.Method java.lang.reflect.Method = this . java.util.Map<java.lang.Class<? extends java.lang.Throwable>,java.lang.reflect.Method> . java.lang.reflect.Method ( java.lang.Class<> ) ; if ( java.lang.reflect.Method == null ) { java.lang.reflect.Method = java.lang.reflect.Method ( java.lang.Class<> ) ; this . java.util.Map<java.lang.Class<? extends java.lang.Throwable>,java.lang.reflect.Method> . java.lang.reflect.Method ( java.lang.Class<> , ( java.lang.reflect.Method != null ? java.lang.reflect.Method : java.lang.reflect.Method ) ) ; } return ( java.lang.reflect.Method != java.lang.reflect.Method ? java.lang.reflect.Method : null ) ; }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > java.lang.Class<? extends java.lang.Throwable> ) { java.util.List<java.lang.Class<? extends java.lang.Throwable>> < java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > > java.util.List<java.lang.Class<? extends java.lang.Throwable>> = new java.util.ArrayList<java.lang.Class<? extends java.lang.Throwable>> <> ( ) ; for ( java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > java.lang.Class<? extends java.lang.Throwable> : this . java.util.Map<java.lang.Class<? extends java.lang.Throwable>,java.lang.reflect.Method> . java.util.Set<java.lang.Class<? extends java.lang.Throwable>> ( ) ) { if ( java.lang.Class<> . boolean ( java.lang.Class<> ) ) { java.util.List<java.lang.Class<? extends java.lang.Throwable>> . boolean ( java.lang.Class<> ) ; } } if ( ! java.util.List<java.lang.Class<? extends java.lang.Throwable>> . boolean ( ) ) { java.util.Collections . void ( java.util.List<java.lang.Class<? extends java.lang.Throwable>> , new ExceptionDepthComparator ( java.lang.Class<> ) ) ; return this . java.util.Map<java.lang.Class<? extends java.lang.Throwable>,java.lang.reflect.Method> . java.lang.reflect.Method ( java.util.List<java.lang.Class<? extends java.lang.Throwable>> . java.lang.Class<? extends java.lang.Throwable> ( NUMBER ) ) ; } else { return null ; } }  <METHOD_END>
