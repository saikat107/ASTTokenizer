<METHOD_START> @ Before public void void ( ) java.lang.Exception { ReactiveRepositoryFactorySupport org.springframework.data.couchbase.repository.ReactiveRepositoryFactorySupport = new ReactiveCouchbaseRepositoryFactory ( org.springframework.data.couchbase.repository.ReactiveRepositoryOperationsMapping , org.springframework.data.couchbase.repository.IndexManager ) ; org.springframework.data.couchbase.repository.ReactiveUserRepository = org.springframework.data.couchbase.repository.ReactiveRepositoryFactorySupport . getRepository ( ReactiveUserRepository .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { try { org.springframework.data.couchbase.repository.Bucket . remove ( java.lang.String ) ; } catch ( DocumentDoesNotExistException org.springframework.data.couchbase.repository.DocumentDoesNotExistException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; ReactiveUser org.springframework.data.couchbase.repository.ReactiveUser = new ReactiveUser ( java.lang.String , STRING , NUMBER ) ; org.springframework.data.couchbase.repository.ReactiveUserRepository . save ( org.springframework.data.couchbase.repository.ReactiveUser ) . block ( ) ; ReactiveUser org.springframework.data.couchbase.repository.ReactiveUser = org.springframework.data.couchbase.repository.ReactiveUserRepository . findOne ( java.lang.String ) . block ( ) ; assertEquals ( org.springframework.data.couchbase.repository.ReactiveUser . getKey ( ) , org.springframework.data.couchbase.repository.ReactiveUser . getKey ( ) ) ; assertEquals ( org.springframework.data.couchbase.repository.ReactiveUser . getUsername ( ) , org.springframework.data.couchbase.repository.ReactiveUser . getUsername ( ) ) ; assertTrue ( org.springframework.data.couchbase.repository.ReactiveUserRepository . exists ( java.lang.String ) . block ( ) ) ; org.springframework.data.couchbase.repository.ReactiveUserRepository . delete ( org.springframework.data.couchbase.repository.ReactiveUser ) . block ( ) ; assertNull ( org.springframework.data.couchbase.repository.ReactiveUserRepository . findOne ( java.lang.String ) . block ( ) ) ; assertFalse ( org.springframework.data.couchbase.repository.ReactiveUserRepository . exists ( java.lang.String ) . block ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.couchbase.repository.Bucket . query ( ViewQuery . from ( STRING , STRING ) . stale ( Stale . FALSE ) ) ; java.util.List<org.springframework.data.couchbase.repository.ReactiveUser> < ReactiveUser > java.util.List<org.springframework.data.couchbase.repository.ReactiveUser> = org.springframework.data.couchbase.repository.ReactiveUserRepository . findAll ( ) . collectList ( ) . block ( ) ; int int = NUMBER ; for ( ReactiveUser org.springframework.data.couchbase.repository.ReactiveUser : java.util.List<org.springframework.data.couchbase.repository.ReactiveUser> ) { int ++ ; assertNotNull ( org.springframework.data.couchbase.repository.ReactiveUser . getKey ( ) ) ; assertNotNull ( org.springframework.data.couchbase.repository.ReactiveUser . getUsername ( ) ) ; } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.couchbase.repository.Bucket . query ( ViewQuery . from ( STRING , STRING ) . stale ( Stale . FALSE ) ) ; assertEquals ( STRING , org.springframework.data.couchbase.repository.ReactiveUserRepository . count ( ) . block ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReactiveUser org.springframework.data.couchbase.repository.ReactiveUser = org.springframework.data.couchbase.repository.ReactiveUserRepository . findByUsername ( STRING ) . single ( ) . block ( ) ; assertNotNull ( org.springframework.data.couchbase.repository.ReactiveUser ) ; assertEquals ( STRING , org.springframework.data.couchbase.repository.ReactiveUser . getKey ( ) ) ; assertEquals ( STRING , org.springframework.data.couchbase.repository.ReactiveUser . getUsername ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { ReactiveUser org.springframework.data.couchbase.repository.ReactiveUser = org.springframework.data.couchbase.repository.ReactiveUserRepository . findByUsernameBadSelect ( STRING ) . single ( ) . block ( ) ; fail ( STRING ) ; } catch ( CouchbaseQueryExecutionException org.springframework.data.couchbase.repository.CouchbaseQueryExecutionException ) { assertTrue ( STRING + org.springframework.data.couchbase.repository.CouchbaseQueryExecutionException , org.springframework.data.couchbase.repository.CouchbaseQueryExecutionException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( STRING + org.springframework.data.couchbase.repository.CouchbaseQueryExecutionException , org.springframework.data.couchbase.repository.CouchbaseQueryExecutionException . getMessage ( ) . contains ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReactiveUser org.springframework.data.couchbase.repository.ReactiveUser = org.springframework.data.couchbase.repository.ReactiveUserRepository . findByUsernameWithSpelAndPlaceholder ( ) . take ( NUMBER ) . blockLast ( ) ; assertNotNull ( org.springframework.data.couchbase.repository.ReactiveUser ) ; assert ( org.springframework.data.couchbase.repository.ReactiveUser . getUsername ( ) . startsWith ( STRING ) ) ; assert ( org.springframework.data.couchbase.repository.ReactiveUser . getUsername ( ) . startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReactiveUser org.springframework.data.couchbase.repository.ReactiveUser = org.springframework.data.couchbase.repository.ReactiveUserRepository . findByUsernameRegexAndUsernameIn ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) . take ( NUMBER ) . blockLast ( ) ; assertNotNull ( org.springframework.data.couchbase.repository.ReactiveUser ) ; assertEquals ( STRING , org.springframework.data.couchbase.repository.ReactiveUser . getKey ( ) ) ; assertEquals ( STRING , org.springframework.data.couchbase.repository.ReactiveUser . getUsername ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.couchbase.repository.ReactiveUser> < ReactiveUser > java.util.List<org.springframework.data.couchbase.repository.ReactiveUser> = org.springframework.data.couchbase.repository.ReactiveUserRepository . findByUsernameContains ( STRING ) . collectList ( ) . block ( ) ; assertNotNull ( java.util.List<org.springframework.data.couchbase.repository.ReactiveUser> ) ; assertFalse ( java.util.List<org.springframework.data.couchbase.repository.ReactiveUser> . isEmpty ( ) ) ; for ( ReactiveUser org.springframework.data.couchbase.repository.ReactiveUser : java.util.List<org.springframework.data.couchbase.repository.ReactiveUser> ) { assertTrue ( org.springframework.data.couchbase.repository.ReactiveUser . getUsername ( ) . startsWith ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { ReactiveUser org.springframework.data.couchbase.repository.ReactiveUser = org.springframework.data.couchbase.repository.ReactiveUserRepository . findByUsernameNear ( STRING ) . single ( ) . block ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { if ( ! java.lang.IllegalArgumentException . java.lang.String ( ) . boolean ( STRING ) ) { fail ( java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } } }  <METHOD_END>
