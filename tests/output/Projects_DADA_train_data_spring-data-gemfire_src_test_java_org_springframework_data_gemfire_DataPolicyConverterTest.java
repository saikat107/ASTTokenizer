<METHOD_START> protected int int ( ) { for ( byte byte = NUMBER ; byte < java.lang.Byte . byte ; byte ++ ) { try { assertNotNull ( DataPolicy . fromOrdinal ( byte ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { return byte ; } catch ( java.lang.Error java.lang.Error ) { return byte ; } } throw new java.lang.IndexOutOfBoundsException ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( int ( ) , DataPolicyConverter . Policy . values ( ) . length - NUMBER ) ; assertEquals ( DataPolicy . EMPTY , DataPolicyConverter . Policy . EMPTY . toDataPolicy ( ) ) ; assertEquals ( DataPolicy . NORMAL , DataPolicyConverter . Policy . NORMAL . toDataPolicy ( ) ) ; assertEquals ( DataPolicy . PRELOADED , DataPolicyConverter . Policy . PRELOADED . toDataPolicy ( ) ) ; assertEquals ( DataPolicy . PARTITION , DataPolicyConverter . Policy . PARTITION . toDataPolicy ( ) ) ; assertEquals ( DataPolicy . PERSISTENT_PARTITION , DataPolicyConverter . Policy . PERSISTENT_PARTITION . toDataPolicy ( ) ) ; assertEquals ( DataPolicy . REPLICATE , DataPolicyConverter . Policy . REPLICATE . toDataPolicy ( ) ) ; assertEquals ( DataPolicy . PERSISTENT_REPLICATE , DataPolicyConverter . Policy . PERSISTENT_REPLICATE . toDataPolicy ( ) ) ; assertEquals ( DataPolicy . DEFAULT , DataPolicyConverter . Policy . DEFAULT . toDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( DataPolicy . EMPTY , org.springframework.data.gemfire.DataPolicyConverter . convert ( STRING ) ) ; assertEquals ( DataPolicy . PARTITION , org.springframework.data.gemfire.DataPolicyConverter . convert ( STRING ) ) ; assertEquals ( DataPolicy . PERSISTENT_REPLICATE , org.springframework.data.gemfire.DataPolicyConverter . convert ( STRING ) ) ; assertNull ( org.springframework.data.gemfire.DataPolicyConverter . convert ( STRING ) ) ; assertNull ( org.springframework.data.gemfire.DataPolicyConverter . convert ( null ) ) ; }  <METHOD_END>
