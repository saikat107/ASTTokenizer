<METHOD_START> public void void ( ) { ClientCodecConfigurer org.springframework.web.reactive.function.client.ClientCodecConfigurer = new ClientCodecConfigurer ( ) ; org.springframework.web.reactive.function.client.ClientCodecConfigurer . getReaders ( ) . forEach ( this :: ExchangeStrategies.Builder ) ; org.springframework.web.reactive.function.client.ClientCodecConfigurer . getWriters ( ) . forEach ( this :: ExchangeStrategies.Builder ) ; }  <METHOD_END>
<METHOD_START> public void void ( ApplicationContext org.springframework.web.reactive.function.client.ApplicationContext ) { org.springframework.web.reactive.function.client.ApplicationContext . getBeansOfType ( HttpMessageReader .class ) . values ( ) . forEach ( this :: ExchangeStrategies.Builder ) ; org.springframework.web.reactive.function.client.ApplicationContext . getBeansOfType ( HttpMessageWriter .class ) . values ( ) . forEach ( this :: ExchangeStrategies.Builder ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ExchangeStrategies . ExchangeStrategies.Builder ExchangeStrategies.Builder ( HttpMessageReader < ? > org.springframework.web.reactive.function.client.HttpMessageReader<?> ) { Assert . notNull ( org.springframework.web.reactive.function.client.HttpMessageReader<> , STRING ) ; this . java.util.List<org.springframework.web.reactive.function.client.HttpMessageReader<?>> . add ( org.springframework.web.reactive.function.client.HttpMessageReader<> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ExchangeStrategies . ExchangeStrategies.Builder ExchangeStrategies.Builder ( Decoder < ? > org.springframework.web.reactive.function.client.Decoder<?> ) { Assert . notNull ( org.springframework.web.reactive.function.client.Decoder<> , STRING ) ; return ExchangeStrategies.Builder ( new DecoderHttpMessageReader <> ( org.springframework.web.reactive.function.client.Decoder<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ExchangeStrategies . ExchangeStrategies.Builder ExchangeStrategies.Builder ( HttpMessageWriter < ? > org.springframework.web.reactive.function.client.HttpMessageWriter<?> ) { Assert . notNull ( org.springframework.web.reactive.function.client.HttpMessageWriter<> , STRING ) ; this . java.util.List<org.springframework.web.reactive.function.client.HttpMessageWriter<?>> . add ( org.springframework.web.reactive.function.client.HttpMessageWriter<> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ExchangeStrategies . ExchangeStrategies.Builder ExchangeStrategies.Builder ( Encoder < ? > org.springframework.web.reactive.function.client.Encoder<?> ) { Assert . notNull ( org.springframework.web.reactive.function.client.Encoder<> , STRING ) ; return ExchangeStrategies.Builder ( new EncoderHttpMessageWriter <> ( org.springframework.web.reactive.function.client.Encoder<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.ExchangeStrategies org.springframework.web.reactive.function.client.ExchangeStrategies ( ) { return new org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder.DefaultExchangeStrategies ( this . java.util.List<org.springframework.web.reactive.function.client.HttpMessageReader<?>> , this . java.util.List<org.springframework.web.reactive.function.client.HttpMessageWriter<?>> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.web.reactive.function.client.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.web.reactive.function.client.HttpMessageReader<?>> , java.util.List<org.springframework.web.reactive.function.client.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.web.reactive.function.client.HttpMessageWriter<?>> ) { this . java.util.List<org.springframework.web.reactive.function.client.HttpMessageReader<?>> = java.util.List<org.springframework.web.reactive.function.client.HttpMessageReader<?>> ( java.util.List<org.springframework.web.reactive.function.client.HttpMessageReader<?>> ) ; this . java.util.List<org.springframework.web.reactive.function.client.HttpMessageWriter<?>> = java.util.List<org.springframework.web.reactive.function.client.HttpMessageWriter<?>> ( java.util.List<org.springframework.web.reactive.function.client.HttpMessageWriter<?>> ) ; }  <METHOD_END>
<METHOD_START> private static < T > java.util.List<T> < T > java.util.List<T> ( java.util.List<? extends T> < ? extends T > java.util.List<? extends T> ) { return java.util.Collections . java.util.List<T> ( new java.util.ArrayList<> <> ( java.util.List<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> ( ) { return this . java.util.List<org.springframework.web.reactive.function.client.HttpMessageReader<?>> :: stream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> ( ) { return this . java.util.List<org.springframework.web.reactive.function.client.HttpMessageWriter<?>> :: stream ; }  <METHOD_END>
