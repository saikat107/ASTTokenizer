<METHOD_START> private void ( ) { }  <METHOD_END>
<METHOD_START> public static java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( EntityManager org.springframework.data.jpa.repository.query.EntityManager , JpaEntityGraph org.springframework.data.jpa.repository.query.JpaEntityGraph , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( org.springframework.data.jpa.repository.query.JpaEntityGraph == null ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; } EntityGraph < ? > org.springframework.data.jpa.repository.query.EntityGraph<?> = org.springframework.data.jpa.repository.query.EntityGraph<?> ( org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.JpaEntityGraph , java.lang.Class<> ) ; if ( org.springframework.data.jpa.repository.query.EntityGraph<> == null ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; } return java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.jpa.repository.query.JpaEntityGraph . getType ( ) . getKey ( ) , org.springframework.data.jpa.repository.query.EntityGraph<> ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.jpa.repository.query.EntityGraph<?> < ? > org.springframework.data.jpa.repository.query.EntityGraph<?> ( EntityManager org.springframework.data.jpa.repository.query.EntityManager , JpaEntityGraph org.springframework.data.jpa.repository.query.JpaEntityGraph , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( org.springframework.data.jpa.repository.query.EntityManager , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.JpaEntityGraph , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . isTrue ( boolean , STRING ) ; Assert . isTrue ( java.lang.reflect.Method != null , STRING ) ; try { return org.springframework.data.jpa.repository.query.EntityManager . getEntityGraph ( org.springframework.data.jpa.repository.query.JpaEntityGraph . getName ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { return org.springframework.data.jpa.repository.query.EntityGraph<?> ( org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.JpaEntityGraph , java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> private static org.springframework.data.jpa.repository.query.EntityGraph<?> < ? > org.springframework.data.jpa.repository.query.EntityGraph<?> ( EntityManager org.springframework.data.jpa.repository.query.EntityManager , JpaEntityGraph org.springframework.data.jpa.repository.query.JpaEntityGraph , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( org.springframework.data.jpa.repository.query.EntityManager , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.JpaEntityGraph , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . isTrue ( org.springframework.data.jpa.repository.query.JpaEntityGraph . isAdHocEntityGraph ( ) , STRING + org.springframework.data.jpa.repository.query.JpaEntityGraph + STRING ) ; EntityGraph < ? > org.springframework.data.jpa.repository.query.EntityGraph<?> = org.springframework.data.jpa.repository.query.EntityManager . createEntityGraph ( java.lang.Class<> ) ; void ( org.springframework.data.jpa.repository.query.JpaEntityGraph , org.springframework.data.jpa.repository.query.EntityGraph<> ) ; return org.springframework.data.jpa.repository.query.EntityGraph<> ; }  <METHOD_END>
<METHOD_START> static void void ( JpaEntityGraph org.springframework.data.jpa.repository.query.JpaEntityGraph , EntityGraph < ? > org.springframework.data.jpa.repository.query.EntityGraph<?> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( org.springframework.data.jpa.repository.query.JpaEntityGraph . getAttributePaths ( ) ) ; java.util.Collections . void ( java.util.List<java.lang.String> ) ; java.util.Collections . void ( java.util.List<java.lang.String> ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { if ( ! java.lang.String . boolean ( STRING ) ) { if ( org.springframework.data.jpa.repository.query.AttributeNode<?> ( java.lang.String , org.springframework.data.jpa.repository.query.EntityGraph<> ) == null ) { org.springframework.data.jpa.repository.query.EntityGraph<> . addAttributeNodes ( java.lang.String ) ; } continue; } java.lang.String [] java.lang.String[] = StringUtils . delimitedListToStringArray ( java.lang.String , STRING ) ; Subgraph < ? > org.springframework.data.jpa.repository.query.Subgraph<?> = null ; for ( int int = NUMBER ; int < java.lang.String[] . int - NUMBER ; int ++ ) { org.springframework.data.jpa.repository.query.Subgraph<?> = int == NUMBER ? org.springframework.data.jpa.repository.query.Subgraph<?> ( java.lang.String[] [ int ] , org.springframework.data.jpa.repository.query.EntityGraph<> ) : org.springframework.data.jpa.repository.query.Subgraph<> . addSubgraph ( java.lang.String[] [ int ] ) ; } org.springframework.data.jpa.repository.query.Subgraph<> . addAttributeNodes ( java.lang.String[] [ java.lang.String[] . int - NUMBER ] ) ; } }  <METHOD_END>
<METHOD_START> private static org.springframework.data.jpa.repository.query.Subgraph<?> < ? > org.springframework.data.jpa.repository.query.Subgraph<?> ( java.lang.String java.lang.String , EntityGraph < ? > org.springframework.data.jpa.repository.query.EntityGraph<?> ) { Subgraph < ? > org.springframework.data.jpa.repository.query.Subgraph<?> = org.springframework.data.jpa.repository.query.Subgraph<?> ( java.lang.String , org.springframework.data.jpa.repository.query.EntityGraph<> ) ; return org.springframework.data.jpa.repository.query.Subgraph<> != null ? org.springframework.data.jpa.repository.query.Subgraph<> : org.springframework.data.jpa.repository.query.EntityGraph<> . addSubgraph ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.jpa.repository.query.Subgraph<?> < ? > org.springframework.data.jpa.repository.query.Subgraph<?> ( java.lang.String java.lang.String , EntityGraph < ? > org.springframework.data.jpa.repository.query.EntityGraph<?> ) { AttributeNode < ? > org.springframework.data.jpa.repository.query.AttributeNode<?> = org.springframework.data.jpa.repository.query.AttributeNode<?> ( java.lang.String , org.springframework.data.jpa.repository.query.EntityGraph<> ) ; if ( org.springframework.data.jpa.repository.query.AttributeNode<> != null && ! ObjectUtils . isEmpty ( org.springframework.data.jpa.repository.query.AttributeNode<> . getSubgraphs ( ) ) ) { return org.springframework.data.jpa.repository.query.AttributeNode<> . getSubgraphs ( ) . values ( ) . iterator ( ) . next ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.jpa.repository.query.AttributeNode<?> < ? > org.springframework.data.jpa.repository.query.AttributeNode<?> ( java.lang.String java.lang.String , EntityGraph < ? > org.springframework.data.jpa.repository.query.EntityGraph<?> ) { for ( AttributeNode < ? > org.springframework.data.jpa.repository.query.AttributeNode<?> : org.springframework.data.jpa.repository.query.EntityGraph<> . getAttributeNodes ( ) ) { if ( ObjectUtils . nullSafeEquals ( org.springframework.data.jpa.repository.query.AttributeNode<> . getAttributeName ( ) , java.lang.String ) ) { return org.springframework.data.jpa.repository.query.AttributeNode<> ; } } return null ; }  <METHOD_END>
