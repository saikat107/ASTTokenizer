<METHOD_START> public void ( MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor , MessageGroupStore org.springframework.integration.aggregator.MessageGroupStore , CorrelationStrategy org.springframework.integration.aggregator.CorrelationStrategy , ReleaseStrategy org.springframework.integration.aggregator.ReleaseStrategy ) { Assert . notNull ( org.springframework.integration.aggregator.MessageGroupProcessor , STRING ) ; Assert . notNull ( org.springframework.integration.aggregator.MessageGroupStore , STRING ) ; void ( org.springframework.integration.aggregator.MessageGroupStore ) ; this . org.springframework.integration.aggregator.MessageGroupProcessor = org.springframework.integration.aggregator.MessageGroupProcessor ; this . org.springframework.integration.aggregator.CorrelationStrategy = ( org.springframework.integration.aggregator.CorrelationStrategy == null ? new HeaderAttributeCorrelationStrategy ( IntegrationMessageHeaderAccessor . CORRELATION_ID ) : org.springframework.integration.aggregator.CorrelationStrategy ) ; this . org.springframework.integration.aggregator.ReleaseStrategy = org.springframework.integration.aggregator.ReleaseStrategy == null ? new SimpleSequenceSizeReleaseStrategy ( ) : org.springframework.integration.aggregator.ReleaseStrategy ; this . boolean = this . org.springframework.integration.aggregator.ReleaseStrategy instanceof SequenceSizeReleaseStrategy ; }  <METHOD_END>
<METHOD_START> public void ( MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor , MessageGroupStore org.springframework.integration.aggregator.MessageGroupStore ) { this( org.springframework.integration.aggregator.MessageGroupProcessor , org.springframework.integration.aggregator.MessageGroupStore , null , null ); }  <METHOD_END>
<METHOD_START> public void ( MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor ) { this( org.springframework.integration.aggregator.MessageGroupProcessor , new SimpleMessageStore ( NUMBER ) , null , null ); }  <METHOD_END>
<METHOD_START> public void void ( LockRegistry org.springframework.integration.aggregator.LockRegistry ) { Assert . isTrue ( ! this . boolean , STRING ) ; Assert . notNull ( org.springframework.integration.aggregator.LockRegistry , STRING ) ; this . org.springframework.integration.aggregator.LockRegistry = org.springframework.integration.aggregator.LockRegistry ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public final void void ( MessageGroupStore org.springframework.integration.aggregator.MessageGroupStore ) { this . org.springframework.integration.aggregator.MessageGroupStore = org.springframework.integration.aggregator.MessageGroupStore ; org.springframework.integration.aggregator.MessageGroupStore . registerMessageGroupExpiryCallback ( ( messageGroupStore , group ) -> this . forceReleaseProcessor . processMessageGroup ( group ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( CorrelationStrategy org.springframework.integration.aggregator.CorrelationStrategy ) { Assert . notNull ( org.springframework.integration.aggregator.CorrelationStrategy , STRING ) ; this . org.springframework.integration.aggregator.CorrelationStrategy = org.springframework.integration.aggregator.CorrelationStrategy ; }  <METHOD_END>
<METHOD_START> public void void ( ReleaseStrategy org.springframework.integration.aggregator.ReleaseStrategy ) { Assert . notNull ( org.springframework.integration.aggregator.ReleaseStrategy , STRING ) ; this . org.springframework.integration.aggregator.ReleaseStrategy = org.springframework.integration.aggregator.ReleaseStrategy ; this . boolean = this . org.springframework.integration.aggregator.ReleaseStrategy instanceof SequenceSizeReleaseStrategy ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.aggregator.Expression ) { this . org.springframework.integration.aggregator.Expression = org.springframework.integration.aggregator.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.integration.aggregator.Advice> < Advice > java.util.List<org.springframework.integration.aggregator.Advice> ) { Assert . notNull ( java.util.List<org.springframework.integration.aggregator.Advice> , STRING ) ; this . java.util.List<org.springframework.integration.aggregator.Advice> = java.util.List<org.springframework.integration.aggregator.Advice> ; }  <METHOD_END>
<METHOD_START> public void void ( MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor ) { Assert . notNull ( org.springframework.integration.aggregator.MessageGroupProcessor , STRING ) ; this . org.springframework.integration.aggregator.MessageGroupProcessor = org.springframework.integration.aggregator.MessageGroupProcessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TaskScheduler org.springframework.integration.aggregator.TaskScheduler ) { super. setTaskScheduler ( org.springframework.integration.aggregator.TaskScheduler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.integration.aggregator.ApplicationEventPublisher ) { this . org.springframework.integration.aggregator.ApplicationEventPublisher = org.springframework.integration.aggregator.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; Assert . state ( ! ( this . java.lang.String != null && this . org.springframework.integration.aggregator.MessageChannel != null ) , STRING ) ; BeanFactory org.springframework.integration.aggregator.BeanFactory = this . getBeanFactory ( ) ; if ( org.springframework.integration.aggregator.BeanFactory != null ) { if ( this . org.springframework.integration.aggregator.MessageGroupProcessor instanceof BeanFactoryAware ) { ( ( BeanFactoryAware ) this . org.springframework.integration.aggregator.MessageGroupProcessor ) . setBeanFactory ( org.springframework.integration.aggregator.BeanFactory ) ; } if ( this . org.springframework.integration.aggregator.CorrelationStrategy instanceof BeanFactoryAware ) { ( ( BeanFactoryAware ) this . org.springframework.integration.aggregator.CorrelationStrategy ) . setBeanFactory ( org.springframework.integration.aggregator.BeanFactory ) ; } if ( this . org.springframework.integration.aggregator.ReleaseStrategy instanceof BeanFactoryAware ) { ( ( BeanFactoryAware ) this . org.springframework.integration.aggregator.ReleaseStrategy ) . setBeanFactory ( org.springframework.integration.aggregator.BeanFactory ) ; } } if ( this . org.springframework.integration.aggregator.MessageChannel == null ) { this . org.springframework.integration.aggregator.MessageChannel = new NullChannel ( ) ; } if ( this . boolean ) { Assert . isInstanceOf ( SequenceSizeReleaseStrategy .class , this . org.springframework.integration.aggregator.ReleaseStrategy , STRING + this . org.springframework.integration.aggregator.ReleaseStrategy . getClass ( ) . getSimpleName ( ) + STRING ) ; ( ( SequenceSizeReleaseStrategy ) this . org.springframework.integration.aggregator.ReleaseStrategy ) . setReleasePartialSequences ( this . boolean ) ; } if ( this . org.springframework.integration.aggregator.EvaluationContext == null ) { this . org.springframework.integration.aggregator.EvaluationContext = ExpressionUtils . createStandardEvaluationContext ( getBeanFactory ( ) ) ; } if ( this . boolean ) { this . org.springframework.integration.aggregator.Log . warn ( STRING + STRING ) ; } this . boolean = true ; this . org.springframework.integration.aggregator.MessageGroupProcessor = org.springframework.integration.aggregator.MessageGroupProcessor ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.aggregator.MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor ( ) { MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor = new org.springframework.integration.aggregator.AbstractCorrelatingMessageHandler.ForceReleaseMessageGroupProcessor ( ) ; if ( this . org.springframework.integration.aggregator.Expression != null && ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.integration.aggregator.Advice> ) ) { ProxyFactory org.springframework.integration.aggregator.ProxyFactory = new ProxyFactory ( org.springframework.integration.aggregator.MessageGroupProcessor ) ; this . java.util.List<org.springframework.integration.aggregator.Advice> . forEach ( org.springframework.integration.aggregator.ProxyFactory :: addAdvice ) ; return ( MessageGroupProcessor ) org.springframework.integration.aggregator.ProxyFactory . getProxy ( getApplicationContext ( ) . getClassLoader ( ) ) ; } return org.springframework.integration.aggregator.MessageGroupProcessor ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.aggregator.MessageChannel ) { Assert . notNull ( org.springframework.integration.aggregator.MessageChannel , STRING ) ; this . org.springframework.integration.aggregator.MessageChannel = org.springframework.integration.aggregator.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { if ( ! this . boolean && boolean ) { void ( new SequenceSizeReleaseStrategy ( ) ) ; } this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.aggregator.MessageGroupStore org.springframework.integration.aggregator.MessageGroupStore ( ) { return this . org.springframework.integration.aggregator.MessageGroupStore ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.util.UUID,java.util.concurrent.ScheduledFuture<?>> < java.util.UUID , java.util.concurrent.ScheduledFuture<?> < ? > > java.util.Map<java.util.UUID,java.util.concurrent.ScheduledFuture<?>> ( ) { return this . java.util.Map<java.util.UUID,java.util.concurrent.ScheduledFuture<?>> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.aggregator.MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor ( ) { return this . org.springframework.integration.aggregator.MessageGroupProcessor ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.aggregator.CorrelationStrategy org.springframework.integration.aggregator.CorrelationStrategy ( ) { return this . org.springframework.integration.aggregator.CorrelationStrategy ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.aggregator.ReleaseStrategy org.springframework.integration.aggregator.ReleaseStrategy ( ) { return this . org.springframework.integration.aggregator.ReleaseStrategy ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.aggregator.MessageChannel org.springframework.integration.aggregator.MessageChannel ( ) { if ( this . java.lang.String != null ) { synchronized ( this ) { if ( this . java.lang.String != null ) { this . org.springframework.integration.aggregator.MessageChannel = getChannelResolver ( ) . resolveDestination ( this . java.lang.String ) ; this . java.lang.String = null ; } } } return this . org.springframework.integration.aggregator.MessageChannel ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.aggregator.LockRegistry org.springframework.integration.aggregator.LockRegistry ( ) { return this . org.springframework.integration.aggregator.LockRegistry ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.aggregator.Expression org.springframework.integration.aggregator.Expression ( ) { return this . org.springframework.integration.aggregator.Expression ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.aggregator.EvaluationContext org.springframework.integration.aggregator.EvaluationContext ( ) { return this . org.springframework.integration.aggregator.EvaluationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.aggregator.Message<?> ) throws java.lang.Exception { java.lang.Object java.lang.Object = this . org.springframework.integration.aggregator.CorrelationStrategy . getCorrelationKey ( org.springframework.integration.aggregator.Message<> ) ; Assert . state ( java.lang.Object != null , STRING ) ; if ( this . org.springframework.integration.aggregator.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.aggregator.Log . debug ( STRING + java.lang.Object + STRING + org.springframework.integration.aggregator.Message<> ) ; } java.util.UUID java.util.UUID = UUIDConverter . getUUID ( java.lang.Object ) ; java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = this . org.springframework.integration.aggregator.LockRegistry . obtain ( java.util.UUID . java.lang.String ( ) ) ; java.util.concurrent.locks.Lock . void ( ) ; try { java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> = this . java.util.Map<java.util.UUID,java.util.concurrent.ScheduledFuture<?>> . java.util.concurrent.ScheduledFuture<?> ( java.util.UUID ) ; if ( java.util.concurrent.ScheduledFuture<> != null ) { boolean boolean = java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; if ( boolean && this . org.springframework.integration.aggregator.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.aggregator.Log . debug ( STRING + java.lang.Object + STRING ) ; } } MessageGroup org.springframework.integration.aggregator.MessageGroup = this . org.springframework.integration.aggregator.MessageGroupStore . getMessageGroup ( java.lang.Object ) ; if ( this . boolean ) { org.springframework.integration.aggregator.MessageGroup = new org.springframework.integration.aggregator.AbstractCorrelatingMessageHandler.SequenceAwareMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; } if ( ! org.springframework.integration.aggregator.MessageGroup . isComplete ( ) && org.springframework.integration.aggregator.MessageGroup . canAdd ( org.springframework.integration.aggregator.Message<> ) ) { if ( this . org.springframework.integration.aggregator.Log . isTraceEnabled ( ) ) { this . org.springframework.integration.aggregator.Log . trace ( STRING + org.springframework.integration.aggregator.MessageGroup + STRING ) ; } org.springframework.integration.aggregator.MessageGroup = this . org.springframework.integration.aggregator.MessageGroup ( java.lang.Object , org.springframework.integration.aggregator.Message<> ) ; if ( this . org.springframework.integration.aggregator.ReleaseStrategy . canRelease ( org.springframework.integration.aggregator.MessageGroup ) ) { java.util.Collection<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.aggregator.Message<?>> = null ; try { java.util.Collection<org.springframework.integration.aggregator.Message<?>> = this . java.util.Collection<org.springframework.integration.aggregator.Message<?>> ( org.springframework.integration.aggregator.Message<> , java.lang.Object , org.springframework.integration.aggregator.MessageGroup ) ; } finally { this . void ( org.springframework.integration.aggregator.MessageGroup , java.util.Collection<org.springframework.integration.aggregator.Message<?>> ) ; } if ( ! boolean ( ) && this . long > NUMBER ) { void ( org.springframework.integration.aggregator.MessageGroup , this . long ) ; } } else { void ( org.springframework.integration.aggregator.MessageGroup ) ; } } else { void ( org.springframework.integration.aggregator.Message<> ) ; } } finally { java.util.concurrent.locks.Lock . void ( ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> private void void ( MessageGroup org.springframework.integration.aggregator.MessageGroup , long long ) { java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroup . getGroupId ( ) ; java.util.UUID java.util.UUID = UUIDConverter . getUUID ( java.lang.Object ) ; java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> = getTaskScheduler ( ) . schedule ( ( ) { Lock lock = this . lockRegistry . obtain ( groupUuid . toString ( ) ) ; try { lock . lockInterruptibly ( ) ; try { this . expireGroupScheduledFutures . remove ( groupUuid ) ; MessageGroup groupNow = this . messageStore . getMessageGroup ( groupUuid ) ; boolean removeGroup = groupNow . size ( ) == NUMBER && groupNow . getLastModified ( ) <= ( System . currentTimeMillis ( ) - this . minimumTimeoutForEmptyGroups ) ; if ( removeGroup ) { if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( STRING + groupUuid ) ; } this . messageStore . removeMessageGroup ( groupId ) ; } } finally { lock . unlock ( ) ; } } catch ( InterruptedException e ) { Thread . currentThread ( ) . interrupt ( ) ; if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( STRING + STRING + groupId + STRING ) ; } removeEmptyGroupAfterTimeout ( messageGroup , timeout ) ; } } , new java.util.Date ( java.lang.System . long ( ) + long ) ) ; if ( this . org.springframework.integration.aggregator.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.aggregator.Log . debug ( STRING + java.lang.Object + STRING ) ; } this . java.util.Map<java.util.UUID,java.util.concurrent.ScheduledFuture<?>> . java.util.concurrent.ScheduledFuture<?> ( java.util.UUID , java.util.concurrent.ScheduledFuture<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( MessageGroup org.springframework.integration.aggregator.MessageGroup ) { final java.lang.Long java.lang.Long = java.lang.Long ( org.springframework.integration.aggregator.MessageGroup ) ; if ( java.lang.Long != null && java.lang.Long >= NUMBER ) { if ( java.lang.Long > NUMBER ) { final java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroup . getGroupId ( ) ; java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> = getTaskScheduler ( ) . schedule ( ( ) { try { processForceRelease ( groupId ) ; } catch ( MessageDeliveryException e ) { if ( AbstractCorrelatingMessageHandler .this . logger . isDebugEnabled ( ) ) { AbstractCorrelatingMessageHandler .this . logger . debug ( STRING + groupId + STRING + e . getMessage ( ) ) ; } scheduleGroupToForceComplete ( groupId ) ; } } , new java.util.Date ( java.lang.System . long ( ) + java.lang.Long ) ) ; if ( this . org.springframework.integration.aggregator.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.aggregator.Log . debug ( STRING + org.springframework.integration.aggregator.MessageGroup + STRING ) ; } this . java.util.Map<java.util.UUID,java.util.concurrent.ScheduledFuture<?>> . java.util.concurrent.ScheduledFuture<?> ( UUIDConverter . getUUID ( java.lang.Object ) , java.util.concurrent.ScheduledFuture<> ) ; } else { this . org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { MessageGroup org.springframework.integration.aggregator.MessageGroup = this . org.springframework.integration.aggregator.MessageGroupStore . getMessageGroup ( java.lang.Object ) ; void ( org.springframework.integration.aggregator.MessageGroup ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { MessageGroup org.springframework.integration.aggregator.MessageGroup = this . org.springframework.integration.aggregator.MessageGroupStore . getMessageGroup ( java.lang.Object ) ; this . org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; }  <METHOD_END>
<METHOD_START> private void void ( Message < ? > org.springframework.integration.aggregator.Message<?> ) { this . messagingTemplate . send ( org.springframework.integration.aggregator.MessageChannel ( ) , org.springframework.integration.aggregator.Message<> ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( MessageGroup org.springframework.integration.aggregator.MessageGroup , java.util.Collection<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.aggregator.Message<?>> );  <METHOD_END>
<METHOD_START> protected void void ( MessageGroup org.springframework.integration.aggregator.MessageGroup , java.util.Collection<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.aggregator.Message<?>> , boolean boolean ) { void ( org.springframework.integration.aggregator.MessageGroup , java.util.Collection<org.springframework.integration.aggregator.Message<?>> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( MessageGroup org.springframework.integration.aggregator.MessageGroup ) { java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroup . getGroupId ( ) ; java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = this . org.springframework.integration.aggregator.LockRegistry . obtain ( UUIDConverter . getUUID ( java.lang.Object ) . toString ( ) ) ; boolean boolean = true ; try { java.util.concurrent.locks.Lock . void ( ) ; try { java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> = this . java.util.Map<java.util.UUID,java.util.concurrent.ScheduledFuture<?>> . java.util.concurrent.ScheduledFuture<?> ( UUIDConverter . getUUID ( java.lang.Object ) ) ; if ( java.util.concurrent.ScheduledFuture<> != null ) { boolean boolean = java.util.concurrent.ScheduledFuture<> . boolean ( false ) ; if ( boolean && this . org.springframework.integration.aggregator.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.aggregator.Log . debug ( STRING + org.springframework.integration.aggregator.MessageGroup + STRING ) ; } } MessageGroup org.springframework.integration.aggregator.MessageGroup = org.springframework.integration.aggregator.MessageGroup ; if ( ! org.springframework.integration.aggregator.MessageGroup . isComplete ( ) ) { org.springframework.integration.aggregator.MessageGroup = this . org.springframework.integration.aggregator.MessageGroupStore . getMessageGroup ( java.lang.Object ) ; } long long = org.springframework.integration.aggregator.MessageGroup . getLastModified ( ) ; int int = org.springframework.integration.aggregator.MessageGroup . size ( ) ; if ( ( ! org.springframework.integration.aggregator.MessageGroup . isComplete ( ) || int == NUMBER ) && org.springframework.integration.aggregator.MessageGroup . getLastModified ( ) == long && org.springframework.integration.aggregator.MessageGroup . getTimestamp ( ) == org.springframework.integration.aggregator.MessageGroup . getTimestamp ( ) ) { if ( int > NUMBER ) { if ( this . org.springframework.integration.aggregator.ReleaseStrategy . canRelease ( org.springframework.integration.aggregator.MessageGroup ) ) { void ( java.lang.Object , org.springframework.integration.aggregator.MessageGroup ) ; } else { void ( java.lang.Object , org.springframework.integration.aggregator.MessageGroup ) ; } if ( ! this . boolean ) { void ( org.springframework.integration.aggregator.MessageGroup , org.springframework.integration.aggregator.MessageGroup . getMessages ( ) , true ) ; boolean = false ; } } else { boolean = long <= ( java.lang.System . long ( ) - this . long ) ; if ( boolean && this . org.springframework.integration.aggregator.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.aggregator.Log . debug ( STRING + java.lang.Object ) ; } } } else { boolean = false ; if ( this . org.springframework.integration.aggregator.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.aggregator.Log . debug ( STRING + java.lang.Object + STRING ) ; } } } catch ( MessageDeliveryException org.springframework.integration.aggregator.MessageDeliveryException ) { boolean = false ; if ( this . org.springframework.integration.aggregator.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.aggregator.Log . debug ( STRING + java.lang.Object + STRING + STRING ) ; } throw org.springframework.integration.aggregator.MessageDeliveryException ; } finally { try { if ( boolean ) { this . void ( org.springframework.integration.aggregator.MessageGroup ) ; } } finally { java.util.concurrent.locks.Lock . void ( ) ; } } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; this . org.springframework.integration.aggregator.Log . debug ( STRING ) ; } }  <METHOD_END>
<METHOD_START> void void ( MessageGroup org.springframework.integration.aggregator.MessageGroup ) { java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroup . getGroupId ( ) ; this . org.springframework.integration.aggregator.MessageGroupStore . removeMessageGroup ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected int int ( java.lang.Object java.lang.Object , java.util.Collection<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.aggregator.Message<?>> ) { Message < ? > org.springframework.integration.aggregator.Message<?> = java.util.Collections . java.lang.Object ( java.util.Collection<org.springframework.integration.aggregator.Message<?>> , this . java.util.Comparator<org.springframework.integration.aggregator.Message<?>> ) ; return new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.Message<> ) . getSequenceNumber ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.aggregator.MessageGroup org.springframework.integration.aggregator.MessageGroup ( java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.aggregator.Message<?> ) { return this . org.springframework.integration.aggregator.MessageGroupStore . addMessageToGroup ( java.lang.Object , org.springframework.integration.aggregator.Message<> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , MessageGroup org.springframework.integration.aggregator.MessageGroup ) { if ( this . org.springframework.integration.aggregator.Log . isInfoEnabled ( ) ) { this . org.springframework.integration.aggregator.Log . info ( STRING + java.lang.Object + STRING ) ; } if ( this . boolean ) { if ( this . org.springframework.integration.aggregator.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.aggregator.Log . debug ( STRING + java.lang.Object + STRING + getOutputChannel ( ) ) ; } void ( java.lang.Object , org.springframework.integration.aggregator.MessageGroup ) ; } else { if ( this . org.springframework.integration.aggregator.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.aggregator.Log . debug ( STRING + java.lang.Object + STRING + ( this . java.lang.String != null ? this . java.lang.String : this . org.springframework.integration.aggregator.MessageChannel ) ) ; } for ( Message < ? > org.springframework.integration.aggregator.Message<?> : org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) { void ( org.springframework.integration.aggregator.Message<> ) ; } } if ( this . org.springframework.integration.aggregator.ApplicationEventPublisher != null ) { this . org.springframework.integration.aggregator.ApplicationEventPublisher . publishEvent ( new MessageGroupExpiredEvent ( this , java.lang.Object , org.springframework.integration.aggregator.MessageGroup . size ( ) , new java.util.Date ( org.springframework.integration.aggregator.MessageGroup . getLastModified ( ) ) , new java.util.Date ( ) , ! this . boolean ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , MessageGroup org.springframework.integration.aggregator.MessageGroup ) { Message < ? > org.springframework.integration.aggregator.Message<?> = null ; if ( org.springframework.integration.aggregator.MessageGroup != null ) { org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.MessageGroup . getOne ( ) ; } java.util.Collection<org.springframework.integration.aggregator.Message<?>> ( org.springframework.integration.aggregator.Message<> , java.lang.Object , org.springframework.integration.aggregator.MessageGroup ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.Collection<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.aggregator.Message<?>> ( Message < ? > org.springframework.integration.aggregator.Message<?> , java.lang.Object java.lang.Object , MessageGroup org.springframework.integration.aggregator.MessageGroup ) { if ( this . org.springframework.integration.aggregator.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.aggregator.Log . debug ( STRING + java.lang.Object + STRING ) ; } java.lang.Object java.lang.Object = this . org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; java.util.Collection<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.aggregator.Message<?>> = null ; if ( java.lang.Object instanceof java.util.Collection<?> < ? > ) { this . void ( ( java.util.Collection<?> < ? > ) java.lang.Object ) ; java.util.Collection<org.springframework.integration.aggregator.Message<?>> = ( java.util.Collection<org.springframework.integration.aggregator.Message<?>> < Message < ? > > ) java.lang.Object ; } this . sendOutputs ( java.lang.Object , org.springframework.integration.aggregator.Message<> ) ; return java.util.Collection<org.springframework.integration.aggregator.Message<?>> ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Collection<?> < ? > java.util.Collection<?> ) { java.lang.Class<?> < ? > java.lang.Class<?> = CollectionUtils . findCommonElementType ( java.util.Collection<> ) ; Assert . isAssignable ( Message .class , java.lang.Class<> , STRING + java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Long java.lang.Long ( MessageGroup org.springframework.integration.aggregator.MessageGroup ) { return this . org.springframework.integration.aggregator.Expression != null ? this . org.springframework.integration.aggregator.Expression . getValue ( this . org.springframework.integration.aggregator.EvaluationContext , org.springframework.integration.aggregator.MessageGroup , java.lang.Long .class ) : null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { for ( java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> : this . java.util.Map<java.util.UUID,java.util.concurrent.ScheduledFuture<?>> . java.util.Collection<java.util.concurrent.ScheduledFuture<?>> ( ) ) { java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! this . boolean ) { this . boolean = true ; if ( this . org.springframework.integration.aggregator.MessageGroupProcessor instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.aggregator.MessageGroupProcessor ) . start ( ) ; } if ( this . org.springframework.integration.aggregator.ReleaseStrategy instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.aggregator.ReleaseStrategy ) . start ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) { this . boolean = false ; if ( this . org.springframework.integration.aggregator.MessageGroupProcessor instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.aggregator.MessageGroupProcessor ) . stop ( ) ; } if ( this . org.springframework.integration.aggregator.ReleaseStrategy instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.aggregator.ReleaseStrategy ) . stop ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void ( MessageGroup org.springframework.integration.aggregator.MessageGroup ) { super( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) , null , org.springframework.integration.aggregator.MessageGroup . getGroupId ( ) , org.springframework.integration.aggregator.MessageGroup . getTimestamp ( ) , org.springframework.integration.aggregator.MessageGroup . isComplete ( ) , true ); if ( org.springframework.integration.aggregator.MessageGroup instanceof SimpleMessageGroup ) { this . org.springframework.integration.aggregator.SimpleMessageGroup = ( SimpleMessageGroup ) org.springframework.integration.aggregator.MessageGroup ; } else { this . org.springframework.integration.aggregator.SimpleMessageGroup = null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.integration.aggregator.Message<?> ) { if ( this . size ( ) == NUMBER ) { return true ; } java.lang.Integer java.lang.Integer = org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_NUMBER , java.lang.Integer .class ) ; if ( java.lang.Integer != null && java.lang.Integer > NUMBER ) { java.lang.Integer java.lang.Integer = org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE , java.lang.Integer .class ) ; if ( java.lang.Integer == null ) { java.lang.Integer = NUMBER ; } return java.lang.Integer . boolean ( getSequenceSize ( ) ) && ! ( this . org.springframework.integration.aggregator.SimpleMessageGroup != null ? this . org.springframework.integration.aggregator.SimpleMessageGroup . containsSequence ( java.lang.Integer ) : boolean ( this . getMessages ( ) , java.lang.Integer ) ) ; } return true ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.Collection<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.aggregator.Message<?>> , java.lang.Integer java.lang.Integer ) { for ( Message < ? > org.springframework.integration.aggregator.Message<?> : java.util.Collection<org.springframework.integration.aggregator.Message<?>> ) { if ( java.lang.Integer . boolean ( org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_NUMBER , java.lang.Integer .class ) ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MessageGroup org.springframework.integration.aggregator.MessageGroup ) { void ( org.springframework.integration.aggregator.MessageGroup ) ; return null ; }  <METHOD_END>
