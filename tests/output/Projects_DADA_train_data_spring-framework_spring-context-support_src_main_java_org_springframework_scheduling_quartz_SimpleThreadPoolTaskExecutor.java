<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.scheduling.quartz.SchedulerConfigException { initialize ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { Assert . notNull ( java.lang.Runnable , STRING ) ; if ( ! runInThread ( java.lang.Runnable ) ) { throw new SchedulingException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable , long long ) { void ( java.lang.Runnable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> ( java.lang.Runnable java.lang.Runnable ) { java.util.concurrent.FutureTask<java.lang.Object> < java.lang.Object > java.util.concurrent.FutureTask<java.lang.Object> = new java.util.concurrent.FutureTask<java.lang.Object> <> ( java.lang.Runnable , null ) ; void ( java.util.concurrent.FutureTask<java.lang.Object> ) ; return java.util.concurrent.FutureTask<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.concurrent.Future<T> < T > java.util.concurrent.Future<T> ( java.util.concurrent.Callable<T> < T > java.util.concurrent.Callable<T> ) { java.util.concurrent.FutureTask<T> < T > java.util.concurrent.FutureTask<T> = new java.util.concurrent.FutureTask<T> <> ( java.util.concurrent.Callable<T> ) ; void ( java.util.concurrent.FutureTask<T> ) ; return java.util.concurrent.FutureTask<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.scheduling.quartz.ListenableFuture<?> < ? > org.springframework.scheduling.quartz.ListenableFuture<?> ( java.lang.Runnable java.lang.Runnable ) { ListenableFutureTask < java.lang.Object > org.springframework.scheduling.quartz.ListenableFutureTask<java.lang.Object> = new ListenableFutureTask <> ( java.lang.Runnable , null ) ; void ( org.springframework.scheduling.quartz.ListenableFutureTask<java.lang.Object> ) ; return org.springframework.scheduling.quartz.ListenableFutureTask<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.scheduling.quartz.ListenableFuture<T> < T > org.springframework.scheduling.quartz.ListenableFuture<T> ( java.util.concurrent.Callable<T> < T > java.util.concurrent.Callable<T> ) { ListenableFutureTask < T > org.springframework.scheduling.quartz.ListenableFutureTask<T> = new ListenableFutureTask <> ( java.util.concurrent.Callable<T> ) ; void ( org.springframework.scheduling.quartz.ListenableFutureTask<T> ) ; return org.springframework.scheduling.quartz.ListenableFutureTask<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { shutdown ( this . boolean ) ; }  <METHOD_END>
