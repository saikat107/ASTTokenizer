<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command ( java.lang.String java.lang.String ) { for ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command : org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command[] ( ) ) { if ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command . java.lang.String ( ) . boolean ( java.lang.String ) ) { return org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command ; } } throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ( java.lang.String java.lang.String ) { for ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option : org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option[] ( ) ) { if ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . java.lang.String ( ) . boolean ( java.lang.String ) ) { return org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ; } } throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( SessionFactory < F > org.springframework.integration.file.remote.gateway.SessionFactory<F> , MessageSessionCallback < F , ? > org.springframework.integration.file.remote.gateway.MessageSessionCallback<F,?> ) { this( new RemoteFileTemplate < F > ( org.springframework.integration.file.remote.gateway.SessionFactory<F> ) , org.springframework.integration.file.remote.gateway.MessageSessionCallback<F,> ); }  <METHOD_END>
<METHOD_START> public void ( RemoteFileTemplate < F > org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> , MessageSessionCallback < F , ? > org.springframework.integration.file.remote.gateway.MessageSessionCallback<F,?> ) { Assert . notNull ( org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> , STRING ) ; Assert . notNull ( org.springframework.integration.file.remote.gateway.MessageSessionCallback<F,> , STRING ) ; this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> = org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> ; this . org.springframework.integration.file.remote.gateway.MessageSessionCallback<F,?> = org.springframework.integration.file.remote.gateway.MessageSessionCallback<F,> ; this . org.springframework.integration.file.remote.gateway.ExpressionEvaluatingMessageProcessor<java.lang.String> = null ; this . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command = null ; }  <METHOD_END>
<METHOD_START> public void ( SessionFactory < F > org.springframework.integration.file.remote.gateway.SessionFactory<F> , java.lang.String java.lang.String , java.lang.String java.lang.String ) { this( org.springframework.integration.file.remote.gateway.SessionFactory<F> , org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command ( java.lang.String ) , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( SessionFactory < F > org.springframework.integration.file.remote.gateway.SessionFactory<F> , org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command , java.lang.String java.lang.String ) { this( new RemoteFileTemplate < F > ( org.springframework.integration.file.remote.gateway.SessionFactory<F> ) , org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( RemoteFileTemplate < F > org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> , java.lang.String java.lang.String , java.lang.String java.lang.String ) { this( org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> , org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command ( java.lang.String ) , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( RemoteFileTemplate < F > org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> , org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> , STRING ) ; this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> = org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> ; this . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command = org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command ; Expression org.springframework.integration.file.remote.gateway.Expression = new SpelExpressionParser ( ) . parseExpression ( java.lang.String ) ; this . org.springframework.integration.file.remote.gateway.ExpressionEvaluatingMessageProcessor<java.lang.String> = new ExpressionEvaluatingMessageProcessor <> ( org.springframework.integration.file.remote.gateway.Expression ) ; this . org.springframework.integration.file.remote.gateway.MessageSessionCallback<F,?> = null ; setPrimaryExpression ( org.springframework.integration.file.remote.gateway.Expression ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . void ( ) ; java.util.Arrays . java.util.stream.Stream<java.lang.String> ( java.lang.String . java.lang.String[] ( STRING ) ) . java.util.stream.Stream<java.lang.String> ( StringUtils :: hasText ) . map ( s -> Option . toOption ( s . trim ( ) ) ) . forEach ( this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> :: boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ... org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option[] ) { Assert . notNull ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option[] , STRING ) ; Assert . noNullElements ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option[] , STRING ) ; this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . void ( ) ; java.util.Collections . boolean ( this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> , org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . setRemoteFileSeparator ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.File java.io.File ) { if ( java.io.File != null ) { this . org.springframework.integration.file.remote.gateway.Expression = new ValueExpression <> ( java.io.File ) ; } }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.file.remote.gateway.Expression ) { this . org.springframework.integration.file.remote.gateway.Expression = org.springframework.integration.file.remote.gateway.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.integration.file.remote.gateway.Expression = EXPRESSION_PARSER . parseExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . setTemporaryFileSuffix ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( FileListFilter < F > org.springframework.integration.file.remote.gateway.FileListFilter<F> ) { this . org.springframework.integration.file.remote.gateway.FileListFilter<F> = org.springframework.integration.file.remote.gateway.FileListFilter<F> ; }  <METHOD_END>
<METHOD_START> public void void ( FileListFilter < java.io.File > org.springframework.integration.file.remote.gateway.FileListFilter<java.io.File> ) { this . org.springframework.integration.file.remote.gateway.FileListFilter<java.io.File> = org.springframework.integration.file.remote.gateway.FileListFilter<java.io.File> ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.file.remote.gateway.Expression ) { this . org.springframework.integration.file.remote.gateway.ExpressionEvaluatingMessageProcessor<java.lang.String> = new ExpressionEvaluatingMessageProcessor < java.lang.String > ( org.springframework.integration.file.remote.gateway.Expression ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; void ( EXPRESSION_PARSER . parseExpression ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.file.remote.gateway.Expression ) { Assert . notNull ( org.springframework.integration.file.remote.gateway.Expression , STRING ) ; this . org.springframework.integration.file.remote.gateway.Expression = org.springframework.integration.file.remote.gateway.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.integration.file.remote.gateway.Expression = EXPRESSION_PARSER . parseExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( FileExistsMode org.springframework.integration.file.remote.gateway.FileExistsMode ) { this . org.springframework.integration.file.remote.gateway.FileExistsMode = org.springframework.integration.file.remote.gateway.FileExistsMode ; if ( FileExistsMode . APPEND . equals ( org.springframework.integration.file.remote.gateway.FileExistsMode ) ) { this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . setUseTemporaryFileName ( false ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; void ( java.lang.Integer . int ( java.lang.String , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( boolean ( ) , STRING ) ; this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { Assert . state ( this . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command != null || this . org.springframework.integration.file.remote.gateway.MessageSessionCallback<F,> != null , STRING ) ; if ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command . boolean ( this . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command ) || org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command . boolean ( this . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command ) ) { Assert . isNull ( this . org.springframework.integration.file.remote.gateway.FileListFilter<F> , STRING ) ; } if ( ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command . boolean ( this . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command ) && ! this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) ) || org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command . boolean ( this . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command ) ) { Assert . notNull ( this . org.springframework.integration.file.remote.gateway.Expression , STRING ) ; if ( this . org.springframework.integration.file.remote.gateway.Expression instanceof ValueExpression ) { java.io.File java.io.File = this . org.springframework.integration.file.remote.gateway.Expression . getValue ( java.io.File .class ) ; try { if ( ! java.io.File . boolean ( ) ) { if ( this . boolean ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.io.File + STRING ) ; } if ( ! java.io.File . boolean ( ) ) { throw new java.io.IOException ( STRING + java.io.File ) ; } } else { throw new java.io.FileNotFoundException ( java.io.File . java.lang.String ( ) ) ; } } } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessagingException ( STRING + this . getComponentType ( ) , java.lang.Exception ) ; } } } if ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command . boolean ( this . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command ) ) { Assert . isTrue ( ! ( this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) ) , STRING + org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . java.lang.String ( ) + STRING + org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . java.lang.String ( ) + STRING ) ; } if ( this . org.springframework.integration.file.remote.gateway.ExpressionEvaluatingMessageProcessor<java.lang.String> != null && getBeanFactory ( ) != null ) { this . org.springframework.integration.file.remote.gateway.ExpressionEvaluatingMessageProcessor<java.lang.String> . setBeanFactory ( this . getBeanFactory ( ) ) ; this . org.springframework.integration.file.remote.gateway.ExpressionEvaluatingMessageProcessor<java.lang.String> . setBeanFactory ( this . getBeanFactory ( ) ) ; this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . setBeanFactory ( this . getBeanFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( final Message < ? > org.springframework.integration.file.remote.gateway.Message<?> ) { if ( this . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command != null ) { switch ( this . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command ) { case org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command : return java.lang.Object ( org.springframework.integration.file.remote.gateway.Message<> ) ; case org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command : return java.lang.Object ( org.springframework.integration.file.remote.gateway.Message<> ) ; case org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command : return java.lang.Object ( org.springframework.integration.file.remote.gateway.Message<> ) ; case org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command : return java.lang.Object ( org.springframework.integration.file.remote.gateway.Message<> ) ; case org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command : return java.lang.Object ( org.springframework.integration.file.remote.gateway.Message<> ) ; case org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command : return java.lang.String ( org.springframework.integration.file.remote.gateway.Message<> ) ; case org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Command : return java.lang.Object ( org.springframework.integration.file.remote.gateway.Message<> ) ; } } return this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . execute ( session -> AbstractRemoteFileOutboundGateway .this . messageSessionCallback . doInSession ( session , requestMessage ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.file.remote.gateway.Message<?> ) { java.lang.String java.lang.String = this . org.springframework.integration.file.remote.gateway.ExpressionEvaluatingMessageProcessor<java.lang.String> . processMessage ( org.springframework.integration.file.remote.gateway.Message<> ) ; if ( java.lang.String != null && ! java.lang.String . boolean ( this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . getRemoteFileSeparator ( ) ) ) { java.lang.String += this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . getRemoteFileSeparator ( ) ; } final java.lang.String java.lang.String = java.lang.String ; java.util.List<?> < ? > java.util.List<?> = this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . execute ( session -> AbstractRemoteFileOutboundGateway .this . ls ( session , fullDir ) ) ; return getMessageBuilderFactory ( ) . withPayload ( java.util.List<> ) . setHeader ( FileHeaders . REMOTE_DIRECTORY , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( final Message < ? > org.springframework.integration.file.remote.gateway.Message<?> ) { final java.lang.String java.lang.String = this . org.springframework.integration.file.remote.gateway.ExpressionEvaluatingMessageProcessor<java.lang.String> . processMessage ( org.springframework.integration.file.remote.gateway.Message<> ) ; final java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; final java.lang.String java.lang.String = java.lang.String ( java.lang.String , java.lang.String ) ; Session < F > org.springframework.integration.file.remote.gateway.Session<F> = null ; java.lang.Object java.lang.Object ; if ( this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) ) { org.springframework.integration.file.remote.gateway.Session<F> = this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . getSessionFactory ( ) . getSession ( ) ; try { java.lang.Object = org.springframework.integration.file.remote.gateway.Session<F> . readRaw ( java.lang.String ) ; } catch ( java.io.IOException java.io.IOException ) { throw new MessageHandlingException ( org.springframework.integration.file.remote.gateway.Message<> , STRING + java.lang.String + STRING , java.io.IOException ) ; } } else { java.lang.Object = this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . execute ( session1 -> get ( requestMessage , session1 , remoteDir , remoteFilePath , remoteFilename , null ) ) ; } return getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . setHeader ( FileHeaders . REMOTE_DIRECTORY , java.lang.String ) . setHeader ( FileHeaders . REMOTE_FILE , java.lang.String ) . setHeader ( IntegrationMessageHeaderAccessor . CLOSEABLE_RESOURCE , org.springframework.integration.file.remote.gateway.Session<F> ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( final Message < ? > org.springframework.integration.file.remote.gateway.Message<?> ) { final java.lang.String java.lang.String = this . org.springframework.integration.file.remote.gateway.ExpressionEvaluatingMessageProcessor<java.lang.String> . processMessage ( org.springframework.integration.file.remote.gateway.Message<> ) ; final java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; final java.lang.String java.lang.String = java.lang.String ( java.lang.String , java.lang.String ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . execute ( session -> mGet ( requestMessage , session , remoteDir , remoteFilename ) ) ; return getMessageBuilderFactory ( ) . withPayload ( java.util.List<java.io.File> ) . setHeader ( FileHeaders . REMOTE_DIRECTORY , java.lang.String ) . setHeader ( FileHeaders . REMOTE_FILE , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.file.remote.gateway.Message<?> ) { final java.lang.String java.lang.String = this . org.springframework.integration.file.remote.gateway.ExpressionEvaluatingMessageProcessor<java.lang.String> . processMessage ( org.springframework.integration.file.remote.gateway.Message<> ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String , java.lang.String ) ; boolean boolean = this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . remove ( java.lang.String ) ; return getMessageBuilderFactory ( ) . withPayload ( boolean ) . setHeader ( FileHeaders . REMOTE_DIRECTORY , java.lang.String ) . setHeader ( FileHeaders . REMOTE_FILE , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.file.remote.gateway.Message<?> ) { java.lang.String java.lang.String = this . org.springframework.integration.file.remote.gateway.ExpressionEvaluatingMessageProcessor<java.lang.String> . processMessage ( org.springframework.integration.file.remote.gateway.Message<> ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String , java.lang.String ) ; java.lang.String java.lang.String = this . org.springframework.integration.file.remote.gateway.ExpressionEvaluatingMessageProcessor<java.lang.String> . processMessage ( org.springframework.integration.file.remote.gateway.Message<> ) ; Assert . hasLength ( java.lang.String , STRING ) ; this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . rename ( java.lang.String , java.lang.String ) ; return getMessageBuilderFactory ( ) . withPayload ( java.lang.Boolean . java.lang.Boolean ) . setHeader ( FileHeaders . REMOTE_DIRECTORY , java.lang.String ) . setHeader ( FileHeaders . REMOTE_FILE , java.lang.String ) . setHeader ( FileHeaders . RENAME_TO , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( Message < ? > org.springframework.integration.file.remote.gateway.Message<?> ) { return java.lang.String ( org.springframework.integration.file.remote.gateway.Message<> , null ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( Message < ? > org.springframework.integration.file.remote.gateway.Message<?> , java.lang.String java.lang.String ) { java.lang.String java.lang.String = this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . send ( org.springframework.integration.file.remote.gateway.Message<> , java.lang.String , this . org.springframework.integration.file.remote.gateway.FileExistsMode ) ; if ( java.lang.String == null ) { throw new MessagingException ( org.springframework.integration.file.remote.gateway.Message<> , STRING + org.springframework.integration.file.remote.gateway.Message<> ) ; } if ( this . java.lang.Integer != null && boolean ( ) ) { void ( this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> , java.lang.String , this . java.lang.Integer ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected void void ( RemoteFileTemplate < F > org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> , java.lang.String java.lang.String , int int ) { }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.file.remote.gateway.Message<?> ) { java.io.File java.io.File = null ; if ( org.springframework.integration.file.remote.gateway.Message<> . getPayload ( ) instanceof java.io.File ) { java.io.File = ( java.io.File ) org.springframework.integration.file.remote.gateway.Message<> . getPayload ( ) ; } else if ( org.springframework.integration.file.remote.gateway.Message<> . getPayload ( ) instanceof java.lang.String ) { java.io.File = new java.io.File ( ( java.lang.String ) org.springframework.integration.file.remote.gateway.Message<> . getPayload ( ) ) ; } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( ! java.io.File . boolean ( ) ) { return this . java.lang.String ( org.springframework.integration.file.remote.gateway.Message<> ) ; } else { return java.util.List<java.lang.String> ( org.springframework.integration.file.remote.gateway.Message<> , java.io.File , null ) ; } }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( Message < ? > org.springframework.integration.file.remote.gateway.Message<?> , java.io.File java.io.File , java.lang.String java.lang.String ) { java.io.File [] java.io.File[] = java.io.File . java.io.File[] ( ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = this . java.util.List<java.io.File> ( java.io.File[] ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; try { for ( java.io.File java.io.File : java.util.List<java.io.File> ) { if ( ! java.io.File . boolean ( ) ) { java.lang.String java.lang.String = this . java.lang.String ( this . getMessageBuilderFactory ( ) . withPayload ( java.io.File ) . copyHeaders ( org.springframework.integration.file.remote.gateway.Message<> . getHeaders ( ) ) . build ( ) , java.lang.String ) ; if ( java.lang.String == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.io.File . java.lang.String ( ) + STRING ) ; } } else { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } else if ( this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) ) { java.lang.String java.lang.String = ( StringUtils . hasText ( java.lang.String ) ? java.lang.String + this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . getRemoteFileSeparator ( ) : STRING ) + java.io.File . java.lang.String ( ) ; java.util.List<java.lang.String> . boolean ( this . java.util.List<java.lang.String> ( org.springframework.integration.file.remote.gateway.Message<> , java.io.File , java.lang.String ) ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { if ( java.util.List<java.lang.String> . int ( ) > NUMBER ) { throw new PartialSuccessException ( org.springframework.integration.file.remote.gateway.Message<> , STRING + ( java.lang.String == null ? STRING : ( STRING + java.lang.String ) ) , java.lang.Exception , java.util.List<java.lang.String> , java.util.List<java.io.File> ) ; } else if ( java.lang.Exception instanceof PartialSuccessException ) { throw new PartialSuccessException ( org.springframework.integration.file.remote.gateway.Message<> , STRING + ( java.lang.String == null ? STRING : ( STRING + java.lang.String ) ) , java.lang.Exception , java.util.List<java.lang.String> , java.util.List<java.io.File> ) ; } else if ( java.lang.Exception instanceof MessagingException ) { throw ( MessagingException ) java.lang.Exception ; } } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> protected java.util.List<?> < ? > java.util.List<?> ( Session < F > org.springframework.integration.file.remote.gateway.Session<F> , java.lang.String java.lang.String ) throws java.io.IOException { java.util.List<F> < F > java.util.List<F> = java.util.List<F> ( org.springframework.integration.file.remote.gateway.Session<F> , java.lang.String , STRING ) ; if ( ! this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) ) { void ( java.util.List<F> ) ; } if ( ! this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) ) { void ( java.util.List<F> ) ; } if ( this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; for ( F F : java.util.List<F> ) { java.util.List<java.lang.String> . boolean ( java.lang.String ( F ) ) ; } if ( ! this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) ) { java.util.Collections . void ( java.util.List<java.lang.String> ) ; } return java.util.List<java.lang.String> ; } else { java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> < AbstractFileInfo < F > > java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> = this . java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> ( java.util.List<F> ) ; for ( AbstractFileInfo < F > org.springframework.integration.file.remote.gateway.AbstractFileInfo<F> : java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> ) { org.springframework.integration.file.remote.gateway.AbstractFileInfo<F> . setRemoteDirectory ( java.lang.String ) ; } if ( ! this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) ) { java.util.Collections . void ( java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> ) ; } return java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> ; } }  <METHOD_END>
<METHOD_START> private java.util.List<F> < F > java.util.List<F> ( Session < F > org.springframework.integration.file.remote.gateway.Session<F> , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.IOException { java.util.List<F> < F > java.util.List<F> = new java.util.ArrayList<F> < F > ( ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String , java.lang.String ) ; F [] F[] = org.springframework.integration.file.remote.gateway.Session<F> . list ( java.lang.String ) ; boolean boolean = this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) ; if ( ! ObjectUtils . isEmpty ( F[] ) ) { java.util.Collection<F> < F > java.util.Collection<F> = this . java.util.List<F> ( F[] ) ; for ( F F : java.util.Collection<F> ) { java.lang.String java.lang.String = this . java.lang.String ( F ) ; if ( F != null ) { if ( this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) || ! this . boolean ( F ) ) { if ( boolean && StringUtils . hasText ( java.lang.String ) ) { java.util.List<F> . boolean ( F ( F , java.lang.String ) ) ; } else { java.util.List<F> . boolean ( F ) ; } } if ( boolean && this . boolean ( F ) && ! ( STRING . boolean ( java.lang.String ) ) && ! ( STRING . boolean ( java.lang.String ) ) ) { java.util.List<F> . boolean ( java.util.List<F> ( org.springframework.integration.file.remote.gateway.Session<F> , java.lang.String , java.lang.String + java.lang.String + this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . getRemoteFileSeparator ( ) ) ) ; } } } } return java.util.List<F> ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.String java.lang.String = null ; if ( java.lang.String != null ) { java.lang.String = ( java.lang.String + java.lang.String ) ; } else if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.String = STRING + this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . getRemoteFileSeparator ( ) + java.lang.String ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected final java.util.List<F> < F > java.util.List<F> ( F [] F[] ) { return ( this . org.springframework.integration.file.remote.gateway.FileListFilter<F> != null ) ? this . org.springframework.integration.file.remote.gateway.FileListFilter<F> . filterFiles ( F[] ) : java.util.Arrays . java.util.List<F> ( F[] ) ; }  <METHOD_END>
<METHOD_START> protected final java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> ( java.io.File [] java.io.File[] ) { if ( java.io.File[] == null ) { return java.util.Collections . java.util.List<java.io.File> ( ) ; } return ( this . org.springframework.integration.file.remote.gateway.FileListFilter<java.io.File> != null ) ? this . org.springframework.integration.file.remote.gateway.FileListFilter<java.io.File> . filterFiles ( java.io.File[] ) : java.util.Arrays . java.util.List<java.io.File> ( java.io.File[] ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<F> < F > java.util.List<F> ) { java.util.Iterator<F> < F > java.util.Iterator<F> = java.util.List<F> . java.util.Iterator<F> ( ) ; while ( java.util.Iterator<F> . boolean ( ) ) { if ( this . boolean ( java.util.Iterator<F> . F ( ) ) ) { java.util.Iterator<F> . void ( ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<F> < F > java.util.List<F> ) { java.util.Iterator<F> < F > java.util.Iterator<F> = java.util.List<F> . java.util.Iterator<F> ( ) ; while ( java.util.Iterator<F> . boolean ( ) ) { if ( java.lang.String ( java.util.Iterator<F> . F ( ) ) . boolean ( STRING ) ) { java.util.Iterator<F> . void ( ) ; } } }  <METHOD_END>
<METHOD_START> protected java.io.File java.io.File ( Message < ? > org.springframework.integration.file.remote.gateway.Message<?> , Session < F > org.springframework.integration.file.remote.gateway.Session<F> , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , F F ) throws java.io.IOException { F F = F ; if ( F == null ) { F [] F[] = org.springframework.integration.file.remote.gateway.Session<F> . list ( java.lang.String ) ; if ( F[] == null ) { throw new MessagingException ( STRING + java.lang.String ) ; } if ( F[] . int != NUMBER || F[] [ NUMBER ] == null || boolean ( F[] [ NUMBER ] ) || boolean ( F[] [ NUMBER ] ) ) { throw new MessagingException ( java.lang.String + STRING ) ; } F = F[] [ NUMBER ] ; } java.io.File java.io.File = new java.io.File ( java.io.File ( org.springframework.integration.file.remote.gateway.Message<> , java.lang.String ) , java.lang.String ( org.springframework.integration.file.remote.gateway.Message<> , java.lang.String ) ) ; FileExistsMode org.springframework.integration.file.remote.gateway.FileExistsMode = this . org.springframework.integration.file.remote.gateway.FileExistsMode ; boolean boolean = FileExistsMode . APPEND . equals ( org.springframework.integration.file.remote.gateway.FileExistsMode ) ; boolean boolean = java.io.File . boolean ( ) ; boolean boolean = FileExistsMode . REPLACE . equals ( org.springframework.integration.file.remote.gateway.FileExistsMode ) || ( boolean && FileExistsMode . REPLACE_IF_MODIFIED . equals ( org.springframework.integration.file.remote.gateway.FileExistsMode ) && java.io.File . long ( ) != long ( F ) ) ; if ( ! boolean || boolean || boolean ) { java.io.OutputStream java.io.OutputStream ; java.lang.String java.lang.String = java.io.File . java.lang.String ( ) + this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . getTemporaryFileSuffix ( ) ; java.io.File java.io.File = new java.io.File ( java.lang.String ) ; if ( boolean ) { java.io.OutputStream = new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( java.io.File , true ) ) ; } else { java.io.OutputStream = new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( java.io.File ) ) ; } if ( boolean ) { java.io.File . boolean ( ) ; } try { org.springframework.integration.file.remote.gateway.Session<F> . read ( java.lang.String , java.io.OutputStream ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.io.OutputStream . void ( ) ; java.io.File . boolean ( ) ; if ( java.lang.Exception instanceof java.lang.RuntimeException ) { throw ( java.lang.RuntimeException ) java.lang.Exception ; } else { throw new MessagingException ( STRING , java.lang.Exception ) ; } } finally { try { java.io.OutputStream . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } if ( ! boolean && ! java.io.File . boolean ( java.io.File ) ) { throw new MessagingException ( STRING ) ; } if ( this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) ) { java.io.File . boolean ( long ( F ) ) ; } } else if ( FileExistsMode . REPLACE_IF_MODIFIED . equals ( org.springframework.integration.file.remote.gateway.FileExistsMode ) ) { logger . debug ( STRING + java.io.File + STRING ) ; } else if ( ! FileExistsMode . IGNORE . equals ( org.springframework.integration.file.remote.gateway.FileExistsMode ) ) { throw new MessageHandlingException ( org.springframework.integration.file.remote.gateway.Message<> , STRING + java.io.File + STRING ) ; } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.io.File ) ; } } return java.io.File ; }  <METHOD_END>
<METHOD_START> protected java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> ( Message < ? > org.springframework.integration.file.remote.gateway.Message<?> , Session < F > org.springframework.integration.file.remote.gateway.Session<F> , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.IOException { if ( this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) ) { if ( logger . isWarnEnabled ( ) && ! ( STRING . boolean ( java.lang.String ) ) ) { logger . warn ( STRING ) ; } if ( this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) ) { this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) ; } return java.util.List<java.io.File> ( org.springframework.integration.file.remote.gateway.Message<> , org.springframework.integration.file.remote.gateway.Session<F> , java.lang.String , java.lang.String ) ; } else { return java.util.List<java.io.File> ( org.springframework.integration.file.remote.gateway.Message<> , org.springframework.integration.file.remote.gateway.Session<F> , java.lang.String , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> ( Message < ? > org.springframework.integration.file.remote.gateway.Message<?> , Session < F > org.springframework.integration.file.remote.gateway.Session<F> , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.IOException { java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = new java.util.ArrayList<java.io.File> < java.io.File > ( ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String , java.lang.String ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> < AbstractFileInfo < F > > java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> = ( java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> < AbstractFileInfo < F > > ) java.util.List<?> ( org.springframework.integration.file.remote.gateway.Session<F> , java.lang.String ) ; if ( java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> . size ( ) == NUMBER && this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) ) { throw new MessagingException ( STRING + ( java.lang.String != null ? java.lang.String : STRING ) + STRING + java.lang.String ) ; } try { for ( AbstractFileInfo < F > org.springframework.integration.file.remote.gateway.AbstractFileInfo<F> : java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> ) { if ( org.springframework.integration.file.remote.gateway.AbstractFileInfo<F> . isDirectory ( ) ) { continue; } java.lang.String java.lang.String = java.lang.String != null ? java.lang.String + java.lang.String ( org.springframework.integration.file.remote.gateway.AbstractFileInfo<F> ) : java.lang.String ( org.springframework.integration.file.remote.gateway.AbstractFileInfo<F> ) ; java.lang.String java.lang.String = this . java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = this . java.lang.String ( java.lang.String , java.lang.String ) ; java.io.File java.io.File = java.io.File ( org.springframework.integration.file.remote.gateway.Message<> , org.springframework.integration.file.remote.gateway.Session<F> , java.lang.String , java.lang.String , java.lang.String , org.springframework.integration.file.remote.gateway.AbstractFileInfo<F> . getFileInfo ( ) ) ; java.util.List<java.io.File> . boolean ( java.io.File ) ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( java.util.List<java.io.File> . int ( ) > NUMBER ) { throw new PartialSuccessException ( org.springframework.integration.file.remote.gateway.Message<> , STRING + ( java.lang.String != null ? java.lang.String : STRING ) , java.lang.Exception , java.util.List<java.io.File> , java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> ) ; } else if ( java.lang.Exception instanceof MessagingException ) { throw ( MessagingException ) java.lang.Exception ; } else if ( java.lang.Exception instanceof java.io.IOException ) { throw ( java.io.IOException ) java.lang.Exception ; } } return java.util.List<java.io.File> ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> ( Message < ? > org.springframework.integration.file.remote.gateway.Message<?> , Session < F > org.springframework.integration.file.remote.gateway.Session<F> , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.IOException { java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = new java.util.ArrayList<java.io.File> < java.io.File > ( ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> < AbstractFileInfo < F > > java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> = ( java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> < AbstractFileInfo < F > > ) java.util.List<?> ( org.springframework.integration.file.remote.gateway.Session<F> , java.lang.String ) ; if ( java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> . size ( ) == NUMBER && this . java.util.Set<org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option> . boolean ( org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option . org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway.Option ) ) { throw new MessagingException ( STRING + ( java.lang.String != null ? java.lang.String : STRING ) + STRING + java.lang.String ) ; } try { for ( AbstractFileInfo < F > org.springframework.integration.file.remote.gateway.AbstractFileInfo<F> : java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> ) { java.lang.String java.lang.String = java.lang.String != null ? java.lang.String + java.lang.String ( org.springframework.integration.file.remote.gateway.AbstractFileInfo<F> ) : java.lang.String ( org.springframework.integration.file.remote.gateway.AbstractFileInfo<F> ) ; java.lang.String java.lang.String = this . java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = this . java.lang.String ( java.lang.String , java.lang.String ) ; java.io.File java.io.File = java.io.File ( org.springframework.integration.file.remote.gateway.Message<> , org.springframework.integration.file.remote.gateway.Session<F> , java.lang.String , java.lang.String , java.lang.String , org.springframework.integration.file.remote.gateway.AbstractFileInfo<F> . getFileInfo ( ) ) ; java.util.List<java.io.File> . boolean ( java.io.File ) ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( java.util.List<java.io.File> . int ( ) > NUMBER ) { throw new PartialSuccessException ( org.springframework.integration.file.remote.gateway.Message<> , STRING + ( java.lang.String != null ? java.lang.String : STRING ) , java.lang.Exception , java.util.List<java.io.File> , java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> ) ; } else if ( java.lang.Exception instanceof MessagingException ) { throw ( MessagingException ) java.lang.Exception ; } else if ( java.lang.Exception instanceof java.io.IOException ) { throw ( java.io.IOException ) java.lang.Exception ; } else { throw new MessagingException ( STRING , java.lang.Exception ) ; } } return java.util.List<java.io.File> ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( java.lang.String ) ) ; if ( java.lang.String . int ( ) == NUMBER ) { return null ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { int int = java.lang.String . int ( this . org.springframework.integration.file.remote.gateway.RemoteFileTemplate<F> . getRemoteFileSeparator ( ) ) ; if ( int < NUMBER ) { return java.lang.String ; } else { return java.lang.String . java.lang.String ( int + NUMBER ) ; } }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( Message < ? > org.springframework.integration.file.remote.gateway.Message<?> , java.lang.String java.lang.String ) { EvaluationContext org.springframework.integration.file.remote.gateway.EvaluationContext = ExpressionUtils . createStandardEvaluationContext ( getBeanFactory ( ) ) ; if ( java.lang.String != null ) { org.springframework.integration.file.remote.gateway.EvaluationContext . setVariable ( STRING , java.lang.String ) ; } java.io.File java.io.File = ExpressionUtils . expressionToFile ( this . org.springframework.integration.file.remote.gateway.Expression , org.springframework.integration.file.remote.gateway.EvaluationContext , org.springframework.integration.file.remote.gateway.Message<> , STRING ) ; if ( ! java.io.File . boolean ( ) ) { Assert . isTrue ( java.io.File . boolean ( ) , STRING + java.io.File ) ; } return java.io.File ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( Message < ? > org.springframework.integration.file.remote.gateway.Message<?> , java.lang.String java.lang.String ) { if ( this . org.springframework.integration.file.remote.gateway.Expression != null ) { EvaluationContext org.springframework.integration.file.remote.gateway.EvaluationContext = ExpressionUtils . createStandardEvaluationContext ( getBeanFactory ( ) ) ; org.springframework.integration.file.remote.gateway.EvaluationContext . setVariable ( STRING , java.lang.String ) ; return this . org.springframework.integration.file.remote.gateway.Expression . getValue ( org.springframework.integration.file.remote.gateway.EvaluationContext , org.springframework.integration.file.remote.gateway.Message<> , java.lang.String .class ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> abstract protected boolean boolean ( F F );  <METHOD_END>
<METHOD_START> abstract protected boolean boolean ( F F );  <METHOD_END>
<METHOD_START> abstract protected java.lang.String java.lang.String ( F F );  <METHOD_END>
<METHOD_START> abstract protected java.lang.String java.lang.String ( AbstractFileInfo < F > org.springframework.integration.file.remote.gateway.AbstractFileInfo<F> );  <METHOD_END>
<METHOD_START> abstract protected long long ( F F );  <METHOD_END>
<METHOD_START> abstract protected java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> < AbstractFileInfo < F > > java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<F>> ( java.util.Collection<F> < F > java.util.Collection<F> );  <METHOD_END>
<METHOD_START> abstract protected F F ( F F , java.lang.String java.lang.String );  <METHOD_END>
