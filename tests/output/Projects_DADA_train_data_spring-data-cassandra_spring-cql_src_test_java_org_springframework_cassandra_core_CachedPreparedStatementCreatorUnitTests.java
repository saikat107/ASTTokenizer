<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.cassandra.core.PreparedStatement = org.springframework.cassandra.core.PreparedStatement ( PreparedStatement .class , new org.springframework.cassandra.core.CachedPreparedStatementCreatorUnitTests.TestInvocationHandler ( ) ) ; when ( org.springframework.cassandra.core.Session . prepare ( anyString ( ) ) ) . thenReturn ( org.springframework.cassandra.core.PreparedStatement ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new CachedPreparedStatementCreator ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new CachedPreparedStatementCreator ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CachedPreparedStatementCreator org.springframework.cassandra.core.CachedPreparedStatementCreator = new CachedPreparedStatementCreator ( STRING ) ; PreparedStatement org.springframework.cassandra.core.PreparedStatement = org.springframework.cassandra.core.CachedPreparedStatementCreator . createPreparedStatement ( org.springframework.cassandra.core.Session ) ; assertThat ( org.springframework.cassandra.core.PreparedStatement ) . isSameAs ( org.springframework.cassandra.core.PreparedStatement ) ; verify ( org.springframework.cassandra.core.Session ) . prepare ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CachedPreparedStatementCreator org.springframework.cassandra.core.CachedPreparedStatementCreator = new CachedPreparedStatementCreator ( STRING ) ; org.springframework.cassandra.core.CachedPreparedStatementCreator . createPreparedStatement ( org.springframework.cassandra.core.Session ) ; org.springframework.cassandra.core.CachedPreparedStatementCreator . createPreparedStatement ( org.springframework.cassandra.core.Session ) ; PreparedStatement org.springframework.cassandra.core.PreparedStatement = org.springframework.cassandra.core.CachedPreparedStatementCreator . createPreparedStatement ( org.springframework.cassandra.core.Session ) ; assertThat ( org.springframework.cassandra.core.PreparedStatement ) . isSameAs ( org.springframework.cassandra.core.PreparedStatement ) ; verify ( org.springframework.cassandra.core.Session , times ( NUMBER ) ) . prepare ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.cassandra.core.CachedPreparedStatementCreatorUnitTests.CreatePreparedStatementIsThreadSafe org.springframework.cassandra.core.CachedPreparedStatementCreatorUnitTests.CreatePreparedStatementIsThreadSafe = new org.springframework.cassandra.core.CachedPreparedStatementCreatorUnitTests.CreatePreparedStatementIsThreadSafe ( org.springframework.cassandra.core.PreparedStatement , new CachedPreparedStatementCreator ( STRING ) ) ; runManyTimes ( org.springframework.cassandra.core.CachedPreparedStatementCreatorUnitTests.CreatePreparedStatementIsThreadSafe , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void ( final PreparedStatement org.springframework.cassandra.core.PreparedStatement , CachedPreparedStatementCreator org.springframework.cassandra.core.CachedPreparedStatementCreator ) { this . org.springframework.cassandra.core.CachedPreparedStatementCreator = org.springframework.cassandra.core.CachedPreparedStatementCreator ; this . org.springframework.cassandra.core.Session = org.springframework.cassandra.core.Session ( Session .class , new org.springframework.cassandra.core.CachedPreparedStatementCreatorUnitTests.TestInvocationHandler ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.Object[] . int == NUMBER ) { waitForTick ( NUMBER ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; return org.springframework.cassandra.core.PreparedStatement ; } return super. java.lang.Object ( java.lang.Object , java.lang.reflect.Method , java.lang.Object[] ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.Object[] . int == NUMBER ) { waitForTick ( NUMBER ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; return org.springframework.cassandra.core.PreparedStatement ; } return super. java.lang.Object ( java.lang.Object , java.lang.reflect.Method , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { waitForTick ( NUMBER ) ; org.springframework.cassandra.core.CachedPreparedStatementCreator . createPreparedStatement ( org.springframework.cassandra.core.Session ) ; assertThat ( java.util.concurrent.atomic.AtomicInteger . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { waitForTick ( NUMBER ) ; org.springframework.cassandra.core.CachedPreparedStatementCreator . createPreparedStatement ( org.springframework.cassandra.core.Session ) ; assertThat ( java.util.concurrent.atomic.AtomicInteger . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return int ( ) ; } if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.Object[] . int == NUMBER ) { return boolean ( java.lang.Object[] [ NUMBER ] ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.reflect.InvocationHandler java.lang.reflect.InvocationHandler ) { return ( T ) java.lang.reflect.Proxy . java.lang.Object ( org.springframework.cassandra.core.CachedPreparedStatementCreatorUnitTests .class . java.lang.ClassLoader ( ) , new java.lang.Class [] { java.lang.Class<T> } , java.lang.reflect.InvocationHandler ) ; }  <METHOD_END>
