<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint = new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestEndpoint ( STRING ) ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint = new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestEndpoint ( STRING ) ) ; EndpointHandlerMapping org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping = new EndpointHandlerMapping ( java.util.Arrays . java.util.List<org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint> ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint , org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint ) ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . setApplicationContext ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ) . getHandler ( ) ) . isEqualTo ( new HandlerMethod ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint , this . java.lang.reflect.Method ) ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ) . getHandler ( ) ) . isEqualTo ( new HandlerMethod ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint , this . java.lang.reflect.Method ) ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint = new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestEndpoint ( STRING ) ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint = new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestEndpoint ( STRING ) ) ; EndpointHandlerMapping org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping = new EndpointHandlerMapping ( java.util.Arrays . java.util.List<org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint> ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint , org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint ) ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . setApplicationContext ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . setPrefix ( STRING ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . getHandler ( new MockHttpServletRequest ( STRING , STRING ) ) . getHandler ( ) ) . isEqualTo ( new HandlerMethod ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint , this . java.lang.reflect.Method ) ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . getHandler ( new MockHttpServletRequest ( STRING , STRING ) ) . getHandler ( ) ) . isEqualTo ( new HandlerMethod ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint , this . java.lang.reflect.Method ) ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpRequestMethodNotSupportedException .class ) public void void ( ) java.lang.Exception { org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint = new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestEndpoint ( STRING ) ) ; EndpointHandlerMapping org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping = new EndpointHandlerMapping ( java.util.Arrays . java.util.List<org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint> ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint ) ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . setApplicationContext ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint = new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestEndpoint ( STRING ) ) ; EndpointHandlerMapping org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping = new EndpointHandlerMapping ( java.util.Arrays . java.util.List<org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint> ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint ) ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . setApplicationContext ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpRequestMethodNotSupportedException .class ) public void void ( ) java.lang.Exception { org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint = new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestEndpoint ( STRING ) ) ; EndpointHandlerMapping org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping = new EndpointHandlerMapping ( java.util.Arrays . java.util.List<org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint> ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint ) ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . setApplicationContext ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint = new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestEndpoint ( STRING ) ) ; EndpointHandlerMapping org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping = new EndpointHandlerMapping ( java.util.Arrays . java.util.List<org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint> ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint ) ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . setDisabled ( true ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . setApplicationContext ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint = new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestEndpoint ( STRING ) ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint = new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestEndpoint ( STRING ) ) ; EndpointHandlerMapping org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping = new EndpointHandlerMapping ( java.util.Arrays . java.util.List<java.lang.Object> ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestMvcEndpoint , org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestActionEndpoint ) ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . setDisabled ( true ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . setApplicationContext ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ) ) . isNull ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return new MockHttpServletRequest ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> void ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestEndpoint org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestEndpoint ) { super( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestEndpoint ); }  <METHOD_END>
<METHOD_START> void ( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestEndpoint org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestEndpoint ) { super( org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingTests.TestEndpoint ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ PostMapping public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
