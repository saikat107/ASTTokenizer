<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.reflect.Method java.lang.reflect.Method ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; this . java.lang.reflect.Method = java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { super. afterPropertiesSet ( ) ; synchronized ( this . java.lang.Object ) { if ( this . boolean ) { return; } Assert . notNull ( this . java.lang.Object , STRING ) ; Assert . isTrue ( this . java.lang.reflect.Method != null || this . java.lang.String != null , STRING ) ; if ( this . java.lang.reflect.Method == null ) { this . java.lang.reflect.Method = ReflectionUtils . findMethod ( this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , this . java.lang.String ) ; Assert . notNull ( this . java.lang.reflect.Method , STRING + this . java.lang.String + STRING + this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } Assert . isTrue ( ! void .class . boolean ( this . java.lang.reflect.Method . java.lang.Class<?> ( ) ) , STRING + this . java.lang.reflect.Method . java.lang.String ( ) + STRING ) ; this . java.lang.reflect.Method . void ( true ) ; this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . java.lang.Object instanceof Lifecycle ) { ( ( Lifecycle ) this . java.lang.Object ) . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . java.lang.Object instanceof Lifecycle ) { ( ( Lifecycle ) this . java.lang.Object ) . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! ( this . java.lang.Object instanceof Lifecycle ) || ( ( Lifecycle ) this . java.lang.Object ) . isRunning ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { try { if ( ! this . boolean ) { this . void ( ) ; } return ReflectionUtils . invokeMethod ( this . java.lang.reflect.Method , this . java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessagingException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
