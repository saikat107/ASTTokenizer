<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageStore org.springframework.integration.mongodb.store.MessageStore = org.springframework.integration.mongodb.store.MessageStore ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.mongodb.store.MessageStore . addMessage ( org.springframework.integration.mongodb.store.Message<> ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageStore . getMessage ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) , org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> , org.springframework.integration.mongodb.store.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageStore org.springframework.integration.mongodb.store.MessageStore = org.springframework.integration.mongodb.store.MessageStore ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.mongodb.store.MessageStore . addMessage ( org.springframework.integration.mongodb.store.Message<> ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageStore . getMessage ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageStore . removeMessage ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageStore . getMessage ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertNull ( org.springframework.integration.mongodb.store.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageStore org.springframework.integration.mongodb.store.MessageStore = org.springframework.integration.mongodb.store.MessageStore ( ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person = new org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person ( ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person . void ( STRING ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person . void ( STRING ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = MessageBuilder . withPayload ( org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person ) . build ( ) ; org.springframework.integration.mongodb.store.MessageStore . addMessage ( org.springframework.integration.mongodb.store.Message<> ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageStore . getMessage ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) , org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> , org.springframework.integration.mongodb.store.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageStore org.springframework.integration.mongodb.store.MessageStore = org.springframework.integration.mongodb.store.MessageStore ( ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Foo org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Foo = new org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Foo ( ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Foo . void ( STRING ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = MessageBuilder . withPayload ( org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Foo ) . setHeader ( STRING , org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Foo ) . setHeader ( STRING , new org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Bar ( STRING ) ) . setHeader ( STRING , new org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Baz ( ) ) . setHeader ( STRING , new org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Abc ( ) ) . setHeader ( STRING , new org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Xyz ( ) ) . build ( ) ; DirectChannel org.springframework.integration.mongodb.store.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.mongodb.store.DirectChannel . setBeanName ( STRING ) ; DirectChannel org.springframework.integration.mongodb.store.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.mongodb.store.DirectChannel . setBeanName ( STRING ) ; org.springframework.integration.mongodb.store.Message<?> = MessageHistory . write ( org.springframework.integration.mongodb.store.Message<> , org.springframework.integration.mongodb.store.DirectChannel ) ; org.springframework.integration.mongodb.store.Message<?> = MessageHistory . write ( org.springframework.integration.mongodb.store.Message<> , org.springframework.integration.mongodb.store.DirectChannel ) ; org.springframework.integration.mongodb.store.MessageStore . addMessage ( org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageStore . getMessage ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertTrue ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . get ( STRING ) instanceof org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Foo ) ; assertTrue ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . get ( STRING ) instanceof org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Bar ) ; assertTrue ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . get ( STRING ) instanceof org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Baz ) ; assertTrue ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . get ( STRING ) instanceof org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Abc ) ; assertTrue ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . get ( STRING ) instanceof org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Xyz ) ; MessageHistory org.springframework.integration.mongodb.store.MessageHistory = MessageHistory . read ( org.springframework.integration.mongodb.store.Message<> ) ; assertNotNull ( org.springframework.integration.mongodb.store.MessageHistory ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageHistory . size ( ) ) ; java.util.Properties java.util.Properties = org.springframework.integration.mongodb.store.MessageHistory . get ( NUMBER ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageStore org.springframework.integration.mongodb.store.MessageStore = org.springframework.integration.mongodb.store.MessageStore ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = MessageBuilder . withPayload ( STRING ) . pushSequenceDetails ( java.util.UUID . java.util.UUID ( ) , NUMBER , NUMBER ) . pushSequenceDetails ( java.util.UUID . java.util.UUID ( ) , NUMBER , NUMBER ) . build ( ) ; org.springframework.integration.mongodb.store.MessageStore . addMessage ( org.springframework.integration.mongodb.store.Message<> ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageStore . getMessage ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) , org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> , org.springframework.integration.mongodb.store.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MessageStore org.springframework.integration.mongodb.store.MessageStore = this . org.springframework.integration.mongodb.store.MessageStore ( ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person = new org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person ( ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person . void ( STRING ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person . void ( STRING ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < Message < ? > > ( MessageBuilder . withPayload ( org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person ) . build ( ) ) ; org.springframework.integration.mongodb.store.MessageStore . addMessage ( org.springframework.integration.mongodb.store.Message<> ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageStore . getMessage ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertTrue ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) instanceof GenericMessage ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) , org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) ) ; assertEquals ( ( ( Message < ? > ) org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) . getPayload ( ) , org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> , org.springframework.integration.mongodb.store.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MessageStore org.springframework.integration.mongodb.store.MessageStore = this . org.springframework.integration.mongodb.store.MessageStore ( ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person = new org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person ( ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person . void ( STRING ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person . void ( STRING ) ; Message < org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person > org.springframework.integration.mongodb.store.Message<org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person> = MessageBuilder . withPayload ( org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person ) . build ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new AdviceMessage < java.lang.String > ( STRING , org.springframework.integration.mongodb.store.Message<org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person> ) ; org.springframework.integration.mongodb.store.MessageStore . addMessage ( org.springframework.integration.mongodb.store.Message<> ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageStore . getMessage ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertTrue ( org.springframework.integration.mongodb.store.Message<> instanceof AdviceMessage ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) , org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person> , ( ( AdviceMessage < ? > ) org.springframework.integration.mongodb.store.Message<> ) . getInputMessage ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> , org.springframework.integration.mongodb.store.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MessageStore org.springframework.integration.mongodb.store.MessageStore = this . org.springframework.integration.mongodb.store.MessageStore ( ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person = new org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person ( ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person . void ( STRING ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person . void ( STRING ) ; Message < org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person > org.springframework.integration.mongodb.store.Message<org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person> = MessageBuilder . withPayload ( org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person ) . build ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < Message < ? > > ( new AdviceMessage < java.lang.String > ( STRING , org.springframework.integration.mongodb.store.Message<org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person> ) ) ; org.springframework.integration.mongodb.store.MessageStore . addMessage ( org.springframework.integration.mongodb.store.Message<> ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageStore . getMessage ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertTrue ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) instanceof AdviceMessage ) ; AdviceMessage < ? > org.springframework.integration.mongodb.store.AdviceMessage<?> = ( AdviceMessage < ? > ) org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ; assertEquals ( STRING , org.springframework.integration.mongodb.store.AdviceMessage<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) , org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person> , org.springframework.integration.mongodb.store.AdviceMessage<> . getInputMessage ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> , org.springframework.integration.mongodb.store.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MessageStore org.springframework.integration.mongodb.store.MessageStore = this . org.springframework.integration.mongodb.store.MessageStore ( ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person = new org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person ( ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person . void ( STRING ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person . void ( STRING ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < Message < ? > > ( MutableMessageBuilder . withPayload ( org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person ) . build ( ) ) ; org.springframework.integration.mongodb.store.MessageStore . addMessage ( org.springframework.integration.mongodb.store.Message<> ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageStore . getMessage ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertThat ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) , instanceOf ( MutableMessage .class ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) , org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) ) ; assertEquals ( ( ( Message < ? > ) org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) . getPayload ( ) , org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> , org.springframework.integration.mongodb.store.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MessageStore org.springframework.integration.mongodb.store.MessageStore = this . org.springframework.integration.mongodb.store.MessageStore ( ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person = new org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person ( ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person . void ( STRING ) ; org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person . void ( STRING ) ; Message < org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person > org.springframework.integration.mongodb.store.Message<org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person> = MessageBuilder . withPayload ( org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person ) . build ( ) ; MessagingException org.springframework.integration.mongodb.store.MessagingException ; try { throw new java.lang.RuntimeException ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.mongodb.store.MessagingException = new MessagingException ( org.springframework.integration.mongodb.store.Message<org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person> , STRING , java.lang.Exception ) ; } Message < ? > org.springframework.integration.mongodb.store.Message<?> = new ErrorMessage ( org.springframework.integration.mongodb.store.MessagingException ) ; org.springframework.integration.mongodb.store.MessageStore . addMessage ( org.springframework.integration.mongodb.store.Message<> ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageStore . getMessage ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertTrue ( org.springframework.integration.mongodb.store.Message<> instanceof ErrorMessage ) ; assertThat ( org.springframework.integration.mongodb.store.Message<> . getPayload ( ) , Matchers . instanceOf ( MessagingException .class ) ) ; assertThat ( ( ( MessagingException ) org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) . getMessage ( ) , containsString ( STRING ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person> , ( ( MessagingException ) org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) . getFailedMessage ( ) ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) , org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MessageStore org.springframework.integration.mongodb.store.MessageStore = org.springframework.integration.mongodb.store.MessageStore ( ) ; Message < java.lang.String > org.springframework.integration.mongodb.store.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.mongodb.store.Message<java.lang.String> = org.springframework.integration.mongodb.store.MessageStore . addMessage ( org.springframework.integration.mongodb.store.Message<java.lang.String> ) ; Message < java.lang.String > org.springframework.integration.mongodb.store.Message<java.lang.String> = org.springframework.integration.mongodb.store.MessageStore . addMessage ( org.springframework.integration.mongodb.store.Message<java.lang.String> ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<java.lang.String> , org.springframework.integration.mongodb.store.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( ) { }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( ) { }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { final int int = NUMBER ; int int = NUMBER ; int = int * int + ( ( java.lang.String == null ) ? NUMBER : java.lang.String . int ( ) ) ; int = int * int + ( ( java.lang.String == null ) ? NUMBER : java.lang.String . int ( ) ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( java.lang.Class<? extends org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person = ( org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person ) java.lang.Object ; if ( java.lang.String == null ) { if ( org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person . java.lang.String != null ) { return false ; } } else if ( ! java.lang.String . boolean ( org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person . java.lang.String ) ) { return false ; } if ( java.lang.String == null ) { if ( org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person . java.lang.String != null ) { return false ; } } else if ( ! java.lang.String . boolean ( org.springframework.integration.mongodb.store.AbstractMongoDbMessageStoreTests.Person . java.lang.String ) ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.integration.mongodb.store.MessageStore org.springframework.integration.mongodb.store.MessageStore ( ) java.lang.Exception ;  <METHOD_END>
