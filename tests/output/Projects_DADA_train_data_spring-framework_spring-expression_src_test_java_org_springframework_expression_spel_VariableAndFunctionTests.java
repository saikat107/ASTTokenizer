<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Integer .class , SHOULD_BE_WRITABLE ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class , SHOULD_NOT_BE_WRITABLE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , int [] .class ) ; evaluate ( STRING , STRING , int [] .class ) ; evaluateAndCheckError ( STRING , SpelMessage . INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION , NUMBER , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , this . java.lang.Class<? extends org.springframework.expression.spel.VariableAndFunctionTests> ( ) . java.lang.reflect.Method ( STRING ) ) ; try { @ java.lang.SuppressWarnings ( STRING ) java.lang.Object java.lang.Object = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; fail ( STRING ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { if ( org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) != SpelMessage . FUNCTION_MUST_BE_STATIC ) { org.springframework.expression.spel.SpelEvaluationException . printStackTrace ( ) ; fail ( STRING + org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( ) {	}  <METHOD_END>
