<METHOD_START> public void void ( JndiTemplate org.springframework.remoting.rmi.JndiTemplate ) { this . org.springframework.remoting.rmi.JndiTemplate = ( org.springframework.remoting.rmi.JndiTemplate != null ? org.springframework.remoting.rmi.JndiTemplate : new JndiTemplate ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . org.springframework.remoting.rmi.JndiTemplate = new JndiTemplate ( java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) javax.naming.NamingException , java.rmi.RemoteException { void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) javax.naming.NamingException , java.rmi.RemoteException { if ( this . java.lang.String == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . java.rmi.Remote = getObjectToExport ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) javax.naming.NamingException { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + this . java.lang.String + STRING ) ; } this . org.springframework.remoting.rmi.JndiTemplate . rebind ( this . java.lang.String , this . java.rmi.Remote ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) javax.naming.NamingException , java.rmi.NoSuchObjectException { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + this . java.lang.String + STRING ) ; } this . org.springframework.remoting.rmi.JndiTemplate . unbind ( this . java.lang.String ) ; }  <METHOD_END>
