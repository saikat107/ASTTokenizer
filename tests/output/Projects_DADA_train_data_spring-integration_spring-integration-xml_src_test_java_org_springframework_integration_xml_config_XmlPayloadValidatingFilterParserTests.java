<METHOD_START> @ Test public void void ( ) java.lang.Exception { EventDrivenConsumer org.springframework.integration.xml.config.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.xml.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.xml.config.EventDrivenConsumer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.xml.config.EventDrivenConsumer , STRING ) ) ; assertEquals ( - NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.xml.config.EventDrivenConsumer , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.xml.config.EventDrivenConsumer , STRING , java.lang.Boolean .class ) ) ; SmartLifecycleRoleController org.springframework.integration.xml.config.SmartLifecycleRoleController = org.springframework.integration.xml.config.ApplicationContext . getBean ( SmartLifecycleRoleController .class ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.xml.config.SmartLifecycle> < SmartLifecycle > java.util.List<org.springframework.integration.xml.config.SmartLifecycle> = ( java.util.List<org.springframework.integration.xml.config.SmartLifecycle> < SmartLifecycle > ) TestUtils . getPropertyValue ( org.springframework.integration.xml.config.SmartLifecycleRoleController , STRING , MultiValueMap .class ) . get ( STRING ) ; assertThat ( java.util.List<org.springframework.integration.xml.config.SmartLifecycle> , contains ( ( SmartLifecycle ) org.springframework.integration.xml.config.EventDrivenConsumer ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; GenericMessage < org.w3c.dom.Document > org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> = new GenericMessage < org.w3c.dom.Document > ( org.w3c.dom.Document ) ; PollableChannel org.springframework.integration.xml.config.PollableChannel = org.springframework.integration.xml.config.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; MessageChannel org.springframework.integration.xml.config.MessageChannel = org.springframework.integration.xml.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> ) ; assertNotNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; GenericMessage < org.w3c.dom.Document > org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> = new GenericMessage < org.w3c.dom.Document > ( org.w3c.dom.Document ) ; PollableChannel org.springframework.integration.xml.config.PollableChannel = org.springframework.integration.xml.config.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; PollableChannel org.springframework.integration.xml.config.PollableChannel = org.springframework.integration.xml.config.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; MessageChannel org.springframework.integration.xml.config.MessageChannel = org.springframework.integration.xml.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> ) ; assertNotNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; GenericMessage < org.w3c.dom.Document > org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> = new GenericMessage < org.w3c.dom.Document > ( org.w3c.dom.Document ) ; MessageChannel org.springframework.integration.xml.config.MessageChannel = org.springframework.integration.xml.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; try { org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , Matchers . instanceOf ( MessageRejectedException .class ) ) ; java.lang.Throwable java.lang.Throwable = java.lang.Exception . java.lang.Throwable ( ) ; assertThat ( java.lang.Throwable , Matchers . instanceOf ( AggregatedXmlMessageValidationException .class ) ) ; assertThat ( java.lang.Throwable . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; assertThat ( java.lang.Throwable . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; GenericMessage < org.w3c.dom.Document > org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> = new GenericMessage < org.w3c.dom.Document > ( org.w3c.dom.Document ) ; PollableChannel org.springframework.integration.xml.config.PollableChannel = org.springframework.integration.xml.config.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; MessageChannel org.springframework.integration.xml.config.MessageChannel = org.springframework.integration.xml.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> ) ; assertNotNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; GenericMessage < org.w3c.dom.Document > org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> = new GenericMessage < org.w3c.dom.Document > ( org.w3c.dom.Document ) ; PollableChannel org.springframework.integration.xml.config.PollableChannel = org.springframework.integration.xml.config.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; MessageChannel org.springframework.integration.xml.config.MessageChannel = org.springframework.integration.xml.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> ) ; assertNotNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
