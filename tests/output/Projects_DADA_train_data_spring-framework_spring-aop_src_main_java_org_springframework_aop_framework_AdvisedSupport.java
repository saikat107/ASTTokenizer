<METHOD_START> public void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this(); void ( java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { this . java.util.Map<org.springframework.aop.framework.AdvisedSupport.MethodCacheKey,java.util.List<java.lang.Object>> = new java.util.concurrent.ConcurrentHashMap<org.springframework.aop.framework.AdvisedSupport.MethodCacheKey,java.util.List<java.lang.Object>> <> ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { void ( new SingletonTargetSource ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TargetSource org.springframework.aop.framework.TargetSource ) { this . org.springframework.aop.framework.TargetSource = ( org.springframework.aop.framework.TargetSource != null ? org.springframework.aop.framework.TargetSource : org.springframework.aop.framework.TargetSource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.framework.TargetSource org.springframework.aop.framework.TargetSource ( ) { return this . org.springframework.aop.framework.TargetSource ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . org.springframework.aop.framework.TargetSource = EmptyTargetSource . forClass ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . org.springframework.aop.framework.TargetSource . getTargetClass ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( AdvisorChainFactory org.springframework.aop.framework.AdvisorChainFactory ) { Assert . notNull ( org.springframework.aop.framework.AdvisorChainFactory , STRING ) ; this . org.springframework.aop.framework.AdvisorChainFactory = org.springframework.aop.framework.AdvisorChainFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.aop.framework.AdvisorChainFactory org.springframework.aop.framework.AdvisorChainFactory ( ) { return this . org.springframework.aop.framework.AdvisorChainFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . notNull ( java.lang.Class<?>[] , STRING ) ; this . java.util.List<java.lang.Class<?>> . void ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { void ( java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; if ( ! java.lang.Class<> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } if ( ! this . java.util.List<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ) { this . java.util.List<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ; void ( ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return this . java.util.List<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return this . java.util.List<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ this . java.util.List<java.lang.Class<?>> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : this . java.util.List<java.lang.Class<?>> ) { if ( java.lang.Class<> . boolean ( java.lang.Class<> ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.aop.framework.Advisor [] org.springframework.aop.framework.Advisor[] ( ) { return this . org.springframework.aop.framework.Advisor[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Advisor org.springframework.aop.framework.Advisor ) { int int = this . java.util.List<org.springframework.aop.framework.Advisor> . size ( ) ; void ( int , org.springframework.aop.framework.Advisor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int , Advisor org.springframework.aop.framework.Advisor ) throws org.springframework.aop.framework.AopConfigException { if ( org.springframework.aop.framework.Advisor instanceof IntroductionAdvisor ) { void ( ( IntroductionAdvisor ) org.springframework.aop.framework.Advisor ) ; } void ( int , org.springframework.aop.framework.Advisor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Advisor org.springframework.aop.framework.Advisor ) { int int = int ( org.springframework.aop.framework.Advisor ) ; if ( int == - NUMBER ) { return false ; } else { void ( int ) ; return true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) throws org.springframework.aop.framework.AopConfigException { if ( isFrozen ( ) ) { throw new AopConfigException ( STRING ) ; } if ( int < NUMBER || int > this . java.util.List<org.springframework.aop.framework.Advisor> . size ( ) - NUMBER ) { throw new AopConfigException ( STRING + int + STRING + STRING + this . java.util.List<org.springframework.aop.framework.Advisor> . size ( ) + STRING ) ; } Advisor org.springframework.aop.framework.Advisor = this . java.util.List<org.springframework.aop.framework.Advisor> . get ( int ) ; if ( org.springframework.aop.framework.Advisor instanceof IntroductionAdvisor ) { IntroductionAdvisor org.springframework.aop.framework.IntroductionAdvisor = ( IntroductionAdvisor ) org.springframework.aop.framework.Advisor ; for ( int int = NUMBER ; int < org.springframework.aop.framework.IntroductionAdvisor . getInterfaces ( ) . length ; int ++ ) { boolean ( org.springframework.aop.framework.IntroductionAdvisor . getInterfaces ( ) [ int ] ) ; } } this . java.util.List<org.springframework.aop.framework.Advisor> . remove ( int ) ; void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( Advisor org.springframework.aop.framework.Advisor ) { Assert . notNull ( org.springframework.aop.framework.Advisor , STRING ) ; return this . java.util.List<org.springframework.aop.framework.Advisor> . indexOf ( org.springframework.aop.framework.Advisor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Advisor org.springframework.aop.framework.Advisor , Advisor org.springframework.aop.framework.Advisor ) throws org.springframework.aop.framework.AopConfigException { Assert . notNull ( org.springframework.aop.framework.Advisor , STRING ) ; Assert . notNull ( org.springframework.aop.framework.Advisor , STRING ) ; int int = int ( org.springframework.aop.framework.Advisor ) ; if ( int == - NUMBER ) { return false ; } void ( int ) ; void ( int , org.springframework.aop.framework.Advisor ) ; return true ; }  <METHOD_END>
<METHOD_START> public void void ( Advisor ... org.springframework.aop.framework.Advisor[] ) { void ( java.util.Arrays . java.util.List ( org.springframework.aop.framework.Advisor[] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<org.springframework.aop.framework.Advisor> < Advisor > java.util.Collection<org.springframework.aop.framework.Advisor> ) { if ( isFrozen ( ) ) { throw new AopConfigException ( STRING ) ; } if ( ! CollectionUtils . isEmpty ( java.util.Collection<org.springframework.aop.framework.Advisor> ) ) { for ( Advisor org.springframework.aop.framework.Advisor : java.util.Collection<org.springframework.aop.framework.Advisor> ) { if ( org.springframework.aop.framework.Advisor instanceof IntroductionAdvisor ) { void ( ( IntroductionAdvisor ) org.springframework.aop.framework.Advisor ) ; } Assert . notNull ( org.springframework.aop.framework.Advisor , STRING ) ; this . java.util.List<org.springframework.aop.framework.Advisor> . add ( org.springframework.aop.framework.Advisor ) ; } void ( ) ; void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( IntroductionAdvisor org.springframework.aop.framework.IntroductionAdvisor ) { org.springframework.aop.framework.IntroductionAdvisor . validateInterfaces ( ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.aop.framework.IntroductionAdvisor . getInterfaces ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { void ( java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( int int , Advisor org.springframework.aop.framework.Advisor ) throws org.springframework.aop.framework.AopConfigException { Assert . notNull ( org.springframework.aop.framework.Advisor , STRING ) ; if ( isFrozen ( ) ) { throw new AopConfigException ( STRING ) ; } if ( int > this . java.util.List<org.springframework.aop.framework.Advisor> . size ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + int + STRING + this . java.util.List<org.springframework.aop.framework.Advisor> . size ( ) ) ; } this . java.util.List<org.springframework.aop.framework.Advisor> . add ( int , org.springframework.aop.framework.Advisor ) ; void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( ) { this . org.springframework.aop.framework.Advisor[] = this . java.util.List<org.springframework.aop.framework.Advisor> . toArray ( new Advisor [ this . java.util.List<org.springframework.aop.framework.Advisor> . size ( ) ] ) ; }  <METHOD_END>
<METHOD_START> protected final java.util.List<org.springframework.aop.framework.Advisor> < Advisor > java.util.List<org.springframework.aop.framework.Advisor> ( ) { return this . java.util.List<org.springframework.aop.framework.Advisor> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Advice org.springframework.aop.framework.Advice ) throws org.springframework.aop.framework.AopConfigException { int int = this . java.util.List<org.springframework.aop.framework.Advisor> . size ( ) ; void ( int , org.springframework.aop.framework.Advice ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int , Advice org.springframework.aop.framework.Advice ) throws org.springframework.aop.framework.AopConfigException { Assert . notNull ( org.springframework.aop.framework.Advice , STRING ) ; if ( org.springframework.aop.framework.Advice instanceof IntroductionInfo ) { void ( int , new DefaultIntroductionAdvisor ( org.springframework.aop.framework.Advice , ( IntroductionInfo ) org.springframework.aop.framework.Advice ) ) ; } else if ( org.springframework.aop.framework.Advice instanceof DynamicIntroductionAdvice ) { throw new AopConfigException ( STRING ) ; } else { void ( int , new DefaultPointcutAdvisor ( org.springframework.aop.framework.Advice ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Advice org.springframework.aop.framework.Advice ) throws org.springframework.aop.framework.AopConfigException { int int = int ( org.springframework.aop.framework.Advice ) ; if ( int == - NUMBER ) { return false ; } else { void ( int ) ; return true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( Advice org.springframework.aop.framework.Advice ) { Assert . notNull ( org.springframework.aop.framework.Advice , STRING ) ; for ( int int = NUMBER ; int < this . java.util.List<org.springframework.aop.framework.Advisor> . size ( ) ; int ++ ) { Advisor org.springframework.aop.framework.Advisor = this . java.util.List<org.springframework.aop.framework.Advisor> . get ( int ) ; if ( org.springframework.aop.framework.Advisor . getAdvice ( ) == org.springframework.aop.framework.Advice ) { return int ; } } return - NUMBER ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( Advice org.springframework.aop.framework.Advice ) { if ( org.springframework.aop.framework.Advice != null ) { for ( Advisor org.springframework.aop.framework.Advisor : this . java.util.List<org.springframework.aop.framework.Advisor> ) { if ( org.springframework.aop.framework.Advisor . getAdvice ( ) == org.springframework.aop.framework.Advice ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.Class<?> < ? > java.lang.Class<?> ) { int int = NUMBER ; if ( java.lang.Class<> != null ) { for ( Advisor org.springframework.aop.framework.Advisor : this . java.util.List<org.springframework.aop.framework.Advisor> ) { if ( java.lang.Class<> . boolean ( org.springframework.aop.framework.Advisor . getAdvice ( ) ) ) { int ++ ; } } } return int ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { org.springframework.aop.framework.AdvisedSupport.MethodCacheKey org.springframework.aop.framework.AdvisedSupport.MethodCacheKey = new org.springframework.aop.framework.AdvisedSupport.MethodCacheKey ( java.lang.reflect.Method ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = this . java.util.Map<org.springframework.aop.framework.AdvisedSupport.MethodCacheKey,java.util.List<java.lang.Object>> . java.util.List<java.lang.Object> ( org.springframework.aop.framework.AdvisedSupport.MethodCacheKey ) ; if ( java.util.List<java.lang.Object> == null ) { java.util.List<java.lang.Object> = this . org.springframework.aop.framework.AdvisorChainFactory . getInterceptorsAndDynamicInterceptionAdvice ( this , java.lang.reflect.Method , java.lang.Class<> ) ; this . java.util.Map<org.springframework.aop.framework.AdvisedSupport.MethodCacheKey,java.util.List<java.lang.Object>> . java.util.List<java.lang.Object> ( org.springframework.aop.framework.AdvisedSupport.MethodCacheKey , java.util.List<java.lang.Object> ) ; } return java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { this . java.util.Map<org.springframework.aop.framework.AdvisedSupport.MethodCacheKey,java.util.List<java.lang.Object>> . void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( org.springframework.aop.framework.AdvisedSupport org.springframework.aop.framework.AdvisedSupport ) { void ( org.springframework.aop.framework.AdvisedSupport , org.springframework.aop.framework.AdvisedSupport . org.springframework.aop.framework.TargetSource , new java.util.ArrayList <> ( org.springframework.aop.framework.AdvisedSupport . java.util.List<org.springframework.aop.framework.Advisor> ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( org.springframework.aop.framework.AdvisedSupport org.springframework.aop.framework.AdvisedSupport , TargetSource org.springframework.aop.framework.TargetSource , java.util.List<org.springframework.aop.framework.Advisor> < Advisor > java.util.List<org.springframework.aop.framework.Advisor> ) { copyFrom ( org.springframework.aop.framework.AdvisedSupport ) ; this . org.springframework.aop.framework.TargetSource = org.springframework.aop.framework.TargetSource ; this . org.springframework.aop.framework.AdvisorChainFactory = org.springframework.aop.framework.AdvisedSupport . org.springframework.aop.framework.AdvisorChainFactory ; this . java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( org.springframework.aop.framework.AdvisedSupport . java.util.List<java.lang.Class<?>> ) ; for ( Advisor org.springframework.aop.framework.Advisor : java.util.List<org.springframework.aop.framework.Advisor> ) { if ( org.springframework.aop.framework.Advisor instanceof IntroductionAdvisor ) { void ( ( IntroductionAdvisor ) org.springframework.aop.framework.Advisor ) ; } Assert . notNull ( org.springframework.aop.framework.Advisor , STRING ) ; this . java.util.List<org.springframework.aop.framework.Advisor> . add ( org.springframework.aop.framework.Advisor ) ; } void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.aop.framework.AdvisedSupport org.springframework.aop.framework.AdvisedSupport ( ) { org.springframework.aop.framework.AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new org.springframework.aop.framework.AdvisedSupport ( ) ; org.springframework.aop.framework.AdvisedSupport . copyFrom ( this ) ; org.springframework.aop.framework.AdvisedSupport . org.springframework.aop.framework.TargetSource = EmptyTargetSource . forClass ( java.lang.Class<?> ( ) , org.springframework.aop.framework.TargetSource ( ) . isStatic ( ) ) ; org.springframework.aop.framework.AdvisedSupport . org.springframework.aop.framework.AdvisorChainFactory = this . org.springframework.aop.framework.AdvisorChainFactory ; org.springframework.aop.framework.AdvisedSupport . java.util.List<java.lang.Class<?>> = this . java.util.List<java.lang.Class<?>> ; org.springframework.aop.framework.AdvisedSupport . java.util.List<org.springframework.aop.framework.Advisor> = this . java.util.List<org.springframework.aop.framework.Advisor> ; org.springframework.aop.framework.AdvisedSupport . void ( ) ; return org.springframework.aop.framework.AdvisedSupport ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.ObjectInputStream java.io.ObjectInputStream ) throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ObjectInputStream . void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.Class<? extends org.springframework.aop.framework.AdvisedSupport> ( ) . java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( this . java.util.List<java.lang.Class<?>> . int ( ) ) . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( ClassUtils . classNamesToString ( this . java.util.List<java.lang.Class<?>> ) ) . append ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( this . java.util.List<org.springframework.aop.framework.Advisor> . size ( ) ) . append ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( this . java.util.List<org.springframework.aop.framework.Advisor> ) . append ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( this . org.springframework.aop.framework.TargetSource ) . append ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( super. java.lang.String ( ) ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method ) { this . java.lang.reflect.Method = java.lang.reflect.Method ; this . int = java.lang.reflect.Method . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( this == java.lang.Object || ( java.lang.Object instanceof org.springframework.aop.framework.AdvisedSupport.MethodCacheKey && this . java.lang.reflect.Method == ( ( org.springframework.aop.framework.AdvisedSupport.MethodCacheKey ) java.lang.Object ) . java.lang.reflect.Method ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.reflect.Method . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.aop.framework.AdvisedSupport.MethodCacheKey org.springframework.aop.framework.AdvisedSupport.MethodCacheKey ) { int int = this . java.lang.reflect.Method . java.lang.String ( ) . int ( org.springframework.aop.framework.AdvisedSupport.MethodCacheKey . java.lang.reflect.Method . java.lang.String ( ) ) ; if ( int == NUMBER ) { int = this . java.lang.reflect.Method . java.lang.String ( ) . int ( org.springframework.aop.framework.AdvisedSupport.MethodCacheKey . java.lang.reflect.Method . java.lang.String ( ) ) ; } return int ; }  <METHOD_END>
