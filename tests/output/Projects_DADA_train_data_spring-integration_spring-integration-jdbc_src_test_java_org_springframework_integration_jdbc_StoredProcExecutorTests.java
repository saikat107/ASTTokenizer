<METHOD_START> @ Test public void void ( ) { try { new StoredProcExecutor ( null ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; try { StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; org.springframework.integration.jdbc.StoredProcExecutor . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.StoredProcExecutor . afterPropertiesSet ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING + STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; try { org.springframework.integration.jdbc.StoredProcExecutor . setStoredProcedureName ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; final ExpressionFactoryBean org.springframework.integration.jdbc.ExpressionFactoryBean = new ExpressionFactoryBean ( STRING ) ; org.springframework.integration.jdbc.ExpressionFactoryBean . afterPropertiesSet ( ) ; final Expression org.springframework.integration.jdbc.Expression = org.springframework.integration.jdbc.ExpressionFactoryBean . getObject ( ) ; org.springframework.integration.jdbc.StoredProcExecutor . setStoredProcedureNameExpression ( org.springframework.integration.jdbc.Expression ) ; org.springframework.integration.jdbc.StoredProcExecutor . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.StoredProcExecutor . afterPropertiesSet ( ) ; assertEquals ( STRING , org.springframework.integration.jdbc.StoredProcExecutor . getStoredProcedureNameExpressionAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; org.springframework.integration.jdbc.StoredProcExecutor . setStoredProcedureName ( STRING ) ; org.springframework.integration.jdbc.StoredProcExecutor . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.StoredProcExecutor . afterPropertiesSet ( ) ; assertEquals ( STRING , org.springframework.integration.jdbc.StoredProcExecutor . getStoredProcedureName ( ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.StoredProcExecutor . getStoredProcedureNameExpressionAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; try { org.springframework.integration.jdbc.StoredProcExecutor . setReturningResultSetRowMappers ( null ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; java.util.Map<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> < java.lang.String , RowMapper < ? > > java.util.Map<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> = new java.util.HashMap<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> < java.lang.String , RowMapper < ? > > ( ) ; java.util.Map<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> . put ( STRING , null ) ; try { org.springframework.integration.jdbc.StoredProcExecutor . setReturningResultSetRowMappers ( java.util.Map<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; java.util.Map<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> < java.lang.String , RowMapper < ? > > java.util.Map<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> = new java.util.HashMap<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> < java.lang.String , RowMapper < ? > > ( ) ; org.springframework.integration.jdbc.StoredProcExecutor . setReturningResultSetRowMappers ( java.util.Map<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; try { org.springframework.integration.jdbc.StoredProcExecutor . setSqlParameterSourceFactory ( null ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; java.util.List<org.springframework.integration.jdbc.SqlParameter> < SqlParameter > java.util.List<org.springframework.integration.jdbc.SqlParameter> = new java.util.ArrayList<org.springframework.integration.jdbc.SqlParameter> < SqlParameter > ( ) ; java.util.List<org.springframework.integration.jdbc.SqlParameter> . add ( null ) ; try { org.springframework.integration.jdbc.StoredProcExecutor . setSqlParameters ( java.util.List<org.springframework.integration.jdbc.SqlParameter> ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; java.util.List<org.springframework.integration.jdbc.SqlParameter> < SqlParameter > java.util.List<org.springframework.integration.jdbc.SqlParameter> = new java.util.ArrayList<org.springframework.integration.jdbc.SqlParameter> < SqlParameter > ( ) ; try { org.springframework.integration.jdbc.StoredProcExecutor . setSqlParameters ( java.util.List<org.springframework.integration.jdbc.SqlParameter> ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; try { org.springframework.integration.jdbc.StoredProcExecutor . setSqlParameters ( null ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; java.util.List<org.springframework.integration.jdbc.ProcedureParameter> < ProcedureParameter > java.util.List<org.springframework.integration.jdbc.ProcedureParameter> = new java.util.ArrayList<org.springframework.integration.jdbc.ProcedureParameter> < ProcedureParameter > ( ) ; java.util.List<org.springframework.integration.jdbc.ProcedureParameter> . add ( null ) ; try { org.springframework.integration.jdbc.StoredProcExecutor . setProcedureParameters ( java.util.List<org.springframework.integration.jdbc.ProcedureParameter> ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; java.util.List<org.springframework.integration.jdbc.ProcedureParameter> < ProcedureParameter > java.util.List<org.springframework.integration.jdbc.ProcedureParameter> = new java.util.ArrayList<org.springframework.integration.jdbc.ProcedureParameter> < ProcedureParameter > ( ) ; try { org.springframework.integration.jdbc.StoredProcExecutor . setProcedureParameters ( java.util.List<org.springframework.integration.jdbc.ProcedureParameter> ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; try { org.springframework.integration.jdbc.StoredProcExecutor . setProcedureParameters ( null ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; final StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; final ExpressionFactoryBean org.springframework.integration.jdbc.ExpressionFactoryBean = new ExpressionFactoryBean ( STRING ) ; org.springframework.integration.jdbc.ExpressionFactoryBean . afterPropertiesSet ( ) ; final Expression org.springframework.integration.jdbc.Expression = org.springframework.integration.jdbc.ExpressionFactoryBean . getObject ( ) ; org.springframework.integration.jdbc.StoredProcExecutor . setStoredProcedureNameExpression ( org.springframework.integration.jdbc.Expression ) ; org.springframework.integration.jdbc.StoredProcExecutor . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.StoredProcExecutor . afterPropertiesSet ( ) ; this . void ( org.springframework.integration.jdbc.StoredProcExecutor ) ; org.springframework.integration.jdbc.StoredProcExecutor . executeStoredProcedure ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; try { org.springframework.integration.jdbc.StoredProcExecutor . executeStoredProcedure ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; final StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; final ExpressionFactoryBean org.springframework.integration.jdbc.ExpressionFactoryBean = new ExpressionFactoryBean ( STRING ) ; org.springframework.integration.jdbc.ExpressionFactoryBean . afterPropertiesSet ( ) ; final Expression org.springframework.integration.jdbc.Expression = org.springframework.integration.jdbc.ExpressionFactoryBean . getObject ( ) ; org.springframework.integration.jdbc.StoredProcExecutor . setStoredProcedureNameExpression ( org.springframework.integration.jdbc.Expression ) ; org.springframework.integration.jdbc.StoredProcExecutor . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.StoredProcExecutor . afterPropertiesSet ( ) ; this . void ( org.springframework.integration.jdbc.StoredProcExecutor ) ; for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { org.springframework.integration.jdbc.StoredProcExecutor . executeStoredProcedure ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; } final CacheStats org.springframework.integration.jdbc.CacheStats = ( CacheStats ) org.springframework.integration.jdbc.StoredProcExecutor . getJdbcCallOperationsCacheStatistics ( ) ; org.springframework.integration.jdbc.Logger . info ( org.springframework.integration.jdbc.CacheStats ) ; org.springframework.integration.jdbc.Logger . info ( org.springframework.integration.jdbc.CacheStats . totalLoadTime ( ) / NUMBER / NUMBER ) ; assertEquals ( org.springframework.integration.jdbc.CacheStats . hitCount ( ) , NUMBER ) ; assertEquals ( org.springframework.integration.jdbc.CacheStats . missCount ( ) , NUMBER ) ; assertEquals ( org.springframework.integration.jdbc.CacheStats . loadCount ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; final StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( javax.sql.DataSource ) ; org.springframework.integration.jdbc.StoredProcExecutor . setJdbcCallOperationsCacheSize ( NUMBER ) ; final ExpressionFactoryBean org.springframework.integration.jdbc.ExpressionFactoryBean = new ExpressionFactoryBean ( STRING ) ; org.springframework.integration.jdbc.ExpressionFactoryBean . afterPropertiesSet ( ) ; final Expression org.springframework.integration.jdbc.Expression = org.springframework.integration.jdbc.ExpressionFactoryBean . getObject ( ) ; org.springframework.integration.jdbc.StoredProcExecutor . setStoredProcedureNameExpression ( org.springframework.integration.jdbc.Expression ) ; org.springframework.integration.jdbc.StoredProcExecutor . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.StoredProcExecutor . afterPropertiesSet ( ) ; this . void ( org.springframework.integration.jdbc.StoredProcExecutor ) ; for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { org.springframework.integration.jdbc.StoredProcExecutor . executeStoredProcedure ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; } final CacheStats org.springframework.integration.jdbc.CacheStats = ( CacheStats ) org.springframework.integration.jdbc.StoredProcExecutor . getJdbcCallOperationsCacheStatistics ( ) ; org.springframework.integration.jdbc.Logger . info ( org.springframework.integration.jdbc.CacheStats ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.jdbc.CacheStats . missCount ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( final StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor ) { java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.jdbc.StoredProcExecutor , STRING ) ; new DirectFieldAccessor ( java.lang.Object ) . setPropertyValue ( STRING , new CacheLoader < java.lang.String , SimpleJdbcCallOperations > ( ) { @ java.lang.Override public org.springframework.integration.jdbc.SimpleJdbcCall org.springframework.integration.jdbc.SimpleJdbcCall ( java.lang.String java.lang.String ) { return mock ( SimpleJdbcCall .class ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.jdbc.SimpleJdbcCall org.springframework.integration.jdbc.SimpleJdbcCall ( java.lang.String java.lang.String ) { return mock ( SimpleJdbcCall .class ) ; }  <METHOD_END>
