<METHOD_START> @ java.lang.Override protected org.springframework.beans.DirectFieldAccessor org.springframework.beans.DirectFieldAccessor ( java.lang.Object java.lang.Object ) { return new DirectFieldAccessor ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; @ java.lang.SuppressWarnings ( STRING ) TestBean org.springframework.beans.TestBean = new TestBean ( ) { @ java.lang.SuppressWarnings ( STRING ) java.lang.StringBuilder java.lang.StringBuilder = java.lang.StringBuilder ; } ; DirectFieldAccessor org.springframework.beans.DirectFieldAccessor = org.springframework.beans.DirectFieldAccessor ( org.springframework.beans.TestBean ) ; assertEquals ( java.lang.StringBuilder .class , org.springframework.beans.DirectFieldAccessor . getPropertyType ( STRING ) ) ; assertEquals ( java.lang.StringBuilder , org.springframework.beans.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
