<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; HtmlEscapeTag org.springframework.web.servlet.tags.HtmlEscapeTag = new HtmlEscapeTag ( ) ; org.springframework.web.servlet.tags.HtmlEscapeTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.HtmlEscapeTag . doStartTag ( ) ; HtmlEscapingAwareTag org.springframework.web.servlet.tags.HtmlEscapingAwareTag = new HtmlEscapingAwareTag ( ) { @ java.lang.Override public int int ( ) java.lang.Exception { return EVAL_BODY_INCLUDE ; } } ; org.springframework.web.servlet.tags.HtmlEscapingAwareTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.HtmlEscapingAwareTag . doStartTag ( ) ; assertTrue ( STRING , ! org.springframework.web.servlet.tags.HtmlEscapeTag . getRequestContext ( ) . isDefaultHtmlEscape ( ) ) ; assertTrue ( STRING , ! org.springframework.web.servlet.tags.HtmlEscapingAwareTag . isHtmlEscape ( ) ) ; org.springframework.web.servlet.tags.HtmlEscapeTag . setDefaultHtmlEscape ( true ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.HtmlEscapeTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.HtmlEscapeTag . getRequestContext ( ) . isDefaultHtmlEscape ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.HtmlEscapingAwareTag . isHtmlEscape ( ) ) ; org.springframework.web.servlet.tags.HtmlEscapeTag . setDefaultHtmlEscape ( false ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.HtmlEscapeTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertTrue ( STRING , ! org.springframework.web.servlet.tags.HtmlEscapeTag . getRequestContext ( ) . isDefaultHtmlEscape ( ) ) ; assertTrue ( STRING , ! org.springframework.web.servlet.tags.HtmlEscapingAwareTag . isHtmlEscape ( ) ) ; org.springframework.web.servlet.tags.HtmlEscapeTag . setDefaultHtmlEscape ( true ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.HtmlEscapeTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; org.springframework.web.servlet.tags.HtmlEscapingAwareTag . setHtmlEscape ( true ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.HtmlEscapeTag . getRequestContext ( ) . isDefaultHtmlEscape ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.HtmlEscapingAwareTag . isHtmlEscape ( ) ) ; org.springframework.web.servlet.tags.HtmlEscapingAwareTag . setHtmlEscape ( false ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.HtmlEscapeTag . getRequestContext ( ) . isDefaultHtmlEscape ( ) ) ; assertTrue ( STRING , ! org.springframework.web.servlet.tags.HtmlEscapingAwareTag . isHtmlEscape ( ) ) ; org.springframework.web.servlet.tags.HtmlEscapeTag . setDefaultHtmlEscape ( false ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.HtmlEscapeTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; org.springframework.web.servlet.tags.HtmlEscapingAwareTag . setHtmlEscape ( true ) ; assertTrue ( STRING , ! org.springframework.web.servlet.tags.HtmlEscapeTag . getRequestContext ( ) . isDefaultHtmlEscape ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.HtmlEscapingAwareTag . isHtmlEscape ( ) ) ; org.springframework.web.servlet.tags.HtmlEscapingAwareTag . setHtmlEscape ( false ) ; assertTrue ( STRING , ! org.springframework.web.servlet.tags.HtmlEscapeTag . getRequestContext ( ) . isDefaultHtmlEscape ( ) ) ; assertTrue ( STRING , ! org.springframework.web.servlet.tags.HtmlEscapingAwareTag . isHtmlEscape ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) java.lang.Exception { return EVAL_BODY_INCLUDE ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; MockServletContext org.springframework.web.servlet.tags.MockServletContext = ( MockServletContext ) org.springframework.web.servlet.tags.PageContext . getServletContext ( ) ; org.springframework.web.servlet.tags.MockServletContext . addInitParameter ( WebUtils . HTML_ESCAPE_CONTEXT_PARAM , STRING ) ; HtmlEscapeTag org.springframework.web.servlet.tags.HtmlEscapeTag = new HtmlEscapeTag ( ) ; org.springframework.web.servlet.tags.HtmlEscapeTag . setDefaultHtmlEscape ( false ) ; org.springframework.web.servlet.tags.HtmlEscapeTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.HtmlEscapeTag . doStartTag ( ) ; assertTrue ( STRING , ! org.springframework.web.servlet.tags.HtmlEscapeTag . getRequestContext ( ) . isDefaultHtmlEscape ( ) ) ; org.springframework.web.servlet.tags.HtmlEscapeTag . setDefaultHtmlEscape ( true ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.HtmlEscapeTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.HtmlEscapeTag . getRequestContext ( ) . isDefaultHtmlEscape ( ) ) ; org.springframework.web.servlet.tags.HtmlEscapeTag . setDefaultHtmlEscape ( false ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.HtmlEscapeTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertTrue ( STRING , ! org.springframework.web.servlet.tags.HtmlEscapeTag . getRequestContext ( ) . isDefaultHtmlEscape ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; MockServletContext org.springframework.web.servlet.tags.MockServletContext = ( MockServletContext ) org.springframework.web.servlet.tags.PageContext . getServletContext ( ) ; HtmlEscapeTag org.springframework.web.servlet.tags.HtmlEscapeTag = new HtmlEscapeTag ( ) ; org.springframework.web.servlet.tags.HtmlEscapeTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.HtmlEscapeTag . doStartTag ( ) ; org.springframework.web.servlet.tags.MockServletContext . addInitParameter ( WebUtils . HTML_ESCAPE_CONTEXT_PARAM , STRING ) ; assertTrue ( STRING , ! org.springframework.web.servlet.tags.HtmlEscapeTag . getRequestContext ( ) . isDefaultHtmlEscape ( ) ) ; org.springframework.web.servlet.tags.HtmlEscapeTag . setDefaultHtmlEscape ( true ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.HtmlEscapeTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.HtmlEscapeTag . getRequestContext ( ) . isDefaultHtmlEscape ( ) ) ; org.springframework.web.servlet.tags.HtmlEscapeTag . setDefaultHtmlEscape ( false ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.HtmlEscapeTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertTrue ( STRING , ! org.springframework.web.servlet.tags.HtmlEscapeTag . getRequestContext ( ) . isDefaultHtmlEscape ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; EscapeBodyTag org.springframework.web.servlet.tags.EscapeBodyTag = new EscapeBodyTag ( ) { @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; } @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.EscapeBodyTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; assertEquals ( BodyTag . EVAL_BODY_BUFFERED , org.springframework.web.servlet.tags.EscapeBodyTag . doStartTag ( ) ) ; assertEquals ( Tag . SKIP_BODY , org.springframework.web.servlet.tags.EscapeBodyTag . doAfterBody ( ) ) ; assertEquals ( STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; EscapeBodyTag org.springframework.web.servlet.tags.EscapeBodyTag = new EscapeBodyTag ( ) { @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; } @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.EscapeBodyTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.EscapeBodyTag . setHtmlEscape ( true ) ; assertEquals ( BodyTag . EVAL_BODY_BUFFERED , org.springframework.web.servlet.tags.EscapeBodyTag . doStartTag ( ) ) ; assertEquals ( Tag . SKIP_BODY , org.springframework.web.servlet.tags.EscapeBodyTag . doAfterBody ( ) ) ; assertEquals ( STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; EscapeBodyTag org.springframework.web.servlet.tags.EscapeBodyTag = new EscapeBodyTag ( ) { @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; } @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.EscapeBodyTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.EscapeBodyTag . setJavaScriptEscape ( true ) ; assertEquals ( BodyTag . EVAL_BODY_BUFFERED , org.springframework.web.servlet.tags.EscapeBodyTag . doStartTag ( ) ) ; assertEquals ( Tag . SKIP_BODY , org.springframework.web.servlet.tags.EscapeBodyTag . doAfterBody ( ) ) ; assertEquals ( STRING , STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; EscapeBodyTag org.springframework.web.servlet.tags.EscapeBodyTag = new EscapeBodyTag ( ) { @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; } @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.EscapeBodyTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.EscapeBodyTag . setHtmlEscape ( true ) ; org.springframework.web.servlet.tags.EscapeBodyTag . setJavaScriptEscape ( true ) ; assertEquals ( BodyTag . EVAL_BODY_BUFFERED , org.springframework.web.servlet.tags.EscapeBodyTag . doStartTag ( ) ) ; assertEquals ( Tag . SKIP_BODY , org.springframework.web.servlet.tags.EscapeBodyTag . doAfterBody ( ) ) ; assertEquals ( STRING , STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
