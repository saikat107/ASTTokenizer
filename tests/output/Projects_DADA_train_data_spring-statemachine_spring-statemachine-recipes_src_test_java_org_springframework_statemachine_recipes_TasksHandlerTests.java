<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { TasksHandler org.springframework.statemachine.recipes.TasksHandler = TasksHandler . builder ( ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . build ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener org.springframework.statemachine.recipes.TasksHandlerTests.TestListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.TasksHandler . getStateMachine ( ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.recipes.TasksHandler . runTasks ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( TasksHandler . STATE_READY ) ) ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) ; assertThat ( java.util.Map<java.lang.Object,java.lang.Object> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { TasksHandler org.springframework.statemachine.recipes.TasksHandler = TasksHandler . builder ( ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . build ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener org.springframework.statemachine.recipes.TasksHandlerTests.TestListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.TasksHandler . getStateMachine ( ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.recipes.TasksHandler . runTasks ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( TasksHandler . STATE_ERROR , TasksHandler . STATE_MANUAL ) ) ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) ; assertThat ( java.util.Map<java.lang.Object,java.lang.Object> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { TasksHandler org.springframework.statemachine.recipes.TasksHandler = TasksHandler . builder ( ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . build ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener org.springframework.statemachine.recipes.TasksHandlerTests.TestListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.TasksHandler . getStateMachine ( ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.recipes.TasksHandler . runTasks ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( TasksHandler . STATE_ERROR , TasksHandler . STATE_MANUAL ) ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.recipes.TasksHandler . fixCurrentProblems ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.recipes.TasksHandler . continueFromError ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( TasksHandler . STATE_READY ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { TasksHandler org.springframework.statemachine.recipes.TasksHandler = TasksHandler . builder ( ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . build ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . boolean = true ; org.springframework.statemachine.recipes.TasksHandler . addTasksListener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener org.springframework.statemachine.recipes.TasksHandlerTests.TestListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.TasksHandler . getStateMachine ( ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.recipes.TasksHandler . runTasks ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( TasksHandler . STATE_READY ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { TasksHandler org.springframework.statemachine.recipes.TasksHandler = TasksHandler . builder ( ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , STRING , java.lang.Runnable ( ) ) . task ( STRING , STRING , java.lang.Runnable ( ) ) . build ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener org.springframework.statemachine.recipes.TasksHandlerTests.TestListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.TasksHandler . getStateMachine ( ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.recipes.TasksHandler . runTasks ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( TasksHandler . STATE_READY ) ) ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) ; assertThat ( java.util.Map<java.lang.Object,java.lang.Object> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { TasksHandler org.springframework.statemachine.recipes.TasksHandler = TasksHandler . builder ( ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , STRING , java.lang.Runnable ( ) ) . task ( STRING , STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , STRING , java.lang.Runnable ( ) ) . task ( STRING , STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , STRING , java.lang.Runnable ( ) ) . task ( STRING , STRING , java.lang.Runnable ( ) ) . build ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener org.springframework.statemachine.recipes.TasksHandlerTests.TestListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.TasksHandler . getStateMachine ( ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.recipes.TasksHandler . runTasks ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( TasksHandler . STATE_READY ) ) ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) ; assertThat ( java.util.Map<java.lang.Object,java.lang.Object> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener ( ) ; TasksHandler org.springframework.statemachine.recipes.TasksHandler = TasksHandler . builder ( ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . listener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener ) . build ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener org.springframework.statemachine.recipes.TasksHandlerTests.TestListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.TasksHandler . getStateMachine ( ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.recipes.TasksHandler . runTasks ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( TasksHandler . STATE_READY ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener ( ) ; TasksHandler org.springframework.statemachine.recipes.TasksHandler = TasksHandler . builder ( ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . listener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener ) . build ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener org.springframework.statemachine.recipes.TasksHandlerTests.TestListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.TasksHandler . getStateMachine ( ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.recipes.TasksHandler . runTasks ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener ( ) ; TasksHandler org.springframework.statemachine.recipes.TasksHandler = TasksHandler . builder ( ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . listener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener ) . build ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener org.springframework.statemachine.recipes.TasksHandlerTests.TestListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.TasksHandler . getStateMachine ( ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.recipes.TasksHandler . runTasks ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( TasksHandler . STATE_ERROR , TasksHandler . STATE_MANUAL ) ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.recipes.TasksHandler . fixCurrentProblems ( ) ; org.springframework.statemachine.recipes.TasksHandler . continueFromError ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( TasksHandler . STATE_READY ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestTasksListener . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { TestStateMachinePersist org.springframework.statemachine.recipes.TestStateMachinePersist = new TestStateMachinePersist ( ) ; TasksHandler org.springframework.statemachine.recipes.TasksHandler = TasksHandler . builder ( ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . persist ( org.springframework.statemachine.recipes.TestStateMachinePersist ) . build ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener org.springframework.statemachine.recipes.TasksHandlerTests.TestListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.TasksHandler . getStateMachine ( ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.recipes.TestStateMachinePersist . reset ( NUMBER ) ; org.springframework.statemachine.recipes.TasksHandler . runTasks ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( TasksHandler . STATE_READY ) ) ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) ; assertThat ( java.util.Map<java.lang.Object,java.lang.Object> . int ( ) , is ( NUMBER ) ) ; assertThat ( persist . writeLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( persist . contexts . size ( ) , is ( NUMBER ) ) ; for ( StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String> : org.springframework.statemachine.recipes.TestStateMachinePersist . getContexts ( ) ) { if ( org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String> . getState ( ) == STRING ) { assertThat ( org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String> . getChilds ( ) . size ( ) , is ( NUMBER ) ) ; } else { assertThat ( org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String> . getChilds ( ) . size ( ) , is ( NUMBER ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { TestStateMachinePersist org.springframework.statemachine.recipes.TestStateMachinePersist = new TestStateMachinePersist ( ) ; TasksHandler org.springframework.statemachine.recipes.TasksHandler = TasksHandler . builder ( ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . persist ( org.springframework.statemachine.recipes.TestStateMachinePersist ) . build ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener org.springframework.statemachine.recipes.TasksHandlerTests.TestListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.TasksHandler . getStateMachine ( ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.recipes.TestStateMachinePersist . reset ( NUMBER ) ; org.springframework.statemachine.recipes.TasksHandler . runTasks ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( TasksHandler . STATE_ERROR , TasksHandler . STATE_MANUAL ) ) ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) ; assertThat ( java.util.Map<java.lang.Object,java.lang.Object> . int ( ) , is ( NUMBER ) ) ; assertThat ( persist . writeLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( persist . contexts . size ( ) , is ( NUMBER ) ) ; for ( StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String> : org.springframework.statemachine.recipes.TestStateMachinePersist . getContexts ( ) ) { if ( org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String> . getState ( ) == STRING ) { assertThat ( org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String> . getChilds ( ) . size ( ) , is ( NUMBER ) ) ; } else if ( org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String> . getState ( ) == STRING ) { assertThat ( org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String> . getChilds ( ) . size ( ) , is ( NUMBER ) ) ; } else { assertThat ( org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String> . getChilds ( ) . size ( ) , is ( NUMBER ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { TestStateMachinePersist org.springframework.statemachine.recipes.TestStateMachinePersist = new TestStateMachinePersist ( ) ; TasksHandler org.springframework.statemachine.recipes.TasksHandler = TasksHandler . builder ( ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . persist ( org.springframework.statemachine.recipes.TestStateMachinePersist ) . build ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener org.springframework.statemachine.recipes.TasksHandlerTests.TestListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.TasksHandler . getStateMachine ( ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ) ; org.springframework.statemachine.recipes.TasksHandler . resetFromPersistStore ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { DefaultStateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.DefaultStateMachineContext<java.lang.String,java.lang.String> = new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING , null , null , null ) ; java.util.List<org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String>> < StateMachineContext < java.lang.String , java.lang.String > > java.util.List<org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String>> < StateMachineContext < java.lang.String , java.lang.String > > ( ) ; java.util.List<org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.recipes.DefaultStateMachineContext<java.lang.String,java.lang.String> ) ; DefaultStateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.DefaultStateMachineContext<java.lang.String,java.lang.String> = new DefaultStateMachineContext < java.lang.String , java.lang.String > ( java.util.List<org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String>> , STRING , null , null , null ) ; TestStateMachinePersist org.springframework.statemachine.recipes.TestStateMachinePersist = new TestStateMachinePersist ( org.springframework.statemachine.recipes.DefaultStateMachineContext<java.lang.String,java.lang.String> ) ; TasksHandler org.springframework.statemachine.recipes.TasksHandler = TasksHandler . builder ( ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . persist ( org.springframework.statemachine.recipes.TestStateMachinePersist ) . build ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener org.springframework.statemachine.recipes.TasksHandlerTests.TestListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.TasksHandler . getStateMachine ( ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ) ; org.springframework.statemachine.recipes.TasksHandler . resetFromPersistStore ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( TasksHandler . STATE_ERROR , TasksHandler . STATE_MANUAL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { java.util.List<org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String>> < StateMachineContext < java.lang.String , java.lang.String > > java.util.List<org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String>> < StateMachineContext < java.lang.String , java.lang.String > > ( ) ; DefaultStateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.DefaultStateMachineContext<java.lang.String,java.lang.String> = new DefaultStateMachineContext < java.lang.String , java.lang.String > ( java.util.List<org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String>> , STRING , null , null , null ) ; TestStateMachinePersist org.springframework.statemachine.recipes.TestStateMachinePersist = new TestStateMachinePersist ( org.springframework.statemachine.recipes.DefaultStateMachineContext<java.lang.String,java.lang.String> ) ; TasksHandler org.springframework.statemachine.recipes.TasksHandler = TasksHandler . builder ( ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . persist ( org.springframework.statemachine.recipes.TestStateMachinePersist ) . build ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener org.springframework.statemachine.recipes.TasksHandlerTests.TestListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.TasksHandler . getStateMachine ( ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ) ; org.springframework.statemachine.recipes.TasksHandler . resetFromPersistStore ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( TasksHandler . STATE_READY ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.InterruptedException { DefaultStateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.DefaultStateMachineContext<java.lang.String,java.lang.String> = new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING , null , null , null ) ; java.util.List<org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String>> < StateMachineContext < java.lang.String , java.lang.String > > java.util.List<org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String>> < StateMachineContext < java.lang.String , java.lang.String > > ( ) ; java.util.List<org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.recipes.DefaultStateMachineContext<java.lang.String,java.lang.String> ) ; DefaultStateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.DefaultStateMachineContext<java.lang.String,java.lang.String> = new DefaultStateMachineContext < java.lang.String , java.lang.String > ( java.util.List<org.springframework.statemachine.recipes.StateMachineContext<java.lang.String,java.lang.String>> , STRING , null , null , null ) ; TestStateMachinePersist org.springframework.statemachine.recipes.TestStateMachinePersist = new TestStateMachinePersist ( org.springframework.statemachine.recipes.DefaultStateMachineContext<java.lang.String,java.lang.String> ) ; TasksHandler org.springframework.statemachine.recipes.TasksHandler = TasksHandler . builder ( ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . task ( STRING , java.lang.Runnable ( ) ) . persist ( org.springframework.statemachine.recipes.TestStateMachinePersist ) . build ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener org.springframework.statemachine.recipes.TasksHandlerTests.TestListener = new org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ( ) ; org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.TasksHandler . getStateMachine ( ) ; org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener ) ; org.springframework.statemachine.recipes.TasksHandler . resetFromPersistStore ( ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.TasksHandlerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( TasksHandler . STATE_READY ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.Runnable java.lang.Runnable ( ) { return new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {				} } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {				} }  <METHOD_END>
<METHOD_START> private static java.lang.Runnable java.lang.Runnable ( ) { return new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { throw new java.lang.RuntimeException ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> ) { synchronized ( java.lang.Object ) { java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.State<java.lang.String,java.lang.String> , State < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.State<java.lang.String,java.lang.String> ) { synchronized ( java.lang.Object ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.State<java.lang.String,java.lang.String> ) { synchronized ( java.lang.Object ) { java.util.List<org.springframework.statemachine.recipes.State<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.recipes.State<java.lang.String,java.lang.String> ) ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.State<java.lang.String,java.lang.String> ) { synchronized ( java.lang.Object ) { java.util.List<org.springframework.statemachine.recipes.State<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.recipes.State<java.lang.String,java.lang.String> ) ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.Transition<java.lang.String,java.lang.String> ) { synchronized ( java.lang.Object ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { synchronized ( java.lang.Object ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( int int , int int , int int ) { void ( int , int , int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int , int int , int int ) { void ( int , int , int , int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int , int int , int int , int int ) { synchronized ( java.lang.Object ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; int = NUMBER ; int = NUMBER ; java.util.List<org.springframework.statemachine.recipes.State<java.lang.String,java.lang.String>> . clear ( ) ; java.util.List<org.springframework.statemachine.recipes.State<java.lang.String,java.lang.String>> . clear ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( java.lang.Object ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( java.lang.Object ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { synchronized ( java.lang.Object ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { synchronized ( java.lang.Object ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Exception java.lang.Exception ) { synchronized ( java.lang.Object ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { synchronized ( java.lang.Object ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( java.lang.Object ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( java.lang.Object ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TasksHandler org.springframework.statemachine.recipes.TasksHandler , StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateContext<java.lang.String,java.lang.String> ) { if ( ! boolean ) { return; } org.springframework.statemachine.recipes.TasksHandler . markAllTasksFixed ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int , int int , int int , int int , int int , int int , int int ) { synchronized ( java.lang.Object ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; } }  <METHOD_END>
