<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.mongodb.log4j.ServerAddress = new ServerAddress ( STRING , NUMBER ) ; org.springframework.data.mongodb.log4j.MongoClient = new MongoClient ( org.springframework.data.mongodb.log4j.ServerAddress ) ; org.springframework.data.mongodb.log4j.DB = org.springframework.data.mongodb.log4j.MongoClient . getDB ( STRING ) ; BasicDBList org.springframework.data.mongodb.log4j.BasicDBList = new BasicDBList ( ) ; org.springframework.data.mongodb.log4j.BasicDBList . add ( STRING ) ; org.springframework.data.mongodb.log4j.DB . command ( new BasicDBObjectBuilder ( ) . add ( STRING , java.lang.String ) . add ( STRING , java.lang.String ) . add ( STRING , org.springframework.data.mongodb.log4j.BasicDBList ) . get ( ) ) ; org.springframework.data.mongodb.log4j.MongoClient . close ( ) ; org.springframework.data.mongodb.log4j.MongoClient = new MongoClient ( org.springframework.data.mongodb.log4j.ServerAddress , java.util.Collections . java.util.List ( MongoCredential . createCredential ( java.lang.String , java.lang.String , java.lang.String . char[] ( ) ) ) ) ; org.springframework.data.mongodb.log4j.DB = org.springframework.data.mongodb.log4j.MongoClient . getDB ( STRING ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.lang.String = java.lang.String . java.lang.String ( java.util.Calendar . int ( java.util.Calendar . int ) ) + java.lang.String . java.lang.String ( STRING , java.util.Calendar . int ( java.util.Calendar . int ) + NUMBER ) ; LogManager . resetConfiguration ( ) ; PropertyConfigurator . configure ( java.lang.Class<? extends org.springframework.data.mongodb.log4j.MongoLog4jAppenderAuthenticationIntegrationTests> ( ) . java.net.URL ( STRING ) ) ; org.springframework.data.mongodb.log4j.Logger = Logger . getLogger ( MongoLog4jAppenderIntegrationTests .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( org.springframework.data.mongodb.log4j.DB != null ) { org.springframework.data.mongodb.log4j.DB . getCollection ( java.lang.String ) . remove ( new BasicDBObject ( ) ) ; org.springframework.data.mongodb.log4j.DB . command ( new BasicDBObject ( STRING , java.lang.String ) ) ; } LogManager . resetConfiguration ( ) ; PropertyConfigurator . configure ( java.lang.Class<? extends org.springframework.data.mongodb.log4j.MongoLog4jAppenderAuthenticationIntegrationTests> ( ) . java.net.URL ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.log4j.Logger . debug ( STRING ) ; org.springframework.data.mongodb.log4j.Logger . info ( STRING ) ; org.springframework.data.mongodb.log4j.Logger . warn ( STRING ) ; org.springframework.data.mongodb.log4j.Logger . error ( STRING ) ; DBCursor org.springframework.data.mongodb.log4j.DBCursor = org.springframework.data.mongodb.log4j.DB . getCollection ( java.lang.String ) . find ( ) ; assertThat ( org.springframework.data.mongodb.log4j.DBCursor . count ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MDC . put ( STRING , STRING ) ; org.springframework.data.mongodb.log4j.Logger . debug ( STRING ) ; }  <METHOD_END>
