<METHOD_START> @ Test public void void ( ) java.lang.Exception { FormattingConversionServiceFactoryBean org.springframework.format.support.FormattingConversionServiceFactoryBean = new FormattingConversionServiceFactoryBean ( ) ; org.springframework.format.support.FormattingConversionServiceFactoryBean . afterPropertiesSet ( ) ; FormattingConversionService org.springframework.format.support.FormattingConversionService = org.springframework.format.support.FormattingConversionServiceFactoryBean . getObject ( ) ; TypeDescriptor org.springframework.format.support.TypeDescriptor = new TypeDescriptor ( org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean .class . java.lang.reflect.Field ( STRING ) ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; try { java.lang.Object java.lang.Object = org.springframework.format.support.FormattingConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , org.springframework.format.support.TypeDescriptor ) ; assertEquals ( NUMBER , java.lang.Object ) ; java.lang.Object = org.springframework.format.support.FormattingConversionService . convert ( NUMBER , org.springframework.format.support.TypeDescriptor , TypeDescriptor . valueOf ( java.lang.String .class ) ) ; assertEquals ( STRING , java.lang.Object ) ; } finally { LocaleContextHolder . resetLocaleContext ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FormattingConversionServiceFactoryBean org.springframework.format.support.FormattingConversionServiceFactoryBean = new FormattingConversionServiceFactoryBean ( ) ; org.springframework.format.support.FormattingConversionServiceFactoryBean . setRegisterDefaultFormatters ( false ) ; org.springframework.format.support.FormattingConversionServiceFactoryBean . afterPropertiesSet ( ) ; FormattingConversionService org.springframework.format.support.FormattingConversionService = org.springframework.format.support.FormattingConversionServiceFactoryBean . getObject ( ) ; TypeDescriptor org.springframework.format.support.TypeDescriptor = new TypeDescriptor ( org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean .class . java.lang.reflect.Field ( STRING ) ) ; try { org.springframework.format.support.FormattingConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , org.springframework.format.support.TypeDescriptor ) ; fail ( STRING ) ; } catch ( ConversionFailedException org.springframework.format.support.ConversionFailedException ) { assertTrue ( org.springframework.format.support.ConversionFailedException . getCause ( ) instanceof java.lang.NumberFormatException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FormattingConversionServiceFactoryBean org.springframework.format.support.FormattingConversionServiceFactoryBean = new FormattingConversionServiceFactoryBean ( ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = new java.util.HashSet<java.lang.Object> <> ( ) ; java.util.Set<java.lang.Object> . boolean ( new org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBeanFormatter ( ) ) ; java.util.Set<java.lang.Object> . boolean ( new org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.SpecialIntAnnotationFormatterFactory ( ) ) ; org.springframework.format.support.FormattingConversionServiceFactoryBean . setFormatters ( java.util.Set<java.lang.Object> ) ; org.springframework.format.support.FormattingConversionServiceFactoryBean . afterPropertiesSet ( ) ; FormattingConversionService org.springframework.format.support.FormattingConversionService = org.springframework.format.support.FormattingConversionServiceFactoryBean . getObject ( ) ; org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean = org.springframework.format.support.FormattingConversionService . convert ( STRING , org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean .class ) ; assertEquals ( NUMBER , org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean . int ( ) ) ; assertEquals ( STRING , org.springframework.format.support.FormattingConversionService . convert ( org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean , java.lang.String .class ) ) ; TypeDescriptor org.springframework.format.support.TypeDescriptor = new TypeDescriptor ( org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean .class . java.lang.reflect.Field ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.format.support.FormattingConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , org.springframework.format.support.TypeDescriptor ) ; assertEquals ( NUMBER , java.lang.Object ) ; java.lang.Object = org.springframework.format.support.FormattingConversionService . convert ( NUMBER , org.springframework.format.support.TypeDescriptor , TypeDescriptor . valueOf ( java.lang.String .class ) ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FormattingConversionServiceFactoryBean org.springframework.format.support.FormattingConversionServiceFactoryBean = new FormattingConversionServiceFactoryBean ( ) ; java.util.Set<org.springframework.format.support.FormatterRegistrar> < FormatterRegistrar > java.util.Set<org.springframework.format.support.FormatterRegistrar> = new java.util.HashSet<org.springframework.format.support.FormatterRegistrar> <> ( ) ; java.util.Set<org.springframework.format.support.FormatterRegistrar> . add ( new org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestFormatterRegistrar ( ) ) ; org.springframework.format.support.FormattingConversionServiceFactoryBean . setFormatterRegistrars ( java.util.Set<org.springframework.format.support.FormatterRegistrar> ) ; org.springframework.format.support.FormattingConversionServiceFactoryBean . afterPropertiesSet ( ) ; FormattingConversionService org.springframework.format.support.FormattingConversionService = org.springframework.format.support.FormattingConversionServiceFactoryBean . getObject ( ) ; org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean = org.springframework.format.support.FormattingConversionService . convert ( STRING , org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean .class ) ; assertEquals ( NUMBER , org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean . int ( ) ) ; assertEquals ( STRING , org.springframework.format.support.FormattingConversionService . convert ( org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FormattingConversionServiceFactoryBean org.springframework.format.support.FormattingConversionServiceFactoryBean = new FormattingConversionServiceFactoryBean ( ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = new java.util.HashSet<java.lang.Object> <> ( ) ; java.util.Set<java.lang.Object> . boolean ( new java.lang.Object ( ) ) ; org.springframework.format.support.FormattingConversionServiceFactoryBean . setFormatters ( java.util.Set<java.lang.Object> ) ; try { org.springframework.format.support.FormattingConversionServiceFactoryBean . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean , java.util.Locale java.util.Locale ) { return java.lang.String . java.lang.String ( org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean = new org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean ( ) ; org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean . void ( java.lang.Integer . int ( java.lang.String ) ) ; return org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBean ; }  <METHOD_END>
<METHOD_START> public void ( ) { java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( ) { return java.util.Set<java.lang.Class<?>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.format.support.Printer<?> < ? > org.springframework.format.support.Printer<?> ( org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.SpecialInt org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.SpecialInt , java.lang.Class<?> < ? > java.lang.Class<?> ) { assertEquals ( STRING , org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.SpecialInt . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.SpecialInt . java.lang.String ( ) ) ; return new Printer < java.lang.Integer > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer , java.util.Locale java.util.Locale ) { return STRING + java.lang.Integer . java.lang.String ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer , java.util.Locale java.util.Locale ) { return STRING + java.lang.Integer . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.format.support.Parser<?> < ? > org.springframework.format.support.Parser<?> ( org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.SpecialInt org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.SpecialInt , java.lang.Class<?> < ? > java.lang.Class<?> ) { assertEquals ( STRING , org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.SpecialInt . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.SpecialInt . java.lang.String ( ) ) ; return new Parser < java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { return java.lang.Integer . int ( java.lang.String . java.lang.String ( NUMBER ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { return java.lang.Integer . int ( java.lang.String . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FormatterRegistry org.springframework.format.support.FormatterRegistry ) { org.springframework.format.support.FormatterRegistry . addFormatter ( new org.springframework.format.support.FormattingConversionServiceFactoryBeanTests.TestBeanFormatter ( ) ) ; }  <METHOD_END>
