<METHOD_START> public void ( ConfigurableApplicationContext org.springframework.context.support.ConfigurableApplicationContext ) { this . org.springframework.context.support.ConfigurableApplicationContext = org.springframework.context.support.ConfigurableApplicationContext ; this . org.springframework.context.support.StringValueResolver = new EmbeddedValueResolver ( org.springframework.context.support.ConfigurableApplicationContext . getBeanFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( final java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.context.support.BeansException { java.security.AccessControlContext java.security.AccessControlContext = null ; if ( java.lang.System . java.lang.SecurityManager ( ) != null && ( java.lang.Object instanceof EnvironmentAware || java.lang.Object instanceof EmbeddedValueResolverAware || java.lang.Object instanceof ResourceLoaderAware || java.lang.Object instanceof ApplicationEventPublisherAware || java.lang.Object instanceof MessageSourceAware || java.lang.Object instanceof ApplicationContextAware ) ) { java.security.AccessControlContext = this . org.springframework.context.support.ConfigurableApplicationContext . getBeanFactory ( ) . getAccessControlContext ( ) ; } if ( java.security.AccessControlContext != null ) { java.security.AccessController . java.lang.Object ( new java.security.PrivilegedAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) { void ( java.lang.Object ) ; return null ; } } , java.security.AccessControlContext ) ; } else { void ( java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { void ( java.lang.Object ) ; return null ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof Aware ) { if ( java.lang.Object instanceof EnvironmentAware ) { ( ( EnvironmentAware ) java.lang.Object ) . setEnvironment ( this . org.springframework.context.support.ConfigurableApplicationContext . getEnvironment ( ) ) ; } if ( java.lang.Object instanceof EmbeddedValueResolverAware ) { ( ( EmbeddedValueResolverAware ) java.lang.Object ) . setEmbeddedValueResolver ( this . org.springframework.context.support.StringValueResolver ) ; } if ( java.lang.Object instanceof ResourceLoaderAware ) { ( ( ResourceLoaderAware ) java.lang.Object ) . setResourceLoader ( this . org.springframework.context.support.ConfigurableApplicationContext ) ; } if ( java.lang.Object instanceof ApplicationEventPublisherAware ) { ( ( ApplicationEventPublisherAware ) java.lang.Object ) . setApplicationEventPublisher ( this . org.springframework.context.support.ConfigurableApplicationContext ) ; } if ( java.lang.Object instanceof MessageSourceAware ) { ( ( MessageSourceAware ) java.lang.Object ) . setMessageSource ( this . org.springframework.context.support.ConfigurableApplicationContext ) ; } if ( java.lang.Object instanceof ApplicationContextAware ) { ( ( ApplicationContextAware ) java.lang.Object ) . setApplicationContext ( this . org.springframework.context.support.ConfigurableApplicationContext ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.Object ; }  <METHOD_END>
