<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ) { this . org.springframework.context.annotation.AnnotationAttributes = AnnotationConfigUtils . attributesFor ( org.springframework.context.annotation.AnnotationMetadata , EnableLoadTimeWeaving .class ) ; if ( this . org.springframework.context.annotation.AnnotationAttributes == null ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.context.annotation.AnnotationMetadata . getClassName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Autowired ( required = false ) public void void ( LoadTimeWeavingConfigurer org.springframework.context.annotation.LoadTimeWeavingConfigurer ) { this . org.springframework.context.annotation.LoadTimeWeavingConfigurer = org.springframework.context.annotation.LoadTimeWeavingConfigurer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = ConfigurableApplicationContext . LOAD_TIME_WEAVER_BEAN_NAME ) @ Role ( BeanDefinition . ROLE_INFRASTRUCTURE ) public org.springframework.context.annotation.LoadTimeWeaver org.springframework.context.annotation.LoadTimeWeaver ( ) { LoadTimeWeaver org.springframework.context.annotation.LoadTimeWeaver = null ; if ( this . org.springframework.context.annotation.LoadTimeWeavingConfigurer != null ) { org.springframework.context.annotation.LoadTimeWeaver = this . org.springframework.context.annotation.LoadTimeWeavingConfigurer . getLoadTimeWeaver ( ) ; } if ( org.springframework.context.annotation.LoadTimeWeaver == null ) { org.springframework.context.annotation.LoadTimeWeaver = new DefaultContextLoadTimeWeaver ( this . java.lang.ClassLoader ) ; } AspectJWeaving org.springframework.context.annotation.AspectJWeaving = this . org.springframework.context.annotation.AnnotationAttributes . getEnum ( STRING ) ; switch ( org.springframework.context.annotation.AspectJWeaving ) { case DISABLED : break; case AUTODETECT : if ( this . java.lang.ClassLoader . java.net.URL ( AspectJWeavingEnabler . ASPECTJ_AOP_XML_RESOURCE ) == null ) { break; } AspectJWeavingEnabler . enableAspectJWeaving ( org.springframework.context.annotation.LoadTimeWeaver , this . java.lang.ClassLoader ) ; break; case ENABLED : AspectJWeavingEnabler . enableAspectJWeaving ( org.springframework.context.annotation.LoadTimeWeaver , this . java.lang.ClassLoader ) ; break; } return org.springframework.context.annotation.LoadTimeWeaver ; }  <METHOD_END>
