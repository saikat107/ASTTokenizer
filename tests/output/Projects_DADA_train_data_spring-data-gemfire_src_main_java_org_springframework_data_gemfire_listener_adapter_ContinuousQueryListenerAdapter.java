<METHOD_START> public void ( ) { void ( this ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; this . java.lang.Object = java.lang.Object ; this . org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter.MethodInvoker = null ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter.MethodInvoker = null ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent ) { try { if ( java.lang.Object != this && java.lang.Object instanceof ContinuousQueryListener ) { ( ( ContinuousQueryListener ) java.lang.Object ) . onEvent ( org.springframework.data.gemfire.listener.adapter.CqEvent ) ; } else { java.lang.String java.lang.String = java.lang.String ( org.springframework.data.gemfire.listener.adapter.CqEvent ) ; if ( java.lang.String == null ) { throw new InvalidDataAccessApiUsageException ( STRING + STRING + STRING ) ; } org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter.MethodInvoker = ( org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter.MethodInvoker != null ? org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter.MethodInvoker : new org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter.MethodInvoker ( java.lang.Object , java.lang.String ) ) ; void ( org.springframework.data.gemfire.listener.adapter.CqEvent , java.lang.String ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.String java.lang.String ( CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent ) { return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Throwable java.lang.Throwable ) { org.springframework.data.gemfire.listener.adapter.Log . error ( STRING , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> protected void void ( CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent , java.lang.String java.lang.String ) { try { org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter.MethodInvoker . void ( org.springframework.data.gemfire.listener.adapter.CqEvent ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { if ( java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) instanceof DataAccessException ) { throw ( DataAccessException ) java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } else { throw new GemfireListenerExecutionFailedException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { throw new GemfireListenerExecutionFailedException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> void ( java.lang.Object java.lang.Object , final java.lang.String java.lang.String ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; this . java.lang.Object = java.lang.Object ; java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method> < java.lang.reflect.Method > ( ) ; ReflectionUtils . doWithMethods ( java.lang.Class<> , new MethodCallback ( ) { public void void ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; java.util.List<java.lang.reflect.Method> . boolean ( java.lang.reflect.Method ) ; } } , new MethodFilter ( ) { public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return boolean ( java.lang.reflect.Method , java.lang.String ) ; } } ) ; Assert . isTrue ( ! java.util.List<java.lang.reflect.Method> . boolean ( ) , java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; java.util.List<java.lang.reflect.Method> . boolean ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return boolean ( java.lang.reflect.Method , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) && java.lang.String . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; int int = NUMBER ; int int = NUMBER ; if ( java.lang.Class<?>[] . int > NUMBER ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { if ( java.lang.Object .class . boolean ( java.lang.Class<> ) ) { if ( ++ int > NUMBER ) { return false ; } } else if ( Operation .class . boolean ( java.lang.Class<> ) ) { if ( ++ int > NUMBER ) { return false ; } } else if ( byte [] .class . boolean ( java.lang.Class<> ) ) {						} else if ( CqEvent .class . boolean ( java.lang.Class<> ) ) {						} else if ( CqQuery .class . boolean ( java.lang.Class<> ) ) {						} else if ( java.lang.Throwable .class . boolean ( java.lang.Class<> ) ) {						} else { return false ; } } return true ; } } return false ; }  <METHOD_END>
<METHOD_START> void void ( CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent ) throws java.lang.reflect.InvocationTargetException , java.lang.IllegalAccessException { for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.List<java.lang.reflect.Method> ) { java.lang.reflect.Method . java.lang.Object ( java.lang.Object , java.lang.Object[] ( java.lang.reflect.Method , org.springframework.data.gemfire.listener.adapter.CqEvent ) ) ; } }  <METHOD_END>
<METHOD_START> java.lang.Object [] java.lang.Object[] ( java.lang.reflect.Method java.lang.reflect.Method , CqEvent org.springframework.data.gemfire.listener.adapter.CqEvent ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [ java.lang.Class<?>[] . int ] ; boolean boolean = false ; boolean boolean = false ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?>[] [ int ] ; if ( java.lang.Object .class . boolean ( java.lang.Class<> ) ) { java.lang.Object[] [ int ] = ( boolean ? org.springframework.data.gemfire.listener.adapter.CqEvent . getNewValue ( ) : org.springframework.data.gemfire.listener.adapter.CqEvent . getKey ( ) ) ; boolean = true ; } else if ( Operation .class . boolean ( java.lang.Class<> ) ) { java.lang.Object[] [ int ] = ( boolean ? org.springframework.data.gemfire.listener.adapter.CqEvent . getQueryOperation ( ) : org.springframework.data.gemfire.listener.adapter.CqEvent . getBaseOperation ( ) ) ; boolean = true ; } else if ( byte [] .class . boolean ( java.lang.Class<> ) ) { java.lang.Object[] [ int ] = org.springframework.data.gemfire.listener.adapter.CqEvent . getDeltaValue ( ) ; } else if ( CqEvent .class . boolean ( java.lang.Class<> ) ) { java.lang.Object[] [ int ] = org.springframework.data.gemfire.listener.adapter.CqEvent ; } else if ( CqQuery .class . boolean ( java.lang.Class<> ) ) { java.lang.Object[] [ int ] = org.springframework.data.gemfire.listener.adapter.CqEvent . getCq ( ) ; } else if ( java.lang.Throwable .class . boolean ( java.lang.Class<> ) ) { java.lang.Object[] [ int ] = org.springframework.data.gemfire.listener.adapter.CqEvent . getThrowable ( ) ; } } return java.lang.Object[] ; }  <METHOD_END>
