<METHOD_START> @ Test public void void ( ) { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , true ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , boolean boolean ) { TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ; try { java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . void ( NUMBER ) ; java.lang.String java.lang.String = STRING ; java.net.Socket . java.io.OutputStream ( ) . void ( java.lang.String . byte[] ( ) ) ; byte [] byte[] = new byte [ java.lang.String . int ( ) + NUMBER ] ; try { void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING + java.lang.String , new java.lang.String ( byte[] ) ) ; } catch ( java.net.SocketException java.net.SocketException ) { if ( boolean ) { fail ( STRING ) ; } else { return; } } int int = java.net.Socket . java.io.InputStream ( ) . int ( ) ; assertEquals ( - NUMBER , int ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; fail ( STRING + java.lang.Exception . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) { TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ; try { java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . void ( NUMBER ) ; java.lang.String java.lang.String = STRING ; java.net.Socket . java.io.OutputStream ( ) . void ( java.lang.String . byte[] ( ) ) ; byte [] byte[] = new byte [ java.lang.String . int ( ) + NUMBER ] ; try { void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING + java.lang.String , new java.lang.String ( byte[] ) ) ; java.net.Socket . java.io.InputStream ( ) . int ( ) ; fail ( STRING ) ; } catch ( java.net.SocketException java.net.SocketException ) {			} } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; fail ( STRING + java.lang.Exception . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.io.InputStream java.io.InputStream , byte [] byte[] ) throws java.io.IOException { for ( int int = NUMBER ; int < byte[] . int ; int ++ ) { byte[] [ int ] = ( byte ) java.io.InputStream . int ( ) ; } }  <METHOD_END>
