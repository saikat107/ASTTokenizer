<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected void void ( ) { this . org.springframework.web.servlet.tags.form.SelectTag = new SelectTag ( ) { @ java.lang.Override protected org.springframework.web.servlet.tags.form.TagWriter org.springframework.web.servlet.tags.form.TagWriter ( ) { return new TagWriter ( getWriter ( ) ) ; } } ; this . org.springframework.web.servlet.tags.form.SelectTag . setPageContext ( getPageContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.tags.form.TagWriter org.springframework.web.servlet.tags.form.TagWriter ( ) { return new TagWriter ( getWriter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.form.JspException { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( java.util.Collections . java.util.List ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemLabel ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setDynamicAttribute ( null , java.lang.String , java.lang.String ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setDynamicAttribute ( null , java.lang.String , java.lang.String ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; assertContainsAttribute ( java.lang.String , java.lang.String , java.lang.String ) ; assertContainsAttribute ( java.lang.String , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( java.util.Collections . java.util.List ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemLabel ( STRING ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( null ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemLabel ( STRING ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.web.servlet.tags.form.TestBean = org.springframework.web.servlet.tags.form.TestBean ( ) ; org.springframework.web.servlet.tags.form.TestBean . setCountry ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.web.servlet.tags.form.TestBean = org.springframework.web.servlet.tags.form.TestBean ( ) ; org.springframework.web.servlet.tags.form.TestBean . setCountry ( null ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; void ( getOutput ( ) , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; void ( true ) ; TransformTag org.springframework.web.servlet.tags.form.TransformTag = new TransformTag ( ) ; org.springframework.web.servlet.tags.form.TransformTag . setValue ( Country . getCountries ( ) . get ( NUMBER ) ) ; org.springframework.web.servlet.tags.form.TransformTag . setVar ( STRING ) ; org.springframework.web.servlet.tags.form.TransformTag . setParent ( this . org.springframework.web.servlet.tags.form.SelectTag ) ; org.springframework.web.servlet.tags.form.TransformTag . setPageContext ( getPageContext ( ) ) ; org.springframework.web.servlet.tags.form.TransformTag . doStartTag ( ) ; assertEquals ( STRING , getPageContext ( ) . findAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; BeanPropertyBindingResult org.springframework.web.servlet.tags.form.BeanPropertyBindingResult = new BeanPropertyBindingResult ( org.springframework.web.servlet.tags.form.TestBean ( ) , STRING ) ; org.springframework.web.servlet.tags.form.BeanPropertyBindingResult . getPropertyAccessor ( ) . registerCustomEditor ( Country .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( Country . getCountryWithIsoCode ( java.lang.String ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( Country ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; getPageContext ( ) . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.form.BeanPropertyBindingResult ) ; this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; TransformTag org.springframework.web.servlet.tags.form.TransformTag = new TransformTag ( ) ; org.springframework.web.servlet.tags.form.TransformTag . setValue ( Country . getCountries ( ) . get ( NUMBER ) ) ; org.springframework.web.servlet.tags.form.TransformTag . setVar ( STRING ) ; org.springframework.web.servlet.tags.form.TransformTag . setParent ( this . org.springframework.web.servlet.tags.form.SelectTag ) ; org.springframework.web.servlet.tags.form.TransformTag . setPageContext ( getPageContext ( ) ) ; org.springframework.web.servlet.tags.form.TransformTag . doStartTag ( ) ; assertEquals ( STRING , getPageContext ( ) . findAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( Country . getCountryWithIsoCode ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( Country ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemLabel ( STRING ) ; BeanPropertyBindingResult org.springframework.web.servlet.tags.form.BeanPropertyBindingResult = new BeanPropertyBindingResult ( org.springframework.web.servlet.tags.form.TestBean ( ) , STRING ) ; org.springframework.web.servlet.tags.form.BeanPropertyBindingResult . getPropertyAccessor ( ) . registerCustomEditor ( Country .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( Country . getCountryWithIsoCode ( java.lang.String ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( Country ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; getPageContext ( ) . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.form.BeanPropertyBindingResult ) ; this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; java.lang.String java.lang.String = getOutput ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( Country . getCountryWithIsoCode ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( Country ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemLabel ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setMultiple ( STRING ) ; org.springframework.web.servlet.tags.form.SelectTagTests.TestBeanWrapper org.springframework.web.servlet.tags.form.SelectTagTests.TestBeanWrapper = new org.springframework.web.servlet.tags.form.SelectTagTests.TestBeanWrapper ( ) ; TestBeanWithRealCountry org.springframework.web.servlet.tags.form.TestBeanWithRealCountry = ( TestBeanWithRealCountry ) org.springframework.web.servlet.tags.form.TestBean ( ) ; org.springframework.web.servlet.tags.form.TestBeanWithRealCountry . setRealCountry ( null ) ; org.springframework.web.servlet.tags.form.SelectTagTests.TestBeanWrapper . void ( org.springframework.web.servlet.tags.form.TestBeanWithRealCountry ) ; BeanPropertyBindingResult org.springframework.web.servlet.tags.form.BeanPropertyBindingResult = new BeanPropertyBindingResult ( org.springframework.web.servlet.tags.form.SelectTagTests.TestBeanWrapper , STRING ) ; org.springframework.web.servlet.tags.form.BeanPropertyBindingResult . getPropertyAccessor ( ) . registerCustomEditor ( Country .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( java.lang.String == null || java.lang.String . int ( ) == NUMBER ) { void ( null ) ; return; } void ( Country . getCountryWithIsoCode ( java.lang.String ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { Country org.springframework.web.servlet.tags.form.Country = ( Country ) java.lang.Object ( ) ; if ( org.springframework.web.servlet.tags.form.Country == null ) { return null ; } return org.springframework.web.servlet.tags.form.Country . getName ( ) ; } } ) ; getPageContext ( ) . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.form.BeanPropertyBindingResult ) ; this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; java.lang.String java.lang.String = getOutput ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( java.lang.String == null || java.lang.String . int ( ) == NUMBER ) { void ( null ) ; return; } void ( Country . getCountryWithIsoCode ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { Country org.springframework.web.servlet.tags.form.Country = ( Country ) java.lang.Object ( ) ; if ( org.springframework.web.servlet.tags.form.Country == null ) { return null ; } return org.springframework.web.servlet.tags.form.Country . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemLabel ( STRING ) ; org.springframework.web.servlet.tags.form.SelectTagTests.TestBeanWrapper org.springframework.web.servlet.tags.form.SelectTagTests.TestBeanWrapper = new org.springframework.web.servlet.tags.form.SelectTagTests.TestBeanWrapper ( ) ; org.springframework.web.servlet.tags.form.SelectTagTests.TestBeanWrapper . void ( org.springframework.web.servlet.tags.form.TestBean ( ) ) ; BeanPropertyBindingResult org.springframework.web.servlet.tags.form.BeanPropertyBindingResult = new BeanPropertyBindingResult ( org.springframework.web.servlet.tags.form.SelectTagTests.TestBeanWrapper , STRING ) ; org.springframework.web.servlet.tags.form.BeanPropertyBindingResult . getPropertyAccessor ( ) . registerCustomEditor ( Country .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( Country . getCountryWithIsoCode ( java.lang.String ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( Country ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; getPageContext ( ) . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.form.BeanPropertyBindingResult ) ; this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; java.lang.String java.lang.String = getOutput ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( Country . getCountryWithIsoCode ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( Country ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemLabel ( STRING ) ; TestBeanWithRealCountry org.springframework.web.servlet.tags.form.TestBeanWithRealCountry = ( TestBeanWithRealCountry ) org.springframework.web.servlet.tags.form.TestBean ( ) ; org.springframework.web.servlet.tags.form.TestBeanWithRealCountry . setRealCountry ( null ) ; BeanPropertyBindingResult org.springframework.web.servlet.tags.form.BeanPropertyBindingResult = new BeanPropertyBindingResult ( org.springframework.web.servlet.tags.form.TestBeanWithRealCountry , STRING ) ; org.springframework.web.servlet.tags.form.BeanPropertyBindingResult . getPropertyAccessor ( ) . registerCustomEditor ( Country .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( Country . getCountryWithIsoCode ( java.lang.String ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { Country org.springframework.web.servlet.tags.form.Country = ( Country ) java.lang.Object ( ) ; if ( org.springframework.web.servlet.tags.form.Country == null ) { return STRING ; } return org.springframework.web.servlet.tags.form.Country . getName ( ) ; } } ) ; getPageContext ( ) . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.form.BeanPropertyBindingResult ) ; this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; java.lang.String java.lang.String = getOutput ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( Country . getCountryWithIsoCode ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { Country org.springframework.web.servlet.tags.form.Country = ( Country ) java.lang.Object ( ) ; if ( org.springframework.web.servlet.tags.form.Country == null ) { return STRING ; } return org.springframework.web.servlet.tags.form.Country . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( java.util.Map ( ) ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( new TestBean ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; try { this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; fail ( STRING ) ; } catch ( JspException org.springframework.web.servlet.tags.form.JspException ) { java.lang.String java.lang.String = org.springframework.web.servlet.tags.form.JspException . getMessage ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . EVAL_BODY_INCLUDE , int ) ; BindStatus org.springframework.web.servlet.tags.form.BindStatus = ( BindStatus ) getPageContext ( ) . getAttribute ( SelectTag . LIST_VALUE_PAGE_ATTRIBUTE ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.form.BindStatus . getValue ( ) ) ; int = this . org.springframework.web.servlet.tags.form.SelectTag . doEndTag ( ) ; assertEquals ( Tag . EVAL_PAGE , int ) ; this . org.springframework.web.servlet.tags.form.SelectTag . doFinally ( ) ; java.lang.String java.lang.String = getOutput ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( java.lang.String[] ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( java.lang.String[] ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; java.lang.Integer [] java.lang.Integer[] = new java.lang.Integer [ NUMBER ] ; for ( int int = NUMBER ; int < java.lang.Integer[] . int ; int ++ ) { java.lang.Integer[] [ int ] = new java.lang.Integer ( int ) ; } this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( java.lang.Integer[] ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.String = STRING + java.lang.String + STRING ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Document . getRootElement ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.tags.form.Element . elements ( ) . size ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; java.util.List java.util.List = org.springframework.web.servlet.tags.form.Element . elements ( ) ; assertEquals ( STRING , java.lang.Integer[] . int , java.util.List . int ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.beans.PropertyEditor java.beans.PropertyEditor = new SimpleFloatEditor ( ) ; BeanPropertyBindingResult org.springframework.web.servlet.tags.form.BeanPropertyBindingResult = new BeanPropertyBindingResult ( org.springframework.web.servlet.tags.form.TestBean ( ) , COMMAND_NAME ) ; org.springframework.web.servlet.tags.form.BeanPropertyBindingResult . getPropertyAccessor ( ) . registerCustomEditor ( java.lang.Float .class , java.beans.PropertyEditor ) ; exposeBindingResult ( org.springframework.web.servlet.tags.form.BeanPropertyBindingResult ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; java.lang.Float [] java.lang.Float[] = new java.lang.Float [] { new java.lang.Float ( STRING ) , new java.lang.Float ( STRING ) , new java.lang.Float ( STRING ) , new java.lang.Float ( STRING ) , new java.lang.Float ( STRING ) , new java.lang.Float ( STRING ) , new java.lang.Float ( STRING ) , new java.lang.Float ( STRING ) , new java.lang.Float ( STRING ) , new java.lang.Float ( STRING ) } ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( java.lang.Float[] ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Document . getRootElement ( ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; java.util.List java.util.List = org.springframework.web.servlet.tags.form.Element . elements ( ) ; assertEquals ( STRING , java.lang.Float[] . int , java.util.List . int ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING ) ; assertNull ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List java.util.List = new java.util.ArrayList ( ) ; java.util.List . boolean ( Country . COUNTRY_UK ) ; java.util.List . boolean ( Country . COUNTRY_AT ) ; this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry . setSomeList ( java.util.List ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.String = STRING + java.lang.String + STRING ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Document . getRootElement ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.tags.form.Element . elements ( ) . size ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; java.util.List java.util.List = org.springframework.web.servlet.tags.form.Element . elements ( ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getText ( ) ) ; org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry . setRealCountry ( Country . COUNTRY_UK ) ; BeanPropertyBindingResult org.springframework.web.servlet.tags.form.BeanPropertyBindingResult = new BeanPropertyBindingResult ( this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry , COMMAND_NAME ) ; FormattingConversionService org.springframework.web.servlet.tags.form.FormattingConversionService = new FormattingConversionService ( ) ; org.springframework.web.servlet.tags.form.FormattingConversionService . addFormatterForFieldType ( Country .class , new Formatter < Country > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( Country org.springframework.web.servlet.tags.form.Country , java.util.Locale java.util.Locale ) { return org.springframework.web.servlet.tags.form.Country . getName ( ) ; } @ java.lang.Override public org.springframework.web.servlet.tags.form.Country org.springframework.web.servlet.tags.form.Country ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { return new Country ( java.lang.String , java.lang.String ) ; } } ) ; org.springframework.web.servlet.tags.form.BeanPropertyBindingResult . initConversion ( org.springframework.web.servlet.tags.form.FormattingConversionService ) ; exposeBindingResult ( org.springframework.web.servlet.tags.form.BeanPropertyBindingResult ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.String = STRING + java.lang.String + STRING ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Document . getRootElement ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.tags.form.Element . elements ( ) . size ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; java.util.List java.util.List = org.springframework.web.servlet.tags.form.Element . elements ( ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( Country org.springframework.web.servlet.tags.form.Country , java.util.Locale java.util.Locale ) { return org.springframework.web.servlet.tags.form.Country . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.tags.form.Country org.springframework.web.servlet.tags.form.Country ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { return new Country ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List java.util.List = new java.util.ArrayList ( ) ; java.util.List . boolean ( Country . COUNTRY_UK ) ; java.util.List . boolean ( Country . COUNTRY_AT ) ; this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry . setSomeList ( java.util.List ) ; BeanPropertyBindingResult org.springframework.web.servlet.tags.form.BeanPropertyBindingResult = new BeanPropertyBindingResult ( this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry , COMMAND_NAME ) ; FormattingConversionService org.springframework.web.servlet.tags.form.FormattingConversionService = new FormattingConversionService ( ) ; org.springframework.web.servlet.tags.form.FormattingConversionService . addFormatterForFieldType ( Country .class , new Formatter < Country > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( Country org.springframework.web.servlet.tags.form.Country , java.util.Locale java.util.Locale ) { return org.springframework.web.servlet.tags.form.Country . getName ( ) ; } @ java.lang.Override public org.springframework.web.servlet.tags.form.Country org.springframework.web.servlet.tags.form.Country ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { return new Country ( java.lang.String , java.lang.String ) ; } } ) ; org.springframework.web.servlet.tags.form.BeanPropertyBindingResult . initConversion ( org.springframework.web.servlet.tags.form.FormattingConversionService ) ; exposeBindingResult ( org.springframework.web.servlet.tags.form.BeanPropertyBindingResult ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.String = STRING + java.lang.String + STRING ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Document . getRootElement ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.tags.form.Element . elements ( ) . size ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; java.util.List java.util.List = org.springframework.web.servlet.tags.form.Element . elements ( ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getText ( ) ) ; org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( Country org.springframework.web.servlet.tags.form.Country , java.util.Locale java.util.Locale ) { return org.springframework.web.servlet.tags.form.Country . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.tags.form.Country org.springframework.web.servlet.tags.form.Country ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { return new Country ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List java.util.List = new java.util.ArrayList ( ) ; java.util.List . boolean ( Country . COUNTRY_UK ) ; java.util.List . boolean ( Country . COUNTRY_AT ) ; this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry . setSomeList ( java.util.List ) ; BeanPropertyBindingResult org.springframework.web.servlet.tags.form.BeanPropertyBindingResult = new BeanPropertyBindingResult ( this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry , COMMAND_NAME ) ; org.springframework.web.servlet.tags.form.BeanPropertyBindingResult . getPropertyAccessor ( ) . registerCustomEditor ( java.util.List .class , new CustomCollectionEditor ( java.util.LinkedList .class ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return getValue ( ) . toString ( ) ; } } ) ; exposeBindingResult ( org.springframework.web.servlet.tags.form.BeanPropertyBindingResult ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.String = STRING + java.lang.String + STRING ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Document . getRootElement ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.tags.form.Element . elements ( ) . size ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; java.util.List java.util.List = org.springframework.web.servlet.tags.form.Element . elements ( ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return getValue ( ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map java.util.Map = new java.util.HashMap ( ) ; java.util.Map . java.lang.Object ( STRING , STRING ) ; java.util.Map . java.lang.Object ( STRING , STRING ) ; this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry . setSomeMap ( java.util.Map ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( java.util.Map ( ) ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.String = STRING + java.lang.String + STRING ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Document . getRootElement ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.tags.form.Element . elements ( ) . size ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; java.util.List java.util.List = org.springframework.web.servlet.tags.form.Element . elements ( ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ( ) ; java.util.Locale . void ( java.util.Locale . java.util.Locale ) ; try { final Country org.springframework.web.servlet.tags.form.Country = Country . COUNTRY_AT ; final Country org.springframework.web.servlet.tags.form.Country = Country . COUNTRY_US ; final java.util.Map java.util.Map = new java.util.HashMap ( ) ; java.util.Map . java.lang.Object ( org.springframework.web.servlet.tags.form.Country , java.util.Locale ) ; java.util.Map . java.lang.Object ( org.springframework.web.servlet.tags.form.Country , java.util.Locale . java.util.Locale ) ; this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry . setSomeMap ( java.util.Map ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( java.util.Map ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemLabel ( STRING ) ; BeanPropertyBindingResult org.springframework.web.servlet.tags.form.BeanPropertyBindingResult = new BeanPropertyBindingResult ( org.springframework.web.servlet.tags.form.TestBean ( ) , COMMAND_NAME ) ; org.springframework.web.servlet.tags.form.BeanPropertyBindingResult . getPropertyAccessor ( ) . registerCustomEditor ( Country .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( final java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( Country . getCountryWithIsoCode ( java.lang.String ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( Country ) java.lang.Object ( ) ) . getIsoCode ( ) ; } } ) ; exposeBindingResult ( org.springframework.web.servlet.tags.form.BeanPropertyBindingResult ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.String = STRING + java.lang.String + STRING ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Document . getRootElement ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.tags.form.Element . elements ( ) . size ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; java.util.List java.util.List = org.springframework.web.servlet.tags.form.Element . elements ( ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; Element org.springframework.web.servlet.tags.form.Element ; org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING + org.springframework.web.servlet.tags.form.Country . getIsoCode ( ) + STRING ) ; assertNotNull ( STRING + org.springframework.web.servlet.tags.form.Country . getIsoCode ( ) + STRING , org.springframework.web.servlet.tags.form.Element ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , java.util.Locale . java.lang.String ( ) , org.springframework.web.servlet.tags.form.Element . getData ( ) ) ; org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING + org.springframework.web.servlet.tags.form.Country . getIsoCode ( ) + STRING ) ; assertNotNull ( STRING + org.springframework.web.servlet.tags.form.Country . getIsoCode ( ) + STRING , org.springframework.web.servlet.tags.form.Element ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , java.util.Locale . java.util.Locale . java.lang.String ( ) , org.springframework.web.servlet.tags.form.Element . getData ( ) ) ; } finally { java.util.Locale . void ( java.util.Locale ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( Country . getCountryWithIsoCode ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( Country ) java.lang.Object ( ) ) . getIsoCode ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry . setSomeList ( new java.util.ArrayList ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.String = STRING + java.lang.String + STRING ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Document . getRootElement ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.tags.form.Element . elements ( ) . size ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; java.util.List java.util.List = org.springframework.web.servlet.tags.form.Element . elements ( ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertNotNull ( org.springframework.web.servlet.tags.form.Element ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setMultiple ( STRING ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.String = STRING + java.lang.String + STRING ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Document . getRootElement ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.tags.form.Element . elements ( ) . size ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; java.util.List java.util.List = org.springframework.web.servlet.tags.form.Element . elements ( ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertNotNull ( org.springframework.web.servlet.tags.form.Element ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setMultiple ( STRING ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.String = STRING + java.lang.String + STRING ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Document . getRootElement ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.tags.form.Element . elements ( ) . size ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; java.util.List java.util.List = org.springframework.web.servlet.tags.form.Element . elements ( ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertNotNull ( org.springframework.web.servlet.tags.form.Element ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setMultiple ( STRING ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.String = STRING + java.lang.String + STRING ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Document . getRootElement ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.tags.form.Element . elements ( ) . size ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertNull ( org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) ) ; java.util.List java.util.List = org.springframework.web.servlet.tags.form.Element . elements ( ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setMultiple ( true ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.String = STRING + java.lang.String + STRING ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Document . getRootElement ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.tags.form.Element . elements ( ) . size ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; java.util.List java.util.List = org.springframework.web.servlet.tags.form.Element . elements ( ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertNotNull ( org.springframework.web.servlet.tags.form.Element ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.SelectTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItems ( Country . getCountries ( ) ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setMultiple ( false ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.String = STRING + java.lang.String + STRING ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Document . getRootElement ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.tags.form.Element . elements ( ) . size ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Element . element ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertNull ( org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) ) ; java.util.List java.util.List = org.springframework.web.servlet.tags.form.Element . elements ( ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) org.springframework.web.servlet.tags.form.JspException , org.springframework.web.servlet.tags.form.DocumentException { int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Document . getRootElement ( ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; java.util.List java.util.List = org.springframework.web.servlet.tags.form.Element . elements ( ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map java.util.Map ( ) { java.util.Map java.util.Map = new java.util.TreeMap ( new java.util.Comparator ( ) { @ java.lang.Override public int int ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { return ( ( Country ) java.lang.Object ) . getName ( ) . compareTo ( ( ( Country ) java.lang.Object ) . getName ( ) ) ; } } ) ; java.util.Map . java.lang.Object ( Country . COUNTRY_AT , java.util.Locale ) ; java.util.Map . java.lang.Object ( Country . COUNTRY_NL , java.util.Locale ) ; java.util.Map . java.lang.Object ( Country . COUNTRY_US , java.util.Locale . java.util.Locale ) ; return java.util.Map ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { return ( ( Country ) java.lang.Object ) . getName ( ) . compareTo ( ( ( Country ) java.lang.Object ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING , STRING , STRING , STRING } ; }  <METHOD_END>
<METHOD_START> private java.util.Map java.util.Map ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; return java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) throws org.springframework.web.servlet.tags.form.JspException , org.springframework.web.servlet.tags.form.DocumentException { this . org.springframework.web.servlet.tags.form.SelectTag . setItemValue ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setItemLabel ( STRING ) ; this . org.springframework.web.servlet.tags.form.SelectTag . setSize ( STRING ) ; int int = this . org.springframework.web.servlet.tags.form.SelectTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; void ( java.lang.String , boolean ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , boolean boolean ) throws org.springframework.web.servlet.tags.form.DocumentException { SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = org.springframework.web.servlet.tags.form.Document . getRootElement ( ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; java.util.List java.util.List = org.springframework.web.servlet.tags.form.Element . elements ( ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; Element org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Element . selectSingleNode ( STRING ) ; Attribute org.springframework.web.servlet.tags.form.Attribute = org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) ; if ( boolean ) { assertTrue ( org.springframework.web.servlet.tags.form.Attribute != null && STRING . boolean ( org.springframework.web.servlet.tags.form.Attribute . getValue ( ) ) ) ; } else { assertNull ( org.springframework.web.servlet.tags.form.Attribute ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.tags.form.TestBean org.springframework.web.servlet.tags.form.TestBean ( ) { this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry = new TestBeanWithRealCountry ( ) ; this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry . setName ( STRING ) ; this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry . setCountry ( STRING ) ; this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry . setSex ( STRING ) ; this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry . setMyFloat ( new java.lang.Float ( STRING ) ) ; this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry . setSomeIntegerArray ( new java.lang.Integer [] { new java.lang.Integer ( NUMBER ) , new java.lang.Integer ( NUMBER ) } ) ; return this . org.springframework.web.servlet.tags.form.TestBeanWithRealCountry ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.tags.form.TestBean org.springframework.web.servlet.tags.form.TestBean ( ) { return ( TestBean ) getPageContext ( ) . getRequest ( ) . getAttribute ( COMMAND_NAME ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.tags.form.TestBean org.springframework.web.servlet.tags.form.TestBean ( ) { return org.springframework.web.servlet.tags.form.TestBean ; }  <METHOD_END>
<METHOD_START> public void void ( TestBean org.springframework.web.servlet.tags.form.TestBean ) { this . org.springframework.web.servlet.tags.form.TestBean = org.springframework.web.servlet.tags.form.TestBean ; }  <METHOD_END>
