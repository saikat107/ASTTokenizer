<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.integration.message.Message<java.lang.String> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , new java.lang.Integer ( NUMBER ) ) . build ( ) ; assertEquals ( STRING , org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . get ( STRING , java.lang.String .class ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . get ( STRING , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . copyHeaders ( org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) ) . setHeader ( STRING , STRING ) . setHeaderIfAbsent ( STRING , STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.integration.message.Message<java.lang.String> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.message.Message<java.lang.String> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; MessageBuilder . withPayload ( STRING ) . setHeader ( MessageHeaders . ID , java.util.UUID ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.lang.Long java.lang.Long = NUMBER ; MessageBuilder . withPayload ( STRING ) . setHeader ( MessageHeaders . TIMESTAMP , java.lang.Long ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . copyHeadersIfAbsent ( org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) ) . build ( ) ; assertEquals ( STRING , org.springframework.integration.message.Message<java.lang.String> . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.String> ) . build ( ) ; assertEquals ( STRING , org.springframework.integration.message.Message<java.lang.String> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.String> ) . setHeader ( STRING , NUMBER ) . build ( ) ; assertEquals ( STRING , org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; assertNotSame ( org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . getId ( ) , org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.integration.message.MessageBuilderFactory instanceof MutableMessageBuilderFactory ) ; org.springframework.integration.message.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.message.Message<?> = org.springframework.integration.message.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = org.springframework.integration.message.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.message.Message<> . getClass ( ) . getName ( ) ) ; assertTrue ( org.springframework.integration.message.Message<> == org.springframework.integration.message.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutableMessageBuilder < java.lang.String > org.springframework.integration.message.MutableMessageBuilder<java.lang.String> = MutableMessageBuilder . withPayload ( STRING ) ; Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = org.springframework.integration.message.MutableMessageBuilder<java.lang.String> . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = MutableMessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.String> ) . setHeader ( STRING , NUMBER ) . build ( ) ; assertEquals ( STRING , org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; assertSame ( org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . getId ( ) , org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ; assertTrue ( org.springframework.integration.message.Message<java.lang.String> == org.springframework.integration.message.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = MutableMessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.String> ) . setHeader ( STRING , NUMBER ) . build ( ) ; assertEquals ( STRING , org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; assertSame ( org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . getId ( ) , org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ; assertNotSame ( org.springframework.integration.message.Message<java.lang.String> , org.springframework.integration.message.Message<java.lang.String> ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.String> == org.springframework.integration.message.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = new MutableMessageBuilderFactory ( ) . fromMessage ( org.springframework.integration.message.Message<java.lang.String> ) . setHeader ( STRING , NUMBER ) . build ( ) ; assertEquals ( STRING , org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; assertSame ( org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . getId ( ) , org.springframework.integration.message.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ; assertNotSame ( org.springframework.integration.message.Message<java.lang.String> , org.springframework.integration.message.Message<java.lang.String> ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.String> == org.springframework.integration.message.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . withPayload ( NUMBER ) . setPriority ( NUMBER ) . build ( ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.message.Message<java.lang.Integer> ) . getPriority ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . withPayload ( NUMBER ) . setPriority ( NUMBER ) . build ( ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . setHeaderIfAbsent ( IntegrationMessageHeaderAccessor . PRIORITY , NUMBER ) . build ( ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.message.Message<java.lang.Integer> ) . getPriority ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Long java.lang.Long = java.lang.System . long ( ) - ( NUMBER * NUMBER ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . withPayload ( NUMBER ) . setExpirationDate ( java.lang.Long ) . build ( ) ; assertEquals ( java.lang.Long , new IntegrationMessageHeaderAccessor ( org.springframework.integration.message.Message<java.lang.Integer> ) . getExpirationDate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Long java.lang.Long = java.lang.System . long ( ) - ( NUMBER * NUMBER ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . withPayload ( NUMBER ) . setExpirationDate ( new java.util.Date ( java.lang.Long ) ) . build ( ) ; assertEquals ( java.lang.Long , new IntegrationMessageHeaderAccessor ( org.springframework.integration.message.Message<java.lang.Integer> ) . getExpirationDate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . removeHeader ( STRING ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . setHeader ( STRING , null ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . withPayload ( NUMBER ) . pushSequenceDetails ( STRING , NUMBER , NUMBER ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . pushSequenceDetails ( STRING , NUMBER , NUMBER ) . build ( ) ; assertTrue ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . popSequenceDetails ( ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . withPayload ( NUMBER ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . pushSequenceDetails ( STRING , NUMBER , NUMBER ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . popSequenceDetails ( ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . withPayload ( NUMBER ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . popSequenceDetails ( ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . withPayload ( NUMBER ) . setCorrelationId ( STRING ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . pushSequenceDetails ( STRING , NUMBER , NUMBER ) . build ( ) ; assertTrue ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . popSequenceDetails ( ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MutableMessageBuilder . withPayload ( NUMBER ) . pushSequenceDetails ( STRING , NUMBER , NUMBER ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MutableMessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . pushSequenceDetails ( STRING , NUMBER , NUMBER ) . build ( ) ; assertTrue ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MutableMessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . popSequenceDetails ( ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MutableMessageBuilder . withPayload ( NUMBER ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MutableMessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . pushSequenceDetails ( STRING , NUMBER , NUMBER ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MutableMessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . popSequenceDetails ( ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MutableMessageBuilder . withPayload ( NUMBER ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MutableMessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . popSequenceDetails ( ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MutableMessageBuilder . withPayload ( NUMBER ) . setCorrelationId ( STRING ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MutableMessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . pushSequenceDetails ( STRING , NUMBER , NUMBER ) . build ( ) ; assertTrue ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; Message < java.lang.Integer > org.springframework.integration.message.Message<java.lang.Integer> = MutableMessageBuilder . fromMessage ( org.springframework.integration.message.Message<java.lang.Integer> ) . popSequenceDetails ( ) . build ( ) ; assertFalse ( org.springframework.integration.message.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<> ) . build ( ) ; assertEquals ( org.springframework.integration.message.Message<> , org.springframework.integration.message.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<> ) . build ( ) ; assertEquals ( org.springframework.integration.message.Message<> , org.springframework.integration.message.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<> ) . setHeader ( STRING , NUMBER ) . build ( ) ; assertEquals ( org.springframework.integration.message.Message<> , org.springframework.integration.message.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Date java.util.Date = new java.util.Date ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Date ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Date ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<> ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; assertEquals ( org.springframework.integration.message.Message<> , org.springframework.integration.message.Message<> ) ; }  <METHOD_END>
