<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( org.w3c.dom.Element org.w3c.dom.Element , AbstractBeanDefinition org.springframework.data.mongodb.config.AbstractBeanDefinition , ParserContext org.springframework.data.mongodb.config.ParserContext )			throws org.springframework.data.mongodb.config.BeanDefinitionStoreException { java.lang.String java.lang.String = super. resolveId ( org.w3c.dom.Element , org.springframework.data.mongodb.config.AbstractBeanDefinition , org.springframework.data.mongodb.config.ParserContext ) ; return StringUtils . hasText ( java.lang.String ) ? java.lang.String : BeanNames . DB_FACTORY_BEAN_NAME ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.config.AbstractBeanDefinition org.springframework.data.mongodb.config.AbstractBeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.data.mongodb.config.ParserContext ) { BeanDefinitionBuilder org.springframework.data.mongodb.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( SimpleMongoDbFactory .class ) ; setPropertyValue ( org.springframework.data.mongodb.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING , STRING ) ; BeanDefinition org.springframework.data.mongodb.config.BeanDefinition = org.springframework.data.mongodb.config.BeanDefinition ( org.w3c.dom.Element , org.springframework.data.mongodb.config.ParserContext ) ; if ( org.springframework.data.mongodb.config.BeanDefinition != null ) { org.springframework.data.mongodb.config.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.data.mongodb.config.BeanDefinition ) ; return getSourceBeanDefinition ( org.springframework.data.mongodb.config.BeanDefinitionBuilder , org.springframework.data.mongodb.config.ParserContext , org.w3c.dom.Element ) ; } BeanComponentDefinitionBuilder org.springframework.data.mongodb.config.BeanComponentDefinitionBuilder = new BeanComponentDefinitionBuilder ( org.w3c.dom.Element , org.springframework.data.mongodb.config.ParserContext ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.mongodb.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } else { org.springframework.data.mongodb.config.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.data.mongodb.config.BeanDefinition ( org.w3c.dom.Element , org.springframework.data.mongodb.config.ParserContext ) ) ; } org.springframework.data.mongodb.config.BeanDefinitionBuilder . addConstructorArgValue ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : STRING ) ; BeanDefinitionBuilder org.springframework.data.mongodb.config.BeanDefinitionBuilder = getWriteConcernPropertyEditorBuilder ( ) ; BeanComponentDefinition org.springframework.data.mongodb.config.BeanComponentDefinition = org.springframework.data.mongodb.config.BeanComponentDefinitionBuilder . getComponent ( org.springframework.data.mongodb.config.BeanDefinitionBuilder ) ; org.springframework.data.mongodb.config.ParserContext . registerBeanComponent ( org.springframework.data.mongodb.config.BeanComponentDefinition ) ; return ( AbstractBeanDefinition ) org.springframework.data.mongodb.config.BeanComponentDefinitionBuilder . getComponentIdButFallback ( org.springframework.data.mongodb.config.BeanDefinitionBuilder , BeanNames . DB_FACTORY_BEAN_NAME ) . getBeanDefinition ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.config.BeanDefinition org.springframework.data.mongodb.config.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.data.mongodb.config.ParserContext ) { BeanDefinitionBuilder org.springframework.data.mongodb.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( MongoClientFactoryBean .class ) ; setPropertyValue ( org.springframework.data.mongodb.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; setPropertyValue ( org.springframework.data.mongodb.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; return getSourceBeanDefinition ( org.springframework.data.mongodb.config.BeanDefinitionBuilder , org.springframework.data.mongodb.config.ParserContext , org.w3c.dom.Element ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.config.BeanDefinition org.springframework.data.mongodb.config.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.data.mongodb.config.ParserContext ) { boolean boolean = org.w3c.dom.Element . boolean ( STRING ) ; if ( ! boolean && ! org.w3c.dom.Element . boolean ( STRING ) ) { return null ; } int int = NUMBER ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { int ++ ; } } if ( org.w3c.dom.Element . org.w3c.dom.NamedNodeMap ( ) . int ( ) > int ) { org.springframework.data.mongodb.config.ParserContext . getReaderContext ( ) . error ( STRING + ( boolean ? STRING : STRING ) + STRING , org.springframework.data.mongodb.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = MongoClientURI .class ; java.lang.String java.lang.String = boolean ? org.w3c.dom.Element . java.lang.String ( STRING ) : org.w3c.dom.Element . java.lang.String ( STRING ) ; BeanDefinitionBuilder org.springframework.data.mongodb.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( java.lang.Class<> ) ; org.springframework.data.mongodb.config.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.String ) ; return org.springframework.data.mongodb.config.BeanDefinitionBuilder . getBeanDefinition ( ) ; }  <METHOD_END>
