<METHOD_START> @ Before public void void ( ) { org.springframework.web.servlet.view.json.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.view.json.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.json.Context = ContextFactory . getGlobal ( ) . enterContext ( ) ; org.springframework.web.servlet.view.json.ScriptableObject = org.springframework.web.servlet.view.json.Context . initStandardObjects ( ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView = new MappingJackson2JsonView ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , false , org.springframework.web.servlet.view.json.MappingJackson2JsonView . isExposePathVariables ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , mock ( BindingResult .class , STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . setUpdateContentLength ( true ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.json.MockHttpServletRequest , org.springframework.web.servlet.view.json.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.view.json.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( MappingJackson2JsonView . DEFAULT_CONTENT_TYPE , org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentType ( ) ) ; java.lang.String java.lang.String = org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentAsString ( ) ; assertTrue ( java.lang.String . int ( ) > NUMBER ) ; assertEquals ( java.lang.String . int ( ) , org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentLength ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.json.MockHttpServletRequest , org.springframework.web.servlet.view.json.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentType ( ) ) ; org.springframework.web.servlet.view.json.MockHttpServletRequest . setAttribute ( View . SELECTED_CONTENT_TYPE , new MediaType ( STRING , STRING ) ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.json.MockHttpServletRequest , org.springframework.web.servlet.view.json.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.json.MappingJackson2JsonView . setDisableCaching ( false ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , mock ( BindingResult .class , STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.json.MockHttpServletRequest , org.springframework.web.servlet.view.json.MockHttpServletResponse ) ; assertNull ( org.springframework.web.servlet.view.json.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.json.MappingJackson2JsonView . setPrefixJson ( true ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , mock ( BindingResult .class , STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Object ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . setUpdateContentLength ( true ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.json.MockHttpServletRequest , org.springframework.web.servlet.view.json.MockHttpServletResponse ) ; assertTrue ( org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentAsString ( ) . length ( ) > NUMBER ) ; assertEquals ( org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentAsString ( ) . length ( ) , org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentLength ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ModelMap org.springframework.web.servlet.view.json.ModelMap = new ModelMap ( STRING , new org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple ( ) ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . setPrettyPrint ( true ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . render ( org.springframework.web.servlet.view.json.ModelMap , org.springframework.web.servlet.view.json.MockHttpServletRequest , org.springframework.web.servlet.view.json.MockHttpServletResponse ) ; java.lang.String java.lang.String = org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentAsString ( ) . replace ( STRING , STRING ) ; assertTrue ( STRING + java.lang.String , java.lang.String . boolean ( STRING ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.json.MappingJackson2JsonView . setPrefixJson ( true ) ; void ( ) ; assertTrue ( org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentAsString ( ) . startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.json.MappingJackson2JsonView . setPrefixJson ( false ) ; void ( ) ; assertFalse ( org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentAsString ( ) . startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimpleAnnotated ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Object ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.json.MockHttpServletRequest , org.springframework.web.servlet.view.json.MockHttpServletResponse ) ; assertTrue ( org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentAsString ( ) . length ( ) > NUMBER ) ; assertEquals ( STRING , org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentAsString ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SerializerFactory org.springframework.web.servlet.view.json.SerializerFactory = new org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.DelegatingSerializerFactory ( null ) ; ObjectMapper org.springframework.web.servlet.view.json.ObjectMapper = new ObjectMapper ( ) ; org.springframework.web.servlet.view.json.ObjectMapper . setSerializerFactory ( org.springframework.web.servlet.view.json.SerializerFactory ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . setObjectMapper ( org.springframework.web.servlet.view.json.ObjectMapper ) ; java.lang.Object java.lang.Object = new org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Object ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestChildBean ( ) ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.json.MockHttpServletRequest , org.springframework.web.servlet.view.json.MockHttpServletResponse ) ; java.lang.String java.lang.String = org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentAsString ( ) ; assertTrue ( java.lang.String . int ( ) > NUMBER ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . setModelKeys ( java.util.Set<java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.json.MockHttpServletRequest , org.springframework.web.servlet.view.json.MockHttpServletResponse ) ; java.lang.String java.lang.String = org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentAsString ( ) ; assertTrue ( java.lang.String . int ( ) > NUMBER ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.json.MappingJackson2JsonView . setExtractValueFromSingleKeyModel ( true ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple = new org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.view.json.MappingJackson2JsonView . filterModel ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertSame ( org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.json.MappingJackson2JsonView . setExtractValueFromSingleKeyModel ( true ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple = new org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple ( ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple = new org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.view.json.MappingJackson2JsonView . filterModel ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertTrue ( java.lang.Object instanceof java.util.Map ) ; assertSame ( org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple , ( ( java.util.Map ) java.lang.Object ) . java.lang.Object ( STRING ) ) ; assertSame ( org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple , ( ( java.util.Map ) java.lang.Object ) . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , mock ( BindingResult .class , STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Object ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( JsonView .class . java.lang.String ( ) , org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.MyJacksonView1 .class ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . setUpdateContentLength ( true ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.json.MockHttpServletRequest , org.springframework.web.servlet.view.json.MockHttpServletResponse ) ; java.lang.String java.lang.String = org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentAsString ( ) ; assertTrue ( java.lang.String . int ( ) > NUMBER ) ; assertEquals ( java.lang.String . int ( ) , org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentLength ( ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . boolean ( JsonView .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestSimpleBeanFiltered org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestSimpleBeanFiltered = new org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestSimpleBeanFiltered ( ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestSimpleBeanFiltered . void ( STRING ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestSimpleBeanFiltered . void ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , mock ( BindingResult .class , STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestSimpleBeanFiltered ) ; FilterProvider org.springframework.web.servlet.view.json.FilterProvider = new SimpleFilterProvider ( ) . addFilter ( STRING , SimpleBeanPropertyFilter . serializeAllExcept ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( FilterProvider .class . java.lang.String ( ) , org.springframework.web.servlet.view.json.FilterProvider ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . setUpdateContentLength ( true ) ; org.springframework.web.servlet.view.json.MappingJackson2JsonView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.json.MockHttpServletRequest , org.springframework.web.servlet.view.json.MockHttpServletResponse ) ; java.lang.String java.lang.String = org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentAsString ( ) ; assertTrue ( java.lang.String . int ( ) > NUMBER ) ; assertEquals ( java.lang.String . int ( ) , org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentLength ( ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , not ( containsString ( STRING ) ) ) ; assertFalse ( java.lang.String . boolean ( FilterProvider .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING , true ) ; void ( STRING , STRING , true ) ; void ( STRING , STRING , true ) ; void ( STRING , STRING , true ) ; void ( STRING , STRING , false ) ; void ( STRING , STRING , false ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { java.lang.String java.lang.String = org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentAsString ( ) ; DirectFieldAccessor org.springframework.web.servlet.view.json.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.view.json.MappingJackson2JsonView ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.web.servlet.view.json.DirectFieldAccessor . getPropertyValue ( STRING ) ; if ( java.lang.String != null ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } java.lang.Object java.lang.Object = org.springframework.web.servlet.view.json.Context . evaluateString ( org.springframework.web.servlet.view.json.ScriptableObject , STRING + java.lang.String + STRING , STRING , NUMBER , null ) ; assertNotNull ( STRING , java.lang.Object ) ; assertEquals ( STRING , org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , boolean boolean ) throws java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; this . org.springframework.web.servlet.view.json.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.web.servlet.view.json.MockHttpServletRequest . addParameter ( STRING , STRING ) ; this . org.springframework.web.servlet.view.json.MockHttpServletRequest . addParameter ( java.lang.String , java.lang.String ) ; this . org.springframework.web.servlet.view.json.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.web.servlet.view.json.MappingJackson2JsonView . render ( java.util.Map<java.lang.String,java.lang.Object> , this . org.springframework.web.servlet.view.json.MockHttpServletRequest , this . org.springframework.web.servlet.view.json.MockHttpServletResponse ) ; java.lang.String java.lang.String = this . org.springframework.web.servlet.view.json.MockHttpServletResponse . getContentAsString ( ) ; if ( boolean ) { assertEquals ( STRING STRING + java.lang.String + STRING , java.lang.String ) ; } else { assertEquals ( STRING , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.util.Date java.util.Date ( ) { return new java.util.Date ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestChildBean org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestChildBean ( ) { return org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestChildBean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple ( ) { return org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple ) { this . org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple = org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , JsonGenerator org.springframework.web.servlet.view.json.JsonGenerator , SerializerProvider org.springframework.web.servlet.view.json.SerializerProvider ) throws java.io.IOException { org.springframework.web.servlet.view.json.JsonGenerator . writeStartObject ( ) ; org.springframework.web.servlet.view.json.JsonGenerator . writeFieldName ( STRING ) ; org.springframework.web.servlet.view.json.JsonGenerator . writeString ( STRING ) ; org.springframework.web.servlet.view.json.JsonGenerator . writeEndObject ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected void ( SerializerFactoryConfig org.springframework.web.servlet.view.json.SerializerFactoryConfig ) { super( org.springframework.web.servlet.view.json.SerializerFactoryConfig ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.view.json.JsonSerializer<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.view.json.JsonSerializer<java.lang.Object> ( SerializerProvider org.springframework.web.servlet.view.json.SerializerProvider , JavaType org.springframework.web.servlet.view.json.JavaType ) throws org.springframework.web.servlet.view.json.JsonMappingException { if ( org.springframework.web.servlet.view.json.JavaType . getRawClass ( ) == org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimple .class ) { return new org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests.TestBeanSimpleSerializer ( ) ; } else { return super. createSerializer ( org.springframework.web.servlet.view.json.SerializerProvider , org.springframework.web.servlet.view.json.JavaType ) ; } }  <METHOD_END>
