<METHOD_START> @ Before public void void ( ) { org.springframework.data.cassandra.core.CassandraTemplate = new CassandraTemplate ( org.springframework.data.cassandra.core.Session , new MappingCassandraConverter ( ) ) ; when ( org.springframework.data.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.data.cassandra.core.ResultSet ) ; when ( org.springframework.data.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.data.cassandra.core.ColumnDefinitions ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.data.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . contains ( anyString ( ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getType ( anyInt ( ) ) ) . thenReturn ( DataType . ascii ( ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; java.util.List<org.springframework.data.cassandra.core.Person> < Person > java.util.List<org.springframework.data.cassandra.core.Person> = org.springframework.data.cassandra.core.CassandraTemplate . select ( STRING , Person .class ) ; assertThat ( java.util.List<org.springframework.data.cassandra.core.Person> ) . hasSize ( NUMBER ) . contains ( new Person ( STRING , STRING , STRING ) ) ; verify ( org.springframework.data.cassandra.core.Session ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.data.cassandra.core.ResultSet . iterator ( ) ) . thenThrow ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; try { org.springframework.data.cassandra.core.CassandraTemplate . select ( STRING , Person .class ) ; fail ( STRING ) ; } catch ( CassandraConnectionFailureException org.springframework.data.cassandra.core.CassandraConnectionFailureException ) { assertThat ( org.springframework.data.cassandra.core.CassandraConnectionFailureException ) . hasRootCauseInstanceOf ( NoHostAvailableException .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.data.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . contains ( anyString ( ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getType ( anyInt ( ) ) ) . thenReturn ( DataType . ascii ( ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; Person org.springframework.data.cassandra.core.Person = org.springframework.data.cassandra.core.CassandraTemplate . selectOne ( STRING , Person .class ) ; assertThat ( org.springframework.data.cassandra.core.Person ) . isEqualTo ( new Person ( STRING , STRING , STRING ) ) ; verify ( org.springframework.data.cassandra.core.Session ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.data.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . contains ( anyString ( ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getType ( anyInt ( ) ) ) . thenReturn ( DataType . ascii ( ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; Person org.springframework.data.cassandra.core.Person = org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( STRING , Person .class ) ; assertThat ( org.springframework.data.cassandra.core.Person ) . isEqualTo ( new Person ( STRING , STRING , STRING ) ) ; verify ( org.springframework.data.cassandra.core.Session ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.data.cassandra.core.Row ) . iterator ( ) ) ; boolean boolean = org.springframework.data.cassandra.core.CassandraTemplate . exists ( STRING , Person .class ) ; assertThat ( boolean ) . isTrue ( ) ; verify ( org.springframework.data.cassandra.core.Session ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Iterator<java.lang.Object> ( ) ) ; boolean boolean = org.springframework.data.cassandra.core.CassandraTemplate . exists ( STRING , Person .class ) ; assertThat ( boolean ) . isFalse ( ) ; verify ( org.springframework.data.cassandra.core.Session ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.data.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.data.cassandra.core.Row . getLong ( NUMBER ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; long long = org.springframework.data.cassandra.core.CassandraTemplate . count ( Person .class ) ; assertThat ( long ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.cassandra.core.Session ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( true ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; Person org.springframework.data.cassandra.core.Person = org.springframework.data.cassandra.core.CassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ; assertThat ( org.springframework.data.cassandra.core.Person ) . isEqualTo ( org.springframework.data.cassandra.core.Person ) ; verify ( org.springframework.data.cassandra.core.Session ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { reset ( org.springframework.data.cassandra.core.Session ) ; when ( org.springframework.data.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenThrow ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; try { org.springframework.data.cassandra.core.CassandraTemplate . insert ( new Person ( STRING , STRING , STRING ) ) ; fail ( STRING ) ; } catch ( CassandraConnectionFailureException org.springframework.data.cassandra.core.CassandraConnectionFailureException ) { assertThat ( org.springframework.data.cassandra.core.CassandraConnectionFailureException ) . hasRootCauseInstanceOf ( NoHostAvailableException .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( false ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; Person org.springframework.data.cassandra.core.Person = org.springframework.data.cassandra.core.CassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ; assertThat ( org.springframework.data.cassandra.core.Person ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( true ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; Person org.springframework.data.cassandra.core.Person = org.springframework.data.cassandra.core.CassandraTemplate . update ( org.springframework.data.cassandra.core.Person ) ; assertThat ( org.springframework.data.cassandra.core.Person ) . isEqualTo ( org.springframework.data.cassandra.core.Person ) ; verify ( org.springframework.data.cassandra.core.Session ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { reset ( org.springframework.data.cassandra.core.Session ) ; when ( org.springframework.data.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenThrow ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; try { org.springframework.data.cassandra.core.CassandraTemplate . update ( new Person ( STRING , STRING , STRING ) ) ; fail ( STRING ) ; } catch ( CassandraConnectionFailureException org.springframework.data.cassandra.core.CassandraConnectionFailureException ) { assertThat ( org.springframework.data.cassandra.core.CassandraConnectionFailureException ) . hasRootCauseInstanceOf ( NoHostAvailableException .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( false ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; Person org.springframework.data.cassandra.core.Person = org.springframework.data.cassandra.core.CassandraTemplate . update ( org.springframework.data.cassandra.core.Person ) ; assertThat ( org.springframework.data.cassandra.core.Person ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( true ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; boolean boolean = org.springframework.data.cassandra.core.CassandraTemplate . deleteById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ; assertThat ( boolean ) . isTrue ( ) ; verify ( org.springframework.data.cassandra.core.Session ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( true ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; Person org.springframework.data.cassandra.core.Person = org.springframework.data.cassandra.core.CassandraTemplate . delete ( org.springframework.data.cassandra.core.Person ) ; assertThat ( org.springframework.data.cassandra.core.Person ) . isEqualTo ( org.springframework.data.cassandra.core.Person ) ; verify ( org.springframework.data.cassandra.core.Session ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { reset ( org.springframework.data.cassandra.core.Session ) ; when ( org.springframework.data.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenThrow ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; try { org.springframework.data.cassandra.core.CassandraTemplate . delete ( new Person ( STRING , STRING , STRING ) ) ; fail ( STRING ) ; } catch ( CassandraConnectionFailureException org.springframework.data.cassandra.core.CassandraConnectionFailureException ) { assertThat ( org.springframework.data.cassandra.core.CassandraConnectionFailureException ) . hasRootCauseInstanceOf ( NoHostAvailableException .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( false ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; Person org.springframework.data.cassandra.core.Person = org.springframework.data.cassandra.core.CassandraTemplate . delete ( org.springframework.data.cassandra.core.Person ) ; assertThat ( org.springframework.data.cassandra.core.Person ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.core.CassandraTemplate . truncate ( Person .class ) ; verify ( org.springframework.data.cassandra.core.Session ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { org.springframework.data.cassandra.core.CassandraTemplate . batchOps ( ) . insert ( new Book ( ) ) . execute ( ) ; verify ( org.springframework.data.cassandra.core.Session ) . execute ( Mockito . any ( Batch .class ) ) ; }  <METHOD_END>
