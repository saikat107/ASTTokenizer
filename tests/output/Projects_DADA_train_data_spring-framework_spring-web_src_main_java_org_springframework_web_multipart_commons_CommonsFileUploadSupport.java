<METHOD_START> public void ( ) { this . org.springframework.web.multipart.commons.DiskFileItemFactory = org.springframework.web.multipart.commons.DiskFileItemFactory ( ) ; this . org.springframework.web.multipart.commons.FileUpload = org.springframework.web.multipart.commons.FileUpload ( org.springframework.web.multipart.commons.DiskFileItemFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.multipart.commons.DiskFileItemFactory org.springframework.web.multipart.commons.DiskFileItemFactory ( ) { return this . org.springframework.web.multipart.commons.DiskFileItemFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.multipart.commons.FileUpload org.springframework.web.multipart.commons.FileUpload ( ) { return this . org.springframework.web.multipart.commons.FileUpload ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . org.springframework.web.multipart.commons.FileUpload . setSizeMax ( long ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . org.springframework.web.multipart.commons.FileUpload . setFileSizeMax ( long ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . org.springframework.web.multipart.commons.DiskFileItemFactory . setSizeThreshold ( int ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.web.multipart.commons.FileUpload . setHeaderEncoding ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = org.springframework.web.multipart.commons.FileUpload ( ) . getHeaderEncoding ( ) ; if ( java.lang.String == null ) { java.lang.String = WebUtils . DEFAULT_CHARACTER_ENCODING ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Resource org.springframework.web.multipart.commons.Resource ) throws java.io.IOException { if ( ! org.springframework.web.multipart.commons.Resource . exists ( ) && ! org.springframework.web.multipart.commons.Resource . getFile ( ) . mkdirs ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.web.multipart.commons.Resource + STRING ) ; } this . org.springframework.web.multipart.commons.DiskFileItemFactory . setRepository ( org.springframework.web.multipart.commons.Resource . getFile ( ) ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.multipart.commons.DiskFileItemFactory org.springframework.web.multipart.commons.DiskFileItemFactory ( ) { return new DiskFileItemFactory ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.web.multipart.commons.FileUpload org.springframework.web.multipart.commons.FileUpload ( FileItemFactory org.springframework.web.multipart.commons.FileItemFactory );  <METHOD_END>
<METHOD_START> protected org.springframework.web.multipart.commons.FileUpload org.springframework.web.multipart.commons.FileUpload ( java.lang.String java.lang.String ) { FileUpload org.springframework.web.multipart.commons.FileUpload = org.springframework.web.multipart.commons.FileUpload ( ) ; FileUpload org.springframework.web.multipart.commons.FileUpload = org.springframework.web.multipart.commons.FileUpload ; if ( java.lang.String != null && ! java.lang.String . boolean ( org.springframework.web.multipart.commons.FileUpload . getHeaderEncoding ( ) ) ) { org.springframework.web.multipart.commons.FileUpload = org.springframework.web.multipart.commons.FileUpload ( org.springframework.web.multipart.commons.DiskFileItemFactory ( ) ) ; org.springframework.web.multipart.commons.FileUpload . setSizeMax ( org.springframework.web.multipart.commons.FileUpload . getSizeMax ( ) ) ; org.springframework.web.multipart.commons.FileUpload . setFileSizeMax ( org.springframework.web.multipart.commons.FileUpload . getFileSizeMax ( ) ) ; org.springframework.web.multipart.commons.FileUpload . setHeaderEncoding ( java.lang.String ) ; } return org.springframework.web.multipart.commons.FileUpload ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.multipart.commons.CommonsFileUploadSupport.MultipartParsingResult org.springframework.web.multipart.commons.CommonsFileUploadSupport.MultipartParsingResult ( java.util.List<org.springframework.web.multipart.commons.FileItem> < FileItem > java.util.List<org.springframework.web.multipart.commons.FileItem> , java.lang.String java.lang.String ) { MultiValueMap < java.lang.String , MultipartFile > org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> = new LinkedMultiValueMap <> ( ) ; java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> = new java.util.HashMap<java.lang.String,java.lang.String[]> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; for ( FileItem org.springframework.web.multipart.commons.FileItem : java.util.List<org.springframework.web.multipart.commons.FileItem> ) { if ( org.springframework.web.multipart.commons.FileItem . isFormField ( ) ) { java.lang.String java.lang.String ; java.lang.String java.lang.String = java.lang.String ( org.springframework.web.multipart.commons.FileItem . getContentType ( ) , java.lang.String ) ; if ( java.lang.String != null ) { try { java.lang.String = org.springframework.web.multipart.commons.FileItem . getString ( java.lang.String ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { if ( org.springframework.web.multipart.commons.Log . isWarnEnabled ( ) ) { org.springframework.web.multipart.commons.Log . warn ( STRING + org.springframework.web.multipart.commons.FileItem . getFieldName ( ) + STRING + java.lang.String + STRING ) ; } java.lang.String = org.springframework.web.multipart.commons.FileItem . getString ( ) ; } } else { java.lang.String = org.springframework.web.multipart.commons.FileItem . getString ( ) ; } java.lang.String [] java.lang.String[] = java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( org.springframework.web.multipart.commons.FileItem . getFieldName ( ) ) ; if ( java.lang.String[] == null ) { java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( org.springframework.web.multipart.commons.FileItem . getFieldName ( ) , new java.lang.String [] { java.lang.String } ) ; } else { java.lang.String [] java.lang.String[] = StringUtils . addStringToArray ( java.lang.String[] , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( org.springframework.web.multipart.commons.FileItem . getFieldName ( ) , java.lang.String[] ) ; } java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.web.multipart.commons.FileItem . getFieldName ( ) , org.springframework.web.multipart.commons.FileItem . getContentType ( ) ) ; } else { CommonsMultipartFile org.springframework.web.multipart.commons.CommonsMultipartFile = org.springframework.web.multipart.commons.CommonsMultipartFile ( org.springframework.web.multipart.commons.FileItem ) ; org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . add ( org.springframework.web.multipart.commons.CommonsMultipartFile . getName ( ) , org.springframework.web.multipart.commons.CommonsMultipartFile ) ; if ( org.springframework.web.multipart.commons.Log . isDebugEnabled ( ) ) { org.springframework.web.multipart.commons.Log . debug ( STRING + org.springframework.web.multipart.commons.CommonsMultipartFile . getName ( ) + STRING + org.springframework.web.multipart.commons.CommonsMultipartFile . getSize ( ) + STRING + org.springframework.web.multipart.commons.CommonsMultipartFile . getOriginalFilename ( ) + STRING + org.springframework.web.multipart.commons.CommonsMultipartFile . getStorageDescription ( ) ) ; } } } return new org.springframework.web.multipart.commons.CommonsFileUploadSupport.MultipartParsingResult ( org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> , java.util.Map<java.lang.String,java.lang.String[]> , java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.multipart.commons.CommonsMultipartFile org.springframework.web.multipart.commons.CommonsMultipartFile ( FileItem org.springframework.web.multipart.commons.FileItem ) { CommonsMultipartFile org.springframework.web.multipart.commons.CommonsMultipartFile = new CommonsMultipartFile ( org.springframework.web.multipart.commons.FileItem ) ; org.springframework.web.multipart.commons.CommonsMultipartFile . setPreserveFilename ( this . boolean ) ; return org.springframework.web.multipart.commons.CommonsMultipartFile ; }  <METHOD_END>
<METHOD_START> protected void void ( MultiValueMap < java.lang.String , MultipartFile > org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> ) { for ( java.util.List<org.springframework.web.multipart.commons.MultipartFile> < MultipartFile > java.util.List<org.springframework.web.multipart.commons.MultipartFile> : org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . values ( ) ) { for ( MultipartFile org.springframework.web.multipart.commons.MultipartFile : java.util.List<org.springframework.web.multipart.commons.MultipartFile> ) { if ( org.springframework.web.multipart.commons.MultipartFile instanceof CommonsMultipartFile ) { CommonsMultipartFile org.springframework.web.multipart.commons.CommonsMultipartFile = ( CommonsMultipartFile ) org.springframework.web.multipart.commons.MultipartFile ; org.springframework.web.multipart.commons.CommonsMultipartFile . getFileItem ( ) . delete ( ) ; if ( org.springframework.web.multipart.commons.Log . isDebugEnabled ( ) ) { org.springframework.web.multipart.commons.Log . debug ( STRING + org.springframework.web.multipart.commons.CommonsMultipartFile . getName ( ) + STRING + org.springframework.web.multipart.commons.CommonsMultipartFile . getOriginalFilename ( ) + STRING + org.springframework.web.multipart.commons.CommonsMultipartFile . getStorageDescription ( ) ) ; } } } } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return java.lang.String ; } MediaType org.springframework.web.multipart.commons.MediaType = MediaType . parseMediaType ( java.lang.String ) ; java.nio.charset.Charset java.nio.charset.Charset = org.springframework.web.multipart.commons.MediaType . getCharset ( ) ; return ( java.nio.charset.Charset != null ? java.nio.charset.Charset . java.lang.String ( ) : java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( MultiValueMap < java.lang.String , MultipartFile > org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> , java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> = org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> ; this . java.util.Map<java.lang.String,java.lang.String[]> = java.util.Map<java.lang.String,java.lang.String[]> ; this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> < java.lang.String , MultipartFile > org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> ( ) { return this . org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> ( ) { return this . java.util.Map<java.lang.String,java.lang.String[]> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return this . java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
