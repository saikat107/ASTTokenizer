<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.classpath.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.classpath.ExpectedException . expectMessage ( STRING ) ; new ClassPathFileChangeListener ( null , this . org.springframework.boot.devtools.classpath.ClassPathRestartStrategy , this . org.springframework.boot.devtools.classpath.FileSystemWatcher ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.classpath.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.classpath.ExpectedException . expectMessage ( STRING ) ; new ClassPathFileChangeListener ( this . org.springframework.boot.devtools.classpath.ApplicationEventPublisher , null , this . org.springframework.boot.devtools.classpath.FileSystemWatcher ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false ) ; verify ( this . org.springframework.boot.devtools.classpath.FileSystemWatcher , never ( ) ) . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true ) ; verify ( this . org.springframework.boot.devtools.classpath.FileSystemWatcher ) . stop ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { ClassPathFileChangeListener org.springframework.boot.devtools.classpath.ClassPathFileChangeListener = new ClassPathFileChangeListener ( this . org.springframework.boot.devtools.classpath.ApplicationEventPublisher , this . org.springframework.boot.devtools.classpath.ClassPathRestartStrategy , this . org.springframework.boot.devtools.classpath.FileSystemWatcher ) ; java.io.File java.io.File = new java.io.File ( STRING ) ; java.io.File java.io.File = new java.io.File ( STRING ) ; ChangedFile org.springframework.boot.devtools.classpath.ChangedFile = new ChangedFile ( java.io.File , java.io.File , ChangedFile . Type . ADD ) ; ChangedFile org.springframework.boot.devtools.classpath.ChangedFile = new ChangedFile ( java.io.File , java.io.File , ChangedFile . Type . ADD ) ; java.util.Set<org.springframework.boot.devtools.classpath.ChangedFile> < ChangedFile > java.util.Set<org.springframework.boot.devtools.classpath.ChangedFile> = new java.util.LinkedHashSet<org.springframework.boot.devtools.classpath.ChangedFile> <> ( ) ; java.util.Set<org.springframework.boot.devtools.classpath.ChangedFile> . add ( org.springframework.boot.devtools.classpath.ChangedFile ) ; java.util.Set<org.springframework.boot.devtools.classpath.ChangedFile> . add ( org.springframework.boot.devtools.classpath.ChangedFile ) ; ChangedFiles org.springframework.boot.devtools.classpath.ChangedFiles = new ChangedFiles ( new java.io.File ( STRING ) , java.util.Set<org.springframework.boot.devtools.classpath.ChangedFile> ) ; java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> = java.util.Collections . java.util.Set ( org.springframework.boot.devtools.classpath.ChangedFiles ) ; if ( boolean ) { given ( this . org.springframework.boot.devtools.classpath.ClassPathRestartStrategy . isRestartRequired ( org.springframework.boot.devtools.classpath.ChangedFile ) ) . willReturn ( true ) ; } org.springframework.boot.devtools.classpath.ClassPathFileChangeListener . onChange ( java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> ) ; verify ( this . org.springframework.boot.devtools.classpath.ApplicationEventPublisher ) . publishEvent ( this . org.springframework.boot.devtools.classpath.ArgumentCaptor<org.springframework.boot.devtools.classpath.ApplicationEvent> . capture ( ) ) ; ClassPathChangedEvent org.springframework.boot.devtools.classpath.ClassPathChangedEvent = ( ClassPathChangedEvent ) this . org.springframework.boot.devtools.classpath.ArgumentCaptor<org.springframework.boot.devtools.classpath.ApplicationEvent> . getValue ( ) ; assertThat ( org.springframework.boot.devtools.classpath.ClassPathChangedEvent . getChangeSet ( ) ) . isEqualTo ( java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> ) ; assertThat ( org.springframework.boot.devtools.classpath.ClassPathChangedEvent . isRestartRequired ( ) ) . isEqualTo ( boolean ) ; }  <METHOD_END>
