<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.boot.test.mock.mockito.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; MockitoPostProcessor . register ( org.springframework.boot.test.mock.mockito.AnnotationConfigApplicationContext ) ; org.springframework.boot.test.mock.mockito.AnnotationConfigApplicationContext . register ( org.springframework.boot.test.mock.mockito.MockitoPostProcessorTests.MultipleBeans .class ) ; this . org.springframework.boot.test.mock.mockito.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.test.mock.mockito.ExpectedException . expectMessage ( STRING + ExampleService .class . java.lang.String ( ) + STRING + STRING ) ; org.springframework.boot.test.mock.mockito.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.boot.test.mock.mockito.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; MockitoPostProcessor . register ( org.springframework.boot.test.mock.mockito.AnnotationConfigApplicationContext ) ; org.springframework.boot.test.mock.mockito.AnnotationConfigApplicationContext . register ( org.springframework.boot.test.mock.mockito.MockitoPostProcessorTests.MultipleQualifiedBeans .class ) ; this . org.springframework.boot.test.mock.mockito.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.test.mock.mockito.ExpectedException . expectMessage ( STRING + ExampleService .class . java.lang.String ( ) + STRING + STRING ) ; org.springframework.boot.test.mock.mockito.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.boot.test.mock.mockito.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; MockitoPostProcessor . register ( org.springframework.boot.test.mock.mockito.AnnotationConfigApplicationContext ) ; RootBeanDefinition org.springframework.boot.test.mock.mockito.RootBeanDefinition = new RootBeanDefinition ( org.springframework.boot.test.mock.mockito.MockitoPostProcessorTests.TestFactoryBean .class ) ; org.springframework.boot.test.mock.mockito.RootBeanDefinition . setAttribute ( STRING , org.springframework.boot.test.mock.mockito.MockitoPostProcessorTests.SomeInterface .class . java.lang.String ( ) ) ; org.springframework.boot.test.mock.mockito.AnnotationConfigApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.test.mock.mockito.RootBeanDefinition ) ; org.springframework.boot.test.mock.mockito.AnnotationConfigApplicationContext . register ( org.springframework.boot.test.mock.mockito.MockitoPostProcessorTests.MockedFactoryBean .class ) ; org.springframework.boot.test.mock.mockito.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( Mockito . mockingDetails ( org.springframework.boot.test.mock.mockito.AnnotationConfigApplicationContext . getBean ( STRING ) ) . isMock ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.test.mock.mockito.MockitoPostProcessorTests.TestFactoryBean org.springframework.boot.test.mock.mockito.MockitoPostProcessorTests.TestFactoryBean ( ) { return new org.springframework.boot.test.mock.mockito.MockitoPostProcessorTests.TestFactoryBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.test.mock.mockito.ExampleService org.springframework.boot.test.mock.mockito.ExampleService ( ) { return new FailingExampleService ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.test.mock.mockito.ExampleService org.springframework.boot.test.mock.mockito.ExampleService ( ) { return new FailingExampleService ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Qualifier ( STRING ) public org.springframework.boot.test.mock.mockito.ExampleService org.springframework.boot.test.mock.mockito.ExampleService ( ) { return new FailingExampleService ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.test.mock.mockito.ExampleService org.springframework.boot.test.mock.mockito.ExampleService ( ) { return new FailingExampleService ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Qualifier ( STRING ) public org.springframework.boot.test.mock.mockito.ExampleService org.springframework.boot.test.mock.mockito.ExampleService ( ) { return new FailingExampleService ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return new org.springframework.boot.test.mock.mockito.MockitoPostProcessorTests.TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
