<METHOD_START> @ After public void void ( ) { this . org.springframework.integration.test.mock.MockIntegrationContext . resetBeans ( STRING , STRING ) ; org.springframework.integration.test.mock.QueueChannel . purge ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.test.mock.MockIntegrationContext . instead ( STRING , MockIntegration . mockMessageSource ( STRING , STRING , STRING ) ) ; Message < ? > org.springframework.integration.test.mock.Message<?> = this . org.springframework.integration.test.mock.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.test.mock.Message<> ) ; assertEquals ( STRING , org.springframework.integration.test.mock.Message<> . getPayload ( ) ) ; org.springframework.integration.test.mock.Message<?> = this . org.springframework.integration.test.mock.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.test.mock.Message<> ) ; assertEquals ( STRING , org.springframework.integration.test.mock.Message<> . getPayload ( ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.test.mock.Message<?> = this . org.springframework.integration.test.mock.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.test.mock.Message<> ) ; assertEquals ( STRING , org.springframework.integration.test.mock.Message<> . getPayload ( ) ) ; } this . org.springframework.integration.test.mock.ApplicationContext . getBean ( STRING , Lifecycle .class ) . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.test.mock.ApplicationContext . getBean ( STRING , Lifecycle .class ) . start ( ) ; Message < ? > org.springframework.integration.test.mock.Message<?> = this . org.springframework.integration.test.mock.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.test.mock.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.test.mock.Message<> . getPayload ( ) ) ; org.springframework.integration.test.mock.Message<?> = this . org.springframework.integration.test.mock.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.test.mock.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.test.mock.Message<> . getPayload ( ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.test.mock.Message<?> = this . org.springframework.integration.test.mock.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.test.mock.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.test.mock.Message<> . getPayload ( ) ) ; } this . org.springframework.integration.test.mock.ApplicationContext . getBean ( STRING , Lifecycle .class ) . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.test.mock.ApplicationContext . getBean ( STRING , Lifecycle .class ) . start ( ) ; Message < ? > org.springframework.integration.test.mock.Message<?> = this . org.springframework.integration.test.mock.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.test.mock.Message<> ) ; assertEquals ( STRING , org.springframework.integration.test.mock.Message<> . getPayload ( ) ) ; org.springframework.integration.test.mock.Message<?> = this . org.springframework.integration.test.mock.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.test.mock.Message<> ) ; assertEquals ( STRING , org.springframework.integration.test.mock.Message<> . getPayload ( ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.test.mock.Message<?> = this . org.springframework.integration.test.mock.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.test.mock.Message<> ) ; assertEquals ( STRING , org.springframework.integration.test.mock.Message<> . getPayload ( ) ) ; } this . org.springframework.integration.test.mock.ApplicationContext . getBean ( STRING , Lifecycle .class ) . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.test.mock.QueueChannel = new QueueChannel ( ) ; StandardIntegrationFlow org.springframework.integration.test.mock.StandardIntegrationFlow = IntegrationFlows . from ( MockIntegration . mockMessageSource ( STRING , STRING , STRING ) ) .< java.lang.String , java.lang.String > transform ( java.lang.String :: toUpperCase ) . channel ( org.springframework.integration.test.mock.QueueChannel ) . get ( ) ; IntegrationFlowRegistration org.springframework.integration.test.mock.IntegrationFlowRegistration = this . org.springframework.integration.test.mock.IntegrationFlowContext . registration ( org.springframework.integration.test.mock.StandardIntegrationFlow ) . register ( ) ; Message < ? > org.springframework.integration.test.mock.Message<?> = org.springframework.integration.test.mock.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.test.mock.Message<> ) ; assertEquals ( STRING , org.springframework.integration.test.mock.Message<> . getPayload ( ) ) ; org.springframework.integration.test.mock.Message<?> = org.springframework.integration.test.mock.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.test.mock.Message<> ) ; assertEquals ( STRING , org.springframework.integration.test.mock.Message<> . getPayload ( ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.test.mock.Message<?> = org.springframework.integration.test.mock.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.test.mock.Message<> ) ; assertEquals ( STRING , org.springframework.integration.test.mock.Message<> . getPayload ( ) ) ; } org.springframework.integration.test.mock.IntegrationFlowRegistration . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { this . org.springframework.integration.test.mock.MockIntegrationContext . instead ( STRING , ( ) null ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( BeanNotOfRequiredTypeException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , containsString ( STRING + STRING + STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Bean ( name = PollerMetadata . DEFAULT_POLLER ) public org.springframework.integration.test.mock.PollerSpec org.springframework.integration.test.mock.PollerSpec ( ) { return Pollers . fixedDelay ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.test.mock.IntegrationFlow org.springframework.integration.test.mock.IntegrationFlow ( ) { return IntegrationFlows . from ( ( ) new GenericMessage <> ( STRING ) , e -> e . id ( STRING ) ) .< java.lang.String , java.lang.String > transform ( java.lang.String :: toUpperCase ) . channel ( org.springframework.integration.test.mock.QueueChannel ( ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.test.mock.QueueChannel org.springframework.integration.test.mock.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ InboundChannelAdapter ( channel = STRING ) @ Bean public org.springframework.integration.test.mock.MessageSource<java.lang.Integer> < java.lang.Integer > org.springframework.integration.test.mock.MessageSource<java.lang.Integer> ( ) { return MockIntegration . mockMessageSource ( NUMBER , NUMBER , NUMBER ) ; }  <METHOD_END>
