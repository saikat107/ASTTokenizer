<METHOD_START> public void ( SpelParserConfiguration org.springframework.expression.spel.standard.SpelParserConfiguration ) { this . org.springframework.expression.spel.standard.SpelParserConfiguration = org.springframework.expression.spel.standard.SpelParserConfiguration ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.expression.spel.standard.SpelExpression org.springframework.expression.spel.standard.SpelExpression ( java.lang.String java.lang.String , ParserContext org.springframework.expression.spel.standard.ParserContext ) throws org.springframework.expression.spel.standard.ParseException { try { this . java.lang.String = java.lang.String ; Tokenizer org.springframework.expression.spel.standard.Tokenizer = new Tokenizer ( java.lang.String ) ; org.springframework.expression.spel.standard.Tokenizer . process ( ) ; this . java.util.List<org.springframework.expression.spel.standard.Token> = org.springframework.expression.spel.standard.Tokenizer . getTokens ( ) ; this . int = this . java.util.List<org.springframework.expression.spel.standard.Token> . size ( ) ; this . int = NUMBER ; this . java.util.Stack<org.springframework.expression.spel.standard.SpelNodeImpl> . clear ( ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; if ( boolean ( ) ) { throw new SpelParseException ( org.springframework.expression.spel.standard.Token ( ) . startPos , SpelMessage . MORE_INPUT , java.lang.String ( org.springframework.expression.spel.standard.Token ( ) ) ) ; } Assert . isTrue ( this . java.util.Stack<org.springframework.expression.spel.standard.SpelNodeImpl> . isEmpty ( ) , STRING ) ; return new SpelExpression ( java.lang.String , org.springframework.expression.spel.standard.SpelNodeImpl , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ; } catch ( InternalParseException org.springframework.expression.spel.standard.InternalParseException ) { throw org.springframework.expression.spel.standard.InternalParseException . getCause ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ( ) { SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; if ( boolean ( ) ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( t . kind == TokenKind . ASSIGN ) { if ( org.springframework.expression.spel.standard.SpelNodeImpl == null ) { org.springframework.expression.spel.standard.SpelNodeImpl = new NullLiteral ( int ( t . startPos - NUMBER , t . endPos - NUMBER ) ) ; } org.springframework.expression.spel.standard.Token ( ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; return new Assign ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } if ( t . kind == TokenKind . ELVIS ) { if ( org.springframework.expression.spel.standard.SpelNodeImpl == null ) { org.springframework.expression.spel.standard.SpelNodeImpl = new NullLiteral ( int ( t . startPos - NUMBER , t . endPos - NUMBER ) ) ; } org.springframework.expression.spel.standard.Token ( ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; if ( org.springframework.expression.spel.standard.SpelNodeImpl == null ) { org.springframework.expression.spel.standard.SpelNodeImpl = new NullLiteral ( int ( t . startPos + NUMBER , t . endPos + NUMBER ) ) ; } return new Elvis ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } if ( t . kind == TokenKind . QMARK ) { if ( org.springframework.expression.spel.standard.SpelNodeImpl == null ) { org.springframework.expression.spel.standard.SpelNodeImpl = new NullLiteral ( int ( t . startPos - NUMBER , t . endPos - NUMBER ) ) ; } org.springframework.expression.spel.standard.Token ( ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; org.springframework.expression.spel.standard.Token ( TokenKind . COLON ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; return new Ternary ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } } return org.springframework.expression.spel.standard.SpelNodeImpl ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ( ) { SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; while ( boolean ( STRING ) || boolean ( TokenKind . SYMBOLIC_OR ) ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; void ( org.springframework.expression.spel.standard.Token , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; org.springframework.expression.spel.standard.SpelNodeImpl = new OpOr ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } return org.springframework.expression.spel.standard.SpelNodeImpl ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ( ) { SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; while ( boolean ( STRING ) || boolean ( TokenKind . SYMBOLIC_AND ) ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; void ( org.springframework.expression.spel.standard.Token , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; org.springframework.expression.spel.standard.SpelNodeImpl = new OpAnd ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } return org.springframework.expression.spel.standard.SpelNodeImpl ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ( ) { SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( org.springframework.expression.spel.standard.Token != null ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; void ( org.springframework.expression.spel.standard.Token , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; TokenKind org.springframework.expression.spel.standard.TokenKind = relationalOperatorToken . kind ; if ( org.springframework.expression.spel.standard.Token . isNumericRelationalOperator ( ) ) { int int = int ( org.springframework.expression.spel.standard.Token ) ; if ( org.springframework.expression.spel.standard.TokenKind == TokenKind . GT ) { return new OpGT ( int , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } if ( org.springframework.expression.spel.standard.TokenKind == TokenKind . LT ) { return new OpLT ( int , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } if ( org.springframework.expression.spel.standard.TokenKind == TokenKind . LE ) { return new OpLE ( int , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } if ( org.springframework.expression.spel.standard.TokenKind == TokenKind . GE ) { return new OpGE ( int , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } if ( org.springframework.expression.spel.standard.TokenKind == TokenKind . EQ ) { return new OpEQ ( int , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } Assert . isTrue ( org.springframework.expression.spel.standard.TokenKind == TokenKind . NE , STRING ) ; return new OpNE ( int , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } if ( org.springframework.expression.spel.standard.TokenKind == TokenKind . INSTANCEOF ) { return new OperatorInstanceof ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } if ( org.springframework.expression.spel.standard.TokenKind == TokenKind . MATCHES ) { return new OperatorMatches ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } Assert . isTrue ( org.springframework.expression.spel.standard.TokenKind == TokenKind . BETWEEN , STRING ) ; return new OperatorBetween ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } return org.springframework.expression.spel.standard.SpelNodeImpl ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ( ) { SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; while ( boolean ( TokenKind . PLUS , TokenKind . MINUS , TokenKind . INC ) ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; void ( org.springframework.expression.spel.standard.Token , org.springframework.expression.spel.standard.SpelNodeImpl ) ; if ( t . kind == TokenKind . PLUS ) { org.springframework.expression.spel.standard.SpelNodeImpl = new OpPlus ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } else if ( t . kind == TokenKind . MINUS ) { org.springframework.expression.spel.standard.SpelNodeImpl = new OpMinus ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } } return org.springframework.expression.spel.standard.SpelNodeImpl ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ( ) { SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; while ( boolean ( TokenKind . STAR , TokenKind . DIV , TokenKind . MOD ) ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; void ( org.springframework.expression.spel.standard.Token , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; if ( t . kind == TokenKind . STAR ) { org.springframework.expression.spel.standard.SpelNodeImpl = new OpMultiply ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } else if ( t . kind == TokenKind . DIV ) { org.springframework.expression.spel.standard.SpelNodeImpl = new OpDivide ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } else { Assert . isTrue ( t . kind == TokenKind . MOD , STRING ) ; org.springframework.expression.spel.standard.SpelNodeImpl = new OpModulus ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } } return org.springframework.expression.spel.standard.SpelNodeImpl ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ( ) { SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; if ( boolean ( TokenKind . POWER ) ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; void ( org.springframework.expression.spel.standard.Token , org.springframework.expression.spel.standard.SpelNodeImpl ) ; return new OperatorPower ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } if ( org.springframework.expression.spel.standard.SpelNodeImpl != null && boolean ( TokenKind . INC , TokenKind . DEC ) ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( org.springframework.expression.spel.standard.Token . getKind ( ) == TokenKind . INC ) { return new OpInc ( int ( org.springframework.expression.spel.standard.Token ) , true , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } return new OpDec ( int ( org.springframework.expression.spel.standard.Token ) , true , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } return org.springframework.expression.spel.standard.SpelNodeImpl ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ( ) { if ( boolean ( TokenKind . PLUS , TokenKind . MINUS , TokenKind . NOT ) ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; if ( t . kind == TokenKind . NOT ) { return new OperatorNot ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } if ( t . kind == TokenKind . PLUS ) { return new OpPlus ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } Assert . isTrue ( t . kind == TokenKind . MINUS , STRING ) ; return new OpMinus ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } if ( boolean ( TokenKind . INC , TokenKind . DEC ) ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; if ( org.springframework.expression.spel.standard.Token . getKind ( ) == TokenKind . INC ) { return new OpInc ( int ( org.springframework.expression.spel.standard.Token ) , false , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } return new OpDec ( int ( org.springframework.expression.spel.standard.Token ) , false , org.springframework.expression.spel.standard.SpelNodeImpl ) ; } return org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ( ) { java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> < SpelNodeImpl > java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> = new java.util.ArrayList<org.springframework.expression.spel.standard.SpelNodeImpl> <> ( ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . add ( org.springframework.expression.spel.standard.SpelNodeImpl ) ; while ( boolean ( ) ) { java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . add ( org.springframework.expression.spel.standard.SpelNodeImpl ( ) ) ; } if ( java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . size ( ) == NUMBER ) { return java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . get ( NUMBER ) ; } return new CompoundExpression ( int ( org.springframework.expression.spel.standard.SpelNodeImpl . getStartPosition ( ) , java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . get ( java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . size ( ) - NUMBER ) . getEndPosition ( ) ) , java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . toArray ( new SpelNodeImpl [ java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . size ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = null ; if ( boolean ( TokenKind . DOT , TokenKind . SAFE_NAVI ) ) { org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; } else { org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; } if ( org.springframework.expression.spel.standard.SpelNodeImpl == null ) { return false ; } else { void ( org.springframework.expression.spel.standard.SpelNodeImpl ) ; return true ; } }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ( ) { if ( boolean ( TokenKind . LSQUARE ) ) { if ( boolean ( ) ) { return org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ( ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; boolean boolean = ( t . kind == TokenKind . SAFE_NAVI ) ; if ( boolean ( boolean ) || boolean ( ) || boolean ( boolean ) || boolean ( boolean ) ) { return org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; } if ( org.springframework.expression.spel.standard.Token ( ) == null ) { void ( t . startPos , SpelMessage . OOD ) ; } else { void ( t . startPos , SpelMessage . UNEXPECTED_DATA_AFTER_DOT , java.lang.String ( org.springframework.expression.spel.standard.Token ( ) ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { if ( ! boolean ( TokenKind . HASH ) ) { return false ; } Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( TokenKind . IDENTIFIER ) ; SpelNodeImpl [] org.springframework.expression.spel.standard.SpelNodeImpl[] = org.springframework.expression.spel.standard.SpelNodeImpl[] ( ) ; if ( org.springframework.expression.spel.standard.SpelNodeImpl[] == null ) { void ( new VariableReference ( functionOrVariableName . data , int ( t . startPos , functionOrVariableName . endPos ) ) ) ; return true ; } void ( new FunctionReference ( functionOrVariableName . data , int ( t . startPos , functionOrVariableName . endPos ) , org.springframework.expression.spel.standard.SpelNodeImpl[] ) ) ; return true ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.SpelNodeImpl [] org.springframework.expression.spel.standard.SpelNodeImpl[] ( ) { if ( ! boolean ( TokenKind . LPAREN ) ) { return null ; } java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> < SpelNodeImpl > java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> = new java.util.ArrayList<org.springframework.expression.spel.standard.SpelNodeImpl> <> ( ) ; void ( java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> ) ; org.springframework.expression.spel.standard.Token ( TokenKind . RPAREN ) ; return java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . toArray ( new SpelNodeImpl [ java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . size ( ) ] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> < SpelNodeImpl > java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> ) { if ( ! boolean ( TokenKind . LPAREN ) ) { throw new InternalParseException ( new SpelParseException ( this . java.lang.String , int ( org.springframework.expression.spel.standard.Token ( ) ) , SpelMessage . MISSING_CONSTRUCTOR_ARGS ) ) ; } void ( java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> ) ; org.springframework.expression.spel.standard.Token ( TokenKind . RPAREN ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> < SpelNodeImpl > java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> ) { int int = org.springframework.expression.spel.standard.Token ( ) . startPos ; Token org.springframework.expression.spel.standard.Token ; do { org.springframework.expression.spel.standard.Token ( ) ; Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( org.springframework.expression.spel.standard.Token == null ) { void ( int , SpelMessage . RUN_OUT_OF_ARGUMENTS ) ; } if ( t . kind != TokenKind . RPAREN ) { java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . add ( org.springframework.expression.spel.standard.SpelNodeImpl ( ) ) ; } org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; } while ( org.springframework.expression.spel.standard.Token != null && next . kind == TokenKind . COMMA ); if ( org.springframework.expression.spel.standard.Token == null ) { void ( int , SpelMessage . RUN_OUT_OF_ARGUMENTS ) ; } }  <METHOD_END>
<METHOD_START> private int int ( Token org.springframework.expression.spel.standard.Token ) { if ( org.springframework.expression.spel.standard.Token == null ) { return this . java.lang.String . int ( ) ; } return t . startPos ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ( ) { if ( boolean ( ) ) { return org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; } else if ( boolean ( ) ) { return org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; } else if ( boolean ( ) || boolean ( ) || boolean ( ) || boolean ( false ) || boolean ( ) ) { return org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; } else if ( boolean ( ) ) { return org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; } else if ( boolean ( false ) || boolean ( false ) || boolean ( ) ) { return org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; } else if ( boolean ( ) ) { return org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { if ( boolean ( TokenKind . BEAN_REF ) || boolean ( TokenKind . FACTORY_BEAN_REF ) ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; Token org.springframework.expression.spel.standard.Token = null ; java.lang.String java.lang.String = null ; if ( boolean ( TokenKind . IDENTIFIER ) ) { org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( TokenKind . IDENTIFIER ) ; java.lang.String = beanNameToken . data ; } else if ( boolean ( TokenKind . LITERAL_STRING ) ) { org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( TokenKind . LITERAL_STRING ) ; java.lang.String = org.springframework.expression.spel.standard.Token . stringValue ( ) ; java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ; } else { void ( beanRefToken . startPos , SpelMessage . INVALID_BEAN_REFERENCE ) ; } BeanReference org.springframework.expression.spel.standard.BeanReference ; if ( org.springframework.expression.spel.standard.Token . getKind ( ) == TokenKind . FACTORY_BEAN_REF ) { java.lang.String java.lang.String = new java.lang.StringBuilder ( ) . java.lang.StringBuilder ( TokenKind . FACTORY_BEAN_REF . tokenChars ) . append ( java.lang.String ) . toString ( ) ; org.springframework.expression.spel.standard.BeanReference = new BeanReference ( int ( beanRefToken . startPos , beanNameToken . endPos ) , java.lang.String ) ; } else { org.springframework.expression.spel.standard.BeanReference = new BeanReference ( int ( org.springframework.expression.spel.standard.Token ) , java.lang.String ) ; } this . java.util.Stack<org.springframework.expression.spel.standard.SpelNodeImpl> . push ( org.springframework.expression.spel.standard.BeanReference ) ; return true ; } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { if ( boolean ( TokenKind . IDENTIFIER ) ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( ! STRING . boolean ( org.springframework.expression.spel.standard.Token . stringValue ( ) ) ) { return false ; } Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( boolean ( TokenKind . RSQUARE ) ) { void ( new PropertyOrFieldReference ( false , t . data , int ( org.springframework.expression.spel.standard.Token ) ) ) ; return true ; } org.springframework.expression.spel.standard.Token ( TokenKind . LPAREN ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; int int = NUMBER ; while ( boolean ( TokenKind . LSQUARE , true ) ) { org.springframework.expression.spel.standard.Token ( TokenKind . RSQUARE ) ; int ++ ; } org.springframework.expression.spel.standard.Token ( TokenKind . RPAREN ) ; this . java.util.Stack<org.springframework.expression.spel.standard.SpelNodeImpl> . push ( new TypeReference ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl , int ) ) ; return true ; } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { if ( boolean ( TokenKind . IDENTIFIER ) ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( ! STRING . boolean ( org.springframework.expression.spel.standard.Token . stringValue ( ) ) ) { return false ; } org.springframework.expression.spel.standard.Token ( ) ; this . java.util.Stack<org.springframework.expression.spel.standard.SpelNodeImpl> . push ( new NullLiteral ( int ( org.springframework.expression.spel.standard.Token ) ) ) ; return true ; } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( boolean boolean ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( ! boolean ( TokenKind . PROJECT , true ) ) { return false ; } SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; org.springframework.expression.spel.standard.Token ( TokenKind . RSQUARE ) ; this . java.util.Stack<org.springframework.expression.spel.standard.SpelNodeImpl> . push ( new Projection ( boolean , int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl ) ) ; return true ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( ! boolean ( TokenKind . LCURLY , true ) ) { return false ; } SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = null ; Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( boolean ( TokenKind . RCURLY , true ) ) { org.springframework.expression.spel.standard.SpelNodeImpl = new InlineList ( int ( t . startPos , closingCurly . endPos ) ) ; } else if ( boolean ( TokenKind . COLON , true ) ) { org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( TokenKind . RCURLY ) ; org.springframework.expression.spel.standard.SpelNodeImpl = new InlineMap ( int ( t . startPos , closingCurly . endPos ) ) ; } else { SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; if ( boolean ( TokenKind . RCURLY ) ) { java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> < SpelNodeImpl > java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> = new java.util.ArrayList<org.springframework.expression.spel.standard.SpelNodeImpl> <> ( ) ; java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . add ( org.springframework.expression.spel.standard.SpelNodeImpl ) ; org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( TokenKind . RCURLY ) ; org.springframework.expression.spel.standard.SpelNodeImpl = new InlineList ( int ( t . startPos , closingCurly . endPos ) , java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . toArray ( new SpelNodeImpl [ java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . size ( ) ] ) ) ; } else if ( boolean ( TokenKind . COMMA , true ) ) { java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> < SpelNodeImpl > java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> = new java.util.ArrayList<org.springframework.expression.spel.standard.SpelNodeImpl> <> ( ) ; java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . add ( org.springframework.expression.spel.standard.SpelNodeImpl ) ; do { java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . add ( org.springframework.expression.spel.standard.SpelNodeImpl ( ) ) ; } while ( boolean ( TokenKind . COMMA , true ) ); org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( TokenKind . RCURLY ) ; org.springframework.expression.spel.standard.SpelNodeImpl = new InlineList ( int ( t . startPos , closingCurly . endPos ) , java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . toArray ( new SpelNodeImpl [ java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . size ( ) ] ) ) ; } else if ( boolean ( TokenKind . COLON , true ) ) { java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> < SpelNodeImpl > java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> = new java.util.ArrayList<org.springframework.expression.spel.standard.SpelNodeImpl> <> ( ) ; java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . add ( org.springframework.expression.spel.standard.SpelNodeImpl ) ; java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . add ( org.springframework.expression.spel.standard.SpelNodeImpl ( ) ) ; while ( boolean ( TokenKind . COMMA , true ) ) { java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . add ( org.springframework.expression.spel.standard.SpelNodeImpl ( ) ) ; org.springframework.expression.spel.standard.Token ( TokenKind . COLON ) ; java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . add ( org.springframework.expression.spel.standard.SpelNodeImpl ( ) ) ; } org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( TokenKind . RCURLY ) ; org.springframework.expression.spel.standard.SpelNodeImpl = new InlineMap ( int ( t . startPos , closingCurly . endPos ) , java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . toArray ( new SpelNodeImpl [ java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . size ( ) ] ) ) ; } else { void ( t . startPos , SpelMessage . OOD ) ; } } this . java.util.Stack<org.springframework.expression.spel.standard.SpelNodeImpl> . push ( org.springframework.expression.spel.standard.SpelNodeImpl ) ; return true ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( ! boolean ( TokenKind . LSQUARE , true ) ) { return false ; } SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; org.springframework.expression.spel.standard.Token ( TokenKind . RSQUARE ) ; this . java.util.Stack<org.springframework.expression.spel.standard.SpelNodeImpl> . push ( new Indexer ( int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl ) ) ; return true ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( boolean boolean ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( ! boolean ( ) ) { return false ; } org.springframework.expression.spel.standard.Token ( ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; if ( org.springframework.expression.spel.standard.SpelNodeImpl == null ) { void ( int ( org.springframework.expression.spel.standard.Token ) , SpelMessage . MISSING_SELECTION_EXPRESSION ) ; } org.springframework.expression.spel.standard.Token ( TokenKind . RSQUARE ) ; if ( t . kind == TokenKind . SELECT_FIRST ) { this . java.util.Stack<org.springframework.expression.spel.standard.SpelNodeImpl> . push ( new Selection ( boolean , Selection . FIRST , int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl ) ) ; } else if ( t . kind == TokenKind . SELECT_LAST ) { this . java.util.Stack<org.springframework.expression.spel.standard.SpelNodeImpl> . push ( new Selection ( boolean , Selection . LAST , int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl ) ) ; } else { this . java.util.Stack<org.springframework.expression.spel.standard.SpelNodeImpl> . push ( new Selection ( boolean , Selection . ALL , int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl ) ) ; } return true ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ( ) { java.util.LinkedList<org.springframework.expression.spel.standard.SpelNodeImpl> < SpelNodeImpl > java.util.LinkedList<org.springframework.expression.spel.standard.SpelNodeImpl> = new java.util.LinkedList<org.springframework.expression.spel.standard.SpelNodeImpl> <> ( ) ; Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; while ( boolean ( org.springframework.expression.spel.standard.Token ) ) { org.springframework.expression.spel.standard.Token ( ) ; if ( node . kind != TokenKind . DOT ) { java.util.LinkedList<org.springframework.expression.spel.standard.SpelNodeImpl> . add ( new Identifier ( org.springframework.expression.spel.standard.Token . stringValue ( ) , int ( org.springframework.expression.spel.standard.Token ) ) ) ; } org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; } if ( java.util.LinkedList<org.springframework.expression.spel.standard.SpelNodeImpl> . isEmpty ( ) ) { if ( org.springframework.expression.spel.standard.Token == null ) { void ( this . java.lang.String . int ( ) , SpelMessage . OOD ) ; } void ( node . startPos , SpelMessage . NOT_EXPECTED_TOKEN , STRING , org.springframework.expression.spel.standard.Token . getKind ( ) . toString ( ) . toLowerCase ( ) ) ; } int int = int ( java.util.LinkedList<org.springframework.expression.spel.standard.SpelNodeImpl> . getFirst ( ) . getStartPosition ( ) , java.util.LinkedList<org.springframework.expression.spel.standard.SpelNodeImpl> . getLast ( ) . getEndPosition ( ) ) ; return new QualifiedIdentifier ( int , java.util.LinkedList<org.springframework.expression.spel.standard.SpelNodeImpl> . toArray ( new SpelNodeImpl [ java.util.LinkedList<org.springframework.expression.spel.standard.SpelNodeImpl> . size ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Token org.springframework.expression.spel.standard.Token ) { if ( org.springframework.expression.spel.standard.Token == null || node . kind == TokenKind . LITERAL_STRING ) { return false ; } if ( node . kind == TokenKind . DOT || node . kind == TokenKind . IDENTIFIER ) { return true ; } java.lang.String java.lang.String = org.springframework.expression.spel.standard.Token . stringValue ( ) ; return ( StringUtils . hasLength ( java.lang.String ) && java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( boolean boolean ) { if ( boolean ( TokenKind . IDENTIFIER ) ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; SpelNodeImpl [] org.springframework.expression.spel.standard.SpelNodeImpl[] = org.springframework.expression.spel.standard.SpelNodeImpl[] ( ) ; if ( org.springframework.expression.spel.standard.SpelNodeImpl[] == null ) { void ( new PropertyOrFieldReference ( boolean , methodOrPropertyName . data , int ( org.springframework.expression.spel.standard.Token ) ) ) ; return true ; } void ( new MethodReference ( boolean , methodOrPropertyName . data , int ( org.springframework.expression.spel.standard.Token ) , org.springframework.expression.spel.standard.SpelNodeImpl[] ) ) ; return true ; } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { if ( boolean ( STRING ) ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( boolean ( TokenKind . RSQUARE ) ) { void ( new PropertyOrFieldReference ( false , newToken . data , int ( org.springframework.expression.spel.standard.Token ) ) ) ; return true ; } SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> < SpelNodeImpl > java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> = new java.util.ArrayList<org.springframework.expression.spel.standard.SpelNodeImpl> <> ( ) ; java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . add ( org.springframework.expression.spel.standard.SpelNodeImpl ) ; if ( boolean ( TokenKind . LSQUARE ) ) { java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> < SpelNodeImpl > java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> = new java.util.ArrayList<org.springframework.expression.spel.standard.SpelNodeImpl> <> ( ) ; while ( boolean ( TokenKind . LSQUARE , true ) ) { if ( ! boolean ( TokenKind . RSQUARE ) ) { java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . add ( org.springframework.expression.spel.standard.SpelNodeImpl ( ) ) ; } else { java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . add ( null ) ; } org.springframework.expression.spel.standard.Token ( TokenKind . RSQUARE ) ; } if ( boolean ( ) ) { java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . add ( org.springframework.expression.spel.standard.SpelNodeImpl ( ) ) ; } void ( new ConstructorReference ( int ( org.springframework.expression.spel.standard.Token ) , java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . toArray ( new SpelNodeImpl [ java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . size ( ) ] ) , java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . toArray ( new SpelNodeImpl [ java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . size ( ) ] ) ) ) ; } else { void ( java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> ) ; void ( new ConstructorReference ( int ( org.springframework.expression.spel.standard.Token ) , java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . toArray ( new SpelNodeImpl [ java.util.List<org.springframework.expression.spel.standard.SpelNodeImpl> . size ( ) ] ) ) ) ; } return true ; } return false ; }  <METHOD_END>
<METHOD_START> private void void ( SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ) { this . java.util.Stack<org.springframework.expression.spel.standard.SpelNodeImpl> . push ( org.springframework.expression.spel.standard.SpelNodeImpl ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ( ) { return this . java.util.Stack<org.springframework.expression.spel.standard.SpelNodeImpl> . pop ( ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( org.springframework.expression.spel.standard.Token == null ) { return false ; } if ( t . kind == TokenKind . LITERAL_INT ) { void ( Literal . getIntLiteral ( t . data , int ( org.springframework.expression.spel.standard.Token ) , NUMBER ) ) ; } else if ( t . kind == TokenKind . LITERAL_LONG ) { void ( Literal . getLongLiteral ( t . data , int ( org.springframework.expression.spel.standard.Token ) , NUMBER ) ) ; } else if ( t . kind == TokenKind . LITERAL_HEXINT ) { void ( Literal . getIntLiteral ( t . data , int ( org.springframework.expression.spel.standard.Token ) , NUMBER ) ) ; } else if ( t . kind == TokenKind . LITERAL_HEXLONG ) { void ( Literal . getLongLiteral ( t . data , int ( org.springframework.expression.spel.standard.Token ) , NUMBER ) ) ; } else if ( t . kind == TokenKind . LITERAL_REAL ) { void ( Literal . getRealLiteral ( t . data , int ( org.springframework.expression.spel.standard.Token ) , false ) ) ; } else if ( t . kind == TokenKind . LITERAL_REAL_FLOAT ) { void ( Literal . getRealLiteral ( t . data , int ( org.springframework.expression.spel.standard.Token ) , true ) ) ; } else if ( boolean ( STRING ) ) { void ( new BooleanLiteral ( t . data , int ( org.springframework.expression.spel.standard.Token ) , true ) ) ; } else if ( boolean ( STRING ) ) { void ( new BooleanLiteral ( t . data , int ( org.springframework.expression.spel.standard.Token ) , false ) ) ; } else if ( t . kind == TokenKind . LITERAL_STRING ) { void ( new StringLiteral ( t . data , int ( org.springframework.expression.spel.standard.Token ) , t . data ) ) ; } else { return false ; } org.springframework.expression.spel.standard.Token ( ) ; return true ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { if ( boolean ( TokenKind . LPAREN ) ) { org.springframework.expression.spel.standard.Token ( ) ; SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ( ) ; org.springframework.expression.spel.standard.Token ( TokenKind . RPAREN ) ; void ( org.springframework.expression.spel.standard.SpelNodeImpl ) ; return true ; } else { return false ; } }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.Token org.springframework.expression.spel.standard.Token ( ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( org.springframework.expression.spel.standard.Token == null ) { return null ; } if ( org.springframework.expression.spel.standard.Token . isNumericRelationalOperator ( ) ) { return org.springframework.expression.spel.standard.Token ; } if ( org.springframework.expression.spel.standard.Token . isIdentifier ( ) ) { java.lang.String java.lang.String = org.springframework.expression.spel.standard.Token . stringValue ( ) ; if ( java.lang.String . boolean ( STRING ) ) { return org.springframework.expression.spel.standard.Token . asInstanceOfToken ( ) ; } if ( java.lang.String . boolean ( STRING ) ) { return org.springframework.expression.spel.standard.Token . asMatchesToken ( ) ; } if ( java.lang.String . boolean ( STRING ) ) { return org.springframework.expression.spel.standard.Token . asBetweenToken ( ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.Token org.springframework.expression.spel.standard.Token ( TokenKind org.springframework.expression.spel.standard.TokenKind ) { Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( org.springframework.expression.spel.standard.Token == null ) { void ( this . java.lang.String . int ( ) , SpelMessage . OOD ) ; } if ( t . kind != org.springframework.expression.spel.standard.TokenKind ) { void ( t . startPos , SpelMessage . NOT_EXPECTED_TOKEN , org.springframework.expression.spel.standard.TokenKind . toString ( ) . toLowerCase ( ) , org.springframework.expression.spel.standard.Token . getKind ( ) . toString ( ) . toLowerCase ( ) ) ; } return org.springframework.expression.spel.standard.Token ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( TokenKind org.springframework.expression.spel.standard.TokenKind ) { return boolean ( org.springframework.expression.spel.standard.TokenKind , false ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( TokenKind org.springframework.expression.spel.standard.TokenKind , boolean boolean ) { if ( ! boolean ( ) ) { return false ; } Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; if ( t . kind == org.springframework.expression.spel.standard.TokenKind ) { if ( boolean ) { this . int ++ ; } return true ; } if ( org.springframework.expression.spel.standard.TokenKind == TokenKind . IDENTIFIER ) { if ( t . kind . ordinal ( ) >= TokenKind . DIV . ordinal ( ) && t . kind . ordinal ( ) <= TokenKind . NOT . ordinal ( ) && t . data != null ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( TokenKind org.springframework.expression.spel.standard.TokenKind , TokenKind org.springframework.expression.spel.standard.TokenKind ) { if ( ! boolean ( ) ) { return false ; } Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; return ( t . kind == org.springframework.expression.spel.standard.TokenKind || t . kind == org.springframework.expression.spel.standard.TokenKind ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( TokenKind org.springframework.expression.spel.standard.TokenKind , TokenKind org.springframework.expression.spel.standard.TokenKind , TokenKind org.springframework.expression.spel.standard.TokenKind ) { if ( ! boolean ( ) ) { return false ; } Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; return ( t . kind == org.springframework.expression.spel.standard.TokenKind || t . kind == org.springframework.expression.spel.standard.TokenKind || t . kind == org.springframework.expression.spel.standard.TokenKind ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { if ( ! boolean ( ) ) { return false ; } Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; return ( t . kind == TokenKind . IDENTIFIER && org.springframework.expression.spel.standard.Token . stringValue ( ) . equalsIgnoreCase ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { if ( ! boolean ( ) ) { return false ; } Token org.springframework.expression.spel.standard.Token = org.springframework.expression.spel.standard.Token ( ) ; return ( t . kind == TokenKind . SELECT || t . kind == TokenKind . SELECT_FIRST || t . kind == TokenKind . SELECT_LAST ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return this . int < this . java.util.List<org.springframework.expression.spel.standard.Token> . size ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.Token org.springframework.expression.spel.standard.Token ( ) { if ( this . int >= this . int ) { return null ; } return this . java.util.List<org.springframework.expression.spel.standard.Token> . get ( this . int ++ ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.Token org.springframework.expression.spel.standard.Token ( ) { if ( this . int >= this . int ) { return null ; } return this . java.util.List<org.springframework.expression.spel.standard.Token> . get ( this . int ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int , SpelMessage org.springframework.expression.spel.standard.SpelMessage , java.lang.Object ... java.lang.Object[] ) { throw new InternalParseException ( new SpelParseException ( this . java.lang.String , int , org.springframework.expression.spel.standard.SpelMessage , java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( Token org.springframework.expression.spel.standard.Token ) { if ( org.springframework.expression.spel.standard.Token . getKind ( ) . hasPayload ( ) ) { return org.springframework.expression.spel.standard.Token . stringValue ( ) ; } return t . kind . toString ( ) . toLowerCase ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( Token org.springframework.expression.spel.standard.Token , SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl , SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ) { void ( org.springframework.expression.spel.standard.Token , org.springframework.expression.spel.standard.SpelNodeImpl ) ; void ( org.springframework.expression.spel.standard.Token , org.springframework.expression.spel.standard.SpelNodeImpl ) ; }  <METHOD_END>
<METHOD_START> private void void ( Token org.springframework.expression.spel.standard.Token , SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ) { if ( org.springframework.expression.spel.standard.SpelNodeImpl == null ) { void ( token . startPos , SpelMessage . LEFT_OPERAND_PROBLEM ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Token org.springframework.expression.spel.standard.Token , SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ) { if ( org.springframework.expression.spel.standard.SpelNodeImpl == null ) { void ( token . startPos , SpelMessage . RIGHT_OPERAND_PROBLEM ) ; } }  <METHOD_END>
<METHOD_START> private int int ( Token org.springframework.expression.spel.standard.Token ) { return ( t . startPos << NUMBER ) + t . endPos ; }  <METHOD_END>
<METHOD_START> private int int ( int int , int int ) { return ( int << NUMBER ) + int ; }  <METHOD_END>
