<METHOD_START> public void ( java.lang.String java.lang.String , SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl , SpelParserConfiguration org.springframework.expression.spel.standard.SpelParserConfiguration ) { this . java.lang.String = java.lang.String ; this . org.springframework.expression.spel.standard.SpelNodeImpl = org.springframework.expression.spel.standard.SpelNodeImpl ; this . org.springframework.expression.spel.standard.SpelParserConfiguration = org.springframework.expression.spel.standard.SpelParserConfiguration ; }  <METHOD_END>
<METHOD_START> public void void ( EvaluationContext org.springframework.expression.spel.standard.EvaluationContext ) { this . org.springframework.expression.spel.standard.EvaluationContext = org.springframework.expression.spel.standard.EvaluationContext ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.standard.EvaluationContext org.springframework.expression.spel.standard.EvaluationContext ( ) { if ( this . org.springframework.expression.spel.standard.EvaluationContext == null ) { this . org.springframework.expression.spel.standard.EvaluationContext = new StandardEvaluationContext ( ) ; } return this . org.springframework.expression.spel.standard.EvaluationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.expression.spel.standard.EvaluationException { java.lang.Object java.lang.Object ; if ( this . org.springframework.expression.spel.standard.CompiledExpression != null ) { try { TypedValue org.springframework.expression.spel.standard.TypedValue = org.springframework.expression.spel.standard.EvaluationContext == null ? null : org.springframework.expression.spel.standard.EvaluationContext . getRootObject ( ) ; return this . org.springframework.expression.spel.standard.CompiledExpression . getValue ( org.springframework.expression.spel.standard.TypedValue == null ? null : org.springframework.expression.spel.standard.TypedValue . getValue ( ) , org.springframework.expression.spel.standard.EvaluationContext ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( this . org.springframework.expression.spel.standard.SpelParserConfiguration . getCompilerMode ( ) == SpelCompilerMode . MIXED ) { this . int = NUMBER ; this . org.springframework.expression.spel.standard.CompiledExpression = null ; } else { throw new SpelEvaluationException ( java.lang.Throwable , SpelMessage . EXCEPTION_RUNNING_COMPILED_EXPRESSION ) ; } } } ExpressionState org.springframework.expression.spel.standard.ExpressionState = new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext ( ) , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ; java.lang.Object = this . org.springframework.expression.spel.standard.SpelNodeImpl . getValue ( org.springframework.expression.spel.standard.ExpressionState ) ; void ( org.springframework.expression.spel.standard.ExpressionState ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.standard.EvaluationException { java.lang.Object java.lang.Object ; if ( this . org.springframework.expression.spel.standard.CompiledExpression != null ) { try { return this . org.springframework.expression.spel.standard.CompiledExpression . getValue ( java.lang.Object , org.springframework.expression.spel.standard.EvaluationContext ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( this . org.springframework.expression.spel.standard.SpelParserConfiguration . getCompilerMode ( ) == SpelCompilerMode . MIXED ) { this . int = NUMBER ; this . org.springframework.expression.spel.standard.CompiledExpression = null ; } else { throw new SpelEvaluationException ( java.lang.Throwable , SpelMessage . EXCEPTION_RUNNING_COMPILED_EXPRESSION ) ; } } } ExpressionState org.springframework.expression.spel.standard.ExpressionState = new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext ( ) , org.springframework.expression.spel.standard.TypedValue ( java.lang.Object ) , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ; java.lang.Object = this . org.springframework.expression.spel.standard.SpelNodeImpl . getValue ( org.springframework.expression.spel.standard.ExpressionState ) ; void ( org.springframework.expression.spel.standard.ExpressionState ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.expression.spel.standard.EvaluationException { if ( this . org.springframework.expression.spel.standard.CompiledExpression != null ) { try { TypedValue org.springframework.expression.spel.standard.TypedValue = org.springframework.expression.spel.standard.EvaluationContext == null ? null : org.springframework.expression.spel.standard.EvaluationContext . getRootObject ( ) ; java.lang.Object java.lang.Object = this . org.springframework.expression.spel.standard.CompiledExpression . getValue ( org.springframework.expression.spel.standard.TypedValue == null ? null : org.springframework.expression.spel.standard.TypedValue . getValue ( ) , org.springframework.expression.spel.standard.EvaluationContext ) ; if ( java.lang.Class<T> == null ) { return ( T ) java.lang.Object ; } else { return ExpressionUtils . convertTypedValue ( org.springframework.expression.spel.standard.EvaluationContext ( ) , new TypedValue ( java.lang.Object ) , java.lang.Class<T> ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( this . org.springframework.expression.spel.standard.SpelParserConfiguration . getCompilerMode ( ) == SpelCompilerMode . MIXED ) { this . int = NUMBER ; this . org.springframework.expression.spel.standard.CompiledExpression = null ; } else { throw new SpelEvaluationException ( java.lang.Throwable , SpelMessage . EXCEPTION_RUNNING_COMPILED_EXPRESSION ) ; } } } ExpressionState org.springframework.expression.spel.standard.ExpressionState = new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext ( ) , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ; TypedValue org.springframework.expression.spel.standard.TypedValue = this . org.springframework.expression.spel.standard.SpelNodeImpl . getTypedValue ( org.springframework.expression.spel.standard.ExpressionState ) ; void ( org.springframework.expression.spel.standard.ExpressionState ) ; return ExpressionUtils . convertTypedValue ( org.springframework.expression.spel.standard.ExpressionState . getEvaluationContext ( ) , org.springframework.expression.spel.standard.TypedValue , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < T > T T ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.expression.spel.standard.EvaluationException { if ( this . org.springframework.expression.spel.standard.CompiledExpression != null ) { try { java.lang.Object java.lang.Object = this . org.springframework.expression.spel.standard.CompiledExpression . getValue ( java.lang.Object , null ) ; if ( java.lang.Class<T> == null ) { return ( T ) java.lang.Object ; } else { return ExpressionUtils . convertTypedValue ( org.springframework.expression.spel.standard.EvaluationContext ( ) , new TypedValue ( java.lang.Object ) , java.lang.Class<T> ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( this . org.springframework.expression.spel.standard.SpelParserConfiguration . getCompilerMode ( ) == SpelCompilerMode . MIXED ) { this . int = NUMBER ; this . org.springframework.expression.spel.standard.CompiledExpression = null ; } else { throw new SpelEvaluationException ( java.lang.Throwable , SpelMessage . EXCEPTION_RUNNING_COMPILED_EXPRESSION ) ; } } } ExpressionState org.springframework.expression.spel.standard.ExpressionState = new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext ( ) , org.springframework.expression.spel.standard.TypedValue ( java.lang.Object ) , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ; TypedValue org.springframework.expression.spel.standard.TypedValue = this . org.springframework.expression.spel.standard.SpelNodeImpl . getTypedValue ( org.springframework.expression.spel.standard.ExpressionState ) ; void ( org.springframework.expression.spel.standard.ExpressionState ) ; return ExpressionUtils . convertTypedValue ( org.springframework.expression.spel.standard.ExpressionState . getEvaluationContext ( ) , org.springframework.expression.spel.standard.TypedValue , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( EvaluationContext org.springframework.expression.spel.standard.EvaluationContext ) throws org.springframework.expression.spel.standard.EvaluationException { Assert . notNull ( org.springframework.expression.spel.standard.EvaluationContext , STRING ) ; if ( org.springframework.expression.spel.standard.CompiledExpression != null ) { try { TypedValue org.springframework.expression.spel.standard.TypedValue = org.springframework.expression.spel.standard.EvaluationContext == null ? null : org.springframework.expression.spel.standard.EvaluationContext . getRootObject ( ) ; return this . org.springframework.expression.spel.standard.CompiledExpression . getValue ( org.springframework.expression.spel.standard.TypedValue != null ? org.springframework.expression.spel.standard.TypedValue . getValue ( ) : null , org.springframework.expression.spel.standard.EvaluationContext ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( this . org.springframework.expression.spel.standard.SpelParserConfiguration . getCompilerMode ( ) == SpelCompilerMode . MIXED ) { this . int = NUMBER ; this . org.springframework.expression.spel.standard.CompiledExpression = null ; } else { throw new SpelEvaluationException ( java.lang.Throwable , SpelMessage . EXCEPTION_RUNNING_COMPILED_EXPRESSION ) ; } } } ExpressionState org.springframework.expression.spel.standard.ExpressionState = new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ; java.lang.Object java.lang.Object = this . org.springframework.expression.spel.standard.SpelNodeImpl . getValue ( org.springframework.expression.spel.standard.ExpressionState ) ; void ( org.springframework.expression.spel.standard.ExpressionState ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( EvaluationContext org.springframework.expression.spel.standard.EvaluationContext , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.standard.EvaluationException { Assert . notNull ( org.springframework.expression.spel.standard.EvaluationContext , STRING ) ; if ( this . org.springframework.expression.spel.standard.CompiledExpression != null ) { try { return this . org.springframework.expression.spel.standard.CompiledExpression . getValue ( java.lang.Object , org.springframework.expression.spel.standard.EvaluationContext ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( this . org.springframework.expression.spel.standard.SpelParserConfiguration . getCompilerMode ( ) == SpelCompilerMode . MIXED ) { this . int = NUMBER ; this . org.springframework.expression.spel.standard.CompiledExpression = null ; } else { throw new SpelEvaluationException ( java.lang.Throwable , SpelMessage . EXCEPTION_RUNNING_COMPILED_EXPRESSION ) ; } } } ExpressionState org.springframework.expression.spel.standard.ExpressionState = new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext , org.springframework.expression.spel.standard.TypedValue ( java.lang.Object ) , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ; java.lang.Object java.lang.Object = this . org.springframework.expression.spel.standard.SpelNodeImpl . getValue ( org.springframework.expression.spel.standard.ExpressionState ) ; void ( org.springframework.expression.spel.standard.ExpressionState ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < T > T T ( EvaluationContext org.springframework.expression.spel.standard.EvaluationContext , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.expression.spel.standard.EvaluationException { if ( this . org.springframework.expression.spel.standard.CompiledExpression != null ) { try { TypedValue org.springframework.expression.spel.standard.TypedValue = org.springframework.expression.spel.standard.EvaluationContext == null ? null : org.springframework.expression.spel.standard.EvaluationContext . getRootObject ( ) ; java.lang.Object java.lang.Object = this . org.springframework.expression.spel.standard.CompiledExpression . getValue ( org.springframework.expression.spel.standard.TypedValue == null ? null : org.springframework.expression.spel.standard.TypedValue . getValue ( ) , org.springframework.expression.spel.standard.EvaluationContext ) ; if ( java.lang.Class<T> != null ) { return ExpressionUtils . convertTypedValue ( org.springframework.expression.spel.standard.EvaluationContext , new TypedValue ( java.lang.Object ) , java.lang.Class<T> ) ; } else { return ( T ) java.lang.Object ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( this . org.springframework.expression.spel.standard.SpelParserConfiguration . getCompilerMode ( ) == SpelCompilerMode . MIXED ) { this . int = NUMBER ; this . org.springframework.expression.spel.standard.CompiledExpression = null ; } else { throw new SpelEvaluationException ( java.lang.Throwable , SpelMessage . EXCEPTION_RUNNING_COMPILED_EXPRESSION ) ; } } } ExpressionState org.springframework.expression.spel.standard.ExpressionState = new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ; TypedValue org.springframework.expression.spel.standard.TypedValue = this . org.springframework.expression.spel.standard.SpelNodeImpl . getTypedValue ( org.springframework.expression.spel.standard.ExpressionState ) ; void ( org.springframework.expression.spel.standard.ExpressionState ) ; return ExpressionUtils . convertTypedValue ( org.springframework.expression.spel.standard.EvaluationContext , org.springframework.expression.spel.standard.TypedValue , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < T > T T ( EvaluationContext org.springframework.expression.spel.standard.EvaluationContext , java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.expression.spel.standard.EvaluationException { if ( this . org.springframework.expression.spel.standard.CompiledExpression != null ) { try { java.lang.Object java.lang.Object = this . org.springframework.expression.spel.standard.CompiledExpression . getValue ( java.lang.Object , org.springframework.expression.spel.standard.EvaluationContext ) ; if ( java.lang.Class<T> != null ) { return ExpressionUtils . convertTypedValue ( org.springframework.expression.spel.standard.EvaluationContext , new TypedValue ( java.lang.Object ) , java.lang.Class<T> ) ; } else { return ( T ) java.lang.Object ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( this . org.springframework.expression.spel.standard.SpelParserConfiguration . getCompilerMode ( ) == SpelCompilerMode . MIXED ) { this . int = NUMBER ; this . org.springframework.expression.spel.standard.CompiledExpression = null ; } else { throw new SpelEvaluationException ( java.lang.Throwable , SpelMessage . EXCEPTION_RUNNING_COMPILED_EXPRESSION ) ; } } } ExpressionState org.springframework.expression.spel.standard.ExpressionState = new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext , org.springframework.expression.spel.standard.TypedValue ( java.lang.Object ) , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ; TypedValue org.springframework.expression.spel.standard.TypedValue = this . org.springframework.expression.spel.standard.SpelNodeImpl . getTypedValue ( org.springframework.expression.spel.standard.ExpressionState ) ; void ( org.springframework.expression.spel.standard.ExpressionState ) ; return ExpressionUtils . convertTypedValue ( org.springframework.expression.spel.standard.EvaluationContext , org.springframework.expression.spel.standard.TypedValue , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) org.springframework.expression.spel.standard.EvaluationException { return java.lang.Class<?> ( org.springframework.expression.spel.standard.EvaluationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.standard.EvaluationException { return java.lang.Class<?> ( org.springframework.expression.spel.standard.EvaluationContext ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( EvaluationContext org.springframework.expression.spel.standard.EvaluationContext ) throws org.springframework.expression.spel.standard.EvaluationException { Assert . notNull ( org.springframework.expression.spel.standard.EvaluationContext , STRING ) ; ExpressionState org.springframework.expression.spel.standard.ExpressionState = new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ; TypeDescriptor org.springframework.expression.spel.standard.TypeDescriptor = this . org.springframework.expression.spel.standard.SpelNodeImpl . getValueInternal ( org.springframework.expression.spel.standard.ExpressionState ) . getTypeDescriptor ( ) ; return ( org.springframework.expression.spel.standard.TypeDescriptor != null ? org.springframework.expression.spel.standard.TypeDescriptor . getType ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( EvaluationContext org.springframework.expression.spel.standard.EvaluationContext , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.standard.EvaluationException { ExpressionState org.springframework.expression.spel.standard.ExpressionState = new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext , org.springframework.expression.spel.standard.TypedValue ( java.lang.Object ) , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ; TypeDescriptor org.springframework.expression.spel.standard.TypeDescriptor = this . org.springframework.expression.spel.standard.SpelNodeImpl . getValueInternal ( org.springframework.expression.spel.standard.ExpressionState ) . getTypeDescriptor ( ) ; return ( org.springframework.expression.spel.standard.TypeDescriptor != null ? org.springframework.expression.spel.standard.TypeDescriptor . getType ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.standard.TypeDescriptor org.springframework.expression.spel.standard.TypeDescriptor ( ) org.springframework.expression.spel.standard.EvaluationException { return org.springframework.expression.spel.standard.TypeDescriptor ( org.springframework.expression.spel.standard.EvaluationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.standard.TypeDescriptor org.springframework.expression.spel.standard.TypeDescriptor ( java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.standard.EvaluationException { ExpressionState org.springframework.expression.spel.standard.ExpressionState = new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext ( ) , org.springframework.expression.spel.standard.TypedValue ( java.lang.Object ) , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ; return this . org.springframework.expression.spel.standard.SpelNodeImpl . getValueInternal ( org.springframework.expression.spel.standard.ExpressionState ) . getTypeDescriptor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.standard.TypeDescriptor org.springframework.expression.spel.standard.TypeDescriptor ( EvaluationContext org.springframework.expression.spel.standard.EvaluationContext ) throws org.springframework.expression.spel.standard.EvaluationException { Assert . notNull ( org.springframework.expression.spel.standard.EvaluationContext , STRING ) ; ExpressionState org.springframework.expression.spel.standard.ExpressionState = new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ; return this . org.springframework.expression.spel.standard.SpelNodeImpl . getValueInternal ( org.springframework.expression.spel.standard.ExpressionState ) . getTypeDescriptor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.standard.TypeDescriptor org.springframework.expression.spel.standard.TypeDescriptor ( EvaluationContext org.springframework.expression.spel.standard.EvaluationContext , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.standard.EvaluationException { Assert . notNull ( org.springframework.expression.spel.standard.EvaluationContext , STRING ) ; ExpressionState org.springframework.expression.spel.standard.ExpressionState = new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext , org.springframework.expression.spel.standard.TypedValue ( java.lang.Object ) , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ; return this . org.springframework.expression.spel.standard.SpelNodeImpl . getValueInternal ( org.springframework.expression.spel.standard.ExpressionState ) . getTypeDescriptor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.standard.EvaluationContext ) throws org.springframework.expression.spel.standard.EvaluationException { Assert . notNull ( org.springframework.expression.spel.standard.EvaluationContext , STRING ) ; return this . org.springframework.expression.spel.standard.SpelNodeImpl . isWritable ( new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.standard.EvaluationException { return this . org.springframework.expression.spel.standard.SpelNodeImpl . isWritable ( new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext ( ) , org.springframework.expression.spel.standard.TypedValue ( java.lang.Object ) , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.standard.EvaluationContext , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.standard.EvaluationException { Assert . notNull ( org.springframework.expression.spel.standard.EvaluationContext , STRING ) ; return this . org.springframework.expression.spel.standard.SpelNodeImpl . isWritable ( new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext , org.springframework.expression.spel.standard.TypedValue ( java.lang.Object ) , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( EvaluationContext org.springframework.expression.spel.standard.EvaluationContext , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.standard.EvaluationException { Assert . notNull ( org.springframework.expression.spel.standard.EvaluationContext , STRING ) ; this . org.springframework.expression.spel.standard.SpelNodeImpl . setValue ( new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.standard.EvaluationException { this . org.springframework.expression.spel.standard.SpelNodeImpl . setValue ( new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext ( ) , org.springframework.expression.spel.standard.TypedValue ( java.lang.Object ) , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( EvaluationContext org.springframework.expression.spel.standard.EvaluationContext , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.standard.EvaluationException { Assert . notNull ( org.springframework.expression.spel.standard.EvaluationContext , STRING ) ; this . org.springframework.expression.spel.standard.SpelNodeImpl . setValue ( new ExpressionState ( org.springframework.expression.spel.standard.EvaluationContext , org.springframework.expression.spel.standard.TypedValue ( java.lang.Object ) , this . org.springframework.expression.spel.standard.SpelParserConfiguration ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private void void ( ExpressionState org.springframework.expression.spel.standard.ExpressionState ) { this . int ++ ; SpelCompilerMode org.springframework.expression.spel.standard.SpelCompilerMode = org.springframework.expression.spel.standard.ExpressionState . getConfiguration ( ) . getCompilerMode ( ) ; if ( org.springframework.expression.spel.standard.SpelCompilerMode != SpelCompilerMode . OFF ) { if ( org.springframework.expression.spel.standard.SpelCompilerMode == SpelCompilerMode . IMMEDIATE ) { if ( this . int > NUMBER ) { boolean ( ) ; } } else { if ( this . int > int ) { boolean ( ) ; } } } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { if ( this . int > int ) { return false ; } if ( this . org.springframework.expression.spel.standard.CompiledExpression == null ) { synchronized ( this . java.lang.String ) { if ( this . org.springframework.expression.spel.standard.CompiledExpression != null ) { return true ; } SpelCompiler org.springframework.expression.spel.standard.SpelCompiler = SpelCompiler . getCompiler ( this . org.springframework.expression.spel.standard.SpelParserConfiguration . getCompilerClassLoader ( ) ) ; this . org.springframework.expression.spel.standard.CompiledExpression = org.springframework.expression.spel.standard.SpelCompiler . compile ( this . org.springframework.expression.spel.standard.SpelNodeImpl ) ; if ( this . org.springframework.expression.spel.standard.CompiledExpression == null ) { this . int ++ ; } } } return ( this . org.springframework.expression.spel.standard.CompiledExpression != null ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . org.springframework.expression.spel.standard.CompiledExpression = null ; this . int = NUMBER ; this . int = NUMBER ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.standard.SpelNode org.springframework.expression.spel.standard.SpelNode ( ) { return this . org.springframework.expression.spel.standard.SpelNodeImpl ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . org.springframework.expression.spel.standard.SpelNodeImpl . toStringAST ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.standard.TypedValue org.springframework.expression.spel.standard.TypedValue ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return TypedValue . NULL ; } else { return new TypedValue ( java.lang.Object ) ; } }  <METHOD_END>
