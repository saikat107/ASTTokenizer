<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration_.mbeanexporterhelper.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration_.mbeanexporterhelper.Int2307Tests> ( ) ) ; java.util.List<javax.management.MBeanServer> < javax.management.MBeanServer > java.util.List<javax.management.MBeanServer> = javax.management.MBeanServerFactory . java.util.ArrayList<javax.management.MBeanServer> ( null ) ; assertEquals ( NUMBER , java.util.List<javax.management.MBeanServer> . int ( ) ) ; javax.management.MBeanServer javax.management.MBeanServer = java.util.List<javax.management.MBeanServer> . javax.management.MBeanServer ( NUMBER ) ; java.util.Set<javax.management.ObjectInstance> < javax.management.ObjectInstance > java.util.Set<javax.management.ObjectInstance> = javax.management.MBeanServer . java.util.Set<javax.management.ObjectInstance> ( null , null ) ; int int = NUMBER ; int int = NUMBER ; for ( javax.management.ObjectInstance javax.management.ObjectInstance : java.util.Set<javax.management.ObjectInstance> ) { if ( javax.management.ObjectInstance . java.lang.String ( ) . boolean ( STRING ) ) { int |= NUMBER ; int ++ ; } else if ( javax.management.ObjectInstance . java.lang.String ( ) . boolean ( STRING ) ) { int |= NUMBER ; int ++ ; } } assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , int ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class . java.lang.Class<?> ( STRING ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = TestUtils . getPropertyValue ( org.springframework.integration_.mbeanexporterhelper.ClassPathXmlApplicationContext , STRING , java.util.List .class ) ; java.lang.Object java.lang.Object = null ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { if ( java.lang.Class<> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { java.lang.Object = java.lang.Object ; break; } } assertNotNull ( java.lang.Object ) ; assertTrue ( TestUtils . getPropertyValue ( java.lang.Object , STRING , java.util.Set .class ) . contains ( STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( java.lang.Object , STRING , java.util.Set .class ) . contains ( STRING ) ) ; org.springframework.integration_.mbeanexporterhelper.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration_.mbeanexporterhelper.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration_.mbeanexporterhelper.Int2307Tests> ( ) ) ; MBeanExporter org.springframework.integration_.mbeanexporterhelper.MBeanExporter = org.springframework.integration_.mbeanexporterhelper.ClassPathXmlApplicationContext . getBean ( STRING , MBeanExporter .class ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = TestUtils . getPropertyValue ( org.springframework.integration_.mbeanexporterhelper.MBeanExporter , STRING , java.util.Set .class ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class . java.lang.Class<?> ( STRING ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = TestUtils . getPropertyValue ( org.springframework.integration_.mbeanexporterhelper.ClassPathXmlApplicationContext , STRING , java.util.List .class ) ; java.lang.Object java.lang.Object = null ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { if ( java.lang.Class<> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { java.lang.Object = java.lang.Object ; break; } } assertNotNull ( java.lang.Object ) ; assertTrue ( TestUtils . getPropertyValue ( java.lang.Object , STRING , java.util.Set .class ) . contains ( STRING ) ) ; org.springframework.integration_.mbeanexporterhelper.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
