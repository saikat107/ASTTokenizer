<METHOD_START> private void ( ) {	}  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String ... java.lang.String[] ) { java.lang.System . java.lang.String ( STRING , java.lang.Boolean . java.lang.String ( true ) ) ; LogbackInitializer . initialize ( ) ; CommandRunner org.springframework.boot.cli.CommandRunner = new CommandRunner ( STRING ) ; ClassUtils . overrideThreadContextClassLoader ( java.net.URLClassLoader ( org.springframework.boot.cli.CommandRunner ) ) ; org.springframework.boot.cli.CommandRunner . addCommand ( new HelpCommand ( org.springframework.boot.cli.CommandRunner ) ) ; void ( org.springframework.boot.cli.CommandRunner ) ; org.springframework.boot.cli.CommandRunner . addCommand ( new ShellCommand ( ) ) ; org.springframework.boot.cli.CommandRunner . addCommand ( new HintCommand ( org.springframework.boot.cli.CommandRunner ) ) ; org.springframework.boot.cli.CommandRunner . setOptionCommands ( HelpCommand .class , VersionCommand .class ) ; org.springframework.boot.cli.CommandRunner . setHiddenCommands ( HintCommand .class ) ; int int = org.springframework.boot.cli.CommandRunner . runAndHandleErrors ( java.lang.String[] ) ; if ( int != NUMBER ) { java.lang.System . void ( int ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( CommandRunner org.springframework.boot.cli.CommandRunner ) { java.util.ServiceLoader<org.springframework.boot.cli.CommandFactory> < CommandFactory > java.util.ServiceLoader<org.springframework.boot.cli.CommandFactory> = java.util.ServiceLoader . java.util.ServiceLoader<org.springframework.boot.cli.CommandFactory> ( CommandFactory .class ) ; for ( CommandFactory org.springframework.boot.cli.CommandFactory : java.util.ServiceLoader<org.springframework.boot.cli.CommandFactory> ) { org.springframework.boot.cli.CommandRunner . addCommands ( org.springframework.boot.cli.CommandFactory . getCommands ( ) ) ; } }  <METHOD_END>
<METHOD_START> private static java.net.URLClassLoader java.net.URLClassLoader ( CommandRunner org.springframework.boot.cli.CommandRunner ) { return new java.net.URLClassLoader ( java.net.URL[] ( ) , org.springframework.boot.cli.CommandRunner . getClass ( ) . getClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.net.URL [] java.net.URL[] ( ) { java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> = new java.util.ArrayList<java.net.URL> <> ( ) ; java.lang.String java.lang.String = SystemPropertyUtils . resolvePlaceholders ( STRING ) ; java.io.File java.io.File = new java.io.File ( new java.io.File ( java.lang.String , STRING ) , STRING ) ; if ( java.io.File . boolean ( ) ) { for ( java.io.File java.io.File : java.io.File . java.io.File[] ( ) ) { if ( java.io.File . java.lang.String ( ) . boolean ( STRING ) ) { try { java.util.List<java.net.URL> . boolean ( java.io.File . java.net.URI ( ) . java.net.URL ( ) ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { throw new java.lang.IllegalStateException ( java.net.MalformedURLException ) ; } } } } return java.util.List<java.net.URL> . java.net.URL[] ( new java.net.URL [ java.util.List<java.net.URL> . int ( ) ] ) ; }  <METHOD_END>
