<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.web.servlet.BeansException { MutablePropertyValues org.springframework.web.servlet.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING ) ; registerSingleton ( STRING , org.springframework.web.servlet.SimpleWebApplicationContext.LocaleChecker .class ) ; addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; registerSingleton ( UiApplicationContextUtils . THEME_SOURCE_BEAN_NAME , org.springframework.web.servlet.SimpleWebApplicationContext.DummyThemeSource .class ) ; registerSingleton ( STRING , BeanNameUrlHandlerMapping .class ) ; registerSingleton ( STRING , InternalResourceViewResolver .class ) ; org.springframework.web.servlet.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING ) ; registerSingleton ( STRING , XmlViewResolver .class , org.springframework.web.servlet.MutablePropertyValues ) ; super. refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.ModelAndView org.springframework.web.servlet.ModelAndView ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse )				throws org.springframework.web.servlet.ServletException , java.io.IOException { if ( ! ( RequestContextUtils . findWebApplicationContext ( org.springframework.web.servlet.HttpServletRequest ) instanceof org.springframework.web.servlet.SimpleWebApplicationContext ) ) { throw new ServletException ( STRING ) ; } if ( ! ( RequestContextUtils . getLocaleResolver ( org.springframework.web.servlet.HttpServletRequest ) instanceof AcceptHeaderLocaleResolver ) ) { throw new ServletException ( STRING ) ; } if ( ! java.util.Locale . java.util.Locale . boolean ( RequestContextUtils . getLocale ( org.springframework.web.servlet.HttpServletRequest ) ) ) { throw new ServletException ( STRING ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> public void ( ) { this . org.springframework.web.servlet.StaticMessageSource = new StaticMessageSource ( ) ; this . org.springframework.web.servlet.StaticMessageSource . addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; this . org.springframework.web.servlet.StaticMessageSource . addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.Theme org.springframework.web.servlet.Theme ( java.lang.String java.lang.String ) { if ( AbstractThemeResolver . ORIGINAL_DEFAULT_THEME_NAME . equals ( java.lang.String ) ) { return new SimpleTheme ( AbstractThemeResolver . ORIGINAL_DEFAULT_THEME_NAME , this . org.springframework.web.servlet.StaticMessageSource ) ; } else { return null ; } }  <METHOD_END>
