<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . empty ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . isEmpty ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . of ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . isEmpty ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . empty ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . of ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . of ( STRING ) . append ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . of ( STRING ) . append ( null ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . empty ( ) . append ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . empty ( ) . andCondition ( Test .class ) . because ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . empty ( ) . andCondition ( STRING ) . because ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . empty ( ) . andCondition ( Test .class , STRING ) . because ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.boot.autoconfigure.condition.ConditionMessage> < ConditionMessage > java.util.List<org.springframework.boot.autoconfigure.condition.ConditionMessage> = new java.util.ArrayList<org.springframework.boot.autoconfigure.condition.ConditionMessage> <> ( ) ; java.util.List<org.springframework.boot.autoconfigure.condition.ConditionMessage> . add ( ConditionMessage . of ( STRING ) ) ; java.util.List<org.springframework.boot.autoconfigure.condition.ConditionMessage> . add ( ConditionMessage . of ( STRING ) ) ; ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . of ( java.util.List<org.springframework.boot.autoconfigure.condition.ConditionMessage> ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . of ( ( java.util.List<org.springframework.boot.autoconfigure.condition.ConditionMessage> < ConditionMessage > ) null ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . isEmpty ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . forCondition ( STRING ) . because ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . forCondition ( STRING ) . because ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . forCondition ( Test .class , STRING ) . because ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . forCondition ( Test .class ) . foundExactly ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . forCondition ( Test .class ) . found ( STRING , STRING ) . items ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . forCondition ( Test .class ) . found ( STRING ) . atAll ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . forCondition ( Test .class ) . found ( STRING , STRING ) . items ( STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . forCondition ( Test .class ) . found ( STRING , STRING ) . items ( Style . QUOTE , STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . forCondition ( Test .class ) . didNotFind ( STRING , STRING ) . items ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . forCondition ( Test .class ) . didNotFind ( STRING , STRING ) . items ( STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . forCondition ( Test .class ) . resultedIn ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . forCondition ( Test .class ) . notAvailable ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . forCondition ( Test .class ) . available ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionMessage . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
