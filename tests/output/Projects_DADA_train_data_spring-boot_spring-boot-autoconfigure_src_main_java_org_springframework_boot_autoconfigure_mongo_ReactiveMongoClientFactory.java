<METHOD_START> public void ( MongoProperties org.springframework.boot.autoconfigure.mongo.MongoProperties , Environment org.springframework.boot.autoconfigure.mongo.Environment ) { this . org.springframework.boot.autoconfigure.mongo.MongoProperties = org.springframework.boot.autoconfigure.mongo.MongoProperties ; this . org.springframework.boot.autoconfigure.mongo.Environment = org.springframework.boot.autoconfigure.mongo.Environment ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.autoconfigure.mongo.MongoClient org.springframework.boot.autoconfigure.mongo.MongoClient ( MongoClientSettings org.springframework.boot.autoconfigure.mongo.MongoClientSettings ) { java.lang.Integer java.lang.Integer = java.lang.Integer ( ) ; if ( java.lang.Integer != null ) { return org.springframework.boot.autoconfigure.mongo.MongoClient ( org.springframework.boot.autoconfigure.mongo.MongoClientSettings , java.lang.Integer ) ; } return org.springframework.boot.autoconfigure.mongo.MongoClient ( org.springframework.boot.autoconfigure.mongo.MongoClientSettings ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Integer java.lang.Integer ( ) { if ( this . org.springframework.boot.autoconfigure.mongo.Environment != null ) { java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.mongo.Environment . getProperty ( STRING ) ; if ( java.lang.String != null ) { return java.lang.Integer . java.lang.Integer ( java.lang.String ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.mongo.MongoClient org.springframework.boot.autoconfigure.mongo.MongoClient ( MongoClientSettings org.springframework.boot.autoconfigure.mongo.MongoClientSettings , int int ) { Builder org.springframework.boot.autoconfigure.mongo.Builder = org.springframework.boot.autoconfigure.mongo.Builder ( org.springframework.boot.autoconfigure.mongo.MongoClientSettings ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.mongo.MongoProperties . getHost ( ) == null ? STRING : this . org.springframework.boot.autoconfigure.mongo.MongoProperties . getHost ( ) ; ClusterSettings org.springframework.boot.autoconfigure.mongo.ClusterSettings = ClusterSettings . builder ( ) . hosts ( java.util.Collections . java.util.List ( new ServerAddress ( java.lang.String , int ) ) ) . build ( ) ; org.springframework.boot.autoconfigure.mongo.Builder . clusterSettings ( org.springframework.boot.autoconfigure.mongo.ClusterSettings ) ; return MongoClients . create ( org.springframework.boot.autoconfigure.mongo.Builder . build ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.mongo.MongoClient org.springframework.boot.autoconfigure.mongo.MongoClient ( MongoClientSettings org.springframework.boot.autoconfigure.mongo.MongoClientSettings ) { if ( boolean ( ) || boolean ( ) ) { if ( this . org.springframework.boot.autoconfigure.mongo.MongoProperties . getUri ( ) != null ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } Builder org.springframework.boot.autoconfigure.mongo.Builder = org.springframework.boot.autoconfigure.mongo.Builder ( org.springframework.boot.autoconfigure.mongo.MongoClientSettings ) ; if ( boolean ( ) ) { java.util.List<org.springframework.boot.autoconfigure.mongo.MongoCredential> < MongoCredential > java.util.List<org.springframework.boot.autoconfigure.mongo.MongoCredential> = new java.util.ArrayList<org.springframework.boot.autoconfigure.mongo.MongoCredential> <> ( ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.mongo.MongoProperties . getAuthenticationDatabase ( ) == null ? this . org.springframework.boot.autoconfigure.mongo.MongoProperties . getMongoClientDatabase ( ) : this . org.springframework.boot.autoconfigure.mongo.MongoProperties . getAuthenticationDatabase ( ) ; java.util.List<org.springframework.boot.autoconfigure.mongo.MongoCredential> . add ( MongoCredential . createCredential ( this . org.springframework.boot.autoconfigure.mongo.MongoProperties . getUsername ( ) , java.lang.String , this . org.springframework.boot.autoconfigure.mongo.MongoProperties . getPassword ( ) ) ) ; org.springframework.boot.autoconfigure.mongo.Builder . credentialList ( java.util.List<org.springframework.boot.autoconfigure.mongo.MongoCredential> ) ; } java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.mongo.MongoProperties . getHost ( ) == null ? STRING : this . org.springframework.boot.autoconfigure.mongo.MongoProperties . getHost ( ) ; int int = this . org.springframework.boot.autoconfigure.mongo.MongoProperties . getPort ( ) != null ? this . org.springframework.boot.autoconfigure.mongo.MongoProperties . getPort ( ) : MongoProperties . DEFAULT_PORT ; ClusterSettings org.springframework.boot.autoconfigure.mongo.ClusterSettings = ClusterSettings . builder ( ) . hosts ( java.util.Collections . java.util.List ( new ServerAddress ( java.lang.String , int ) ) ) . build ( ) ; org.springframework.boot.autoconfigure.mongo.Builder . clusterSettings ( org.springframework.boot.autoconfigure.mongo.ClusterSettings ) ; return MongoClients . create ( org.springframework.boot.autoconfigure.mongo.Builder . build ( ) ) ; } ConnectionString org.springframework.boot.autoconfigure.mongo.ConnectionString = new ConnectionString ( this . org.springframework.boot.autoconfigure.mongo.MongoProperties . determineUri ( ) ) ; return MongoClients . create ( org.springframework.boot.autoconfigure.mongo.Builder ( org.springframework.boot.autoconfigure.mongo.MongoClientSettings , org.springframework.boot.autoconfigure.mongo.ConnectionString ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.mongo.Builder org.springframework.boot.autoconfigure.mongo.Builder ( MongoClientSettings org.springframework.boot.autoconfigure.mongo.MongoClientSettings , ConnectionString org.springframework.boot.autoconfigure.mongo.ConnectionString ) { Builder org.springframework.boot.autoconfigure.mongo.Builder = org.springframework.boot.autoconfigure.mongo.Builder ( org.springframework.boot.autoconfigure.mongo.MongoClientSettings ) . clusterSettings ( ClusterSettings . builder ( ) . applyConnectionString ( org.springframework.boot.autoconfigure.mongo.ConnectionString ) . build ( ) ) . connectionPoolSettings ( ConnectionPoolSettings . builder ( ) . applyConnectionString ( org.springframework.boot.autoconfigure.mongo.ConnectionString ) . build ( ) ) . serverSettings ( ServerSettings . builder ( ) . applyConnectionString ( org.springframework.boot.autoconfigure.mongo.ConnectionString ) . build ( ) ) . credentialList ( org.springframework.boot.autoconfigure.mongo.ConnectionString . getCredentialList ( ) ) . sslSettings ( SslSettings . builder ( ) . applyConnectionString ( org.springframework.boot.autoconfigure.mongo.ConnectionString ) . build ( ) ) . socketSettings ( SocketSettings . builder ( ) . applyConnectionString ( org.springframework.boot.autoconfigure.mongo.ConnectionString ) . build ( ) ) ; if ( org.springframework.boot.autoconfigure.mongo.ConnectionString . getReadPreference ( ) != null ) { org.springframework.boot.autoconfigure.mongo.Builder . readPreference ( org.springframework.boot.autoconfigure.mongo.ConnectionString . getReadPreference ( ) ) ; } if ( org.springframework.boot.autoconfigure.mongo.ConnectionString . getReadConcern ( ) != null ) { org.springframework.boot.autoconfigure.mongo.Builder . readConcern ( org.springframework.boot.autoconfigure.mongo.ConnectionString . getReadConcern ( ) ) ; } if ( org.springframework.boot.autoconfigure.mongo.ConnectionString . getWriteConcern ( ) != null ) { org.springframework.boot.autoconfigure.mongo.Builder . writeConcern ( org.springframework.boot.autoconfigure.mongo.ConnectionString . getWriteConcern ( ) ) ; } if ( org.springframework.boot.autoconfigure.mongo.ConnectionString . getApplicationName ( ) != null ) { org.springframework.boot.autoconfigure.mongo.Builder . applicationName ( org.springframework.boot.autoconfigure.mongo.ConnectionString . getApplicationName ( ) ) ; } return org.springframework.boot.autoconfigure.mongo.Builder ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return this . org.springframework.boot.autoconfigure.mongo.MongoProperties . getHost ( ) != null || this . org.springframework.boot.autoconfigure.mongo.MongoProperties . getPort ( ) != null ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return this . org.springframework.boot.autoconfigure.mongo.MongoProperties . getUsername ( ) != null && this . org.springframework.boot.autoconfigure.mongo.MongoProperties . getPassword ( ) != null ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.mongo.Builder org.springframework.boot.autoconfigure.mongo.Builder ( MongoClientSettings org.springframework.boot.autoconfigure.mongo.MongoClientSettings ) { if ( org.springframework.boot.autoconfigure.mongo.MongoClientSettings == null ) { return MongoClientSettings . builder ( ) ; } return MongoClientSettings . builder ( org.springframework.boot.autoconfigure.mongo.MongoClientSettings ) ; }  <METHOD_END>
