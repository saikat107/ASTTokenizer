<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; FileSystemUtils . deleteRecursively ( java.io.File ) ; java.io.File . boolean ( ) ; java.util.jar.Manifest java.util.jar.Manifest = new java.util.jar.Manifest ( ) ; java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.Object ( java.util.jar.Attributes . java.util.jar.Attributes.Name . java.util.jar.Attributes.Name , STRING ) ; java.util.jar.JarOutputStream java.util.jar.JarOutputStream = new java.util.jar.JarOutputStream ( new java.io.FileOutputStream ( new java.io.File ( java.io.File , STRING ) ) , java.util.jar.Manifest ) ; FileSystemUtils . copyRecursively ( new java.io.File ( STRING ) , new java.io.File ( STRING ) ) ; void ( java.util.jar.JarOutputStream , new java.io.File ( STRING ) , new java.io.File ( STRING ) ) ; java.util.jar.JarOutputStream . void ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; for ( java.io.File java.io.File : new java.io.File ( STRING ) . java.io.File[] ( ) ) { java.util.List<java.lang.String> . boolean ( java.io.File . java.lang.String ( ) ) ; } java.lang.String java.lang.String = StringUtils . collectionToDelimitedString ( java.util.List<java.lang.String> , java.io.File . java.lang.String ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.jar.JarOutputStream java.util.jar.JarOutputStream , java.io.File java.io.File , java.io.File java.io.File )			throws java.io.IOException { for ( java.io.File java.io.File : java.io.File . java.io.File[] ( ) ) { if ( java.io.File . boolean ( ) ) { void ( java.util.jar.JarOutputStream , java.io.File , java.io.File ) ; } java.util.jar.JarOutputStream . void ( new java.util.zip.ZipEntry ( java.io.File . java.lang.String ( ) . java.lang.String ( java.io.File . java.lang.String ( ) . int ( ) + NUMBER ) . java.lang.String ( STRING , STRING ) + ( java.io.File . boolean ( ) ? STRING : STRING ) ) ) ; if ( java.io.File . boolean ( ) ) { StreamUtils . copy ( new java.io.FileInputStream ( java.io.File ) , java.util.jar.JarOutputStream ) ; } java.util.jar.JarOutputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
