<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.Server = new Server ( NUMBER ) ; ServletContextHandler org.springframework.web.servlet.mvc.method.annotation.ServletContextHandler = new ServletContextHandler ( ) ; org.springframework.web.servlet.mvc.method.annotation.ServletContextHandler . setContextPath ( STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests.CommonsMultipartResolverTestConfig .class ; ServletHolder org.springframework.web.servlet.mvc.method.annotation.ServletHolder = new ServletHolder ( DispatcherServlet .class ) ; org.springframework.web.servlet.mvc.method.annotation.ServletHolder . setInitParameter ( STRING , java.lang.Class<> . java.lang.String ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ServletHolder . setInitParameter ( STRING , AnnotationConfigWebApplicationContext .class . java.lang.String ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ServletContextHandler . addServlet ( org.springframework.web.servlet.mvc.method.annotation.ServletHolder , STRING ) ; java.lang.Class<?> = org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests.StandardMultipartResolverTestConfig .class ; ServletHolder org.springframework.web.servlet.mvc.method.annotation.ServletHolder = new ServletHolder ( DispatcherServlet .class ) ; org.springframework.web.servlet.mvc.method.annotation.ServletHolder . setInitParameter ( STRING , java.lang.Class<> . java.lang.String ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ServletHolder . setInitParameter ( STRING , AnnotationConfigWebApplicationContext .class . java.lang.String ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ServletHolder . getRegistration ( ) . setMultipartConfig ( new MultipartConfigElement ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.ServletContextHandler . addServlet ( org.springframework.web.servlet.mvc.method.annotation.ServletHolder , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.Server . setHandler ( org.springframework.web.servlet.mvc.method.annotation.ServletContextHandler ) ; org.springframework.web.servlet.mvc.method.annotation.Server . start ( ) ; Connector [] org.springframework.web.servlet.mvc.method.annotation.Connector[] = org.springframework.web.servlet.mvc.method.annotation.Server . getConnectors ( ) ; NetworkConnector org.springframework.web.servlet.mvc.method.annotation.NetworkConnector = ( NetworkConnector ) org.springframework.web.servlet.mvc.method.annotation.Connector[] [ NUMBER ] ; java.lang.String = STRING + org.springframework.web.servlet.mvc.method.annotation.NetworkConnector . getLocalPort ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) java.lang.Exception { if ( org.springframework.web.servlet.mvc.method.annotation.Server != null ) { org.springframework.web.servlet.mvc.method.annotation.Server . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { ByteArrayHttpMessageConverter org.springframework.web.servlet.mvc.method.annotation.ByteArrayHttpMessageConverter = new ByteArrayHttpMessageConverter ( ) ; org.springframework.web.servlet.mvc.method.annotation.ByteArrayHttpMessageConverter . setSupportedMediaTypes ( java.util.Collections . java.util.List ( MediaType . APPLICATION_JSON ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( NUMBER ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( org.springframework.web.servlet.mvc.method.annotation.ByteArrayHttpMessageConverter ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new ByteArrayHttpMessageConverter ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new ResourceHttpMessageConverter ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; AllEncompassingFormHttpMessageConverter org.springframework.web.servlet.mvc.method.annotation.AllEncompassingFormHttpMessageConverter = new AllEncompassingFormHttpMessageConverter ( ) ; org.springframework.web.servlet.mvc.method.annotation.AllEncompassingFormHttpMessageConverter . setPartConverters ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; org.springframework.web.servlet.mvc.method.annotation.RestTemplate = new RestTemplate ( new HttpComponentsClientHttpRequestFactory ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.RestTemplate . setMessageConverters ( java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.AllEncompassingFormHttpMessageConverter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.lang.String + STRING , STRING ) ; void ( java.lang.String + STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.lang.String + STRING , STRING ) ; void ( java.lang.String + STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { byte [] byte[] = MimeTypeUtils . generateMultipartBoundary ( ) ; java.lang.String java.lang.String = new java.lang.String ( byte[] , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , java.lang.String ) ; java.lang.String java.lang.String = STRING + java.lang.String + STRING + STRING + STRING + STRING + STRING + STRING + STRING + java.lang.String + STRING ; RequestEntity < byte [] > org.springframework.web.servlet.mvc.method.annotation.RequestEntity<byte[]> = RequestEntity . post ( new java.net.URI ( java.lang.String + STRING ) ) . contentType ( new MediaType ( MediaType . MULTIPART_FORM_DATA , java.util.Map<java.lang.String,java.lang.String> ) ) . body ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; ByteArrayHttpMessageConverter org.springframework.web.servlet.mvc.method.annotation.ByteArrayHttpMessageConverter = new ByteArrayHttpMessageConverter ( ) ; org.springframework.web.servlet.mvc.method.annotation.ByteArrayHttpMessageConverter . setSupportedMediaTypes ( java.util.Collections . java.util.List ( MediaType . MULTIPART_FORM_DATA ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.RestTemplate . setMessageConverters ( java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.ByteArrayHttpMessageConverter ) ) ; ResponseEntity < java.lang.Void > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Void> = org.springframework.web.servlet.mvc.method.annotation.RestTemplate . exchange ( org.springframework.web.servlet.mvc.method.annotation.RequestEntity<byte[]> , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.Object> = new LinkedMultiValueMap <> ( ) ; org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , new HttpEntity <> ( new org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests.TestData ( java.lang.String ) ) ) ; org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests> ( ) ) ) ; org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , new HttpEntity <> ( new byte [ NUMBER ] ) ) ; HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . setContentType ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , new HttpEntity <> ( new byte [] { ( byte ) NUMBER } , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders ) ) ; java.net.URI java.net.URI = org.springframework.web.servlet.mvc.method.annotation.RestTemplate . postForLocation ( java.lang.String , org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.Object> ) ; assertEquals ( STRING + java.lang.String + STRING , java.net.URI . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests.RequestPartTestController org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests.RequestPartTestController ( ) { return new org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests.RequestPartTestController ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.mvc.method.annotation.MultipartResolver org.springframework.web.servlet.mvc.method.annotation.MultipartResolver ( ) { return new CommonsMultipartResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.mvc.method.annotation.MultipartResolver org.springframework.web.servlet.mvc.method.annotation.MultipartResolver ( ) { return new StandardServletMultipartResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = POST , consumes = { STRING , STRING } ) public org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( @ RequestPart ( name = STRING ) org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests.TestData org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests.TestData , @ RequestPart ( STRING ) java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.MultipartFile> < MultipartFile > java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.MultipartFile> , @ RequestPart ( name = STRING , required = false ) org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests.TestData org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests.TestData , @ RequestPart ( name = STRING ) byte [] byte[] ) { Assert . assertArrayEquals ( new byte [] { ( byte ) NUMBER } , byte[] ) ; java.lang.String java.lang.String = STRING + org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests.TestData . java.lang.String ( ) + STRING + java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.MultipartFile> . get ( ) . getOriginalFilename ( ) ; HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . setLocation ( java.net.URI . java.net.URI ( java.lang.String ) ) ; return new ResponseEntity <> ( org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus . CREATED ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = POST , consumes = STRING ) public org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Void> < java.lang.Void > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Void> ( @ RequestPart ( STRING ) MultipartFile org.springframework.web.servlet.mvc.method.annotation.MultipartFile ) { assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MultipartFile . getOriginalFilename ( ) ) ; return ResponseEntity . ok ( ) . build ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
