<METHOD_START> protected org.springframework.integration.ip.tcp.TcpConnection org.springframework.integration.ip.tcp.TcpConnection ( Message < ? > org.springframework.integration.ip.tcp.Message<?> ) { TcpConnection org.springframework.integration.ip.tcp.TcpConnection = null ; Assert . notNull ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory , STRING ) ; try { org.springframework.integration.ip.tcp.TcpConnection = this . org.springframework.integration.ip.tcp.AbstractConnectionFactory . getConnection ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING , java.lang.Exception ) ; throw new MessageHandlingException ( org.springframework.integration.ip.tcp.Message<> , STRING , java.lang.Exception ) ; } return org.springframework.integration.ip.tcp.TcpConnection ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final Message < ? > org.springframework.integration.ip.tcp.Message<?> ) throws org.springframework.integration.ip.tcp.MessageHandlingException { if ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory != null ) { java.lang.Object java.lang.Object = org.springframework.integration.ip.tcp.Message<> . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID ) ; TcpConnection org.springframework.integration.ip.tcp.TcpConnection = null ; if ( java.lang.Object != null ) { org.springframework.integration.ip.tcp.TcpConnection = this . java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.TcpConnection> . get ( java.lang.Object ) ; } if ( org.springframework.integration.ip.tcp.TcpConnection != null ) { try { org.springframework.integration.ip.tcp.TcpConnection . send ( org.springframework.integration.ip.tcp.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING , java.lang.Exception ) ; org.springframework.integration.ip.tcp.TcpConnection . close ( ) ; if ( java.lang.Exception instanceof MessageHandlingException ) { throw ( MessageHandlingException ) java.lang.Exception ; } else { throw new MessageHandlingException ( org.springframework.integration.ip.tcp.Message<> , STRING , java.lang.Exception ) ; } } finally { if ( this . boolean ) { org.springframework.integration.ip.tcp.TcpConnection . close ( ) ; } } } else { logger . error ( STRING + org.springframework.integration.ip.tcp.Message<> ) ; MessageHandlingException org.springframework.integration.ip.tcp.MessageHandlingException = new MessageHandlingException ( org.springframework.integration.ip.tcp.Message<> , STRING ) ; void ( org.springframework.integration.ip.tcp.MessageHandlingException , ( java.lang.String ) java.lang.Object ) ; throw org.springframework.integration.ip.tcp.MessageHandlingException ; } return; } else { TcpConnection org.springframework.integration.ip.tcp.TcpConnection = null ; try { org.springframework.integration.ip.tcp.TcpConnection = org.springframework.integration.ip.tcp.TcpConnection ( org.springframework.integration.ip.tcp.Message<> ) ; } catch ( MessageHandlingException org.springframework.integration.ip.tcp.MessageHandlingException ) { if ( org.springframework.integration.ip.tcp.MessageHandlingException . getCause ( ) instanceof java.io.IOException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING , org.springframework.integration.ip.tcp.MessageHandlingException ) ; } org.springframework.integration.ip.tcp.TcpConnection = org.springframework.integration.ip.tcp.TcpConnection ( org.springframework.integration.ip.tcp.Message<> ) ; } else { throw org.springframework.integration.ip.tcp.MessageHandlingException ; } } finally { if ( org.springframework.integration.ip.tcp.TcpConnection != null && this . boolean && this . org.springframework.integration.ip.tcp.AbstractConnectionFactory . getListener ( ) == null ) { org.springframework.integration.ip.tcp.TcpConnection . close ( ) ; } } } }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.ip.tcp.TcpConnection org.springframework.integration.ip.tcp.TcpConnection ( Message < ? > org.springframework.integration.ip.tcp.Message<?> ) { TcpConnection org.springframework.integration.ip.tcp.TcpConnection = null ; try { org.springframework.integration.ip.tcp.TcpConnection = org.springframework.integration.ip.tcp.TcpConnection ( org.springframework.integration.ip.tcp.Message<> ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.integration.ip.tcp.TcpConnection . getConnectionId ( ) ) ; } org.springframework.integration.ip.tcp.TcpConnection . send ( org.springframework.integration.ip.tcp.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.String java.lang.String = null ; if ( org.springframework.integration.ip.tcp.TcpConnection != null ) { java.lang.String = org.springframework.integration.ip.tcp.TcpConnection . getConnectionId ( ) ; } if ( java.lang.Exception instanceof MessageHandlingException ) { throw ( MessageHandlingException ) java.lang.Exception ; } throw new MessageHandlingException ( org.springframework.integration.ip.tcp.Message<> , STRING + java.lang.String , java.lang.Exception ) ; } return org.springframework.integration.ip.tcp.TcpConnection ; }  <METHOD_END>
<METHOD_START> private void void ( MessageHandlingException org.springframework.integration.ip.tcp.MessageHandlingException , java.lang.String java.lang.String ) { AbstractConnectionFactory org.springframework.integration.ip.tcp.AbstractConnectionFactory = this . org.springframework.integration.ip.tcp.AbstractConnectionFactory != null ? this . org.springframework.integration.ip.tcp.AbstractConnectionFactory : this . org.springframework.integration.ip.tcp.AbstractConnectionFactory ; ApplicationEventPublisher org.springframework.integration.ip.tcp.ApplicationEventPublisher = org.springframework.integration.ip.tcp.AbstractConnectionFactory . getApplicationEventPublisher ( ) ; if ( org.springframework.integration.ip.tcp.ApplicationEventPublisher != null ) { org.springframework.integration.ip.tcp.ApplicationEventPublisher . publishEvent ( new TcpConnectionFailedCorrelationEvent ( this , java.lang.String , org.springframework.integration.ip.tcp.MessageHandlingException ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( AbstractConnectionFactory org.springframework.integration.ip.tcp.AbstractConnectionFactory ) { if ( org.springframework.integration.ip.tcp.AbstractConnectionFactory instanceof AbstractClientConnectionFactory ) { this . org.springframework.integration.ip.tcp.AbstractConnectionFactory = org.springframework.integration.ip.tcp.AbstractConnectionFactory ; } else { this . org.springframework.integration.ip.tcp.AbstractConnectionFactory = org.springframework.integration.ip.tcp.AbstractConnectionFactory ; org.springframework.integration.ip.tcp.AbstractConnectionFactory . registerSender ( this ) ; } this . boolean = org.springframework.integration.ip.tcp.AbstractConnectionFactory . isSingleUse ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.TcpConnection ) { this . java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.TcpConnection> . put ( org.springframework.integration.ip.tcp.TcpConnection . getConnectionId ( ) , org.springframework.integration.ip.tcp.TcpConnection ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.TcpConnection ) { this . java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.TcpConnection> . remove ( org.springframework.integration.ip.tcp.TcpConnection . getConnectionId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; if ( this . boolean ) { Assert . notNull ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory , STRING ) ; Assert . isTrue ( ! this . org.springframework.integration.ip.tcp.AbstractConnectionFactory . isSingleUse ( ) , STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( ! this . boolean ) { this . boolean = true ; if ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory != null ) { this . org.springframework.integration.ip.tcp.AbstractConnectionFactory . start ( ) ; } if ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory != null ) { this . org.springframework.integration.ip.tcp.AbstractConnectionFactory . start ( ) ; } if ( this . boolean ) { ClientModeConnectionManager org.springframework.integration.ip.tcp.ClientModeConnectionManager = new ClientModeConnectionManager ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory ) ; this . org.springframework.integration.ip.tcp.ClientModeConnectionManager = org.springframework.integration.ip.tcp.ClientModeConnectionManager ; Assert . state ( this . getTaskScheduler ( ) != null , STRING ) ; this . java.util.concurrent.ScheduledFuture<?> = this . getTaskScheduler ( ) . scheduleAtFixedRate ( org.springframework.integration.ip.tcp.ClientModeConnectionManager , this . long ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( this . boolean ) { this . boolean = false ; if ( this . java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; } this . org.springframework.integration.ip.tcp.ClientModeConnectionManager = null ; if ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory != null ) { this . org.springframework.integration.ip.tcp.AbstractConnectionFactory . stop ( ) ; } if ( this . org.springframework.integration.ip.tcp.AbstractConnectionFactory != null ) { this . org.springframework.integration.ip.tcp.AbstractConnectionFactory . stop ( ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.ip.tcp.ConnectionFactory org.springframework.integration.ip.tcp.ConnectionFactory ( ) { return this . org.springframework.integration.ip.tcp.AbstractConnectionFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.ip.tcp.ConnectionFactory org.springframework.integration.ip.tcp.ConnectionFactory ( ) { return this . org.springframework.integration.ip.tcp.AbstractConnectionFactory ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.TcpConnection> < java.lang.String , TcpConnection > java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.TcpConnection> ( ) { return this . java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.TcpConnection> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TaskScheduler org.springframework.integration.ip.tcp.TaskScheduler ) { super. setTaskScheduler ( org.springframework.integration.ip.tcp.TaskScheduler ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { if ( this . boolean && this . org.springframework.integration.ip.tcp.ClientModeConnectionManager != null ) { return this . org.springframework.integration.ip.tcp.ClientModeConnectionManager . isConnected ( ) ; } else { return false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean && this . boolean && this . org.springframework.integration.ip.tcp.ClientModeConnectionManager != null ) { this . org.springframework.integration.ip.tcp.ClientModeConnectionManager . run ( ) ; } }  <METHOD_END>
