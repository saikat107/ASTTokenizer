<METHOD_START> private void ( java.util.List<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > java.util.List<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> , org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener , TaskExecutor org.springframework.statemachine.recipes.tasks.TaskExecutor , StateMachinePersist < java.lang.String , java.lang.String , java.lang.Void > org.springframework.statemachine.recipes.tasks.StateMachinePersist<java.lang.String,java.lang.String,java.lang.Void> ) { this . org.springframework.statemachine.recipes.tasks.StateMachinePersist<java.lang.String,java.lang.String,java.lang.Void> = org.springframework.statemachine.recipes.tasks.StateMachinePersist<java.lang.String,java.lang.String,java.lang.Void> ; try { org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> ( java.util.List<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> , org.springframework.statemachine.recipes.tasks.TaskExecutor ) ; if ( org.springframework.statemachine.recipes.tasks.StateMachinePersist<java.lang.String,java.lang.String,java.lang.Void> != null ) { final org.springframework.statemachine.recipes.tasks.TasksHandler.LocalStateMachineInterceptor org.springframework.statemachine.recipes.tasks.TasksHandler.LocalStateMachineInterceptor = new org.springframework.statemachine.recipes.tasks.TasksHandler.LocalStateMachineInterceptor ( org.springframework.statemachine.recipes.tasks.StateMachinePersist<java.lang.String,java.lang.String,java.lang.Void> ) ; org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> . getStateMachineAccessor ( ) . doWithAllRegions ( new StateMachineFunction < StateMachineAccess < java.lang.String , java.lang.String > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateMachineAccess<java.lang.String,java.lang.String> ) { org.springframework.statemachine.recipes.tasks.StateMachineAccess<java.lang.String,java.lang.String> . addStateMachineInterceptor ( org.springframework.statemachine.recipes.tasks.TasksHandler.LocalStateMachineInterceptor ) ; } } ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new StateMachineException ( STRING , java.lang.Exception ) ; } if ( org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener != null ) { void ( org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateMachineAccess<java.lang.String,java.lang.String> ) { org.springframework.statemachine.recipes.tasks.StateMachineAccess<java.lang.String,java.lang.String> . addStateMachineInterceptor ( org.springframework.statemachine.recipes.tasks.TasksHandler.LocalStateMachineInterceptor ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> . sendEvent ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> . sendEvent ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> . sendEvent ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( org.springframework.statemachine.recipes.tasks.StateMachinePersist<java.lang.String,java.lang.String,java.lang.Void> == null ) { return; } final StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateMachineContext<java.lang.String,java.lang.String> ; try { org.springframework.statemachine.recipes.tasks.StateMachineContext<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.tasks.StateMachinePersist<java.lang.String,java.lang.String,java.lang.Void> . read ( null ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new StateMachineException ( STRING , java.lang.Exception ) ; } org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> . stop ( ) ; org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> . getStateMachineAccessor ( ) . doWithAllRegions ( new StateMachineFunction < StateMachineAccess < java.lang.String , java.lang.String > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateMachineAccess<java.lang.String,java.lang.String> ) { org.springframework.statemachine.recipes.tasks.StateMachineAccess<java.lang.String,java.lang.String> . resetStateMachine ( org.springframework.statemachine.recipes.tasks.StateMachineContext<java.lang.String,java.lang.String> ) ; } } ) ; org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> . start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateMachineAccess<java.lang.String,java.lang.String> ) { org.springframework.statemachine.recipes.tasks.StateMachineAccess<java.lang.String,java.lang.String> . resetStateMachine ( org.springframework.statemachine.recipes.tasks.StateMachineContext<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener ) { this . org.springframework.statemachine.recipes.tasks.TasksHandler.CompositeTasksListener . register ( org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener ) { this . org.springframework.statemachine.recipes.tasks.TasksHandler.CompositeTasksListener . unregister ( org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> ( ) { return org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public static org.springframework.statemachine.recipes.tasks.TasksHandler.Builder org.springframework.statemachine.recipes.tasks.TasksHandler.Builder ( ) { return new org.springframework.statemachine.recipes.tasks.TasksHandler.Builder ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> ( ) . getExtendedState ( ) . getVariables ( ) ; for ( java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { if ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.String && ( ( java.lang.String ) java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) . boolean ( java.lang.String ) ) { if ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.Integer ) { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Integer < NUMBER ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) , NUMBER ) ; } } } } }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> ( java.util.List<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > java.util.List<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> , TaskExecutor org.springframework.statemachine.recipes.tasks.TaskExecutor )			throws java.lang.Exception { StateMachineBuilder . StateMachineBuilder < java.lang.String , java.lang.String > builder = StateMachineBuilder . builder ( ) ; int int = int ( java.util.List<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> ) ; builder . configureConfiguration ( ) . withConfiguration ( ) . taskExecutor ( org.springframework.statemachine.recipes.tasks.TaskExecutor != null ? org.springframework.statemachine.recipes.tasks.TaskExecutor : org.springframework.statemachine.recipes.tasks.TaskExecutor ( int ) ) ; StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateMachineStateConfigurer<java.lang.String,java.lang.String> = builder . configureStates ( ) ; StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> = builder . configureTransitions ( ) ; org.springframework.statemachine.recipes.tasks.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( java.lang.String ) . fork ( java.lang.String ) . state ( java.lang.String , org.springframework.statemachine.recipes.tasks.TasksHandler.TasksEntryAction ( ) , null ) . join ( java.lang.String ) . choice ( java.lang.String ) . state ( java.lang.String ) ; org.springframework.statemachine.recipes.tasks.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( java.lang.String ) . target ( java.lang.String ) . event ( java.lang.String ) . and ( ) . withFork ( ) . source ( java.lang.String ) . target ( java.lang.String ) ; java.util.Iterator<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> < Node < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > > java.util.Iterator<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> = java.util.Iterator<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> ( java.util.List<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> ) ; java.lang.String java.lang.String = null ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; while ( java.util.Iterator<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> . hasNext ( ) ) { Node < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> = java.util.Iterator<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> . next ( ) ; if ( org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> . getData ( ) == null ) { break; } java.lang.String java.lang.String = java.lang.String + org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> . getData ( ) . id . toString ( ) + java.lang.String ; java.lang.String java.lang.String = java.lang.String + org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> . getData ( ) . id . toString ( ) ; java.lang.String = org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> . getData ( ) . parent != null ? java.lang.String + org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> . getData ( ) . parent . toString ( ) : java.lang.String ; org.springframework.statemachine.recipes.tasks.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . parent ( java.lang.String ) . initial ( java.lang.String ) . state ( java.lang.String , org.springframework.statemachine.recipes.tasks.TasksHandler.LocalRunnableAction ( org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> . getData ( ) . runnable , org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> . getData ( ) . id . toString ( ) ) , null ) ; if ( org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> . getChildren ( ) . isEmpty ( ) ) { java.util.Collection<java.lang.String> . boolean ( java.lang.String ) ; } org.springframework.statemachine.recipes.tasks.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . state ( java.lang.String ) . source ( java.lang.String ) . target ( java.lang.String ) ; } org.springframework.statemachine.recipes.tasks.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . parent ( java.lang.String ) . initial ( java.lang.String ) . state ( java.lang.String , org.springframework.statemachine.recipes.tasks.Action<java.lang.String,java.lang.String> ( ) , null ) . state ( java.lang.String ) ; org.springframework.statemachine.recipes.tasks.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withJoin ( ) . sources ( java.util.Collection<java.lang.String> ) . target ( java.lang.String ) . and ( ) . withExternal ( ) . source ( java.lang.String ) . target ( java.lang.String ) . and ( ) . withChoice ( ) . source ( java.lang.String ) . first ( java.lang.String , org.springframework.statemachine.recipes.tasks.Guard<java.lang.String,java.lang.String> ( ) ) . last ( java.lang.String ) . and ( ) . withExternal ( ) . source ( java.lang.String ) . target ( java.lang.String ) . event ( java.lang.String ) . action ( org.springframework.statemachine.recipes.tasks.Action<java.lang.String,java.lang.String> ( ) ) . and ( ) . withExternal ( ) . source ( java.lang.String ) . target ( java.lang.String ) . event ( java.lang.String ) . and ( ) . withInternal ( ) . source ( java.lang.String ) . action ( org.springframework.statemachine.recipes.tasks.Action<java.lang.String,java.lang.String> ( ) ) . event ( java.lang.String ) ; return builder . build ( ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.statemachine.recipes.tasks.TaskExecutor org.springframework.statemachine.recipes.tasks.TaskExecutor ( int int ) { ThreadPoolTaskExecutor org.springframework.statemachine.recipes.tasks.ThreadPoolTaskExecutor = new ThreadPoolTaskExecutor ( ) ; org.springframework.statemachine.recipes.tasks.ThreadPoolTaskExecutor . afterPropertiesSet ( ) ; org.springframework.statemachine.recipes.tasks.ThreadPoolTaskExecutor . setCorePoolSize ( int ) ; return org.springframework.statemachine.recipes.tasks.ThreadPoolTaskExecutor ; }  <METHOD_END>
<METHOD_START> private static int int ( java.util.List<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > java.util.List<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> ) { Tree < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > org.springframework.statemachine.recipes.tasks.Tree<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> = new Tree < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > ( ) ; for ( org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper : java.util.List<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> ) { org.springframework.statemachine.recipes.tasks.Tree<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> . add ( org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper , org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper . java.lang.Object , org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper . java.lang.Object ) ; } return org.springframework.statemachine.recipes.tasks.Tree<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> . getRoot ( ) . getChildren ( ) . size ( ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Iterator<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> < Node < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > > java.util.Iterator<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> ( java.util.List<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > java.util.List<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> ) { Tree < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > org.springframework.statemachine.recipes.tasks.Tree<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> = new Tree < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > ( ) ; for ( org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper : java.util.List<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> ) { org.springframework.statemachine.recipes.tasks.Tree<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> . add ( org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper , org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper . java.lang.Object , org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper . java.lang.Object ) ; } TreeTraverser < Node < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > > org.springframework.statemachine.recipes.tasks.TreeTraverser<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> = new TreeTraverser < Node < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > > ( ) { @ java.lang.Override public java.lang.Iterable<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> < Node < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > > java.lang.Iterable<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> ( Node < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> ) { return org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> . getChildren ( ) ; } } ; java.lang.Iterable<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> < Node < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > > java.lang.Iterable<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> = org.springframework.statemachine.recipes.tasks.TreeTraverser<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> . postOrderTraversal ( org.springframework.statemachine.recipes.tasks.Tree<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> . getRoot ( ) ) ; java.util.Iterator<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> < Node < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > > java.util.Iterator<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> = java.lang.Iterable<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> . iterator ( ) ; return java.util.Iterator<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> < Node < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > > java.lang.Iterable<org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper>> ( Node < org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper > org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> ) { return org.springframework.statemachine.recipes.tasks.Node<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> . getChildren ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.recipes.tasks.TasksHandler.Builder org.springframework.statemachine.recipes.tasks.TasksHandler.Builder ( java.lang.Object java.lang.Object , java.lang.Runnable java.lang.Runnable ) { java.util.List<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> . boolean ( new org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper ( null , java.lang.Object , java.lang.Runnable ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.recipes.tasks.TasksHandler.Builder org.springframework.statemachine.recipes.tasks.TasksHandler.Builder ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , java.lang.Runnable java.lang.Runnable ) { java.util.List<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> . boolean ( new org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper ( java.lang.Object , java.lang.Object , java.lang.Runnable ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.recipes.tasks.TasksHandler.Builder org.springframework.statemachine.recipes.tasks.TasksHandler.Builder ( StateMachinePersist < java.lang.String , java.lang.String , java.lang.Void > org.springframework.statemachine.recipes.tasks.StateMachinePersist<java.lang.String,java.lang.String,java.lang.Void> ) { this . org.springframework.statemachine.recipes.tasks.StateMachinePersist<java.lang.String,java.lang.String,java.lang.Void> = org.springframework.statemachine.recipes.tasks.StateMachinePersist<java.lang.String,java.lang.String,java.lang.Void> ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.recipes.tasks.TasksHandler.Builder org.springframework.statemachine.recipes.tasks.TasksHandler.Builder ( org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener ) { this . org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener = org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.recipes.tasks.TasksHandler.Builder org.springframework.statemachine.recipes.tasks.TasksHandler.Builder ( TaskExecutor org.springframework.statemachine.recipes.tasks.TaskExecutor ) { this . org.springframework.statemachine.recipes.tasks.TaskExecutor = org.springframework.statemachine.recipes.tasks.TaskExecutor ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.recipes.tasks.TasksHandler org.springframework.statemachine.recipes.tasks.TasksHandler ( ) { return new org.springframework.statemachine.recipes.tasks.TasksHandler ( java.util.List<org.springframework.statemachine.recipes.tasks.TasksHandler.TaskWrapper> , org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener , org.springframework.statemachine.recipes.tasks.TaskExecutor , org.springframework.statemachine.recipes.tasks.StateMachinePersist<java.lang.String,java.lang.String,java.lang.Void> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.recipes.tasks.TasksHandler.TasksEntryAction org.springframework.statemachine.recipes.tasks.TasksHandler.TasksEntryAction ( ) { return new org.springframework.statemachine.recipes.tasks.TasksHandler.TasksEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.recipes.tasks.TasksHandler.LocalRunnableAction org.springframework.statemachine.recipes.tasks.TasksHandler.LocalRunnableAction ( java.lang.Runnable java.lang.Runnable , java.lang.String java.lang.String ) { return new org.springframework.statemachine.recipes.tasks.TasksHandler.LocalRunnableAction ( java.lang.Runnable , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.recipes.tasks.Guard<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.Guard<java.lang.String,java.lang.String> ( ) { return new Guard < java.lang.String , java.lang.String > ( ) { @ java.lang.Override public boolean boolean ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) ; for ( java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { if ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.String && ( ( java.lang.String ) java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) . boolean ( java.lang.String ) ) { if ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.Integer ) { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Integer < NUMBER ) { if ( org.springframework.statemachine.recipes.tasks.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.recipes.tasks.Log . debug ( STRING + java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) + STRING ) ; } org.springframework.statemachine.recipes.tasks.TasksHandler.CompositeTasksListener . void ( ) ; return true ; } } } } org.springframework.statemachine.recipes.tasks.TasksHandler.CompositeTasksListener . void ( ) ; return false ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) ; for ( java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { if ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.String && ( ( java.lang.String ) java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) . boolean ( java.lang.String ) ) { if ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.Integer ) { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Integer < NUMBER ) { if ( org.springframework.statemachine.recipes.tasks.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.recipes.tasks.Log . debug ( STRING + java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) + STRING ) ; } org.springframework.statemachine.recipes.tasks.TasksHandler.CompositeTasksListener . void ( ) ; return true ; } } } } org.springframework.statemachine.recipes.tasks.TasksHandler.CompositeTasksListener . void ( ) ; return false ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.recipes.tasks.Action<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.Action<java.lang.String,java.lang.String> ( ) { return new Action < java.lang.String , java.lang.String > ( ) { @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) { org.springframework.statemachine.recipes.tasks.TasksHandler.CompositeTasksListener . void ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) { org.springframework.statemachine.recipes.tasks.TasksHandler.CompositeTasksListener . void ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.recipes.tasks.Action<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.Action<java.lang.String,java.lang.String> ( ) { return new Action < java.lang.String , java.lang.String > ( ) { @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) { org.springframework.statemachine.recipes.tasks.TasksHandler.CompositeTasksListener . void ( org.springframework.statemachine.recipes.tasks.TasksHandler .this , org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) ; boolean boolean = false ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) ; for ( java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { if ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.String && ( ( java.lang.String ) java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) . boolean ( java.lang.String ) ) { if ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.Integer ) { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Integer < NUMBER ) { boolean = true ; break; } } } } if ( boolean ) { org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> . getStateMachine ( ) . sendEvent ( java.lang.String ) ; } else { org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> . getStateMachine ( ) . sendEvent ( java.lang.String ) ; } } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) { org.springframework.statemachine.recipes.tasks.TasksHandler.CompositeTasksListener . void ( org.springframework.statemachine.recipes.tasks.TasksHandler .this , org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) ; boolean boolean = false ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) ; for ( java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { if ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.String && ( ( java.lang.String ) java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) . boolean ( java.lang.String ) ) { if ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.Integer ) { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Integer < NUMBER ) { boolean = true ; break; } } } } if ( boolean ) { org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> . getStateMachine ( ) . sendEvent ( java.lang.String ) ; } else { org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> . getStateMachine ( ) . sendEvent ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.recipes.tasks.Action<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.Action<java.lang.String,java.lang.String> ( ) { return new Action < java.lang.String , java.lang.String > ( ) { @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) ; for ( java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { if ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.String && ( ( java.lang.String ) java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) . boolean ( java.lang.String ) ) { if ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.Integer ) { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Integer < NUMBER ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) , NUMBER ) ; } } } } } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) ; for ( java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { if ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.String && ( ( java.lang.String ) java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) . boolean ( java.lang.String ) ) { if ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.Integer ) { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Integer < NUMBER ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) , NUMBER ) ; } } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Exception java.lang.Exception ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( org.springframework.statemachine.recipes.tasks.TasksHandler org.springframework.statemachine.recipes.tasks.TasksHandler , StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) {		}  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> void void ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> void void ( java.lang.Object java.lang.Object , java.lang.Exception java.lang.Exception );  <METHOD_END>
<METHOD_START> void void ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> void void ( org.springframework.statemachine.recipes.tasks.TasksHandler org.springframework.statemachine.recipes.tasks.TasksHandler , StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { for ( java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> < org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener > java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . boolean ( ) ;) { java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener ( ) . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { for ( java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> < org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener > java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . boolean ( ) ;) { java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener ( ) . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { for ( java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> < org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener > java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . boolean ( ) ;) { java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener ( ) . void ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { for ( java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> < org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener > java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . boolean ( ) ;) { java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener ( ) . void ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Exception java.lang.Exception ) { for ( java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> < org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener > java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . boolean ( ) ;) { java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener ( ) . void ( java.lang.Object , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { for ( java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> < org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener > java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . boolean ( ) ;) { java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener ( ) . void ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { for ( java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> < org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener > java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . boolean ( ) ;) { java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener ( ) . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { for ( java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> < org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener > java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . boolean ( ) ;) { java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener ( ) . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( org.springframework.statemachine.recipes.tasks.TasksHandler org.springframework.statemachine.recipes.tasks.TasksHandler , StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) { for ( java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> < org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener > java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . boolean ( ) ;) { java.util.Iterator<org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener> . org.springframework.statemachine.recipes.tasks.TasksHandler.TasksListener ( ) . void ( org.springframework.statemachine.recipes.tasks.TasksHandler , org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) { boolean boolean = false ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) ; for ( java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { if ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.String && ( ( java.lang.String ) java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) . boolean ( java.lang.String ) ) { if ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.Integer ) { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Integer < NUMBER ) { boolean = true ; break; } } } } if ( boolean ) { org.springframework.statemachine.recipes.tasks.TasksHandler.CompositeTasksListener . void ( ) ; } else { org.springframework.statemachine.recipes.tasks.TasksHandler.CompositeTasksListener . void ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.Runnable java.lang.Runnable , java.lang.String java.lang.String ) { super( java.lang.Runnable , java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.String java.lang.String , StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) { return super. shouldExecute ( java.lang.String , org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) { org.springframework.statemachine.recipes.tasks.TasksHandler.CompositeTasksListener . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) { org.springframework.statemachine.recipes.tasks.TasksHandler.CompositeTasksListener . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) { org.springframework.statemachine.recipes.tasks.TasksHandler.CompositeTasksListener . void ( java.lang.String ) ; void ( NUMBER , org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> , java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.recipes.tasks.TasksHandler.CompositeTasksListener . void ( java.lang.String , java.lang.Exception ) ; void ( - NUMBER , org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int , StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.recipes.tasks.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) ; java.lang.Integer java.lang.Integer ; java.lang.String java.lang.String = java.lang.String + getId ( ) ; if ( java.util.Map<java.lang.Object,java.lang.Object> . boolean ( java.lang.String ) ) { java.lang.Integer = ( java.lang.Integer ) java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.String ) ; } else { java.lang.Integer = NUMBER ; } java.lang.Integer = + int ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> public void ( StateMachinePersist < java.lang.String , java.lang.String , java.lang.Void > org.springframework.statemachine.recipes.tasks.StateMachinePersist<java.lang.String,java.lang.String,java.lang.Void> ) { this . org.springframework.statemachine.recipes.tasks.StateMachinePersist<java.lang.String,java.lang.String,java.lang.Void> = org.springframework.statemachine.recipes.tasks.StateMachinePersist<java.lang.String,java.lang.String,java.lang.Void> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.State<java.lang.String,java.lang.String> , Message < java.lang.String > org.springframework.statemachine.recipes.tasks.Message<java.lang.String> , Transition < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.Transition<java.lang.String,java.lang.String> , StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> ) { if ( org.springframework.statemachine.recipes.tasks.State<java.lang.String,java.lang.String> == null || ( org.springframework.statemachine.recipes.tasks.State<java.lang.String,java.lang.String> . getPseudoState ( ) != null && org.springframework.statemachine.recipes.tasks.State<java.lang.String,java.lang.String> . getPseudoState ( ) . getKind ( ) != PseudoStateKind . INITIAL ) ) { return; } if ( org.springframework.statemachine.recipes.tasks.DefaultStateMachineContext<java.lang.String,java.lang.String> != null && StateMachineUtils . isSubstate ( org.springframework.statemachine.recipes.tasks.State<java.lang.String,java.lang.String> , org.springframework.statemachine.recipes.tasks.State<java.lang.String,java.lang.String> ) ) { DefaultStateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.DefaultStateMachineContext<java.lang.String,java.lang.String> = new DefaultStateMachineContext < java.lang.String , java.lang.String > ( org.springframework.statemachine.recipes.tasks.Transition<java.lang.String,java.lang.String> != null ? org.springframework.statemachine.recipes.tasks.Transition<java.lang.String,java.lang.String> . getTarget ( ) . getId ( ) : null , org.springframework.statemachine.recipes.tasks.Message<java.lang.String> != null ? org.springframework.statemachine.recipes.tasks.Message<java.lang.String> . getPayload ( ) : null , org.springframework.statemachine.recipes.tasks.Message<java.lang.String> != null ? org.springframework.statemachine.recipes.tasks.Message<java.lang.String> . getHeaders ( ) : null , org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> . getExtendedState ( ) ) ; org.springframework.statemachine.recipes.tasks.DefaultStateMachineContext<java.lang.String,java.lang.String> . getChilds ( ) . add ( org.springframework.statemachine.recipes.tasks.DefaultStateMachineContext<java.lang.String,java.lang.String> ) ; } else { java.util.List<org.springframework.statemachine.recipes.tasks.StateMachineContext<java.lang.String,java.lang.String>> . clear ( ) ; DefaultStateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.tasks.DefaultStateMachineContext<java.lang.String,java.lang.String> = new DefaultStateMachineContext < java.lang.String , java.lang.String > ( new java.util.ArrayList<org.springframework.statemachine.recipes.tasks.StateMachineContext<java.lang.String,java.lang.String>> < StateMachineContext < java.lang.String , java.lang.String > > ( java.util.List<org.springframework.statemachine.recipes.tasks.StateMachineContext<java.lang.String,java.lang.String>> ) , org.springframework.statemachine.recipes.tasks.State<java.lang.String,java.lang.String> . getId ( ) , org.springframework.statemachine.recipes.tasks.Message<java.lang.String> != null ? org.springframework.statemachine.recipes.tasks.Message<java.lang.String> . getPayload ( ) : null , org.springframework.statemachine.recipes.tasks.Message<java.lang.String> != null ? org.springframework.statemachine.recipes.tasks.Message<java.lang.String> . getHeaders ( ) : null , org.springframework.statemachine.recipes.tasks.StateMachine<java.lang.String,java.lang.String> . getExtendedState ( ) ) ; org.springframework.statemachine.recipes.tasks.DefaultStateMachineContext<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.tasks.DefaultStateMachineContext<java.lang.String,java.lang.String> ; org.springframework.statemachine.recipes.tasks.State<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.tasks.State<java.lang.String,java.lang.String> ; } try { org.springframework.statemachine.recipes.tasks.StateMachinePersist<java.lang.String,java.lang.String,java.lang.Void> . write ( org.springframework.statemachine.recipes.tasks.DefaultStateMachineContext<java.lang.String,java.lang.String> , null ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new StateMachineException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , java.lang.Runnable java.lang.Runnable ) { this . java.lang.Object = java.lang.Object ; this . java.lang.Object = java.lang.Object ; this . java.lang.Runnable = java.lang.Runnable ; }  <METHOD_END>
