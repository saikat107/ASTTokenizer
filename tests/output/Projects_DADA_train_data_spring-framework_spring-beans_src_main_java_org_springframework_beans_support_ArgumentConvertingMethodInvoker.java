<METHOD_START> public void void ( TypeConverter org.springframework.beans.support.TypeConverter ) { this . org.springframework.beans.support.TypeConverter = org.springframework.beans.support.TypeConverter ; this . boolean = false ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.support.TypeConverter org.springframework.beans.support.TypeConverter ( ) { if ( this . org.springframework.beans.support.TypeConverter == null && this . boolean ) { this . org.springframework.beans.support.TypeConverter = org.springframework.beans.support.TypeConverter ( ) ; } return this . org.springframework.beans.support.TypeConverter ; }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.support.TypeConverter org.springframework.beans.support.TypeConverter ( ) { return new SimpleTypeConverter ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.beans.PropertyEditor java.beans.PropertyEditor ) { TypeConverter org.springframework.beans.support.TypeConverter = org.springframework.beans.support.TypeConverter ( ) ; if ( ! ( org.springframework.beans.support.TypeConverter instanceof PropertyEditorRegistry ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.beans.support.TypeConverter ) ; } ( ( PropertyEditorRegistry ) org.springframework.beans.support.TypeConverter ) . registerCustomEditor ( java.lang.Class<> , java.beans.PropertyEditor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.reflect.Method java.lang.reflect.Method ( ) { java.lang.reflect.Method java.lang.reflect.Method = super. findMatchingMethod ( ) ; if ( java.lang.reflect.Method == null ) { java.lang.reflect.Method = java.lang.reflect.Method ( getArguments ( ) ) ; } if ( java.lang.reflect.Method == null ) { java.lang.reflect.Method = java.lang.reflect.Method ( new java.lang.Object [] { getArguments ( ) } ) ; } return java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> protected java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Object [] java.lang.Object[] ) { TypeConverter org.springframework.beans.support.TypeConverter = org.springframework.beans.support.TypeConverter ( ) ; if ( org.springframework.beans.support.TypeConverter != null ) { java.lang.String java.lang.String = getTargetMethod ( ) ; java.lang.reflect.Method java.lang.reflect.Method = null ; int int = java.lang.Object[] . int ; java.lang.reflect.Method [] java.lang.reflect.Method[] = ReflectionUtils . getAllDeclaredMethods ( getTargetClass ( ) ) ; int int = java.lang.Integer . int ; java.lang.Object [] java.lang.Object[] = null ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.String ) ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; if ( java.lang.Class<?>[] . int == int ) { java.lang.Object [] java.lang.Object[] = new java.lang.Object [ int ] ; boolean boolean = true ; for ( int int = NUMBER ; int < int && boolean ; int ++ ) { try { java.lang.Object[] [ int ] = org.springframework.beans.support.TypeConverter . convertIfNecessary ( java.lang.Object[] [ int ] , java.lang.Class<?>[] [ int ] ) ; } catch ( TypeMismatchException org.springframework.beans.support.TypeMismatchException ) { boolean = false ; } } if ( boolean ) { int int = getTypeDifferenceWeight ( java.lang.Class<?>[] , java.lang.Object[] ) ; if ( int < int ) { int = int ; java.lang.reflect.Method = java.lang.reflect.Method ; java.lang.Object[] = java.lang.Object[] ; } } } } } if ( java.lang.reflect.Method != null ) { setArguments ( java.lang.Object[] ) ; return java.lang.reflect.Method ; } } return null ; }  <METHOD_END>
