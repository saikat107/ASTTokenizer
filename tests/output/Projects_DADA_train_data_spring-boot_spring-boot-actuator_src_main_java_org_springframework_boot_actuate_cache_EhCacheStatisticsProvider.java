<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.cache.CacheStatistics org.springframework.boot.actuate.cache.CacheStatistics ( CacheManager org.springframework.boot.actuate.cache.CacheManager , EhCacheCache org.springframework.boot.actuate.cache.EhCacheCache ) { DefaultCacheStatistics org.springframework.boot.actuate.cache.DefaultCacheStatistics = new DefaultCacheStatistics ( ) ; StatisticsGateway org.springframework.boot.actuate.cache.StatisticsGateway = org.springframework.boot.actuate.cache.EhCacheCache . getNativeCache ( ) . getStatistics ( ) ; org.springframework.boot.actuate.cache.DefaultCacheStatistics . setSize ( org.springframework.boot.actuate.cache.StatisticsGateway . getSize ( ) ) ; double double = double ( org.springframework.boot.actuate.cache.StatisticsGateway ) ; if ( ! java.lang.Double . boolean ( double ) ) { double double = ( double > NUMBER ? NUMBER : double ) ; org.springframework.boot.actuate.cache.DefaultCacheStatistics . setHitRatio ( double ) ; org.springframework.boot.actuate.cache.DefaultCacheStatistics . setMissRatio ( NUMBER - double ) ; } return org.springframework.boot.actuate.cache.DefaultCacheStatistics ; }  <METHOD_END>
<METHOD_START> private double double ( StatisticsGateway org.springframework.boot.actuate.cache.StatisticsGateway ) { long long = org.springframework.boot.actuate.cache.StatisticsGateway . cacheHitCount ( ) ; long long = org.springframework.boot.actuate.cache.StatisticsGateway . cacheMissCount ( ) ; return ( ( double ) long ) / ( long + long ) ; }  <METHOD_END>
