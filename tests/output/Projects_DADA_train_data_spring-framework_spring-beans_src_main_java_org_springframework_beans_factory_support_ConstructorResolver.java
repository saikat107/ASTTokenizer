<METHOD_START> public void ( AbstractAutowireCapableBeanFactory org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory ) { this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory = org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.support.BeanWrapper org.springframework.beans.factory.support.BeanWrapper ( final java.lang.String java.lang.String , final RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.reflect.Constructor<?> < ? > [] java.lang.reflect.Constructor<?>[] , final java.lang.Object [] java.lang.Object[] ) { BeanWrapperImpl org.springframework.beans.factory.support.BeanWrapperImpl = new BeanWrapperImpl ( ) ; this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . initBeanWrapper ( org.springframework.beans.factory.support.BeanWrapperImpl ) ; java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = null ; org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder = null ; java.lang.Object [] java.lang.Object[] = null ; if ( java.lang.Object[] != null ) { java.lang.Object[] = java.lang.Object[] ; } else { java.lang.Object [] java.lang.Object[] = null ; synchronized ( mbd . constructorArgumentLock ) { java.lang.reflect.Constructor<?> = ( java.lang.reflect.Constructor<?> < ? > ) mbd . resolvedConstructorOrFactoryMethod ; if ( java.lang.reflect.Constructor<> != null && mbd . constructorArgumentsResolved ) { java.lang.Object[] = mbd . resolvedConstructorArguments ; if ( java.lang.Object[] == null ) { java.lang.Object[] = mbd . preparedConstructorArguments ; } } } if ( java.lang.Object[] != null ) { java.lang.Object[] = java.lang.Object[] ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.BeanWrapperImpl , java.lang.reflect.Constructor<> , java.lang.Object[] ) ; } } if ( java.lang.reflect.Constructor<> == null ) { boolean boolean = ( java.lang.reflect.Constructor<?>[] != null || org.springframework.beans.factory.support.RootBeanDefinition . getResolvedAutowireMode ( ) == RootBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = null ; int int ; if ( java.lang.Object[] != null ) { int = java.lang.Object[] . int ; } else { ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; int = int ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.BeanWrapperImpl , org.springframework.beans.factory.support.ConstructorArgumentValues , org.springframework.beans.factory.support.ConstructorArgumentValues ) ; } java.lang.reflect.Constructor<?> < ? > [] java.lang.reflect.Constructor<?>[] = java.lang.reflect.Constructor<?>[] ; if ( java.lang.reflect.Constructor<?>[] == null ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.RootBeanDefinition . getBeanClass ( ) ; try { java.lang.reflect.Constructor<?>[] = ( org.springframework.beans.factory.support.RootBeanDefinition . isNonPublicAccessAllowed ( ) ? java.lang.Class<> . java.lang.reflect.Constructor<?>[] ( ) : java.lang.Class<> . java.lang.reflect.Constructor<?>[] ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING + java.lang.Class<> . java.lang.String ( ) + STRING + java.lang.Class<> . java.lang.ClassLoader ( ) + STRING , java.lang.Throwable ) ; } } AutowireUtils . sortConstructors ( java.lang.reflect.Constructor<?>[] ) ; int int = java.lang.Integer . int ; java.util.Set<java.lang.reflect.Constructor<?>> < java.lang.reflect.Constructor<?> < ? > > java.util.Set<java.lang.reflect.Constructor<?>> = null ; java.util.LinkedList<org.springframework.beans.factory.support.UnsatisfiedDependencyException> < UnsatisfiedDependencyException > java.util.LinkedList<org.springframework.beans.factory.support.UnsatisfiedDependencyException> = null ; for ( java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> : java.lang.reflect.Constructor<?>[] ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Constructor<> . java.lang.Class<?>[] ( ) ; if ( java.lang.reflect.Constructor<> != null && java.lang.Object[] . int > java.lang.Class<?>[] . int ) { break; } if ( java.lang.Class<?>[] . int < int ) { continue; } org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder ; if ( org.springframework.beans.factory.support.ConstructorArgumentValues != null ) { try { java.lang.String [] java.lang.String[] = org.springframework.beans.factory.support.ConstructorResolver.ConstructorPropertiesChecker . java.lang.String[] ( java.lang.reflect.Constructor<> , java.lang.Class<?>[] . int ) ; if ( java.lang.String[] == null ) { ParameterNameDiscoverer org.springframework.beans.factory.support.ParameterNameDiscoverer = this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . getParameterNameDiscoverer ( ) ; if ( org.springframework.beans.factory.support.ParameterNameDiscoverer != null ) { java.lang.String[] = org.springframework.beans.factory.support.ParameterNameDiscoverer . getParameterNames ( java.lang.reflect.Constructor<> ) ; } } org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder = org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.ConstructorArgumentValues , org.springframework.beans.factory.support.BeanWrapperImpl , java.lang.Class<?>[] , java.lang.String[] , java.lang.reflect.Constructor<?> ( java.lang.reflect.Constructor<> ) , boolean ) ; } catch ( UnsatisfiedDependencyException org.springframework.beans.factory.support.UnsatisfiedDependencyException ) { if ( this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . logger . isTraceEnabled ( ) ) { this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . logger . trace ( STRING + java.lang.reflect.Constructor<> + STRING + java.lang.String + STRING + org.springframework.beans.factory.support.UnsatisfiedDependencyException ) ; } if ( java.util.LinkedList<org.springframework.beans.factory.support.UnsatisfiedDependencyException> == null ) { java.util.LinkedList<org.springframework.beans.factory.support.UnsatisfiedDependencyException> = new java.util.LinkedList <> ( ) ; } java.util.LinkedList<org.springframework.beans.factory.support.UnsatisfiedDependencyException> . add ( org.springframework.beans.factory.support.UnsatisfiedDependencyException ) ; continue; } } else { if ( java.lang.Class<?>[] . int != java.lang.Object[] . int ) { continue; } org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder = new org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder ( java.lang.Object[] ) ; } int int = ( org.springframework.beans.factory.support.RootBeanDefinition . isLenientConstructorResolution ( ) ? org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . int ( java.lang.Class<?>[] ) : org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . int ( java.lang.Class<?>[] ) ) ; if ( int < int ) { java.lang.reflect.Constructor<?> = java.lang.reflect.Constructor<> ; org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder = org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder ; java.lang.Object[] = org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . java.lang.Object[] ; int = int ; java.util.Set<java.lang.reflect.Constructor<?>> = null ; } else if ( java.lang.reflect.Constructor<> != null && int == int ) { if ( java.util.Set<java.lang.reflect.Constructor<?>> == null ) { java.util.Set<java.lang.reflect.Constructor<?>> = new java.util.LinkedHashSet<java.lang.reflect.Constructor<?>> <> ( ) ; java.util.Set<java.lang.reflect.Constructor<?>> . boolean ( java.lang.reflect.Constructor<> ) ; } java.util.Set<java.lang.reflect.Constructor<?>> . boolean ( java.lang.reflect.Constructor<> ) ; } } if ( java.lang.reflect.Constructor<> == null ) { if ( java.util.LinkedList<org.springframework.beans.factory.support.UnsatisfiedDependencyException> != null ) { UnsatisfiedDependencyException org.springframework.beans.factory.support.UnsatisfiedDependencyException = java.util.LinkedList<org.springframework.beans.factory.support.UnsatisfiedDependencyException> . removeLast ( ) ; for ( java.lang.Exception java.lang.Exception : java.util.LinkedList<org.springframework.beans.factory.support.UnsatisfiedDependencyException> ) { this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . onSuppressedException ( java.lang.Exception ) ; } throw org.springframework.beans.factory.support.UnsatisfiedDependencyException ; } throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING + STRING ) ; } else if ( java.util.Set<java.lang.reflect.Constructor<?>> != null && ! org.springframework.beans.factory.support.RootBeanDefinition . isLenientConstructorResolution ( ) ) { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING + java.lang.String + STRING + STRING + java.util.Set<java.lang.reflect.Constructor<?>> ) ; } if ( java.lang.Object[] == null ) { org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . void ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.reflect.Constructor<> ) ; } } try { java.lang.Object java.lang.Object ; if ( java.lang.System . java.lang.SecurityManager ( ) != null ) { final java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = java.lang.reflect.Constructor<> ; final java.lang.Object [] java.lang.Object[] = java.lang.Object[] ; java.lang.Object = java.security.AccessController . java.lang.Object ( new java.security.PrivilegedAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . getInstantiationStrategy ( ) . instantiate ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String , org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory , java.lang.reflect.Constructor<> , java.lang.Object[] ) ; } } , org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . getAccessControlContext ( ) ) ; } else { java.lang.Object = this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . getInstantiationStrategy ( ) . instantiate ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String , this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory , java.lang.reflect.Constructor<> , java.lang.Object[] ) ; } org.springframework.beans.factory.support.BeanWrapperImpl . setBeanInstance ( java.lang.Object ) ; return org.springframework.beans.factory.support.BeanWrapperImpl ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . getInstantiationStrategy ( ) . instantiate ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String , org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory , java.lang.reflect.Constructor<> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { java.lang.Class<?> < ? > java.lang.Class<?> ; boolean boolean ; if ( org.springframework.beans.factory.support.RootBeanDefinition . getFactoryBeanName ( ) != null ) { java.lang.Class<?> = this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . getType ( org.springframework.beans.factory.support.RootBeanDefinition . getFactoryBeanName ( ) ) ; boolean = false ; } else { java.lang.Class<?> = org.springframework.beans.factory.support.RootBeanDefinition . getBeanClass ( ) ; boolean = true ; } java.lang.Class<?> = ClassUtils . getUserClass ( java.lang.Class<> ) ; java.lang.reflect.Method [] java.lang.reflect.Method[] = java.lang.reflect.Method[] ( java.lang.Class<> , org.springframework.beans.factory.support.RootBeanDefinition ) ; java.lang.reflect.Method java.lang.reflect.Method = null ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) == boolean && org.springframework.beans.factory.support.RootBeanDefinition . isFactoryMethod ( java.lang.reflect.Method ) ) { if ( java.lang.reflect.Method == null ) { java.lang.reflect.Method = java.lang.reflect.Method ; } else if ( ! java.util.Arrays . boolean ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) , java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ) { java.lang.reflect.Method = null ; break; } } } synchronized ( mbd . constructorArgumentLock ) { mbd . resolvedConstructorOrFactoryMethod = java.lang.reflect.Method ; } }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Method [] java.lang.reflect.Method[] ( final java.lang.Class<?> < ? > java.lang.Class<?> , final RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { if ( java.lang.System . java.lang.SecurityManager ( ) != null ) { return java.security.AccessController . java.lang.reflect.Method[] ( new java.security.PrivilegedAction<java.lang.reflect.Method[]> < java.lang.reflect.Method [] > ( ) { @ java.lang.Override public java.lang.reflect.Method [] java.lang.reflect.Method[] ( ) { return ( org.springframework.beans.factory.support.RootBeanDefinition . isNonPublicAccessAllowed ( ) ? ReflectionUtils . getAllDeclaredMethods ( java.lang.Class<> ) : java.lang.Class<> . java.lang.reflect.Method[] ( ) ) ; } } ) ; } else { return ( org.springframework.beans.factory.support.RootBeanDefinition . isNonPublicAccessAllowed ( ) ? ReflectionUtils . getAllDeclaredMethods ( java.lang.Class<> ) : java.lang.Class<> . java.lang.reflect.Method[] ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Method [] java.lang.reflect.Method[] ( ) { return ( org.springframework.beans.factory.support.RootBeanDefinition . isNonPublicAccessAllowed ( ) ? ReflectionUtils . getAllDeclaredMethods ( java.lang.Class<> ) : java.lang.Class<> . java.lang.reflect.Method[] ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.support.BeanWrapper org.springframework.beans.factory.support.BeanWrapper ( final java.lang.String java.lang.String , final RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , final java.lang.Object [] java.lang.Object[] ) { BeanWrapperImpl org.springframework.beans.factory.support.BeanWrapperImpl = new BeanWrapperImpl ( ) ; this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . initBeanWrapper ( org.springframework.beans.factory.support.BeanWrapperImpl ) ; java.lang.Object java.lang.Object ; java.lang.Class<?> < ? > java.lang.Class<?> ; boolean boolean ; java.lang.String java.lang.String = org.springframework.beans.factory.support.RootBeanDefinition . getFactoryBeanName ( ) ; if ( java.lang.String != null ) { if ( java.lang.String . boolean ( java.lang.String ) ) { throw new BeanDefinitionStoreException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING ) ; } java.lang.Object = this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . getBean ( java.lang.String ) ; if ( java.lang.Object == null ) { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING + java.lang.String + STRING ) ; } if ( org.springframework.beans.factory.support.RootBeanDefinition . isSingleton ( ) && this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . containsSingleton ( java.lang.String ) ) { throw new ImplicitlyAppearedSingletonException ( ) ; } java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; boolean = false ; } else { if ( ! org.springframework.beans.factory.support.RootBeanDefinition . hasBeanClass ( ) ) { throw new BeanDefinitionStoreException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING ) ; } java.lang.Object = null ; java.lang.Class<?> = org.springframework.beans.factory.support.RootBeanDefinition . getBeanClass ( ) ; boolean = true ; } java.lang.reflect.Method java.lang.reflect.Method = null ; org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder = null ; java.lang.Object [] java.lang.Object[] = null ; if ( java.lang.Object[] != null ) { java.lang.Object[] = java.lang.Object[] ; } else { java.lang.Object [] java.lang.Object[] = null ; synchronized ( mbd . constructorArgumentLock ) { java.lang.reflect.Method = ( java.lang.reflect.Method ) mbd . resolvedConstructorOrFactoryMethod ; if ( java.lang.reflect.Method != null && mbd . constructorArgumentsResolved ) { java.lang.Object[] = mbd . resolvedConstructorArguments ; if ( java.lang.Object[] == null ) { java.lang.Object[] = mbd . preparedConstructorArguments ; } } } if ( java.lang.Object[] != null ) { java.lang.Object[] = java.lang.Object[] ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.BeanWrapperImpl , java.lang.reflect.Method , java.lang.Object[] ) ; } } if ( java.lang.reflect.Method == null || java.lang.Object[] == null ) { java.lang.Class<?> = ClassUtils . getUserClass ( java.lang.Class<> ) ; java.lang.reflect.Method [] java.lang.reflect.Method[] = java.lang.reflect.Method[] ( java.lang.Class<> , org.springframework.beans.factory.support.RootBeanDefinition ) ; java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method> <> ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) == boolean && org.springframework.beans.factory.support.RootBeanDefinition . isFactoryMethod ( java.lang.reflect.Method ) ) { java.util.List<java.lang.reflect.Method> . boolean ( java.lang.reflect.Method ) ; } } java.lang.reflect.Method [] java.lang.reflect.Method[] = java.util.List<java.lang.reflect.Method> . java.lang.reflect.Method[] ( new java.lang.reflect.Method [ java.util.List<java.lang.reflect.Method> . int ( ) ] ) ; AutowireUtils . sortFactoryMethods ( java.lang.reflect.Method[] ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = null ; boolean boolean = ( org.springframework.beans.factory.support.RootBeanDefinition . getResolvedAutowireMode ( ) == RootBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; int int = java.lang.Integer . int ; java.util.Set<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Set<java.lang.reflect.Method> = null ; int int ; if ( java.lang.Object[] != null ) { int = java.lang.Object[] . int ; } else { ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; int = int ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.BeanWrapperImpl , org.springframework.beans.factory.support.ConstructorArgumentValues , org.springframework.beans.factory.support.ConstructorArgumentValues ) ; } java.util.LinkedList<org.springframework.beans.factory.support.UnsatisfiedDependencyException> < UnsatisfiedDependencyException > java.util.LinkedList<org.springframework.beans.factory.support.UnsatisfiedDependencyException> = null ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; if ( java.lang.Class<?>[] . int >= int ) { org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder ; if ( org.springframework.beans.factory.support.ConstructorArgumentValues != null ) { try { java.lang.String [] java.lang.String[] = null ; ParameterNameDiscoverer org.springframework.beans.factory.support.ParameterNameDiscoverer = this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . getParameterNameDiscoverer ( ) ; if ( org.springframework.beans.factory.support.ParameterNameDiscoverer != null ) { java.lang.String[] = org.springframework.beans.factory.support.ParameterNameDiscoverer . getParameterNames ( java.lang.reflect.Method ) ; } org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder = org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.ConstructorArgumentValues , org.springframework.beans.factory.support.BeanWrapperImpl , java.lang.Class<?>[] , java.lang.String[] , java.lang.reflect.Method , boolean ) ; } catch ( UnsatisfiedDependencyException org.springframework.beans.factory.support.UnsatisfiedDependencyException ) { if ( this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . logger . isTraceEnabled ( ) ) { this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . logger . trace ( STRING + java.lang.reflect.Method + STRING + java.lang.String + STRING + org.springframework.beans.factory.support.UnsatisfiedDependencyException ) ; } if ( java.util.LinkedList<org.springframework.beans.factory.support.UnsatisfiedDependencyException> == null ) { java.util.LinkedList<org.springframework.beans.factory.support.UnsatisfiedDependencyException> = new java.util.LinkedList <> ( ) ; } java.util.LinkedList<org.springframework.beans.factory.support.UnsatisfiedDependencyException> . add ( org.springframework.beans.factory.support.UnsatisfiedDependencyException ) ; continue; } } else { if ( java.lang.Class<?>[] . int != java.lang.Object[] . int ) { continue; } org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder = new org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder ( java.lang.Object[] ) ; } int int = ( org.springframework.beans.factory.support.RootBeanDefinition . isLenientConstructorResolution ( ) ? org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . int ( java.lang.Class<?>[] ) : org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . int ( java.lang.Class<?>[] ) ) ; if ( int < int ) { java.lang.reflect.Method = java.lang.reflect.Method ; org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder = org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder ; java.lang.Object[] = org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . java.lang.Object[] ; int = int ; java.util.Set<java.lang.reflect.Method> = null ; } else if ( java.lang.reflect.Method != null && int == int && ! org.springframework.beans.factory.support.RootBeanDefinition . isLenientConstructorResolution ( ) && java.lang.Class<?>[] . int == java.lang.reflect.Method . int ( ) && ! java.util.Arrays . boolean ( java.lang.Class<?>[] , java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ) { if ( java.util.Set<java.lang.reflect.Method> == null ) { java.util.Set<java.lang.reflect.Method> = new java.util.LinkedHashSet<java.lang.reflect.Method> <> ( ) ; java.util.Set<java.lang.reflect.Method> . boolean ( java.lang.reflect.Method ) ; } java.util.Set<java.lang.reflect.Method> . boolean ( java.lang.reflect.Method ) ; } } } if ( java.lang.reflect.Method == null ) { if ( java.util.LinkedList<org.springframework.beans.factory.support.UnsatisfiedDependencyException> != null ) { UnsatisfiedDependencyException org.springframework.beans.factory.support.UnsatisfiedDependencyException = java.util.LinkedList<org.springframework.beans.factory.support.UnsatisfiedDependencyException> . removeLast ( ) ; for ( java.lang.Exception java.lang.Exception : java.util.LinkedList<org.springframework.beans.factory.support.UnsatisfiedDependencyException> ) { this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . onSuppressedException ( java.lang.Exception ) ; } throw org.springframework.beans.factory.support.UnsatisfiedDependencyException ; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( int ) ; if ( java.lang.Object[] != null ) { for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { java.util.List<java.lang.String> . boolean ( java.lang.Object != null ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) : STRING ) ; } } else { java.util.Set<org.springframework.beans.factory.support.ValueHolder> < ValueHolder > java.util.Set<org.springframework.beans.factory.support.ValueHolder> = new java.util.LinkedHashSet <> ( org.springframework.beans.factory.support.ConstructorArgumentValues . getArgumentCount ( ) ) ; java.util.Set<org.springframework.beans.factory.support.ValueHolder> . addAll ( org.springframework.beans.factory.support.ConstructorArgumentValues . getIndexedArgumentValues ( ) . values ( ) ) ; java.util.Set<org.springframework.beans.factory.support.ValueHolder> . addAll ( org.springframework.beans.factory.support.ConstructorArgumentValues . getGenericArgumentValues ( ) ) ; for ( ValueHolder org.springframework.beans.factory.support.ValueHolder : java.util.Set<org.springframework.beans.factory.support.ValueHolder> ) { java.lang.String java.lang.String = ( org.springframework.beans.factory.support.ValueHolder . getType ( ) != null ? ClassUtils . getShortName ( org.springframework.beans.factory.support.ValueHolder . getType ( ) ) : ( org.springframework.beans.factory.support.ValueHolder . getValue ( ) != null ? org.springframework.beans.factory.support.ValueHolder . getValue ( ) . getClass ( ) . getSimpleName ( ) : STRING ) ) ; java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } java.lang.String java.lang.String = StringUtils . collectionToCommaDelimitedString ( java.util.List<java.lang.String> ) ; throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING + ( org.springframework.beans.factory.support.RootBeanDefinition . getFactoryBeanName ( ) != null ? STRING + org.springframework.beans.factory.support.RootBeanDefinition . getFactoryBeanName ( ) + STRING : STRING ) + STRING + org.springframework.beans.factory.support.RootBeanDefinition . getFactoryMethodName ( ) + STRING + java.lang.String + STRING + STRING + ( int > NUMBER ? STRING : STRING ) + STRING + ( boolean ? STRING : STRING ) + STRING ) ; } else if ( void .class == java.lang.reflect.Method . java.lang.Class<?> ( ) ) { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING + org.springframework.beans.factory.support.RootBeanDefinition . getFactoryMethodName ( ) + STRING ) ; } else if ( java.util.Set<java.lang.reflect.Method> != null ) { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING + java.lang.String + STRING + STRING + java.util.Set<java.lang.reflect.Method> ) ; } if ( java.lang.Object[] == null && org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder != null ) { org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . void ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.reflect.Method ) ; } } try { java.lang.Object java.lang.Object ; if ( java.lang.System . java.lang.SecurityManager ( ) != null ) { final java.lang.Object java.lang.Object = java.lang.Object ; final java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ; final java.lang.Object [] java.lang.Object[] = java.lang.Object[] ; java.lang.Object = java.security.AccessController . java.lang.Object ( new java.security.PrivilegedAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . getInstantiationStrategy ( ) . instantiate ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String , org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory , java.lang.Object , java.lang.reflect.Method , java.lang.Object[] ) ; } } , org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . getAccessControlContext ( ) ) ; } else { java.lang.Object = this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . getInstantiationStrategy ( ) . instantiate ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String , this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory , java.lang.Object , java.lang.reflect.Method , java.lang.Object[] ) ; } if ( java.lang.Object == null ) { return null ; } org.springframework.beans.factory.support.BeanWrapperImpl . setBeanInstance ( java.lang.Object ) ; return org.springframework.beans.factory.support.BeanWrapperImpl ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . getInstantiationStrategy ( ) . instantiate ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String , org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory , java.lang.Object , java.lang.reflect.Method , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , BeanWrapper org.springframework.beans.factory.support.BeanWrapper , ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues , ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues ) { TypeConverter org.springframework.beans.factory.support.TypeConverter = this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . getCustomTypeConverter ( ) ; TypeConverter org.springframework.beans.factory.support.TypeConverter = ( org.springframework.beans.factory.support.TypeConverter != null ? org.springframework.beans.factory.support.TypeConverter : org.springframework.beans.factory.support.BeanWrapper ) ; BeanDefinitionValueResolver org.springframework.beans.factory.support.BeanDefinitionValueResolver = new BeanDefinitionValueResolver ( this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory , java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.TypeConverter ) ; int int = org.springframework.beans.factory.support.ConstructorArgumentValues . getArgumentCount ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.Integer,ConstructorArgumentValues.ValueHolder> < java.lang.Integer , ConstructorArgumentValues . ConstructorArgumentValues > java.util.Map.Entry<java.lang.Integer,ConstructorArgumentValues.ValueHolder> : org.springframework.beans.factory.support.ConstructorArgumentValues . getIndexedArgumentValues ( ) . entrySet ( ) ) { int int = java.util.Map.Entry<java.lang.Integer,ConstructorArgumentValues.ValueHolder> . getKey ( ) ; if ( int < NUMBER ) { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING + int ) ; } if ( int > int ) { int = int + NUMBER ; } ConstructorArgumentValues . ConstructorArgumentValues ConstructorArgumentValues.ValueHolder = java.util.Map.Entry<java.lang.Integer,ConstructorArgumentValues.ValueHolder> . getValue ( ) ; if ( ConstructorArgumentValues.ValueHolder . isConverted ( ) ) { org.springframework.beans.factory.support.ConstructorArgumentValues . addIndexedArgumentValue ( int , ConstructorArgumentValues.ValueHolder ) ; } else { java.lang.Object java.lang.Object = org.springframework.beans.factory.support.BeanDefinitionValueResolver . resolveValueIfNecessary ( STRING , ConstructorArgumentValues.ValueHolder . getValue ( ) ) ; ConstructorArgumentValues . ConstructorArgumentValues ConstructorArgumentValues.ValueHolder = new ConstructorArgumentValues . ConstructorArgumentValues ( java.lang.Object , ConstructorArgumentValues.ValueHolder . getType ( ) , ConstructorArgumentValues.ValueHolder . getName ( ) ) ; ConstructorArgumentValues.ValueHolder . setSource ( ConstructorArgumentValues.ValueHolder ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addIndexedArgumentValue ( int , ConstructorArgumentValues.ValueHolder ) ; } } for ( ConstructorArgumentValues . ConstructorArgumentValues ConstructorArgumentValues.ValueHolder : org.springframework.beans.factory.support.ConstructorArgumentValues . getGenericArgumentValues ( ) ) { if ( ConstructorArgumentValues.ValueHolder . isConverted ( ) ) { org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( ConstructorArgumentValues.ValueHolder ) ; } else { java.lang.Object java.lang.Object = org.springframework.beans.factory.support.BeanDefinitionValueResolver . resolveValueIfNecessary ( STRING , ConstructorArgumentValues.ValueHolder . getValue ( ) ) ; ConstructorArgumentValues . ConstructorArgumentValues ConstructorArgumentValues.ValueHolder = new ConstructorArgumentValues . ConstructorArgumentValues ( java.lang.Object , ConstructorArgumentValues.ValueHolder . getType ( ) , ConstructorArgumentValues.ValueHolder . getName ( ) ) ; ConstructorArgumentValues.ValueHolder . setSource ( ConstructorArgumentValues.ValueHolder ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( ConstructorArgumentValues.ValueHolder ) ; } } return int ; }  <METHOD_END>
<METHOD_START> private org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues , BeanWrapper org.springframework.beans.factory.support.BeanWrapper , java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.String [] java.lang.String[] , java.lang.reflect.Executable java.lang.reflect.Executable , boolean boolean ) throws org.springframework.beans.factory.support.UnsatisfiedDependencyException { TypeConverter org.springframework.beans.factory.support.TypeConverter = this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . getCustomTypeConverter ( ) ; TypeConverter org.springframework.beans.factory.support.TypeConverter = ( org.springframework.beans.factory.support.TypeConverter != null ? org.springframework.beans.factory.support.TypeConverter : org.springframework.beans.factory.support.BeanWrapper ) ; org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder = new org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder ( java.lang.Class<?>[] . int ) ; java.util.Set<ConstructorArgumentValues.ValueHolder> < ConstructorArgumentValues . ConstructorArgumentValues > java.util.Set<ConstructorArgumentValues.ValueHolder> = new java.util.HashSet<ConstructorArgumentValues.ValueHolder> <> ( java.lang.Class<?>[] . int ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( NUMBER ) ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?>[] [ int ] ; java.lang.String java.lang.String = ( java.lang.String[] != null ? java.lang.String[] [ int ] : STRING ) ; ConstructorArgumentValues . ConstructorArgumentValues ConstructorArgumentValues.ValueHolder = org.springframework.beans.factory.support.ConstructorArgumentValues . getArgumentValue ( int , java.lang.Class<> , java.lang.String , java.util.Set<ConstructorArgumentValues.ValueHolder> ) ; if ( ConstructorArgumentValues.ValueHolder == null && ( ! boolean || java.lang.Class<?>[] . int == org.springframework.beans.factory.support.ConstructorArgumentValues . getArgumentCount ( ) ) ) { ConstructorArgumentValues.ValueHolder = org.springframework.beans.factory.support.ConstructorArgumentValues . getGenericArgumentValue ( null , null , java.util.Set<ConstructorArgumentValues.ValueHolder> ) ; } if ( ConstructorArgumentValues.ValueHolder != null ) { java.util.Set<ConstructorArgumentValues.ValueHolder> . add ( ConstructorArgumentValues.ValueHolder ) ; java.lang.Object java.lang.Object = ConstructorArgumentValues.ValueHolder . getValue ( ) ; java.lang.Object java.lang.Object ; if ( ConstructorArgumentValues.ValueHolder . isConverted ( ) ) { java.lang.Object = ConstructorArgumentValues.ValueHolder . getConvertedValue ( ) ; org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . java.lang.Object[] [ int ] = java.lang.Object ; } else { ConstructorArgumentValues . ConstructorArgumentValues ConstructorArgumentValues.ValueHolder = ( ConstructorArgumentValues . ConstructorArgumentValues ) ConstructorArgumentValues.ValueHolder . getSource ( ) ; java.lang.Object java.lang.Object = ConstructorArgumentValues.ValueHolder . getValue ( ) ; MethodParameter org.springframework.beans.factory.support.MethodParameter = MethodParameter . forExecutable ( java.lang.reflect.Executable , int ) ; try { java.lang.Object = org.springframework.beans.factory.support.TypeConverter . convertIfNecessary ( java.lang.Object , java.lang.Class<> , org.springframework.beans.factory.support.MethodParameter ) ; sourceHolder.setConvertedValue(convertedValue);							args.preparedArguments[paramIndex] = convertedValue;						}						else {						*/ org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . boolean = true ; org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . java.lang.Object[] [ int ] = java.lang.Object ; } catch ( TypeMismatchException org.springframework.beans.factory.support.TypeMismatchException ) { throw new UnsatisfiedDependencyException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , new InjectionPoint ( org.springframework.beans.factory.support.MethodParameter ) , STRING + ObjectUtils . nullSafeClassName ( ConstructorArgumentValues.ValueHolder . getValue ( ) ) + STRING + java.lang.Class<> . java.lang.String ( ) + STRING + org.springframework.beans.factory.support.TypeMismatchException . getMessage ( ) ) ; } } org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . java.lang.Object[] [ int ] = java.lang.Object ; org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . java.lang.Object[] [ int ] = java.lang.Object ; } else { MethodParameter org.springframework.beans.factory.support.MethodParameter = MethodParameter . forExecutable ( java.lang.reflect.Executable , int ) ; if ( ! boolean ) { throw new UnsatisfiedDependencyException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , new InjectionPoint ( org.springframework.beans.factory.support.MethodParameter ) , STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } try { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.beans.factory.support.MethodParameter , java.lang.String , java.util.Set<java.lang.String> , org.springframework.beans.factory.support.TypeConverter ) ; org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . java.lang.Object[] [ int ] = java.lang.Object ; org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . java.lang.Object[] [ int ] = java.lang.Object ; org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . java.lang.Object[] [ int ] = new org.springframework.beans.factory.support.ConstructorResolver.AutowiredArgumentMarker ( ) ; org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder . boolean = true ; } catch ( BeansException org.springframework.beans.factory.support.BeansException ) { throw new UnsatisfiedDependencyException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , new InjectionPoint ( org.springframework.beans.factory.support.MethodParameter ) , org.springframework.beans.factory.support.BeansException ) ; } } } for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . registerDependentBean ( java.lang.String , java.lang.String ) ; if ( this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . logger . isDebugEnabled ( ) ) { this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . logger . debug ( STRING + java.lang.String + STRING + ( java.lang.reflect.Executable instanceof java.lang.reflect.Constructor ? STRING : STRING ) + STRING + java.lang.String + STRING ) ; } } return org.springframework.beans.factory.support.ConstructorResolver.ArgumentsHolder ; }  <METHOD_END>
<METHOD_START> private java.lang.Object [] java.lang.Object[] ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , BeanWrapper org.springframework.beans.factory.support.BeanWrapper , java.lang.reflect.Executable java.lang.reflect.Executable , java.lang.Object [] java.lang.Object[] ) { TypeConverter org.springframework.beans.factory.support.TypeConverter = this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . getCustomTypeConverter ( ) ; TypeConverter org.springframework.beans.factory.support.TypeConverter = ( org.springframework.beans.factory.support.TypeConverter != null ? org.springframework.beans.factory.support.TypeConverter : org.springframework.beans.factory.support.BeanWrapper ) ; BeanDefinitionValueResolver org.springframework.beans.factory.support.BeanDefinitionValueResolver = new BeanDefinitionValueResolver ( this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory , java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.TypeConverter ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Executable . java.lang.Class<?>[] ( ) ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [ java.lang.Object[] . int ] ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { java.lang.Object java.lang.Object = java.lang.Object[] [ int ] ; MethodParameter org.springframework.beans.factory.support.MethodParameter = MethodParameter . forExecutable ( java.lang.reflect.Executable , int ) ; GenericTypeResolver . resolveParameterType ( org.springframework.beans.factory.support.MethodParameter , java.lang.reflect.Executable . java.lang.Class<?> ( ) ) ; if ( java.lang.Object instanceof org.springframework.beans.factory.support.ConstructorResolver.AutowiredArgumentMarker ) { java.lang.Object = java.lang.Object ( org.springframework.beans.factory.support.MethodParameter , java.lang.String , null , org.springframework.beans.factory.support.TypeConverter ) ; } else if ( java.lang.Object instanceof BeanMetadataElement ) { java.lang.Object = org.springframework.beans.factory.support.BeanDefinitionValueResolver . resolveValueIfNecessary ( STRING , java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String ) { java.lang.Object = this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . evaluateBeanDefinitionString ( ( java.lang.String ) java.lang.Object , org.springframework.beans.factory.support.RootBeanDefinition ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?>[] [ int ] ; try { java.lang.Object[] [ int ] = org.springframework.beans.factory.support.TypeConverter . convertIfNecessary ( java.lang.Object , java.lang.Class<> , org.springframework.beans.factory.support.MethodParameter ) ; } catch ( TypeMismatchException org.springframework.beans.factory.support.TypeMismatchException ) { throw new UnsatisfiedDependencyException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , new InjectionPoint ( org.springframework.beans.factory.support.MethodParameter ) , STRING + ObjectUtils . nullSafeClassName ( java.lang.Object ) + STRING + java.lang.Class<> . java.lang.String ( ) + STRING + org.springframework.beans.factory.support.TypeMismatchException . getMessage ( ) ) ; } } return java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> protected java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> ( java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Constructor<> . java.lang.Class<> ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . getUserClass ( java.lang.Class<> ) ; if ( java.lang.Class<> != java.lang.Class<> ) { try { return java.lang.Class<> . java.lang.reflect.Constructor<> ( java.lang.reflect.Constructor<> . java.lang.Class<?>[] ( ) ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { } } return java.lang.reflect.Constructor<> ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( MethodParameter org.springframework.beans.factory.support.MethodParameter , java.lang.String java.lang.String , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , TypeConverter org.springframework.beans.factory.support.TypeConverter ) { if ( InjectionPoint .class . boolean ( org.springframework.beans.factory.support.MethodParameter . getParameterType ( ) ) ) { InjectionPoint org.springframework.beans.factory.support.InjectionPoint = org.springframework.beans.factory.support.NamedThreadLocal<org.springframework.beans.factory.support.InjectionPoint> . get ( ) ; if ( org.springframework.beans.factory.support.InjectionPoint == null ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.beans.factory.support.MethodParameter ) ; } return org.springframework.beans.factory.support.InjectionPoint ; } return this . org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . resolveDependency ( new DependencyDescriptor ( org.springframework.beans.factory.support.MethodParameter , true ) , java.lang.String , java.util.Set<java.lang.String> , org.springframework.beans.factory.support.TypeConverter ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.beans.factory.support.InjectionPoint org.springframework.beans.factory.support.InjectionPoint ( InjectionPoint org.springframework.beans.factory.support.InjectionPoint ) { InjectionPoint org.springframework.beans.factory.support.InjectionPoint = org.springframework.beans.factory.support.NamedThreadLocal<org.springframework.beans.factory.support.InjectionPoint> . get ( ) ; if ( org.springframework.beans.factory.support.InjectionPoint != null ) { org.springframework.beans.factory.support.NamedThreadLocal<org.springframework.beans.factory.support.InjectionPoint> . set ( org.springframework.beans.factory.support.InjectionPoint ) ; } else { org.springframework.beans.factory.support.NamedThreadLocal<org.springframework.beans.factory.support.InjectionPoint> . remove ( ) ; } return org.springframework.beans.factory.support.InjectionPoint ; }  <METHOD_END>
<METHOD_START> public void ( int int ) { this . java.lang.Object[] = new java.lang.Object [ int ] ; this . java.lang.Object[] = new java.lang.Object [ int ] ; this . java.lang.Object[] = new java.lang.Object [ int ] ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object [] java.lang.Object[] ) { this . java.lang.Object[] = java.lang.Object[] ; this . java.lang.Object[] = java.lang.Object[] ; this . java.lang.Object[] = java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { int int = MethodInvoker . getTypeDifferenceWeight ( java.lang.Class<?>[] , this . java.lang.Object[] ) ; int int = MethodInvoker . getTypeDifferenceWeight ( java.lang.Class<?>[] , this . java.lang.Object[] ) - NUMBER ; return ( int < int ? int : int ) ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { if ( ! ClassUtils . isAssignableValue ( java.lang.Class<?>[] [ int ] , this . java.lang.Object[] [ int ] ) ) { return java.lang.Integer . int ; } } for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { if ( ! ClassUtils . isAssignableValue ( java.lang.Class<?>[] [ int ] , this . java.lang.Object[] [ int ] ) ) { return java.lang.Integer . int - NUMBER ; } } return java.lang.Integer . int - NUMBER ; }  <METHOD_END>
<METHOD_START> public void void ( RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.reflect.Executable java.lang.reflect.Executable ) { synchronized ( mbd . constructorArgumentLock ) { mbd . resolvedConstructorOrFactoryMethod = java.lang.reflect.Executable ; mbd . constructorArgumentsResolved = true ; if ( this . boolean ) { mbd . preparedConstructorArguments = this . java.lang.Object[] ; } else { mbd . resolvedConstructorArguments = this . java.lang.Object[] ; } } }  <METHOD_END>
<METHOD_START> public static java.lang.String [] java.lang.String[] ( java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> , int int ) { java.beans.ConstructorProperties java.beans.ConstructorProperties = java.lang.reflect.Constructor<> . java.beans.ConstructorProperties ( java.beans.ConstructorProperties .class ) ; if ( java.beans.ConstructorProperties != null ) { java.lang.String [] java.lang.String[] = java.beans.ConstructorProperties . java.lang.String[] ( ) ; if ( java.lang.String[] . int != int ) { throw new java.lang.IllegalStateException ( STRING + STRING + int + STRING + java.lang.reflect.Constructor<> ) ; } return java.lang.String[] ; } else { return null ; } }  <METHOD_END>
