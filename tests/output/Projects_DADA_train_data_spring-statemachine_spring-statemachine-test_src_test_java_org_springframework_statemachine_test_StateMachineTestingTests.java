<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { registerAndRefresh ( org.springframework.statemachine.test.StateMachineTestingTests.Config1 .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.test.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectState ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.test.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { registerAndRefresh ( org.springframework.statemachine.test.StateMachineTestingTests.Config2 .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.test.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStateMachineStarted ( NUMBER ) . and ( ) . step ( ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectState ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.test.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { registerAndRefresh ( org.springframework.statemachine.test.StateMachineTestingTests.Config3 .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.test.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStateMachineStarted ( NUMBER ) . and ( ) . step ( ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectState ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.test.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { registerAndRefresh ( org.springframework.statemachine.test.StateMachineTestingTests.Config4 .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.test.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStateMachineStarted ( NUMBER ) . and ( ) . step ( ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectStateEntered ( STRING , STRING ) . expectStateExited ( STRING , STRING ) . expectState ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.test.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.test.AnnotationConfigApplicationContext org.springframework.statemachine.test.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.test.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.test.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.test.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withConfiguration ( ) . taskExecutor ( org.springframework.statemachine.test.TaskExecutor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.test.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.test.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.test.TaskExecutor org.springframework.statemachine.test.TaskExecutor ( ) { ThreadPoolTaskExecutor org.springframework.statemachine.test.ThreadPoolTaskExecutor = new ThreadPoolTaskExecutor ( ) ; org.springframework.statemachine.test.ThreadPoolTaskExecutor . setCorePoolSize ( NUMBER ) ; return org.springframework.statemachine.test.ThreadPoolTaskExecutor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachineStateConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.test.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING , STRING ) . state ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.test.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.test.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.test.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.test.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) ; }  <METHOD_END>
