<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>>> < Message < java.util.List<java.lang.Integer> < java.lang.Integer > > > java.util.List<org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>>> = new java.util.ArrayList<org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>>> < Message < java.util.List<java.lang.Integer> < java.lang.Integer > > > ( ) ; java.util.List<org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>>> . add ( org.springframework.integration.jdbc.StoredProcPollingChannelAdapterWithNamespace2IntegrationTests.Consumer . org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>> ( NUMBER ) ) ; Message < java.util.List<java.lang.Integer> < java.lang.Integer > > org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>> = java.util.List<org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>>> . get ( NUMBER ) ; org.springframework.integration.jdbc.AbstractApplicationContext . stop ( ) ; assertNotNull ( org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>> ) ; assertNotNull ( org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>> . getPayload ( ) ) ; assertTrue ( org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>> . getPayload ( ) instanceof java.util.List<?> < ? > ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>> . getPayload ( ) ; assertTrue ( java.util.List<java.lang.Integer> . int ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) java.lang.InterruptedException { if ( java.util.concurrent.atomic.AtomicInteger . int ( ) > NUMBER ) { return null ; } return java.lang.Integer . java.lang.Integer ( java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator public void void ( Message < java.util.List<java.lang.Integer> < java.lang.Integer > > org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>> ) { java.util.concurrent.BlockingQueue<org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>>> . add ( org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>> ) ; }  <METHOD_END>
<METHOD_START> org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>> < java.util.List<java.lang.Integer> < java.lang.Integer > > org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>> ( long long ) throws java.lang.InterruptedException { return java.util.concurrent.BlockingQueue<org.springframework.integration.jdbc.Message<java.util.List<java.lang.Integer>>> . poll ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; }  <METHOD_END>
