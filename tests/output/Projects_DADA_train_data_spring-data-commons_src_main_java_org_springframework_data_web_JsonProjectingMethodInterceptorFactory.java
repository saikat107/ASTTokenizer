<METHOD_START> public void ( MappingProvider org.springframework.data.web.MappingProvider ) { Assert . notNull ( org.springframework.data.web.MappingProvider , STRING ) ; Configuration org.springframework.data.web.Configuration = Configuration . builder ( ) . options ( Option . ALWAYS_RETURN_LIST ) . mappingProvider ( org.springframework.data.web.MappingProvider ) . build ( ) ; this . org.springframework.data.web.ParseContext = JsonPath . using ( org.springframework.data.web.Configuration ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.web.MethodInterceptor org.springframework.data.web.MethodInterceptor ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { DocumentContext org.springframework.data.web.DocumentContext = java.io.InputStream .class . boolean ( java.lang.Object ) ? this . org.springframework.data.web.ParseContext . parse ( ( java.io.InputStream ) java.lang.Object ) : this . org.springframework.data.web.ParseContext . parse ( java.lang.Object ) ; return new org.springframework.data.web.JsonProjectingMethodInterceptorFactory.InputMessageProjecting ( org.springframework.data.web.DocumentContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.io.InputStream .class . boolean ( java.lang.Object ) || JSONObject .class . boolean ( java.lang.Object ) || JSONArray .class . boolean ( java.lang.Object ) ) { return true ; } return java.util.Map .class . boolean ( java.lang.Object ) && boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.Class<> . java.lang.reflect.Method[] ( ) ) { if ( AnnotationUtils . findAnnotation ( java.lang.reflect.Method , org . springframework . data . web . org.springframework.data.web.JsonPath .class ) != null ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.data.web.MethodInvocation ) throws java.lang.Throwable { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.web.MethodInvocation . getMethod ( ) ; TypeInformation < java.lang.Object > org.springframework.data.web.TypeInformation<java.lang.Object> = ClassTypeInformation . fromReturnTypeOf ( java.lang.reflect.Method ) ; ResolvableType org.springframework.data.web.ResolvableType = ResolvableType . forMethodReturnType ( java.lang.reflect.Method ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.reflect.Method ) ; if ( org.springframework.data.web.TypeInformation<java.lang.Object> . getActualType ( ) . getType ( ) . isInterface ( ) ) { java.util.List<?> < ? > java.util.List<?> = org.springframework.data.web.DocumentContext . read ( java.lang.String ) ; return java.util.List<> . boolean ( ) ? null : java.util.List<> . get ( NUMBER ) ; } boolean boolean = java.util.Collection .class . boolean ( org.springframework.data.web.ResolvableType . getRawClass ( ) ) ; org.springframework.data.web.ResolvableType = boolean ? org.springframework.data.web.ResolvableType : ResolvableType . forClassWithGenerics ( java.util.List .class , org.springframework.data.web.ResolvableType ) ; org.springframework.data.web.ResolvableType = boolean && JsonPath . isPathDefinite ( java.lang.String ) ? ResolvableType . forClassWithGenerics ( java.util.List .class , org.springframework.data.web.ResolvableType ) : org.springframework.data.web.ResolvableType ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.data.web.DocumentContext . read ( java.lang.String , new org.springframework.data.web.JsonProjectingMethodInterceptorFactory.InputMessageProjecting.ResolvableTypeRef ( org.springframework.data.web.ResolvableType ) ) ; if ( boolean && JsonPath . isPathDefinite ( java.lang.String ) ) { java.util.List<?> = ( java.util.List<?> < ? > ) java.util.List<> . get ( NUMBER ) ; } return boolean ? java.util.List<> : java.util.List<> . boolean ( ) ? null : java.util.List<> . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method ) { org . springframework . data . web . org.springframework.data.web.JsonPath org.springframework.data.web.JsonPath = AnnotationUtils . findAnnotation ( java.lang.reflect.Method , org . springframework . data . web . org.springframework.data.web.JsonPath .class ) ; return org.springframework.data.web.JsonPath != null ? org.springframework.data.web.JsonPath . value ( ) : STRING . java.lang.String ( new Accessor ( java.lang.reflect.Method ) . getPropertyName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Type java.lang.reflect.Type ( ) { return org.springframework.data.web.ResolvableType . getType ( ) ; }  <METHOD_END>
