<METHOD_START> @ java.lang.Override public final int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final TestContext org.springframework.test.context.transaction.TestContext ) throws java.lang.Exception { final java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.context.transaction.TestContext . getTestMethod ( ) ; final java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.transaction.TestContext . getTestClass ( ) ; Assert . notNull ( java.lang.reflect.Method , STRING ) ; TransactionContext org.springframework.test.context.transaction.TransactionContext = TransactionContextHolder . removeCurrentTransactionContext ( ) ; Assert . state ( org.springframework.test.context.transaction.TransactionContext == null , STRING ) ; PlatformTransactionManager org.springframework.test.context.transaction.PlatformTransactionManager = null ; TransactionAttribute org.springframework.test.context.transaction.TransactionAttribute = this . org.springframework.test.context.transaction.TransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( org.springframework.test.context.transaction.TransactionAttribute != null ) { org.springframework.test.context.transaction.TransactionAttribute = TestContextTransactionUtils . createDelegatingTransactionAttribute ( org.springframework.test.context.transaction.TestContext , org.springframework.test.context.transaction.TransactionAttribute ) ; if ( org.springframework.test.context.transaction.Log . isDebugEnabled ( ) ) { org.springframework.test.context.transaction.Log . debug ( STRING + org.springframework.test.context.transaction.TransactionAttribute + STRING + org.springframework.test.context.transaction.TestContext ) ; } if ( org.springframework.test.context.transaction.TransactionAttribute . getPropagationBehavior ( ) == TransactionDefinition . PROPAGATION_NOT_SUPPORTED ) { return; } org.springframework.test.context.transaction.PlatformTransactionManager = org.springframework.test.context.transaction.PlatformTransactionManager ( org.springframework.test.context.transaction.TestContext , org.springframework.test.context.transaction.TransactionAttribute . getQualifier ( ) ) ; Assert . state ( org.springframework.test.context.transaction.PlatformTransactionManager != null , ( ) String . format ( STRING , testContext ) ) ; } if ( org.springframework.test.context.transaction.PlatformTransactionManager != null ) { org.springframework.test.context.transaction.TransactionContext = new TransactionContext ( org.springframework.test.context.transaction.TestContext , org.springframework.test.context.transaction.PlatformTransactionManager , org.springframework.test.context.transaction.TransactionAttribute , boolean ( org.springframework.test.context.transaction.TestContext ) ) ; void ( org.springframework.test.context.transaction.TestContext ) ; org.springframework.test.context.transaction.TransactionContext . startTransaction ( ) ; TransactionContextHolder . setCurrentTransactionContext ( org.springframework.test.context.transaction.TransactionContext ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestContext org.springframework.test.context.transaction.TestContext ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.context.transaction.TestContext . getTestMethod ( ) ; Assert . notNull ( java.lang.reflect.Method , STRING ) ; TransactionContext org.springframework.test.context.transaction.TransactionContext = TransactionContextHolder . removeCurrentTransactionContext ( ) ; if ( org.springframework.test.context.transaction.TransactionContext != null ) { TransactionStatus org.springframework.test.context.transaction.TransactionStatus = org.springframework.test.context.transaction.TransactionContext . getTransactionStatus ( ) ; try { if ( ( org.springframework.test.context.transaction.TransactionStatus != null ) && ! org.springframework.test.context.transaction.TransactionStatus . isCompleted ( ) ) { org.springframework.test.context.transaction.TransactionContext . endTransaction ( ) ; } } finally { void ( org.springframework.test.context.transaction.TestContext ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( TestContext org.springframework.test.context.transaction.TestContext ) throws java.lang.Exception { try { java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> = java.util.List<java.lang.reflect.Method> ( org.springframework.test.context.transaction.TestContext . getTestClass ( ) , BeforeTransaction .class ) ; java.util.Collections . void ( java.util.List<java.lang.reflect.Method> ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.List<java.lang.reflect.Method> ) { if ( org.springframework.test.context.transaction.Log . isDebugEnabled ( ) ) { org.springframework.test.context.transaction.Log . debug ( STRING + java.lang.reflect.Method + STRING + org.springframework.test.context.transaction.TestContext ) ; } ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; java.lang.reflect.Method . java.lang.Object ( org.springframework.test.context.transaction.TestContext . getTestInstance ( ) ) ; } } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { if ( org.springframework.test.context.transaction.Log . isErrorEnabled ( ) ) { org.springframework.test.context.transaction.Log . error ( STRING + org.springframework.test.context.transaction.TestContext + STRING , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } ReflectionUtils . rethrowException ( java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( TestContext org.springframework.test.context.transaction.TestContext ) throws java.lang.Exception { java.lang.Throwable java.lang.Throwable = null ; java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> = java.util.List<java.lang.reflect.Method> ( org.springframework.test.context.transaction.TestContext . getTestClass ( ) , AfterTransaction .class ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.List<java.lang.reflect.Method> ) { try { if ( org.springframework.test.context.transaction.Log . isDebugEnabled ( ) ) { org.springframework.test.context.transaction.Log . debug ( STRING + java.lang.reflect.Method + STRING + org.springframework.test.context.transaction.TestContext ) ; } ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; java.lang.reflect.Method . java.lang.Object ( org.springframework.test.context.transaction.TestContext . getTestInstance ( ) ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { java.lang.Throwable java.lang.Throwable = java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; if ( java.lang.Throwable == null ) { java.lang.Throwable = java.lang.Throwable ; } org.springframework.test.context.transaction.Log . error ( STRING + java.lang.reflect.Method + STRING + org.springframework.test.context.transaction.TestContext , java.lang.Throwable ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Throwable == null ) { java.lang.Throwable = java.lang.Exception ; } org.springframework.test.context.transaction.Log . error ( STRING + java.lang.reflect.Method + STRING + org.springframework.test.context.transaction.TestContext , java.lang.Exception ) ; } } if ( java.lang.Throwable != null ) { ReflectionUtils . rethrowException ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.test.context.transaction.PlatformTransactionManager org.springframework.test.context.transaction.PlatformTransactionManager ( TestContext org.springframework.test.context.transaction.TestContext , java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) ) { try { BeanFactory org.springframework.test.context.transaction.BeanFactory = org.springframework.test.context.transaction.TestContext . getApplicationContext ( ) . getAutowireCapableBeanFactory ( ) ; return BeanFactoryAnnotationUtils . qualifiedBeanOfType ( org.springframework.test.context.transaction.BeanFactory , PlatformTransactionManager .class , java.lang.String ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( org.springframework.test.context.transaction.Log . isWarnEnabled ( ) ) { org.springframework.test.context.transaction.Log . warn ( java.lang.String . java.lang.String ( STRING , java.lang.String , org.springframework.test.context.transaction.TestContext ) , java.lang.RuntimeException ) ; } throw java.lang.RuntimeException ; } } return org.springframework.test.context.transaction.PlatformTransactionManager ( org.springframework.test.context.transaction.TestContext ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.test.context.transaction.PlatformTransactionManager org.springframework.test.context.transaction.PlatformTransactionManager ( TestContext org.springframework.test.context.transaction.TestContext ) { return TestContextTransactionUtils . retrieveTransactionManager ( org.springframework.test.context.transaction.TestContext , null ) ; }  <METHOD_END>
<METHOD_START> protected final boolean boolean ( TestContext org.springframework.test.context.transaction.TestContext ) throws java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.transaction.TestContext . getTestClass ( ) ; Rollback org.springframework.test.context.transaction.Rollback = AnnotatedElementUtils . findMergedAnnotation ( java.lang.Class<> , Rollback .class ) ; boolean boolean = ( org.springframework.test.context.transaction.Rollback != null ) ; if ( boolean ) { boolean boolean = org.springframework.test.context.transaction.Rollback . value ( ) ; if ( org.springframework.test.context.transaction.Log . isDebugEnabled ( ) ) { org.springframework.test.context.transaction.Log . debug ( java.lang.String . java.lang.String ( STRING , boolean , java.lang.Class<> . java.lang.String ( ) ) ) ; } return boolean ; } return true ; }  <METHOD_END>
<METHOD_START> protected final boolean boolean ( TestContext org.springframework.test.context.transaction.TestContext ) throws java.lang.Exception { boolean boolean = boolean ( org.springframework.test.context.transaction.TestContext ) ; Rollback org.springframework.test.context.transaction.Rollback = AnnotatedElementUtils . findMergedAnnotation ( org.springframework.test.context.transaction.TestContext . getTestMethod ( ) , Rollback .class ) ; if ( org.springframework.test.context.transaction.Rollback != null ) { boolean boolean = org.springframework.test.context.transaction.Rollback . value ( ) ; if ( org.springframework.test.context.transaction.Log . isDebugEnabled ( ) ) { org.springframework.test.context.transaction.Log . debug ( java.lang.String . java.lang.String ( STRING , boolean , boolean , org.springframework.test.context.transaction.TestContext ) ) ; } boolean = boolean ; } else { if ( org.springframework.test.context.transaction.Log . isDebugEnabled ( ) ) { org.springframework.test.context.transaction.Log . debug ( java.lang.String . java.lang.String ( STRING , boolean , org.springframework.test.context.transaction.TestContext ) ) ; } } return boolean ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { return java.util.Arrays . java.util.stream.IntStream ( ReflectionUtils . getUniqueDeclaredMethods ( java.lang.Class<> ) ) . filter ( method -> AnnotatedElementUtils . hasAnnotation ( method , annotationType ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
