<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader , java.net.URL [] java.net.URL[] ) { this( java.lang.ClassLoader , java.net.URL[] , ClassLoaderFileRepository . NONE ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader , java.net.URL [] java.net.URL[] , ClassLoaderFileRepository org.springframework.boot.devtools.restart.classloader.ClassLoaderFileRepository ) { this( java.lang.ClassLoader , java.net.URL[] , org.springframework.boot.devtools.restart.classloader.ClassLoaderFileRepository , LogFactory . getLog ( org.springframework.boot.devtools.restart.classloader.RestartClassLoader .class ) ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader , java.net.URL [] java.net.URL[] , ClassLoaderFileRepository org.springframework.boot.devtools.restart.classloader.ClassLoaderFileRepository , Log org.springframework.boot.devtools.restart.classloader.Log ) { super( java.net.URL[] , java.lang.ClassLoader ); Assert . notNull ( java.lang.ClassLoader , STRING ) ; Assert . notNull ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFileRepository , STRING ) ; Assert . notNull ( org.springframework.boot.devtools.restart.classloader.Log , STRING ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFileRepository = org.springframework.boot.devtools.restart.classloader.ClassLoaderFileRepository ; this . org.springframework.boot.devtools.restart.classloader.Log = org.springframework.boot.devtools.restart.classloader.Log ; if ( org.springframework.boot.devtools.restart.classloader.Log . isDebugEnabled ( ) ) { org.springframework.boot.devtools.restart.classloader.Log . debug ( STRING + java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration<java.net.URL> < java.net.URL > java.util.Enumeration<java.net.URL> ( java.lang.String java.lang.String ) throws java.io.IOException { java.util.Enumeration<java.net.URL> < java.net.URL > java.util.Enumeration<java.net.URL> = java.lang.ClassLoader ( ) . java.util.Enumeration<java.net.URL> ( java.lang.String ) ; ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFileRepository . getFile ( java.lang.String ) ; if ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile != null ) { if ( java.util.Enumeration<java.net.URL> . boolean ( ) ) { java.util.Enumeration<java.net.URL> . java.net.URL ( ) ; } if ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile . getKind ( ) != Kind . DELETED ) { return new org.springframework.boot.devtools.restart.classloader.RestartClassLoader.CompoundEnumeration <> ( java.net.URL ( java.lang.String , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) , java.util.Enumeration<java.net.URL> ) ; } } return java.util.Enumeration<java.net.URL> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URL java.net.URL ( java.lang.String java.lang.String ) { ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFileRepository . getFile ( java.lang.String ) ; if ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile != null && org.springframework.boot.devtools.restart.classloader.ClassLoaderFile . getKind ( ) == Kind . DELETED ) { return null ; } java.net.URL java.net.URL = java.net.URL ( java.lang.String ) ; if ( java.net.URL != null ) { return java.net.URL ; } return java.lang.ClassLoader ( ) . java.net.URL ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URL java.net.URL ( final java.lang.String java.lang.String ) { final ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFileRepository . getFile ( java.lang.String ) ; if ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile == null ) { return super. java.net.URL ( java.lang.String ) ; } if ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile . getKind ( ) == Kind . DELETED ) { return null ; } return java.security.AccessController . java.net.URL ( new java.security.PrivilegedAction<java.net.URL> < java.net.URL > ( ) { @ java.lang.Override public java.net.URL java.net.URL ( ) { return java.net.URL ( java.lang.String , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URL java.net.URL ( ) { return java.net.URL ( java.lang.String , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , boolean boolean )			throws java.lang.ClassNotFoundException { java.lang.String java.lang.String = java.lang.String . java.lang.String ( '.' , '/' ) . java.lang.String ( STRING ) ; ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFileRepository . getFile ( java.lang.String ) ; if ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile != null && org.springframework.boot.devtools.restart.classloader.ClassLoaderFile . getKind ( ) == Kind . DELETED ) { throw new java.lang.ClassNotFoundException ( java.lang.String ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.String ) ; if ( java.lang.Class<> == null ) { try { java.lang.Class<?> = java.lang.Class<?> ( java.lang.String ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { java.lang.Class<?> = java.lang.ClassLoader ( ) . java.lang.Class<?> ( java.lang.String ) ; } } if ( boolean ) { void ( java.lang.Class<> ) ; } return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( final java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { java.lang.String java.lang.String = java.lang.String . java.lang.String ( '.' , '/' ) . java.lang.String ( STRING ) ; final ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFileRepository . getFile ( java.lang.String ) ; if ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile == null ) { return super. java.lang.Class<?> ( java.lang.String ) ; } if ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile . getKind ( ) == Kind . DELETED ) { throw new java.lang.ClassNotFoundException ( java.lang.String ) ; } return java.security.AccessController . java.lang.Class<?> ( new java.security.PrivilegedAction<java.lang.Class<?>> < java.lang.Class<?> < ? > > ( ) { @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { byte [] byte[] = org.springframework.boot.devtools.restart.classloader.ClassLoaderFile . getContents ( ) ; return java.lang.Class<?> ( java.lang.String , byte[] , NUMBER , byte[] . int ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { byte [] byte[] = org.springframework.boot.devtools.restart.classloader.ClassLoaderFile . getContents ( ) ; return java.lang.Class<?> ( java.lang.String , byte[] , NUMBER , byte[] . int ) ; }  <METHOD_END>
<METHOD_START> private java.net.URL java.net.URL ( java.lang.String java.lang.String , ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) { try { return new java.net.URL ( STRING , null , - NUMBER , STRING + java.lang.String , new ClassLoaderFileURLStreamHandler ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { throw new java.lang.IllegalStateException ( java.net.MalformedURLException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Throwable { if ( this . org.springframework.boot.devtools.restart.classloader.Log . isDebugEnabled ( ) ) { this . org.springframework.boot.devtools.restart.classloader.Log . debug ( STRING + java.lang.String ( ) ) ; } super. void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( java.lang.Class<> . java.lang.ClassLoader ( ) instanceof org.springframework.boot.devtools.restart.classloader.RestartClassLoader ) ; }  <METHOD_END>
<METHOD_START> void ( E E , java.util.Enumeration<E> < E > java.util.Enumeration<E> ) { this . E = E ; this . java.util.Enumeration<E> = java.util.Enumeration<E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . E != null || this . java.util.Enumeration<E> . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public E E ( ) { if ( this . E == null ) { return this . java.util.Enumeration<E> . E ( ) ; } E E = this . E ; this . E = null ; return E ; }  <METHOD_END>
