<METHOD_START> @ Parameters ( name = STRING ) public static java.util.List<java.lang.Object[]> < java.lang.Object [] > java.util.List<java.lang.Object[]> ( ) { DatabaseDriver [] org.springframework.boot.jdbc.DatabaseDriver[] = DatabaseDriver . values ( ) ; java.util.List<java.lang.Object[]> < java.lang.Object [] > java.util.List<java.lang.Object[]> = new java.util.ArrayList<java.lang.Object[]> <> ( ) ; for ( DatabaseDriver org.springframework.boot.jdbc.DatabaseDriver : org.springframework.boot.jdbc.DatabaseDriver[] ) { if ( java.util.EnumSet<org.springframework.boot.jdbc.DatabaseDriver> . contains ( org.springframework.boot.jdbc.DatabaseDriver ) ) { continue; } java.util.List<java.lang.Object[]> . boolean ( new java.lang.Object [] { org.springframework.boot.jdbc.DatabaseDriver , org.springframework.boot.jdbc.DatabaseDriver . getDriverClassName ( ) , java.sql.Driver .class } ) ; if ( org.springframework.boot.jdbc.DatabaseDriver . getXaDataSourceClassName ( ) != null ) { java.util.List<java.lang.Object[]> . boolean ( new java.lang.Object [] { org.springframework.boot.jdbc.DatabaseDriver , org.springframework.boot.jdbc.DatabaseDriver . getXaDataSourceClassName ( ) , javax.sql.XADataSource .class } ) ; } } return java.util.List<java.lang.Object[]> ; }  <METHOD_END>
<METHOD_START> public void ( DatabaseDriver org.springframework.boot.jdbc.DatabaseDriver , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.String = java.lang.String ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( java.util.List<java.lang.String> ( this . java.lang.String . java.lang.String ( '.' , '/' ) ) . boolean ( this . java.lang.Class<> . java.lang.String ( ) . java.lang.String ( '.' , '/' ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) throws java.io.IOException { ClassReader org.springframework.boot.jdbc.ClassReader = new ClassReader ( java.lang.Class<? extends org.springframework.boot.jdbc.DatabaseDriverClassNameTests> ( ) . java.io.InputStream ( STRING + java.lang.String + STRING ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : org.springframework.boot.jdbc.ClassReader . getInterfaces ( ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; java.util.List<java.lang.String> . boolean ( java.util.List<java.lang.String> ( java.lang.String ) ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
