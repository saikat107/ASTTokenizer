<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.logging.logback.MockEnvironment = new MockEnvironment ( ) ; this . org.springframework.boot.logging.logback.LoggingInitializationContext = new LoggingInitializationContext ( this . org.springframework.boot.logging.logback.MockEnvironment ) ; this . org.springframework.boot.logging.logback.JoranConfigurator = new SpringBootJoranConfigurator ( this . org.springframework.boot.logging.logback.LoggingInitializationContext ) ; StaticLoggerBinder org.springframework.boot.logging.logback.StaticLoggerBinder = StaticLoggerBinder . getSingleton ( ) ; this . org.springframework.boot.logging.logback.LoggerContext = ( LoggerContext ) org.springframework.boot.logging.logback.StaticLoggerBinder . getLoggerFactory ( ) ; this . org.springframework.boot.logging.logback.Logger = this . org.springframework.boot.logging.logback.LoggerContext . getLogger ( java.lang.Class<? extends org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.boot.logging.logback.LoggerContext . stop ( ) ; new BasicConfigurator ( ) . configure ( ( LoggerContext ) LoggerFactory . getILoggerFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.MockEnvironment . setActiveProfiles ( STRING ) ; void ( STRING ) ; this . org.springframework.boot.logging.logback.Logger . trace ( STRING ) ; this . org.springframework.boot.logging.logback.InternalOutputCapture . expect ( containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.MockEnvironment . setActiveProfiles ( STRING ) ; void ( STRING ) ; this . org.springframework.boot.logging.logback.Logger . trace ( STRING ) ; this . org.springframework.boot.logging.logback.InternalOutputCapture . expect ( containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.MockEnvironment . setActiveProfiles ( STRING ) ; void ( STRING ) ; this . org.springframework.boot.logging.logback.Logger . trace ( STRING ) ; this . org.springframework.boot.logging.logback.InternalOutputCapture . expect ( containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; this . org.springframework.boot.logging.logback.Logger . trace ( STRING ) ; this . org.springframework.boot.logging.logback.InternalOutputCapture . expect ( not ( containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.logging.logback.MockEnvironment , STRING ) ; void ( STRING ) ; assertThat ( this . org.springframework.boot.logging.logback.LoggerContext . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.logging.logback.MockEnvironment , STRING ) ; void ( STRING ) ; assertThat ( this . org.springframework.boot.logging.logback.LoggerContext . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.logging.logback.LoggerContext . getProperty ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.logging.logback.LoggerContext . getProperty ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.logging.logback.LoggerContext . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.logging.logback.LoggerContext . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean , java.lang.String ... java.lang.String[] )			throws org.springframework.boot.logging.logback.JoranException { this . org.springframework.boot.logging.logback.MockEnvironment . setActiveProfiles ( java.lang.String[] ) ; void ( STRING ) ; this . org.springframework.boot.logging.logback.Logger . trace ( STRING ) ; if ( boolean ) { this . org.springframework.boot.logging.logback.InternalOutputCapture . expect ( containsString ( STRING ) ) ; } else { this . org.springframework.boot.logging.logback.InternalOutputCapture . expect ( not ( containsString ( STRING ) ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws org.springframework.boot.logging.logback.JoranException { this . org.springframework.boot.logging.logback.JoranConfigurator . setContext ( this . org.springframework.boot.logging.logback.LoggerContext ) ; this . org.springframework.boot.logging.logback.JoranConfigurator . doConfigure ( java.lang.Class<? extends org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests> ( ) . java.io.InputStream ( java.lang.String ) ) ; }  <METHOD_END>
