<METHOD_START> @ Before public void void ( ) { ViewRow org.springframework.data.couchbase.repository.ViewRow = mock ( ViewRow .class ) ; when ( org.springframework.data.couchbase.repository.ViewRow . value ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.couchbase.repository.ViewRow . id ( ) ) . thenReturn ( STRING ) ; ViewRow org.springframework.data.couchbase.repository.ViewRow = mock ( ViewRow .class ) ; when ( org.springframework.data.couchbase.repository.ViewRow . value ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.couchbase.repository.ViewRow . id ( ) ) . thenReturn ( STRING ) ; java.util.List<org.springframework.data.couchbase.repository.ViewRow> < ViewRow > java.util.List<org.springframework.data.couchbase.repository.ViewRow> = java.util.Arrays . java.util.List ( org.springframework.data.couchbase.repository.ViewRow , org.springframework.data.couchbase.repository.ViewRow ) ; ViewResult org.springframework.data.couchbase.repository.ViewResult = mock ( ViewResult .class ) ; when ( org.springframework.data.couchbase.repository.ViewResult . iterator ( ) ) . thenReturn ( java.util.List<org.springframework.data.couchbase.repository.ViewRow> . iterator ( ) ) ; Bucket org.springframework.data.couchbase.repository.Bucket = mock ( Bucket .class ) ; when ( org.springframework.data.couchbase.repository.Bucket . name ( ) ) . thenReturn ( STRING ) ; CouchbaseConverter org.springframework.data.couchbase.repository.CouchbaseConverter = mock ( CouchbaseConverter .class ) ; when ( org.springframework.data.couchbase.repository.CouchbaseConverter . getTypeKey ( ) ) . thenReturn ( STRING ) ; org.springframework.data.couchbase.repository.CouchbaseOperations = mock ( CouchbaseOperations .class ) ; when ( org.springframework.data.couchbase.repository.CouchbaseOperations . getDefaultConsistency ( ) ) . thenReturn ( org.springframework.data.couchbase.core.query.Consistency ) ; when ( org.springframework.data.couchbase.repository.CouchbaseOperations . getCouchbaseBucket ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.Bucket ) ; when ( org.springframework.data.couchbase.repository.CouchbaseOperations . getConverter ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.CouchbaseConverter ) ; when ( org.springframework.data.couchbase.repository.CouchbaseOperations . findByView ( any ( ViewQuery .class ) , any ( java.lang.Class .class ) ) ) . thenReturn ( java.util.List<org.springframework.data.couchbase.repository.ViewRow> ) ; when ( org.springframework.data.couchbase.repository.CouchbaseOperations . findByN1QL ( any ( N1qlQuery .class ) , any ( java.lang.Class .class ) ) ) . thenReturn ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; when ( org.springframework.data.couchbase.repository.CouchbaseOperations . queryView ( any ( ViewQuery .class ) ) ) . thenReturn ( org.springframework.data.couchbase.repository.ViewResult ) ; when ( org.springframework.data.couchbase.repository.CouchbaseOperations . queryN1QL ( any ( N1qlQuery .class ) ) ) . thenReturn ( null ) ; CouchbaseEntityInformation org.springframework.data.couchbase.repository.CouchbaseEntityInformation = mock ( CouchbaseEntityInformation .class ) ; when ( org.springframework.data.couchbase.repository.CouchbaseEntityInformation . getJavaType ( ) ) . thenReturn ( java.lang.String .class ) ; org.springframework.data.couchbase.repository.N1qlCouchbaseRepository<java.lang.String,java.lang.String> = new N1qlCouchbaseRepository < java.lang.String , java.lang.String > ( org.springframework.data.couchbase.repository.CouchbaseEntityInformation , org.springframework.data.couchbase.repository.CouchbaseOperations ) ; org.springframework.data.couchbase.repository.N1qlCouchbaseRepository<java.lang.String,java.lang.String> . setViewMetadataProvider ( mock ( ViewMetadataProvider .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.data.couchbase.repository.N1qlCouchbaseRepository<java.lang.String,java.lang.String> . findAll ( ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . queryView ( any ( ViewQuery .class ) ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . findByN1QL ( any ( N1qlQuery .class ) , any ( java.lang.Class .class ) ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . queryN1QL ( any ( N1qlQuery .class ) ) ; ArgumentCaptor < ViewQuery > org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.ViewQuery> = ArgumentCaptor . forClass ( ViewQuery .class ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations ) . findByView ( org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.ViewQuery> . capture ( ) , any ( java.lang.Class .class ) ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.ViewQuery> . getValue ( ) . toString ( ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.data.couchbase.repository.N1qlCouchbaseRepository<java.lang.String,java.lang.String> . findAll ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . queryView ( any ( ViewQuery .class ) ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . findByN1QL ( any ( N1qlQuery .class ) , any ( java.lang.Class .class ) ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . queryN1QL ( any ( N1qlQuery .class ) ) ; ArgumentCaptor < ViewQuery > org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.ViewQuery> = ArgumentCaptor . forClass ( ViewQuery .class ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations ) . findByView ( org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.ViewQuery> . capture ( ) , any ( java.lang.Class .class ) ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.ViewQuery> . getValue ( ) . toString ( ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.data.couchbase.repository.N1qlCouchbaseRepository<java.lang.String,java.lang.String> . count ( ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . findByView ( any ( ViewQuery .class ) , any ( java.lang.Class .class ) ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . findByN1QL ( any ( N1qlQuery .class ) , any ( java.lang.Class .class ) ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . queryN1QL ( any ( N1qlQuery .class ) ) ; ArgumentCaptor < ViewQuery > org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.ViewQuery> = ArgumentCaptor . forClass ( ViewQuery .class ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations ) . queryView ( org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.ViewQuery> . capture ( ) ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.ViewQuery> . getValue ( ) . toString ( ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = org.springframework.data.couchbase.repository.N1qlCouchbaseRepository<java.lang.String,java.lang.String> . count ( ) ; assertEquals ( NUMBER , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.data.couchbase.repository.N1qlCouchbaseRepository<java.lang.String,java.lang.String> . deleteAll ( ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . findByView ( any ( ViewQuery .class ) , any ( java.lang.Class .class ) ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . findByN1QL ( any ( N1qlQuery .class ) , any ( java.lang.Class .class ) ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . queryN1QL ( any ( N1qlQuery .class ) ) ; ArgumentCaptor < ViewQuery > org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.ViewQuery> = ArgumentCaptor . forClass ( ViewQuery .class ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations ) . queryView ( org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.ViewQuery> . capture ( ) ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.ViewQuery> . getValue ( ) . toString ( ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; Sort org.springframework.data.couchbase.repository.Sort = new Sort ( Sort . Direction . ASC , STRING ) ; org.springframework.data.couchbase.repository.N1qlCouchbaseRepository<java.lang.String,java.lang.String> . findAll ( org.springframework.data.couchbase.repository.Sort ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . findByView ( any ( ViewQuery .class ) , any ( java.lang.Class .class ) ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . queryView ( any ( ViewQuery .class ) ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . queryN1QL ( any ( N1qlQuery .class ) ) ; ArgumentCaptor < N1qlQuery > org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.N1qlQuery> = ArgumentCaptor . forClass ( N1qlQuery .class ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations ) . findByN1QL ( org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.N1qlQuery> . capture ( ) , any ( java.lang.Class .class ) ) ; JsonObject org.springframework.data.couchbase.repository.JsonObject = org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.N1qlQuery> . getValue ( ) . n1ql ( ) ; assertEquals ( org.springframework.data.couchbase.core.query.Consistency . n1qlConsistency ( ) . n1ql ( ) , org.springframework.data.couchbase.repository.JsonObject . getString ( STRING ) ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.repository.JsonObject . getString ( STRING ) ; assertTrue ( STRING + java.lang.String + STRING + java.lang.String , java.lang.String . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.data.couchbase.repository.N1qlCouchbaseRepository<java.lang.String,java.lang.String> . findAll ( new PageRequest ( NUMBER , NUMBER ) ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . findByView ( any ( ViewQuery .class ) , any ( java.lang.Class .class ) ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . queryView ( any ( ViewQuery .class ) ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations , never ( ) ) . queryN1QL ( any ( N1qlQuery .class ) ) ; ArgumentCaptor < N1qlQuery > org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.N1qlQuery> = ArgumentCaptor . forClass ( N1qlQuery .class ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations ) . findByN1QL ( org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.N1qlQuery> . capture ( ) , any ( java.lang.Class .class ) ) ; JsonObject org.springframework.data.couchbase.repository.JsonObject = org.springframework.data.couchbase.repository.ArgumentCaptor<org.springframework.data.couchbase.repository.N1qlQuery> . getValue ( ) . n1ql ( ) ; assertEquals ( org.springframework.data.couchbase.core.query.Consistency . n1qlConsistency ( ) . n1ql ( ) , org.springframework.data.couchbase.repository.JsonObject . getString ( STRING ) ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.repository.JsonObject . getString ( STRING ) ; assertTrue ( STRING + java.lang.String + STRING + java.lang.String , java.lang.String . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doThrow ( new DataRetrievalFailureException ( STRING , new DocumentDoesNotExistException ( ) ) ) . when ( org.springframework.data.couchbase.repository.CouchbaseOperations ) . remove ( STRING ) ; doThrow ( new DataRetrievalFailureException ( STRING ) ) . when ( org.springframework.data.couchbase.repository.CouchbaseOperations ) . remove ( STRING ) ; try { org.springframework.data.couchbase.repository.N1qlCouchbaseRepository<java.lang.String,java.lang.String> . deleteAll ( ) ; fail ( STRING ) ; } catch ( DataRetrievalFailureException org.springframework.data.couchbase.repository.DataRetrievalFailureException ) { if ( ! STRING . boolean ( org.springframework.data.couchbase.repository.DataRetrievalFailureException . getMessage ( ) ) ) { fail ( STRING ) ; } } verify ( org.springframework.data.couchbase.repository.CouchbaseOperations ) . remove ( STRING ) ; verify ( org.springframework.data.couchbase.repository.CouchbaseOperations ) . remove ( STRING ) ; }  <METHOD_END>
