<METHOD_START> @ Before public void void ( ) { org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver . setWarnLogCategory ( org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver . getClass ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpRequestMethodNotSupportedException org.springframework.web.servlet.mvc.support.HttpRequestMethodNotSupportedException = new HttpRequestMethodNotSupportedException ( STRING , new java.lang.String [] { STRING , STRING } ) ; ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView = org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.support.MockHttpServletRequest , org.springframework.web.servlet.mvc.support.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.support.HttpRequestMethodNotSupportedException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpMediaTypeNotSupportedException org.springframework.web.servlet.mvc.support.HttpMediaTypeNotSupportedException = new HttpMediaTypeNotSupportedException ( new MediaType ( STRING , STRING ) , java.util.Collections . java.util.List ( new MediaType ( STRING , STRING ) ) ) ; ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView = org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.support.MockHttpServletRequest , org.springframework.web.servlet.mvc.support.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.support.HttpMediaTypeNotSupportedException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodParameter org.springframework.web.servlet.mvc.support.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; MissingPathVariableException org.springframework.web.servlet.mvc.support.MissingPathVariableException = new MissingPathVariableException ( STRING , org.springframework.web.servlet.mvc.support.MethodParameter ) ; ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView = org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.support.MockHttpServletRequest , org.springframework.web.servlet.mvc.support.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.support.MissingPathVariableException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getErrorMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MissingServletRequestParameterException org.springframework.web.servlet.mvc.support.MissingServletRequestParameterException = new MissingServletRequestParameterException ( STRING , STRING ) ; ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView = org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.support.MockHttpServletRequest , org.springframework.web.servlet.mvc.support.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.support.MissingServletRequestParameterException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getErrorMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; ServletRequestBindingException org.springframework.web.servlet.mvc.support.ServletRequestBindingException = new ServletRequestBindingException ( java.lang.String ) ; ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView = org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.support.MockHttpServletRequest , org.springframework.web.servlet.mvc.support.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.support.ServletRequestBindingException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeMismatchException org.springframework.web.servlet.mvc.support.TypeMismatchException = new TypeMismatchException ( STRING , java.lang.String .class ) ; ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView = org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.support.MockHttpServletRequest , org.springframework.web.servlet.mvc.support.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.support.TypeMismatchException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpMessageNotReadableException org.springframework.web.servlet.mvc.support.HttpMessageNotReadableException = new HttpMessageNotReadableException ( STRING ) ; ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView = org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.support.MockHttpServletRequest , org.springframework.web.servlet.mvc.support.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.support.HttpMessageNotReadableException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpMessageNotWritableException org.springframework.web.servlet.mvc.support.HttpMessageNotWritableException = new HttpMessageNotWritableException ( STRING ) ; ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView = org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.support.MockHttpServletRequest , org.springframework.web.servlet.mvc.support.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.support.HttpMessageNotWritableException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanPropertyBindingResult org.springframework.web.servlet.mvc.support.BeanPropertyBindingResult = new BeanPropertyBindingResult ( new TestBean ( ) , STRING ) ; org.springframework.web.servlet.mvc.support.BeanPropertyBindingResult . rejectValue ( STRING , STRING ) ; MethodParameter org.springframework.web.servlet.mvc.support.MethodParameter = new MethodParameter ( this . java.lang.Class<? extends org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) , NUMBER ) ; MethodArgumentNotValidException org.springframework.web.servlet.mvc.support.MethodArgumentNotValidException = new MethodArgumentNotValidException ( org.springframework.web.servlet.mvc.support.MethodParameter , org.springframework.web.servlet.mvc.support.BeanPropertyBindingResult ) ; ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView = org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.support.MockHttpServletRequest , org.springframework.web.servlet.mvc.support.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.support.MethodArgumentNotValidException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MissingServletRequestPartException org.springframework.web.servlet.mvc.support.MissingServletRequestPartException = new MissingServletRequestPartException ( STRING ) ; ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView = org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.support.MockHttpServletRequest , org.springframework.web.servlet.mvc.support.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.support.MissingServletRequestPartException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getStatus ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getErrorMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getErrorMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getErrorMessage ( ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BindException org.springframework.web.servlet.mvc.support.BindException = new BindException ( new java.lang.Object ( ) , STRING ) ; ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView = org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.support.MockHttpServletRequest , org.springframework.web.servlet.mvc.support.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.support.BindException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletServerHttpRequest org.springframework.web.servlet.mvc.support.ServletServerHttpRequest = new ServletServerHttpRequest ( new MockHttpServletRequest ( STRING , STRING ) ) ; NoHandlerFoundException org.springframework.web.servlet.mvc.support.NoHandlerFoundException = new NoHandlerFoundException ( org.springframework.web.servlet.mvc.support.ServletServerHttpRequest . getMethod ( ) . name ( ) , org.springframework.web.servlet.mvc.support.ServletServerHttpRequest . getServletRequest ( ) . getRequestURI ( ) , org.springframework.web.servlet.mvc.support.ServletServerHttpRequest . getHeaders ( ) ) ; ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView = org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.support.MockHttpServletRequest , org.springframework.web.servlet.mvc.support.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.support.NoHandlerFoundException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConversionNotSupportedException org.springframework.web.servlet.mvc.support.ConversionNotSupportedException = new ConversionNotSupportedException ( new java.lang.Object ( ) , java.lang.String .class , new java.lang.Exception ( ) ) ; ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView = org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.support.MockHttpServletRequest , org.springframework.web.servlet.mvc.support.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.support.ConversionNotSupportedException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getStatus ( ) ) ; assertSame ( org.springframework.web.servlet.mvc.support.ConversionNotSupportedException , org.springframework.web.servlet.mvc.support.MockHttpServletRequest . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Exception java.lang.Exception = new AsyncRequestTimeoutException ( ) ; ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView = org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.support.MockHttpServletRequest , org.springframework.web.servlet.mvc.support.MockHttpServletResponse , null , java.lang.Exception ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.support.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.support.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.String java.lang.String ) {	}  <METHOD_END>
