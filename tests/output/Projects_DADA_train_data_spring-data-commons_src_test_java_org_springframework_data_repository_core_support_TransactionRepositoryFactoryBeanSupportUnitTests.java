<METHOD_START> @ Test public void void ( ) { org.springframework.data.repository.core.support.TransactionRepositoryFactoryBeanSupportUnitTests.SampleTransactionalRepositoryFactoryBean org.springframework.data.repository.core.support.TransactionRepositoryFactoryBeanSupportUnitTests.SampleTransactionalRepositoryFactoryBean = new org.springframework.data.repository.core.support.TransactionRepositoryFactoryBeanSupportUnitTests.SampleTransactionalRepositoryFactoryBean ( ) ; org.springframework.data.repository.core.support.TransactionRepositoryFactoryBeanSupportUnitTests.SampleTransactionalRepositoryFactoryBean . setEnableDefaultTransactions ( false ) ; org.springframework.data.repository.core.support.TransactionRepositoryFactoryBeanSupportUnitTests.SampleTransactionalRepositoryFactoryBean . setBeanFactory ( new DefaultListableBeanFactory ( ) ) ; org.springframework.data.repository.core.support.TransactionRepositoryFactoryBeanSupportUnitTests.SampleTransactionalRepositoryFactoryBean . afterPropertiesSet ( ) ; CrudRepository < java.lang.Object , java.lang.Long > org.springframework.data.repository.core.support.CrudRepository<java.lang.Object,java.lang.Long> = org.springframework.data.repository.core.support.TransactionRepositoryFactoryBeanSupportUnitTests.SampleTransactionalRepositoryFactoryBean . getObject ( ) ; Advisor [] org.springframework.data.repository.core.support.Advisor[] = ( ( Advised ) org.springframework.data.repository.core.support.CrudRepository<java.lang.Object,java.lang.Long> ) . getAdvisors ( ) ; boolean boolean = false ; for ( Advisor org.springframework.data.repository.core.support.Advisor : org.springframework.data.repository.core.support.Advisor[] ) { if ( org.springframework.data.repository.core.support.Advisor . getAdvice ( ) instanceof TransactionInterceptor ) { boolean = true ; TransactionInterceptor org.springframework.data.repository.core.support.TransactionInterceptor = ( TransactionInterceptor ) org.springframework.data.repository.core.support.Advisor . getAdvice ( ) ; assertThat ( getField ( org.springframework.data.repository.core.support.TransactionInterceptor . getTransactionAttributeSource ( ) , STRING ) ) . isEqualTo ( false ) ; break; } } assertThat ( boolean ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.repository.core.support.TransactionRepositoryFactoryBeanSupportUnitTests.SampleTransactionalRepositoryFactoryBean org.springframework.data.repository.core.support.TransactionRepositoryFactoryBeanSupportUnitTests.SampleTransactionalRepositoryFactoryBean = new org.springframework.data.repository.core.support.TransactionRepositoryFactoryBeanSupportUnitTests.SampleTransactionalRepositoryFactoryBean ( ) ; org.springframework.data.repository.core.support.TransactionRepositoryFactoryBeanSupportUnitTests.SampleTransactionalRepositoryFactoryBean . setBeanFactory ( new DefaultListableBeanFactory ( ) ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.data.repository.core.support.TransactionRepositoryFactoryBeanSupportUnitTests.SampleTransactionalRepositoryFactoryBean , RepositoryFactoryBeanSupport .class , STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( ( java.lang.Class ) CrudRepository .class ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.repository.core.support.RepositoryFactorySupport org.springframework.data.repository.core.support.RepositoryFactorySupport ( ) { return new DummyRepositoryFactory ( org.springframework.data.repository.core.support.CrudRepository<java.lang.Object,java.lang.Long> ) ; }  <METHOD_END>
