<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( PropertiesPersister org.springframework.context.support.PropertiesPersister ) { this . org.springframework.context.support.PropertiesPersister = ( org.springframework.context.support.PropertiesPersister != null ? org.springframework.context.support.PropertiesPersister : new DefaultPropertiesPersister ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceLoader org.springframework.context.support.ResourceLoader ) { this . org.springframework.context.support.ResourceLoader = ( org.springframework.context.support.ResourceLoader != null ? org.springframework.context.support.ResourceLoader : new DefaultResourceLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { if ( getCacheMillis ( ) < NUMBER ) { org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.util.Locale ) ; java.lang.String java.lang.String = org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { return java.lang.String ; } } else { for ( java.lang.String java.lang.String : getBasenameSet ( ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.lang.String , java.util.Locale ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.lang.String ) ; java.lang.String java.lang.String = org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { return java.lang.String ; } } } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.text.MessageFormat java.text.MessageFormat ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { if ( getCacheMillis ( ) < NUMBER ) { org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.util.Locale ) ; java.text.MessageFormat java.text.MessageFormat = org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . java.text.MessageFormat ( java.lang.String , java.util.Locale ) ; if ( java.text.MessageFormat != null ) { return java.text.MessageFormat ; } } else { for ( java.lang.String java.lang.String : getBasenameSet ( ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.lang.String , java.util.Locale ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.lang.String ) ; java.text.MessageFormat java.text.MessageFormat = org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . java.text.MessageFormat ( java.lang.String , java.util.Locale ) ; if ( java.text.MessageFormat != null ) { return java.text.MessageFormat ; } } } } return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.util.Locale java.util.Locale ) { org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = this . java.util.concurrent.ConcurrentMap<java.util.Locale,org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder> . org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.util.Locale ) ; if ( org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder != null ) { return org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ; } java.util.Properties java.util.Properties = java.util.Properties ( ) ; long long = - NUMBER ; java.lang.String [] java.lang.String[] = StringUtils . toStringArray ( getBasenameSet ( ) ) ; for ( int int = java.lang.String[] . int - NUMBER ; int >= NUMBER ; int -- ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.lang.String[] [ int ] , java.util.Locale ) ; for ( int int = java.util.List<java.lang.String> . int ( ) - NUMBER ; int >= NUMBER ; int -- ) { java.lang.String java.lang.String = java.util.List<java.lang.String> . java.lang.String ( int ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.lang.String ) ; if ( org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . java.util.Properties ( ) != null ) { java.util.Properties . void ( org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . java.util.Properties ( ) ) ; if ( org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . long ( ) > long ) { long = org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . long ( ) ; } } } } org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = new org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.util.Properties , long ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = this . java.util.concurrent.ConcurrentMap<java.util.Locale,org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder> . org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.util.Locale , org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ) ; if ( org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder != null ) { org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ; } return org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ; }  <METHOD_END>
<METHOD_START> protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { java.util.Map<java.util.Locale,java.util.List<java.lang.String>> < java.util.Locale , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.util.Locale,java.util.List<java.lang.String>> = this . java.util.concurrent.ConcurrentMap<java.lang.String,java.util.Map<java.util.Locale,java.util.List<java.lang.String>>> . java.util.Map<java.util.Locale,java.util.List<java.lang.String>> ( java.lang.String ) ; if ( java.util.Map<java.util.Locale,java.util.List<java.lang.String>> != null ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Map<java.util.Locale,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.util.Locale ) ; if ( java.util.List<java.lang.String> != null ) { return java.util.List<java.lang.String> ; } } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( NUMBER ) ; java.util.List<java.lang.String> . boolean ( java.util.List<java.lang.String> ( java.lang.String , java.util.Locale ) ) ; if ( isFallbackToSystemLocale ( ) && ! java.util.Locale . boolean ( java.util.Locale . java.util.Locale ( ) ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.lang.String , java.util.Locale . java.util.Locale ( ) ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { if ( ! java.util.List<java.lang.String> . boolean ( java.lang.String ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } } java.util.List<java.lang.String> . boolean ( java.lang.String ) ; if ( java.util.Map<java.util.Locale,java.util.List<java.lang.String>> == null ) { java.util.Map<java.util.Locale,java.util.List<java.lang.String>> = new java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.List<java.lang.String>> <> ( ) ; java.util.Map<java.util.Locale,java.util.List<java.lang.String>> < java.util.Locale , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.util.Locale,java.util.List<java.lang.String>> = this . java.util.concurrent.ConcurrentMap<java.lang.String,java.util.Map<java.util.Locale,java.util.List<java.lang.String>>> . java.util.Map<java.util.Locale,java.util.List<java.lang.String>> ( java.lang.String , java.util.Map<java.util.Locale,java.util.List<java.lang.String>> ) ; if ( java.util.Map<java.util.Locale,java.util.List<java.lang.String>> != null ) { java.util.Map<java.util.Locale,java.util.List<java.lang.String>> = java.util.Map<java.util.Locale,java.util.List<java.lang.String>> ; } } java.util.Map<java.util.Locale,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.util.Locale , java.util.List<java.lang.String> ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( NUMBER ) ; java.lang.String java.lang.String = java.util.Locale . java.lang.String ( ) ; java.lang.String java.lang.String = java.util.Locale . java.lang.String ( ) ; java.lang.String java.lang.String = java.util.Locale . java.lang.String ( ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '_' ) ; if ( java.lang.String . int ( ) > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; java.util.List<java.lang.String> . void ( NUMBER , java.lang.StringBuilder . java.lang.String ( ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( '_' ) ; if ( java.lang.String . int ( ) > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; java.util.List<java.lang.String> . void ( NUMBER , java.lang.StringBuilder . java.lang.String ( ) ) ; } if ( java.lang.String . int ( ) > NUMBER && ( java.lang.String . int ( ) > NUMBER || java.lang.String . int ( ) > NUMBER ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( '_' ) . java.lang.StringBuilder ( java.lang.String ) ; java.util.List<java.lang.String> . void ( NUMBER , java.lang.StringBuilder . java.lang.String ( ) ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.lang.String java.lang.String ) { org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder> . org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.lang.String ) ; long long = - NUMBER ; if ( org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder != null ) { long = org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . long ( ) ; if ( long == - NUMBER || long > java.lang.System . long ( ) - getCacheMillis ( ) ) { return org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ; } } else { org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = new org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder> . org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.lang.String , org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ) ; if ( org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder != null ) { org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ; } } if ( this . boolean && org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . long ( ) >= NUMBER ) { if ( ! org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . java.util.concurrent.locks.ReentrantLock . boolean ( ) ) { return org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ; } } else { org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . java.util.concurrent.locks.ReentrantLock . void ( ) ; } try { org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder> . org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.lang.String ) ; if ( org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder != null && org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . long ( ) > long ) { return org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ; } return org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.lang.String , org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ) ; } finally { org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . java.util.concurrent.locks.ReentrantLock . void ( ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.lang.String java.lang.String , org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ) { long long = ( getCacheMillis ( ) < NUMBER ? - NUMBER : java.lang.System . long ( ) ) ; Resource org.springframework.context.support.Resource = this . org.springframework.context.support.ResourceLoader . getResource ( java.lang.String + java.lang.String ) ; if ( ! org.springframework.context.support.Resource . exists ( ) ) { org.springframework.context.support.Resource = this . org.springframework.context.support.ResourceLoader . getResource ( java.lang.String + java.lang.String ) ; } if ( org.springframework.context.support.Resource . exists ( ) ) { long long = - NUMBER ; if ( getCacheMillis ( ) >= NUMBER ) { try { long = org.springframework.context.support.Resource . lastModified ( ) ; if ( org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder != null && org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . long ( ) == long ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . void ( long ) ; return org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ; } } catch ( java.io.IOException java.io.IOException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( org.springframework.context.support.Resource + STRING , java.io.IOException ) ; } long = - NUMBER ; } } try { java.util.Properties java.util.Properties = java.util.Properties ( org.springframework.context.support.Resource , java.lang.String ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = new org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.util.Properties , long ) ; } catch ( java.io.IOException java.io.IOException ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + org.springframework.context.support.Resource . getFilename ( ) + STRING , java.io.IOException ) ; } org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = new org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( ) ; } } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder = new org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( ) ; } org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder . void ( long ) ; this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder> . org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ( java.lang.String , org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ) ; return org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder ; }  <METHOD_END>
<METHOD_START> protected java.util.Properties java.util.Properties ( Resource org.springframework.context.support.Resource , java.lang.String java.lang.String ) throws java.io.IOException { java.io.InputStream java.io.InputStream = org.springframework.context.support.Resource . getInputStream ( ) ; java.util.Properties java.util.Properties = java.util.Properties ( ) ; try { if ( org.springframework.context.support.Resource . getFilename ( ) . endsWith ( java.lang.String ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.context.support.Resource . getFilename ( ) + STRING ) ; } this . org.springframework.context.support.PropertiesPersister . loadFromXml ( java.util.Properties , java.io.InputStream ) ; } else { java.lang.String java.lang.String = null ; if ( this . java.util.Properties != null ) { java.lang.String = this . java.util.Properties . java.lang.String ( java.lang.String ) ; } if ( java.lang.String == null ) { java.lang.String = getDefaultEncoding ( ) ; } if ( java.lang.String != null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.context.support.Resource . getFilename ( ) + STRING + java.lang.String + STRING ) ; } this . org.springframework.context.support.PropertiesPersister . load ( java.util.Properties , new java.io.InputStreamReader ( java.io.InputStream , java.lang.String ) ) ; } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.context.support.Resource . getFilename ( ) + STRING ) ; } this . org.springframework.context.support.PropertiesPersister . load ( java.util.Properties , java.io.InputStream ) ; } } return java.util.Properties ; } finally { java.io.InputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> protected java.util.Properties java.util.Properties ( ) { return new java.util.Properties ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { logger . debug ( STRING ) ; this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder> . void ( ) ; this . java.util.concurrent.ConcurrentMap<java.util.Locale,org.springframework.context.support.ReloadableResourceBundleMessageSource.PropertiesHolder> . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( ) ; if ( getParentMessageSource ( ) instanceof org.springframework.context.support.ReloadableResourceBundleMessageSource ) { ( ( org.springframework.context.support.ReloadableResourceBundleMessageSource ) getParentMessageSource ( ) ) . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.context.support.ReloadableResourceBundleMessageSource> ( ) . java.lang.String ( ) + STRING + getBasenameSet ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { this . java.util.Properties = null ; this . long = - NUMBER ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Properties java.util.Properties , long long ) { this . java.util.Properties = java.util.Properties ; this . long = long ; }  <METHOD_END>
<METHOD_START> public java.util.Properties java.util.Properties ( ) { return this . java.util.Properties ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( this . java.util.Properties == null ) { return null ; } return this . java.util.Properties . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.text.MessageFormat java.text.MessageFormat ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { if ( this . java.util.Properties == null ) { return null ; } java.util.Map<java.util.Locale,java.text.MessageFormat> < java.util.Locale , java.text.MessageFormat > java.util.Map<java.util.Locale,java.text.MessageFormat> = this . java.util.concurrent.ConcurrentMap<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> . java.util.Map<java.util.Locale,java.text.MessageFormat> ( java.lang.String ) ; if ( java.util.Map<java.util.Locale,java.text.MessageFormat> != null ) { java.text.MessageFormat java.text.MessageFormat = java.util.Map<java.util.Locale,java.text.MessageFormat> . java.text.MessageFormat ( java.util.Locale ) ; if ( java.text.MessageFormat != null ) { return java.text.MessageFormat ; } } java.lang.String java.lang.String = this . java.util.Properties . java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { if ( java.util.Map<java.util.Locale,java.text.MessageFormat> == null ) { java.util.Map<java.util.Locale,java.text.MessageFormat> = new java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.text.MessageFormat> <> ( ) ; java.util.Map<java.util.Locale,java.text.MessageFormat> < java.util.Locale , java.text.MessageFormat > java.util.Map<java.util.Locale,java.text.MessageFormat> = this . java.util.concurrent.ConcurrentMap<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> . java.util.Map<java.util.Locale,java.text.MessageFormat> ( java.lang.String , java.util.Map<java.util.Locale,java.text.MessageFormat> ) ; if ( java.util.Map<java.util.Locale,java.text.MessageFormat> != null ) { java.util.Map<java.util.Locale,java.text.MessageFormat> = java.util.Map<java.util.Locale,java.text.MessageFormat> ; } } java.text.MessageFormat java.text.MessageFormat = createMessageFormat ( java.lang.String , java.util.Locale ) ; java.util.Map<java.util.Locale,java.text.MessageFormat> . java.text.MessageFormat ( java.util.Locale , java.text.MessageFormat ) ; return java.text.MessageFormat ; } return null ; }  <METHOD_END>
