<METHOD_START> public static org.springframework.scheduling.quartz.ResourceLoader org.springframework.scheduling.quartz.ResourceLoader ( ) { return java.lang.ThreadLocal<org.springframework.scheduling.quartz.ResourceLoader> . get ( ) ; }  <METHOD_END>
<METHOD_START> public static java.util.concurrent.Executor java.util.concurrent.Executor ( ) { return java.lang.ThreadLocal<java.util.concurrent.Executor> . java.util.concurrent.Executor ( ) ; }  <METHOD_END>
<METHOD_START> public static javax.sql.DataSource javax.sql.DataSource ( ) { return java.lang.ThreadLocal<javax.sql.DataSource> . javax.sql.DataSource ( ) ; }  <METHOD_END>
<METHOD_START> public static javax.sql.DataSource javax.sql.DataSource ( ) { return java.lang.ThreadLocal<javax.sql.DataSource> . javax.sql.DataSource ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<? extends org.springframework.scheduling.quartz.SchedulerFactory> < ? extends SchedulerFactory > java.lang.Class<? extends org.springframework.scheduling.quartz.SchedulerFactory> ) { this . java.lang.Class<? extends org.springframework.scheduling.quartz.SchedulerFactory> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Resource org.springframework.scheduling.quartz.Resource ) { this . org.springframework.scheduling.quartz.Resource = org.springframework.scheduling.quartz.Resource ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { this . java.util.concurrent.Executor = java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> public void void ( javax.sql.DataSource javax.sql.DataSource ) { this . javax.sql.DataSource = javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> public void void ( javax.sql.DataSource javax.sql.DataSource ) { this . javax.sql.DataSource = javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { this . java.util.Map<java.lang.String,?> = java.util.Map<java.lang.String,> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( JobFactory org.springframework.scheduling.quartz.JobFactory ) { this . org.springframework.scheduling.quartz.JobFactory = org.springframework.scheduling.quartz.JobFactory ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { if ( this . java.lang.String == null ) { this . java.lang.String = java.lang.String ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.scheduling.quartz.ApplicationContext ) { this . org.springframework.scheduling.quartz.ApplicationContext = org.springframework.scheduling.quartz.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( this . javax.sql.DataSource == null && this . javax.sql.DataSource != null ) { this . javax.sql.DataSource = this . javax.sql.DataSource ; } if ( this . org.springframework.scheduling.quartz.ApplicationContext != null && this . resourceLoader == null ) { this . resourceLoader = this . org.springframework.scheduling.quartz.ApplicationContext ; } SchedulerFactory org.springframework.scheduling.quartz.SchedulerFactory = BeanUtils . instantiateClass ( this . java.lang.Class<> ) ; void ( org.springframework.scheduling.quartz.SchedulerFactory ) ; if ( this . resourceLoader != null ) { java.lang.ThreadLocal<org.springframework.scheduling.quartz.ResourceLoader> . set ( this . resourceLoader ) ; } if ( this . java.util.concurrent.Executor != null ) { java.lang.ThreadLocal<java.util.concurrent.Executor> . void ( this . java.util.concurrent.Executor ) ; } if ( this . javax.sql.DataSource != null ) { java.lang.ThreadLocal<javax.sql.DataSource> . void ( this . javax.sql.DataSource ) ; } if ( this . javax.sql.DataSource != null ) { java.lang.ThreadLocal<javax.sql.DataSource> . void ( this . javax.sql.DataSource ) ; } try { this . org.springframework.scheduling.quartz.Scheduler = org.springframework.scheduling.quartz.Scheduler ( org.springframework.scheduling.quartz.SchedulerFactory , this . java.lang.String ) ; void ( ) ; if ( ! this . boolean && ! ( this . org.springframework.scheduling.quartz.Scheduler instanceof RemoteScheduler ) ) { this . org.springframework.scheduling.quartz.JobFactory = new AdaptableJobFactory ( ) ; } if ( this . org.springframework.scheduling.quartz.JobFactory != null ) { if ( this . org.springframework.scheduling.quartz.JobFactory instanceof SchedulerContextAware ) { ( ( SchedulerContextAware ) this . org.springframework.scheduling.quartz.JobFactory ) . setSchedulerContext ( this . org.springframework.scheduling.quartz.Scheduler . getContext ( ) ) ; } this . org.springframework.scheduling.quartz.Scheduler . setJobFactory ( this . org.springframework.scheduling.quartz.JobFactory ) ; } } finally { if ( this . resourceLoader != null ) { java.lang.ThreadLocal<org.springframework.scheduling.quartz.ResourceLoader> . remove ( ) ; } if ( this . java.util.concurrent.Executor != null ) { java.lang.ThreadLocal<java.util.concurrent.Executor> . void ( ) ; } if ( this . javax.sql.DataSource != null ) { java.lang.ThreadLocal<javax.sql.DataSource> . void ( ) ; } if ( this . javax.sql.DataSource != null ) { java.lang.ThreadLocal<javax.sql.DataSource> . void ( ) ; } } registerListeners ( ) ; registerJobsAndTriggers ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( SchedulerFactory org.springframework.scheduling.quartz.SchedulerFactory ) throws org.springframework.scheduling.quartz.SchedulerException , java.io.IOException { if ( ! ( org.springframework.scheduling.quartz.SchedulerFactory instanceof StdSchedulerFactory ) ) { if ( this . org.springframework.scheduling.quartz.Resource != null || this . java.util.Properties != null || this . java.util.concurrent.Executor != null || this . javax.sql.DataSource != null ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.scheduling.quartz.SchedulerFactory ) ; } return; } java.util.Properties java.util.Properties = new java.util.Properties ( ) ; if ( this . resourceLoader != null ) { java.util.Properties . java.lang.Object ( StdSchedulerFactory . PROP_SCHED_CLASS_LOAD_HELPER_CLASS , ResourceLoaderClassLoadHelper .class . java.lang.String ( ) ) ; } if ( this . java.util.concurrent.Executor != null ) { java.util.Properties . java.lang.Object ( StdSchedulerFactory . PROP_THREAD_POOL_CLASS , LocalTaskExecutorThreadPool .class . java.lang.String ( ) ) ; } else { java.util.Properties . java.lang.Object ( StdSchedulerFactory . PROP_THREAD_POOL_CLASS , SimpleThreadPool .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( java.lang.String , java.lang.Integer . java.lang.String ( int ) ) ; } if ( this . org.springframework.scheduling.quartz.Resource != null ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + this . org.springframework.scheduling.quartz.Resource + STRING ) ; } PropertiesLoaderUtils . fillProperties ( java.util.Properties , this . org.springframework.scheduling.quartz.Resource ) ; } CollectionUtils . mergePropertiesIntoMap ( this . java.util.Properties , java.util.Properties ) ; if ( this . javax.sql.DataSource != null ) { java.util.Properties . java.lang.Object ( StdSchedulerFactory . PROP_JOB_STORE_CLASS , LocalDataSourceJobStore .class . java.lang.String ( ) ) ; } if ( this . java.lang.String != null ) { java.util.Properties . java.lang.Object ( StdSchedulerFactory . PROP_SCHED_INSTANCE_NAME , this . java.lang.String ) ; } ( ( StdSchedulerFactory ) org.springframework.scheduling.quartz.SchedulerFactory ) . initialize ( java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.scheduling.quartz.Scheduler org.springframework.scheduling.quartz.Scheduler ( SchedulerFactory org.springframework.scheduling.quartz.SchedulerFactory , java.lang.String java.lang.String )			throws org.springframework.scheduling.quartz.SchedulerException { java.lang.Thread java.lang.Thread = java.lang.Thread . java.lang.Thread ( ) ; java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread . java.lang.ClassLoader ( ) ; boolean boolean = ( this . resourceLoader != null && ! this . resourceLoader . getClassLoader ( ) . equals ( java.lang.ClassLoader ) ) ; if ( boolean ) { java.lang.Thread . void ( this . resourceLoader . getClassLoader ( ) ) ; } try { SchedulerRepository org.springframework.scheduling.quartz.SchedulerRepository = SchedulerRepository . getInstance ( ) ; synchronized ( org.springframework.scheduling.quartz.SchedulerRepository ) { Scheduler org.springframework.scheduling.quartz.Scheduler = ( java.lang.String != null ? org.springframework.scheduling.quartz.SchedulerRepository . lookup ( java.lang.String ) : null ) ; Scheduler org.springframework.scheduling.quartz.Scheduler = org.springframework.scheduling.quartz.SchedulerFactory . getScheduler ( ) ; if ( org.springframework.scheduling.quartz.Scheduler == org.springframework.scheduling.quartz.Scheduler ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING + STRING ) ; } if ( ! this . boolean ) { SchedulerRepository . getInstance ( ) . remove ( org.springframework.scheduling.quartz.Scheduler . getSchedulerName ( ) ) ; } return org.springframework.scheduling.quartz.Scheduler ; } } finally { if ( boolean ) { java.lang.Thread . void ( java.lang.ClassLoader ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) org.springframework.scheduling.quartz.SchedulerException { if ( this . java.util.Map<java.lang.String,> != null ) { this . org.springframework.scheduling.quartz.Scheduler . getContext ( ) . putAll ( this . java.util.Map<java.lang.String,> ) ; } if ( this . java.lang.String != null ) { if ( this . org.springframework.scheduling.quartz.ApplicationContext == null ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } this . org.springframework.scheduling.quartz.Scheduler . getContext ( ) . put ( this . java.lang.String , this . org.springframework.scheduling.quartz.ApplicationContext ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( final Scheduler org.springframework.scheduling.quartz.Scheduler , final int int ) throws org.springframework.scheduling.quartz.SchedulerException { if ( int <= NUMBER ) { logger . info ( STRING ) ; org.springframework.scheduling.quartz.Scheduler . start ( ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + org.springframework.scheduling.quartz.Scheduler . getSchedulerName ( ) + STRING + int + STRING ) ; } java.lang.Thread java.lang.Thread = new java.lang.Thread ( ) { @ java.lang.Override public void void ( ) { try { java.lang.Thread . void ( int * NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { } if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + int + STRING ) ; } try { org.springframework.scheduling.quartz.Scheduler . start ( ) ; } catch ( SchedulerException org.springframework.scheduling.quartz.SchedulerException ) { throw new SchedulingException ( STRING , org.springframework.scheduling.quartz.SchedulerException ) ; } } } ; java.lang.Thread . void ( STRING + org.springframework.scheduling.quartz.Scheduler . getSchedulerName ( ) + STRING ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { java.lang.Thread . void ( int * NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { } if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + int + STRING ) ; } try { org.springframework.scheduling.quartz.Scheduler . start ( ) ; } catch ( SchedulerException org.springframework.scheduling.quartz.SchedulerException ) { throw new SchedulingException ( STRING , org.springframework.scheduling.quartz.SchedulerException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.scheduling.quartz.Scheduler org.springframework.scheduling.quartz.Scheduler ( ) { return this . org.springframework.scheduling.quartz.Scheduler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.scheduling.quartz.Scheduler org.springframework.scheduling.quartz.Scheduler ( ) { return this . org.springframework.scheduling.quartz.Scheduler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends org.springframework.scheduling.quartz.Scheduler> < ? extends Scheduler > java.lang.Class<? extends org.springframework.scheduling.quartz.Scheduler> ( ) { return ( this . org.springframework.scheduling.quartz.Scheduler != null ) ? this . org.springframework.scheduling.quartz.Scheduler . getClass ( ) : Scheduler .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.scheduling.quartz.SchedulingException { if ( this . org.springframework.scheduling.quartz.Scheduler != null ) { try { void ( this . org.springframework.scheduling.quartz.Scheduler , this . int ) ; } catch ( SchedulerException org.springframework.scheduling.quartz.SchedulerException ) { throw new SchedulingException ( STRING , org.springframework.scheduling.quartz.SchedulerException ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.scheduling.quartz.SchedulingException { if ( this . org.springframework.scheduling.quartz.Scheduler != null ) { try { this . org.springframework.scheduling.quartz.Scheduler . standby ( ) ; } catch ( SchedulerException org.springframework.scheduling.quartz.SchedulerException ) { throw new SchedulingException ( STRING , org.springframework.scheduling.quartz.SchedulerException ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) throws org.springframework.scheduling.quartz.SchedulingException { void ( ) ; java.lang.Runnable . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) org.springframework.scheduling.quartz.SchedulingException { if ( this . org.springframework.scheduling.quartz.Scheduler != null ) { try { return ! this . org.springframework.scheduling.quartz.Scheduler . isInStandbyMode ( ) ; } catch ( SchedulerException org.springframework.scheduling.quartz.SchedulerException ) { return false ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.scheduling.quartz.SchedulerException { logger . info ( STRING ) ; this . org.springframework.scheduling.quartz.Scheduler . shutdown ( this . boolean ) ; }  <METHOD_END>
