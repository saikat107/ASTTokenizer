<METHOD_START> public void ( Client org.springframework.boot.actuate.health.Client , ElasticsearchHealthIndicatorProperties org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorProperties ) { this . org.springframework.boot.actuate.health.Client = org.springframework.boot.actuate.health.Client ; this . org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorProperties = org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorProperties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Health . Health Health.Builder ) throws java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorProperties . getIndices ( ) ; ClusterHealthResponse org.springframework.boot.actuate.health.ClusterHealthResponse = this . org.springframework.boot.actuate.health.Client . admin ( ) . cluster ( ) . health ( Requests . clusterHealthRequest ( java.util.List<java.lang.String> . boolean ( ) ? java.lang.String[] : java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ) ) . actionGet ( this . org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorProperties . getResponseTimeout ( ) ) ; switch ( org.springframework.boot.actuate.health.ClusterHealthResponse . getStatus ( ) ) { case GREEN : case YELLOW : Health.Builder . up ( ) ; break; case RED : default: Health.Builder . down ( ) ; break; } Health.Builder . withDetail ( STRING , org.springframework.boot.actuate.health.ClusterHealthResponse . getClusterName ( ) ) ; Health.Builder . withDetail ( STRING , org.springframework.boot.actuate.health.ClusterHealthResponse . getNumberOfNodes ( ) ) ; Health.Builder . withDetail ( STRING , org.springframework.boot.actuate.health.ClusterHealthResponse . getNumberOfDataNodes ( ) ) ; Health.Builder . withDetail ( STRING , org.springframework.boot.actuate.health.ClusterHealthResponse . getActivePrimaryShards ( ) ) ; Health.Builder . withDetail ( STRING , org.springframework.boot.actuate.health.ClusterHealthResponse . getActiveShards ( ) ) ; Health.Builder . withDetail ( STRING , org.springframework.boot.actuate.health.ClusterHealthResponse . getRelocatingShards ( ) ) ; Health.Builder . withDetail ( STRING , org.springframework.boot.actuate.health.ClusterHealthResponse . getInitializingShards ( ) ) ; Health.Builder . withDetail ( STRING , org.springframework.boot.actuate.health.ClusterHealthResponse . getUnassignedShards ( ) ) ; }  <METHOD_END>
