<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { AspectJExpressionPointcut org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut . setExpression ( AspectJExpressionPointcutTests . MATCH_ALL_METHODS ) ; InstantiationModelAwarePointcutAdvisorImpl org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl = new InstantiationModelAwarePointcutAdvisorImpl ( org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut , TestBean .class . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory , new SingletonMetadataAwareAspectInstanceFactory ( new AbstractAspectJAdvisorFactoryTests . AbstractAspectJAdvisorFactoryTests ( null ) , STRING ) , NUMBER , STRING ) ; assertSame ( Pointcut . TRUE , org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getAspectMetadata ( ) . getPerClausePointcut ( ) ) ; assertFalse ( org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . isPerInstance ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { AspectJExpressionPointcut org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut . setExpression ( AspectJExpressionPointcutTests . MATCH_ALL_METHODS ) ; InstantiationModelAwarePointcutAdvisorImpl org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl = new InstantiationModelAwarePointcutAdvisorImpl ( org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut , TestBean .class . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory , new SingletonMetadataAwareAspectInstanceFactory ( new PerTargetAspect ( ) , STRING ) , NUMBER , STRING ) ; assertNotSame ( Pointcut . TRUE , org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getAspectMetadata ( ) . getPerClausePointcut ( ) ) ; assertTrue ( org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getAspectMetadata ( ) . getPerClausePointcut ( ) instanceof AspectJExpressionPointcut ) ; assertTrue ( org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . isPerInstance ( ) ) ; assertTrue ( org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getAspectMetadata ( ) . getPerClausePointcut ( ) . getClassFilter ( ) . matches ( TestBean .class ) ) ; assertFalse ( org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getAspectMetadata ( ) . getPerClausePointcut ( ) . getMethodMatcher ( ) . matches ( TestBean .class . java.lang.reflect.Method ( STRING ) , TestBean .class ) ) ; assertTrue ( org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getAspectMetadata ( ) . getPerClausePointcut ( ) . getMethodMatcher ( ) . matches ( TestBean .class . java.lang.reflect.Method ( STRING ) , TestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = AopConfigException .class ) public void void ( ) { void ( AbstractAspectJAdvisorFactoryTests . AbstractAspectJAdvisorFactoryTests .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = AopConfigException .class ) public void void ( ) { void ( AbstractAspectJAdvisorFactoryTests . AbstractAspectJAdvisorFactoryTests .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws org.springframework.aop.aspectj.annotation.AopConfigException { new AspectMetadata ( java.lang.Class<> , STRING ) ; }  <METHOD_END>
