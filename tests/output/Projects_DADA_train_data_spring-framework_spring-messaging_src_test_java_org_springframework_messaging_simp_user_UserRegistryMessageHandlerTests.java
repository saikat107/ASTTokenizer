<METHOD_START> @ Before public void void ( ) java.lang.Exception { MockitoAnnotations . initMocks ( this ) ; when ( this . org.springframework.messaging.simp.user.MessageChannel . send ( any ( ) ) ) . thenReturn ( true ) ; this . org.springframework.messaging.simp.user.MessageConverter = new MappingJackson2MessageConverter ( ) ; SimpMessagingTemplate org.springframework.messaging.simp.user.SimpMessagingTemplate = new SimpMessagingTemplate ( this . org.springframework.messaging.simp.user.MessageChannel ) ; org.springframework.messaging.simp.user.SimpMessagingTemplate . setMessageConverter ( this . org.springframework.messaging.simp.user.MessageConverter ) ; this . org.springframework.messaging.simp.user.SimpUserRegistry = mock ( SimpUserRegistry .class ) ; this . org.springframework.messaging.simp.user.MultiServerUserRegistry = new MultiServerUserRegistry ( this . org.springframework.messaging.simp.user.SimpUserRegistry ) ; this . org.springframework.messaging.simp.user.UserRegistryMessageHandler = new UserRegistryMessageHandler ( this . org.springframework.messaging.simp.user.MultiServerUserRegistry , org.springframework.messaging.simp.user.SimpMessagingTemplate , STRING , this . org.springframework.messaging.simp.user.TaskScheduler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Runnable java.lang.Runnable = java.lang.Runnable ( ) ; assertNotNull ( java.lang.Runnable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { java.util.concurrent.ScheduledFuture java.util.concurrent.ScheduledFuture = Mockito . mock ( java.util.concurrent.ScheduledFuture .class ) ; when ( this . org.springframework.messaging.simp.user.TaskScheduler . scheduleWithFixedDelay ( any ( java.lang.Runnable .class ) , any ( java.lang.Long .class ) ) ) . thenReturn ( java.util.concurrent.ScheduledFuture ) ; BrokerAvailabilityEvent org.springframework.messaging.simp.user.BrokerAvailabilityEvent = new BrokerAvailabilityEvent ( true , this ) ; this . org.springframework.messaging.simp.user.UserRegistryMessageHandler . onApplicationEvent ( org.springframework.messaging.simp.user.BrokerAvailabilityEvent ) ; verifyNoMoreInteractions ( java.util.concurrent.ScheduledFuture ) ; org.springframework.messaging.simp.user.BrokerAvailabilityEvent = new BrokerAvailabilityEvent ( false , this ) ; this . org.springframework.messaging.simp.user.UserRegistryMessageHandler . onApplicationEvent ( org.springframework.messaging.simp.user.BrokerAvailabilityEvent ) ; verify ( java.util.concurrent.ScheduledFuture ) . cancel ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( new TestSimpSession ( STRING ) ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( new TestSimpSession ( STRING ) ) ; java.util.HashSet<org.springframework.messaging.simp.user.SimpUser> < SimpUser > java.util.HashSet<org.springframework.messaging.simp.user.SimpUser> = new java.util.HashSet <> ( java.util.Arrays . java.util.List ( org.springframework.messaging.simp.user.TestSimpUser , org.springframework.messaging.simp.user.TestSimpUser ) ) ; when ( this . org.springframework.messaging.simp.user.SimpUserRegistry . getUsers ( ) ) . thenReturn ( java.util.HashSet<org.springframework.messaging.simp.user.SimpUser> ) ; java.lang.Runnable ( ) . void ( ) ; ArgumentCaptor < Message > org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> = ArgumentCaptor . forClass ( Message .class ) ; verify ( this . org.springframework.messaging.simp.user.MessageChannel ) . send ( org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> . capture ( ) ) ; Message < ? > org.springframework.messaging.simp.user.Message<?> = org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> . getValue ( ) ; assertNotNull ( org.springframework.messaging.simp.user.Message<> ) ; MessageHeaders org.springframework.messaging.simp.user.MessageHeaders = org.springframework.messaging.simp.user.Message<> . getHeaders ( ) ; assertEquals ( STRING , SimpMessageHeaderAccessor . getDestination ( org.springframework.messaging.simp.user.MessageHeaders ) ) ; MultiServerUserRegistry org.springframework.messaging.simp.user.MultiServerUserRegistry = new MultiServerUserRegistry ( mock ( SimpUserRegistry .class ) ) ; org.springframework.messaging.simp.user.MultiServerUserRegistry . addRemoteRegistryDto ( org.springframework.messaging.simp.user.Message<> , this . org.springframework.messaging.simp.user.MessageConverter , NUMBER ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.user.MultiServerUserRegistry . getUserCount ( ) ) ; assertNotNull ( org.springframework.messaging.simp.user.MultiServerUserRegistry . getUser ( STRING ) ) ; assertNotNull ( org.springframework.messaging.simp.user.MultiServerUserRegistry . getUser ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( new TestSimpSession ( STRING ) ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( new TestSimpSession ( STRING ) ) ; java.util.HashSet<org.springframework.messaging.simp.user.SimpUser> < SimpUser > java.util.HashSet<org.springframework.messaging.simp.user.SimpUser> = new java.util.HashSet <> ( java.util.Arrays . java.util.List ( org.springframework.messaging.simp.user.TestSimpUser , org.springframework.messaging.simp.user.TestSimpUser ) ) ; SimpUserRegistry org.springframework.messaging.simp.user.SimpUserRegistry = mock ( SimpUserRegistry .class ) ; when ( org.springframework.messaging.simp.user.SimpUserRegistry . getUserCount ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.messaging.simp.user.SimpUserRegistry . getUsers ( ) ) . thenReturn ( java.util.HashSet<org.springframework.messaging.simp.user.SimpUser> ) ; MultiServerUserRegistry org.springframework.messaging.simp.user.MultiServerUserRegistry = new MultiServerUserRegistry ( org.springframework.messaging.simp.user.SimpUserRegistry ) ; Message < ? > org.springframework.messaging.simp.user.Message<?> = this . org.springframework.messaging.simp.user.MessageConverter . toMessage ( org.springframework.messaging.simp.user.MultiServerUserRegistry . getLocalRegistryDto ( ) , null ) ; this . org.springframework.messaging.simp.user.UserRegistryMessageHandler . handleMessage ( org.springframework.messaging.simp.user.Message<> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.user.MultiServerUserRegistry . getUserCount ( ) ) ; assertNotNull ( this . org.springframework.messaging.simp.user.MultiServerUserRegistry . getUser ( STRING ) ) ; assertNotNull ( this . org.springframework.messaging.simp.user.MultiServerUserRegistry . getUser ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( new TestSimpSession ( STRING ) ) ; when ( this . org.springframework.messaging.simp.user.SimpUserRegistry . getUserCount ( ) ) . thenReturn ( NUMBER ) ; when ( this . org.springframework.messaging.simp.user.SimpUserRegistry . getUsers ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.messaging.simp.user.TestSimpUser ) ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.user.MultiServerUserRegistry . getUserCount ( ) ) ; Message < ? > org.springframework.messaging.simp.user.Message<?> = this . org.springframework.messaging.simp.user.MessageConverter . toMessage ( this . org.springframework.messaging.simp.user.MultiServerUserRegistry . getLocalRegistryDto ( ) , null ) ; this . org.springframework.messaging.simp.user.MultiServerUserRegistry . addRemoteRegistryDto ( org.springframework.messaging.simp.user.Message<> , this . org.springframework.messaging.simp.user.MessageConverter , NUMBER ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.user.MultiServerUserRegistry . getUserCount ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Runnable java.lang.Runnable ( ) { BrokerAvailabilityEvent org.springframework.messaging.simp.user.BrokerAvailabilityEvent = new BrokerAvailabilityEvent ( true , this ) ; this . org.springframework.messaging.simp.user.UserRegistryMessageHandler . onApplicationEvent ( org.springframework.messaging.simp.user.BrokerAvailabilityEvent ) ; ArgumentCaptor < ? extends java.lang.Runnable > org.springframework.messaging.simp.user.ArgumentCaptor<? extends java.lang.Runnable> = ArgumentCaptor . forClass ( java.lang.Runnable .class ) ; verify ( this . org.springframework.messaging.simp.user.TaskScheduler ) . scheduleWithFixedDelay ( org.springframework.messaging.simp.user.ArgumentCaptor<> . capture ( ) , eq ( NUMBER ) ) ; return org.springframework.messaging.simp.user.ArgumentCaptor<> . getValue ( ) ; }  <METHOD_END>
