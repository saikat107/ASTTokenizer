<METHOD_START> @ After public void void ( ) { if ( org.springframework.statemachine.boot.AnnotationConfigApplicationContext != null ) { org.springframework.statemachine.boot.AnnotationConfigApplicationContext . close ( ) ; } org.springframework.statemachine.boot.AnnotationConfigApplicationContext = null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.boot.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.statemachine.boot.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.boot.StateMachineJpaRepositoriesAutoConfigurationTests.TestConfiguration .class ) ; org.springframework.statemachine.boot.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , HibernateJpaAutoConfiguration .class , JpaRepositoriesAutoConfiguration .class , StateMachineJpaRepositoriesAutoConfiguration .class ) ; org.springframework.statemachine.boot.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.statemachine.boot.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.boot.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.statemachine.boot.AnnotationConfigApplicationContext , STRING ) ; org.springframework.statemachine.boot.AnnotationConfigApplicationContext . register ( StateMachineJpaRepositoriesAutoConfiguration .class ) ; org.springframework.statemachine.boot.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.statemachine.boot.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( false ) ) ; }  <METHOD_END>
