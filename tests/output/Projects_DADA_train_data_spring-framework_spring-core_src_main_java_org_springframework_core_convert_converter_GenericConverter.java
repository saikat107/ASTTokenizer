<METHOD_START> java.util.Set<org.springframework.core.convert.converter.GenericConverter.ConvertiblePair> < org.springframework.core.convert.converter.GenericConverter.ConvertiblePair > java.util.Set<org.springframework.core.convert.converter.GenericConverter.ConvertiblePair> ( )  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.converter.TypeDescriptor , TypeDescriptor org.springframework.core.convert.converter.TypeDescriptor );  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null || java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) != org.springframework.core.convert.converter.GenericConverter.ConvertiblePair .class ) { return false ; } org.springframework.core.convert.converter.GenericConverter.ConvertiblePair org.springframework.core.convert.converter.GenericConverter.ConvertiblePair = ( org.springframework.core.convert.converter.GenericConverter.ConvertiblePair ) java.lang.Object ; return ( this . java.lang.Class<> == org.springframework.core.convert.converter.GenericConverter.ConvertiblePair . java.lang.Class<> && this . java.lang.Class<> == org.springframework.core.convert.converter.GenericConverter.ConvertiblePair . java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( this . java.lang.Class<> . int ( ) * NUMBER + this . java.lang.Class<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( this . java.lang.Class<> . java.lang.String ( ) + STRING + this . java.lang.Class<> . java.lang.String ( ) ) ; }  <METHOD_END>
