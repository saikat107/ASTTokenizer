<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.Resource ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.Resource ) ; BeanFactoryPostProcessor org.springframework.beans.factory.BeanFactoryPostProcessor = ( BeanFactoryPostProcessor ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.BeanFactoryPostProcessor . postProcessBeanFactory ( org.springframework.beans.factory.DefaultListableBeanFactory ) ; assertNull ( org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; org.springframework.beans.factory.FactoryBeanTests.Alpha org.springframework.beans.factory.FactoryBeanTests.Alpha = ( org.springframework.beans.factory.FactoryBeanTests.Alpha ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.FactoryBeanTests.Beta org.springframework.beans.factory.FactoryBeanTests.Beta = ( org.springframework.beans.factory.FactoryBeanTests.Beta ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.FactoryBeanTests.Gamma org.springframework.beans.factory.FactoryBeanTests.Gamma = ( org.springframework.beans.factory.FactoryBeanTests.Gamma ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.FactoryBeanTests.Gamma org.springframework.beans.factory.FactoryBeanTests.Gamma = ( org.springframework.beans.factory.FactoryBeanTests.Gamma ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.FactoryBeanTests.Beta , org.springframework.beans.factory.FactoryBeanTests.Alpha . org.springframework.beans.factory.FactoryBeanTests.Beta ( ) ) ; assertSame ( org.springframework.beans.factory.FactoryBeanTests.Gamma , org.springframework.beans.factory.FactoryBeanTests.Beta . org.springframework.beans.factory.FactoryBeanTests.Gamma ( ) ) ; assertSame ( org.springframework.beans.factory.FactoryBeanTests.Gamma , org.springframework.beans.factory.FactoryBeanTests.Beta . org.springframework.beans.factory.FactoryBeanTests.Gamma ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.FactoryBeanTests.Beta . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.Resource ) ; BeanFactoryPostProcessor org.springframework.beans.factory.BeanFactoryPostProcessor = ( BeanFactoryPostProcessor ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.BeanFactoryPostProcessor . postProcessBeanFactory ( org.springframework.beans.factory.DefaultListableBeanFactory ) ; org.springframework.beans.factory.FactoryBeanTests.Beta org.springframework.beans.factory.FactoryBeanTests.Beta = ( org.springframework.beans.factory.FactoryBeanTests.Beta ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.FactoryBeanTests.Alpha org.springframework.beans.factory.FactoryBeanTests.Alpha = ( org.springframework.beans.factory.FactoryBeanTests.Alpha ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.FactoryBeanTests.Gamma org.springframework.beans.factory.FactoryBeanTests.Gamma = ( org.springframework.beans.factory.FactoryBeanTests.Gamma ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.FactoryBeanTests.Beta , org.springframework.beans.factory.FactoryBeanTests.Alpha . org.springframework.beans.factory.FactoryBeanTests.Beta ( ) ) ; assertSame ( org.springframework.beans.factory.FactoryBeanTests.Gamma , org.springframework.beans.factory.FactoryBeanTests.Beta . org.springframework.beans.factory.FactoryBeanTests.Gamma ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.Resource ) ; org.springframework.beans.factory.DefaultListableBeanFactory . getBeansWithAnnotation ( Component .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.Resource ) ; org.springframework.beans.factory.DefaultListableBeanFactory . getBeansOfType ( org.springframework.beans.factory.FactoryBeanTests.AbstractFactoryBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.Resource ) ; org.springframework.beans.factory.FactoryBeanTests.CountingPostProcessor org.springframework.beans.factory.FactoryBeanTests.CountingPostProcessor = new org.springframework.beans.factory.FactoryBeanTests.CountingPostProcessor ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.FactoryBeanTests.CountingPostProcessor ) ; org.springframework.beans.factory.FactoryBeanTests.BeanImpl1 org.springframework.beans.factory.FactoryBeanTests.BeanImpl1 = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.FactoryBeanTests.BeanImpl1 .class ) ; assertNotNull ( org.springframework.beans.factory.FactoryBeanTests.BeanImpl1 ) ; assertNotNull ( org.springframework.beans.factory.FactoryBeanTests.BeanImpl1 . org.springframework.beans.factory.FactoryBeanTests.BeanImpl2 ( ) ) ; assertNotNull ( org.springframework.beans.factory.FactoryBeanTests.BeanImpl1 . org.springframework.beans.factory.FactoryBeanTests.BeanImpl2 ( ) ) ; assertSame ( org.springframework.beans.factory.FactoryBeanTests.BeanImpl1 , org.springframework.beans.factory.FactoryBeanTests.BeanImpl1 . org.springframework.beans.factory.FactoryBeanTests.BeanImpl2 ( ) . org.springframework.beans.factory.FactoryBeanTests.BeanImpl1 ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.FactoryBeanTests.CountingPostProcessor . int ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.FactoryBeanTests.CountingPostProcessor . int ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.factory.FactoryBeanTests.Beta org.springframework.beans.factory.FactoryBeanTests.Beta ) { this . org.springframework.beans.factory.FactoryBeanTests.Beta = org.springframework.beans.factory.FactoryBeanTests.Beta ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.FactoryBeanTests.Beta org.springframework.beans.factory.FactoryBeanTests.Beta ( ) { return org.springframework.beans.factory.FactoryBeanTests.Beta ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Assert . notNull ( org.springframework.beans.factory.FactoryBeanTests.Beta , STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.factory.FactoryBeanTests.Gamma org.springframework.beans.factory.FactoryBeanTests.Gamma ) { this . org.springframework.beans.factory.FactoryBeanTests.Gamma = org.springframework.beans.factory.FactoryBeanTests.Gamma ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.FactoryBeanTests.Gamma org.springframework.beans.factory.FactoryBeanTests.Gamma ( ) { return org.springframework.beans.factory.FactoryBeanTests.Gamma ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Assert . notNull ( org.springframework.beans.factory.FactoryBeanTests.Gamma , STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.beans.factory.FactoryBeanTests.Alpha org.springframework.beans.factory.FactoryBeanTests.Alpha ) {		}  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.factory.FactoryBeanTests.Beta org.springframework.beans.factory.FactoryBeanTests.Beta ) { this . org.springframework.beans.factory.FactoryBeanTests.Beta = org.springframework.beans.factory.FactoryBeanTests.Beta ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . org.springframework.beans.factory.FactoryBeanTests.Beta ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<T> < T > java.lang.Class<T> ) { this . java.lang.Class<T> = java.lang.Class<T> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.beans.factory.BeanFactory ) { this . org.springframework.beans.factory.BeanFactory = org.springframework.beans.factory.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) { if ( T == null ) { T = org.springframework.beans.factory.BeanFactory . getBean ( java.lang.String , java.lang.Class<T> ) ; } return T ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Class<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { if ( java.lang.Object instanceof FactoryBean ) { return java.lang.Object ; } java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = java.util.Map<java.lang.String,java.util.concurrent.atomic.AtomicInteger> . java.util.concurrent.atomic.AtomicInteger ( java.lang.String ) ; if ( java.util.concurrent.atomic.AtomicInteger == null ) { java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( NUMBER ) ; java.util.Map<java.lang.String,java.util.concurrent.atomic.AtomicInteger> . java.util.concurrent.atomic.AtomicInteger ( java.lang.String , java.util.concurrent.atomic.AtomicInteger ) ; } java.util.concurrent.atomic.AtomicInteger . int ( ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.String java.lang.String ) { java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = java.util.Map<java.lang.String,java.util.concurrent.atomic.AtomicInteger> . java.util.concurrent.atomic.AtomicInteger ( java.lang.String ) ; if ( java.util.concurrent.atomic.AtomicInteger != null ) { return java.util.concurrent.atomic.AtomicInteger . int ( ) ; } else { return NUMBER ; } }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.FactoryBeanTests.BeanImpl2 org.springframework.beans.factory.FactoryBeanTests.BeanImpl2 ( ) { return org.springframework.beans.factory.FactoryBeanTests.BeanImpl2 ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.factory.FactoryBeanTests.BeanImpl2 org.springframework.beans.factory.FactoryBeanTests.BeanImpl2 ) { this . org.springframework.beans.factory.FactoryBeanTests.BeanImpl2 = org.springframework.beans.factory.FactoryBeanTests.BeanImpl2 ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.FactoryBeanTests.BeanImpl1 org.springframework.beans.factory.FactoryBeanTests.BeanImpl1 ( ) { return org.springframework.beans.factory.FactoryBeanTests.BeanImpl1 ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.factory.FactoryBeanTests.BeanImpl1 org.springframework.beans.factory.FactoryBeanTests.BeanImpl1 ) { this . org.springframework.beans.factory.FactoryBeanTests.BeanImpl1 = org.springframework.beans.factory.FactoryBeanTests.BeanImpl1 ; }  <METHOD_END>
