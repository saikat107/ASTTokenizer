<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { int int = findAvailablePort ( ) ; org.springframework.data.gemfire.listener.adapter.ProcessWrapper = run ( CqCacheServerProcess .class , java.lang.String . java.lang.String ( STRING , GEMFIRE_CACHE_SERVER_PORT_PROPERTY , int ) ) ; waitForServerToStart ( DEFAULT_HOSTNAME , int ) ; java.lang.System . java.lang.String ( GEMFIRE_CACHE_SERVER_PORT_PROPERTY , java.lang.String . java.lang.String ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { java.lang.System . java.lang.String ( GEMFIRE_CACHE_SERVER_PORT_PROPERTY ) ; stop ( org.springframework.data.gemfire.listener.adapter.ProcessWrapper ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ContinuousQueryListenerContainer org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerContainer = org.springframework.data.gemfire.listener.adapter.ApplicationContext . getBean ( ContinuousQueryListenerContainer .class ) ; assertThat ( org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerContainer ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerContainer . isRunning ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerContainer ) . isSameAs ( org.springframework.data.gemfire.listener.adapter.ApplicationContext . getBean ( STRING , ContinuousQueryListenerContainer .class ) ) ; ClientCache org.springframework.data.gemfire.listener.adapter.ClientCache = org.springframework.data.gemfire.listener.adapter.ApplicationContext . getBean ( ClientCache .class ) ; Pool org.springframework.data.gemfire.listener.adapter.Pool = org.springframework.data.gemfire.listener.adapter.ApplicationContext . getBean ( Pool .class ) ; assertThat ( org.springframework.data.gemfire.listener.adapter.ClientCache . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.listener.adapter.Pool . getName ( ) ) . isEqualTo ( STRING ) ; CqQuery [] org.springframework.data.gemfire.listener.adapter.CqQuery[] = org.springframework.data.gemfire.listener.adapter.ClientCache . getQueryService ( ) . getCqs ( ) ; CqQuery [] org.springframework.data.gemfire.listener.adapter.CqQuery[] = org.springframework.data.gemfire.listener.adapter.Pool . getQueryService ( ) . getCqs ( ) ; assertThat ( org.springframework.data.gemfire.listener.adapter.Pool . getQueryService ( ) . getCq ( STRING ) ) . isNotNull ( ) ; assertThat ( cacheCqs . length ) . isEqualTo ( NUMBER ) ; assertThat ( poolCqs . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
