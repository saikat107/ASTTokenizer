<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.web.PageableHandlerMethodArgumentResolver ( ) . supportsParameter ( org.springframework.data.web.MethodParameter ( STRING ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodParameter org.springframework.data.web.MethodParameter = TestUtils . getParameterOfMethod ( java.lang.Class<?> ( ) , STRING , java.lang.String .class ) ; assertThat ( org.springframework.data.web.PageableHandlerMethodArgumentResolver ( ) . supportsParameter ( org.springframework.data.web.MethodParameter ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.data.web.MethodParameter ( STRING ) , ( Pageable ) ReflectionTestUtils . getField ( org.springframework.data.web.PageableHandlerMethodArgumentResolver ( ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.data.web.MethodParameter ( STRING ) , org.springframework.data.web.AbstractPageRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.data.web.MethodParameter ( STRING ) , org.springframework.data.web.AbstractPageRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.data.web.MethodParameter ( STRING ) , org.springframework.data.web.AbstractPageRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.data.web.MethodParameter ( STRING ) , org.springframework.data.web.AbstractPageRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.data.web.MethodParameter ( STRING ) , org.springframework.data.web.AbstractPageRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.data.web.MethodParameter = TestUtils . getParameterOfMethod ( java.lang.Class<?> ( ) , STRING , Pageable .class , Pageable .class ) ; HandlerMethodArgumentResolver org.springframework.data.web.HandlerMethodArgumentResolver = org.springframework.data.web.PageableHandlerMethodArgumentResolver ( ) ; assertThat ( org.springframework.data.web.HandlerMethodArgumentResolver . supportsParameter ( org.springframework.data.web.MethodParameter ) ) . isTrue ( ) ; org.springframework.data.web.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.web.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.web.HandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , TestUtils . getWebRequest ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.data.web.MethodParameter = TestUtils . getParameterOfMethod ( java.lang.Class<?> ( ) , STRING , Pageable .class , Pageable .class ) ; HandlerMethodArgumentResolver org.springframework.data.web.HandlerMethodArgumentResolver = org.springframework.data.web.PageableHandlerMethodArgumentResolver ( ) ; assertThat ( org.springframework.data.web.HandlerMethodArgumentResolver . supportsParameter ( org.springframework.data.web.MethodParameter ) ) . isTrue ( ) ; org.springframework.data.web.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.web.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.web.HandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , TestUtils . getWebRequest ( ) , null ) ; }  <METHOD_END>
<METHOD_START> protected void void ( MethodParameter org.springframework.data.web.MethodParameter , Pageable org.springframework.data.web.Pageable ) throws java.lang.Exception { void ( org.springframework.data.web.MethodParameter , org.springframework.data.web.Pageable , TestUtils . getWebRequest ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( MethodParameter org.springframework.data.web.MethodParameter , Pageable org.springframework.data.web.Pageable , HttpServletRequest org.springframework.data.web.HttpServletRequest )			throws java.lang.Exception { void ( org.springframework.data.web.MethodParameter , org.springframework.data.web.Pageable , new ServletWebRequest ( org.springframework.data.web.HttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( MethodParameter org.springframework.data.web.MethodParameter , Pageable org.springframework.data.web.Pageable , NativeWebRequest org.springframework.data.web.NativeWebRequest )			throws java.lang.Exception { void ( org.springframework.data.web.MethodParameter , org.springframework.data.web.Pageable , org.springframework.data.web.NativeWebRequest , org.springframework.data.web.PageableHandlerMethodArgumentResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( MethodParameter org.springframework.data.web.MethodParameter , Pageable org.springframework.data.web.Pageable , NativeWebRequest org.springframework.data.web.NativeWebRequest , HandlerMethodArgumentResolver org.springframework.data.web.HandlerMethodArgumentResolver ) throws java.lang.Exception { assertThat ( org.springframework.data.web.HandlerMethodArgumentResolver . supportsParameter ( org.springframework.data.web.MethodParameter ) ) . isTrue ( ) ; assertThat ( org.springframework.data.web.HandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , org.springframework.data.web.NativeWebRequest , null ) ) . isEqualTo ( org.springframework.data.web.Pageable ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.data.web.PageableHandlerMethodArgumentResolver org.springframework.data.web.PageableHandlerMethodArgumentResolver ( )  <METHOD_END>
<METHOD_START> protected abstract java.lang.Class<?> < ? > java.lang.Class<?> ( )  <METHOD_END>
<METHOD_START> protected org.springframework.data.web.MethodParameter org.springframework.data.web.MethodParameter ( java.lang.String java.lang.String ) { return org.springframework.data.web.MethodParameter ( java.lang.Class<?> ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.web.MethodParameter org.springframework.data.web.MethodParameter ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return TestUtils . getParameterOfMethod ( java.lang.Class<> , java.lang.String , Pageable .class ) ; }  <METHOD_END>
