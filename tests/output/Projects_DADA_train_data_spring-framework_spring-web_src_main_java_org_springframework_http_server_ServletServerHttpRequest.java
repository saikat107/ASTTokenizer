<METHOD_START> public void ( HttpServletRequest org.springframework.http.server.HttpServletRequest ) { Assert . notNull ( org.springframework.http.server.HttpServletRequest , STRING ) ; this . org.springframework.http.server.HttpServletRequest = org.springframework.http.server.HttpServletRequest ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.server.HttpServletRequest org.springframework.http.server.HttpServletRequest ( ) { return this . org.springframework.http.server.HttpServletRequest ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.HttpMethod org.springframework.http.server.HttpMethod ( ) { return HttpMethod . resolve ( this . org.springframework.http.server.HttpServletRequest . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { try { java.lang.StringBuffer java.lang.StringBuffer = this . org.springframework.http.server.HttpServletRequest . getRequestURL ( ) ; java.lang.String java.lang.String = this . org.springframework.http.server.HttpServletRequest . getQueryString ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.StringBuffer . java.lang.StringBuffer ( '?' ) . java.lang.StringBuffer ( java.lang.String ) ; } return new java.net.URI ( java.lang.StringBuffer . java.lang.String ( ) ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { throw new java.lang.IllegalStateException ( STRING + java.net.URISyntaxException . java.lang.String ( ) , java.net.URISyntaxException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.HttpHeaders org.springframework.http.server.HttpHeaders ( ) { if ( this . org.springframework.http.server.HttpHeaders == null ) { this . org.springframework.http.server.HttpHeaders = new HttpHeaders ( ) ; for ( java.util.Enumeration<?> < ? > java.util.Enumeration<?> = this . org.springframework.http.server.HttpServletRequest . getHeaderNames ( ) ; java.util.Enumeration<> . boolean ( ) ;) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Enumeration<> . nextElement ( ) ; for ( java.util.Enumeration<?> < ? > java.util.Enumeration<?> = this . org.springframework.http.server.HttpServletRequest . getHeaders ( java.lang.String ) ; java.util.Enumeration<> . boolean ( ) ;) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Enumeration<> . nextElement ( ) ; this . org.springframework.http.server.HttpHeaders . add ( java.lang.String , java.lang.String ) ; } } try { MediaType org.springframework.http.server.MediaType = this . org.springframework.http.server.HttpHeaders . getContentType ( ) ; if ( org.springframework.http.server.MediaType == null ) { java.lang.String java.lang.String = this . org.springframework.http.server.HttpServletRequest . getContentType ( ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { org.springframework.http.server.MediaType = MediaType . parseMediaType ( java.lang.String ) ; this . org.springframework.http.server.HttpHeaders . setContentType ( org.springframework.http.server.MediaType ) ; } } if ( org.springframework.http.server.MediaType != null && org.springframework.http.server.MediaType . getCharset ( ) == null ) { java.lang.String java.lang.String = this . org.springframework.http.server.HttpServletRequest . getCharacterEncoding ( ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.Charset . java.nio.charset.Charset ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new LinkedCaseInsensitiveMap <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . void ( org.springframework.http.server.MediaType . getParameters ( ) ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.nio.charset.Charset . java.lang.String ( ) ) ; MediaType org.springframework.http.server.MediaType = new MediaType ( org.springframework.http.server.MediaType . getType ( ) , org.springframework.http.server.MediaType . getSubtype ( ) , java.util.Map<java.lang.String,java.lang.String> ) ; this . org.springframework.http.server.HttpHeaders . setContentType ( org.springframework.http.server.MediaType ) ; } } } catch ( InvalidMediaTypeException org.springframework.http.server.InvalidMediaTypeException ) { } if ( this . org.springframework.http.server.HttpHeaders . getContentLength ( ) < NUMBER ) { int int = this . org.springframework.http.server.HttpServletRequest . getContentLength ( ) ; if ( int != - NUMBER ) { this . org.springframework.http.server.HttpHeaders . setContentLength ( int ) ; } } } return this . org.springframework.http.server.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.security.Principal java.security.Principal ( ) { return this . org.springframework.http.server.HttpServletRequest . getUserPrincipal ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { return new java.net.InetSocketAddress ( this . org.springframework.http.server.HttpServletRequest . getLocalName ( ) , this . org.springframework.http.server.HttpServletRequest . getLocalPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { return new java.net.InetSocketAddress ( this . org.springframework.http.server.HttpServletRequest . getRemoteHost ( ) , this . org.springframework.http.server.HttpServletRequest . getRemotePort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { if ( boolean ( this . org.springframework.http.server.HttpServletRequest ) ) { return java.io.InputStream ( this . org.springframework.http.server.HttpServletRequest ) ; } else { return this . org.springframework.http.server.HttpServletRequest . getInputStream ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.ServerHttpAsyncRequestControl org.springframework.http.server.ServerHttpAsyncRequestControl ( ServerHttpResponse org.springframework.http.server.ServerHttpResponse ) { if ( this . org.springframework.http.server.ServerHttpAsyncRequestControl == null ) { if ( ! ServletServerHttpResponse .class . boolean ( org.springframework.http.server.ServerHttpResponse ) ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.http.server.ServerHttpResponse . getClass ( ) ) ; } ServletServerHttpResponse org.springframework.http.server.ServletServerHttpResponse = ( ServletServerHttpResponse ) org.springframework.http.server.ServerHttpResponse ; this . org.springframework.http.server.ServerHttpAsyncRequestControl = new ServletServerHttpAsyncRequestControl ( this , org.springframework.http.server.ServletServerHttpResponse ) ; } return this . org.springframework.http.server.ServerHttpAsyncRequestControl ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( HttpServletRequest org.springframework.http.server.HttpServletRequest ) { java.lang.String java.lang.String = org.springframework.http.server.HttpServletRequest . getContentType ( ) ; return ( java.lang.String != null && java.lang.String . boolean ( java.lang.String ) && HttpMethod . POST . matches ( org.springframework.http.server.HttpServletRequest . getMethod ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private static java.io.InputStream java.io.InputStream ( HttpServletRequest org.springframework.http.server.HttpServletRequest ) throws java.io.IOException { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( NUMBER ) ; java.io.Writer java.io.Writer = new java.io.OutputStreamWriter ( java.io.ByteArrayOutputStream , java.nio.charset.Charset ) ; java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> = org.springframework.http.server.HttpServletRequest . getParameterMap ( ) ; for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.Map<java.lang.String,java.lang.String[]> . java.util.Set<java.lang.String> ( ) . java.util.Iterator<java.lang.String> ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ;) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( java.lang.String ) ) ; for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.List<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ;) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; java.io.Writer . void ( java.net.URLEncoder . java.lang.String ( java.lang.String , java.nio.charset.Charset . java.lang.String ( ) ) ) ; if ( java.lang.String != null ) { java.io.Writer . void ( '=' ) ; java.io.Writer . void ( java.net.URLEncoder . java.lang.String ( java.lang.String , java.nio.charset.Charset . java.lang.String ( ) ) ) ; if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.io.Writer . void ( '&' ) ; } } } if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.io.Writer . java.io.Writer ( '&' ) ; } } java.io.Writer . void ( ) ; return new java.io.ByteArrayInputStream ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; }  <METHOD_END>
