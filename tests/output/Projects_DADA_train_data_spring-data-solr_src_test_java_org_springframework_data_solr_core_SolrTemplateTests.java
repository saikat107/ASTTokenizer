<METHOD_START> @ Before public void void ( ) { org.springframework.data.solr.core.SolrTemplate = new SolrTemplate ( org.springframework.data.solr.core.SolrClient ) ; org.springframework.data.solr.core.SolrTemplate . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new SolrTemplate ( ( SolrClientFactory ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { Mockito . when ( org.springframework.data.solr.core.SolrClient . ping ( ) ) . thenReturn ( new SolrPingResponse ( ) ) ; SolrPingResponse org.springframework.data.solr.core.SolrPingResponse = org.springframework.data.solr.core.SolrTemplate . ping ( ) ; Assert . assertNotNull ( org.springframework.data.solr.core.SolrPingResponse ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . ping ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = DataAccessException .class ) public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { Mockito . when ( org.springframework.data.solr.core.SolrClient . ping ( ) ) . thenThrow ( new SolrServerException ( STRING , new SolrException ( ErrorCode . NOT_FOUND , STRING ) ) ) ; org.springframework.data.solr.core.SolrTemplate . ping ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidDataAccessApiUsageException .class ) public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { Mockito . when ( org.springframework.data.solr.core.SolrClient . query ( any ( ) , Mockito . any ( SolrParams .class ) , Mockito . eq ( SolrRequest . METHOD . GET ) ) ) . thenThrow ( new SolrServerException ( STRING , new SolrException ( ErrorCode . BAD_REQUEST , new ParseException ( STRING ) ) ) ) ; org.springframework.data.solr.core.SolrTemplate . executeSolrQuery ( new SolrQuery ( ) , SolrRequest . METHOD . GET ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = UncategorizedSolrException .class ) public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { Mockito . when ( org.springframework.data.solr.core.SolrClient . query ( any ( ) , Mockito . any ( SolrParams .class ) , Mockito . eq ( SolrRequest . METHOD . GET ) ) ) . thenThrow ( new java.lang.SecurityException ( ) ) ; org.springframework.data.solr.core.SolrTemplate . executeSolrQuery ( new SolrQuery ( ) , SolrRequest . METHOD . GET ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.springframework.data.solr.core.SolrServerException { Mockito . when ( org.springframework.data.solr.core.SolrClient . add ( Mockito . any ( SolrInputDocument .class ) , Mockito . eq ( - NUMBER ) ) ) . thenReturn ( new UpdateResponse ( ) ) ; UpdateResponse org.springframework.data.solr.core.UpdateResponse = org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.SimpleJavaObject ) ; Assert . assertNotNull ( org.springframework.data.solr.core.UpdateResponse ) ; ArgumentCaptor < SolrInputDocument > org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> = ArgumentCaptor . forClass ( SolrInputDocument .class ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . add ( org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . capture ( ) , Mockito . eq ( - NUMBER ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.SimpleJavaObject . getId ( ) , org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . getValue ( ) . getFieldValue ( STRING ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.SimpleJavaObject . getValue ( ) , org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . getValue ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.springframework.data.solr.core.SolrServerException { Mockito . when ( org.springframework.data.solr.core.SolrClient . add ( Mockito . any ( SolrInputDocument .class ) , Mockito . eq ( NUMBER ) ) ) . thenReturn ( new UpdateResponse ( ) ) ; UpdateResponse org.springframework.data.solr.core.UpdateResponse = org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.SimpleJavaObject , NUMBER ) ; Assert . assertNotNull ( org.springframework.data.solr.core.UpdateResponse ) ; ArgumentCaptor < SolrInputDocument > org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> = ArgumentCaptor . forClass ( SolrInputDocument .class ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . add ( org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . capture ( ) , Mockito . eq ( NUMBER ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.SimpleJavaObject . getId ( ) , org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . getValue ( ) . getFieldValue ( STRING ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.SimpleJavaObject . getValue ( ) , org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . getValue ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { Mockito . when ( org.springframework.data.solr.core.SolrClient . add ( Mockito . any ( SolrInputDocument .class ) , Mockito . eq ( - NUMBER ) ) ) . thenReturn ( new UpdateResponse ( ) ) ; PartialUpdate org.springframework.data.solr.core.PartialUpdate = new PartialUpdate ( STRING , STRING ) ; org.springframework.data.solr.core.PartialUpdate . add ( STRING , STRING ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.PartialUpdate ) ; ArgumentCaptor < SolrInputDocument > org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> = ArgumentCaptor . forClass ( SolrInputDocument .class ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . add ( org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . capture ( ) , Mockito . eq ( - NUMBER ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . getValue ( ) . getFieldValue ( STRING ) instanceof java.util.Map ) ; Assert . assertEquals ( STRING , ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . getValue ( ) . getFieldValue ( STRING ) ) . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.io.IOException , org.springframework.data.solr.core.SolrServerException { Mockito . when ( org.springframework.data.solr.core.SolrClient . add ( Mockito . anyCollectionOf ( SolrInputDocument .class ) , Mockito . eq ( - NUMBER ) ) ) . thenReturn ( new UpdateResponse ( ) ) ; java.util.List<org.springframework.data.solr.core.SimpleJavaObject> < SimpleJavaObject > java.util.List<org.springframework.data.solr.core.SimpleJavaObject> = java.util.Arrays . java.util.List ( new SimpleJavaObject ( STRING , NUMBER ) , new SimpleJavaObject ( STRING , NUMBER ) , new SimpleJavaObject ( STRING , NUMBER ) ) ; UpdateResponse org.springframework.data.solr.core.UpdateResponse = org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.List<org.springframework.data.solr.core.SimpleJavaObject> ) ; Assert . assertNotNull ( org.springframework.data.solr.core.UpdateResponse ) ; @ java.lang.SuppressWarnings ( STRING ) ArgumentCaptor < java.util.List > org.springframework.data.solr.core.ArgumentCaptor<java.util.List> = ArgumentCaptor . forClass ( java.util.List .class ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . add ( org.springframework.data.solr.core.ArgumentCaptor<java.util.List> . capture ( ) , Mockito . eq ( - NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.ArgumentCaptor<java.util.List> . getValue ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.io.IOException , org.springframework.data.solr.core.SolrServerException { Mockito . when ( org.springframework.data.solr.core.SolrClient . add ( Mockito . anyCollectionOf ( SolrInputDocument .class ) , Mockito . eq ( NUMBER ) ) ) . thenReturn ( new UpdateResponse ( ) ) ; java.util.List<org.springframework.data.solr.core.SimpleJavaObject> < SimpleJavaObject > java.util.List<org.springframework.data.solr.core.SimpleJavaObject> = java.util.Arrays . java.util.List ( new SimpleJavaObject ( STRING , NUMBER ) , new SimpleJavaObject ( STRING , NUMBER ) , new SimpleJavaObject ( STRING , NUMBER ) ) ; UpdateResponse org.springframework.data.solr.core.UpdateResponse = org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.List<org.springframework.data.solr.core.SimpleJavaObject> , NUMBER ) ; Assert . assertNotNull ( org.springframework.data.solr.core.UpdateResponse ) ; @ java.lang.SuppressWarnings ( STRING ) ArgumentCaptor < java.util.List > org.springframework.data.solr.core.ArgumentCaptor<java.util.List> = ArgumentCaptor . forClass ( java.util.List .class ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . add ( org.springframework.data.solr.core.ArgumentCaptor<java.util.List> . capture ( ) , Mockito . eq ( NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.ArgumentCaptor<java.util.List> . getValue ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.springframework.data.solr.core.SolrServerException { Mockito . when ( org.springframework.data.solr.core.SolrClient . add ( Mockito . any ( SolrInputDocument .class ) , Mockito . eq ( - NUMBER ) ) ) . thenReturn ( new UpdateResponse ( ) ) ; UpdateResponse org.springframework.data.solr.core.UpdateResponse = org.springframework.data.solr.core.SolrTemplate . saveDocument ( org.springframework.data.solr.core.SolrInputDocument ) ; Assert . assertNotNull ( org.springframework.data.solr.core.UpdateResponse ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . add ( Mockito . eq ( org.springframework.data.solr.core.SolrInputDocument ) , Mockito . eq ( - NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.springframework.data.solr.core.SolrServerException { Mockito . when ( org.springframework.data.solr.core.SolrClient . add ( Mockito . any ( SolrInputDocument .class ) , Mockito . eq ( NUMBER ) ) ) . thenReturn ( new UpdateResponse ( ) ) ; UpdateResponse org.springframework.data.solr.core.UpdateResponse = org.springframework.data.solr.core.SolrTemplate . saveDocument ( org.springframework.data.solr.core.SolrInputDocument , NUMBER ) ; Assert . assertNotNull ( org.springframework.data.solr.core.UpdateResponse ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . add ( Mockito . eq ( org.springframework.data.solr.core.SolrInputDocument ) , Mockito . eq ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.springframework.data.solr.core.SolrServerException { Mockito . when ( org.springframework.data.solr.core.SolrClient . add ( Mockito . anyCollectionOf ( SolrInputDocument .class ) , Mockito . eq ( - NUMBER ) ) ) . thenReturn ( new UpdateResponse ( ) ) ; java.util.List<org.springframework.data.solr.core.SolrInputDocument> < SolrInputDocument > java.util.List<org.springframework.data.solr.core.SolrInputDocument> = java.util.Collections . java.util.List ( org.springframework.data.solr.core.SolrInputDocument ) ; UpdateResponse org.springframework.data.solr.core.UpdateResponse = org.springframework.data.solr.core.SolrTemplate . saveDocuments ( java.util.List<org.springframework.data.solr.core.SolrInputDocument> ) ; Assert . assertNotNull ( org.springframework.data.solr.core.UpdateResponse ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . add ( Mockito . eq ( java.util.List<org.springframework.data.solr.core.SolrInputDocument> ) , Mockito . eq ( - NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.springframework.data.solr.core.SolrServerException { Mockito . when ( org.springframework.data.solr.core.SolrClient . add ( Mockito . anyCollectionOf ( SolrInputDocument .class ) , Mockito . eq ( NUMBER ) ) ) . thenReturn ( new UpdateResponse ( ) ) ; java.util.List<org.springframework.data.solr.core.SolrInputDocument> < SolrInputDocument > java.util.List<org.springframework.data.solr.core.SolrInputDocument> = java.util.Collections . java.util.List ( org.springframework.data.solr.core.SolrInputDocument ) ; UpdateResponse org.springframework.data.solr.core.UpdateResponse = org.springframework.data.solr.core.SolrTemplate . saveDocuments ( java.util.List<org.springframework.data.solr.core.SolrInputDocument> , NUMBER ) ; Assert . assertNotNull ( org.springframework.data.solr.core.UpdateResponse ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . add ( Mockito . eq ( java.util.List<org.springframework.data.solr.core.SolrInputDocument> ) , Mockito . eq ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.springframework.data.solr.core.SolrServerException { Mockito . when ( org.springframework.data.solr.core.SolrClient . deleteById ( Mockito . anyString ( ) ) ) . thenReturn ( new UpdateResponse ( ) ) ; UpdateResponse org.springframework.data.solr.core.UpdateResponse = org.springframework.data.solr.core.SolrTemplate . deleteById ( STRING ) ; Assert . assertNotNull ( org.springframework.data.solr.core.UpdateResponse ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . deleteById ( Mockito . eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.springframework.data.solr.core.SolrServerException { Mockito . when ( org.springframework.data.solr.core.SolrClient . deleteById ( Mockito . anyListOf ( java.lang.String .class ) ) ) . thenReturn ( new UpdateResponse ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; UpdateResponse org.springframework.data.solr.core.UpdateResponse = org.springframework.data.solr.core.SolrTemplate . deleteById ( java.util.List<java.lang.String> ) ; Assert . assertNotNull ( org.springframework.data.solr.core.UpdateResponse ) ; @ java.lang.SuppressWarnings ( STRING ) ArgumentCaptor < java.util.List<java.lang.String> < java.lang.String > > org.springframework.data.solr.core.ArgumentCaptor<java.util.List<java.lang.String>> = ( ArgumentCaptor < java.util.List<java.lang.String> < java.lang.String > > ) ( java.lang.Object ) ArgumentCaptor . forClass ( java.util.List .class ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . deleteById ( org.springframework.data.solr.core.ArgumentCaptor<java.util.List<java.lang.String>> . capture ( ) ) ; Assert . assertEquals ( java.util.List<java.lang.String> . int ( ) , org.springframework.data.solr.core.ArgumentCaptor<java.util.List<java.lang.String>> . getValue ( ) . size ( ) ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { Assert . assertTrue ( org.springframework.data.solr.core.ArgumentCaptor<java.util.List<java.lang.String>> . getValue ( ) . contains ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { ArgumentCaptor < SolrQuery > org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrQuery> = ArgumentCaptor . forClass ( SolrQuery .class ) ; QueryResponse org.springframework.data.solr.core.QueryResponse = Mockito . mock ( QueryResponse .class ) ; SolrDocumentList org.springframework.data.solr.core.SolrDocumentList = new SolrDocumentList ( ) ; org.springframework.data.solr.core.SolrDocumentList . setNumFound ( NUMBER ) ; Mockito . when ( org.springframework.data.solr.core.QueryResponse . getResults ( ) ) . thenReturn ( org.springframework.data.solr.core.SolrDocumentList ) ; Mockito . when ( org.springframework.data.solr.core.SolrClient . query ( Mockito . any ( SolrQuery .class ) , Mockito . eq ( SolrRequest . METHOD . GET ) ) ) . thenReturn ( org.springframework.data.solr.core.QueryResponse ) ; long long = org.springframework.data.solr.core.SolrTemplate . count ( new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.SolrDocumentList . getNumFound ( ) , long ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . query ( org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrQuery> . capture ( ) , Mockito . eq ( SolrRequest . METHOD . GET ) ) ; Assert . assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrQuery> . getValue ( ) . getStart ( ) ) ; Assert . assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrQuery> . getValue ( ) . getRows ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { ArgumentCaptor < SolrQuery > org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrQuery> = ArgumentCaptor . forClass ( SolrQuery .class ) ; QueryResponse org.springframework.data.solr.core.QueryResponse = Mockito . mock ( QueryResponse .class ) ; SolrDocumentList org.springframework.data.solr.core.SolrDocumentList = new SolrDocumentList ( ) ; org.springframework.data.solr.core.SolrDocumentList . setNumFound ( NUMBER ) ; Mockito . when ( org.springframework.data.solr.core.QueryResponse . getResults ( ) ) . thenReturn ( org.springframework.data.solr.core.SolrDocumentList ) ; Mockito . when ( org.springframework.data.solr.core.SolrClient . query ( Mockito . any ( SolrQuery .class ) , Mockito . eq ( SolrRequest . METHOD . GET ) ) ) . thenReturn ( org.springframework.data.solr.core.QueryResponse ) ; Query org.springframework.data.solr.core.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; org.springframework.data.solr.core.Query . setPageRequest ( new PageRequest ( NUMBER , NUMBER ) ) ; long long = org.springframework.data.solr.core.SolrTemplate . count ( org.springframework.data.solr.core.Query ) ; Assert . assertEquals ( org.springframework.data.solr.core.SolrDocumentList . getNumFound ( ) , long ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . query ( org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrQuery> . capture ( ) , Mockito . eq ( SolrRequest . METHOD . GET ) ) ; Assert . assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrQuery> . getValue ( ) . getStart ( ) ) ; Assert . assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrQuery> . getValue ( ) . getRows ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.solr.core.SolrTemplate . count ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { org.springframework.data.solr.core.SolrTemplate . commit ( ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . commit ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { org.springframework.data.solr.core.SolrTemplate . softCommit ( ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . commit ( Mockito . eq ( true ) , Mockito . eq ( true ) , Mockito . eq ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { org.springframework.data.solr.core.SolrTemplate . rollback ( ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . rollback ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { QueryParser org.springframework.data.solr.core.QueryParser = new QueryParser ( ) { @ java.lang.Override public void void ( Converter < ? , ? > org.springframework.data.solr.core.Converter<?,?> ) {} @ java.lang.Override public java.lang.String java.lang.String ( SolrDataQuery org.springframework.data.solr.core.SolrDataQuery ) { return STRING ; } @ java.lang.Override public org.springframework.data.solr.core.SolrQuery org.springframework.data.solr.core.SolrQuery ( SolrDataQuery org.springframework.data.solr.core.SolrDataQuery ) { return new SolrQuery ( java.lang.String ( org.springframework.data.solr.core.SolrDataQuery ) ) ; } } ; org.springframework.data.solr.core.SolrTemplate . registerQueryParser ( SimpleQuery .class , org.springframework.data.solr.core.QueryParser ) ; org.springframework.data.solr.core.SolrTemplate . querySolr ( new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) , null ) ; ArgumentCaptor < SolrParams > org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrParams> = ArgumentCaptor . forClass ( SolrParams .class ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . query ( nullable ( java.lang.String .class ) , org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrParams> . capture ( ) , Mockito . eq ( SolrRequest . METHOD . GET ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrParams> . getValue ( ) . getParams ( CommonParams . Q ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Converter < ? , ? > org.springframework.data.solr.core.Converter<?,?> ) {}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( SolrDataQuery org.springframework.data.solr.core.SolrDataQuery ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.SolrQuery org.springframework.data.solr.core.SolrQuery ( SolrDataQuery org.springframework.data.solr.core.SolrDataQuery ) { return new SolrQuery ( java.lang.String ( org.springframework.data.solr.core.SolrDataQuery ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.springframework.data.solr.core.SolrServerException , java.lang.SecurityException , java.lang.NoSuchFieldException { org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.SimpleBoostedJavaObject ) ; ArgumentCaptor < SolrInputDocument > org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> = ArgumentCaptor . forClass ( SolrInputDocument .class ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . add ( org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . capture ( ) , Mockito . eq ( - NUMBER ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.SimpleBoostedJavaObject . getId ( ) , org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . getValue ( ) . getFieldValue ( STRING ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.SimpleBoostedJavaObject . getValue ( ) , org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . getValue ( ) . getFieldValue ( STRING ) ) ; float float = AnnotationUtils . getAnnotation ( org.springframework.data.solr.core.SimpleBoostedJavaObject . getClass ( ) , SolrDocument .class ) . boost ( ) ; Assert . assertThat ( org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . getValue ( ) . getDocumentBoost ( ) , Is . is ( float ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.springframework.data.solr.core.SolrServerException , java.lang.SecurityException , java.lang.NoSuchFieldException { org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.SimpleBoostedJavaObject ) ; ArgumentCaptor < SolrInputDocument > org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> = ArgumentCaptor . forClass ( SolrInputDocument .class ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . add ( org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . capture ( ) , Mockito . eq ( - NUMBER ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.SimpleBoostedJavaObject . getId ( ) , org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . getValue ( ) . getFieldValue ( STRING ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.SimpleBoostedJavaObject . getValue ( ) , org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . getValue ( ) . getFieldValue ( STRING ) ) ; float float = AnnotationUtils . getAnnotation ( org.springframework.data.solr.core.SimpleBoostedJavaObject . getClass ( ) . getDeclaredField ( STRING ) , Indexed .class ) . boost ( ) ; Assert . assertThat ( org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . getValue ( ) . getField ( STRING ) . getBoost ( ) , Is . is ( float ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { NamedList < java.lang.Object > org.springframework.data.solr.core.NamedList<java.lang.Object> = new NamedList <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; org.springframework.data.solr.core.NamedList<java.lang.Object> . add ( STRING , NUMBER ) ; org.springframework.data.solr.core.NamedList<java.lang.Object> . add ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Collections .< NamedList < java.lang.Object > > java.util.List<org.springframework.data.solr.core.NamedList<java.lang.Object>> ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Collections .< NamedList < java.lang.Object > > java.util.List<org.springframework.data.solr.core.NamedList<java.lang.Object>> ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Collections .< NamedList < java.lang.Object > > java.util.List<org.springframework.data.solr.core.NamedList<java.lang.Object>> ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Collections .< NamedList < java.lang.Object > > java.util.List<org.springframework.data.solr.core.NamedList<java.lang.Object>> ( ) ) ; when ( org.springframework.data.solr.core.SolrClient . request ( ( SchemaVersion ) any ( ) , anyString ( ) ) ) . thenReturn ( org.springframework.data.solr.core.NamedList<java.lang.Object> ) ; when ( org.springframework.data.solr.core.SolrClient . request ( ( SchemaRequest ) any ( ) , anyString ( ) ) ) . thenReturn ( org.springframework.data.solr.core.NamedList<java.lang.Object> ) ; org.springframework.data.solr.core.SolrTemplate = new SolrTemplate ( org.springframework.data.solr.core.SolrClient ) ; org.springframework.data.solr.core.SolrTemplate . setSchemaCreationFeatures ( java.util.Collections . java.util.List ( Feature . CREATE_MISSING_FIELDS ) ) ; org.springframework.data.solr.core.SolrTemplate . afterPropertiesSet ( ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( new org.springframework.data.solr.core.SolrTemplateTests.DocumentWithIndexAnnotations ( ) ) ; ArgumentCaptor < SolrRequest > org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrRequest> = ArgumentCaptor . forClass ( SolrRequest .class ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . request ( org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrRequest> . capture ( ) , Mockito . anyString ( ) ) ; SolrRequest org.springframework.data.solr.core.SolrRequest = org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrRequest> . getValue ( ) ; Assert . assertThat ( org.springframework.data.solr.core.SolrRequest . getMethod ( ) , IsEqual . equalTo ( SolrRequest . METHOD . POST ) ) ; Assert . assertThat ( org.springframework.data.solr.core.SolrRequest . getPath ( ) , IsEqual . equalTo ( STRING ) ) ; Assert . assertThat ( org.springframework.data.solr.core.SolrRequest . getContentStreams ( ) , IsNull . notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { Mockito . when ( org.springframework.data.solr.core.SolrClient . getById ( anyCollection ( ) ) ) . thenReturn ( new SolrDocumentList ( ) ) ; org.springframework.data.solr.core.SolrTemplate . getById ( STRING , org.springframework.data.solr.core.SolrTemplateTests.DocumentWithIndexAnnotations .class ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . getById ( eq ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { Mockito . when ( org.springframework.data.solr.core.SolrClient . getById ( anyCollection ( ) ) ) . thenReturn ( new SolrDocumentList ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; org.springframework.data.solr.core.SolrTemplate . getById ( java.util.List<java.lang.String> , org.springframework.data.solr.core.SolrTemplateTests.DocumentWithIndexAnnotations .class ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . getById ( eq ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.springframework.data.solr.core.SolrServerException , java.lang.SecurityException , java.lang.NoSuchFieldException { org.springframework.data.solr.core.SolrTemplate . saveBean ( new org.springframework.data.solr.core.SolrTemplateTests.DocumentWithScoreAnnotation ( ) ) ; ArgumentCaptor < SolrInputDocument > org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> = ArgumentCaptor . forClass ( SolrInputDocument .class ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . add ( org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . capture ( ) , Mockito . eq ( - NUMBER ) ) ; Assert . assertNull ( org.springframework.data.solr.core.ArgumentCaptor<org.springframework.data.solr.core.SolrInputDocument> . getValue ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { org.springframework.data.solr.core.SolrTemplate = new SolrTemplate ( org.springframework.data.solr.core.SolrClient , RequestMethod . POST ) ; org.springframework.data.solr.core.SolrTemplate . afterPropertiesSet ( ) ; Mockito . when ( org.springframework.data.solr.core.SolrClient . query ( any ( ) , Mockito . any ( SolrParams .class ) , Mockito . eq ( SolrRequest . METHOD . POST ) ) ) . thenReturn ( new QueryResponse ( ) ) ; org.springframework.data.solr.core.SolrTemplate . querySolr ( new SimpleQuery ( STRING ) , org.springframework.data.solr.core.SolrTemplateTests.DocumentWithIndexAnnotations .class ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . query ( any ( ) , Mockito . any ( SolrParams .class ) , Mockito . eq ( SolrRequest . METHOD . POST ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { org.springframework.data.solr.core.SolrTemplate = new SolrTemplate ( org.springframework.data.solr.core.SolrClient , RequestMethod . POST ) ; org.springframework.data.solr.core.SolrTemplate . afterPropertiesSet ( ) ; Mockito . when ( org.springframework.data.solr.core.SolrClient . query ( any ( ) , Mockito . any ( SolrParams .class ) , Mockito . eq ( SolrRequest . METHOD . PUT ) ) ) . thenReturn ( new QueryResponse ( ) ) ; org.springframework.data.solr.core.SolrTemplate . querySolr ( new SimpleQuery ( STRING ) , org.springframework.data.solr.core.SolrTemplateTests.DocumentWithIndexAnnotations .class , RequestMethod . PUT ) ; Mockito . verify ( org.springframework.data.solr.core.SolrClient , Mockito . times ( NUMBER ) ) . query ( any ( ) , Mockito . any ( SolrParams .class ) , Mockito . eq ( SolrRequest . METHOD . PUT ) ) ; }  <METHOD_END>
