<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.RepositoryCorsConfigurationAccessor = new RepositoryCorsConfigurationAccessor ( org.springframework.data.rest.webmvc.ResourceMappings , NoOpStringValueResolver . INSTANCE , java.util.Optional . java.util.Optional ( org.springframework.data.rest.webmvc.Repositories ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CorsConfiguration org.springframework.data.rest.webmvc.CorsConfiguration = org.springframework.data.rest.webmvc.RepositoryCorsConfigurationAccessor . createConfiguration ( org.springframework.data.rest.webmvc.RepositoryCorsConfigurationAccessorUnitTests.AnnotatedRepository .class ) ; assertThat ( org.springframework.data.rest.webmvc.CorsConfiguration ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.CorsConfiguration . getAllowCredentials ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.CorsConfiguration . getAllowedHeaders ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.CorsConfiguration . getAllowedOrigins ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.CorsConfiguration . getAllowedMethods ( ) , hasItems ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) ) ; assertThat ( org.springframework.data.rest.webmvc.CorsConfiguration . getMaxAge ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CorsConfiguration org.springframework.data.rest.webmvc.CorsConfiguration = org.springframework.data.rest.webmvc.RepositoryCorsConfigurationAccessor . createConfiguration ( org.springframework.data.rest.webmvc.RepositoryCorsConfigurationAccessorUnitTests.FullyConfiguredCorsRepository .class ) ; assertThat ( org.springframework.data.rest.webmvc.CorsConfiguration ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.CorsConfiguration . getAllowCredentials ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.CorsConfiguration . getAllowedHeaders ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.CorsConfiguration . getExposedHeaders ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.CorsConfiguration . getAllowedOrigins ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.CorsConfiguration . getAllowedMethods ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.CorsConfiguration . getAllowedMethods ( ) ) . doesNotContain ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.CorsConfiguration . getAllowCredentials ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.CorsConfiguration . getMaxAge ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.rest.webmvc.RepositoryCorsConfigurationAccessor = new RepositoryCorsConfigurationAccessor ( org.springframework.data.rest.webmvc.ResourceMappings , NoOpStringValueResolver . INSTANCE , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; when ( org.springframework.data.rest.webmvc.ResourceMappings . exportsTopLevelResourceFor ( STRING ) ) . thenReturn ( true ) ; assertThat ( org.springframework.data.rest.webmvc.RepositoryCorsConfigurationAccessor . findCorsConfiguration ( STRING ) ) . isEmpty ( ) ; }  <METHOD_END>
