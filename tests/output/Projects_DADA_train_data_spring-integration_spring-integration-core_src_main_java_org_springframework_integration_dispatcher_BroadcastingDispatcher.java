<METHOD_START> public void ( ) { this( null , false ); }  <METHOD_END>
<METHOD_START> public void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { this( java.util.concurrent.Executor , false ); }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this( null , boolean ); }  <METHOD_END>
<METHOD_START> public void ( java.util.concurrent.Executor java.util.concurrent.Executor , boolean boolean ) { this . boolean = boolean ; this . java.util.concurrent.Executor = java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( MessageHandlingTaskDecorator org.springframework.integration.dispatcher.MessageHandlingTaskDecorator ) { Assert . notNull ( org.springframework.integration.dispatcher.MessageHandlingTaskDecorator , STRING ) ; this . org.springframework.integration.dispatcher.MessageHandlingTaskDecorator = org.springframework.integration.dispatcher.MessageHandlingTaskDecorator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.dispatcher.BeanFactory ) throws org.springframework.integration.dispatcher.BeansException { this . org.springframework.integration.dispatcher.BeanFactory = org.springframework.integration.dispatcher.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.dispatcher.MessageBuilderFactory org.springframework.integration.dispatcher.MessageBuilderFactory ( ) { if ( ! this . boolean ) { if ( this . org.springframework.integration.dispatcher.BeanFactory != null ) { this . org.springframework.integration.dispatcher.MessageBuilderFactory = IntegrationUtils . getMessageBuilderFactory ( this . org.springframework.integration.dispatcher.BeanFactory ) ; } this . boolean = true ; } return this . org.springframework.integration.dispatcher.MessageBuilderFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.integration.dispatcher.Message<?> ) { int int = NUMBER ; int int = NUMBER ; java.util.Collection<org.springframework.integration.dispatcher.MessageHandler> < MessageHandler > java.util.Collection<org.springframework.integration.dispatcher.MessageHandler> = this . getHandlers ( ) ; if ( this . boolean && java.util.Collection<org.springframework.integration.dispatcher.MessageHandler> . size ( ) == NUMBER ) { throw new MessageDispatchingException ( org.springframework.integration.dispatcher.Message<> , STRING ) ; } int int = java.util.Collection<org.springframework.integration.dispatcher.MessageHandler> . size ( ) ; Message < ? > org.springframework.integration.dispatcher.Message<?> = org.springframework.integration.dispatcher.Message<> ; java.util.UUID java.util.UUID = null ; if ( this . boolean ) { java.util.UUID = org.springframework.integration.dispatcher.Message<> . getHeaders ( ) . getId ( ) ; } for ( MessageHandler org.springframework.integration.dispatcher.MessageHandler : java.util.Collection<org.springframework.integration.dispatcher.MessageHandler> ) { if ( this . boolean ) { org.springframework.integration.dispatcher.Message<?> = org.springframework.integration.dispatcher.MessageBuilderFactory ( ) . fromMessage ( org.springframework.integration.dispatcher.Message<> ) . pushSequenceDetails ( java.util.UUID , int ++ , int ) . build ( ) ; if ( org.springframework.integration.dispatcher.Message<> instanceof MessageDecorator ) { org.springframework.integration.dispatcher.Message<?> = ( ( MessageDecorator ) org.springframework.integration.dispatcher.Message<> ) . decorateMessage ( org.springframework.integration.dispatcher.Message<> ) ; } } if ( this . java.util.concurrent.Executor != null ) { java.lang.Runnable java.lang.Runnable = java.lang.Runnable ( org.springframework.integration.dispatcher.MessageHandler , org.springframework.integration.dispatcher.Message<> ) ; this . java.util.concurrent.Executor . void ( java.lang.Runnable ) ; int ++ ; } else { if ( this . boolean ( org.springframework.integration.dispatcher.MessageHandler , org.springframework.integration.dispatcher.Message<> ) ) { int ++ ; } } } if ( int == NUMBER && this . int == NUMBER && logger . isDebugEnabled ( ) ) { if ( int > NUMBER ) { logger . debug ( STRING ) ; } else { logger . debug ( STRING ) ; } } return int >= this . int ; }  <METHOD_END>
<METHOD_START> private java.lang.Runnable java.lang.Runnable ( final MessageHandler org.springframework.integration.dispatcher.MessageHandler , final Message < ? > org.springframework.integration.dispatcher.Message<?> ) { MessageHandlingRunnable org.springframework.integration.dispatcher.MessageHandlingRunnable = new MessageHandlingRunnable ( ) { private final org.springframework.integration.dispatcher.MessageHandler org.springframework.integration.dispatcher.MessageHandler = message1 -> invokeHandler ( handler , message1 ) ; @ java.lang.Override public void void ( ) { boolean ( org.springframework.integration.dispatcher.MessageHandler , org.springframework.integration.dispatcher.Message<> ) ; } @ java.lang.Override public org.springframework.integration.dispatcher.Message<?> < ? > org.springframework.integration.dispatcher.Message<?> ( ) { return org.springframework.integration.dispatcher.Message<> ; } @ java.lang.Override public org.springframework.integration.dispatcher.MessageHandler org.springframework.integration.dispatcher.MessageHandler ( ) { return this . org.springframework.integration.dispatcher.MessageHandler ; } } ; return this . org.springframework.integration.dispatcher.MessageHandlingTaskDecorator . decorate ( org.springframework.integration.dispatcher.MessageHandlingRunnable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { boolean ( org.springframework.integration.dispatcher.MessageHandler , org.springframework.integration.dispatcher.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.dispatcher.Message<?> < ? > org.springframework.integration.dispatcher.Message<?> ( ) { return org.springframework.integration.dispatcher.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.dispatcher.MessageHandler org.springframework.integration.dispatcher.MessageHandler ( ) { return this . org.springframework.integration.dispatcher.MessageHandler ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( MessageHandler org.springframework.integration.dispatcher.MessageHandler , Message < ? > org.springframework.integration.dispatcher.Message<?> ) { try { org.springframework.integration.dispatcher.MessageHandler . handleMessage ( org.springframework.integration.dispatcher.Message<> ) ; return true ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( ! this . boolean ) { if ( java.lang.RuntimeException instanceof MessagingException && ( ( MessagingException ) java.lang.RuntimeException ) . getFailedMessage ( ) == null ) { throw new MessagingException ( org.springframework.integration.dispatcher.Message<> , STRING , java.lang.RuntimeException ) ; } throw java.lang.RuntimeException ; } else if ( this . logger . isWarnEnabled ( ) ) { logger . warn ( STRING , java.lang.RuntimeException ) ; } return false ; } }  <METHOD_END>
