<METHOD_START> @ Test public void void ( ) java.lang.Exception { Cache org.springframework.data.gemfire.wan.Cache = mock ( Cache .class , STRING ) ; GatewayReceiverFactory org.springframework.data.gemfire.wan.GatewayReceiverFactory = mock ( GatewayReceiverFactory .class , STRING ) ; GatewayTransportFilter org.springframework.data.gemfire.wan.GatewayTransportFilter = mock ( GatewayTransportFilter .class , STRING ) ; when ( org.springframework.data.gemfire.wan.Cache . createGatewayReceiverFactory ( ) ) . thenReturn ( org.springframework.data.gemfire.wan.GatewayReceiverFactory ) ; GatewayReceiverFactoryBean org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean = new GatewayReceiverFactoryBean ( org.springframework.data.gemfire.wan.Cache ) ; org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean . setBindAddress ( STRING ) ; org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean . setHostnameForSenders ( STRING ) ; org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean . setStartPort ( NUMBER ) ; org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean . setEndPort ( NUMBER ) ; org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean . setManualStart ( true ) ; org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean . setMaximumTimeBetweenPings ( NUMBER ) ; org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean . setSocketBufferSize ( NUMBER ) ; org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean . setTransportFilters ( java.util.Arrays . java.util.List ( org.springframework.data.gemfire.wan.GatewayTransportFilter ) ) ; org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean . afterPropertiesSet ( ) ; verify ( org.springframework.data.gemfire.wan.GatewayReceiverFactory ) . setBindAddress ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.wan.GatewayReceiverFactory ) . setHostnameForSenders ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.wan.GatewayReceiverFactory ) . setStartPort ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.wan.GatewayReceiverFactory ) . setEndPort ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.wan.GatewayReceiverFactory ) . setManualStart ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.wan.GatewayReceiverFactory ) . setMaximumTimeBetweenPings ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.wan.GatewayReceiverFactory ) . setSocketBufferSize ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.wan.GatewayReceiverFactory ) . addGatewayTransportFilter ( same ( org.springframework.data.gemfire.wan.GatewayTransportFilter ) ) ; verify ( org.springframework.data.gemfire.wan.GatewayReceiverFactory ) . create ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { try { Cache org.springframework.data.gemfire.wan.Cache = mock ( Cache .class , STRING ) ; GatewayReceiverFactory org.springframework.data.gemfire.wan.GatewayReceiverFactory = mock ( GatewayReceiverFactory .class , STRING ) ; when ( org.springframework.data.gemfire.wan.Cache . createGatewayReceiverFactory ( ) ) . thenReturn ( org.springframework.data.gemfire.wan.GatewayReceiverFactory ) ; GatewayReceiverFactoryBean org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean = new GatewayReceiverFactoryBean ( org.springframework.data.gemfire.wan.Cache ) ; org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean . setStartPort ( NUMBER ) ; org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean . setEndPort ( NUMBER ) ; org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean . afterPropertiesSet ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
