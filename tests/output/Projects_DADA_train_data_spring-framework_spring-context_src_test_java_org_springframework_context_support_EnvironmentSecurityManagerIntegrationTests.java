<METHOD_START> @ Before public void void ( ) { java.lang.SecurityManager = java.lang.System . java.lang.SecurityManager ( ) ; java.util.Map<java.lang.String,java.lang.String> = StandardEnvironmentTests . getModifiableSystemEnvironment ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( AbstractEnvironment . ACTIVE_PROFILES_PROPERTY_NAME , STRING ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( AbstractEnvironment . ACTIVE_PROFILES_PROPERTY_NAME ) ; java.lang.System . void ( java.lang.SecurityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.SecurityManager java.lang.SecurityManager = new java.lang.SecurityManager ( ) { @ java.lang.Override public void void ( java.security.Permission java.security.Permission ) { if ( STRING . boolean ( java.security.Permission . java.lang.String ( ) ) ) { throw new java.security.AccessControlException ( STRING ) ; } } } ; java.lang.System . void ( java.lang.SecurityManager ) ; DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AnnotatedBeanDefinitionReader org.springframework.context.support.AnnotatedBeanDefinitionReader = new AnnotatedBeanDefinitionReader ( org.springframework.context.support.DefaultListableBeanFactory ) ; org.springframework.context.support.AnnotatedBeanDefinitionReader . register ( org.springframework.context.support.EnvironmentSecurityManagerIntegrationTests.C1 .class ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . containsBean ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.security.Permission java.security.Permission ) { if ( STRING . boolean ( java.security.Permission . java.lang.String ( ) ) ) { throw new java.security.AccessControlException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.SecurityManager java.lang.SecurityManager = new java.lang.SecurityManager ( ) { @ java.lang.Override public void void ( java.security.Permission java.security.Permission ) { if ( STRING . boolean ( java.security.Permission . java.lang.String ( ) ) ) { throw new java.security.AccessControlException ( STRING ) ; } if ( ( STRING + AbstractEnvironment . ACTIVE_PROFILES_PROPERTY_NAME ) . equals ( java.security.Permission . java.lang.String ( ) ) ) { throw new java.security.AccessControlException ( java.lang.String ( STRING , AbstractEnvironment . ACTIVE_PROFILES_PROPERTY_NAME ) ) ; } } } ; java.lang.System . void ( java.lang.SecurityManager ) ; DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AnnotatedBeanDefinitionReader org.springframework.context.support.AnnotatedBeanDefinitionReader = new AnnotatedBeanDefinitionReader ( org.springframework.context.support.DefaultListableBeanFactory ) ; org.springframework.context.support.AnnotatedBeanDefinitionReader . register ( org.springframework.context.support.EnvironmentSecurityManagerIntegrationTests.C1 .class ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . containsBean ( STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.security.Permission java.security.Permission ) { if ( STRING . boolean ( java.security.Permission . java.lang.String ( ) ) ) { throw new java.security.AccessControlException ( STRING ) ; } if ( ( STRING + AbstractEnvironment . ACTIVE_PROFILES_PROPERTY_NAME ) . equals ( java.security.Permission . java.lang.String ( ) ) ) { throw new java.security.AccessControlException ( java.lang.String ( STRING , AbstractEnvironment . ACTIVE_PROFILES_PROPERTY_NAME ) ) ; } }  <METHOD_END>
