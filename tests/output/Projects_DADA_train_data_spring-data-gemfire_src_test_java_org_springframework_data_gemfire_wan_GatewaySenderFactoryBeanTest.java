<METHOD_START> protected org.springframework.data.gemfire.wan.Cache org.springframework.data.gemfire.wan.Cache ( final GatewaySenderFactory org.springframework.data.gemfire.wan.GatewaySenderFactory ) { Cache org.springframework.data.gemfire.wan.Cache = mock ( Cache .class ) ; when ( org.springframework.data.gemfire.wan.Cache . createGatewaySenderFactory ( ) ) . thenReturn ( org.springframework.data.gemfire.wan.GatewaySenderFactory ) ; return org.springframework.data.gemfire.wan.Cache ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.wan.GatewaySenderFactory org.springframework.data.gemfire.wan.GatewaySenderFactory ( final java.lang.String java.lang.String , final int int ) { GatewaySenderFactory org.springframework.data.gemfire.wan.GatewaySenderFactory = mock ( GatewaySenderFactory .class ) ; GatewaySender org.springframework.data.gemfire.wan.GatewaySender = mock ( GatewaySender .class ) ; when ( org.springframework.data.gemfire.wan.GatewaySender . getId ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.wan.GatewaySender . getRemoteDSId ( ) ) . thenReturn ( int ) ; when ( org.springframework.data.gemfire.wan.GatewaySenderFactory . create ( eq ( java.lang.String ) , eq ( int ) ) ) . thenReturn ( org.springframework.data.gemfire.wan.GatewaySender ) ; return org.springframework.data.gemfire.wan.GatewaySenderFactory ; }  <METHOD_END>
<METHOD_START> protected void void ( final GatewaySenderFactoryBean org.springframework.data.gemfire.wan.GatewaySenderFactoryBean , final GatewaySenderFactory org.springframework.data.gemfire.wan.GatewaySenderFactory ) throws java.lang.Exception { java.lang.Boolean java.lang.Boolean = TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.GatewaySenderFactoryBean ) ; verify ( org.springframework.data.gemfire.wan.GatewaySenderFactory ) . setParallel ( eq ( java.lang.Boolean . java.lang.Boolean . boolean ( java.lang.Boolean ) ) ) ; java.lang.String java.lang.String = TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.GatewaySenderFactoryBean ) ; if ( java.lang.String != null ) { verify ( org.springframework.data.gemfire.wan.GatewaySenderFactory ) . setOrderPolicy ( eq ( GatewaySender . OrderPolicy . valueOf ( java.lang.String . java.lang.String ( ) ) ) ) ; } java.lang.Integer java.lang.Integer = TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.GatewaySenderFactoryBean ) ; if ( java.lang.Integer != null ) { verify ( org.springframework.data.gemfire.wan.GatewaySenderFactory ) . setDispatcherThreads ( eq ( java.lang.Integer ) ) ; } java.lang.String java.lang.String = TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.GatewaySenderFactoryBean ) ; if ( java.lang.String != null ) { verify ( org.springframework.data.gemfire.wan.GatewaySenderFactory ) . setDiskStoreName ( eq ( java.lang.String ) ) ; } java.lang.Boolean java.lang.Boolean = TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.GatewaySenderFactoryBean ) ; if ( java.lang.Boolean != null ) { verify ( org.springframework.data.gemfire.wan.GatewaySenderFactory ) . setDiskSynchronous ( eq ( java.lang.Boolean ) ) ; } java.lang.Boolean java.lang.Boolean = TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.GatewaySenderFactoryBean ) ; if ( java.lang.Boolean != null ) { verify ( org.springframework.data.gemfire.wan.GatewaySenderFactory ) . setPersistenceEnabled ( eq ( java.lang.Boolean ) ) ; } else { verify ( org.springframework.data.gemfire.wan.GatewaySenderFactory , never ( ) ) . setPersistenceEnabled ( true ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GatewaySenderFactory org.springframework.data.gemfire.wan.GatewaySenderFactory = org.springframework.data.gemfire.wan.GatewaySenderFactory ( STRING , NUMBER ) ; GatewaySenderFactoryBean org.springframework.data.gemfire.wan.GatewaySenderFactoryBean = new GatewaySenderFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.GatewaySenderFactory ) ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setRemoteDistributedSystemId ( NUMBER ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setParallel ( true ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setDispatcherThreads ( NUMBER ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . doInit ( ) ; void ( org.springframework.data.gemfire.wan.GatewaySenderFactoryBean , org.springframework.data.gemfire.wan.GatewaySenderFactory ) ; GatewaySender org.springframework.data.gemfire.wan.GatewaySender = org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.wan.GatewaySender ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.GatewaySender . getId ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.wan.GatewaySender . getRemoteDSId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GatewaySenderFactory org.springframework.data.gemfire.wan.GatewaySenderFactory = org.springframework.data.gemfire.wan.GatewaySenderFactory ( STRING , NUMBER ) ; GatewaySenderFactoryBean org.springframework.data.gemfire.wan.GatewaySenderFactoryBean = new GatewaySenderFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.GatewaySenderFactory ) ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setRemoteDistributedSystemId ( NUMBER ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setParallel ( true ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . doInit ( ) ; void ( org.springframework.data.gemfire.wan.GatewaySenderFactoryBean , org.springframework.data.gemfire.wan.GatewaySenderFactory ) ; GatewaySender org.springframework.data.gemfire.wan.GatewaySender = org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.wan.GatewaySender ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.GatewaySender . getId ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.wan.GatewaySender . getRemoteDSId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { GatewaySenderFactory org.springframework.data.gemfire.wan.GatewaySenderFactory = org.springframework.data.gemfire.wan.GatewaySenderFactory ( STRING , NUMBER ) ; GatewaySenderFactoryBean org.springframework.data.gemfire.wan.GatewaySenderFactoryBean = new GatewaySenderFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.GatewaySenderFactory ) ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setRemoteDistributedSystemId ( NUMBER ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setParallel ( true ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setOrderPolicy ( STRING ) ; try { org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . doInit ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GatewaySenderFactory org.springframework.data.gemfire.wan.GatewaySenderFactory = org.springframework.data.gemfire.wan.GatewaySenderFactory ( STRING , NUMBER ) ; GatewaySenderFactoryBean org.springframework.data.gemfire.wan.GatewaySenderFactoryBean = new GatewaySenderFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.GatewaySenderFactory ) ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setRemoteDistributedSystemId ( NUMBER ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setParallel ( false ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setDispatcherThreads ( NUMBER ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . doInit ( ) ; void ( org.springframework.data.gemfire.wan.GatewaySenderFactoryBean , org.springframework.data.gemfire.wan.GatewaySenderFactory ) ; GatewaySender org.springframework.data.gemfire.wan.GatewaySender = org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.wan.GatewaySender ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.GatewaySender . getId ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.wan.GatewaySender . getRemoteDSId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GatewaySenderFactory org.springframework.data.gemfire.wan.GatewaySenderFactory = org.springframework.data.gemfire.wan.GatewaySenderFactory ( STRING , NUMBER ) ; GatewaySenderFactoryBean org.springframework.data.gemfire.wan.GatewaySenderFactoryBean = new GatewaySenderFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.GatewaySenderFactory ) ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setRemoteDistributedSystemId ( NUMBER ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setOrderPolicy ( STRING ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setDispatcherThreads ( NUMBER ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . doInit ( ) ; void ( org.springframework.data.gemfire.wan.GatewaySenderFactoryBean , org.springframework.data.gemfire.wan.GatewaySenderFactory ) ; GatewaySender org.springframework.data.gemfire.wan.GatewaySender = org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.wan.GatewaySender ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.GatewaySender . getId ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.wan.GatewaySender . getRemoteDSId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GatewaySenderFactory org.springframework.data.gemfire.wan.GatewaySenderFactory = org.springframework.data.gemfire.wan.GatewaySenderFactory ( STRING , NUMBER ) ; GatewaySenderFactoryBean org.springframework.data.gemfire.wan.GatewaySenderFactoryBean = new GatewaySenderFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.GatewaySenderFactory ) ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setRemoteDistributedSystemId ( NUMBER ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setDiskStoreRef ( STRING ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . doInit ( ) ; void ( org.springframework.data.gemfire.wan.GatewaySenderFactoryBean , org.springframework.data.gemfire.wan.GatewaySenderFactory ) ; GatewaySender org.springframework.data.gemfire.wan.GatewaySender = org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.wan.GatewaySender ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.GatewaySender . getId ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.wan.GatewaySender . getRemoteDSId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GatewaySenderFactory org.springframework.data.gemfire.wan.GatewaySenderFactory = org.springframework.data.gemfire.wan.GatewaySenderFactory ( STRING , NUMBER ) ; GatewaySenderFactoryBean org.springframework.data.gemfire.wan.GatewaySenderFactoryBean = new GatewaySenderFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.GatewaySenderFactory ) ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setRemoteDistributedSystemId ( NUMBER ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . setDiskSynchronous ( true ) ; org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . doInit ( ) ; void ( org.springframework.data.gemfire.wan.GatewaySenderFactoryBean , org.springframework.data.gemfire.wan.GatewaySenderFactory ) ; GatewaySender org.springframework.data.gemfire.wan.GatewaySender = org.springframework.data.gemfire.wan.GatewaySenderFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.wan.GatewaySender ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.GatewaySender . getId ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.wan.GatewaySender . getRemoteDSId ( ) ) ; }  <METHOD_END>
