<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.AnnotationConfigApplicationContext org.springframework.statemachine.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.EventDeferTests.Config2 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.EventDeferTests.TestListener org.springframework.statemachine.EventDeferTests.TestListener = new org.springframework.statemachine.EventDeferTests.TestListener ( ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.EventDeferTests.TestListener ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . readField ( STRING , java.lang.Object ) ; assertThat ( java.util.List<> . int ( ) , is ( NUMBER ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( java.util.List<> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.EventDeferTests.Config2 .class , org.springframework.statemachine.EventDeferTests.ExecutorConfig .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.EventDeferTests.TestListener org.springframework.statemachine.EventDeferTests.TestListener = new org.springframework.statemachine.EventDeferTests.TestListener ( ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.EventDeferTests.TestListener ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.EventDeferTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . readField ( STRING , java.lang.Object ) ; assertThat ( java.util.List<> . int ( ) , is ( NUMBER ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( java.util.List<> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.EventDeferTests.Config1 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.EventDeferTests.TestListener org.springframework.statemachine.EventDeferTests.TestListener = new org.springframework.statemachine.EventDeferTests.TestListener ( ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.EventDeferTests.TestListener ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.EventDeferTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . readField ( STRING , java.lang.Object ) ; assertThat ( java.util.List<> . int ( ) , is ( NUMBER ) ) ; org.springframework.statemachine.EventDeferTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.EventDeferTests.Config1 .class , org.springframework.statemachine.EventDeferTests.ExecutorConfig .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.EventDeferTests.TestListener org.springframework.statemachine.EventDeferTests.TestListener = new org.springframework.statemachine.EventDeferTests.TestListener ( ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.EventDeferTests.TestListener ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.EventDeferTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.EventDeferTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . readField ( STRING , java.lang.Object ) ; assertThat ( java.util.List<> . int ( ) , is ( NUMBER ) ) ; org.springframework.statemachine.EventDeferTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.EventDeferTests.Config1 .class , org.springframework.statemachine.EventDeferTests.ExecutorConfig .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.EventDeferTests.TestListener org.springframework.statemachine.EventDeferTests.TestListener = new org.springframework.statemachine.EventDeferTests.TestListener ( ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.EventDeferTests.TestListener ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.EventDeferTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { setup ( ) ; void ( ) ; clean ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.EventDeferTests.Config3 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.EventDeferTests.TestListener org.springframework.statemachine.EventDeferTests.TestListener = new org.springframework.statemachine.EventDeferTests.TestListener ( ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.EventDeferTests.TestListener ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING , STRING ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . readField ( STRING , java.lang.Object ) ; assertThat ( java.util.List<> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.EventDeferTests.Config3 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.EventDeferTests.TestListener org.springframework.statemachine.EventDeferTests.TestListener = new org.springframework.statemachine.EventDeferTests.TestListener ( ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.EventDeferTests.TestListener ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING , STRING ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING , STRING ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . readField ( STRING , java.lang.Object ) ; assertThat ( java.util.List<> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING , STRING ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.EventDeferTests.Config4 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.EventDeferTests.TestListener org.springframework.statemachine.EventDeferTests.TestListener = new org.springframework.statemachine.EventDeferTests.TestListener ( ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.EventDeferTests.TestListener ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . readField ( STRING , java.lang.Object ) ; assertThat ( java.util.List<> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.EventDeferTests.Config4 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.EventDeferTests.TestListener org.springframework.statemachine.EventDeferTests.TestListener = new org.springframework.statemachine.EventDeferTests.TestListener ( ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.EventDeferTests.TestListener ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . readField ( STRING , java.lang.Object ) ; assertThat ( java.util.List<> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.EventDeferTests.Config4 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.EventDeferTests.TestListener org.springframework.statemachine.EventDeferTests.TestListener = new org.springframework.statemachine.EventDeferTests.TestListener ( ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.EventDeferTests.TestListener ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.EventDeferTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . readField ( STRING , java.lang.Object ) ; assertThat ( java.util.List<> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING , STRING , STRING ) . state ( STRING , STRING , STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . state ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . state ( STRING ) . state ( STRING ) . state ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . state ( STRING , STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . state ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . state ( STRING , STRING , STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . state ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = StateMachineSystemConstants . TASK_EXECUTOR_BEAN_NAME ) public org.springframework.statemachine.TaskExecutor org.springframework.statemachine.TaskExecutor ( ) { ThreadPoolTaskExecutor org.springframework.statemachine.ThreadPoolTaskExecutor = new ThreadPoolTaskExecutor ( ) ; org.springframework.statemachine.ThreadPoolTaskExecutor . setCorePoolSize ( NUMBER ) ; org.springframework.statemachine.ThreadPoolTaskExecutor . setMaxPoolSize ( NUMBER ) ; return org.springframework.statemachine.ThreadPoolTaskExecutor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.State<java.lang.String,java.lang.String> , State < java.lang.String , java.lang.String > org.springframework.statemachine.State<java.lang.String,java.lang.String> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.State<java.lang.String,java.lang.String> ) { if ( org.springframework.statemachine.State<java.lang.String,java.lang.String> . getId ( ) . equals ( STRING ) ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; } else if ( org.springframework.statemachine.State<java.lang.String,java.lang.String> . getId ( ) . equals ( STRING ) ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int , int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; int = NUMBER ; }  <METHOD_END>
