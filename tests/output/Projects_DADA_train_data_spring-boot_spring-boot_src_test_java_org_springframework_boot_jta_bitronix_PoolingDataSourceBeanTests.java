<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.jta.bitronix.PoolingDataSourceBean . getMaxPoolSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.jta.bitronix.PoolingDataSourceBean . getAutomaticEnlistingEnabled ( ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.jta.bitronix.PoolingDataSourceBean . isEnableJdbc4ConnectionTest ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.jta.bitronix.PoolingDataSourceBean . setBeanName ( STRING ) ; this . org.springframework.boot.jta.bitronix.PoolingDataSourceBean . afterPropertiesSet ( ) ; assertThat ( this . org.springframework.boot.jta.bitronix.PoolingDataSourceBean . getUniqueName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.jta.bitronix.PoolingDataSourceBean . setBeanName ( STRING ) ; this . org.springframework.boot.jta.bitronix.PoolingDataSourceBean . setUniqueName ( STRING ) ; this . org.springframework.boot.jta.bitronix.PoolingDataSourceBean . afterPropertiesSet ( ) ; assertThat ( this . org.springframework.boot.jta.bitronix.PoolingDataSourceBean . getUniqueName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.sql.XADataSource javax.sql.XADataSource = mock ( javax.sql.XADataSource .class ) ; javax.sql.XAConnection javax.sql.XAConnection = mock ( javax.sql.XAConnection .class ) ; java.sql.Connection java.sql.Connection = mock ( java.sql.Connection .class ) ; given ( javax.sql.XADataSource . javax.sql.XAConnection ( ) ) . willReturn ( javax.sql.XAConnection ) ; given ( javax.sql.XAConnection . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; this . org.springframework.boot.jta.bitronix.PoolingDataSourceBean . setDataSource ( javax.sql.XADataSource ) ; this . org.springframework.boot.jta.bitronix.PoolingDataSourceBean . setBeanName ( STRING ) ; this . org.springframework.boot.jta.bitronix.PoolingDataSourceBean . afterPropertiesSet ( ) ; this . org.springframework.boot.jta.bitronix.PoolingDataSourceBean . init ( ) ; this . org.springframework.boot.jta.bitronix.PoolingDataSourceBean . createPooledConnection ( javax.sql.XADataSource , this . org.springframework.boot.jta.bitronix.PoolingDataSourceBean ) ; verify ( javax.sql.XADataSource ) . getXAConnection ( ) ; TransactionManagerServices . getTaskScheduler ( ) . shutdown ( ) ; }  <METHOD_END>
