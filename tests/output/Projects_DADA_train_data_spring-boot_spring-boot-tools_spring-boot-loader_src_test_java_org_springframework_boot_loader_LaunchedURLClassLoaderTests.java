<METHOD_START> @ Test public void void ( ) java.lang.Exception { LaunchedURLClassLoader org.springframework.boot.loader.LaunchedURLClassLoader = new LaunchedURLClassLoader ( new java.net.URL [] { new java.net.URL ( STRING ) } , java.lang.Class<? extends org.springframework.boot.loader.LaunchedURLClassLoaderTests> ( ) . java.lang.ClassLoader ( ) ) ; assertThat ( org.springframework.boot.loader.LaunchedURLClassLoader . getResource ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { LaunchedURLClassLoader org.springframework.boot.loader.LaunchedURLClassLoader = new LaunchedURLClassLoader ( new java.net.URL [] { new java.net.URL ( STRING ) } , java.lang.Class<? extends org.springframework.boot.loader.LaunchedURLClassLoaderTests> ( ) . java.lang.ClassLoader ( ) ) ; assertThat ( org.springframework.boot.loader.LaunchedURLClassLoader . getResources ( STRING ) . hasMoreElements ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { LaunchedURLClassLoader org.springframework.boot.loader.LaunchedURLClassLoader = new LaunchedURLClassLoader ( new java.net.URL [] { new java.net.URL ( STRING ) } , java.lang.Class<? extends org.springframework.boot.loader.LaunchedURLClassLoaderTests> ( ) . java.lang.ClassLoader ( ) ) ; assertThat ( org.springframework.boot.loader.LaunchedURLClassLoader . getResource ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { LaunchedURLClassLoader org.springframework.boot.loader.LaunchedURLClassLoader = new LaunchedURLClassLoader ( new java.net.URL [] { new java.net.URL ( STRING ) } , java.lang.Class<? extends org.springframework.boot.loader.LaunchedURLClassLoaderTests> ( ) . java.lang.ClassLoader ( ) ) ; assertThat ( org.springframework.boot.loader.LaunchedURLClassLoader . getResources ( STRING ) . hasMoreElements ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.loader.TemporaryFolder . newFile ( ) ; TestJarCreator . createTestJar ( java.io.File ) ; JarFile org.springframework.boot.loader.JarFile = new JarFile ( java.io.File ) ; java.net.URL java.net.URL = org.springframework.boot.loader.JarFile . getUrl ( ) ; LaunchedURLClassLoader org.springframework.boot.loader.LaunchedURLClassLoader = new LaunchedURLClassLoader ( new java.net.URL [] { java.net.URL } , null ) ; java.net.URL java.net.URL = org.springframework.boot.loader.LaunchedURLClassLoader . getResource ( STRING ) ; assertThat ( java.net.URL . java.lang.String ( ) ) . isEqualTo ( java.net.URL + STRING ) ; assertThat ( java.net.URL . java.net.URLConnection ( ) . java.io.InputStream ( ) . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.loader.TemporaryFolder . newFile ( ) ; TestJarCreator . createTestJar ( java.io.File ) ; JarFile org.springframework.boot.loader.JarFile = new JarFile ( java.io.File ) ; java.net.URL java.net.URL = org.springframework.boot.loader.JarFile . getUrl ( ) ; LaunchedURLClassLoader org.springframework.boot.loader.LaunchedURLClassLoader = new LaunchedURLClassLoader ( new java.net.URL [] { java.net.URL } , null ) ; try { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; java.net.URL java.net.URL = org.springframework.boot.loader.LaunchedURLClassLoader . getResource ( STRING ) ; assertThat ( java.net.URL . java.lang.String ( ) ) . isEqualTo ( java.net.URL + STRING ) ; assertThat ( java.net.URL . java.net.URLConnection ( ) . java.io.InputStream ( ) . int ( ) ) . isEqualTo ( NUMBER ) ; } finally { java.lang.Thread . boolean ( ) ; } }  <METHOD_END>
