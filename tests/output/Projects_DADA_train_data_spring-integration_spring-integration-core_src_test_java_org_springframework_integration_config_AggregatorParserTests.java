<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.config.MessageChannel = ( MessageChannel ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; TestAggregatorBean org.springframework.integration.config.TestAggregatorBean = ( TestAggregatorBean ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; java.util.List<org.springframework.integration.config.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.config.Message<?>> = new java.util.ArrayList<org.springframework.integration.config.Message<?>> < Message < ? > > ( ) ; java.util.List<org.springframework.integration.config.Message<?>> . add ( org.springframework.integration.config.Message<java.lang.String> ( STRING , STRING , NUMBER , NUMBER , null ) ) ; java.util.List<org.springframework.integration.config.Message<?>> . add ( org.springframework.integration.config.Message<java.lang.String> ( STRING , STRING , NUMBER , NUMBER , null ) ) ; java.util.List<org.springframework.integration.config.Message<?>> . add ( org.springframework.integration.config.Message<java.lang.String> ( STRING , STRING , NUMBER , NUMBER , null ) ) ; java.util.List<org.springframework.integration.config.Message<?>> . forEach ( org.springframework.integration.config.MessageChannel :: send ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.config.TestAggregatorBean . getAggregatedMessages ( ) . size ( ) ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.TestAggregatorBean . getAggregatedMessages ( ) . get ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.integration.config.Message<> . getPayload ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.ApplicationContext . getBean ( IntegrationUtils . INTEGRATION_MESSAGE_BUILDER_FACTORY_BEAN_NAME ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; assertSame ( java.lang.Object , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.config.QueueChannel = this . org.springframework.integration.config.ApplicationContext . getBean ( STRING , QueueChannel .class ) ; org.springframework.integration.config.QueueChannel . purge ( null ) ; MessageChannel org.springframework.integration.config.MessageChannel = ( MessageChannel ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; java.util.List<org.springframework.integration.config.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.config.Message<?>> = new java.util.ArrayList<org.springframework.integration.config.Message<?>> < Message < ? > > ( ) ; java.util.List<org.springframework.integration.config.Message<?>> . add ( org.springframework.integration.config.Message<java.lang.String> ( STRING , STRING , NUMBER , NUMBER , null ) ) ; java.util.List<org.springframework.integration.config.Message<?>> . add ( org.springframework.integration.config.Message<java.lang.String> ( STRING , STRING , NUMBER , NUMBER , null ) ) ; java.util.List<org.springframework.integration.config.Message<?>> . add ( org.springframework.integration.config.Message<java.lang.String> ( STRING , STRING , NUMBER , NUMBER , null ) ) ; java.util.List<org.springframework.integration.config.Message<?>> . forEach ( org.springframework.integration.config.MessageChannel :: send ) ; assertEquals ( NUMBER , org.springframework.integration.config.QueueChannel . getQueueSize ( ) ) ; org.springframework.integration.config.QueueChannel . purge ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.config.QueueChannel = this . org.springframework.integration.config.ApplicationContext . getBean ( STRING , QueueChannel .class ) ; org.springframework.integration.config.QueueChannel . purge ( null ) ; MessageChannel org.springframework.integration.config.MessageChannel = ( MessageChannel ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; java.util.List<org.springframework.integration.config.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.config.Message<?>> = new java.util.ArrayList<org.springframework.integration.config.Message<?>> < Message < ? > > ( ) ; java.util.List<org.springframework.integration.config.Message<?>> . add ( org.springframework.integration.config.Message<java.lang.String> ( STRING , STRING , NUMBER , NUMBER , null ) ) ; java.util.List<org.springframework.integration.config.Message<?>> . add ( org.springframework.integration.config.Message<java.lang.String> ( STRING , STRING , NUMBER , NUMBER , null ) ) ; java.util.List<org.springframework.integration.config.Message<?>> . add ( org.springframework.integration.config.Message<java.lang.String> ( STRING , STRING , NUMBER , NUMBER , null ) ) ; java.util.List<org.springframework.integration.config.Message<?>> . forEach ( org.springframework.integration.config.MessageChannel :: send ) ; assertEquals ( NUMBER , org.springframework.integration.config.QueueChannel . getQueueSize ( ) ) ; org.springframework.integration.config.QueueChannel . purge ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.config.MessageChannel = ( MessageChannel ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; SubscribableChannel org.springframework.integration.config.SubscribableChannel = ( SubscribableChannel ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.config.Message<?>> < Message < ? > > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.config.Message<?>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.config.Message<?>> < Message < ? > > ( ) ; org.springframework.integration.config.SubscribableChannel . subscribe ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.config.Message<?>> :: set ) ; java.util.List<org.springframework.integration.config.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.config.Message<?>> = new java.util.ArrayList<org.springframework.integration.config.Message<?>> < Message < ? > > ( ) ; java.util.List<org.springframework.integration.config.Message<?>> . add ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; java.util.List<org.springframework.integration.config.Message<?>> . add ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; java.util.List<org.springframework.integration.config.Message<?>> . add ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; java.util.List<org.springframework.integration.config.Message<?>> . forEach ( org.springframework.integration.config.MessageChannel :: send ) ; assertEquals ( STRING , STRING , java.util.concurrent.atomic.AtomicReference<org.springframework.integration.config.Message<?>> . get ( ) . getPayload ( ) . toString ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.ApplicationContext . getBean ( IntegrationUtils . INTEGRATION_MESSAGE_BUILDER_FACTORY_BEAN_NAME ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; assertSame ( java.lang.Object , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EventDrivenConsumer org.springframework.integration.config.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; ReleaseStrategy org.springframework.integration.config.ReleaseStrategy = ( ReleaseStrategy ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; CorrelationStrategy org.springframework.integration.config.CorrelationStrategy = ( CorrelationStrategy ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; MessageChannel org.springframework.integration.config.MessageChannel = ( MessageChannel ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; MessageChannel org.springframework.integration.config.MessageChannel = ( MessageChannel ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = new DirectFieldAccessor ( org.springframework.integration.config.EventDrivenConsumer ) . getPropertyValue ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( AggregatingMessageHandler .class ) ) ) ; DirectFieldAccessor org.springframework.integration.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.lang.Object java.lang.Object = new DirectFieldAccessor ( new DirectFieldAccessor ( new DirectFieldAccessor ( org.springframework.integration.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) . getPropertyValue ( STRING ) ) . getPropertyValue ( STRING ) ) . getPropertyValue ( STRING ) ; assertNull ( java.lang.Object ) ; java.lang.Object java.lang.Object = new DirectFieldAccessor ( new DirectFieldAccessor ( new DirectFieldAccessor ( org.springframework.integration.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) . getPropertyValue ( STRING ) ) . getPropertyValue ( STRING ) ) . getPropertyValue ( STRING ) ; assertTrue ( java.lang.Object . java.lang.String ( ) . boolean ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.config.ReleaseStrategy , org.springframework.integration.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.config.CorrelationStrategy , org.springframework.integration.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.config.MessageChannel , org.springframework.integration.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.config.MessageChannel , org.springframework.integration.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , NUMBER , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertEquals ( STRING , true , org.springframework.integration.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Boolean .class ) ) ; assertTrue ( TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Boolean .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( java.lang.Object , STRING , Expression .class ) . getExpressionString ( ) ) ; assertSame ( this . org.springframework.integration.config.ApplicationContext . getBean ( LockRegistry .class ) , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertSame ( this . org.springframework.integration.config.ApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertSame ( this . org.springframework.integration.config.ApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertNotNull ( TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.integration.config.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.config.Message<?>> = new java.util.ArrayList<org.springframework.integration.config.Message<?>> < Message < ? > > ( ) ; MessageChannel org.springframework.integration.config.MessageChannel = ( MessageChannel ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; java.util.List<org.springframework.integration.config.Message<?>> . add ( org.springframework.integration.config.Message<java.lang.Long> ( NUMBER , STRING , NUMBER , NUMBER , null ) ) ; java.util.List<org.springframework.integration.config.Message<?>> . add ( org.springframework.integration.config.Message<java.lang.Long> ( NUMBER , STRING , NUMBER , NUMBER , null ) ) ; java.util.List<org.springframework.integration.config.Message<?>> . add ( org.springframework.integration.config.Message<java.lang.Long> ( NUMBER , STRING , NUMBER , NUMBER , null ) ) ; java.util.List<org.springframework.integration.config.Message<?>> . forEach ( org.springframework.integration.config.MessageChannel :: send ) ; PollableChannel org.springframework.integration.config.PollableChannel = ( PollableChannel ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; Assert . assertEquals ( NUMBER , org.springframework.integration.config.Message<> . getPayload ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.ApplicationContext . getBean ( IntegrationUtils . INTEGRATION_MESSAGE_BUILDER_FACTORY_BEAN_NAME ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; assertSame ( java.lang.Object , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.AggregatorParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.integration.config.BeanCreationException ) { assertThat ( org.springframework.integration.config.BeanCreationException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.AggregatorParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.integration.config.BeanCreationException ) { assertThat ( org.springframework.integration.config.BeanCreationException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { MessageChannel org.springframework.integration.config.MessageChannel = this . org.springframework.integration.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; EventDrivenConsumer org.springframework.integration.config.EventDrivenConsumer = this . org.springframework.integration.config.ApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; ReleaseStrategy org.springframework.integration.config.ReleaseStrategy = TestUtils . getPropertyValue ( org.springframework.integration.config.EventDrivenConsumer , STRING , ReleaseStrategy .class ) ; Assert . assertTrue ( org.springframework.integration.config.ReleaseStrategy instanceof MethodInvokingReleaseStrategy ) ; MessagingMethodInvokerHelper < java.lang.Long > org.springframework.integration.config.MessagingMethodInvokerHelper<java.lang.Long> = TestUtils . getPropertyValue ( org.springframework.integration.config.ReleaseStrategy , STRING , MessagingMethodInvokerHelper .class ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.config.MessagingMethodInvokerHelper<java.lang.Long> , STRING ) ; assertNull ( java.lang.Object ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.config.MessagingMethodInvokerHelper<java.lang.Long> , STRING ) ; assertTrue ( java.lang.Object . java.lang.String ( ) . boolean ( STRING ) ) ; org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<java.lang.Long> ( NUMBER , STRING , NUMBER , NUMBER , null ) ) ; org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<java.lang.Long> ( NUMBER , STRING , NUMBER , NUMBER , null ) ) ; org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<java.lang.Long> ( NUMBER , STRING , NUMBER , NUMBER , null ) ) ; PollableChannel org.springframework.integration.config.PollableChannel = ( PollableChannel ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; Assert . assertNull ( org.springframework.integration.config.Message<> ) ; org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<java.lang.Long> ( NUMBER , STRING , NUMBER , NUMBER , null ) ) ; org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; Assert . assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.config.MessageChannel = ( MessageChannel ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; EventDrivenConsumer org.springframework.integration.config.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; ReleaseStrategy org.springframework.integration.config.ReleaseStrategy = ( ReleaseStrategy ) new DirectFieldAccessor ( new DirectFieldAccessor ( org.springframework.integration.config.EventDrivenConsumer ) . getPropertyValue ( STRING ) ) . getPropertyValue ( STRING ) ; Assert . assertTrue ( org.springframework.integration.config.ReleaseStrategy instanceof MethodInvokingReleaseStrategy ) ; DirectFieldAccessor org.springframework.integration.config.DirectFieldAccessor = new DirectFieldAccessor ( new DirectFieldAccessor ( new DirectFieldAccessor ( org.springframework.integration.config.ReleaseStrategy ) . getPropertyValue ( STRING ) ) . getPropertyValue ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertNull ( java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertTrue ( java.lang.Object . java.lang.String ( ) . boolean ( STRING ) ) ; org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<java.lang.Long> ( NUMBER , STRING , NUMBER , NUMBER , null ) ) ; org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<java.lang.Long> ( NUMBER , STRING , NUMBER , NUMBER , null ) ) ; org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<java.lang.Long> ( NUMBER , STRING , NUMBER , NUMBER , null ) ) ; PollableChannel org.springframework.integration.config.PollableChannel = ( PollableChannel ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; Assert . assertNull ( org.springframework.integration.config.Message<> ) ; org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<java.lang.Long> ( NUMBER , STRING , NUMBER , NUMBER , null ) ) ; org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; Assert . assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.AggregatorParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.integration.config.BeanCreationException ) { assertThat ( org.springframework.integration.config.BeanCreationException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EventDrivenConsumer org.springframework.integration.config.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.config.ApplicationContext . getBean ( STRING ) ; AggregatingMessageHandler org.springframework.integration.config.AggregatingMessageHandler = ( AggregatingMessageHandler ) TestUtils . getPropertyValue ( org.springframework.integration.config.EventDrivenConsumer , STRING ) ; MethodInvokingMessageGroupProcessor org.springframework.integration.config.MethodInvokingMessageGroupProcessor = ( MethodInvokingMessageGroupProcessor ) TestUtils . getPropertyValue ( org.springframework.integration.config.AggregatingMessageHandler , STRING ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.config.MethodInvokingMessageGroupProcessor , STRING ) ; assertSame ( org.springframework.integration.config.ApplicationContext . getBean ( STRING ) , java.lang.Object ) ; ReleaseStrategy org.springframework.integration.config.ReleaseStrategy = ( ReleaseStrategy ) TestUtils . getPropertyValue ( org.springframework.integration.config.AggregatingMessageHandler , STRING ) ; CorrelationStrategy org.springframework.integration.config.CorrelationStrategy = ( CorrelationStrategy ) TestUtils . getPropertyValue ( org.springframework.integration.config.AggregatingMessageHandler , STRING ) ; java.lang.Long java.lang.Long = TestUtils . getPropertyValue ( org.springframework.integration.config.AggregatingMessageHandler , STRING , java.lang.Long .class ) ; assertTrue ( ExpressionEvaluatingReleaseStrategy .class . boolean ( org.springframework.integration.config.ReleaseStrategy . getClass ( ) ) ) ; assertTrue ( ExpressionEvaluatingCorrelationStrategy .class . boolean ( org.springframework.integration.config.CorrelationStrategy . getClass ( ) ) ) ; assertEquals ( NUMBER , java.lang.Long . long ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.AggregatorParserTests> ( ) ) . close ( ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.BeanDefinitionParsingException ) { assertThat ( org.springframework.integration.config.BeanDefinitionParsingException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> private static < T > org.springframework.integration.config.Message<T> < T > org.springframework.integration.config.Message<T> ( T T , java.lang.Object java.lang.Object , int int , int int , MessageChannel org.springframework.integration.config.MessageChannel ) { return MessageBuilder . withPayload ( T ) . setCorrelationId ( java.lang.Object ) . setSequenceSize ( int ) . setSequenceNumber ( int ) . setReplyChannel ( org.springframework.integration.config.MessageChannel ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ org . springframework . integration . org.springframework.integration.annotation . org.springframework.integration.annotation public boolean boolean ( java.util.Collection<org.springframework.integration.config.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.config.Message<?>> ) { return java.util.Collection<org.springframework.integration.config.Message<?>> . size ( ) >= NUMBER ; }  <METHOD_END>
<METHOD_START> @ org . springframework . integration . org.springframework.integration.annotation . org.springframework.integration.annotation public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.config.Message<?> ) { return new IntegrationMessageHeaderAccessor ( org.springframework.integration.config.Message<> ) . getCorrelationId ( ) ; }  <METHOD_END>
