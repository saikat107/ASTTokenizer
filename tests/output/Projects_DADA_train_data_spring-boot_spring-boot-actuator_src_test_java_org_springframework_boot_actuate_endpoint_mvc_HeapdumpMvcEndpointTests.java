<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext . getBean ( HeapdumpMvcEndpoint .class ) . setEnabled ( true ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointTests.TestHeapdumpMvcEndpoint . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointTests.TestHeapdumpMvcEndpoint . setEnabled ( false ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointTests.TestHeapdumpMvcEndpoint . void ( false ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isServiceUnavailable ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointTests.TestHeapdumpMvcEndpoint . void ( true ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isTooManyRequests ( ) ) ; assertThat ( java.lang.Thread . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MvcResult org.springframework.boot.actuate.endpoint.mvc.MvcResult = this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andReturn ( ) ; byte [] byte[] = org.springframework.boot.actuate.endpoint.mvc.MvcResult . getResponse ( ) . getContentAsByteArray ( ) ; java.util.zip.GZIPInputStream java.util.zip.GZIPInputStream = new java.util.zip.GZIPInputStream ( new ByteArrayInputStream ( byte[] ) ) ; byte [] byte[] = FileCopyUtils . copyToByteArray ( java.util.zip.GZIPInputStream ) ; assertThat ( byte[] ) . isEqualTo ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( options ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint ( ) { return new org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointTests.TestHeapdumpMvcEndpoint ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) ); void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . boolean = true ; this . boolean = false ; this . java.lang.String = STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.actuate.endpoint.mvc.HeapDumper org.springframework.boot.actuate.endpoint.mvc.HeapDumper ( ) { return new HeapDumper ( ) { @ java.lang.Override public void void ( java.io.File java.io.File , boolean boolean )						throws java.io.IOException , java.lang.InterruptedException { if ( ! org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointTests.TestHeapdumpMvcEndpoint .this . boolean ) { throw new HeapDumperUnavailableException ( STRING , null ) ; } if ( org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointTests.TestHeapdumpMvcEndpoint .this . boolean ) { throw new java.lang.InterruptedException ( ) ; } if ( java.io.File . boolean ( ) ) { throw new java.io.IOException ( STRING ) ; } FileCopyUtils . copy ( org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointTests.TestHeapdumpMvcEndpoint .this . java.lang.String . byte[] ( ) , java.io.File ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.File java.io.File , boolean boolean )						throws java.io.IOException , java.lang.InterruptedException { if ( ! org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointTests.TestHeapdumpMvcEndpoint .this . boolean ) { throw new HeapDumperUnavailableException ( STRING , null ) ; } if ( org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointTests.TestHeapdumpMvcEndpoint .this . boolean ) { throw new java.lang.InterruptedException ( ) ; } if ( java.io.File . boolean ( ) ) { throw new java.io.IOException ( STRING ) ; } FileCopyUtils . copy ( org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointTests.TestHeapdumpMvcEndpoint .this . java.lang.String . byte[] ( ) , java.io.File ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
