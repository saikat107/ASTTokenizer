<METHOD_START> public void ( java.lang.String java.lang.String , QueryMethod org.springframework.data.couchbase.repository.query.QueryMethod , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.String = java.lang.String ; this . org.springframework.data.couchbase.repository.query.QueryMethod = org.springframework.data.couchbase.repository.query.QueryMethod ; this . org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.PlaceholderType = org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.PlaceholderType ( java.lang.String ) ; this . org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.N1qlSpelValues = org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.N1qlSpelValues ( java.lang.String , java.lang.String , java.lang.Class<> , false ) ; this . org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.N1qlSpelValues = org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.N1qlSpelValues ( java.lang.String , java.lang.String , java.lang.Class<> , true ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.N1qlSpelValues org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.N1qlSpelValues ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { java.lang.String java.lang.String = STRING + java.lang.String + STRING ; java.lang.String java.lang.String = STRING + java.lang.String + STRING + SELECT_ID + STRING + java.lang.String + STRING + SELECT_CAS ; java.lang.String java.lang.String = STRING + CountFragment . COUNT_ALIAS ; java.lang.String java.lang.String ; if ( boolean ) { java.lang.String = STRING + java.lang.String + STRING + java.lang.String ; } else { java.lang.String = STRING + java.lang.String + STRING + java.lang.String + STRING + java.lang.String ; } java.lang.String java.lang.String = STRING + java.lang.String + STRING + java.lang.Class<> . java.lang.String ( ) + STRING ; return new org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.N1qlSpelValues ( java.lang.String , java.lang.String , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( SpelExpressionParser org.springframework.data.couchbase.repository.query.SpelExpressionParser , EvaluationContext org.springframework.data.couchbase.repository.query.EvaluationContext , boolean boolean ) { org . springframework . org.springframework.expression . org.springframework.expression org.springframework.expression.Expression = org.springframework.data.couchbase.repository.query.SpelExpressionParser . parseExpression ( this . java.lang.String ( ) , new TemplateParserContext ( ) ) ; if ( boolean ) { org.springframework.data.couchbase.repository.query.EvaluationContext . setVariable ( java.lang.String , this . org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.N1qlSpelValues ( ) ) ; } else { org.springframework.data.couchbase.repository.query.EvaluationContext . setVariable ( java.lang.String , this . org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.N1qlSpelValues ( ) ) ; } return org.springframework.expression.Expression . getValue ( org.springframework.data.couchbase.repository.query.EvaluationContext , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.PlaceholderType org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.PlaceholderType ( java.lang.String java.lang.String ) { java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; java.util.List<int[]> < int [] > java.util.List<int[]> = new java.util.ArrayList<int[]> < int [] > ( ) ; while( java.util.regex.Matcher . boolean ( ) ) { java.util.List<int[]> . boolean ( new int [] { java.util.regex.Matcher . int ( ) , java.util.regex.Matcher . int ( ) } ) ; } int int = NUMBER ; int int = NUMBER ; while( java.util.regex.Matcher . boolean ( ) ) { java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; if ( boolean ( java.lang.String , java.util.regex.Matcher . int ( ) , java.util.regex.Matcher . int ( ) , java.util.List<int[]> ) ) { org.springframework.data.couchbase.repository.query.Logger . trace ( STRING , this . org.springframework.data.couchbase.repository.query.QueryMethod . getName ( ) , java.lang.String ) ; int ++ ; } } while( java.util.regex.Matcher . boolean ( ) ) { java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; if ( boolean ( java.lang.String , java.util.regex.Matcher . int ( ) , java.util.regex.Matcher . int ( ) , java.util.List<int[]> ) ) { org.springframework.data.couchbase.repository.query.Logger . trace ( STRING , this . org.springframework.data.couchbase.repository.query.QueryMethod . getName ( ) , java.lang.String ) ; int ++ ; } } if ( int > NUMBER && int > NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + int + STRING + int + STRING + this . org.springframework.data.couchbase.repository.query.QueryMethod . getName ( ) ) ; } else if ( int > NUMBER ) { return org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.PlaceholderType . org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.PlaceholderType ; } else if ( int > NUMBER ) { return org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.PlaceholderType . org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.PlaceholderType ; } else { return org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.PlaceholderType . org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.PlaceholderType ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , int int , int int , java.util.List<int[]> < int [] > java.util.List<int[]> ) { for ( int [] int[] : java.util.List<int[]> ) { if ( int[] [ NUMBER ] <= int && int[] [ NUMBER ] >= int ) { org.springframework.data.couchbase.repository.query.Logger . trace ( STRING , this . org.springframework.data.couchbase.repository.query.QueryMethod . getName ( ) , java.lang.String ) ; return false ; } } return true ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.repository.query.JsonValue org.springframework.data.couchbase.repository.query.JsonValue ( ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor ) { JsonArray org.springframework.data.couchbase.repository.query.JsonArray = JsonArray . create ( ) ; for ( Parameter org.springframework.data.couchbase.repository.query.Parameter : this . org.springframework.data.couchbase.repository.query.QueryMethod . getParameters ( ) . getBindableParameters ( ) ) { org.springframework.data.couchbase.repository.query.JsonArray . add ( org.springframework.data.couchbase.repository.query.ParameterAccessor . getBindableValue ( org.springframework.data.couchbase.repository.query.Parameter . getIndex ( ) ) ) ; } return org.springframework.data.couchbase.repository.query.JsonArray ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.repository.query.JsonObject org.springframework.data.couchbase.repository.query.JsonObject ( ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor ) { JsonObject org.springframework.data.couchbase.repository.query.JsonObject = JsonObject . create ( ) ; for ( Parameter org.springframework.data.couchbase.repository.query.Parameter : this . org.springframework.data.couchbase.repository.query.QueryMethod . getParameters ( ) . getBindableParameters ( ) ) { java.lang.String java.lang.String = org.springframework.data.couchbase.repository.query.Parameter . getPlaceholder ( ) ; java.lang.Object java.lang.Object = org.springframework.data.couchbase.repository.query.ParameterAccessor . getBindableValue ( org.springframework.data.couchbase.repository.query.Parameter . getIndex ( ) ) ; if ( java.lang.String != null && java.lang.String . char ( NUMBER ) == ':' ) { java.lang.String = java.lang.String . java.lang.String ( STRING , STRING ) ; org.springframework.data.couchbase.repository.query.JsonObject . put ( java.lang.String , java.lang.Object ) ; } else { org.springframework.data.couchbase.repository.query.Parameter . getName ( ) . ifPresent ( name -> namedValues . put ( name , value ) ) ; } } return org.springframework.data.couchbase.repository.query.JsonObject ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.couchbase.repository.query.JsonValue org.springframework.data.couchbase.repository.query.JsonValue ( ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor ) { switch ( this . org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.PlaceholderType ) { case org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.PlaceholderType : return org.springframework.data.couchbase.repository.query.JsonObject ( org.springframework.data.couchbase.repository.query.ParameterAccessor ) ; case org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.PlaceholderType : return org.springframework.data.couchbase.repository.query.JsonValue ( org.springframework.data.couchbase.repository.query.ParameterAccessor ) ; case org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.PlaceholderType : default: return JsonArray . empty ( ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . java.lang.String . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.N1qlSpelValues org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.N1qlSpelValues ( ) { return this . org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.N1qlSpelValues ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.N1qlSpelValues org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.N1qlSpelValues ( ) { return this . org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser.N1qlSpelValues ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
