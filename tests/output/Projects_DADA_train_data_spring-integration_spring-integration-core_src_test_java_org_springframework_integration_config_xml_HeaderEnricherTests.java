<METHOD_START> @ Test public void void ( ) { PollableChannel org.springframework.integration.config.xml.PollableChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.config.xml.PollableChannel , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . getReplyChannel ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PollableChannel org.springframework.integration.config.xml.PollableChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . getReplyChannel ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PollableChannel org.springframework.integration.config.xml.PollableChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.config.xml.PollableChannel , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . getReplyChannel ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PollableChannel org.springframework.integration.config.xml.PollableChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.xml.Message<> . getPayload ( ) ; assertEquals ( MessageTransformationException .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = ( ( MessageTransformationException ) java.lang.Object ) . getFailedMessage ( ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.config.xml.PollableChannel , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . getErrorChannel ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MessagingTemplate . sendAndReceive ( org.springframework.integration.config.xml.MessageChannel , new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( STRING , new IntegrationMessageHeaderAccessor ( org.springframework.integration.config.xml.Message<> ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MessagingTemplate . sendAndReceive ( org.springframework.integration.config.xml.MessageChannel , new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; java.lang.Object java.lang.Object = new IntegrationMessageHeaderAccessor ( org.springframework.integration.config.xml.Message<> ) . getCorrelationId ( ) ; assertEquals ( java.lang.Long .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MessagingTemplate . sendAndReceive ( org.springframework.integration.config.xml.MessageChannel , new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( NUMBER , new IntegrationMessageHeaderAccessor ( org.springframework.integration.config.xml.Message<> ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MessagingTemplate . sendAndReceive ( org.springframework.integration.config.xml.MessageChannel , new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( new java.lang.Long ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.config.xml.Message<> ) . getExpirationDate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MessagingTemplate . sendAndReceive ( org.springframework.integration.config.xml.MessageChannel , new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( new java.lang.Long ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.config.xml.Message<> ) . getExpirationDate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MessagingTemplate . sendAndReceive ( org.springframework.integration.config.xml.MessageChannel , new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.config.xml.Message<> ) . getPriority ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MessagingTemplate . sendAndReceive ( org.springframework.integration.config.xml.MessageChannel , new GenericMessage < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( new java.lang.Integer ( - NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.config.xml.Message<> ) . getPriority ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MessagingTemplate . sendAndReceive ( org.springframework.integration.config.xml.MessageChannel , new GenericMessage < org.springframework.integration.config.xml.HeaderEnricherTests.TestBean > ( new org.springframework.integration.config.xml.HeaderEnricherTests.TestBean ( STRING ) ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MessagingTemplate . sendAndReceive ( org.springframework.integration.config.xml.MessageChannel , org.springframework.integration.config.xml.Message<> ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MessagingTemplate . sendAndReceive ( org.springframework.integration.config.xml.MessageChannel , new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ; assertEquals ( java.util.Date .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.util.Date java.util.Date = ( java.util.Date ) java.lang.Object ; assertTrue ( new java.util.Date ( ) . long ( ) - java.util.Date . long ( ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MessagingTemplate . sendAndReceive ( org.springframework.integration.config.xml.MessageChannel , new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( java.lang.Long .class , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) . getClass ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MessagingTemplate . sendAndReceive ( org.springframework.integration.config.xml.MessageChannel , new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( java.lang.String .class , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) . getClass ( ) ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MessagingTemplate . sendAndReceive ( org.springframework.integration.config.xml.MessageChannel , new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( org.springframework.integration.config.xml.HeaderEnricherTests.TestBean .class , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) . getClass ( ) ) ; org.springframework.integration.config.xml.HeaderEnricherTests.TestBean org.springframework.integration.config.xml.HeaderEnricherTests.TestBean = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , org.springframework.integration.config.xml.HeaderEnricherTests.TestBean .class ) ; assertSame ( org.springframework.integration.config.xml.HeaderEnricherTests.TestBean , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MessagingTemplate . sendAndReceive ( org.springframework.integration.config.xml.MessageChannel , new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( org.springframework.integration.config.xml.HeaderEnricherTests.TestBean .class , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) . getClass ( ) ) ; org.springframework.integration.config.xml.HeaderEnricherTests.TestBean org.springframework.integration.config.xml.HeaderEnricherTests.TestBean = new org.springframework.integration.config.xml.HeaderEnricherTests.TestBean ( STRING ) ; assertEquals ( org.springframework.integration.config.xml.HeaderEnricherTests.TestBean , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MessagingTemplate . sendAndReceive ( org.springframework.integration.config.xml.MessageChannel , new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( java.lang.String .class , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) . getClass ( ) ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionParsingException .class ) public void void ( ) { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.xml.HeaderEnricherTests> ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MessagingTemplate . sendAndReceive ( org.springframework.integration.config.xml.MessageChannel , new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; java.lang.Object java.lang.Object = new IntegrationMessageHeaderAccessor ( org.springframework.integration.config.xml.Message<> ) . getHeader ( IntegrationMessageHeaderAccessor . ROUTING_SLIP ) ; assertNotNull ( java.lang.Object ) ; assertThat ( java.lang.Object , instanceOf ( java.util.Map .class ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . java.util.Set<> ( ) . java.util.Iterator<> ( ) . next ( ) ; assertEquals ( STRING , java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) ) ; assertThat ( java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , instanceOf ( ExpressionEvaluatingRoutingSlipRouteStrategy .class ) ) ; assertEquals ( STRING , java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null || java.lang.Class<? extends org.springframework.integration.config.xml.HeaderEnricherTests.TestBean> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.integration.config.xml.HeaderEnricherTests.TestBean org.springframework.integration.config.xml.HeaderEnricherTests.TestBean = ( org.springframework.integration.config.xml.HeaderEnricherTests.TestBean ) java.lang.Object ; return ! ( java.lang.String != null ? ! java.lang.String . boolean ( org.springframework.integration.config.xml.HeaderEnricherTests.TestBean . java.lang.String ) : org.springframework.integration.config.xml.HeaderEnricherTests.TestBean . java.lang.String != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.String != null ? java.lang.String . int ( ) : NUMBER ; }  <METHOD_END>
