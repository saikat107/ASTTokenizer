<METHOD_START> @ Test public void void ( ) java.lang.Exception { StompClientSupport org.springframework.integration.stomp.StompClientSupport = mock ( StompClientSupport .class ) ; org.springframework.integration.stomp.StompClientSupport . setTaskScheduler ( new ConcurrentTaskScheduler ( ) ) ; AbstractStompSessionManager org.springframework.integration.stomp.AbstractStompSessionManager = new AbstractStompSessionManager ( org.springframework.integration.stomp.StompClientSupport ) { private final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; @ java.lang.Override protected org.springframework.integration.stomp.ListenableFuture<org.springframework.integration.stomp.StompSession> < StompSession > org.springframework.integration.stomp.ListenableFuture<org.springframework.integration.stomp.StompSession> ( StompSessionHandler org.springframework.integration.stomp.StompSessionHandler ) { if ( ! this . java.util.concurrent.atomic.AtomicBoolean . boolean ( true ) ) { throw new java.lang.RuntimeException ( STRING ) ; } else { SettableListenableFuture < StompSession > org.springframework.integration.stomp.SettableListenableFuture<org.springframework.integration.stomp.StompSession> = new SettableListenableFuture < StompSession > ( ) ; StompSession org.springframework.integration.stomp.StompSession = mock ( StompSession .class ) ; org.springframework.integration.stomp.SettableListenableFuture<org.springframework.integration.stomp.StompSession> . set ( org.springframework.integration.stomp.StompSession ) ; org.springframework.integration.stomp.StompSessionHandler . afterConnected ( org.springframework.integration.stomp.StompSession , getConnectHeaders ( ) ) ; return org.springframework.integration.stomp.SettableListenableFuture<org.springframework.integration.stomp.StompSession> ; } } } ; org.springframework.integration.stomp.AbstractStompSessionManager . start ( ) ; final SettableListenableFuture < StompSession > org.springframework.integration.stomp.SettableListenableFuture<org.springframework.integration.stomp.StompSession> = new SettableListenableFuture < StompSession > ( ) ; org.springframework.integration.stomp.AbstractStompSessionManager . connect ( new StompSessionHandlerAdapter ( ) { @ java.lang.Override public void void ( StompSession org.springframework.integration.stomp.StompSession , StompHeaders org.springframework.integration.stomp.StompHeaders ) { org.springframework.integration.stomp.SettableListenableFuture<org.springframework.integration.stomp.StompSession> . set ( org.springframework.integration.stomp.StompSession ) ; } } ) ; assertNotNull ( org.springframework.integration.stomp.SettableListenableFuture<org.springframework.integration.stomp.StompSession> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.stomp.AbstractStompSessionManager . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.stomp.ListenableFuture<org.springframework.integration.stomp.StompSession> < StompSession > org.springframework.integration.stomp.ListenableFuture<org.springframework.integration.stomp.StompSession> ( StompSessionHandler org.springframework.integration.stomp.StompSessionHandler ) { if ( ! this . java.util.concurrent.atomic.AtomicBoolean . boolean ( true ) ) { throw new java.lang.RuntimeException ( STRING ) ; } else { SettableListenableFuture < StompSession > org.springframework.integration.stomp.SettableListenableFuture<org.springframework.integration.stomp.StompSession> = new SettableListenableFuture < StompSession > ( ) ; StompSession org.springframework.integration.stomp.StompSession = mock ( StompSession .class ) ; org.springframework.integration.stomp.SettableListenableFuture<org.springframework.integration.stomp.StompSession> . set ( org.springframework.integration.stomp.StompSession ) ; org.springframework.integration.stomp.StompSessionHandler . afterConnected ( org.springframework.integration.stomp.StompSession , getConnectHeaders ( ) ) ; return org.springframework.integration.stomp.SettableListenableFuture<org.springframework.integration.stomp.StompSession> ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSession org.springframework.integration.stomp.StompSession , StompHeaders org.springframework.integration.stomp.StompHeaders ) { org.springframework.integration.stomp.SettableListenableFuture<org.springframework.integration.stomp.StompSession> . set ( org.springframework.integration.stomp.StompSession ) ; }  <METHOD_END>
