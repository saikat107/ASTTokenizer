<METHOD_START> @ Test public void void ( ) java.lang.Exception { ContextCustomizer org.springframework.boot.test.autoconfigure.filter.ContextCustomizer = this . org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactory . createContextCustomizer ( org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactoryTests.NoAnnotation .class , null ) ; assertThat ( org.springframework.boot.test.autoconfigure.filter.ContextCustomizer ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ContextCustomizer org.springframework.boot.test.autoconfigure.filter.ContextCustomizer = this . org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactory . createContextCustomizer ( org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactoryTests.WithExcludeFilters .class , null ) ; assertThat ( org.springframework.boot.test.autoconfigure.filter.ContextCustomizer ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ContextCustomizer org.springframework.boot.test.autoconfigure.filter.ContextCustomizer = this . org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactory . createContextCustomizer ( org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactoryTests.WithExcludeFilters .class , null ) ; ContextCustomizer org.springframework.boot.test.autoconfigure.filter.ContextCustomizer = this . org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactory . createContextCustomizer ( org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactoryTests.WithSameExcludeFilters .class , null ) ; ContextCustomizer org.springframework.boot.test.autoconfigure.filter.ContextCustomizer = this . org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactory . createContextCustomizer ( org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactoryTests.WithDifferentExcludeFilters .class , null ) ; assertThat ( org.springframework.boot.test.autoconfigure.filter.ContextCustomizer . hashCode ( ) ) . isEqualTo ( org.springframework.boot.test.autoconfigure.filter.ContextCustomizer . hashCode ( ) ) ; assertThat ( org.springframework.boot.test.autoconfigure.filter.ContextCustomizer ) . isEqualTo ( org.springframework.boot.test.autoconfigure.filter.ContextCustomizer ) . isEqualTo ( org.springframework.boot.test.autoconfigure.filter.ContextCustomizer ) . isNotEqualTo ( org.springframework.boot.test.autoconfigure.filter.ContextCustomizer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ContextCustomizer org.springframework.boot.test.autoconfigure.filter.ContextCustomizer = this . org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactory . createContextCustomizer ( org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactoryTests.WithExcludeFilters .class , null ) ; org.springframework.boot.test.autoconfigure.filter.ContextCustomizer . customizeContext ( this . org.springframework.boot.test.autoconfigure.filter.ConfigurableApplicationContext , this . org.springframework.boot.test.autoconfigure.filter.MergedContextConfiguration ) ; this . org.springframework.boot.test.autoconfigure.filter.ConfigurableApplicationContext . refresh ( ) ; TypeExcludeFilter org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter = this . org.springframework.boot.test.autoconfigure.filter.ConfigurableApplicationContext . getBean ( TypeExcludeFilter .class ) ; MetadataReaderFactory org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory = new SimpleMetadataReaderFactory ( ) ; MetadataReader org.springframework.boot.test.autoconfigure.filter.MetadataReader = org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory . getMetadataReader ( org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactoryTests.NoAnnotation .class . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter . match ( org.springframework.boot.test.autoconfigure.filter.MetadataReader , org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) ) . isFalse ( ) ; org.springframework.boot.test.autoconfigure.filter.MetadataReader = org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory . getMetadataReader ( org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactoryTests.SimpleExclude .class . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter . match ( org.springframework.boot.test.autoconfigure.filter.MetadataReader , org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) ) . isTrue ( ) ; org.springframework.boot.test.autoconfigure.filter.MetadataReader = org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory . getMetadataReader ( org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactoryTests.TestClassAwareExclude .class . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter . match ( org.springframework.boot.test.autoconfigure.filter.MetadataReader , org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MetadataReader org.springframework.boot.test.autoconfigure.filter.MetadataReader , MetadataReaderFactory org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) throws java.io.IOException { return org.springframework.boot.test.autoconfigure.filter.MetadataReader . getClassMetadata ( ) . getClassName ( ) . equals ( java.lang.Class<? extends org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactoryTests.SimpleExclude> ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactoryTests.SimpleExclude .class . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( java.lang.Class<? extends org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactoryTests.SimpleExclude> ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { assertThat ( java.lang.Class<> ) . isNotNull ( ) ; }  <METHOD_END>
