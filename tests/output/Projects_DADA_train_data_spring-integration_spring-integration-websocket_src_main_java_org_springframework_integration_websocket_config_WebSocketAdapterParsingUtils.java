<METHOD_START> static void void ( BeanDefinitionBuilder org.springframework.integration.websocket.config.BeanDefinitionBuilder , ParserContext org.springframework.integration.websocket.config.ParserContext , org.w3c.dom.Element org.w3c.dom.Element ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.websocket.config.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } org.springframework.integration.websocket.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; if ( boolean || boolean ) { java.util.List<org.springframework.integration.websocket.config.BeanReference> < BeanReference > java.util.List<org.springframework.integration.websocket.config.BeanReference> = new ManagedList < BeanReference > ( ) ; java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<org.springframework.integration.websocket.config.BeanReference> . add ( new RuntimeBeanReference ( java.lang.String ) ) ; } BeanDefinitionBuilder org.springframework.integration.websocket.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( SubProtocolHandlerRegistry .class ) . addConstructorArgValue ( java.util.List<org.springframework.integration.websocket.config.BeanReference> ) ; if ( boolean ) { org.springframework.integration.websocket.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } org.springframework.integration.websocket.config.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.integration.websocket.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.util.List<org.springframework.integration.websocket.config.BeanReference> < BeanReference > java.util.List<org.springframework.integration.websocket.config.BeanReference> = new ManagedList < BeanReference > ( ) ; java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<org.springframework.integration.websocket.config.BeanReference> . add ( new RuntimeBeanReference ( java.lang.String ) ) ; } org.springframework.integration.websocket.config.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.List<org.springframework.integration.websocket.config.BeanReference> ) ; } IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.websocket.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; }  <METHOD_END>
