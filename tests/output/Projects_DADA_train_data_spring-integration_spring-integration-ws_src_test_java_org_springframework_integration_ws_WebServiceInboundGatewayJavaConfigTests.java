<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageContext org.springframework.integration.ws.MessageContext = mock ( MessageContext .class ) ; SoapMessage org.springframework.integration.ws.SoapMessage = mock ( SoapMessage .class ) ; SoapMessage org.springframework.integration.ws.SoapMessage = mock ( SoapMessage .class ) ; SoapBody org.springframework.integration.ws.SoapBody = mock ( SoapBody .class ) ; java.lang.String java.lang.String = STRING ; javax.xml.transform.Source javax.xml.transform.Source = new StringSource ( java.lang.String ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; javax.xml.transform.Result javax.xml.transform.Result = new javax.xml.transform.stream.StreamResult ( java.io.StringWriter ) ; when ( org.springframework.integration.ws.MessageContext . getResponse ( ) ) . thenReturn ( org.springframework.integration.ws.SoapMessage ) ; when ( org.springframework.integration.ws.SoapMessage . getPayloadResult ( ) ) . thenReturn ( javax.xml.transform.Result ) ; when ( org.springframework.integration.ws.SoapMessage . getSoapBody ( ) ) . thenReturn ( org.springframework.integration.ws.SoapBody ) ; when ( org.springframework.integration.ws.MessageContext . getRequest ( ) ) . thenReturn ( org.springframework.integration.ws.SoapMessage ) ; when ( org.springframework.integration.ws.SoapMessage . getPayloadSource ( ) ) . thenReturn ( javax.xml.transform.Source ) ; this . org.springframework.integration.ws.WebServiceMessageReceiver . receive ( org.springframework.integration.ws.MessageContext ) ; verify ( org.springframework.integration.ws.SoapBody ) . addServerOrReceiverFault ( eq ( STRING ) , any ( java.util.Locale .class ) ) ; this . org.springframework.integration.ws.Lifecycle . start ( ) ; this . org.springframework.integration.ws.WebServiceMessageReceiver . receive ( org.springframework.integration.ws.MessageContext ) ; assertTrue ( java.io.StringWriter . java.lang.String ( ) . boolean ( java.lang.String ) ) ; org.springframework.integration.ws.MessageContext = mock ( MessageContext .class ) ; org.springframework.integration.ws.SoapMessage = mock ( SoapMessage .class ) ; javax.xml.transform.Source = new StringSource ( STRING ) ; when ( org.springframework.integration.ws.MessageContext . getRequest ( ) ) . thenReturn ( org.springframework.integration.ws.SoapMessage ) ; when ( org.springframework.integration.ws.SoapMessage . getPayloadSource ( ) ) . thenReturn ( javax.xml.transform.Source ) ; this . org.springframework.integration.ws.WebServiceMessageReceiver . receive ( org.springframework.integration.ws.MessageContext ) ; Message < ? > org.springframework.integration.ws.Message<?> = this . org.springframework.integration.ws.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ws.Message<> ) ; assertThat ( org.springframework.integration.ws.Message<> . getPayload ( ) , instanceOf ( org.w3c.dom.Element .class ) ) ; org.w3c.dom.Element org.w3c.dom.Element = ( org.w3c.dom.Element ) org.springframework.integration.ws.Message<> . getPayload ( ) ; assertEquals ( STRING , org.w3c.dom.Element . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.ws.WebServiceMessageReceiver org.springframework.integration.ws.WebServiceMessageReceiver ( ) { return new SoapMessageDispatcher ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.ws.EndpointMapping org.springframework.integration.ws.EndpointMapping ( ) { UriEndpointMapping org.springframework.integration.ws.UriEndpointMapping = new UriEndpointMapping ( ) ; org.springframework.integration.ws.UriEndpointMapping . setDefaultEndpoint ( org.springframework.integration.ws.MessageEndpoint ( ) ) ; return org.springframework.integration.ws.UriEndpointMapping ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.ws.MessageEndpoint org.springframework.integration.ws.MessageEndpoint ( ) { SimpleWebServiceInboundGateway org.springframework.integration.ws.SimpleWebServiceInboundGateway = new SimpleWebServiceInboundGateway ( ) ; org.springframework.integration.ws.SimpleWebServiceInboundGateway . setRequestChannel ( org.springframework.integration.ws.MessageChannel ( ) ) ; org.springframework.integration.ws.SimpleWebServiceInboundGateway . setAutoStartup ( false ) ; return org.springframework.integration.ws.SimpleWebServiceInboundGateway ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.ws.MessageChannel org.springframework.integration.ws.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Transformer ( inputChannel = STRING ) public org.springframework.integration.ws.ExpressionEvaluatingTransformer org.springframework.integration.ws.ExpressionEvaluatingTransformer ( ) { return new ExpressionEvaluatingTransformer ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.ws.PollableChannel org.springframework.integration.ws.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ PayloadRoot ( localPart = STRING ) void void ( @ RequestPayload org.w3c.dom.Element org.w3c.dom.Element );  <METHOD_END>
