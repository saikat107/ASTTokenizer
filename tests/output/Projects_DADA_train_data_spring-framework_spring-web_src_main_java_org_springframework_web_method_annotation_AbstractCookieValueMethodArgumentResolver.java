<METHOD_START> public void ( ConfigurableBeanFactory org.springframework.web.method.annotation.ConfigurableBeanFactory ) { super( org.springframework.web.method.annotation.ConfigurableBeanFactory ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.method.annotation.MethodParameter ) { return org.springframework.web.method.annotation.MethodParameter . hasParameterAnnotation ( CookieValue .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.method.annotation.NamedValueInfo org.springframework.web.method.annotation.NamedValueInfo ( MethodParameter org.springframework.web.method.annotation.MethodParameter ) { CookieValue org.springframework.web.method.annotation.CookieValue = org.springframework.web.method.annotation.MethodParameter . getParameterAnnotation ( CookieValue .class ) ; return new org.springframework.web.method.annotation.AbstractCookieValueMethodArgumentResolver.CookieValueNamedValueInfo ( org.springframework.web.method.annotation.CookieValue ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , MethodParameter org.springframework.web.method.annotation.MethodParameter ) throws org.springframework.web.method.annotation.ServletRequestBindingException { throw new ServletRequestBindingException ( STRING + java.lang.String + STRING + org.springframework.web.method.annotation.MethodParameter . getNestedParameterType ( ) . getSimpleName ( ) ) ; }  <METHOD_END>
<METHOD_START> private void ( CookieValue org.springframework.web.method.annotation.CookieValue ) { super( org.springframework.web.method.annotation.CookieValue . name ( ) , org.springframework.web.method.annotation.CookieValue . required ( ) , org.springframework.web.method.annotation.CookieValue . defaultValue ( ) ); }  <METHOD_END>
