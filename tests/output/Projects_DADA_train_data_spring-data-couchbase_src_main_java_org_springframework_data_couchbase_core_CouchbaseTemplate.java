<METHOD_START> public void ( final ClusterInfo org.springframework.data.couchbase.core.ClusterInfo , final Bucket org.springframework.data.couchbase.core.Bucket ) { this( org.springframework.data.couchbase.core.ClusterInfo , org.springframework.data.couchbase.core.Bucket , null , null ); }  <METHOD_END>
<METHOD_START> public void ( final ClusterInfo org.springframework.data.couchbase.core.ClusterInfo , final Bucket org.springframework.data.couchbase.core.Bucket , final TranslationService org.springframework.data.couchbase.core.TranslationService ) { this( org.springframework.data.couchbase.core.ClusterInfo , org.springframework.data.couchbase.core.Bucket , null , org.springframework.data.couchbase.core.TranslationService ); }  <METHOD_END>
<METHOD_START> public void ( final ClusterInfo org.springframework.data.couchbase.core.ClusterInfo , final Bucket org.springframework.data.couchbase.core.Bucket , final CouchbaseConverter org.springframework.data.couchbase.core.CouchbaseConverter , final TranslationService org.springframework.data.couchbase.core.TranslationService ) { this . org.springframework.data.couchbase.core.ClusterInfo = org.springframework.data.couchbase.core.ClusterInfo ; this . org.springframework.data.couchbase.core.Bucket = org.springframework.data.couchbase.core.Bucket ; this . org.springframework.data.couchbase.core.CouchbaseConverter = org.springframework.data.couchbase.core.CouchbaseConverter == null ? org.springframework.data.couchbase.core.CouchbaseConverter ( ) : org.springframework.data.couchbase.core.CouchbaseConverter ; this . org.springframework.data.couchbase.core.TranslationService = org.springframework.data.couchbase.core.TranslationService == null ? org.springframework.data.couchbase.core.TranslationService ( ) : org.springframework.data.couchbase.core.TranslationService ; this . org.springframework.data.couchbase.core.MappingContext<? extends org.springframework.data.couchbase.core.CouchbasePersistentEntity<?>,org.springframework.data.couchbase.core.CouchbasePersistentProperty> = this . org.springframework.data.couchbase.core.CouchbaseConverter . getMappingContext ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.TranslationService org.springframework.data.couchbase.core.TranslationService ( ) { JacksonTranslationService org.springframework.data.couchbase.core.JacksonTranslationService = new JacksonTranslationService ( ) ; org.springframework.data.couchbase.core.JacksonTranslationService . afterPropertiesSet ( ) ; return org.springframework.data.couchbase.core.JacksonTranslationService ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.CouchbaseConverter org.springframework.data.couchbase.core.CouchbaseConverter ( ) { MappingCouchbaseConverter org.springframework.data.couchbase.core.MappingCouchbaseConverter = new MappingCouchbaseConverter ( new CouchbaseMappingContext ( ) ) ; org.springframework.data.couchbase.core.MappingCouchbaseConverter . afterPropertiesSet ( ) ; return org.springframework.data.couchbase.core.MappingCouchbaseConverter ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.Document<java.lang.String> < java.lang.String > org.springframework.data.couchbase.core.Document<java.lang.String> ( final CouchbaseDocument org.springframework.data.couchbase.core.CouchbaseDocument , java.lang.Long java.lang.Long ) { java.lang.String java.lang.String = org.springframework.data.couchbase.core.TranslationService . encode ( org.springframework.data.couchbase.core.CouchbaseDocument ) ; if ( java.lang.Long == null ) { return RawJsonDocument . create ( org.springframework.data.couchbase.core.CouchbaseDocument . getId ( ) , org.springframework.data.couchbase.core.CouchbaseDocument . getExpiration ( ) , java.lang.String ) ; } else { return RawJsonDocument . create ( org.springframework.data.couchbase.core.CouchbaseDocument . getId ( ) , org.springframework.data.couchbase.core.CouchbaseDocument . getExpiration ( ) , java.lang.String , java.lang.Long ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.CouchbaseStorable org.springframework.data.couchbase.core.CouchbaseStorable ( final Document < java.lang.String > org.springframework.data.couchbase.core.Document<java.lang.String> , final CouchbaseStorable org.springframework.data.couchbase.core.CouchbaseStorable ) { return org.springframework.data.couchbase.core.TranslationService . decode ( org.springframework.data.couchbase.core.Document<java.lang.String> . content ( ) , org.springframework.data.couchbase.core.CouchbaseStorable ) ; }  <METHOD_END>
<METHOD_START> protected static void void ( java.lang.Object java.lang.Object ) { if ( null != java.lang.Object ) { if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) || java.util.Collection<java.lang.String> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Exception java.lang.Exception ) { if ( org.springframework.data.couchbase.core.WriteResultChecking == WriteResultChecking . NONE ) { return; } if ( org.springframework.data.couchbase.core.WriteResultChecking == WriteResultChecking . EXCEPTION ) { throw new CouchbaseDataIntegrityViolationException ( java.lang.String , java.lang.Exception ) ; } else { org.springframework.data.couchbase.core.Logger . error ( java.lang.String , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> public void void ( WriteResultChecking org.springframework.data.couchbase.core.WriteResultChecking ) { this . org.springframework.data.couchbase.core.WriteResultChecking = org.springframework.data.couchbase.core.WriteResultChecking == null ? org.springframework.data.couchbase.core.WriteResultChecking : org.springframework.data.couchbase.core.WriteResultChecking ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final ApplicationEventPublisher org.springframework.data.couchbase.core.ApplicationEventPublisher ) { this . org.springframework.data.couchbase.core.ApplicationEventPublisher = org.springframework.data.couchbase.core.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> protected < T > void void ( final CouchbaseMappingEvent < T > org.springframework.data.couchbase.core.CouchbaseMappingEvent<T> ) { if ( org.springframework.data.couchbase.core.ApplicationEventPublisher != null ) { org.springframework.data.couchbase.core.ApplicationEventPublisher . publishEvent ( org.springframework.data.couchbase.core.CouchbaseMappingEvent<T> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { void ( java.lang.Object , PersistTo . NONE , ReplicateTo . NONE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { void ( java.lang.Object , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo , org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType . org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Collection<?> < ? > java.util.Collection<?> ) { void ( java.util.Collection<> , PersistTo . NONE , ReplicateTo . NONE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Collection<?> < ? > java.util.Collection<?> , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { void ( java.lang.Object , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo , org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType . org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { void ( java.lang.Object , PersistTo . NONE , ReplicateTo . NONE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { void ( java.lang.Object , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo , org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType . org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Collection<?> < ? > java.util.Collection<?> ) { void ( java.util.Collection<> , PersistTo . NONE , ReplicateTo . NONE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Collection<?> < ? > java.util.Collection<?> , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { void ( java.lang.Object , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo , org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType . org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { void ( java.lang.Object , PersistTo . NONE , ReplicateTo . NONE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { void ( java.lang.Object , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo , org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType . org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Collection<?> < ? > java.util.Collection<?> ) { void ( java.util.Collection<> , PersistTo . NONE , ReplicateTo . NONE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Collection<?> < ? > java.util.Collection<?> , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { void ( java.lang.Object , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo , org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType . org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( final java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { final CouchbasePersistentEntity < ? > org.springframework.data.couchbase.core.CouchbasePersistentEntity<?> = org.springframework.data.couchbase.core.MappingContext<,org.springframework.data.couchbase.core.CouchbasePersistentProperty> . getRequiredPersistentEntity ( java.lang.Class<T> ) ; RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument = T ( new BucketCallback < RawJsonDocument > ( ) { @ java.lang.Override public org.springframework.data.couchbase.core.RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument ( ) { if ( org.springframework.data.couchbase.core.CouchbasePersistentEntity<> . isTouchOnRead ( ) ) { return org.springframework.data.couchbase.core.Bucket . getAndTouch ( java.lang.String , org.springframework.data.couchbase.core.CouchbasePersistentEntity<> . getExpiry ( ) , RawJsonDocument .class ) ; } else { return org.springframework.data.couchbase.core.Bucket . get ( java.lang.String , RawJsonDocument .class ) ; } } } ) ; return java.lang.Object ( java.lang.String , org.springframework.data.couchbase.core.RawJsonDocument , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument ( ) { if ( org.springframework.data.couchbase.core.CouchbasePersistentEntity<> . isTouchOnRead ( ) ) { return org.springframework.data.couchbase.core.Bucket . getAndTouch ( java.lang.String , org.springframework.data.couchbase.core.CouchbasePersistentEntity<> . getExpiry ( ) , RawJsonDocument .class ) ; } else { return org.springframework.data.couchbase.core.Bucket . get ( java.lang.String , RawJsonDocument .class ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.List<T> < T > java.util.List<T> ( ViewQuery org.springframework.data.couchbase.core.ViewQuery , final java.lang.Class<T> < T > java.lang.Class<T> ) { if ( ! org.springframework.data.couchbase.core.ViewQuery . isIncludeDocs ( ) || ! org.springframework.data.couchbase.core.ViewQuery . includeDocsTarget ( ) . equals ( RawJsonDocument .class ) ) { if ( org.springframework.data.couchbase.core.ViewQuery . isOrderRetained ( ) ) { org.springframework.data.couchbase.core.ViewQuery . includeDocsOrdered ( RawJsonDocument .class ) ; } else { org.springframework.data.couchbase.core.ViewQuery . includeDocs ( RawJsonDocument .class ) ; } } org.springframework.data.couchbase.core.ViewQuery . reduce ( false ) ; return org.springframework.data.couchbase.core.Observable ( org.springframework.data.couchbase.core.Bucket . async ( ) . query ( org.springframework.data.couchbase.core.ViewQuery ) ) . flatMap ( new Func1 < AsyncViewResult , Observable < AsyncViewRow > > ( ) { @ java.lang.Override public org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncViewRow> < AsyncViewRow > org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncViewRow> ( AsyncViewResult org.springframework.data.couchbase.core.AsyncViewResult ) { return org.springframework.data.couchbase.core.AsyncViewResult . error ( ) . flatMap ( new Func1 < JsonObject , Observable < AsyncViewRow > > ( ) { @ java.lang.Override public org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncViewRow> < AsyncViewRow > org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncViewRow> ( JsonObject org.springframework.data.couchbase.core.JsonObject ) { return Observable . error ( new CouchbaseQueryExecutionException ( STRING + org.springframework.data.couchbase.core.JsonObject . toString ( ) ) ) ; } } ) . switchIfEmpty ( org.springframework.data.couchbase.core.AsyncViewResult . rows ( ) ) ; } } ) . flatMap ( new Func1 < AsyncViewRow , Observable < T > > ( ) { @ java.lang.Override public org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( AsyncViewRow org.springframework.data.couchbase.core.AsyncViewRow ) { final java.lang.String java.lang.String = org.springframework.data.couchbase.core.AsyncViewRow . id ( ) ; return org.springframework.data.couchbase.core.AsyncViewRow . document ( RawJsonDocument .class ) . map ( new Func1 < RawJsonDocument , T > ( ) { @ java.lang.Override public T T ( RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument ) { T T = java.lang.Object ( java.lang.String , org.springframework.data.couchbase.core.RawJsonDocument , java.lang.Class<T> ) ; return T ; } } ) ; } } ) . filter ( new Func1 < T , java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( T T ) { return T != null ; } } ) . onErrorResumeNext ( new Func1 < java.lang.Throwable , Observable < T > > ( ) { @ java.lang.Override public org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof TranscodingException ) { return Observable . error ( new CouchbaseQueryExecutionException ( STRING , java.lang.Throwable ) ) ; } else { return Observable . error ( java.lang.Throwable ) ; } } } ) . toList ( ) . toBlocking ( ) . single ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncViewRow> < AsyncViewRow > org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncViewRow> ( AsyncViewResult org.springframework.data.couchbase.core.AsyncViewResult ) { return org.springframework.data.couchbase.core.AsyncViewResult . error ( ) . flatMap ( new Func1 < JsonObject , Observable < AsyncViewRow > > ( ) { @ java.lang.Override public org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncViewRow> < AsyncViewRow > org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncViewRow> ( JsonObject org.springframework.data.couchbase.core.JsonObject ) { return Observable . error ( new CouchbaseQueryExecutionException ( STRING + org.springframework.data.couchbase.core.JsonObject . toString ( ) ) ) ; } } ) . switchIfEmpty ( org.springframework.data.couchbase.core.AsyncViewResult . rows ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncViewRow> < AsyncViewRow > org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncViewRow> ( JsonObject org.springframework.data.couchbase.core.JsonObject ) { return Observable . error ( new CouchbaseQueryExecutionException ( STRING + org.springframework.data.couchbase.core.JsonObject . toString ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( AsyncViewRow org.springframework.data.couchbase.core.AsyncViewRow ) { final java.lang.String java.lang.String = org.springframework.data.couchbase.core.AsyncViewRow . id ( ) ; return org.springframework.data.couchbase.core.AsyncViewRow . document ( RawJsonDocument .class ) . map ( new Func1 < RawJsonDocument , T > ( ) { @ java.lang.Override public T T ( RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument ) { T T = java.lang.Object ( java.lang.String , org.springframework.data.couchbase.core.RawJsonDocument , java.lang.Class<T> ) ; return T ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument ) { T T = java.lang.Object ( java.lang.String , org.springframework.data.couchbase.core.RawJsonDocument , java.lang.Class<T> ) ; return T ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( T T ) { return T != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof TranscodingException ) { return Observable . error ( new CouchbaseQueryExecutionException ( STRING , java.lang.Throwable ) ) ; } else { return Observable . error ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.ViewResult org.springframework.data.couchbase.core.ViewResult ( final ViewQuery org.springframework.data.couchbase.core.ViewQuery ) { return T ( new BucketCallback < ViewResult > ( ) { @ java.lang.Override public org.springframework.data.couchbase.core.ViewResult org.springframework.data.couchbase.core.ViewResult ( ) { return org.springframework.data.couchbase.core.Bucket . query ( org.springframework.data.couchbase.core.ViewQuery ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.ViewResult org.springframework.data.couchbase.core.ViewResult ( ) { return org.springframework.data.couchbase.core.Bucket . query ( org.springframework.data.couchbase.core.ViewQuery ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.List<T> < T > java.util.List<T> ( SpatialViewQuery org.springframework.data.couchbase.core.SpatialViewQuery , java.lang.Class<T> < T > java.lang.Class<T> ) { org.springframework.data.couchbase.core.SpatialViewQuery . includeDocs ( false ) ; try { final SpatialViewResult org.springframework.data.couchbase.core.SpatialViewResult = org.springframework.data.couchbase.core.SpatialViewResult ( org.springframework.data.couchbase.core.SpatialViewQuery ) ; if ( org.springframework.data.couchbase.core.SpatialViewResult . error ( ) != null ) { throw new CouchbaseQueryExecutionException ( STRING + org.springframework.data.couchbase.core.SpatialViewResult . error ( ) . toString ( ) ) ; } java.util.List<org.springframework.data.couchbase.core.SpatialViewRow> < SpatialViewRow > java.util.List<org.springframework.data.couchbase.core.SpatialViewRow> = org.springframework.data.couchbase.core.SpatialViewResult . allRows ( ) ; final java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( java.util.List<org.springframework.data.couchbase.core.SpatialViewRow> . size ( ) ) ; for ( final SpatialViewRow org.springframework.data.couchbase.core.SpatialViewRow : java.util.List<org.springframework.data.couchbase.core.SpatialViewRow> ) { T T = java.lang.Object ( org.springframework.data.couchbase.core.SpatialViewRow . id ( ) , org.springframework.data.couchbase.core.SpatialViewRow . document ( RawJsonDocument .class ) , java.lang.Class<T> ) ; if ( T != null ) { java.util.List<T> . boolean ( T ) ; } } return java.util.List<T> ; } catch ( TranscodingException org.springframework.data.couchbase.core.TranscodingException ) { throw new CouchbaseQueryExecutionException ( STRING , org.springframework.data.couchbase.core.TranscodingException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.SpatialViewResult org.springframework.data.couchbase.core.SpatialViewResult ( final SpatialViewQuery org.springframework.data.couchbase.core.SpatialViewQuery ) { return T ( new BucketCallback < SpatialViewResult > ( ) { @ java.lang.Override public org.springframework.data.couchbase.core.SpatialViewResult org.springframework.data.couchbase.core.SpatialViewResult ( ) java.util.concurrent.TimeoutException , java.util.concurrent.ExecutionException , java.lang.InterruptedException { return org.springframework.data.couchbase.core.Bucket . query ( org.springframework.data.couchbase.core.SpatialViewQuery ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.SpatialViewResult org.springframework.data.couchbase.core.SpatialViewResult ( ) java.util.concurrent.TimeoutException , java.util.concurrent.ExecutionException , java.lang.InterruptedException { return org.springframework.data.couchbase.core.Bucket . query ( org.springframework.data.couchbase.core.SpatialViewQuery ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.List<T> < T > java.util.List<T> ( N1qlQuery org.springframework.data.couchbase.core.N1qlQuery , java.lang.Class<T> < T > java.lang.Class<T> ) { void ( ) ; try { N1qlQueryResult org.springframework.data.couchbase.core.N1qlQueryResult = org.springframework.data.couchbase.core.N1qlQueryResult ( org.springframework.data.couchbase.core.N1qlQuery ) ; if ( org.springframework.data.couchbase.core.N1qlQueryResult . finalSuccess ( ) ) { java.util.List<org.springframework.data.couchbase.core.N1qlQueryRow> < N1qlQueryRow > java.util.List<org.springframework.data.couchbase.core.N1qlQueryRow> = org.springframework.data.couchbase.core.N1qlQueryResult . allRows ( ) ; java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( java.util.List<org.springframework.data.couchbase.core.N1qlQueryRow> . size ( ) ) ; for ( N1qlQueryRow org.springframework.data.couchbase.core.N1qlQueryRow : java.util.List<org.springframework.data.couchbase.core.N1qlQueryRow> ) { JsonObject org.springframework.data.couchbase.core.JsonObject = org.springframework.data.couchbase.core.N1qlQueryRow . value ( ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.core.JsonObject . getString ( SELECT_ID ) ; java.lang.Long java.lang.Long = org.springframework.data.couchbase.core.JsonObject . getLong ( SELECT_CAS ) ; if ( java.lang.String == null || java.lang.Long == null ) { throw new CouchbaseQueryExecutionException ( STRING + STRING + SELECT_ID + STRING + SELECT_CAS + STRING ) ; } org.springframework.data.couchbase.core.JsonObject = org.springframework.data.couchbase.core.JsonObject . removeKey ( SELECT_ID ) . removeKey ( SELECT_CAS ) ; RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument = RawJsonDocument . create ( java.lang.String , org.springframework.data.couchbase.core.JsonObject . toString ( ) , java.lang.Long ) ; T T = java.lang.Object ( java.lang.String , org.springframework.data.couchbase.core.RawJsonDocument , java.lang.Class<T> ) ; java.util.List<T> . boolean ( T ) ; } return java.util.List<T> ; } else { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; for ( JsonObject org.springframework.data.couchbase.core.JsonObject : org.springframework.data.couchbase.core.N1qlQueryResult . errors ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( '\n' ) . java.lang.StringBuilder ( org.springframework.data.couchbase.core.JsonObject ) ; } throw new CouchbaseQueryExecutionException ( java.lang.StringBuilder . java.lang.String ( ) ) ; } } catch ( TranscodingException org.springframework.data.couchbase.core.TranscodingException ) { throw new CouchbaseQueryExecutionException ( STRING , org.springframework.data.couchbase.core.TranscodingException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.List<T> < T > java.util.List<T> ( N1qlQuery org.springframework.data.couchbase.core.N1qlQuery , java.lang.Class<T> < T > java.lang.Class<T> ) { void ( ) ; try { N1qlQueryResult org.springframework.data.couchbase.core.N1qlQueryResult = org.springframework.data.couchbase.core.N1qlQueryResult ( org.springframework.data.couchbase.core.N1qlQuery ) ; if ( org.springframework.data.couchbase.core.N1qlQueryResult . finalSuccess ( ) ) { java.util.List<org.springframework.data.couchbase.core.N1qlQueryRow> < N1qlQueryRow > java.util.List<org.springframework.data.couchbase.core.N1qlQueryRow> = org.springframework.data.couchbase.core.N1qlQueryResult . allRows ( ) ; java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( java.util.List<org.springframework.data.couchbase.core.N1qlQueryRow> . size ( ) ) ; for ( N1qlQueryRow org.springframework.data.couchbase.core.N1qlQueryRow : java.util.List<org.springframework.data.couchbase.core.N1qlQueryRow> ) { JsonObject org.springframework.data.couchbase.core.JsonObject = org.springframework.data.couchbase.core.N1qlQueryRow . value ( ) ; T T = org.springframework.data.couchbase.core.TranslationService . decodeFragment ( org.springframework.data.couchbase.core.JsonObject . toString ( ) , java.lang.Class<T> ) ; java.util.List<T> . boolean ( T ) ; } return java.util.List<T> ; } else { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; for ( JsonObject org.springframework.data.couchbase.core.JsonObject : org.springframework.data.couchbase.core.N1qlQueryResult . errors ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( '\n' ) . java.lang.StringBuilder ( org.springframework.data.couchbase.core.JsonObject ) ; } throw new CouchbaseQueryExecutionException ( java.lang.StringBuilder . java.lang.String ( ) ) ; } } catch ( TranscodingException org.springframework.data.couchbase.core.TranscodingException ) { throw new CouchbaseQueryExecutionException ( STRING , org.springframework.data.couchbase.core.TranscodingException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.N1qlQueryResult org.springframework.data.couchbase.core.N1qlQueryResult ( final N1qlQuery org.springframework.data.couchbase.core.N1qlQuery ) { void ( ) ; return T ( new BucketCallback < N1qlQueryResult > ( ) { @ java.lang.Override public org.springframework.data.couchbase.core.N1qlQueryResult org.springframework.data.couchbase.core.N1qlQueryResult ( ) java.util.concurrent.TimeoutException , java.util.concurrent.ExecutionException , java.lang.InterruptedException { return org.springframework.data.couchbase.core.Bucket . query ( org.springframework.data.couchbase.core.N1qlQuery ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.N1qlQueryResult org.springframework.data.couchbase.core.N1qlQueryResult ( ) java.util.concurrent.TimeoutException , java.util.concurrent.ExecutionException , java.lang.InterruptedException { return org.springframework.data.couchbase.core.Bucket . query ( org.springframework.data.couchbase.core.N1qlQuery ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( final java.lang.String java.lang.String ) { return T ( new BucketCallback < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) java.util.concurrent.TimeoutException , java.util.concurrent.ExecutionException , java.lang.InterruptedException { return org.springframework.data.couchbase.core.Bucket . exists ( java.lang.String ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) java.util.concurrent.TimeoutException , java.util.concurrent.ExecutionException , java.lang.InterruptedException { return org.springframework.data.couchbase.core.Bucket . exists ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { void ( java.lang.Object , PersistTo . NONE , ReplicateTo . NONE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { void ( java.lang.Object , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Collection<?> < ? > java.util.Collection<?> ) { void ( java.util.Collection<> , PersistTo . NONE , ReplicateTo . NONE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Collection<?> < ? > java.util.Collection<?> , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { void ( java.lang.Object , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( BucketCallback < T > org.springframework.data.couchbase.core.BucketCallback<T> ) { try { return org.springframework.data.couchbase.core.BucketCallback<T> . doInBucket ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw org.springframework.data.couchbase.core.PersistenceExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ) ; } catch ( java.util.concurrent.TimeoutException java.util.concurrent.TimeoutException ) { throw new QueryTimeoutException ( java.util.concurrent.TimeoutException . java.lang.String ( ) , java.util.concurrent.TimeoutException ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new OperationInterruptedException ( java.lang.InterruptedException . java.lang.String ( ) , java.lang.InterruptedException ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { throw new OperationInterruptedException ( java.util.concurrent.ExecutionException . java.lang.String ( ) , java.util.concurrent.ExecutionException ) ; } }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( Observable < T > org.springframework.data.couchbase.core.Observable<T> ) { return org.springframework.data.couchbase.core.Observable<T> . onErrorResumeNext ( new Func1 < java.lang.Throwable , Observable < T > > ( ) { @ java.lang.Override public org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof java.lang.RuntimeException ) { return Observable . error ( org.springframework.data.couchbase.core.PersistenceExceptionTranslator . translateExceptionIfPossible ( ( java.lang.RuntimeException ) java.lang.Throwable ) ) ; } else if ( java.lang.Throwable instanceof java.util.concurrent.TimeoutException ) { return Observable . error ( new QueryTimeoutException ( java.lang.Throwable . java.lang.String ( ) , java.lang.Throwable ) ) ; } else if ( java.lang.Throwable instanceof java.lang.InterruptedException ) { return Observable . error ( new OperationInterruptedException ( java.lang.Throwable . java.lang.String ( ) , java.lang.Throwable ) ) ; } else if ( java.lang.Throwable instanceof java.util.concurrent.ExecutionException ) { return Observable . error ( new OperationInterruptedException ( java.lang.Throwable . java.lang.String ( ) , java.lang.Throwable ) ) ; } else { return Observable . error ( java.lang.Throwable ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof java.lang.RuntimeException ) { return Observable . error ( org.springframework.data.couchbase.core.PersistenceExceptionTranslator . translateExceptionIfPossible ( ( java.lang.RuntimeException ) java.lang.Throwable ) ) ; } else if ( java.lang.Throwable instanceof java.util.concurrent.TimeoutException ) { return Observable . error ( new QueryTimeoutException ( java.lang.Throwable . java.lang.String ( ) , java.lang.Throwable ) ) ; } else if ( java.lang.Throwable instanceof java.lang.InterruptedException ) { return Observable . error ( new OperationInterruptedException ( java.lang.Throwable . java.lang.String ( ) , java.lang.Throwable ) ) ; } else if ( java.lang.Throwable instanceof java.util.concurrent.ExecutionException ) { return Observable . error ( new OperationInterruptedException ( java.lang.Throwable . java.lang.String ( ) , java.lang.Throwable ) ) ; } else { return Observable . error ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , final PersistTo org.springframework.data.couchbase.core.PersistTo , final ReplicateTo org.springframework.data.couchbase.core.ReplicateTo , final org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType ) { void ( java.lang.Object ) ; final ConvertingPropertyAccessor org.springframework.data.couchbase.core.ConvertingPropertyAccessor = org.springframework.data.couchbase.core.ConvertingPropertyAccessor ( java.lang.Object ) ; final CouchbasePersistentEntity < ? > org.springframework.data.couchbase.core.CouchbasePersistentEntity<?> = org.springframework.data.couchbase.core.MappingContext<,org.springframework.data.couchbase.core.CouchbasePersistentProperty> . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; final java.util.Optional<org.springframework.data.couchbase.core.CouchbasePersistentProperty> < CouchbasePersistentProperty > java.util.Optional<org.springframework.data.couchbase.core.CouchbasePersistentProperty> = org.springframework.data.couchbase.core.CouchbasePersistentEntity<> . getVersionProperty ( ) ; final java.lang.Long java.lang.Long = java.util.Optional<org.springframework.data.couchbase.core.CouchbasePersistentProperty> . flatMap ( p -> accessor . getProperty ( p , Long .class ) ) . orElse ( null ) ; void ( new BeforeConvertEvent < java.lang.Object > ( java.lang.Object ) ) ; final CouchbaseDocument org.springframework.data.couchbase.core.CouchbaseDocument = new CouchbaseDocument ( ) ; org.springframework.data.couchbase.core.CouchbaseConverter . write ( java.lang.Object , org.springframework.data.couchbase.core.CouchbaseDocument ) ; void ( new BeforeSaveEvent < java.lang.Object > ( java.lang.Object , org.springframework.data.couchbase.core.CouchbaseDocument ) ) ; T ( new BucketCallback < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) java.lang.InterruptedException , java.util.concurrent.ExecutionException { Document < java.lang.String > org.springframework.data.couchbase.core.Document<java.lang.String> = org.springframework.data.couchbase.core.Document<java.lang.String> ( org.springframework.data.couchbase.core.CouchbaseDocument , java.lang.Long ) ; Document < java.lang.String > org.springframework.data.couchbase.core.Document<java.lang.String> ; boolean boolean = java.util.Optional<org.springframework.data.couchbase.core.CouchbasePersistentProperty> . isPresent ( ) ; boolean boolean = java.lang.Long != null && java.lang.Long > NUMBER ; try { switch ( org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType ) { case org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType : if ( ! boolean ) { org.springframework.data.couchbase.core.Document<java.lang.String> = org.springframework.data.couchbase.core.Bucket . upsert ( org.springframework.data.couchbase.core.Document<java.lang.String> , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) ; } else if ( boolean ) { org.springframework.data.couchbase.core.Document<java.lang.String> = org.springframework.data.couchbase.core.Bucket . replace ( org.springframework.data.couchbase.core.Document<java.lang.String> , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) ; } else { org.springframework.data.couchbase.core.Document<java.lang.String> = org.springframework.data.couchbase.core.Bucket . insert ( org.springframework.data.couchbase.core.Document<java.lang.String> , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) ; } break; case org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType : org.springframework.data.couchbase.core.Document<java.lang.String> = org.springframework.data.couchbase.core.Bucket . replace ( org.springframework.data.couchbase.core.Document<java.lang.String> , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) ; break; case org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType : default: org.springframework.data.couchbase.core.Document<java.lang.String> = org.springframework.data.couchbase.core.Bucket . insert ( org.springframework.data.couchbase.core.Document<java.lang.String> , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) ; break; } if ( org.springframework.data.couchbase.core.Document<java.lang.String> != null && org.springframework.data.couchbase.core.Document<java.lang.String> . cas ( ) != NUMBER ) { java.util.Optional<org.springframework.data.couchbase.core.CouchbasePersistentProperty> . ifPresent ( p -> accessor . setProperty ( p , Optional . ofNullable ( storedDoc . cas ( ) ) ) ) ; return true ; } return false ; } catch ( DocumentAlreadyExistsException org.springframework.data.couchbase.core.DocumentAlreadyExistsException ) { throw new OptimisticLockingFailureException ( org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType . java.lang.String ( ) + STRING + java.lang.Long , org.springframework.data.couchbase.core.DocumentAlreadyExistsException ) ; } catch ( CASMismatchException org.springframework.data.couchbase.core.CASMismatchException ) { throw new OptimisticLockingFailureException ( org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType . java.lang.String ( ) + STRING + java.lang.Long , org.springframework.data.couchbase.core.CASMismatchException ) ; } catch ( java.lang.Exception java.lang.Exception ) { void ( org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType . java.lang.String ( ) + STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; return false ; } } } ) ; void ( new AfterSaveEvent < java.lang.Object > ( java.lang.Object , org.springframework.data.couchbase.core.CouchbaseDocument ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) java.lang.InterruptedException , java.util.concurrent.ExecutionException { Document < java.lang.String > org.springframework.data.couchbase.core.Document<java.lang.String> = org.springframework.data.couchbase.core.Document<java.lang.String> ( org.springframework.data.couchbase.core.CouchbaseDocument , java.lang.Long ) ; Document < java.lang.String > org.springframework.data.couchbase.core.Document<java.lang.String> ; boolean boolean = java.util.Optional<org.springframework.data.couchbase.core.CouchbasePersistentProperty> . isPresent ( ) ; boolean boolean = java.lang.Long != null && java.lang.Long > NUMBER ; try { switch ( org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType ) { case org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType : if ( ! boolean ) { org.springframework.data.couchbase.core.Document<java.lang.String> = org.springframework.data.couchbase.core.Bucket . upsert ( org.springframework.data.couchbase.core.Document<java.lang.String> , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) ; } else if ( boolean ) { org.springframework.data.couchbase.core.Document<java.lang.String> = org.springframework.data.couchbase.core.Bucket . replace ( org.springframework.data.couchbase.core.Document<java.lang.String> , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) ; } else { org.springframework.data.couchbase.core.Document<java.lang.String> = org.springframework.data.couchbase.core.Bucket . insert ( org.springframework.data.couchbase.core.Document<java.lang.String> , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) ; } break; case org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType : org.springframework.data.couchbase.core.Document<java.lang.String> = org.springframework.data.couchbase.core.Bucket . replace ( org.springframework.data.couchbase.core.Document<java.lang.String> , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) ; break; case org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType : default: org.springframework.data.couchbase.core.Document<java.lang.String> = org.springframework.data.couchbase.core.Bucket . insert ( org.springframework.data.couchbase.core.Document<java.lang.String> , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) ; break; } if ( org.springframework.data.couchbase.core.Document<java.lang.String> != null && org.springframework.data.couchbase.core.Document<java.lang.String> . cas ( ) != NUMBER ) { java.util.Optional<org.springframework.data.couchbase.core.CouchbasePersistentProperty> . ifPresent ( p -> accessor . setProperty ( p , Optional . ofNullable ( storedDoc . cas ( ) ) ) ) ; return true ; } return false ; } catch ( DocumentAlreadyExistsException org.springframework.data.couchbase.core.DocumentAlreadyExistsException ) { throw new OptimisticLockingFailureException ( org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType . java.lang.String ( ) + STRING + java.lang.Long , org.springframework.data.couchbase.core.DocumentAlreadyExistsException ) ; } catch ( CASMismatchException org.springframework.data.couchbase.core.CASMismatchException ) { throw new OptimisticLockingFailureException ( org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType . java.lang.String ( ) + STRING + java.lang.Long , org.springframework.data.couchbase.core.CASMismatchException ) ; } catch ( java.lang.Exception java.lang.Exception ) { void ( org.springframework.data.couchbase.core.CouchbaseTemplate.PersistType . java.lang.String ( ) + STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; return false ; } }  <METHOD_END>
<METHOD_START> private void void ( final java.lang.Object java.lang.Object , final PersistTo org.springframework.data.couchbase.core.PersistTo , final ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { void ( java.lang.Object ) ; void ( new BeforeDeleteEvent < java.lang.Object > ( java.lang.Object ) ) ; if ( java.lang.Object instanceof java.lang.String ) { T ( new BucketCallback < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) java.lang.InterruptedException , java.util.concurrent.ExecutionException { try { RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument = org.springframework.data.couchbase.core.Bucket . remove ( ( java.lang.String ) java.lang.Object , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo , RawJsonDocument .class ) ; return org.springframework.data.couchbase.core.RawJsonDocument != null ; } catch ( java.lang.Exception java.lang.Exception ) { void ( STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; return false ; } } } ) ; void ( new AfterDeleteEvent < java.lang.Object > ( java.lang.Object ) ) ; return; } final CouchbaseDocument org.springframework.data.couchbase.core.CouchbaseDocument = new CouchbaseDocument ( ) ; org.springframework.data.couchbase.core.CouchbaseConverter . write ( java.lang.Object , org.springframework.data.couchbase.core.CouchbaseDocument ) ; T ( new BucketCallback < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) { try { RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument = org.springframework.data.couchbase.core.Bucket . remove ( org.springframework.data.couchbase.core.CouchbaseDocument . getId ( ) , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo , RawJsonDocument .class ) ; return org.springframework.data.couchbase.core.RawJsonDocument != null ; } catch ( java.lang.Exception java.lang.Exception ) { void ( STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; return false ; } } } ) ; void ( new AfterDeleteEvent < java.lang.Object > ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) java.lang.InterruptedException , java.util.concurrent.ExecutionException { try { RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument = org.springframework.data.couchbase.core.Bucket . remove ( ( java.lang.String ) java.lang.Object , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo , RawJsonDocument .class ) ; return org.springframework.data.couchbase.core.RawJsonDocument != null ; } catch ( java.lang.Exception java.lang.Exception ) { void ( STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; return false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) { try { RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument = org.springframework.data.couchbase.core.Bucket . remove ( org.springframework.data.couchbase.core.CouchbaseDocument . getId ( ) , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo , RawJsonDocument .class ) ; return org.springframework.data.couchbase.core.RawJsonDocument != null ; } catch ( java.lang.Exception java.lang.Exception ) { void ( STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; return false ; } }  <METHOD_END>
<METHOD_START> private < T > T T ( java.lang.String java.lang.String , Document < java.lang.String > org.springframework.data.couchbase.core.Document<java.lang.String> , java.lang.Class<T> < T > java.lang.Class<T> ) { if ( org.springframework.data.couchbase.core.Document<java.lang.String> == null ) { return null ; } final CouchbaseDocument org.springframework.data.couchbase.core.CouchbaseDocument = new CouchbaseDocument ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.data.couchbase.core.CouchbaseConverter . read ( java.lang.Class<T> , ( CouchbaseDocument ) org.springframework.data.couchbase.core.CouchbaseStorable ( org.springframework.data.couchbase.core.Document<java.lang.String> , org.springframework.data.couchbase.core.CouchbaseDocument ) ) ; final ConvertingPropertyAccessor org.springframework.data.couchbase.core.ConvertingPropertyAccessor = org.springframework.data.couchbase.core.ConvertingPropertyAccessor ( java.lang.Object ) ; CouchbasePersistentEntity < ? > org.springframework.data.couchbase.core.CouchbasePersistentEntity<?> = org.springframework.data.couchbase.core.MappingContext<,org.springframework.data.couchbase.core.CouchbasePersistentProperty> . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; org.springframework.data.couchbase.core.CouchbasePersistentEntity<> . getVersionProperty ( ) . ifPresent ( p -> accessor . setProperty ( p , Optional . ofNullable ( data . cas ( ) ) ) ) ; return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> private final org.springframework.data.couchbase.core.ConvertingPropertyAccessor org.springframework.data.couchbase.core.ConvertingPropertyAccessor ( java.lang.Object java.lang.Object ) { CouchbasePersistentEntity < ? > org.springframework.data.couchbase.core.CouchbasePersistentEntity<?> = org.springframework.data.couchbase.core.MappingContext<,org.springframework.data.couchbase.core.CouchbasePersistentProperty> . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; PersistentPropertyAccessor org.springframework.data.couchbase.core.PersistentPropertyAccessor = org.springframework.data.couchbase.core.CouchbasePersistentEntity<> . getPropertyAccessor ( java.lang.Object ) ; return new ConvertingPropertyAccessor ( org.springframework.data.couchbase.core.PersistentPropertyAccessor , org.springframework.data.couchbase.core.CouchbaseConverter . getConversionService ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( ! org.springframework.data.couchbase.core.ClusterInfo ( ) . checkAvailable ( CouchbaseFeature . N1QL ) ) { throw new UnsupportedCouchbaseFeatureException ( STRING , CouchbaseFeature . N1QL ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.Bucket org.springframework.data.couchbase.core.Bucket ( ) { return this . org.springframework.data.couchbase.core.Bucket ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.ClusterInfo org.springframework.data.couchbase.core.ClusterInfo ( ) { return this . org.springframework.data.couchbase.core.ClusterInfo ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.CouchbaseConverter org.springframework.data.couchbase.core.CouchbaseConverter ( ) { return this . org.springframework.data.couchbase.core.CouchbaseConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.Consistency org.springframework.data.couchbase.core.Consistency ( ) { return org.springframework.data.couchbase.core.Consistency ; }  <METHOD_END>
<METHOD_START> public void void ( Consistency org.springframework.data.couchbase.core.Consistency ) { this . org.springframework.data.couchbase.core.Consistency = org.springframework.data.couchbase.core.Consistency ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
