<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.data.gemfire.config.annotation.BeanFactory ) throws org.springframework.data.gemfire.config.annotation.BeansException { org.springframework.data.gemfire.config.annotation.StandardEvaluationContext . setBeanResolver ( new BeanFactoryResolver ( org.springframework.data.gemfire.config.annotation.BeanFactory ) ) ; if ( org.springframework.data.gemfire.config.annotation.BeanFactory instanceof ConfigurableBeanFactory ) { ConfigurableBeanFactory org.springframework.data.gemfire.config.annotation.ConfigurableBeanFactory = ( ConfigurableBeanFactory ) org.springframework.data.gemfire.config.annotation.BeanFactory ; org.springframework.data.gemfire.config.annotation.StandardEvaluationContext . setTypeLocator ( new StandardTypeLocator ( org.springframework.data.gemfire.config.annotation.ConfigurableBeanFactory . getBeanClassLoader ( ) ) ) ; ConversionService org.springframework.data.gemfire.config.annotation.ConversionService = org.springframework.data.gemfire.config.annotation.ConfigurableBeanFactory . getConversionService ( ) ; if ( org.springframework.data.gemfire.config.annotation.ConversionService != null ) { org.springframework.data.gemfire.config.annotation.StandardEvaluationContext . setTypeConverter ( new StandardTypeConverter ( org.springframework.data.gemfire.config.annotation.ConversionService ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.data.gemfire.config.annotation.Environment ) { this . org.springframework.data.gemfire.config.annotation.Environment = org.springframework.data.gemfire.config.annotation.Environment ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.Environment org.springframework.data.gemfire.config.annotation.Environment ( ) { Assert . state ( org.springframework.data.gemfire.config.annotation.Environment != null , STRING ) ; return this . org.springframework.data.gemfire.config.annotation.Environment ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata , BeanDefinitionRegistry org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.data.gemfire.config.annotation.AnnotationMetadata . getAnnotationAttributes ( EnableAutoRegionLookup .class . java.lang.String ( ) ) ; java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; if ( boolean ( java.lang.String ) ) { void ( org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { java.lang.String = StringUtils . trimWhitespace ( java.lang.String ) ; if ( ! java.lang.Boolean . boolean ( java.lang.String ) ) { try { return org.springframework.data.gemfire.config.annotation.ExpressionParser . parseExpression ( java.lang.String ) . getValue ( org.springframework.data.gemfire.config.annotation.StandardEvaluationContext , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; } catch ( EvaluationException org.springframework.data.gemfire.config.annotation.EvaluationException ) { return false ; } catch ( ParseException org.springframework.data.gemfire.config.annotation.ParseException ) { return org.springframework.data.gemfire.config.annotation.Environment ( ) . getProperty ( java.lang.String , java.lang.Boolean . java.lang.Class<java.lang.Boolean> , false ) ; } } return true ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry ) { if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ) { AbstractBeanDefinition org.springframework.data.gemfire.config.annotation.AbstractBeanDefinition = BeanDefinitionBuilder . rootBeanDefinition ( AutoRegionLookupBeanPostProcessor .class ) . setRole ( AbstractBeanDefinition . ROLE_INFRASTRUCTURE ) . getBeanDefinition ( ) ; BeanDefinitionReaderUtils . registerWithGeneratedName ( org.springframework.data.gemfire.config.annotation.AbstractBeanDefinition , org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry ) ; } }  <METHOD_END>
