<METHOD_START> public void ( AsyncClientHttpRequestFactory org.springframework.http.client.AsyncClientHttpRequestFactory , java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> < AsyncClientHttpRequestInterceptor > java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> ) { this . org.springframework.http.client.AsyncClientHttpRequestFactory = org.springframework.http.client.AsyncClientHttpRequestFactory ; this . java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> = ( java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> != null ? java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> : java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.AsyncClientHttpRequest org.springframework.http.client.AsyncClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) { return new InterceptingAsyncClientHttpRequest ( this . org.springframework.http.client.AsyncClientHttpRequestFactory , this . java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> , java.net.URI , org.springframework.http.client.HttpMethod ) ; }  <METHOD_END>
