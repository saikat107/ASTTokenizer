<METHOD_START> @ Autowired ( required = false ) @ ConfigurationPropertiesBinding public void void ( java.util.List<org.springframework.boot.context.properties.Converter<?,?>> < Converter < ? , ? > > java.util.List<org.springframework.boot.context.properties.Converter<?,?>> ) { this . java.util.List<org.springframework.boot.context.properties.Converter<?,?>> = java.util.List<org.springframework.boot.context.properties.Converter<?,?>> ; }  <METHOD_END>
<METHOD_START> @ Autowired ( required = false ) @ ConfigurationPropertiesBinding public void void ( java.util.List<org.springframework.boot.context.properties.GenericConverter> < GenericConverter > java.util.List<org.springframework.boot.context.properties.GenericConverter> ) { this . java.util.List<org.springframework.boot.context.properties.GenericConverter> = java.util.List<org.springframework.boot.context.properties.GenericConverter> ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( PropertySources org.springframework.boot.context.properties.PropertySources ) { this . org.springframework.boot.context.properties.PropertySources = org.springframework.boot.context.properties.PropertySources ; }  <METHOD_END>
<METHOD_START> public void void ( Validator org.springframework.boot.context.properties.Validator ) { this . org.springframework.boot.context.properties.Validator = org.springframework.boot.context.properties.Validator ; }  <METHOD_END>
<METHOD_START> public void void ( ConversionService org.springframework.boot.context.properties.ConversionService ) { this . org.springframework.boot.context.properties.ConversionService = org.springframework.boot.context.properties.ConversionService ; }  <METHOD_END>
<METHOD_START> public void void ( ConfigurationBeanFactoryMetaData org.springframework.boot.context.properties.ConfigurationBeanFactoryMetaData ) { this . org.springframework.boot.context.properties.ConfigurationBeanFactoryMetaData = org.springframework.boot.context.properties.ConfigurationBeanFactoryMetaData ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.boot.context.properties.BeanFactory ) throws org.springframework.boot.context.properties.BeansException { this . org.springframework.boot.context.properties.BeanFactory = org.springframework.boot.context.properties.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.boot.context.properties.Environment ) { this . org.springframework.boot.context.properties.Environment = org.springframework.boot.context.properties.Environment ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.boot.context.properties.ApplicationContext ) { this . org.springframework.boot.context.properties.ApplicationContext = org.springframework.boot.context.properties.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( this . org.springframework.boot.context.properties.PropertySources == null ) { this . org.springframework.boot.context.properties.PropertySources = org.springframework.boot.context.properties.PropertySources ( ) ; } if ( this . org.springframework.boot.context.properties.Validator == null ) { this . org.springframework.boot.context.properties.Validator = org.springframework.boot.context.properties.Validator ( java.lang.String , Validator .class ) ; } if ( this . org.springframework.boot.context.properties.ConversionService == null ) { this . org.springframework.boot.context.properties.ConversionService = java.lang.Object ( ConfigurableApplicationContext . CONVERSION_SERVICE_BEAN_NAME , ConversionService .class ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContextRefreshedEvent org.springframework.boot.context.properties.ContextRefreshedEvent ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { try { Validator org.springframework.boot.context.properties.Validator = this . org.springframework.boot.context.properties.Validator ; this . org.springframework.boot.context.properties.Validator = null ; if ( org.springframework.boot.context.properties.Validator != null ) { ( ( DisposableBean ) org.springframework.boot.context.properties.Validator ) . destroy ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.context.properties.PropertySources org.springframework.boot.context.properties.PropertySources ( ) { PropertySourcesPlaceholderConfigurer org.springframework.boot.context.properties.PropertySourcesPlaceholderConfigurer = org.springframework.boot.context.properties.PropertySourcesPlaceholderConfigurer ( ) ; if ( org.springframework.boot.context.properties.PropertySourcesPlaceholderConfigurer != null ) { return new org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.FlatPropertySources ( org.springframework.boot.context.properties.PropertySourcesPlaceholderConfigurer . getAppliedPropertySources ( ) ) ; } if ( this . org.springframework.boot.context.properties.Environment instanceof ConfigurableEnvironment ) { MutablePropertySources org.springframework.boot.context.properties.MutablePropertySources = ( ( ConfigurableEnvironment ) this . org.springframework.boot.context.properties.Environment ) . getPropertySources ( ) ; return new org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.FlatPropertySources ( org.springframework.boot.context.properties.MutablePropertySources ) ; } org.springframework.boot.context.properties.Log . warn ( STRING + STRING ) ; return new MutablePropertySources ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.context.properties.PropertySourcesPlaceholderConfigurer org.springframework.boot.context.properties.PropertySourcesPlaceholderConfigurer ( ) { if ( this . org.springframework.boot.context.properties.BeanFactory instanceof ListableBeanFactory ) { ListableBeanFactory org.springframework.boot.context.properties.ListableBeanFactory = ( ListableBeanFactory ) this . org.springframework.boot.context.properties.BeanFactory ; java.util.Map<java.lang.String,org.springframework.boot.context.properties.PropertySourcesPlaceholderConfigurer> < java.lang.String , PropertySourcesPlaceholderConfigurer > java.util.Map<java.lang.String,org.springframework.boot.context.properties.PropertySourcesPlaceholderConfigurer> = org.springframework.boot.context.properties.ListableBeanFactory . getBeansOfType ( PropertySourcesPlaceholderConfigurer .class , false , false ) ; if ( java.util.Map<java.lang.String,org.springframework.boot.context.properties.PropertySourcesPlaceholderConfigurer> . size ( ) == NUMBER ) { return java.util.Map<java.lang.String,org.springframework.boot.context.properties.PropertySourcesPlaceholderConfigurer> . values ( ) . iterator ( ) . next ( ) ; } if ( java.util.Map<java.lang.String,org.springframework.boot.context.properties.PropertySourcesPlaceholderConfigurer> . size ( ) > NUMBER && org.springframework.boot.context.properties.Log . isWarnEnabled ( ) ) { org.springframework.boot.context.properties.Log . warn ( STRING + STRING + java.util.Map<java.lang.String,org.springframework.boot.context.properties.PropertySourcesPlaceholderConfigurer> . keySet ( ) + STRING ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { try { return this . org.springframework.boot.context.properties.BeanFactory . getBean ( java.lang.String , java.lang.Class<T> ) ; } catch ( NoSuchBeanDefinitionException org.springframework.boot.context.properties.NoSuchBeanDefinitionException ) { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String )			throws org.springframework.boot.context.properties.BeansException { ConfigurationProperties org.springframework.boot.context.properties.ConfigurationProperties = AnnotationUtils . findAnnotation ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , ConfigurationProperties .class ) ; if ( org.springframework.boot.context.properties.ConfigurationProperties != null ) { void ( java.lang.Object , java.lang.String , org.springframework.boot.context.properties.ConfigurationProperties ) ; } org.springframework.boot.context.properties.ConfigurationProperties = this . org.springframework.boot.context.properties.ConfigurationBeanFactoryMetaData . findFactoryAnnotation ( java.lang.String , ConfigurationProperties .class ) ; if ( org.springframework.boot.context.properties.ConfigurationProperties != null ) { void ( java.lang.Object , java.lang.String , org.springframework.boot.context.properties.ConfigurationProperties ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String )			throws org.springframework.boot.context.properties.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , ConfigurationProperties org.springframework.boot.context.properties.ConfigurationProperties ) { java.lang.Object java.lang.Object = java.lang.Object ; PropertiesConfigurationFactory < java.lang.Object > org.springframework.boot.context.properties.PropertiesConfigurationFactory<java.lang.Object> = new PropertiesConfigurationFactory <> ( java.lang.Object ) ; org.springframework.boot.context.properties.PropertiesConfigurationFactory<java.lang.Object> . setPropertySources ( this . org.springframework.boot.context.properties.PropertySources ) ; org.springframework.boot.context.properties.PropertiesConfigurationFactory<java.lang.Object> . setValidator ( org.springframework.boot.context.properties.Validator ( java.lang.Object ) ) ; org.springframework.boot.context.properties.PropertiesConfigurationFactory<java.lang.Object> . setConversionService ( this . org.springframework.boot.context.properties.ConversionService == null ? org.springframework.boot.context.properties.ConversionService ( ) : this . org.springframework.boot.context.properties.ConversionService ) ; if ( org.springframework.boot.context.properties.ConfigurationProperties != null ) { org.springframework.boot.context.properties.PropertiesConfigurationFactory<java.lang.Object> . setIgnoreInvalidFields ( org.springframework.boot.context.properties.ConfigurationProperties . ignoreInvalidFields ( ) ) ; org.springframework.boot.context.properties.PropertiesConfigurationFactory<java.lang.Object> . setIgnoreUnknownFields ( org.springframework.boot.context.properties.ConfigurationProperties . ignoreUnknownFields ( ) ) ; org.springframework.boot.context.properties.PropertiesConfigurationFactory<java.lang.Object> . setIgnoreNestedProperties ( org.springframework.boot.context.properties.ConfigurationProperties . ignoreNestedProperties ( ) ) ; if ( StringUtils . hasLength ( org.springframework.boot.context.properties.ConfigurationProperties . prefix ( ) ) ) { org.springframework.boot.context.properties.PropertiesConfigurationFactory<java.lang.Object> . setTargetName ( org.springframework.boot.context.properties.ConfigurationProperties . prefix ( ) ) ; } } try { org.springframework.boot.context.properties.PropertiesConfigurationFactory<java.lang.Object> . bindPropertiesToTarget ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.String java.lang.String = ClassUtils . getShortName ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; throw new BeanCreationException ( java.lang.String , STRING + java.lang.String + STRING + java.lang.String ( org.springframework.boot.context.properties.ConfigurationProperties ) + STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ConfigurationProperties org.springframework.boot.context.properties.ConfigurationProperties ) { if ( org.springframework.boot.context.properties.ConfigurationProperties == null ) { return STRING ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( org.springframework.boot.context.properties.ConfigurationProperties . prefix ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( org.springframework.boot.context.properties.ConfigurationProperties . ignoreInvalidFields ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( org.springframework.boot.context.properties.ConfigurationProperties . ignoreUnknownFields ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( org.springframework.boot.context.properties.ConfigurationProperties . ignoreNestedProperties ( ) ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.context.properties.Validator org.springframework.boot.context.properties.Validator ( java.lang.Object java.lang.Object ) { Validator org.springframework.boot.context.properties.Validator = org.springframework.boot.context.properties.Validator ( ) ; boolean boolean = ( org.springframework.boot.context.properties.Validator != null && org.springframework.boot.context.properties.Validator . supports ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; if ( ClassUtils . isAssignable ( Validator .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { if ( boolean ) { return new org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.ChainingValidator ( org.springframework.boot.context.properties.Validator , ( Validator ) java.lang.Object ) ; } return ( Validator ) java.lang.Object ; } return ( boolean ? org.springframework.boot.context.properties.Validator : null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.context.properties.Validator org.springframework.boot.context.properties.Validator ( ) { if ( this . org.springframework.boot.context.properties.Validator != null ) { return this . org.springframework.boot.context.properties.Validator ; } if ( this . org.springframework.boot.context.properties.Validator == null && boolean ( ) ) { this . org.springframework.boot.context.properties.Validator = new org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.ValidatedLocalValidatorFactoryBean ( this . org.springframework.boot.context.properties.ApplicationContext ) ; } return this . org.springframework.boot.context.properties.Validator ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ! ClassUtils . isPresent ( java.lang.String , this . org.springframework.boot.context.properties.ApplicationContext . getClassLoader ( ) ) ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.context.properties.ConversionService org.springframework.boot.context.properties.ConversionService ( ) { if ( this . org.springframework.boot.context.properties.DefaultConversionService == null ) { DefaultConversionService org.springframework.boot.context.properties.DefaultConversionService = new DefaultConversionService ( ) ; this . org.springframework.boot.context.properties.ApplicationContext . getAutowireCapableBeanFactory ( ) . autowireBean ( this ) ; for ( Converter < ? , ? > org.springframework.boot.context.properties.Converter<?,?> : this . java.util.List<org.springframework.boot.context.properties.Converter<?,?>> ) { org.springframework.boot.context.properties.DefaultConversionService . addConverter ( org.springframework.boot.context.properties.Converter<,> ) ; } for ( GenericConverter org.springframework.boot.context.properties.GenericConverter : this . java.util.List<org.springframework.boot.context.properties.GenericConverter> ) { org.springframework.boot.context.properties.DefaultConversionService . addConverter ( org.springframework.boot.context.properties.GenericConverter ) ; } this . org.springframework.boot.context.properties.DefaultConversionService = org.springframework.boot.context.properties.DefaultConversionService ; } return this . org.springframework.boot.context.properties.DefaultConversionService ; }  <METHOD_END>
<METHOD_START> void ( ApplicationContext org.springframework.boot.context.properties.ApplicationContext ) { void ( org.springframework.boot.context.properties.ApplicationContext ) ; setMessageInterpolator ( new MessageInterpolatorFactory ( ) . getObject ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( ! super. supports ( java.lang.Class<> ) ) { return false ; } if ( AnnotatedElementUtils . hasAnnotation ( java.lang.Class<> , Validated .class ) ) { return true ; } if ( java.lang.Class<> . java.lang.Package ( ) . java.lang.String ( ) . boolean ( STRING ) ) { return false ; } if ( getConstraintsForClass ( java.lang.Class<> ) . isBeanConstrained ( ) ) { org.springframework.boot.context.properties.Log . warn ( STRING + java.lang.Class<> + STRING + STRING ) ; } return true ; }  <METHOD_END>
<METHOD_START> void ( Validator ... org.springframework.boot.context.properties.Validator[] ) { Assert . notNull ( org.springframework.boot.context.properties.Validator[] , STRING ) ; this . org.springframework.boot.context.properties.Validator[] = org.springframework.boot.context.properties.Validator[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { for ( Validator org.springframework.boot.context.properties.Validator : this . org.springframework.boot.context.properties.Validator[] ) { if ( org.springframework.boot.context.properties.Validator . supports ( java.lang.Class<> ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.boot.context.properties.Errors ) { for ( Validator org.springframework.boot.context.properties.Validator : this . org.springframework.boot.context.properties.Validator[] ) { if ( org.springframework.boot.context.properties.Validator . supports ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { org.springframework.boot.context.properties.Validator . validate ( java.lang.Object , org.springframework.boot.context.properties.Errors ) ; } } }  <METHOD_END>
<METHOD_START> void ( PropertySources org.springframework.boot.context.properties.PropertySources ) { this . org.springframework.boot.context.properties.PropertySources = org.springframework.boot.context.properties.PropertySources ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.boot.context.properties.PropertySource<?>> < PropertySource < ? > > java.util.Iterator<org.springframework.boot.context.properties.PropertySource<?>> ( ) { MutablePropertySources org.springframework.boot.context.properties.MutablePropertySources = org.springframework.boot.context.properties.MutablePropertySources ( ) ; return org.springframework.boot.context.properties.MutablePropertySources . iterator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return org.springframework.boot.context.properties.PropertySource<?> ( java.lang.String ) != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.context.properties.PropertySource<?> < ? > org.springframework.boot.context.properties.PropertySource<?> ( java.lang.String java.lang.String ) { return org.springframework.boot.context.properties.MutablePropertySources ( ) . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.context.properties.MutablePropertySources org.springframework.boot.context.properties.MutablePropertySources ( ) { MutablePropertySources org.springframework.boot.context.properties.MutablePropertySources = new MutablePropertySources ( ) ; for ( PropertySource < ? > org.springframework.boot.context.properties.PropertySource<?> : this . org.springframework.boot.context.properties.PropertySources ) { void ( org.springframework.boot.context.properties.PropertySource<> , org.springframework.boot.context.properties.MutablePropertySources ) ; } return org.springframework.boot.context.properties.MutablePropertySources ; }  <METHOD_END>
<METHOD_START> private void void ( PropertySource < ? > org.springframework.boot.context.properties.PropertySource<?> , MutablePropertySources org.springframework.boot.context.properties.MutablePropertySources ) { java.lang.Object java.lang.Object = org.springframework.boot.context.properties.PropertySource<> . getSource ( ) ; if ( java.lang.Object instanceof ConfigurableEnvironment ) { ConfigurableEnvironment org.springframework.boot.context.properties.ConfigurableEnvironment = ( ConfigurableEnvironment ) java.lang.Object ; for ( PropertySource < ? > org.springframework.boot.context.properties.PropertySource<?> : org.springframework.boot.context.properties.ConfigurableEnvironment . getPropertySources ( ) ) { void ( org.springframework.boot.context.properties.PropertySource<> , org.springframework.boot.context.properties.MutablePropertySources ) ; } } else { org.springframework.boot.context.properties.MutablePropertySources . addLast ( org.springframework.boot.context.properties.PropertySource<> ) ; } }  <METHOD_END>
