<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> = this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . getReaders ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.codec.HttpMessageReader<?>> . size ( ) ) ; assertEquals ( ByteArrayDecoder .class , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) . getClass ( ) ) ; assertEquals ( ByteBufferDecoder .class , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) . getClass ( ) ) ; assertEquals ( DataBufferDecoder .class , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) . getClass ( ) ) ; assertEquals ( ResourceDecoder .class , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) . getClass ( ) ) ; void ( org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) , true ) ; assertEquals ( Jaxb2XmlDecoder .class , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) . getClass ( ) ) ; assertEquals ( Jackson2JsonDecoder .class , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) . getClass ( ) ) ; void ( org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> = this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . getWriters ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> . size ( ) ) ; assertEquals ( ByteArrayEncoder .class , org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) . getClass ( ) ) ; assertEquals ( ByteBufferEncoder .class , org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) . getClass ( ) ) ; assertEquals ( DataBufferEncoder .class , org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) . getClass ( ) ) ; assertEquals ( ResourceHttpMessageWriter .class , java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> . get ( java.util.concurrent.atomic.AtomicInteger . int ( ) ) . getClass ( ) ) ; void ( org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) , true ) ; assertEquals ( Jaxb2XmlEncoder .class , org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) . getClass ( ) ) ; assertEquals ( Jackson2JsonEncoder .class , org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) . getClass ( ) ) ; void ( org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Decoder < ? > org.springframework.http.codec.Decoder<?> = mock ( Decoder .class ) ; Decoder < ? > org.springframework.http.codec.Decoder<?> = mock ( Decoder .class ) ; when ( org.springframework.http.codec.Decoder<> . canDecode ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) . thenReturn ( false ) ; when ( org.springframework.http.codec.Decoder<> . canDecode ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) . thenReturn ( true ) ; HttpMessageReader < ? > org.springframework.http.codec.HttpMessageReader<?> = mock ( HttpMessageReader .class ) ; HttpMessageReader < ? > org.springframework.http.codec.HttpMessageReader<?> = mock ( HttpMessageReader .class ) ; when ( org.springframework.http.codec.HttpMessageReader<> . canRead ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) . thenReturn ( false ) ; when ( org.springframework.http.codec.HttpMessageReader<> . canRead ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) . thenReturn ( true ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . customCodec ( ) . decoder ( org.springframework.http.codec.Decoder<> ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . customCodec ( ) . decoder ( org.springframework.http.codec.Decoder<> ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . customCodec ( ) . reader ( org.springframework.http.codec.HttpMessageReader<> ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . customCodec ( ) . reader ( org.springframework.http.codec.HttpMessageReader<> ) ; java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> = this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . getReaders ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.codec.HttpMessageReader<?>> . size ( ) ) ; assertEquals ( ByteArrayDecoder .class , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) . getClass ( ) ) ; assertEquals ( ByteBufferDecoder .class , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) . getClass ( ) ) ; assertEquals ( DataBufferDecoder .class , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) . getClass ( ) ) ; assertEquals ( ResourceDecoder .class , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) . getClass ( ) ) ; assertEquals ( StringDecoder .class , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) . getClass ( ) ) ; assertSame ( org.springframework.http.codec.Decoder<> , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) ) ; assertSame ( org.springframework.http.codec.HttpMessageReader<> , java.util.List<org.springframework.http.codec.HttpMessageReader<?>> . get ( this . java.util.concurrent.atomic.AtomicInteger . int ( ) ) ) ; assertEquals ( Jaxb2XmlDecoder .class , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) . getClass ( ) ) ; assertEquals ( Jackson2JsonDecoder .class , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) . getClass ( ) ) ; assertSame ( org.springframework.http.codec.Decoder<> , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) ) ; assertSame ( org.springframework.http.codec.HttpMessageReader<> , java.util.List<org.springframework.http.codec.HttpMessageReader<?>> . get ( this . java.util.concurrent.atomic.AtomicInteger . int ( ) ) ) ; assertEquals ( StringDecoder .class , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Encoder < ? > org.springframework.http.codec.Encoder<?> = mock ( Encoder .class ) ; Encoder < ? > org.springframework.http.codec.Encoder<?> = mock ( Encoder .class ) ; when ( org.springframework.http.codec.Encoder<> . canEncode ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) . thenReturn ( false ) ; when ( org.springframework.http.codec.Encoder<> . canEncode ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) . thenReturn ( true ) ; HttpMessageWriter < ? > org.springframework.http.codec.HttpMessageWriter<?> = mock ( HttpMessageWriter .class ) ; HttpMessageWriter < ? > org.springframework.http.codec.HttpMessageWriter<?> = mock ( HttpMessageWriter .class ) ; when ( org.springframework.http.codec.HttpMessageWriter<> . canWrite ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) . thenReturn ( false ) ; when ( org.springframework.http.codec.HttpMessageWriter<> . canWrite ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) . thenReturn ( true ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . customCodec ( ) . encoder ( org.springframework.http.codec.Encoder<> ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . customCodec ( ) . encoder ( org.springframework.http.codec.Encoder<> ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . customCodec ( ) . writer ( org.springframework.http.codec.HttpMessageWriter<> ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . customCodec ( ) . writer ( org.springframework.http.codec.HttpMessageWriter<> ) ; java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> = this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . getWriters ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> . size ( ) ) ; assertEquals ( ByteArrayEncoder .class , org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) . getClass ( ) ) ; assertEquals ( ByteBufferEncoder .class , org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) . getClass ( ) ) ; assertEquals ( DataBufferEncoder .class , org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) . getClass ( ) ) ; assertEquals ( ResourceHttpMessageWriter .class , java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> . get ( java.util.concurrent.atomic.AtomicInteger . int ( ) ) . getClass ( ) ) ; assertEquals ( CharSequenceEncoder .class , org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) . getClass ( ) ) ; assertSame ( org.springframework.http.codec.Encoder<> , org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) ) ; assertSame ( org.springframework.http.codec.HttpMessageWriter<> , java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> . get ( this . java.util.concurrent.atomic.AtomicInteger . int ( ) ) ) ; assertEquals ( Jaxb2XmlEncoder .class , org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) . getClass ( ) ) ; assertEquals ( Jackson2JsonEncoder .class , org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) . getClass ( ) ) ; assertSame ( org.springframework.http.codec.Encoder<> , org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) ) ; assertSame ( org.springframework.http.codec.HttpMessageWriter<> , java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> . get ( this . java.util.concurrent.atomic.AtomicInteger . int ( ) ) ) ; assertEquals ( CharSequenceEncoder .class , org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Decoder < ? > org.springframework.http.codec.Decoder<?> = mock ( Decoder .class ) ; Decoder < ? > org.springframework.http.codec.Decoder<?> = mock ( Decoder .class ) ; when ( org.springframework.http.codec.Decoder<> . canDecode ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) . thenReturn ( false ) ; when ( org.springframework.http.codec.Decoder<> . canDecode ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) . thenReturn ( true ) ; HttpMessageReader < ? > org.springframework.http.codec.HttpMessageReader<?> = mock ( HttpMessageReader .class ) ; HttpMessageReader < ? > org.springframework.http.codec.HttpMessageReader<?> = mock ( HttpMessageReader .class ) ; when ( org.springframework.http.codec.HttpMessageReader<> . canRead ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) . thenReturn ( false ) ; when ( org.springframework.http.codec.HttpMessageReader<> . canRead ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) . thenReturn ( true ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . customCodec ( ) . decoder ( org.springframework.http.codec.Decoder<> ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . customCodec ( ) . decoder ( org.springframework.http.codec.Decoder<> ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . customCodec ( ) . reader ( org.springframework.http.codec.HttpMessageReader<> ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . customCodec ( ) . reader ( org.springframework.http.codec.HttpMessageReader<> ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . registerDefaults ( false ) ; java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> = this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . getReaders ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.codec.HttpMessageReader<?>> . size ( ) ) ; assertSame ( org.springframework.http.codec.Decoder<> , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) ) ; assertSame ( org.springframework.http.codec.HttpMessageReader<> , java.util.List<org.springframework.http.codec.HttpMessageReader<?>> . get ( this . java.util.concurrent.atomic.AtomicInteger . int ( ) ) ) ; assertSame ( org.springframework.http.codec.Decoder<> , org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) ) ; assertSame ( org.springframework.http.codec.HttpMessageReader<> , java.util.List<org.springframework.http.codec.HttpMessageReader<?>> . get ( this . java.util.concurrent.atomic.AtomicInteger . int ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Encoder < ? > org.springframework.http.codec.Encoder<?> = mock ( Encoder .class ) ; Encoder < ? > org.springframework.http.codec.Encoder<?> = mock ( Encoder .class ) ; when ( org.springframework.http.codec.Encoder<> . canEncode ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) . thenReturn ( false ) ; when ( org.springframework.http.codec.Encoder<> . canEncode ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) . thenReturn ( true ) ; HttpMessageWriter < ? > org.springframework.http.codec.HttpMessageWriter<?> = mock ( HttpMessageWriter .class ) ; HttpMessageWriter < ? > org.springframework.http.codec.HttpMessageWriter<?> = mock ( HttpMessageWriter .class ) ; when ( org.springframework.http.codec.HttpMessageWriter<> . canWrite ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) . thenReturn ( false ) ; when ( org.springframework.http.codec.HttpMessageWriter<> . canWrite ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) . thenReturn ( true ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . customCodec ( ) . encoder ( org.springframework.http.codec.Encoder<> ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . customCodec ( ) . encoder ( org.springframework.http.codec.Encoder<> ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . customCodec ( ) . writer ( org.springframework.http.codec.HttpMessageWriter<> ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . customCodec ( ) . writer ( org.springframework.http.codec.HttpMessageWriter<> ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . registerDefaults ( false ) ; java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> = this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . getWriters ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> . size ( ) ) ; assertSame ( org.springframework.http.codec.Encoder<> , org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) ) ; assertSame ( org.springframework.http.codec.HttpMessageWriter<> , java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> . get ( this . java.util.concurrent.atomic.AtomicInteger . int ( ) ) ) ; assertSame ( org.springframework.http.codec.Encoder<> , org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) ) ; assertSame ( org.springframework.http.codec.HttpMessageWriter<> , java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> . get ( this . java.util.concurrent.atomic.AtomicInteger . int ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Jackson2JsonDecoder org.springframework.http.codec.Jackson2JsonDecoder = new Jackson2JsonDecoder ( ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . defaultCodec ( ) . jackson2Decoder ( org.springframework.http.codec.Jackson2JsonDecoder ) ; assertSame ( org.springframework.http.codec.Jackson2JsonDecoder , this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . getReaders ( ) . stream ( ) . filter ( writer -> writer instanceof DecoderHttpMessageReader ) . map ( writer -> ( ( DecoderHttpMessageReader < ? > ) writer ) . getDecoder ( ) ) . filter ( e -> Jackson2JsonDecoder .class . equals ( e . getClass ( ) ) ) . findFirst ( ) . filter ( e -> e == decoder ) . orElse ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Jackson2JsonEncoder org.springframework.http.codec.Jackson2JsonEncoder = new Jackson2JsonEncoder ( ) ; this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . defaultCodec ( ) . jackson2Encoder ( org.springframework.http.codec.Jackson2JsonEncoder ) ; assertSame ( org.springframework.http.codec.Jackson2JsonEncoder , this . org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer . getWriters ( ) . stream ( ) . filter ( writer -> writer instanceof EncoderHttpMessageWriter ) . map ( writer -> ( ( EncoderHttpMessageWriter < ? > ) writer ) . getEncoder ( ) ) . filter ( e -> Jackson2JsonEncoder .class . equals ( e . getClass ( ) ) ) . findFirst ( ) . filter ( e -> e == encoder ) . orElse ( null ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.http.codec.Decoder<?> < ? > org.springframework.http.codec.Decoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) { HttpMessageReader < ? > org.springframework.http.codec.HttpMessageReader<?> = java.util.List<org.springframework.http.codec.HttpMessageReader<?>> . get ( this . java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( DecoderHttpMessageReader .class , org.springframework.http.codec.HttpMessageReader<> . getClass ( ) ) ; return ( ( DecoderHttpMessageReader ) org.springframework.http.codec.HttpMessageReader<> ) . getDecoder ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.http.codec.Encoder<?> < ? > org.springframework.http.codec.Encoder<?> ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) { HttpMessageWriter < ? > org.springframework.http.codec.HttpMessageWriter<?> = java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> . get ( this . java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( EncoderHttpMessageWriter .class , org.springframework.http.codec.HttpMessageWriter<> . getClass ( ) ) ; return ( ( EncoderHttpMessageWriter ) org.springframework.http.codec.HttpMessageWriter<> ) . getEncoder ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( Decoder < ? > org.springframework.http.codec.Decoder<?> , boolean boolean ) { assertEquals ( StringDecoder .class , org.springframework.http.codec.Decoder<> . getClass ( ) ) ; assertTrue ( org.springframework.http.codec.Decoder<> . canDecode ( forClass ( java.lang.String .class ) , MimeTypeUtils . TEXT_PLAIN ) ) ; assertEquals ( ! boolean , org.springframework.http.codec.Decoder<> . canDecode ( forClass ( java.lang.String .class ) , MediaType . TEXT_EVENT_STREAM ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( Encoder < ? > org.springframework.http.codec.Encoder<?> , boolean boolean ) { assertEquals ( CharSequenceEncoder .class , org.springframework.http.codec.Encoder<> . getClass ( ) ) ; assertTrue ( org.springframework.http.codec.Encoder<> . canEncode ( forClass ( java.lang.String .class ) , MimeTypeUtils . TEXT_PLAIN ) ) ; assertEquals ( ! boolean , org.springframework.http.codec.Encoder<> . canEncode ( forClass ( java.lang.String .class ) , MediaType . TEXT_EVENT_STREAM ) ) ; }  <METHOD_END>
<METHOD_START> private void ( ) { super( new org.springframework.http.codec.CodecConfigurerTests.TestCodecConfigurer.TestDefaultCodecConfigurer ( ) ); }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) { addReaderTo ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> , ( ) new DecoderHttpMessageReader <> ( StringDecoder . textPlainOnly ( true ) ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) { addReaderTo ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> , ( ) new DecoderHttpMessageReader <> ( StringDecoder . allMimeTypes ( true ) ) ) ; }  <METHOD_END>
