<METHOD_START> @ Before public void void ( ) java.io.IOException { this . org.springframework.context.index.TestCompiler = new TestCompiler ( this . org.springframework.context.index.TemporaryFolder ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { CandidateComponentsMetadata org.springframework.context.index.CandidateComponentsMetadata = org.springframework.context.index.CandidateComponentsMetadata ( SampleNone .class ) ; assertThat ( org.springframework.context.index.CandidateComponentsMetadata . getItems ( ) , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { CandidateComponentsMetadata org.springframework.context.index.CandidateComponentsMetadata = org.springframework.context.index.CandidateComponentsMetadata ( org.springframework.context.index.CandidateComponentsIndexerTests .class ) ; assertThat ( org.springframework.context.index.CandidateComponentsMetadata . getItems ( ) , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SampleComponent .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SampleService .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SampleController .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SampleMetaController .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SampleRepository .class , Component .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SampleMetaIndexedController .class , Component .class , MetaControllerIndexed .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( AbstractController .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SampleManagedBean .class , ManagedBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SampleNamed .class , Named .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SampleEntity .class , Entity .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SampleMappedSuperClass .class , MappedSuperclass .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SampleEmbeddable .class , Embeddable .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SampleConverter .class , Converter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { CandidateComponentsMetadata org.springframework.context.index.CandidateComponentsMetadata = org.springframework.context.index.CandidateComponentsMetadata ( STRING ) ; assertThat ( org.springframework.context.index.CandidateComponentsMetadata , hasComponent ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SampleSpecializedRepo .class , Repo .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SampleRepo .class , Repo .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SampleSmartRepo .class , Repo .class , SmartRepo .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SpecializedRepo .class , Repo .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( SmartRepo .class , Repo .class , SmartRepo .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( Repo .class , Repo .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.io.IOException { CandidateComponentsMetadata org.springframework.context.index.CandidateComponentsMetadata = org.springframework.context.index.CandidateComponentsMetadata ( java.lang.Class<?>[] ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { assertThat ( org.springframework.context.index.CandidateComponentsMetadata , hasComponent ( java.lang.Class<> , Component .class ) ) ; } assertThat ( org.springframework.context.index.CandidateComponentsMetadata . getItems ( ) , hasSize ( java.lang.Class<?>[] . int ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.io.IOException { CandidateComponentsMetadata org.springframework.context.index.CandidateComponentsMetadata = org.springframework.context.index.CandidateComponentsMetadata ( java.lang.Class<> ) ; assertThat ( org.springframework.context.index.CandidateComponentsMetadata , hasComponent ( java.lang.Class<> , java.lang.Class<?>[] ) ) ; assertThat ( org.springframework.context.index.CandidateComponentsMetadata . getItems ( ) , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.index.CandidateComponentsMetadata org.springframework.context.index.CandidateComponentsMetadata ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.io.IOException { CandidateComponentsIndexer org.springframework.context.index.CandidateComponentsIndexer = new CandidateComponentsIndexer ( ) ; this . org.springframework.context.index.TestCompiler . getTask ( java.lang.Class<?>[] ) . call ( org.springframework.context.index.CandidateComponentsIndexer ) ; return org.springframework.context.index.CandidateComponentsMetadata ( this . org.springframework.context.index.TestCompiler . getOutputLocation ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.index.CandidateComponentsMetadata org.springframework.context.index.CandidateComponentsMetadata ( java.lang.String ... java.lang.String[] ) throws java.io.IOException { CandidateComponentsIndexer org.springframework.context.index.CandidateComponentsIndexer = new CandidateComponentsIndexer ( ) ; this . org.springframework.context.index.TestCompiler . getTask ( java.lang.String[] ) . call ( org.springframework.context.index.CandidateComponentsIndexer ) ; return org.springframework.context.index.CandidateComponentsMetadata ( this . org.springframework.context.index.TestCompiler . getOutputLocation ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.index.CandidateComponentsMetadata org.springframework.context.index.CandidateComponentsMetadata ( java.io.File java.io.File ) { try { java.io.File java.io.File = new java.io.File ( java.io.File , MetadataStore . METADATA_PATH ) ; if ( java.io.File . boolean ( ) ) { return PropertiesMarshaller . read ( new java.io.FileInputStream ( java.io.File ) ) ; } else { return new CandidateComponentsMetadata ( ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
