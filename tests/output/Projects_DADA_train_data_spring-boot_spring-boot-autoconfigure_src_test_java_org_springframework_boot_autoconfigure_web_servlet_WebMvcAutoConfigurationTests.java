<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext != null ) { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeanNamesForType ( HandlerAdapter .class ) . length ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) . getMessageConverters ( ) ) . isNotEmpty ( ) . isEqualTo ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( HttpMessageConverters .class ) . getConverters ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeanNamesForType ( HandlerMapping .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> < java.lang.String , java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource> < Resource > > java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> = java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> ( ) ; assertThat ( java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> . get ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> . get ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> . get ( STRING ) . get ( NUMBER ) ) . isEqualTo ( new ClassPathResource ( STRING ) ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceResolver> ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceTransformer> ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceResolver> ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceTransformer> ( STRING ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> < java.lang.String , java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource> < Resource > > java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> = java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> ( ) ; assertThat ( java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> . get ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceResolver> ( STRING ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.WebJars .class ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> < java.lang.String , java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource> < Resource > > java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> = java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> ( ) ; assertThat ( java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> . get ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> . get ( STRING ) . get ( NUMBER ) ) . isEqualTo ( new ClassPathResource ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.AllResources .class ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> < java.lang.String , java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource> < Resource > > java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> = java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> ( ) ; assertThat ( java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> . get ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> . get ( STRING ) . get ( NUMBER ) ) . isEqualTo ( new ClassPathResource ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> < java.lang.String , java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource> < Resource > > java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> = java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> ( ) ; assertThat ( java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceResolver> ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceTransformer> ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceResolver> ( STRING ) ) . extractingResultOf ( STRING ) . containsOnly ( CachingResourceResolver .class , PathResourceResolver .class ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceTransformer> ( STRING ) ) . extractingResultOf ( STRING ) . containsOnly ( CachingResourceTransformer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING , STRING STRING ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceResolver> ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceTransformer> ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceResolver> ( STRING ) ) . extractingResultOf ( STRING ) . containsOnly ( CachingResourceResolver .class , VersionResourceResolver .class , PathResourceResolver .class ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceTransformer> ( STRING ) ) . extractingResultOf ( STRING ) . containsOnly ( CachingResourceTransformer .class , CssLinkResourceTransformer .class ) ; VersionResourceResolver org.springframework.boot.autoconfigure.web.servlet.VersionResourceResolver = ( VersionResourceResolver ) java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceResolver> ( STRING ) . get ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.VersionResourceResolver . getStrategyMap ( ) . get ( STRING STRING ) ) . isInstanceOf ( FixedVersionStrategy .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceResolver> ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceTransformer> ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceResolver> ( STRING ) ) . extractingResultOf ( STRING ) . containsOnly ( CachingResourceResolver .class , VersionResourceResolver .class , PathResourceResolver .class ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceTransformer> ( STRING ) ) . extractingResultOf ( STRING ) . containsOnly ( CachingResourceTransformer .class , CssLinkResourceTransformer .class ) ; VersionResourceResolver org.springframework.boot.autoconfigure.web.servlet.VersionResourceResolver = ( VersionResourceResolver ) java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceResolver> ( STRING ) . get ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.VersionResourceResolver . getStrategyMap ( ) . get ( STRING ) ) . isInstanceOf ( ContentVersionStrategy .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING , STRING , STRING , STRING , STRING , STRING STRING , STRING , STRING ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceResolver> ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceTransformer> ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceResolver> ( STRING ) ) . extractingResultOf ( STRING ) . containsOnly ( VersionResourceResolver .class , GzipResourceResolver .class , PathResourceResolver .class ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceTransformer> ( STRING ) ) . extractingResultOf ( STRING ) . containsOnly ( CssLinkResourceTransformer .class , AppCacheManifestTransformer .class ) ; VersionResourceResolver org.springframework.boot.autoconfigure.web.servlet.VersionResourceResolver = ( VersionResourceResolver ) java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceResolver> ( STRING ) . get ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.VersionResourceResolver . getStrategyMap ( ) . get ( STRING ) ) . isInstanceOf ( ContentVersionStrategy .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.VersionResourceResolver . getStrategyMap ( ) . get ( STRING STRING ) ) . isInstanceOf ( FixedVersionStrategy .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.AllResources .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( LocaleResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.AllResources .class , STRING , STRING ) ; MockHttpServletRequest org.springframework.boot.autoconfigure.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.boot.autoconfigure.web.servlet.MockHttpServletRequest . addPreferredLocale ( StringUtils . parseLocaleString ( STRING ) ) ; org.springframework.boot.autoconfigure.web.servlet.MockHttpServletRequest . addHeader ( HttpHeaders . ACCEPT_LANGUAGE , STRING ) ; LocaleResolver org.springframework.boot.autoconfigure.web.servlet.LocaleResolver = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( LocaleResolver .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.LocaleResolver ) . isInstanceOf ( FixedLocaleResolver .class ) ; java.util.Locale java.util.Locale = org.springframework.boot.autoconfigure.web.servlet.LocaleResolver . resolveLocale ( org.springframework.boot.autoconfigure.web.servlet.MockHttpServletRequest ) ; assertThat ( java.util.Locale . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.AllResources .class , STRING ) ; MockHttpServletRequest org.springframework.boot.autoconfigure.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.boot.autoconfigure.web.servlet.MockHttpServletRequest . addPreferredLocale ( StringUtils . parseLocaleString ( STRING ) ) ; org.springframework.boot.autoconfigure.web.servlet.MockHttpServletRequest . addHeader ( HttpHeaders . ACCEPT_LANGUAGE , STRING ) ; LocaleResolver org.springframework.boot.autoconfigure.web.servlet.LocaleResolver = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( LocaleResolver .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.LocaleResolver ) . isInstanceOf ( AcceptHeaderLocaleResolver .class ) ; java.util.Locale java.util.Locale = org.springframework.boot.autoconfigure.web.servlet.LocaleResolver . resolveLocale ( org.springframework.boot.autoconfigure.web.servlet.MockHttpServletRequest ) ; assertThat ( java.util.Locale . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.AllResources .class , STRING ) ; MockHttpServletRequest org.springframework.boot.autoconfigure.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( ) ; LocaleResolver org.springframework.boot.autoconfigure.web.servlet.LocaleResolver = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( LocaleResolver .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.LocaleResolver ) . isInstanceOf ( AcceptHeaderLocaleResolver .class ) ; java.util.Locale java.util.Locale = org.springframework.boot.autoconfigure.web.servlet.LocaleResolver . resolveLocale ( org.springframework.boot.autoconfigure.web.servlet.MockHttpServletRequest ) ; assertThat ( java.util.Locale . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.AllResources .class ) ; FormattingConversionService org.springframework.boot.autoconfigure.web.servlet.FormattingConversionService = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( FormattingConversionService .class ) ; java.util.Date java.util.Date = new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) . toDate ( ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.FormattingConversionService . convert ( java.util.Date , java.lang.String .class ) ) . isEqualTo ( java.util.Date . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.AllResources .class , STRING ) ; FormattingConversionService org.springframework.boot.autoconfigure.web.servlet.FormattingConversionService = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( FormattingConversionService .class ) ; java.util.Date java.util.Date = new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) . toDate ( ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.FormattingConversionService . convert ( java.util.Date , java.lang.String .class ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.AllResources .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( WebMvcAutoConfigurationAdapter .class ) . getMessageCodesResolver ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.AllResources .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( WebMvcAutoConfigurationAdapter .class ) . getMessageCodesResolver ( ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> < java.lang.String , java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource> < Resource > > java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> ( ) java.lang.IllegalAccessException { HandlerMapping org.springframework.boot.autoconfigure.web.servlet.HandlerMapping = ( HandlerMapping ) this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( STRING ) ; return java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> ( org.springframework.boot.autoconfigure.web.servlet.HandlerMapping ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> < java.lang.String , java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource> < Resource > > java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> ( ) java.lang.IllegalAccessException { HandlerMapping org.springframework.boot.autoconfigure.web.servlet.HandlerMapping = ( HandlerMapping ) this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( STRING ) ; return java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> ( org.springframework.boot.autoconfigure.web.servlet.HandlerMapping ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceResolver> ( java.lang.String java.lang.String ) { SimpleUrlHandlerMapping org.springframework.boot.autoconfigure.web.servlet.SimpleUrlHandlerMapping = ( SimpleUrlHandlerMapping ) this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( STRING ) ; ResourceHttpRequestHandler org.springframework.boot.autoconfigure.web.servlet.ResourceHttpRequestHandler = ( ResourceHttpRequestHandler ) org.springframework.boot.autoconfigure.web.servlet.SimpleUrlHandlerMapping . getHandlerMap ( ) . get ( java.lang.String ) ; return org.springframework.boot.autoconfigure.web.servlet.ResourceHttpRequestHandler . getResourceResolvers ( ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.boot.autoconfigure.web.servlet.ResourceTransformer> ( java.lang.String java.lang.String ) { SimpleUrlHandlerMapping org.springframework.boot.autoconfigure.web.servlet.SimpleUrlHandlerMapping = ( SimpleUrlHandlerMapping ) this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( STRING ) ; ResourceHttpRequestHandler org.springframework.boot.autoconfigure.web.servlet.ResourceHttpRequestHandler = ( ResourceHttpRequestHandler ) org.springframework.boot.autoconfigure.web.servlet.SimpleUrlHandlerMapping . getHandlerMap ( ) . get ( java.lang.String ) ; return org.springframework.boot.autoconfigure.web.servlet.ResourceHttpRequestHandler . getResourceTransformers ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> < java.lang.String , java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource> < Resource > > java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> ( HandlerMapping org.springframework.boot.autoconfigure.web.servlet.HandlerMapping )			throws java.lang.IllegalAccessException { java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> < java.lang.String , java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource> < Resource > > java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> = new java.util.LinkedHashMap<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> <> ( ) ; if ( org.springframework.boot.autoconfigure.web.servlet.HandlerMapping instanceof SimpleUrlHandlerMapping ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( ResourceHttpRequestHandler .class , STRING ) ; java.lang.reflect.Field . void ( true ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : ( ( SimpleUrlHandlerMapping ) org.springframework.boot.autoconfigure.web.servlet.HandlerMapping ) . getHandlerMap ( ) . entrySet ( ) ) { ResourceHttpRequestHandler org.springframework.boot.autoconfigure.web.servlet.ResourceHttpRequestHandler = ( ResourceHttpRequestHandler ) java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> . put ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource> < Resource > ) java.lang.reflect.Field . java.lang.Object ( org.springframework.boot.autoconfigure.web.servlet.ResourceHttpRequestHandler ) ) ; } } return java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; RequestMappingHandlerAdapter org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter ) . extracting ( STRING ) . containsExactly ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.Config .class , WebMvcAutoConfiguration .class , HttpMessageConvertersAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; RequestMappingHandlerAdapter org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter ) . extracting ( STRING ) . containsExactly ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.CustomViewResolver .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( STRING ) ) . isInstanceOf ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.MyViewResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.CustomContentNegotiatingViewResolver .class ) ; java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.ContentNegotiatingViewResolver> < java.lang.String , ContentNegotiatingViewResolver > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.ContentNegotiatingViewResolver> = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( ContentNegotiatingViewResolver .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.ContentNegotiatingViewResolver> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.ContentNegotiatingViewResolver> . keySet ( ) . iterator ( ) . next ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.IllegalAccessException { void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( ResourceHttpRequestHandler .class ) . get ( STRING ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( SimpleUrlHandlerMapping .class ) . get ( STRING ) ) . isNotNull ( ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> < java.lang.String , java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource> < Resource > > java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> = java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> ( ) ; assertThat ( java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> . get ( STRING STRING ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.IllegalAccessException { void ( STRING ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> < java.lang.String , java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource> < Resource > > java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> = java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> ( ) ; assertThat ( java.util.Map<java.lang.String,java.util.List<org.springframework.boot.autoconfigure.web.servlet.Resource>> . get ( STRING STRING ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.IllegalAccessException { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( ResourceHttpRequestHandler .class ) . get ( STRING ) ) . isNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( SimpleUrlHandlerMapping .class ) . get ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; RequestMappingHandlerAdapter org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter , STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; RequestMappingHandlerAdapter org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter , STRING ) ; assertThat ( java.lang.Object ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; RequestMappingHandlerAdapter org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; ContentNegotiationManager org.springframework.boot.autoconfigure.web.servlet.ContentNegotiationManager = ( ContentNegotiationManager ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.ContentNegotiationManager . getAllFileExtensions ( ) . contains ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( OrderedHttpPutFormContentFilter .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.CustomHttpPutFormContentFilter .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( OrderedHttpPutFormContentFilter .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( HttpPutFormContentFilter .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ( java.lang.Class<?> < ? > ) null , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( HttpPutFormContentFilter .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.CustomConfigurableWebBindingInitializer .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) . getWebBindingInitializer ( ) ) . isInstanceOf ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.CustomWebBindingInitializer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.CustomRequestMappingHandlerMapping .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ) . isInstanceOf ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.MyRequestMappingHandlerMapping .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.CustomRequestMappingHandlerAdapter .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ) . isInstanceOf ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.MyRequestMappingHandlerAdapter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.MultipleWebMvcRegistrations .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ) . isNotInstanceOf ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.MyRequestMappingHandlerMapping .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ) . isNotInstanceOf ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.MyRequestMappingHandlerAdapter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( WelcomePageHandlerMapping .class ) ) . hasSize ( NUMBER ) ; MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext ) . build ( ) . perform ( get ( STRING ) . accept ( MediaType . TEXT_HTML ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; WelcomePageHandlerMapping org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( WelcomePageHandlerMapping .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping . getRootHandler ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( WelcomePageHandlerMapping .class ) ) . hasSize ( NUMBER ) ; MockMvc org.springframework.boot.autoconfigure.web.servlet.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext ) . build ( ) ; org.springframework.boot.autoconfigure.web.servlet.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_HTML ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( forwardedUrl ( STRING ) ) ; org.springframework.boot.autoconfigure.web.servlet.MockMvc . perform ( get ( STRING ) . accept ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( forwardedUrl ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( WelcomePageHandlerMapping .class ) ) . hasSize ( NUMBER ) ; MockMvc org.springframework.boot.autoconfigure.web.servlet.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext ) . build ( ) ; org.springframework.boot.autoconfigure.web.servlet.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( WelcomePageHandlerMapping .class ) ) . hasSize ( NUMBER ) ; MockMvc org.springframework.boot.autoconfigure.web.servlet.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext ) . build ( ) ; org.springframework.boot.autoconfigure.web.servlet.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( forwardedUrl ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( WelcomePageHandlerMapping .class ) ) . hasSize ( NUMBER ) ; MockMvc org.springframework.boot.autoconfigure.web.servlet.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext ) . build ( ) ; org.springframework.boot.autoconfigure.web.servlet.MockMvc . perform ( get ( STRING ) . header ( HttpHeaders . ACCEPT , STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( forwardedUrl ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( WelcomePageHandlerMapping .class ) ) . hasSize ( NUMBER ) ; MockMvc org.springframework.boot.autoconfigure.web.servlet.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext ) . build ( ) ; org.springframework.boot.autoconfigure.web.servlet.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_HTML ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( forwardedUrl ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( final boolean boolean ) { HandlerExceptionResolver org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( HandlerExceptionResolver .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver ) . isInstanceOf ( HandlerExceptionResolverComposite .class ) ; java.util.List<org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver> = ( ( HandlerExceptionResolverComposite ) org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver ) . getExceptionResolvers ( ) ; for ( HandlerExceptionResolver org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver : java.util.List<org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver> ) { if ( org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver instanceof AbstractHandlerMethodAdapter ) { assertThat ( new DirectFieldAccessor ( org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver ) . getPropertyValue ( STRING ) ) . is ( new Condition < java.lang.Object > ( ) { @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( boolean ? java.lang.Object != null : java.lang.Object == null ) ; } } ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( boolean ? java.lang.Object != null : java.lang.Object == null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( ValidatorFactory .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( javax . javax.validation . javax.validation .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( Validator .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.MvcValidator .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( ValidatorFactory .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( javax . javax.validation . javax.validation .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( Validator .class ) ) . hasSize ( NUMBER ) ; Validator org.springframework.boot.autoconfigure.web.servlet.Validator = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( Validator .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.Validator ) . isSameAs ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.MvcValidator .class ) . validator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.MvcJsr303Validator .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( ValidatorFactory .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( javax . javax.validation . javax.validation .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( Validator .class ) ) . hasSize ( NUMBER ) ; Validator org.springframework.boot.autoconfigure.web.servlet.Validator = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( Validator .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.Validator ) . isInstanceOf ( SpringValidator .class ) ; assertThat ( ( ( SpringValidator ) org.springframework.boot.autoconfigure.web.servlet.Validator ) . getTarget ( ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.MvcJsr303Validator .class ) . validator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.CustomValidator .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( ValidatorFactory .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( javax . javax.validation . javax.validation .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( Validator .class ) ) . hasSize ( NUMBER ) ; Validator org.springframework.boot.autoconfigure.web.servlet.Validator = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( STRING , Validator .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.Validator ) . isInstanceOf ( SpringValidator .class ) ; assertThat ( ( ( SpringValidator ) org.springframework.boot.autoconfigure.web.servlet.Validator ) . getTarget ( ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( javax . javax.validation . javax.validation .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.Jsr303Validator .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( ValidatorFactory .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( javax . javax.validation . javax.validation .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( Validator .class ) ) . hasSize ( NUMBER ) ; Validator org.springframework.boot.autoconfigure.web.servlet.Validator = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( Validator .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.Validator ) . isInstanceOf ( SpringValidator .class ) ; SpringValidatorAdapter org.springframework.boot.autoconfigure.web.servlet.SpringValidatorAdapter = ( ( SpringValidator ) org.springframework.boot.autoconfigure.web.servlet.Validator ) . getTarget ( ) ; assertThat ( new DirectFieldAccessor ( org.springframework.boot.autoconfigure.web.servlet.SpringValidatorAdapter ) . getPropertyValue ( STRING ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( javax . javax.validation . javax.validation .class ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext , java.lang.String[] ) ; java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( ) ; if ( java.lang.Class<> != null ) { java.util.List<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ; } java.util.List<java.lang.Class<?>> . boolean ( java.util.Arrays . java.util.List<java.lang.Class<? extends java.lang.Object>> ( org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.Config .class , WebMvcAutoConfiguration .class , HttpMessageConvertersAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . register ( java.util.List<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.List<java.lang.Class<?>> . int ( ) ] ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { void ( null , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.View org.springframework.boot.autoconfigure.web.servlet.View ( ) { return new AbstractView ( ) { @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.boot.autoconfigure.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.boot.autoconfigure.web.servlet.HttpServletResponse )								throws java.lang.Exception { org.springframework.boot.autoconfigure.web.servlet.HttpServletResponse . getOutputStream ( ) . write ( STRING . byte[] ( ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.boot.autoconfigure.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.boot.autoconfigure.web.servlet.HttpServletResponse )								throws java.lang.Exception { org.springframework.boot.autoconfigure.web.servlet.HttpServletResponse . getOutputStream ( ) . write ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceHandlerRegistry org.springframework.boot.autoconfigure.web.servlet.ResourceHandlerRegistry ) { org.springframework.boot.autoconfigure.web.servlet.ResourceHandlerRegistry . addResourceHandler ( STRING ) . addResourceLocations ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceHandlerRegistry org.springframework.boot.autoconfigure.web.servlet.ResourceHandlerRegistry ) { org.springframework.boot.autoconfigure.web.servlet.ResourceHandlerRegistry . addResourceHandler ( STRING ) . addResourceLocations ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactory ( ) { return org.springframework.boot.autoconfigure.web.servlet.MockServletWebServerFactory ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.WebServerFactoryCustomizerBeanPostProcessor org.springframework.boot.autoconfigure.web.servlet.WebServerFactoryCustomizerBeanPostProcessor ( ) { return new WebServerFactoryCustomizerBeanPostProcessor ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.ViewResolver org.springframework.boot.autoconfigure.web.servlet.ViewResolver ( ) { return new org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.MyViewResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.ContentNegotiatingViewResolver org.springframework.boot.autoconfigure.web.servlet.ContentNegotiatingViewResolver ( ) { return new ContentNegotiatingViewResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.View org.springframework.boot.autoconfigure.web.servlet.View ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.lang.Exception { return null ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.ConfigurableWebBindingInitializer org.springframework.boot.autoconfigure.web.servlet.ConfigurableWebBindingInitializer ( ) { return new org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.CustomWebBindingInitializer ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.HttpPutFormContentFilter org.springframework.boot.autoconfigure.web.servlet.HttpPutFormContentFilter ( ) { return new HttpPutFormContentFilter ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrationsAdapter org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrationsAdapter ( ) { return new WebMvcRegistrationsAdapter ( ) { @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerMapping org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerMapping ( ) { return new org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.MyRequestMappingHandlerMapping ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerMapping org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerMapping ( ) { return new org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.MyRequestMappingHandlerMapping ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrationsAdapter org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrationsAdapter ( ) { return new WebMvcRegistrationsAdapter ( ) { @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter ( ) { return new org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.MyRequestMappingHandlerAdapter ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter ( ) { return new org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfigurationTests.MyRequestMappingHandlerAdapter ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.Validator org.springframework.boot.autoconfigure.web.servlet.Validator ( ) { return this . org.springframework.boot.autoconfigure.web.servlet.Validator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.Validator org.springframework.boot.autoconfigure.web.servlet.Validator ( ) { return this . org.springframework.boot.autoconfigure.web.servlet.LocalValidatorFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public javax . javax.validation . javax.validation.Validator javax.validation.Validator ( ) { return mock ( javax . javax.validation . javax.validation .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.Validator org.springframework.boot.autoconfigure.web.servlet.Validator ( ) { return new LocalValidatorFactoryBean ( ) ; }  <METHOD_END>
