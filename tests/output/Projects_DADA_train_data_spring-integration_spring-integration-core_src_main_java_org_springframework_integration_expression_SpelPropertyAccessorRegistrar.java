<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( PropertyAccessor ... org.springframework.integration.expression.PropertyAccessor[] ) { Assert . notEmpty ( org.springframework.integration.expression.PropertyAccessor[] , STRING ) ; for ( PropertyAccessor org.springframework.integration.expression.PropertyAccessor : org.springframework.integration.expression.PropertyAccessor[] ) { this . java.util.Map<java.lang.String,org.springframework.integration.expression.PropertyAccessor> . put ( org.springframework.integration.expression.PropertyAccessor[] . getClass ( ) . getSimpleName ( ) , org.springframework.integration.expression.PropertyAccessor ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,org.springframework.integration.expression.PropertyAccessor> < java.lang.String , PropertyAccessor > java.util.Map<java.lang.String,org.springframework.integration.expression.PropertyAccessor> ) { Assert . notEmpty ( java.util.Map<java.lang.String,org.springframework.integration.expression.PropertyAccessor> , STRING ) ; this . java.util.Map<java.lang.String,org.springframework.integration.expression.PropertyAccessor> . putAll ( java.util.Map<java.lang.String,org.springframework.integration.expression.PropertyAccessor> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.integration.expression.PropertyAccessor> < java.lang.String , PropertyAccessor > java.util.Map<java.lang.String,org.springframework.integration.expression.PropertyAccessor> ( ) { return this . java.util.Map<java.lang.String,org.springframework.integration.expression.PropertyAccessor> ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.expression.SpelPropertyAccessorRegistrar org.springframework.integration.expression.SpelPropertyAccessorRegistrar ( java.lang.String java.lang.String , PropertyAccessor org.springframework.integration.expression.PropertyAccessor ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.integration.expression.PropertyAccessor , STRING ) ; this . java.util.Map<java.lang.String,org.springframework.integration.expression.PropertyAccessor> . put ( java.lang.String , org.springframework.integration.expression.PropertyAccessor ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.expression.SpelPropertyAccessorRegistrar org.springframework.integration.expression.SpelPropertyAccessorRegistrar ( PropertyAccessor ... org.springframework.integration.expression.PropertyAccessor[] ) { Assert . notEmpty ( org.springframework.integration.expression.PropertyAccessor[] , STRING ) ; for ( PropertyAccessor org.springframework.integration.expression.PropertyAccessor : org.springframework.integration.expression.PropertyAccessor[] ) { this . java.util.Map<java.lang.String,org.springframework.integration.expression.PropertyAccessor> . put ( org.springframework.integration.expression.PropertyAccessor[] . getClass ( ) . getSimpleName ( ) , org.springframework.integration.expression.PropertyAccessor ) ; } return this ; }  <METHOD_END>
