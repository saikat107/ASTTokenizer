<METHOD_START> protected void void ( CacheListener [] org.springframework.data.gemfire.CacheListener[] , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { if ( ! java.util.Collection<java.lang.String> . boolean ( ) ) { assertNotNull ( STRING , org.springframework.data.gemfire.CacheListener[] ) ; assertEquals ( java.util.Collection<java.lang.String> . int ( ) , cacheListeners . length ) ; assertTrue ( java.util.Collection<java.lang.String> ( org.springframework.data.gemfire.CacheListener[] ) . containsAll ( java.util.Collection<java.lang.String> ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( EvictionAttributes org.springframework.data.gemfire.EvictionAttributes , EvictionAction org.springframework.data.gemfire.EvictionAction , EvictionAlgorithm org.springframework.data.gemfire.EvictionAlgorithm , int int ) { assertNotNull ( STRING , org.springframework.data.gemfire.EvictionAttributes ) ; assertEquals ( org.springframework.data.gemfire.EvictionAction , org.springframework.data.gemfire.EvictionAttributes . getAction ( ) ) ; assertEquals ( org.springframework.data.gemfire.EvictionAlgorithm , org.springframework.data.gemfire.EvictionAttributes . getAlgorithm ( ) ) ; assertEquals ( int , org.springframework.data.gemfire.EvictionAttributes . getMaximum ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ExpirationAttributes org.springframework.data.gemfire.ExpirationAttributes , java.lang.String java.lang.String , int int , ExpirationAction org.springframework.data.gemfire.ExpirationAction ) { assertNotNull ( java.lang.String . java.lang.String ( STRING , java.lang.String ) , org.springframework.data.gemfire.ExpirationAttributes ) ; assertEquals ( org.springframework.data.gemfire.ExpirationAction , org.springframework.data.gemfire.ExpirationAttributes . getAction ( ) ) ; assertEquals ( int , org.springframework.data.gemfire.ExpirationAttributes . getTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { assertNotNull ( STRING , java.lang.Object ) ; assertEquals ( java.lang.String , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( java.lang.Object [] java.lang.Object[] ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( java.lang.Object[] . int ) ; for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { java.util.List<java.lang.String> . boolean ( java.lang.Object . java.lang.String ( ) ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.Region<,> ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region<,> . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region<,> . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.Region<,> . getAttributes ( ) ) ; assertEquals ( DataPolicy . REPLICATE , org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getDataPolicy ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getInitialCapacity ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getLoadFactor ( ) , NUMBER ) ; void ( org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getCacheListeners ( ) , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; void ( org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getCacheLoader ( ) , STRING ) ; void ( org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getCacheWriter ( ) , STRING ) ; void ( org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getEvictionAttributes ( ) , EvictionAction . OVERFLOW_TO_DISK , EvictionAlgorithm . LRU_ENTRY , NUMBER ) ; void ( org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getRegionTimeToLive ( ) , STRING , NUMBER , ExpirationAction . LOCAL_DESTROY ) ; void ( org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getRegionIdleTimeout ( ) , STRING , NUMBER , ExpirationAction . INVALIDATE ) ; void ( org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getEntryTimeToLive ( ) , STRING , NUMBER , ExpirationAction . DESTROY ) ; void ( org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getCustomEntryIdleTimeout ( ) , STRING ) ; assertNotNull ( org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getGatewaySenderIds ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getGatewaySenderIds ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getGatewaySenderIds ( ) . iterator ( ) . next ( ) ) ; assertNotNull ( org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getAsyncEventQueueIds ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getAsyncEventQueueIds ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getAsyncEventQueueIds ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.lang.String java.lang.String ) { if ( ! StringUtils . hasText ( this . java.lang.String ) ) { void ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.util.List<org.springframework.data.gemfire.AsyncEvent> < AsyncEvent > java.util.List<org.springframework.data.gemfire.AsyncEvent> ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.lang.String java.lang.String ) { if ( ! StringUtils . hasText ( this . java.lang.String ) ) { void ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public V V ( LoaderHelper < K , V > org.springframework.data.gemfire.LoaderHelper<K,V> ) throws org.springframework.data.gemfire.CacheLoaderException { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( EntryEvent < K , V > org.springframework.data.gemfire.EntryEvent<K,V> ) throws org.springframework.data.gemfire.CacheWriterException { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( EntryEvent < K , V > org.springframework.data.gemfire.EntryEvent<K,V> ) throws org.springframework.data.gemfire.CacheWriterException { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( EntryEvent < K , V > org.springframework.data.gemfire.EntryEvent<K,V> ) throws org.springframework.data.gemfire.CacheWriterException { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( RegionEvent < K , V > org.springframework.data.gemfire.RegionEvent<K,V> ) throws org.springframework.data.gemfire.CacheWriterException { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( RegionEvent < K , V > org.springframework.data.gemfire.RegionEvent<K,V> ) throws org.springframework.data.gemfire.CacheWriterException { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ExpirationAttributes getExpiry ( Region . Region < K , V > entry ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { }  <METHOD_END>
