<METHOD_START> public void ( ProjectInfoProperties org.springframework.boot.autoconfigure.info.ProjectInfoProperties ) { this . org.springframework.boot.autoconfigure.info.ProjectInfoProperties = org.springframework.boot.autoconfigure.info.ProjectInfoProperties ; }  <METHOD_END>
<METHOD_START> @ Conditional ( org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration.GitResourceAvailableCondition .class ) @ ConditionalOnMissingBean @ Bean public org.springframework.boot.autoconfigure.info.GitProperties org.springframework.boot.autoconfigure.info.GitProperties ( ) java.lang.Exception { return new GitProperties ( java.util.Properties ( this . org.springframework.boot.autoconfigure.info.ProjectInfoProperties . getGit ( ) . getLocation ( ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ ConditionalOnResource ( resources = STRING ) @ ConditionalOnMissingBean @ Bean public org.springframework.boot.autoconfigure.info.BuildProperties org.springframework.boot.autoconfigure.info.BuildProperties ( ) java.lang.Exception { return new BuildProperties ( java.util.Properties ( this . org.springframework.boot.autoconfigure.info.ProjectInfoProperties . getBuild ( ) . getLocation ( ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Properties java.util.Properties ( Resource org.springframework.boot.autoconfigure.info.Resource , java.lang.String java.lang.String ) throws java.io.IOException { java.lang.String java.lang.String = java.lang.String . boolean ( STRING ) ? java.lang.String : java.lang.String + STRING ; java.util.Properties java.util.Properties = PropertiesLoaderUtils . loadProperties ( org.springframework.boot.autoconfigure.info.Resource ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; for ( java.lang.String java.lang.String : java.util.Properties . java.util.Set<java.lang.String> ( ) ) { if ( java.lang.String . boolean ( java.lang.String ) ) { java.util.Properties . java.lang.Object ( java.lang.String . java.lang.String ( java.lang.String . int ( ) ) , java.util.Properties . java.lang.Object ( java.lang.String ) ) ; } } return java.util.Properties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.info.ConditionOutcome org.springframework.boot.autoconfigure.info.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.info.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.info.AnnotatedTypeMetadata ) { ResourceLoader org.springframework.boot.autoconfigure.info.ResourceLoader = org.springframework.boot.autoconfigure.info.ConditionContext . getResourceLoader ( ) ; if ( org.springframework.boot.autoconfigure.info.ResourceLoader == null ) { org.springframework.boot.autoconfigure.info.ResourceLoader = this . org.springframework.boot.autoconfigure.info.ResourceLoader ; } PropertyResolver org.springframework.boot.autoconfigure.info.PropertyResolver = org.springframework.boot.autoconfigure.info.ConditionContext . getEnvironment ( ) ; RelaxedPropertyResolver org.springframework.boot.autoconfigure.info.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.autoconfigure.info.PropertyResolver , STRING ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.info.RelaxedPropertyResolver . getProperty ( STRING ) ; if ( java.lang.String == null ) { org.springframework.boot.autoconfigure.info.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.autoconfigure.info.PropertyResolver , STRING ) ; java.lang.String = org.springframework.boot.autoconfigure.info.RelaxedPropertyResolver . getProperty ( STRING ) ; if ( java.lang.String == null ) { java.lang.String = STRING ; } } ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; if ( org.springframework.boot.autoconfigure.info.ResourceLoader . getResource ( java.lang.String ) . exists ( ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . found ( STRING ) . items ( java.lang.String ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING ) . items ( java.lang.String ) ) ; }  <METHOD_END>
