<METHOD_START> @ java.lang.Override public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.xml.BeanDefinition org.springframework.beans.factory.xml.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.beans.factory.xml.ParserContext ) { org.springframework.beans.factory.xml.ParserContext . getReaderContext ( ) . error ( STRING + java.lang.Class<? extends org.springframework.beans.factory.xml.SimpleConstructorNamespaceHandler> ( ) . java.lang.String ( ) + STRING , org.w3c.dom.Element ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.xml.BeanDefinitionHolder org.springframework.beans.factory.xml.BeanDefinitionHolder ( org.w3c.dom.Node org.w3c.dom.Node , BeanDefinitionHolder org.springframework.beans.factory.xml.BeanDefinitionHolder , ParserContext org.springframework.beans.factory.xml.ParserContext ) { if ( org.w3c.dom.Node instanceof org.w3c.dom.Attr ) { org.w3c.dom.Attr org.w3c.dom.Attr = ( org.w3c.dom.Attr ) org.w3c.dom.Node ; java.lang.String java.lang.String = StringUtils . trimWhitespace ( org.springframework.beans.factory.xml.ParserContext . getDelegate ( ) . getLocalName ( org.w3c.dom.Attr ) ) ; java.lang.String java.lang.String = StringUtils . trimWhitespace ( org.w3c.dom.Attr . java.lang.String ( ) ) ; ConstructorArgumentValues org.springframework.beans.factory.xml.ConstructorArgumentValues = org.springframework.beans.factory.xml.BeanDefinitionHolder . getBeanDefinition ( ) . getConstructorArgumentValues ( ) ; boolean boolean = false ; if ( java.lang.String . boolean ( java.lang.String ) ) { boolean = true ; java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - java.lang.String . int ( ) ) ; } ValueHolder org.springframework.beans.factory.xml.ValueHolder = new ValueHolder ( boolean ? new RuntimeBeanReference ( java.lang.String ) : java.lang.String ) ; org.springframework.beans.factory.xml.ValueHolder . setSource ( org.springframework.beans.factory.xml.ParserContext . getReaderContext ( ) . extractSource ( org.w3c.dom.Attr ) ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER ) . java.lang.String ( ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.beans.factory.xml.ConstructorArgumentValues . addGenericArgumentValue ( org.springframework.beans.factory.xml.ValueHolder ) ; } else { int int = - NUMBER ; try { int = java.lang.Integer . int ( java.lang.String ) ; } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { org.springframework.beans.factory.xml.ParserContext . getReaderContext ( ) . error ( STRING + java.lang.String + STRING , org.w3c.dom.Attr ) ; } if ( int < NUMBER ) { org.springframework.beans.factory.xml.ParserContext . getReaderContext ( ) . error ( STRING + java.lang.String + STRING , org.w3c.dom.Attr ) ; } if ( org.springframework.beans.factory.xml.ConstructorArgumentValues . hasIndexedArgumentValue ( int ) ) { org.springframework.beans.factory.xml.ParserContext . getReaderContext ( ) . error ( STRING + java.lang.String + STRING + int + STRING + STRING , org.w3c.dom.Attr ) ; } org.springframework.beans.factory.xml.ConstructorArgumentValues . addIndexedArgumentValue ( int , org.springframework.beans.factory.xml.ValueHolder ) ; } } else { java.lang.String java.lang.String = Conventions . attributeNameToPropertyName ( java.lang.String ) ; if ( boolean ( java.lang.String , org.springframework.beans.factory.xml.ConstructorArgumentValues ) ) { org.springframework.beans.factory.xml.ParserContext . getReaderContext ( ) . error ( STRING + java.lang.String + STRING + STRING , org.w3c.dom.Attr ) ; } org.springframework.beans.factory.xml.ValueHolder . setName ( Conventions . attributeNameToPropertyName ( java.lang.String ) ) ; org.springframework.beans.factory.xml.ConstructorArgumentValues . addGenericArgumentValue ( org.springframework.beans.factory.xml.ValueHolder ) ; } } return org.springframework.beans.factory.xml.BeanDefinitionHolder ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , ConstructorArgumentValues org.springframework.beans.factory.xml.ConstructorArgumentValues ) { return ( boolean ( java.lang.String , org.springframework.beans.factory.xml.ConstructorArgumentValues . getGenericArgumentValues ( ) ) || boolean ( java.lang.String , org.springframework.beans.factory.xml.ConstructorArgumentValues . getIndexedArgumentValues ( ) . values ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , java.util.Collection<org.springframework.beans.factory.xml.ValueHolder> < ValueHolder > java.util.Collection<org.springframework.beans.factory.xml.ValueHolder> ) { for ( ValueHolder org.springframework.beans.factory.xml.ValueHolder : java.util.Collection<org.springframework.beans.factory.xml.ValueHolder> ) { if ( java.lang.String . boolean ( org.springframework.beans.factory.xml.ValueHolder . getName ( ) ) ) { return true ; } } return false ; }  <METHOD_END>
