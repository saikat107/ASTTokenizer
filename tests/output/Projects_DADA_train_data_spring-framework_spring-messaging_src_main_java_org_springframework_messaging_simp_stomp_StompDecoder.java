<METHOD_START> public void void ( MessageHeaderInitializer org.springframework.messaging.simp.stomp.MessageHeaderInitializer ) { this . org.springframework.messaging.simp.stomp.MessageHeaderInitializer = org.springframework.messaging.simp.stomp.MessageHeaderInitializer ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.stomp.MessageHeaderInitializer org.springframework.messaging.simp.stomp.MessageHeaderInitializer ( ) { return this . org.springframework.messaging.simp.stomp.MessageHeaderInitializer ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ( java.nio.ByteBuffer java.nio.ByteBuffer ) { return java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ( java.nio.ByteBuffer , null ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ( java.nio.ByteBuffer java.nio.ByteBuffer , MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.stomp.MultiValueMap<java.lang.String,java.lang.String> ) { java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = new java.util.ArrayList<org.springframework.messaging.simp.stomp.Message<byte[]>> <> ( ) ; while ( java.nio.ByteBuffer . boolean ( ) ) { Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = org.springframework.messaging.simp.stomp.Message<byte[]> ( java.nio.ByteBuffer , org.springframework.messaging.simp.stomp.MultiValueMap<java.lang.String,java.lang.String> ) ; if ( org.springframework.messaging.simp.stomp.Message<byte[]> != null ) { java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . add ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ; } else { break; } } return java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.stomp.Message<byte[]> < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> ( java.nio.ByteBuffer java.nio.ByteBuffer , MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.stomp.MultiValueMap<java.lang.String,java.lang.String> ) { Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = null ; void ( java.nio.ByteBuffer ) ; java.nio.Buffer java.nio.Buffer = java.nio.ByteBuffer ; java.nio.Buffer . java.nio.Buffer ( ) ; java.lang.String java.lang.String = java.lang.String ( java.nio.ByteBuffer ) ; if ( java.lang.String . int ( ) > NUMBER ) { StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = null ; byte [] byte[] = null ; if ( java.nio.ByteBuffer . int ( ) > NUMBER ) { StompCommand org.springframework.messaging.simp.stomp.StompCommand = StompCommand . valueOf ( java.lang.String ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . create ( org.springframework.messaging.simp.stomp.StompCommand ) ; void ( org.springframework.messaging.simp.stomp.StompHeaderAccessor ) ; void ( java.nio.ByteBuffer , org.springframework.messaging.simp.stomp.StompHeaderAccessor ) ; byte[] = byte[] ( java.nio.ByteBuffer , org.springframework.messaging.simp.stomp.StompHeaderAccessor ) ; } if ( byte[] != null ) { if ( byte[] . int > NUMBER && ! org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) . isBodyAllowed ( ) ) { throw new StompConversionException ( org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) + STRING + byte[] . int + STRING + org.springframework.messaging.simp.stomp.MultiValueMap<java.lang.String,java.lang.String> ) ; } org.springframework.messaging.simp.stomp.StompHeaderAccessor . updateSimpMessageHeadersFromStompHeaders ( ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setLeaveMutable ( true ) ; org.springframework.messaging.simp.stomp.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessageHeaders ( ) ) ; if ( org.springframework.messaging.simp.stomp.Log . isTraceEnabled ( ) ) { org.springframework.messaging.simp.stomp.Log . trace ( STRING + org.springframework.messaging.simp.stomp.StompHeaderAccessor . getDetailedLogMessage ( byte[] ) ) ; } } else { if ( org.springframework.messaging.simp.stomp.Log . isTraceEnabled ( ) ) { org.springframework.messaging.simp.stomp.Log . trace ( STRING ) ; } if ( org.springframework.messaging.simp.stomp.MultiValueMap<java.lang.String,java.lang.String> != null && org.springframework.messaging.simp.stomp.StompHeaderAccessor != null ) { java.lang.String java.lang.String = NativeMessageHeaderAccessor . NATIVE_HEADERS ; @ java.lang.SuppressWarnings ( STRING ) MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.stomp.MultiValueMap<java.lang.String,java.lang.String> = ( MultiValueMap < java.lang.String , java.lang.String > ) org.springframework.messaging.simp.stomp.StompHeaderAccessor . getHeader ( java.lang.String ) ; if ( org.springframework.messaging.simp.stomp.MultiValueMap<java.lang.String,java.lang.String> != null ) { org.springframework.messaging.simp.stomp.MultiValueMap<java.lang.String,java.lang.String> . putAll ( org.springframework.messaging.simp.stomp.MultiValueMap<java.lang.String,java.lang.String> ) ; } } java.nio.Buffer . java.nio.Buffer ( ) ; } } else { StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . createForHeartbeat ( ) ; void ( org.springframework.messaging.simp.stomp.StompHeaderAccessor ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setLeaveMutable ( true ) ; org.springframework.messaging.simp.stomp.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessageHeaders ( ) ) ; if ( org.springframework.messaging.simp.stomp.Log . isTraceEnabled ( ) ) { org.springframework.messaging.simp.stomp.Log . trace ( STRING + org.springframework.messaging.simp.stomp.StompHeaderAccessor . getDetailedLogMessage ( null ) ) ; } } return org.springframework.messaging.simp.stomp.Message<byte[]> ; }  <METHOD_END>
<METHOD_START> private void void ( StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor ) { MessageHeaderInitializer org.springframework.messaging.simp.stomp.MessageHeaderInitializer = org.springframework.messaging.simp.stomp.MessageHeaderInitializer ( ) ; if ( org.springframework.messaging.simp.stomp.MessageHeaderInitializer != null ) { org.springframework.messaging.simp.stomp.MessageHeaderInitializer . initHeaders ( org.springframework.messaging.simp.stomp.StompHeaderAccessor ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.nio.ByteBuffer java.nio.ByteBuffer ) { while ( true ) { if ( ! boolean ( java.nio.ByteBuffer ) ) { break; } } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.nio.ByteBuffer java.nio.ByteBuffer ) { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( NUMBER ) ; while ( java.nio.ByteBuffer . int ( ) > NUMBER && ! boolean ( java.nio.ByteBuffer ) ) { java.io.ByteArrayOutputStream . void ( java.nio.ByteBuffer . byte ( ) ) ; } return new java.lang.String ( java.io.ByteArrayOutputStream . byte[] ( ) , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.nio.ByteBuffer java.nio.ByteBuffer , StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor ) { while ( true ) { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( NUMBER ) ; boolean boolean = false ; while ( java.nio.ByteBuffer . boolean ( ) ) { if ( boolean ( java.nio.ByteBuffer ) ) { boolean = true ; break; } java.io.ByteArrayOutputStream . void ( java.nio.ByteBuffer . byte ( ) ) ; } if ( java.io.ByteArrayOutputStream . int ( ) > NUMBER && boolean ) { java.lang.String java.lang.String = new java.lang.String ( java.io.ByteArrayOutputStream . byte[] ( ) , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; int int = java.lang.String . int ( ':' ) ; if ( int <= NUMBER ) { if ( java.nio.ByteBuffer . int ( ) > NUMBER ) { throw new StompConversionException ( STRING + java.lang.String + STRING ) ; } } else { java.lang.String java.lang.String = java.lang.String ( java.lang.String . java.lang.String ( NUMBER , int ) ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String . java.lang.String ( int + NUMBER ) ) ; try { org.springframework.messaging.simp.stomp.StompHeaderAccessor . addNativeHeader ( java.lang.String , java.lang.String ) ; } catch ( InvalidMimeTypeException org.springframework.messaging.simp.stomp.InvalidMimeTypeException ) { if ( java.nio.ByteBuffer . int ( ) > NUMBER ) { throw org.springframework.messaging.simp.stomp.InvalidMimeTypeException ; } } } } else { break; } } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String . int ( ) ) ; int int = NUMBER ; int int = java.lang.String . int ( STRING ) ; while ( int >= NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( int , int ) ) ; if ( int + NUMBER >= java.lang.String . int ( ) ) { throw new StompConversionException ( STRING + int + STRING + java.lang.String ) ; } java.lang.Character java.lang.Character = java.lang.String . char ( int + NUMBER ) ; if ( java.lang.Character == 'r' ) { java.lang.StringBuilder . java.lang.StringBuilder ( '\r' ) ; } else if ( java.lang.Character == 'n' ) { java.lang.StringBuilder . java.lang.StringBuilder ( '\n' ) ; } else if ( java.lang.Character == 'c' ) { java.lang.StringBuilder . java.lang.StringBuilder ( ':' ) ; } else if ( java.lang.Character == '\\' ) { java.lang.StringBuilder . java.lang.StringBuilder ( '\\' ) ; } else { throw new StompConversionException ( STRING + int + STRING + java.lang.String ) ; } int = int + NUMBER ; int = java.lang.String . int ( STRING , int ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( int ) ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private byte [] byte[] ( java.nio.ByteBuffer java.nio.ByteBuffer , StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor ) { java.lang.Integer java.lang.Integer ; try { java.lang.Integer = org.springframework.messaging.simp.stomp.StompHeaderAccessor . getContentLength ( ) ; } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { org.springframework.messaging.simp.stomp.Log . warn ( STRING + org.springframework.messaging.simp.stomp.StompHeaderAccessor ) ; java.lang.Integer = null ; } if ( java.lang.Integer != null && java.lang.Integer >= NUMBER ) { if ( java.nio.ByteBuffer . int ( ) > java.lang.Integer ) { byte [] byte[] = new byte [ java.lang.Integer ] ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; if ( java.nio.ByteBuffer . byte ( ) != NUMBER ) { throw new StompConversionException ( STRING ) ; } return byte[] ; } else { return null ; } } else { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( NUMBER ) ; while ( java.nio.ByteBuffer . int ( ) > NUMBER ) { byte byte = java.nio.ByteBuffer . byte ( ) ; if ( byte == NUMBER ) { return java.io.ByteArrayOutputStream . byte[] ( ) ; } else { java.io.ByteArrayOutputStream . void ( byte ) ; } } } return null ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.nio.ByteBuffer java.nio.ByteBuffer ) { if ( java.nio.ByteBuffer . int ( ) > NUMBER ) { byte byte = java.nio.ByteBuffer . byte ( ) ; if ( byte == '\n' ) { return true ; } else if ( byte == '\r' ) { if ( java.nio.ByteBuffer . int ( ) > NUMBER && java.nio.ByteBuffer . byte ( ) == '\n' ) { return true ; } else { throw new StompConversionException ( STRING ) ; } } ( ( java.nio.Buffer ) java.nio.ByteBuffer ) . java.nio.Buffer ( java.nio.ByteBuffer . int ( ) - NUMBER ) ; } return false ; }  <METHOD_END>
