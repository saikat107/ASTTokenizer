<METHOD_START> void ( FunctionExecutionConfiguration org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration ) { Assert . notNull ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration ) ; this . org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration = org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.function.config.BeanDefinition org.springframework.data.gemfire.function.config.BeanDefinition ( BeanDefinitionRegistry org.springframework.data.gemfire.function.config.BeanDefinitionRegistry ) { BeanDefinitionBuilder org.springframework.data.gemfire.function.config.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( java.lang.Class<?> ( ) ) ; org.springframework.data.gemfire.function.config.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration . getFunctionExecutionInterface ( ) ) ; org.springframework.data.gemfire.function.config.BeanDefinitionBuilder . addConstructorArgReference ( BeanDefinitionReaderUtils . registerWithGeneratedName ( org.springframework.data.gemfire.function.config.AbstractBeanDefinition ( org.springframework.data.gemfire.function.config.BeanDefinitionRegistry ) , org.springframework.data.gemfire.function.config.BeanDefinitionRegistry ) ) ; return org.springframework.data.gemfire.function.config.BeanDefinitionBuilder . getBeanDefinition ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.function.config.AbstractBeanDefinition org.springframework.data.gemfire.function.config.AbstractBeanDefinition ( BeanDefinitionRegistry org.springframework.data.gemfire.function.config.BeanDefinitionRegistry ) { BeanDefinitionBuilder org.springframework.data.gemfire.function.config.BeanDefinitionBuilder = org.springframework.data.gemfire.function.config.BeanDefinitionBuilder ( org.springframework.data.gemfire.function.config.BeanDefinitionRegistry ) ; org.springframework.data.gemfire.function.config.BeanDefinitionBuilder . setLazyInit ( true ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration . getAttribute ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.gemfire.function.config.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; } return org.springframework.data.gemfire.function.config.BeanDefinitionBuilder . getBeanDefinition ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Class<?> < ? > java.lang.Class<?> ( )  <METHOD_END>
<METHOD_START> protected abstract org.springframework.data.gemfire.function.config.BeanDefinitionBuilder org.springframework.data.gemfire.function.config.BeanDefinitionBuilder ( BeanDefinitionRegistry org.springframework.data.gemfire.function.config.BeanDefinitionRegistry );  <METHOD_END>
