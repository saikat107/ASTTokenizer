<METHOD_START> @ Before public void void ( ) { int = NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = this . org.springframework.integration.config.annotation.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.annotation.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , int ) ; assertTrue ( this . org.springframework.integration.config.annotation.AbstractApplicationContext . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.annotation.AbstractApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.config.annotation.MessageChannel = this . org.springframework.integration.config.annotation.AbstractApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = this . org.springframework.integration.config.annotation.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.annotation.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) @ DirtiesContext public void void ( ) { org.springframework.integration.config.annotation.AbstractApplicationContext . stop ( ) ; this . org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext public void void ( ) { org.springframework.integration.config.annotation.AbstractApplicationContext . stop ( ) ; org.springframework.integration.config.annotation.AbstractApplicationContext . start ( ) ; this . org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = this . org.springframework.integration.config.annotation.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.annotation.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator ( inputChannel = STRING , outputChannel = STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { int ++ ; return java.lang.String + STRING + int ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator ( inputChannel = STRING , outputChannel = STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { int ++ ; return java.lang.String + STRING + int ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator ( inputChannel = STRING , outputChannel = STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { int ++ ; return java.lang.String + STRING + int ; }  <METHOD_END>
