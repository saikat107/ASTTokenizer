<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.expression.MethodBasedEvaluationContextTests.SampleMethods .class , STRING , java.lang.String .class , java.lang.Boolean .class ) ; MethodBasedEvaluationContext org.springframework.context.expression.MethodBasedEvaluationContext = org.springframework.context.expression.MethodBasedEvaluationContext ( java.lang.reflect.Method , STRING , true ) ; assertEquals ( STRING , org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertEquals ( true , org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertEquals ( true , org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertEquals ( true , org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.expression.MethodBasedEvaluationContextTests.SampleMethods .class , STRING , java.lang.String .class , java.lang.Boolean .class ) ; MethodBasedEvaluationContext org.springframework.context.expression.MethodBasedEvaluationContext = org.springframework.context.expression.MethodBasedEvaluationContext ( java.lang.reflect.Method , null , null ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.expression.MethodBasedEvaluationContextTests.SampleMethods .class , STRING , java.lang.Boolean .class , java.lang.String [] .class ) ; MethodBasedEvaluationContext org.springframework.context.expression.MethodBasedEvaluationContext = org.springframework.context.expression.MethodBasedEvaluationContext ( java.lang.reflect.Method , new java.lang.Object [] { null } ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.expression.MethodBasedEvaluationContextTests.SampleMethods .class , STRING , java.lang.Boolean .class , java.lang.String [] .class ) ; MethodBasedEvaluationContext org.springframework.context.expression.MethodBasedEvaluationContext = org.springframework.context.expression.MethodBasedEvaluationContext ( java.lang.reflect.Method , null , null ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.expression.MethodBasedEvaluationContextTests.SampleMethods .class , STRING , java.lang.Boolean .class , java.lang.String [] .class ) ; MethodBasedEvaluationContext org.springframework.context.expression.MethodBasedEvaluationContext = org.springframework.context.expression.MethodBasedEvaluationContext ( java.lang.reflect.Method , null , STRING ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.expression.MethodBasedEvaluationContextTests.SampleMethods .class , STRING , java.lang.Boolean .class , java.lang.String [] .class ) ; MethodBasedEvaluationContext org.springframework.context.expression.MethodBasedEvaluationContext = org.springframework.context.expression.MethodBasedEvaluationContext ( java.lang.reflect.Method , null , STRING , STRING ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertNull ( org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertArrayEquals ( new java.lang.Object [] { STRING , STRING } , ( java.lang.Object [] ) org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertArrayEquals ( new java.lang.Object [] { STRING , STRING } , ( java.lang.Object [] ) org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; assertArrayEquals ( new java.lang.Object [] { STRING , STRING } , ( java.lang.Object [] ) org.springframework.context.expression.MethodBasedEvaluationContext . lookupVariable ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.expression.MethodBasedEvaluationContext org.springframework.context.expression.MethodBasedEvaluationContext ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object ... java.lang.Object[] ) { return new MethodBasedEvaluationContext ( this , java.lang.reflect.Method , java.lang.Object[] , this . org.springframework.context.expression.ParameterNameDiscoverer ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Boolean java.lang.Boolean ) {		}  <METHOD_END>
<METHOD_START> private void void ( java.lang.Boolean java.lang.Boolean , java.lang.String ... java.lang.String[] ) {		}  <METHOD_END>
