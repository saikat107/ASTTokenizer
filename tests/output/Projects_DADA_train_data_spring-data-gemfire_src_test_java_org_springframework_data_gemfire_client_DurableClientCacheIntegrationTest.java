<METHOD_START> @ BeforeClass public static void void ( ) java.io.IOException { int = setSystemProperty ( java.lang.String , SocketUtils . findAvailableTcpPort ( ) ) ; org.springframework.data.gemfire.client.ProcessWrapper = startGemFireServer ( org.springframework.data.gemfire.client.DurableClientCacheIntegrationTest .class ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.data.gemfire.client.ProcessWrapper = stopGemFireServer ( org.springframework.data.gemfire.client.ProcessWrapper ) ; clearSystemProperties ( org.springframework.data.gemfire.client.DurableClientCacheIntegrationTest .class ) ; }  <METHOD_END>
<METHOD_START> protected static boolean boolean ( ) { return java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ; }  <METHOD_END>
<METHOD_START> protected static boolean boolean ( ) { return ! boolean ( ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return ! java.util.concurrent.atomic.AtomicBoolean . boolean ( true ) ; }  <METHOD_END>
<METHOD_START> protected < T > T T ( T T , T T ) { return ( boolean ( ) ? T : T ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { java.util.Properties java.util.Properties = org.springframework.data.gemfire.client.ClientCache . getDistributedSystem ( ) . getProperties ( ) ; assertThat ( java.util.Properties . java.lang.String ( DistributedSystemUtils . DURABLE_CLIENT_ID_PROPERTY_NAME ) , is ( equalTo ( org.springframework.data.gemfire.client.DurableClientCacheIntegrationTest .class . java.lang.String ( ) ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCache . getDistributedSystem ( ) . getProperties ( ) . getProperty ( DistributedSystemUtils . DURABLE_CLIENT_TIMEOUT_PROPERTY_NAME ) , is ( equalTo ( java.lang.String ( STRING , STRING ) ) ) ) ; void ( org.springframework.data.gemfire.client.Region<java.lang.String,java.lang.Integer> , STRING , DataPolicy . NORMAL ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( boolean ( ) ) { void ( ) ; void ( ) ; void ( ) ; } java.util.List<java.lang.Integer> . void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { org.springframework.data.gemfire.client.ConfigurableApplicationContext . close ( ) ; assertThat ( org.springframework.data.gemfire.client.ConfigurableApplicationContext . isRunning ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.client.ConfigurableApplicationContext . isActive ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { try { ClientCache org.springframework.data.gemfire.client.ClientCache = new ClientCacheFactory ( ) . addPoolServer ( java.lang.String , int ) . set ( STRING , STRING ) . set ( STRING , STRING ) . set ( STRING , STRING ) . create ( ) ; Region < java.lang.String , java.lang.Integer > org.springframework.data.gemfire.client.Region<java.lang.String,java.lang.Integer> = org.springframework.data.gemfire.client.ClientCache .< java.lang.String , java.lang.Integer > createClientRegionFactory ( ClientRegionShortcut . PROXY ) . create ( STRING ) ; org.springframework.data.gemfire.client.Region<java.lang.String,java.lang.Integer> . put ( STRING , NUMBER ) ; org.springframework.data.gemfire.client.Region<java.lang.String,java.lang.Integer> . put ( STRING , NUMBER ) ; } finally { GemfireUtils . closeClientCache ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { java.lang.System . java.lang.String ( java.lang.String , InterestResultPolicyType . NONE . name ( ) ) ; java.lang.System . java.lang.String ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Region < ? , ? > org.springframework.data.gemfire.client.Region<?,?> , java.lang.String java.lang.String , DataPolicy org.springframework.data.gemfire.client.DataPolicy ) { void ( org.springframework.data.gemfire.client.Region<,> , java.lang.String , java.lang.String . java.lang.String ( STRING , Region . SEPARATOR , java.lang.String ) , org.springframework.data.gemfire.client.DataPolicy ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Region < ? , ? > org.springframework.data.gemfire.client.Region<?,?> , java.lang.String java.lang.String , java.lang.String java.lang.String , DataPolicy org.springframework.data.gemfire.client.DataPolicy ) { assertThat ( org.springframework.data.gemfire.client.Region<,> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<,> . getName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<,> . getFullPath ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<,> . getAttributes ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<,> . getAttributes ( ) . getDataPolicy ( ) , is ( equalTo ( org.springframework.data.gemfire.client.DataPolicy ) ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Region < ? , ? > org.springframework.data.gemfire.client.Region<?,?> , java.lang.Object ... java.lang.Object[] ) { assertThat ( org.springframework.data.gemfire.client.Region<,> . size ( ) , is ( equalTo ( java.lang.Object[] . int ) ) ) ; for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { assertThat ( org.springframework.data.gemfire.client.Region<,> . containsValue ( java.lang.Object ) , is ( true ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { ThreadUtils . timedWait ( java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) , new ThreadUtils . ThreadUtils ( ) { @ java.lang.Override public boolean boolean ( ) { return ( java.util.List<java.lang.Integer> . int ( ) < NUMBER ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( java.util.List<java.lang.Integer> . int ( ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext public void void ( ) { assumeTrue ( boolean ( ) ) ; void ( org.springframework.data.gemfire.client.Region<java.lang.String,java.lang.Integer> , NUMBER , NUMBER , NUMBER ) ; assertThat ( java.util.List<java.lang.Integer> . boolean ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeTrue ( boolean ( ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.String,java.lang.Integer> . isEmpty ( ) , is ( true ) ) ; void ( ) ; assertThat ( java.util.List<java.lang.Integer> . int ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( java.util.List<java.lang.Integer> , is ( equalTo ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.String,java.lang.Integer> . isEmpty ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.gemfire.client.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.gemfire.client.BeansException { if ( java.lang.Object instanceof Pool && STRING . boolean ( java.lang.String ) ) { Pool org.springframework.data.gemfire.client.Pool = ( Pool ) java.lang.Object ; if ( boolean ( ) ) { assertThat ( org.springframework.data.gemfire.client.Pool . getPendingEventCount ( ) , is ( equalTo ( - NUMBER ) ) ) ; } else { assertThat ( org.springframework.data.gemfire.client.Pool . getPendingEventCount ( ) , is ( greaterThanOrEqualTo ( NUMBER ) ) ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<K,V> < K , V > java.util.Map<K,V> ) { this . java.util.Map<K,V> = java.util.Map<K,V> ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<K,V> < K , V > java.util.Map<K,V> ( ) { Assert . state ( java.util.Map<K,V> != null , STRING ) ; return java.util.Map<K,V> ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected void void ( Region < K , V > org.springframework.data.gemfire.client.Region<K,V> ) { org.springframework.data.gemfire.client.Region<K,V> . putAll ( java.util.Map<K,V> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.gemfire.client.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.gemfire.client.BeansException { if ( java.lang.Object instanceof Region ) { Region < K , V > org.springframework.data.gemfire.client.Region<K,V> = ( Region ) java.lang.Object ; if ( java.lang.String ( ) . boolean ( org.springframework.data.gemfire.client.Region<K,V> . getName ( ) ) ) { void ( org.springframework.data.gemfire.client.Region<K,V> ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( EntryEvent < java.lang.String , java.lang.Integer > org.springframework.data.gemfire.client.EntryEvent<java.lang.String,java.lang.Integer> ) { java.util.List<java.lang.Integer> . boolean ( org.springframework.data.gemfire.client.EntryEvent<java.lang.String,java.lang.Integer> . getNewValue ( ) ) ; }  <METHOD_END>
