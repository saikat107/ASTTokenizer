<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.querydsl.binding.QuerydslBindingsFactory = new QuerydslBindingsFactory ( SimpleEntityPathResolver . INSTANCE ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { Repositories org.springframework.data.querydsl.binding.Repositories = mock ( Repositories .class ) ; when ( org.springframework.data.querydsl.binding.Repositories . hasRepositoryFor ( User .class ) ) . thenReturn ( true ) ; when ( org.springframework.data.querydsl.binding.Repositories . getRepositoryFor ( User .class ) ) . thenReturn ( java.util.Optional . java.util.Optional<org.springframework.data.querydsl.binding.QuerydslBindingsFactoryUnitTests.SampleRepo> ( new org.springframework.data.querydsl.binding.QuerydslBindingsFactoryUnitTests.SampleRepo ( ) ) ) ; QuerydslBindingsFactory org.springframework.data.querydsl.binding.QuerydslBindingsFactory = new QuerydslBindingsFactory ( SimpleEntityPathResolver . INSTANCE ) ; ReflectionTestUtils . setField ( org.springframework.data.querydsl.binding.QuerydslBindingsFactory , STRING , java.util.Optional . java.util.Optional ( org.springframework.data.querydsl.binding.Repositories ) ) ; QuerydslBindings org.springframework.data.querydsl.binding.QuerydslBindings = org.springframework.data.querydsl.binding.QuerydslBindingsFactory . createBindingsFor ( org.springframework.data.querydsl.binding.TypeInformation<> ) ; java.util.Optional<org.springframework.data.querydsl.binding.MultiValueBinding<org.springframework.data.querydsl.binding.Path<java.lang.Object>,java.lang.Object>> < MultiValueBinding < Path < java.lang.Object > , java.lang.Object > > java.util.Optional<org.springframework.data.querydsl.binding.MultiValueBinding<org.springframework.data.querydsl.binding.Path<java.lang.Object>,java.lang.Object>> = org.springframework.data.querydsl.binding.QuerydslBindings . getBindingForPath ( PropertyPathInformation . of ( STRING , User .class ) ) ; assertThat ( java.util.Optional<org.springframework.data.querydsl.binding.MultiValueBinding<org.springframework.data.querydsl.binding.Path<java.lang.Object>,java.lang.Object>> ) . hasValueSatisfying ( it -> { Optional < Predicate > bind = it . bind ( ( Path ) QUser . user . firstname , Collections . singleton ( STRING ) ) ; assertThat ( bind ) . hasValue ( QUser . user . firstname . contains ( STRING ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { AutowireCapableBeanFactory org.springframework.data.querydsl.binding.AutowireCapableBeanFactory = mock ( AutowireCapableBeanFactory .class ) ; when ( org.springframework.data.querydsl.binding.AutowireCapableBeanFactory . getBean ( org.springframework.data.querydsl.binding.QuerydslBindingsFactoryUnitTests.SpecificBinding .class ) ) . thenReturn ( new org.springframework.data.querydsl.binding.QuerydslBindingsFactoryUnitTests.SpecificBinding ( ) ) ; QuerydslBindingsFactory org.springframework.data.querydsl.binding.QuerydslBindingsFactory = new QuerydslBindingsFactory ( SimpleEntityPathResolver . INSTANCE ) ; ReflectionTestUtils . setField ( org.springframework.data.querydsl.binding.QuerydslBindingsFactory , STRING , java.util.Optional . java.util.Optional ( org.springframework.data.querydsl.binding.AutowireCapableBeanFactory ) ) ; QuerydslBindings org.springframework.data.querydsl.binding.QuerydslBindings = org.springframework.data.querydsl.binding.QuerydslBindingsFactory . createBindingsFor ( org.springframework.data.querydsl.binding.TypeInformation<> , org.springframework.data.querydsl.binding.QuerydslBindingsFactoryUnitTests.SpecificBinding .class ) ; java.util.Optional<org.springframework.data.querydsl.binding.MultiValueBinding<org.springframework.data.querydsl.binding.Path<java.lang.Object>,java.lang.Object>> < MultiValueBinding < Path < java.lang.Object > , java.lang.Object > > java.util.Optional<org.springframework.data.querydsl.binding.MultiValueBinding<org.springframework.data.querydsl.binding.Path<java.lang.Object>,java.lang.Object>> = org.springframework.data.querydsl.binding.QuerydslBindings . getBindingForPath ( PropertyPathInformation . of ( STRING , User .class ) ) ; assertThat ( java.util.Optional<org.springframework.data.querydsl.binding.MultiValueBinding<org.springframework.data.querydsl.binding.Path<java.lang.Object>,java.lang.Object>> ) . hasValueSatisfying ( it -> { Optional < Predicate > bind = it . bind ( ( Path ) QUser . user . firstname , Collections . singleton ( STRING ) ) ; assertThat ( bind ) . hasValue ( QUser . user . firstname . eq ( STRING ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThatExceptionOfType ( java.lang.IllegalStateException .class ) . isThrownBy ( ( ) factory . createBindingsFor ( ClassTypeInformation . from ( ModelAndView .class ) ) ) . withMessageContaining ( QuerydslPredicate .class . java.lang.String ( ) ) . withMessageContaining ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( QuerydslBindings org.springframework.data.querydsl.binding.QuerydslBindings , QUser org.springframework.data.querydsl.binding.QUser ) { org.springframework.data.querydsl.binding.QuerydslBindings . bind ( user . firstname ) . firstOptional ( ( path , value ) -> value . map ( it -> path . eq ( it . toUpperCase ( ) ) ) ) ; org.springframework.data.querydsl.binding.QuerydslBindings . bind ( user . lastname ) . firstOptional ( ( path , value ) -> value . map ( it -> path . toLowerCase ( ) . eq ( it ) ) ) ; org.springframework.data.querydsl.binding.QuerydslBindings . excluding ( user . address ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( QuerydslBindings org.springframework.data.querydsl.binding.QuerydslBindings , QUser org.springframework.data.querydsl.binding.QUser ) { org.springframework.data.querydsl.binding.QuerydslBindings . bind ( QUser . user . firstname ) . firstOptional ( ( path , value ) -> value . map ( path :: contains ) ) ; }  <METHOD_END>
