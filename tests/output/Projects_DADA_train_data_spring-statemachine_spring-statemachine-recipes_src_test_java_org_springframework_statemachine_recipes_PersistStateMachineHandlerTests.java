<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> ( ) ; PersistStateMachineHandler org.springframework.statemachine.recipes.PersistStateMachineHandler = new PersistStateMachineHandler ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> ) ; org.springframework.statemachine.recipes.PersistStateMachineHandler . afterPropertiesSet ( ) ; org.springframework.statemachine.recipes.PersistStateMachineHandler . start ( ) ; org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener = new org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener ( ) ; org.springframework.statemachine.recipes.PersistStateMachineHandler . addPersistStateChangeListener ( org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener ) ; Message < java.lang.String > org.springframework.statemachine.recipes.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; boolean boolean = org.springframework.statemachine.recipes.PersistStateMachineHandler . handleEventWithState ( org.springframework.statemachine.recipes.Message<java.lang.String> , STRING ) ; assertThat ( boolean , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> ( ) ; PersistStateMachineHandler org.springframework.statemachine.recipes.PersistStateMachineHandler = new PersistStateMachineHandler ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> ) ; org.springframework.statemachine.recipes.PersistStateMachineHandler . afterPropertiesSet ( ) ; org.springframework.statemachine.recipes.PersistStateMachineHandler . start ( ) ; org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener = new org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener ( ) ; org.springframework.statemachine.recipes.PersistStateMachineHandler . addPersistStateChangeListener ( org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener ) ; Message < java.lang.String > org.springframework.statemachine.recipes.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; boolean boolean = org.springframework.statemachine.recipes.PersistStateMachineHandler . handleEventWithState ( org.springframework.statemachine.recipes.Message<java.lang.String> , STRING ) ; assertThat ( boolean , is ( false ) ) ; assertThat ( org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> ( ) ; PersistStateMachineHandler org.springframework.statemachine.recipes.PersistStateMachineHandler = new PersistStateMachineHandler ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> ) ; org.springframework.statemachine.recipes.PersistStateMachineHandler . afterPropertiesSet ( ) ; org.springframework.statemachine.recipes.PersistStateMachineHandler . start ( ) ; org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener = new org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener ( ) ; org.springframework.statemachine.recipes.PersistStateMachineHandler . addPersistStateChangeListener ( org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener ) ; Message < java.lang.String > org.springframework.statemachine.recipes.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; boolean boolean = org.springframework.statemachine.recipes.PersistStateMachineHandler . handleEventWithState ( org.springframework.statemachine.recipes.Message<java.lang.String> , STRING ) ; assertThat ( boolean , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener . java.util.List<org.springframework.statemachine.recipes.State<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.recipes.PersistStateMachineHandlerTests.TestPersistStateChangeListener . java.util.List<org.springframework.statemachine.recipes.State<java.lang.String,java.lang.String>> . get ( NUMBER ) . getId ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.State<java.lang.String,java.lang.String> , Message < java.lang.String > org.springframework.statemachine.recipes.Message<java.lang.String> , Transition < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.Transition<java.lang.String,java.lang.String> , StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> ) { java.util.List<org.springframework.statemachine.recipes.State<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.recipes.State<java.lang.String,java.lang.String> ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> ( ) java.lang.Exception { StateMachineBuilder . StateMachineBuilder < java.lang.String , java.lang.String > builder = StateMachineBuilder . builder ( ) ; builder . configureConfiguration ( ) . withConfiguration ( ) . taskExecutor ( new SyncTaskExecutor ( ) ) . autoStartup ( true ) ; builder . configureStates ( ) . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) ; builder . configureTransitions ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; return builder . build ( ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.recipes.StateMachine<java.lang.String,java.lang.String> ( ) java.lang.Exception { StateMachineBuilder . StateMachineBuilder < java.lang.String , java.lang.String > builder = StateMachineBuilder . builder ( ) ; builder . configureConfiguration ( ) . withConfiguration ( ) . taskExecutor ( new SyncTaskExecutor ( ) ) . autoStartup ( true ) ; builder . configureStates ( ) . withStates ( ) . initial ( STRING ) . choice ( STRING ) . state ( STRING ) . state ( STRING ) ; builder . configureTransitions ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withChoice ( ) . source ( STRING ) . last ( STRING ) ; return builder . build ( ) ; }  <METHOD_END>
