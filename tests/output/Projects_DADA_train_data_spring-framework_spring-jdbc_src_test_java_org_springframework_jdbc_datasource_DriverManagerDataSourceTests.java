<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; class TestDriverManagerDataSource extends DriverManagerDataSource { @ java.lang.Override protected java.sql.Connection java.sql.Connection ( java.lang.String java.lang.String , java.util.Properties java.util.Properties ) { assertEquals ( java.lang.String , java.lang.String ) ; assertEquals ( java.lang.String , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( java.lang.String , java.util.Properties . java.lang.String ( STRING ) ) ; return java.sql.Connection ; } } DriverManagerDataSource org.springframework.jdbc.datasource.DriverManagerDataSource = new TestDriverManagerDataSource ( ) ; org.springframework.jdbc.datasource.DriverManagerDataSource . setUrl ( java.lang.String ) ; org.springframework.jdbc.datasource.DriverManagerDataSource . setUsername ( java.lang.String ) ; org.springframework.jdbc.datasource.DriverManagerDataSource . setPassword ( java.lang.String ) ; java.sql.Connection java.sql.Connection = org.springframework.jdbc.datasource.DriverManagerDataSource . getConnection ( ) ; assertTrue ( java.sql.Connection == java.sql.Connection ) ; assertTrue ( org.springframework.jdbc.datasource.DriverManagerDataSource . getUrl ( ) . equals ( java.lang.String ) ) ; assertTrue ( org.springframework.jdbc.datasource.DriverManagerDataSource . getPassword ( ) . equals ( java.lang.String ) ) ; assertTrue ( org.springframework.jdbc.datasource.DriverManagerDataSource . getUsername ( ) . equals ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.sql.Connection java.sql.Connection ( java.lang.String java.lang.String , java.util.Properties java.util.Properties ) { assertEquals ( java.lang.String , java.lang.String ) ; assertEquals ( java.lang.String , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( java.lang.String , java.util.Properties . java.lang.String ( STRING ) ) ; return java.sql.Connection ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; class TestDriverManagerDataSource extends DriverManagerDataSource { @ java.lang.Override protected java.sql.Connection java.sql.Connection ( java.lang.String java.lang.String , java.util.Properties java.util.Properties ) { assertEquals ( java.lang.String , java.lang.String ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; return java.sql.Connection ; } } DriverManagerDataSource org.springframework.jdbc.datasource.DriverManagerDataSource = new TestDriverManagerDataSource ( ) ; org.springframework.jdbc.datasource.DriverManagerDataSource . setUrl ( java.lang.String ) ; org.springframework.jdbc.datasource.DriverManagerDataSource . setConnectionProperties ( java.util.Properties ) ; java.sql.Connection java.sql.Connection = org.springframework.jdbc.datasource.DriverManagerDataSource . getConnection ( ) ; assertTrue ( java.sql.Connection == java.sql.Connection ) ; assertTrue ( org.springframework.jdbc.datasource.DriverManagerDataSource . getUrl ( ) . equals ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.sql.Connection java.sql.Connection ( java.lang.String java.lang.String , java.util.Properties java.util.Properties ) { assertEquals ( java.lang.String , java.lang.String ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; return java.sql.Connection ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; final java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; class TestDriverManagerDataSource extends DriverManagerDataSource { @ java.lang.Override protected java.sql.Connection java.sql.Connection ( java.lang.String java.lang.String , java.util.Properties java.util.Properties ) { assertEquals ( java.lang.String , java.lang.String ) ; assertEquals ( java.lang.String , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( java.lang.String , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; return java.sql.Connection ; } } DriverManagerDataSource org.springframework.jdbc.datasource.DriverManagerDataSource = new TestDriverManagerDataSource ( ) ; org.springframework.jdbc.datasource.DriverManagerDataSource . setUrl ( java.lang.String ) ; org.springframework.jdbc.datasource.DriverManagerDataSource . setUsername ( java.lang.String ) ; org.springframework.jdbc.datasource.DriverManagerDataSource . setPassword ( java.lang.String ) ; org.springframework.jdbc.datasource.DriverManagerDataSource . setConnectionProperties ( java.util.Properties ) ; java.sql.Connection java.sql.Connection = org.springframework.jdbc.datasource.DriverManagerDataSource . getConnection ( ) ; assertTrue ( java.sql.Connection == java.sql.Connection ) ; assertTrue ( org.springframework.jdbc.datasource.DriverManagerDataSource . getUrl ( ) . equals ( java.lang.String ) ) ; assertTrue ( org.springframework.jdbc.datasource.DriverManagerDataSource . getPassword ( ) . equals ( java.lang.String ) ) ; assertTrue ( org.springframework.jdbc.datasource.DriverManagerDataSource . getUsername ( ) . equals ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.sql.Connection java.sql.Connection ( java.lang.String java.lang.String , java.util.Properties java.util.Properties ) { assertEquals ( java.lang.String , java.lang.String ) ; assertEquals ( java.lang.String , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( java.lang.String , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; return java.sql.Connection ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; DriverManagerDataSource org.springframework.jdbc.datasource.DriverManagerDataSource = new DriverManagerDataSource ( ) ; try { org.springframework.jdbc.datasource.DriverManagerDataSource . setDriverClassName ( java.lang.String ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( java.lang.IllegalStateException . java.lang.Throwable ( ) instanceof java.lang.ClassNotFoundException ) ; } }  <METHOD_END>
