<METHOD_START> void ( HttpClient org.springframework.http.client.HttpClient , HttpUriRequest org.springframework.http.client.HttpUriRequest , HttpContext org.springframework.http.client.HttpContext ) { this . org.springframework.http.client.HttpClient = org.springframework.http.client.HttpClient ; this . org.springframework.http.client.HttpUriRequest = org.springframework.http.client.HttpUriRequest ; this . org.springframework.http.client.HttpContext = org.springframework.http.client.HttpContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.HttpMethod org.springframework.http.client.HttpMethod ( ) { return HttpMethod . resolve ( this . org.springframework.http.client.HttpUriRequest . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return this . org.springframework.http.client.HttpUriRequest . getURI ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.http.client.HttpContext org.springframework.http.client.HttpContext ( ) { return this . org.springframework.http.client.HttpContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( HttpHeaders org.springframework.http.client.HttpHeaders , byte [] byte[] ) throws java.io.IOException { void ( this . org.springframework.http.client.HttpUriRequest , org.springframework.http.client.HttpHeaders ) ; if ( this . org.springframework.http.client.HttpUriRequest instanceof HttpEntityEnclosingRequest ) { HttpEntityEnclosingRequest org.springframework.http.client.HttpEntityEnclosingRequest = ( HttpEntityEnclosingRequest ) this . org.springframework.http.client.HttpUriRequest ; HttpEntity org.springframework.http.client.HttpEntity = new ByteArrayEntity ( byte[] ) ; org.springframework.http.client.HttpEntityEnclosingRequest . setEntity ( org.springframework.http.client.HttpEntity ) ; } HttpResponse org.springframework.http.client.HttpResponse = this . org.springframework.http.client.HttpClient . execute ( this . org.springframework.http.client.HttpUriRequest , this . org.springframework.http.client.HttpContext ) ; return new HttpComponentsClientHttpResponse ( org.springframework.http.client.HttpResponse ) ; }  <METHOD_END>
<METHOD_START> static void void ( HttpUriRequest org.springframework.http.client.HttpUriRequest , HttpHeaders org.springframework.http.client.HttpHeaders ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : org.springframework.http.client.HttpHeaders . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) ; if ( HttpHeaders . COOKIE . equalsIgnoreCase ( java.lang.String ) ) { java.lang.String java.lang.String = StringUtils . collectionToDelimitedString ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) , STRING ) ; org.springframework.http.client.HttpUriRequest . addHeader ( java.lang.String , java.lang.String ) ; } else if ( ! HTTP . CONTENT_LEN . equalsIgnoreCase ( java.lang.String ) && ! HTTP . TRANSFER_ENCODING . equalsIgnoreCase ( java.lang.String ) ) { for ( java.lang.String java.lang.String : java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ) { org.springframework.http.client.HttpUriRequest . addHeader ( java.lang.String , java.lang.String ) ; } } } }  <METHOD_END>
