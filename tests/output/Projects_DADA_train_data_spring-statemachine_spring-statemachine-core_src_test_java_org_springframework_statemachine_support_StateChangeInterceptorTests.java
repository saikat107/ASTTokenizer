<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.support.AnnotationConfigApplicationContext org.springframework.statemachine.support.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { context . register ( org.springframework.statemachine.support.StateChangeInterceptorTests.Config1 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener = new org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener ( ) ; org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . addStateListener ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener ) ; org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor = new org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor ( ) ; org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachineAccess<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ) { org.springframework.statemachine.support.StateMachineAccess<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . addStateMachineInterceptor ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor ) ; } } ) ; org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . start ( ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) ) ; assertThat ( ( java.lang.Integer ) org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . getExtendedState ( ) . getVariables ( ) . get ( STRING ) , is ( NUMBER ) ) ; org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor . void ( NUMBER ) ; org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . sendEvent ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) ) ; org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . sendEvent ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) ; assertThat ( org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) ) ; assertThat ( ( java.lang.Integer ) org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . getExtendedState ( ) . getVariables ( ) . get ( STRING ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachineAccess<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ) { org.springframework.statemachine.support.StateMachineAccess<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . addStateMachineInterceptor ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { context . register ( org.springframework.statemachine.support.StateChangeInterceptorTests.Config2 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener = new org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener ( ) ; org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . addStateListener ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener ) ; org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor = new org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor ( ) ; org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachineAccess<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ) { org.springframework.statemachine.support.StateMachineAccess<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . addStateMachineInterceptor ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor ) ; } } ) ; org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . start ( ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) ) ; org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor . void ( NUMBER ) ; org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . sendEvent ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor . int , is ( NUMBER ) ) ; org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor . void ( NUMBER ) ; org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . sendEvent ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachineAccess<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ) { org.springframework.statemachine.support.StateMachineAccess<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . addStateMachineInterceptor ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { context . register ( org.springframework.statemachine.support.StateChangeInterceptorTests.Config3 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener = new org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener ( ) ; org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . addStateListener ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener ) ; org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor = new org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor ( ) ; org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachineAccess<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ) { org.springframework.statemachine.support.StateMachineAccess<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . addStateMachineInterceptor ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor ) ; } } ) ; org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . start ( ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) ) ; org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor . void ( NUMBER ) ; org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . sendEvent ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachineAccess<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ) { org.springframework.statemachine.support.StateMachineAccess<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . addStateMachineInterceptor ( org.springframework.statemachine.support.StateChangeInterceptorTests.TestStateChangeInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachineStateConfigurer<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> )				throws java.lang.Exception { org.springframework.statemachine.support.StateMachineStateConfigurer<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . withStates ( ) . initial ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.FooAction ( ) ) . state ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . and ( ) . withStates ( ) . parent ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . initial ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . state ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . and ( ) . withStates ( ) . parent ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . initial ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . state ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . state ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . and ( ) . withStates ( ) . parent ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . state ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . and ( ) . withStates ( ) . parent ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . initial ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . state ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . and ( ) . withStates ( ) . parent ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . initial ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . state ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . state ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachineTransitionConfigurer<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> )				throws java.lang.Exception { org.springframework.statemachine.support.StateMachineTransitionConfigurer<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . guard ( org.springframework.statemachine.support.StateChangeInterceptorTests.FooGuard ( ) ) . and ( ) . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . and ( ) . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . and ( ) . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . and ( ) . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . and ( ) . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . and ( ) . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . and ( ) . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . and ( ) . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . and ( ) . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . and ( ) . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . and ( ) . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . and ( ) . withInternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . guard ( org.springframework.statemachine.support.StateChangeInterceptorTests.FooGuard ( ) ) . action ( org.springframework.statemachine.support.StateChangeInterceptorTests.FooAction ( ) ) . and ( ) . withInternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . guard ( org.springframework.statemachine.support.StateChangeInterceptorTests.FooGuard ( ) ) . action ( org.springframework.statemachine.support.StateChangeInterceptorTests.FooAction ( ) ) . and ( ) . withInternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . and ( ) . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . and ( ) . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . and ( ) . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.support.StateChangeInterceptorTests.FooGuard org.springframework.statemachine.support.StateChangeInterceptorTests.FooGuard ( ) { return new org.springframework.statemachine.support.StateChangeInterceptorTests.FooGuard ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.support.StateChangeInterceptorTests.FooGuard org.springframework.statemachine.support.StateChangeInterceptorTests.FooGuard ( ) { return new org.springframework.statemachine.support.StateChangeInterceptorTests.FooGuard ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.support.StateChangeInterceptorTests.FooAction org.springframework.statemachine.support.StateChangeInterceptorTests.FooAction ( ) { return new org.springframework.statemachine.support.StateChangeInterceptorTests.FooAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachineStateConfigurer<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> )				throws java.lang.Exception { org.springframework.statemachine.support.StateMachineStateConfigurer<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . withStates ( ) . initial ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . state ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . state ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachineTransitionConfigurer<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> )				throws java.lang.Exception { org.springframework.statemachine.support.StateMachineTransitionConfigurer<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . and ( ) . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachineStateConfigurer<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> )				throws java.lang.Exception { org.springframework.statemachine.support.StateMachineStateConfigurer<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . withStates ( ) . initial ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . choice ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . state ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachineTransitionConfigurer<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> )				throws java.lang.Exception { org.springframework.statemachine.support.StateMachineTransitionConfigurer<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . withExternal ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . target ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . event ( org.springframework.statemachine.support.StateChangeInterceptorTests.Events . org.springframework.statemachine.support.StateChangeInterceptorTests.Events ) . and ( ) . withChoice ( ) . source ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) . last ( org.springframework.statemachine.support.StateChangeInterceptorTests.States . org.springframework.statemachine.support.StateChangeInterceptorTests.States ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateContext<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.support.StateContext<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . getExtendedState ( ) . getVariables ( ) ; java.lang.Integer java.lang.Integer = org.springframework.statemachine.support.StateContext<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . getExtendedState ( ) . get ( STRING , java.lang.Integer .class ) ; if ( java.lang.Integer == null ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; } else if ( java.lang.Integer == NUMBER ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; } else if ( java.lang.Integer == NUMBER ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; } }  <METHOD_END>
<METHOD_START> public void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateContext<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ) { java.lang.Object java.lang.Object = org.springframework.statemachine.support.StateContext<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> . getExtendedState ( ) . getVariables ( ) . get ( STRING ) ; return ! ( java.lang.Object == null || ! java.lang.Object . boolean ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.State<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> , State < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.State<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.support.Message<org.springframework.statemachine.support.StateChangeInterceptorTests.Events> < org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.Message<org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ( Message < org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.Message<org.springframework.statemachine.support.StateChangeInterceptorTests.Events> , StateMachine < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ) { return org.springframework.statemachine.support.Message<org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.State<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> , Message < org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.Message<org.springframework.statemachine.support.StateChangeInterceptorTests.Events> , Transition < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.Transition<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> , StateMachine < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.State<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> , Message < org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.Message<org.springframework.statemachine.support.StateChangeInterceptorTests.Events> , Transition < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.Transition<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> , StateMachine < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.support.StateContext<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateContext<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ( StateContext < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateContext<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ) { return org.springframework.statemachine.support.StateContext<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.support.StateContext<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateContext<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ( StateContext < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateContext<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ) { return org.springframework.statemachine.support.StateContext<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Exception java.lang.Exception ( StateMachine < org.springframework.statemachine.support.StateChangeInterceptorTests.States , org.springframework.statemachine.support.StateChangeInterceptorTests.Events > org.springframework.statemachine.support.StateMachine<org.springframework.statemachine.support.StateChangeInterceptorTests.States,org.springframework.statemachine.support.StateChangeInterceptorTests.Events> , java.lang.Exception java.lang.Exception ) { return java.lang.Exception ; }  <METHOD_END>
