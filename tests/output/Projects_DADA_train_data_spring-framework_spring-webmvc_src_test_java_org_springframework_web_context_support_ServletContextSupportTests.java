<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.web.context.support.MockServletContext = new MockServletContext ( ) ; org.springframework.web.context.support.MockServletContext . setAttribute ( STRING , STRING ) ; StaticWebApplicationContext org.springframework.web.context.support.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.context.support.StaticWebApplicationContext . setServletContext ( org.springframework.web.context.support.MockServletContext ) ; MutablePropertyValues org.springframework.web.context.support.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.context.support.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.web.context.support.StaticWebApplicationContext . registerSingleton ( STRING , ServletContextAttributeFactoryBean .class , org.springframework.web.context.support.MutablePropertyValues ) ; org.springframework.web.context.support.StaticWebApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.web.context.support.StaticWebApplicationContext . getBean ( STRING ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.web.context.support.MockServletContext = new MockServletContext ( ) ; StaticWebApplicationContext org.springframework.web.context.support.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.context.support.StaticWebApplicationContext . setServletContext ( org.springframework.web.context.support.MockServletContext ) ; MutablePropertyValues org.springframework.web.context.support.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.context.support.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.web.context.support.StaticWebApplicationContext . registerSingleton ( STRING , ServletContextAttributeFactoryBean .class , org.springframework.web.context.support.MutablePropertyValues ) ; try { org.springframework.web.context.support.StaticWebApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.web.context.support.BeanCreationException ) { assertTrue ( org.springframework.web.context.support.BeanCreationException . getCause ( ) instanceof java.lang.IllegalStateException ) ; assertTrue ( org.springframework.web.context.support.BeanCreationException . getCause ( ) . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.web.context.support.MockServletContext = new MockServletContext ( ) ; org.springframework.web.context.support.MockServletContext . addInitParameter ( STRING , STRING ) ; StaticWebApplicationContext org.springframework.web.context.support.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.context.support.StaticWebApplicationContext . setServletContext ( org.springframework.web.context.support.MockServletContext ) ; MutablePropertyValues org.springframework.web.context.support.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.context.support.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.web.context.support.StaticWebApplicationContext . registerSingleton ( STRING , ServletContextParameterFactoryBean .class , org.springframework.web.context.support.MutablePropertyValues ) ; org.springframework.web.context.support.StaticWebApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.web.context.support.StaticWebApplicationContext . getBean ( STRING ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.web.context.support.MockServletContext = new MockServletContext ( ) ; StaticWebApplicationContext org.springframework.web.context.support.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.context.support.StaticWebApplicationContext . setServletContext ( org.springframework.web.context.support.MockServletContext ) ; MutablePropertyValues org.springframework.web.context.support.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.context.support.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.web.context.support.StaticWebApplicationContext . registerSingleton ( STRING , ServletContextParameterFactoryBean .class , org.springframework.web.context.support.MutablePropertyValues ) ; try { org.springframework.web.context.support.StaticWebApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.web.context.support.BeanCreationException ) { assertTrue ( org.springframework.web.context.support.BeanCreationException . getCause ( ) instanceof java.lang.IllegalStateException ) ; assertTrue ( org.springframework.web.context.support.BeanCreationException . getCause ( ) . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.web.context.support.TestBean = new TestBean ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.web.context.support.TestBean ) ; MockServletContext org.springframework.web.context.support.MockServletContext = new MockServletContext ( ) ; ServletContextAttributeExporter org.springframework.web.context.support.ServletContextAttributeExporter = new ServletContextAttributeExporter ( ) ; org.springframework.web.context.support.ServletContextAttributeExporter . setAttributes ( java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.web.context.support.ServletContextAttributeExporter . setServletContext ( org.springframework.web.context.support.MockServletContext ) ; assertEquals ( STRING , org.springframework.web.context.support.MockServletContext . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.context.support.TestBean , org.springframework.web.context.support.MockServletContext . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.web.context.support.MockServletContext = new MockServletContext ( STRING ) ; ServletContextResourceLoader org.springframework.web.context.support.ServletContextResourceLoader = new ServletContextResourceLoader ( org.springframework.web.context.support.MockServletContext ) ; assertTrue ( org.springframework.web.context.support.ServletContextResourceLoader . getResource ( STRING ) . exists ( ) ) ; assertTrue ( org.springframework.web.context.support.ServletContextResourceLoader . getResource ( STRING ) . exists ( ) ) ; assertTrue ( org.springframework.web.context.support.ServletContextResourceLoader . getResource ( STRING ) . exists ( ) ) ; assertTrue ( org.springframework.web.context.support.ServletContextResourceLoader . getResource ( STRING ) . exists ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { final java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; MockServletContext org.springframework.web.context.support.MockServletContext = new MockServletContext ( STRING ) { @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return java.util.Set<java.lang.String> ; } return null ; } } ; ServletContextResourcePatternResolver org.springframework.web.context.support.ServletContextResourcePatternResolver = new ServletContextResourcePatternResolver ( org.springframework.web.context.support.MockServletContext ) ; Resource [] org.springframework.web.context.support.Resource[] = org.springframework.web.context.support.ServletContextResourcePatternResolver . getResources ( STRING ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( Resource org.springframework.web.context.support.Resource : org.springframework.web.context.support.Resource[] ) { java.util.Set<java.lang.String> . boolean ( ( ( ServletContextResource ) org.springframework.web.context.support.Resource ) . getPath ( ) ) ; } assertEquals ( NUMBER , java.util.Set<java.lang.String> . int ( ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return java.util.Set<java.lang.String> ; } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { final java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; MockServletContext org.springframework.web.context.support.MockServletContext = new MockServletContext ( STRING ) { @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return java.util.Set<java.lang.String> ; } if ( STRING . boolean ( java.lang.String ) ) { return java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ; } if ( STRING . boolean ( java.lang.String ) ) { return java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ; } return null ; } } ; ServletContextResourcePatternResolver org.springframework.web.context.support.ServletContextResourcePatternResolver = new ServletContextResourcePatternResolver ( org.springframework.web.context.support.MockServletContext ) ; Resource [] org.springframework.web.context.support.Resource[] = org.springframework.web.context.support.ServletContextResourcePatternResolver . getResources ( STRING STRING ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( Resource org.springframework.web.context.support.Resource : org.springframework.web.context.support.Resource[] ) { java.util.Set<java.lang.String> . boolean ( ( ( ServletContextResource ) org.springframework.web.context.support.Resource ) . getPath ( ) ) ; } assertEquals ( NUMBER , java.util.Set<java.lang.String> . int ( ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return java.util.Set<java.lang.String> ; } if ( STRING . boolean ( java.lang.String ) ) { return java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ; } if ( STRING . boolean ( java.lang.String ) ) { return java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { final java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; final java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; MockServletContext org.springframework.web.context.support.MockServletContext = new MockServletContext ( STRING ) { @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return java.util.Set<java.lang.String> ; } if ( STRING . boolean ( java.lang.String ) ) { return java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ; } if ( STRING . boolean ( java.lang.String ) ) { return java.util.Set<java.lang.String> ; } if ( STRING . boolean ( java.lang.String ) ) { return java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ; } return null ; } } ; ServletContextResourcePatternResolver org.springframework.web.context.support.ServletContextResourcePatternResolver = new ServletContextResourcePatternResolver ( org.springframework.web.context.support.MockServletContext ) ; Resource [] org.springframework.web.context.support.Resource[] = org.springframework.web.context.support.ServletContextResourcePatternResolver . getResources ( STRING STRING ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( Resource org.springframework.web.context.support.Resource : org.springframework.web.context.support.Resource[] ) { java.util.Set<java.lang.String> . boolean ( ( ( ServletContextResource ) org.springframework.web.context.support.Resource ) . getPath ( ) ) ; } assertEquals ( NUMBER , java.util.Set<java.lang.String> . int ( ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return java.util.Set<java.lang.String> ; } if ( STRING . boolean ( java.lang.String ) ) { return java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ; } if ( STRING . boolean ( java.lang.String ) ) { return java.util.Set<java.lang.String> ; } if ( STRING . boolean ( java.lang.String ) ) { return java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { final java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; MockServletContext org.springframework.web.context.support.MockServletContext = new MockServletContext ( STRING ) { @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return java.util.Set<java.lang.String> ; } return null ; } } ; ServletContextResourcePatternResolver org.springframework.web.context.support.ServletContextResourcePatternResolver = new ServletContextResourcePatternResolver ( org.springframework.web.context.support.MockServletContext ) ; Resource [] org.springframework.web.context.support.Resource[] = org.springframework.web.context.support.ServletContextResourcePatternResolver . getResources ( STRING ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( Resource org.springframework.web.context.support.Resource : org.springframework.web.context.support.Resource[] ) { java.util.Set<java.lang.String> . boolean ( ( ( ServletContextResource ) org.springframework.web.context.support.Resource ) . getPath ( ) ) ; } assertEquals ( NUMBER , java.util.Set<java.lang.String> . int ( ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return java.util.Set<java.lang.String> ; } return null ; }  <METHOD_END>
