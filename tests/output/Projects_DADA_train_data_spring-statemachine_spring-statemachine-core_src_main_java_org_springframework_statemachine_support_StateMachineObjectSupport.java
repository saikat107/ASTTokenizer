<METHOD_START> @ java.lang.Override protected void void ( ) { super. doStart ( ) ; if ( ! boolean ) { try { org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . setBeanFactory ( getBeanFactory ( ) ) ; org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . afterPropertiesSet ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.support.Log . error ( STRING , java.lang.Exception ) ; } finally { boolean = true ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected org.springframework.statemachine.support.StateMachineEventPublisher org.springframework.statemachine.support.StateMachineEventPublisher ( ) { if( org.springframework.statemachine.support.StateMachineEventPublisher == null && getBeanFactory ( ) != null ) { if( org.springframework.statemachine.support.Log . isTraceEnabled ( ) ) { org.springframework.statemachine.support.Log . trace ( STRING + getBeanFactory ( ) ) ; } org.springframework.statemachine.support.StateMachineEventPublisher = StateMachineContextUtils . getEventPublisher ( getBeanFactory ( ) ) ; } return org.springframework.statemachine.support.StateMachineEventPublisher ; }  <METHOD_END>
<METHOD_START> public void void ( StateMachineEventPublisher org.springframework.statemachine.support.StateMachineEventPublisher ) { Assert . notNull ( org.springframework.statemachine.support.StateMachineEventPublisher , STRING ) ; this . org.springframework.statemachine.support.StateMachineEventPublisher = org.springframework.statemachine.support.StateMachineEventPublisher ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected org.springframework.statemachine.support.CompositeStateMachineListener<S,E> < S , E > org.springframework.statemachine.support.CompositeStateMachineListener<S,E> ( ) { return org.springframework.statemachine.support.CompositeStateMachineListener<S,E> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.statemachine.support.CompositeStateMachineMonitor<S,E> < S , E > org.springframework.statemachine.support.CompositeStateMachineMonitor<S,E> ( ) { return org.springframework.statemachine.support.CompositeStateMachineMonitor<S,E> ; }  <METHOD_END>
<METHOD_START> protected void void ( StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> ) { try { org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnStateChanged ( java.lang.String ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnStateChanged ( org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) . getId ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateChanged ( org.springframework.statemachine.support.StateContext<S,E> . getSource ( ) , org.springframework.statemachine.support.StateContext<S,E> . getTarget ( ) ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateContext ( org.springframework.statemachine.support.StateContext<S,E> ) ; if ( boolean ) { StateMachineEventPublisher org.springframework.statemachine.support.StateMachineEventPublisher = org.springframework.statemachine.support.StateMachineEventPublisher ( ) ; if ( org.springframework.statemachine.support.StateMachineEventPublisher != null ) { org.springframework.statemachine.support.StateMachineEventPublisher . publishStateChanged ( this , org.springframework.statemachine.support.StateContext<S,E> . getSource ( ) , org.springframework.statemachine.support.StateContext<S,E> . getTarget ( ) ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.support.Log . warn ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> ) { try { org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnStateEntry ( java.lang.String ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnStateEntry ( org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) . getId ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateEntered ( org.springframework.statemachine.support.StateContext<S,E> . getTarget ( ) ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateContext ( org.springframework.statemachine.support.StateContext<S,E> ) ; if ( boolean ) { StateMachineEventPublisher org.springframework.statemachine.support.StateMachineEventPublisher = org.springframework.statemachine.support.StateMachineEventPublisher ( ) ; if ( org.springframework.statemachine.support.StateMachineEventPublisher != null ) { org.springframework.statemachine.support.StateMachineEventPublisher . publishStateEntered ( this , org.springframework.statemachine.support.StateContext<S,E> . getTarget ( ) ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.support.Log . warn ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> ) { try { org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnStateExit ( java.lang.String ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnStateExit ( org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) . getId ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateExited ( org.springframework.statemachine.support.StateContext<S,E> . getSource ( ) ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateContext ( org.springframework.statemachine.support.StateContext<S,E> ) ; if ( boolean ) { StateMachineEventPublisher org.springframework.statemachine.support.StateMachineEventPublisher = org.springframework.statemachine.support.StateMachineEventPublisher ( ) ; if ( org.springframework.statemachine.support.StateMachineEventPublisher != null ) { org.springframework.statemachine.support.StateMachineEventPublisher . publishStateExited ( this , org.springframework.statemachine.support.StateContext<S,E> . getSource ( ) ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.support.Log . warn ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> ) { try { org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnEventNotAccepted ( java.lang.String ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnEventNotAccepted ( org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) . getId ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . eventNotAccepted ( org.springframework.statemachine.support.StateContext<S,E> . getMessage ( ) ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateContext ( org.springframework.statemachine.support.StateContext<S,E> ) ; if ( boolean ) { StateMachineEventPublisher org.springframework.statemachine.support.StateMachineEventPublisher = org.springframework.statemachine.support.StateMachineEventPublisher ( ) ; if ( org.springframework.statemachine.support.StateMachineEventPublisher != null ) { org.springframework.statemachine.support.StateMachineEventPublisher . publishEventNotAccepted ( this , org.springframework.statemachine.support.StateContext<S,E> . getMessage ( ) ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.support.Log . warn ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> ) { try { org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnTransitionStart ( java.lang.String ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnTransitionStart ( org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) . getId ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . transitionStarted ( org.springframework.statemachine.support.StateContext<S,E> . getTransition ( ) ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateContext ( org.springframework.statemachine.support.StateContext<S,E> ) ; if ( boolean ) { StateMachineEventPublisher org.springframework.statemachine.support.StateMachineEventPublisher = org.springframework.statemachine.support.StateMachineEventPublisher ( ) ; if ( org.springframework.statemachine.support.StateMachineEventPublisher != null ) { org.springframework.statemachine.support.StateMachineEventPublisher . publishTransitionStart ( this , org.springframework.statemachine.support.StateContext<S,E> . getTransition ( ) ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.support.Log . warn ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> ) { try { org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnTransition ( java.lang.String ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnTransition ( org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) . getId ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . transition ( org.springframework.statemachine.support.StateContext<S,E> . getTransition ( ) ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateContext ( org.springframework.statemachine.support.StateContext<S,E> ) ; if ( boolean ) { StateMachineEventPublisher org.springframework.statemachine.support.StateMachineEventPublisher = org.springframework.statemachine.support.StateMachineEventPublisher ( ) ; if ( org.springframework.statemachine.support.StateMachineEventPublisher != null ) { org.springframework.statemachine.support.StateMachineEventPublisher . publishTransition ( this , org.springframework.statemachine.support.StateContext<S,E> . getTransition ( ) ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.support.Log . warn ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> ) { try { org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnTransitionEnd ( java.lang.String ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnTransitionEnd ( org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) . getId ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . transitionEnded ( org.springframework.statemachine.support.StateContext<S,E> . getTransition ( ) ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateContext ( org.springframework.statemachine.support.StateContext<S,E> ) ; if ( boolean ) { StateMachineEventPublisher org.springframework.statemachine.support.StateMachineEventPublisher = org.springframework.statemachine.support.StateMachineEventPublisher ( ) ; if ( org.springframework.statemachine.support.StateMachineEventPublisher != null ) { org.springframework.statemachine.support.StateMachineEventPublisher . publishTransitionEnd ( this , org.springframework.statemachine.support.StateContext<S,E> . getTransition ( ) ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.support.Log . warn ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> ) { try { org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnStateMachineStart ( java.lang.String ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnStateMachineStart ( org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) . getId ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateMachineStarted ( org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateContext ( org.springframework.statemachine.support.StateContext<S,E> ) ; if ( boolean ) { StateMachineEventPublisher org.springframework.statemachine.support.StateMachineEventPublisher = org.springframework.statemachine.support.StateMachineEventPublisher ( ) ; if ( org.springframework.statemachine.support.StateMachineEventPublisher != null ) { org.springframework.statemachine.support.StateMachineEventPublisher . publishStateMachineStart ( this , org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.support.Log . warn ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> ) { try { org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnStateMachineStop ( java.lang.String ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnStateMachineStop ( org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) . getId ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateMachineStopped ( org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateContext ( org.springframework.statemachine.support.StateContext<S,E> ) ; if ( boolean ) { StateMachineEventPublisher org.springframework.statemachine.support.StateMachineEventPublisher = org.springframework.statemachine.support.StateMachineEventPublisher ( ) ; if ( org.springframework.statemachine.support.StateMachineEventPublisher != null ) { org.springframework.statemachine.support.StateMachineEventPublisher . publishStateMachineStop ( this , org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.support.Log . warn ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> ) { try { org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnStateMachineError ( java.lang.String ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnStateMachineError ( org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) . getId ( ) , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateMachineError ( org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) , org.springframework.statemachine.support.StateContext<S,E> . getException ( ) ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateContext ( org.springframework.statemachine.support.StateContext<S,E> ) ; if ( boolean ) { StateMachineEventPublisher org.springframework.statemachine.support.StateMachineEventPublisher = org.springframework.statemachine.support.StateMachineEventPublisher ( ) ; if ( org.springframework.statemachine.support.StateMachineEventPublisher != null ) { org.springframework.statemachine.support.StateMachineEventPublisher . publishStateMachineError ( this , org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) , org.springframework.statemachine.support.StateContext<S,E> . getException ( ) ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.support.Log . warn ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> ) { try { org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnExtendedStateChanged ( java.lang.String ( ) , java.lang.Object , java.lang.Object , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.StateMachineHandlerCallHelper<S,E> . callOnExtendedStateChanged ( org.springframework.statemachine.support.StateContext<S,E> . getStateMachine ( ) . getId ( ) , java.lang.Object , java.lang.Object , org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . extendedStateChanged ( java.lang.Object , java.lang.Object ) ; org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateContext ( org.springframework.statemachine.support.StateContext<S,E> ) ; if ( boolean ) { StateMachineEventPublisher org.springframework.statemachine.support.StateMachineEventPublisher = org.springframework.statemachine.support.StateMachineEventPublisher ( ) ; if ( org.springframework.statemachine.support.StateMachineEventPublisher != null ) { org.springframework.statemachine.support.StateMachineEventPublisher . publishExtendedStateChanged ( this , java.lang.Object , java.lang.Object ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.support.Log . warn ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , long long ) { try { org.springframework.statemachine.support.CompositeStateMachineMonitor<S,E> . transition ( org.springframework.statemachine.support.StateMachine<S,E> , org.springframework.statemachine.support.Transition<S,E> , long ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.support.Log . warn ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , Action < S , E > org.springframework.statemachine.support.Action<S,E> , long long ) { try { org.springframework.statemachine.support.CompositeStateMachineMonitor<S,E> . action ( org.springframework.statemachine.support.StateMachine<S,E> , org.springframework.statemachine.support.Action<S,E> , long ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.support.Log . warn ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { }  <METHOD_END>
<METHOD_START> protected org.springframework.statemachine.support.StateMachineInterceptorList<S,E> < S , E > org.springframework.statemachine.support.StateMachineInterceptorList<S,E> ( ) { return org.springframework.statemachine.support.StateMachineInterceptorList<S,E> ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> < StateMachineInterceptor < S , E > > java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> ) { java.util.Collections . void ( java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> , new OrderComparator ( ) ) ; this . org.springframework.statemachine.support.StateMachineInterceptorList<S,E> . set ( java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < S , E > org.springframework.statemachine.support.State<S,E> , State < S , E > org.springframework.statemachine.support.State<S,E> ) { org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateChanged ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.State<S,E> ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < S , E > org.springframework.statemachine.support.State<S,E> ) { org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateEntered ( org.springframework.statemachine.support.State<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < S , E > org.springframework.statemachine.support.State<S,E> ) { org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateExited ( org.springframework.statemachine.support.State<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < E > org.springframework.statemachine.support.Message<E> ) { org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . eventNotAccepted ( org.springframework.statemachine.support.Message<E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < S , E > org.springframework.statemachine.support.Transition<S,E> ) { org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . transition ( org.springframework.statemachine.support.Transition<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < S , E > org.springframework.statemachine.support.Transition<S,E> ) { org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . transitionStarted ( org.springframework.statemachine.support.Transition<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < S , E > org.springframework.statemachine.support.Transition<S,E> ) { org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . transitionEnded ( org.springframework.statemachine.support.Transition<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> ) { org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateMachineStarted ( org.springframework.statemachine.support.StateMachine<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> ) { org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateMachineStopped ( org.springframework.statemachine.support.StateMachine<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateMachineError ( org.springframework.statemachine.support.StateMachine<S,E> , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . extendedStateChanged ( java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> ) { org.springframework.statemachine.support.CompositeStateMachineListener<S,E> . stateContext ( org.springframework.statemachine.support.StateContext<S,E> ) ; }  <METHOD_END>
