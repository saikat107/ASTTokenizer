<METHOD_START> @ Before public void void ( ) {}  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityOrderPropertiesUnitTests.CompositePK .class ) ; java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> = new java.util.LinkedList <> ( ) ; java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> . add ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ) ; java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> . add ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ) ; java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> . add ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ) ; final java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> = new java.util.LinkedList<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> <> ( ) ; org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . doWithProperties ( ( PropertyHandler < CassandraPersistentProperty > ) java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> :: add ) ; assertThat ( java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> ) . isEqualTo ( java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityOrderPropertiesUnitTests.CompositeKeyEntity .class ) ; java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> = new java.util.LinkedList <> ( ) ; java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> . add ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ) ; java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> . add ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ) ; java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> . add ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ) ; final java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> = new java.util.LinkedList<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> <> ( ) ; org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . doWithProperties ( ( PropertyHandler < CassandraPersistentProperty > ) java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> :: add ) ; assertThat ( java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> ) . isEqualTo ( java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { final int int = NUMBER ; int int = NUMBER ; int = int * int + ( ( java.lang.String == null ) ? NUMBER : java.lang.String . int ( ) ) ; int = int * int + ( ( java.lang.String == null ) ? NUMBER : java.lang.String . int ( ) ) ; int = int * int + ( ( java.lang.String == null ) ? NUMBER : java.lang.String . int ( ) ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) return true ; if ( java.lang.Object == null ) return false ; if ( java.lang.Class<? extends org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityOrderPropertiesUnitTests.CompositePK> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) return false ; org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityOrderPropertiesUnitTests.CompositePK org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityOrderPropertiesUnitTests.CompositePK = ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityOrderPropertiesUnitTests.CompositePK ) java.lang.Object ; if ( java.lang.String == null ) { if ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityOrderPropertiesUnitTests.CompositePK . java.lang.String != null ) return false ; } else if ( ! java.lang.String . boolean ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityOrderPropertiesUnitTests.CompositePK . java.lang.String ) ) return false ; if ( java.lang.String == null ) { if ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityOrderPropertiesUnitTests.CompositePK . java.lang.String != null ) return false ; } else if ( ! java.lang.String . boolean ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityOrderPropertiesUnitTests.CompositePK . java.lang.String ) ) return false ; if ( java.lang.String == null ) { if ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityOrderPropertiesUnitTests.CompositePK . java.lang.String != null ) return false ; } else if ( ! java.lang.String . boolean ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityOrderPropertiesUnitTests.CompositePK . java.lang.String ) ) return false ; return true ; }  <METHOD_END>
