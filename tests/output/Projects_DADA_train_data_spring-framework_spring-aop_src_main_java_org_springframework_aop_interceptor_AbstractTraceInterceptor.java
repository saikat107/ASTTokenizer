<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.aop.interceptor.Log = ( boolean ? null : LogFactory . getLog ( java.lang.Class<? extends org.springframework.aop.interceptor.AbstractTraceInterceptor> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.aop.interceptor.Log = LogFactory . getLog ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.interceptor.MethodInvocation ) throws java.lang.Throwable { Log org.springframework.aop.interceptor.Log = org.springframework.aop.interceptor.Log ( org.springframework.aop.interceptor.MethodInvocation ) ; if ( boolean ( org.springframework.aop.interceptor.MethodInvocation , org.springframework.aop.interceptor.Log ) ) { return java.lang.Object ( org.springframework.aop.interceptor.MethodInvocation , org.springframework.aop.interceptor.Log ) ; } else { return org.springframework.aop.interceptor.MethodInvocation . proceed ( ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.aop.interceptor.Log org.springframework.aop.interceptor.Log ( MethodInvocation org.springframework.aop.interceptor.MethodInvocation ) { if ( this . org.springframework.aop.interceptor.Log != null ) { return this . org.springframework.aop.interceptor.Log ; } else { java.lang.Object java.lang.Object = org.springframework.aop.interceptor.MethodInvocation . getThis ( ) ; return LogFactory . getLog ( java.lang.Class<?> ( java.lang.Object ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Object java.lang.Object ) { return ( this . boolean ? AopUtils . getTargetClass ( java.lang.Object ) : java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( MethodInvocation org.springframework.aop.interceptor.MethodInvocation , Log org.springframework.aop.interceptor.Log ) { return boolean ( org.springframework.aop.interceptor.Log ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( Log org.springframework.aop.interceptor.Log ) { return org.springframework.aop.interceptor.Log . isTraceEnabled ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.interceptor.MethodInvocation , Log org.springframework.aop.interceptor.Log ) throws java.lang.Throwable ;  <METHOD_END>
