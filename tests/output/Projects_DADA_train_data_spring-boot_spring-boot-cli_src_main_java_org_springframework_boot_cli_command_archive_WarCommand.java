<METHOD_START> public void ( ) { super( STRING , STRING + STRING , new org.springframework.boot.cli.command.archive.WarCommand.WarOptionHandler ( ) ); }  <METHOD_END>
<METHOD_START> void ( ) { super( STRING , new Layouts . Layouts ( ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.cli.command.archive.LibraryScope org.springframework.boot.cli.command.archive.LibraryScope ( java.io.File java.io.File ) { java.lang.String java.lang.String = java.io.File . java.lang.String ( ) ; if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { return LibraryScope . PROVIDED ; } return LibraryScope . COMPILE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( JarWriter org.springframework.boot.cli.command.archive.JarWriter ) throws java.io.IOException { addClass ( org.springframework.boot.cli.command.archive.JarWriter , null , STRING + STRING ) ; super. addCliClasses ( org.springframework.boot.cli.command.archive.JarWriter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( JarWriter org.springframework.boot.cli.command.archive.JarWriter , ResourceMatcher . ResourceMatcher ResourceMatcher.MatchedResource ) throws java.io.IOException { org.springframework.boot.cli.command.archive.JarWriter . writeEntry ( getLayout ( ) . getClassesLocation ( ) + ResourceMatcher.MatchedResource . getName ( ) , new java.io.FileInputStream ( ResourceMatcher.MatchedResource . getFile ( ) ) ) ; }  <METHOD_END>
