<METHOD_START> public void ( S S , PseudoState < S , E > org.springframework.statemachine.state.PseudoState<S,E> ) { this( S , null , null , null , org.springframework.statemachine.state.PseudoState<S,E> ); }  <METHOD_END>
<METHOD_START> public void ( S S , java.util.Collection<E> < E > java.util.Collection<E> ) { this( S , java.util.Collection<E> , null , null ); }  <METHOD_END>
<METHOD_START> public void ( S S , java.util.Collection<E> < E > java.util.Collection<E> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> ) { this( S , java.util.Collection<E> , java.util.Collection<> , java.util.Collection<> , null ); }  <METHOD_END>
<METHOD_START> public void ( S S , java.util.Collection<E> < E > java.util.Collection<E> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> , PseudoState < S , E > org.springframework.statemachine.state.PseudoState<S,E> ) { this( S , java.util.Collection<E> , java.util.Collection<> , java.util.Collection<> , org.springframework.statemachine.state.PseudoState<S,E> , null , null ); }  <METHOD_END>
<METHOD_START> public void ( S S , java.util.Collection<E> < E > java.util.Collection<E> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> , PseudoState < S , E > org.springframework.statemachine.state.PseudoState<S,E> , StateMachine < S , E > org.springframework.statemachine.state.StateMachine<S,E> ) { this( S , java.util.Collection<E> , java.util.Collection<> , java.util.Collection<> , org.springframework.statemachine.state.PseudoState<S,E> , null , org.springframework.statemachine.state.StateMachine<S,E> ); }  <METHOD_END>
<METHOD_START> public void ( S S , java.util.Collection<E> < E > java.util.Collection<E> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> , PseudoState < S , E > org.springframework.statemachine.state.PseudoState<S,E> , java.util.Collection<org.springframework.statemachine.state.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.state.Region<S,E>> ) { this( S , java.util.Collection<E> , java.util.Collection<> , java.util.Collection<> , org.springframework.statemachine.state.PseudoState<S,E> , java.util.Collection<org.springframework.statemachine.state.Region<S,E>> , null ); }  <METHOD_END>
<METHOD_START> public void ( S S , java.util.Collection<E> < E > java.util.Collection<E> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> , PseudoState < S , E > org.springframework.statemachine.state.PseudoState<S,E> , java.util.Collection<org.springframework.statemachine.state.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.state.Region<S,E>> , StateMachine < S , E > org.springframework.statemachine.state.StateMachine<S,E> ) { this( S , java.util.Collection<E> , java.util.Collection<> , java.util.Collection<> , null , org.springframework.statemachine.state.PseudoState<S,E> , java.util.Collection<org.springframework.statemachine.state.Region<S,E>> , org.springframework.statemachine.state.StateMachine<S,E> ); }  <METHOD_END>
<METHOD_START> public void ( S S , java.util.Collection<E> < E > java.util.Collection<E> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> , PseudoState < S , E > org.springframework.statemachine.state.PseudoState<S,E> , java.util.Collection<org.springframework.statemachine.state.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.state.Region<S,E>> , StateMachine < S , E > org.springframework.statemachine.state.StateMachine<S,E> ) { this . S = S ; this . java.util.Collection<E> = java.util.Collection<E> != null ? java.util.Collection<E> : java.util.Collections .< E > java.util.Set<E> ( ) ; this . java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> = java.util.Collection<> != null ? java.util.Collection<> : java.util.Collections .< Action < S , E > > java.util.Set<org.springframework.statemachine.state.Action<S,E>> ( ) ; this . java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> = java.util.Collection<> != null ? java.util.Collection<> : java.util.Collections .< Action < S , E > > java.util.Set<org.springframework.statemachine.state.Action<S,E>> ( ) ; this . java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> = java.util.Collection<> != null ? java.util.Collection<> : java.util.Collections .< Action < S , E > > java.util.Set<org.springframework.statemachine.state.Action<S,E>> ( ) ; this . org.springframework.statemachine.state.PseudoState<S,E> = org.springframework.statemachine.state.PseudoState<S,E> ; if ( java.util.Collection<org.springframework.statemachine.state.Region<S,E>> != null ) { this . java.util.Collection<org.springframework.statemachine.state.Region<S,E>> . addAll ( java.util.Collection<org.springframework.statemachine.state.Region<S,E>> ) ; } this . org.springframework.statemachine.state.StateMachine<S,E> = org.springframework.statemachine.state.StateMachine<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < E > org.springframework.statemachine.state.Message<E> ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < E > org.springframework.statemachine.state.Message<E> ) { return java.util.Collection<E> . boolean ( org.springframework.statemachine.state.Message<E> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { void ( ) ; org.springframework.statemachine.state.CompositeStateListener<S,E> . onExit ( org.springframework.statemachine.state.StateContext<S,E> ) ; for ( Trigger < S , E > org.springframework.statemachine.state.Trigger<S,E> : java.util.List<org.springframework.statemachine.state.Trigger<S,E>> ) { org.springframework.statemachine.state.Trigger<S,E> . disarm ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { org.springframework.statemachine.state.CompositeStateListener<S,E> . onEntry ( org.springframework.statemachine.state.StateContext<S,E> ) ; for ( Trigger < S , E > org.springframework.statemachine.state.Trigger<S,E> : java.util.List<org.springframework.statemachine.state.Trigger<S,E>> ) { org.springframework.statemachine.state.Trigger<S,E> . arm ( ) ; } void ( org.springframework.statemachine.state.StateContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public S S ( ) { return S ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public abstract java.util.Collection<S> < S > java.util.Collection<S> ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public abstract java.util.Collection<org.springframework.statemachine.state.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.state.State<S,E>> ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.state.PseudoState<S,E> < S , E > org.springframework.statemachine.state.PseudoState<S,E> ( ) { return org.springframework.statemachine.state.PseudoState<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<E> < E > java.util.Collection<E> ( ) { return java.util.Collection<E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> ( ) { return java.util.Collection<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> ( ) { return java.util.Collection<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! java.util.Collection<org.springframework.statemachine.state.Region<S,E>> . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return java.util.Collection<org.springframework.statemachine.state.Region<S,E>> . size ( ) > NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! boolean ( ) && ! boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.statemachine.state.StateMachine<S,E> != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateListener < S , E > org.springframework.statemachine.state.StateListener<S,E> ) { org.springframework.statemachine.state.CompositeStateListener<S,E> . register ( org.springframework.statemachine.state.StateListener<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateListener < S , E > org.springframework.statemachine.state.StateListener<S,E> ) { org.springframework.statemachine.state.CompositeStateListener<S,E> . unregister ( org.springframework.statemachine.state.StateListener<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ActionListener < S , E > org.springframework.statemachine.state.ActionListener<S,E> ) { synchronized ( this ) { if ( this . org.springframework.statemachine.state.CompositeActionListener<S,E> == null ) { this . org.springframework.statemachine.state.CompositeActionListener<S,E> = new CompositeActionListener <> ( ) ; } this . org.springframework.statemachine.state.CompositeActionListener<S,E> . register ( org.springframework.statemachine.state.ActionListener<S,E> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ActionListener < S , E > org.springframework.statemachine.state.ActionListener<S,E> ) { synchronized ( this ) { if ( this . org.springframework.statemachine.state.CompositeActionListener<S,E> != null ) { this . org.springframework.statemachine.state.CompositeActionListener<S,E> . unregister ( org.springframework.statemachine.state.ActionListener<S,E> ) ; } } }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.state.StateMachine<S,E> < S , E > org.springframework.statemachine.state.StateMachine<S,E> ( ) { return org.springframework.statemachine.state.StateMachine<S,E> ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.statemachine.state.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.state.Region<S,E>> ( ) { return java.util.Collection<org.springframework.statemachine.state.Region<S,E>> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.statemachine.state.Trigger<S,E>> < Trigger < S , E > > java.util.List<org.springframework.statemachine.state.Trigger<S,E>> ) { if ( java.util.List<org.springframework.statemachine.state.Trigger<S,E>> != null ) { this . java.util.List<org.springframework.statemachine.state.Trigger<S,E>> = java.util.List<org.springframework.statemachine.state.Trigger<S,E>> ; } else { this . java.util.List<org.springframework.statemachine.state.Trigger<S,E>> . clear ( ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.statemachine.state.Trigger<S,E>> < Trigger < S , E > > java.util.List<org.springframework.statemachine.state.Trigger<S,E>> ( ) { return java.util.List<org.springframework.statemachine.state.Trigger<S,E>> ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { for ( java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> : java.util.List<java.util.concurrent.ScheduledFuture<?>> ) { java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; } java.util.List<java.util.concurrent.ScheduledFuture<?>> . void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { for ( Action < S , E > org.springframework.statemachine.state.Action<S,E> : java.util.Collection<> ) { java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> = java.util.concurrent.ScheduledFuture<?> ( org.springframework.statemachine.state.Action<S,E> , org.springframework.statemachine.state.StateContext<S,E> ) ; if ( java.util.concurrent.ScheduledFuture<> != null ) { java.util.List<java.util.concurrent.ScheduledFuture<?>> . boolean ( java.util.concurrent.ScheduledFuture<> ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( Action < S , E > org.springframework.statemachine.state.Action<S,E> , StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { long long = java.lang.System . long ( ) ; org.springframework.statemachine.state.Action<S,E> . execute ( org.springframework.statemachine.state.StateContext<S,E> ) ; if ( this . org.springframework.statemachine.state.CompositeActionListener<S,E> != null ) { try { this . org.springframework.statemachine.state.CompositeActionListener<S,E> . onExecute ( org.springframework.statemachine.state.StateContext<S,E> . getStateMachine ( ) , org.springframework.statemachine.state.Action<S,E> , java.lang.System . long ( ) - long ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.state.Log . warn ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> protected java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> ( final Action < S , E > org.springframework.statemachine.state.Action<S,E> , final StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { TaskScheduler org.springframework.statemachine.state.TaskScheduler = getTaskScheduler ( ) ; if ( org.springframework.statemachine.state.TaskScheduler == null ) { org.springframework.statemachine.state.Log . error ( STRING + org.springframework.statemachine.state.Action<S,E> + STRING ) ; return null ; } java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> = org.springframework.statemachine.state.TaskScheduler . schedule ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { void ( org.springframework.statemachine.state.Action<S,E> , org.springframework.statemachine.state.StateContext<S,E> ) ; } } , new java.util.Date ( ) ) ; return java.util.concurrent.ScheduledFuture<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( org.springframework.statemachine.state.Action<S,E> , org.springframework.statemachine.state.StateContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + S + STRING + org.springframework.statemachine.state.PseudoState<S,E> + STRING + java.util.Collection<E> + STRING + java.util.Collection<> + STRING + java.util.Collection<> + STRING + java.util.Collection<> + STRING + java.util.Collection<org.springframework.statemachine.state.Region<S,E>> + STRING + org.springframework.statemachine.state.StateMachine<S,E> + STRING ; }  <METHOD_END>
