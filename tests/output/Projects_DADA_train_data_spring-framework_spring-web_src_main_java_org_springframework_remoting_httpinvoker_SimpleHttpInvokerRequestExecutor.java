<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream )			throws java.io.IOException , java.lang.ClassNotFoundException { java.net.HttpURLConnection java.net.HttpURLConnection = java.net.HttpURLConnection ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) ; void ( java.net.HttpURLConnection , java.io.ByteArrayOutputStream . int ( ) ) ; void ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.net.HttpURLConnection , java.io.ByteArrayOutputStream ) ; void ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.net.HttpURLConnection ) ; java.io.InputStream java.io.InputStream = java.io.InputStream ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.net.HttpURLConnection ) ; return readRemoteInvocationResult ( java.io.InputStream , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getCodebaseUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.net.HttpURLConnection java.net.HttpURLConnection ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) throws java.io.IOException { java.net.URLConnection java.net.URLConnection = new java.net.URL ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getServiceUrl ( ) ) . java.net.URLConnection ( ) ; if ( ! ( java.net.URLConnection instanceof java.net.HttpURLConnection ) ) { throw new java.io.IOException ( STRING + org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getServiceUrl ( ) + STRING ) ; } return ( java.net.HttpURLConnection ) java.net.URLConnection ; }  <METHOD_END>
<METHOD_START> protected void void ( java.net.HttpURLConnection java.net.HttpURLConnection , int int ) throws java.io.IOException { if ( this . int >= NUMBER ) { java.net.HttpURLConnection . void ( this . int ) ; } if ( this . int >= NUMBER ) { java.net.HttpURLConnection . void ( this . int ) ; } java.net.HttpURLConnection . void ( true ) ; java.net.HttpURLConnection . void ( HTTP_METHOD_POST ) ; java.net.HttpURLConnection . void ( HTTP_HEADER_CONTENT_TYPE , getContentType ( ) ) ; java.net.HttpURLConnection . void ( HTTP_HEADER_CONTENT_LENGTH , java.lang.Integer . java.lang.String ( int ) ) ; LocaleContext org.springframework.remoting.httpinvoker.LocaleContext = LocaleContextHolder . getLocaleContext ( ) ; if ( org.springframework.remoting.httpinvoker.LocaleContext != null ) { java.util.Locale java.util.Locale = org.springframework.remoting.httpinvoker.LocaleContext . getLocale ( ) ; if ( java.util.Locale != null ) { java.net.HttpURLConnection . void ( HTTP_HEADER_ACCEPT_LANGUAGE , StringUtils . toLanguageTag ( java.util.Locale ) ) ; } } if ( isAcceptGzipEncoding ( ) ) { java.net.HttpURLConnection . void ( HTTP_HEADER_ACCEPT_ENCODING , ENCODING_GZIP ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.net.HttpURLConnection java.net.HttpURLConnection , java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream )			throws java.io.IOException { java.io.ByteArrayOutputStream . void ( java.net.HttpURLConnection . java.io.OutputStream ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.net.HttpURLConnection java.net.HttpURLConnection )			throws java.io.IOException { if ( java.net.HttpURLConnection . int ( ) >= NUMBER ) { throw new java.io.IOException ( STRING + java.net.HttpURLConnection . int ( ) + STRING + java.net.HttpURLConnection . java.lang.String ( ) + STRING ) ; } }  <METHOD_END>
<METHOD_START> protected java.io.InputStream java.io.InputStream ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.net.HttpURLConnection java.net.HttpURLConnection )			throws java.io.IOException { if ( boolean ( java.net.HttpURLConnection ) ) { return new java.util.zip.GZIPInputStream ( java.net.HttpURLConnection . java.io.InputStream ( ) ) ; } else { return java.net.HttpURLConnection . java.io.InputStream ( ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.net.HttpURLConnection java.net.HttpURLConnection ) { java.lang.String java.lang.String = java.net.HttpURLConnection . java.lang.String ( HTTP_HEADER_CONTENT_ENCODING ) ; return ( java.lang.String != null && java.lang.String . java.lang.String ( ) . boolean ( ENCODING_GZIP ) ) ; }  <METHOD_END>
