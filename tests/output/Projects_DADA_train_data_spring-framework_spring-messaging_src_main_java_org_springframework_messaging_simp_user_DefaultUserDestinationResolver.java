<METHOD_START> public void ( SimpUserRegistry org.springframework.messaging.simp.user.SimpUserRegistry ) { Assert . notNull ( org.springframework.messaging.simp.user.SimpUserRegistry , STRING ) ; this . org.springframework.messaging.simp.user.SimpUserRegistry = org.springframework.messaging.simp.user.SimpUserRegistry ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.user.SimpUserRegistry org.springframework.messaging.simp.user.SimpUserRegistry ( ) { return this . org.springframework.messaging.simp.user.SimpUserRegistry ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String . boolean ( STRING ) ? java.lang.String : java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( PathMatcher org.springframework.messaging.simp.user.PathMatcher ) { if ( org.springframework.messaging.simp.user.PathMatcher != null ) { this . boolean = org.springframework.messaging.simp.user.PathMatcher . combine ( STRING , STRING ) . equals ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.simp.user.UserDestinationResult org.springframework.messaging.simp.user.UserDestinationResult ( Message < ? > org.springframework.messaging.simp.user.Message<?> ) { java.lang.String java.lang.String = SimpMessageHeaderAccessor . getDestination ( org.springframework.messaging.simp.user.Message<> . getHeaders ( ) ) ; org.springframework.messaging.simp.user.DefaultUserDestinationResolver.ParseResult org.springframework.messaging.simp.user.DefaultUserDestinationResolver.ParseResult = org.springframework.messaging.simp.user.DefaultUserDestinationResolver.ParseResult ( org.springframework.messaging.simp.user.Message<> ) ; if ( org.springframework.messaging.simp.user.DefaultUserDestinationResolver.ParseResult == null ) { return null ; } java.lang.String java.lang.String = org.springframework.messaging.simp.user.DefaultUserDestinationResolver.ParseResult . java.lang.String ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : org.springframework.messaging.simp.user.DefaultUserDestinationResolver.ParseResult . java.util.Set<java.lang.String> ( ) ) { java.lang.String java.lang.String = org.springframework.messaging.simp.user.DefaultUserDestinationResolver.ParseResult . java.lang.String ( ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String , java.lang.String , java.lang.String , java.lang.String ) ; if ( java.lang.String != null ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } java.lang.String java.lang.String = org.springframework.messaging.simp.user.DefaultUserDestinationResolver.ParseResult . java.lang.String ( ) ; return new UserDestinationResult ( java.lang.String , java.util.Set<java.lang.String> , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.user.DefaultUserDestinationResolver.ParseResult org.springframework.messaging.simp.user.DefaultUserDestinationResolver.ParseResult ( Message < ? > org.springframework.messaging.simp.user.Message<?> ) { MessageHeaders org.springframework.messaging.simp.user.MessageHeaders = org.springframework.messaging.simp.user.Message<> . getHeaders ( ) ; java.lang.String java.lang.String = SimpMessageHeaderAccessor . getDestination ( org.springframework.messaging.simp.user.MessageHeaders ) ; if ( java.lang.String == null || ! boolean ( java.lang.String , this . java.lang.String ) ) { return null ; } SimpMessageType org.springframework.messaging.simp.user.SimpMessageType = SimpMessageHeaderAccessor . getMessageType ( org.springframework.messaging.simp.user.MessageHeaders ) ; java.security.Principal java.security.Principal = SimpMessageHeaderAccessor . getUser ( org.springframework.messaging.simp.user.MessageHeaders ) ; java.lang.String java.lang.String = SimpMessageHeaderAccessor . getSessionId ( org.springframework.messaging.simp.user.MessageHeaders ) ; if ( SimpMessageType . SUBSCRIBE . equals ( org.springframework.messaging.simp.user.SimpMessageType ) || SimpMessageType . UNSUBSCRIBE . equals ( org.springframework.messaging.simp.user.SimpMessageType ) ) { if ( java.lang.String == null ) { org.springframework.messaging.simp.user.Log . error ( STRING + org.springframework.messaging.simp.user.Message<> ) ; return null ; } int int = this . java.lang.String . int ( ) - NUMBER ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int ) ; if ( ! this . boolean ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } java.lang.String java.lang.String = ( java.security.Principal != null ? java.security.Principal . java.lang.String ( ) : null ) ; return new org.springframework.messaging.simp.user.DefaultUserDestinationResolver.ParseResult ( java.lang.String , java.lang.String , java.util.Collections . java.util.Set<java.lang.String> ( java.lang.String ) , java.lang.String ) ; } else if ( SimpMessageType . MESSAGE . equals ( org.springframework.messaging.simp.user.SimpMessageType ) ) { int int = this . java.lang.String . int ( ) ; int int = java.lang.String . int ( '/' , int ) ; Assert . isTrue ( int > NUMBER , STRING ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int ) ; java.lang.String java.lang.String = this . java.lang.String . java.lang.String ( NUMBER , int - NUMBER ) + java.lang.String ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int , int ) ; java.lang.String = StringUtils . replace ( java.lang.String , STRING , STRING ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ; if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String = null ; java.util.Set<java.lang.String> = java.util.Collections . java.util.Set<java.lang.String> ( java.lang.String ) ; } else { SimpUser org.springframework.messaging.simp.user.SimpUser = this . org.springframework.messaging.simp.user.SimpUserRegistry . getUser ( java.lang.String ) ; if ( org.springframework.messaging.simp.user.SimpUser != null ) { if ( org.springframework.messaging.simp.user.SimpUser . getSession ( java.lang.String ) != null ) { java.util.Set<java.lang.String> = java.util.Collections . java.util.Set<java.lang.String> ( java.lang.String ) ; } else { java.util.Set<org.springframework.messaging.simp.user.SimpSession> < SimpSession > java.util.Set<org.springframework.messaging.simp.user.SimpSession> = org.springframework.messaging.simp.user.SimpUser . getSessions ( ) ; java.util.Set<java.lang.String> = new java.util.HashSet <> ( java.util.Set<org.springframework.messaging.simp.user.SimpSession> . size ( ) ) ; for ( SimpSession org.springframework.messaging.simp.user.SimpSession : java.util.Set<org.springframework.messaging.simp.user.SimpSession> ) { java.util.Set<java.lang.String> . boolean ( org.springframework.messaging.simp.user.SimpSession . getId ( ) ) ; } } } else { java.util.Set<java.lang.String> = java.util.Collections . java.util.Set<java.lang.String> ( ) ; } } if ( ! this . boolean ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } return new org.springframework.messaging.simp.user.DefaultUserDestinationResolver.ParseResult ( java.lang.String , java.lang.String , java.util.Set<java.lang.String> , java.lang.String ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.lang.String . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.lang.String + STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.util.Set<java.lang.String> = java.util.Set<java.lang.String> ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return this . java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
