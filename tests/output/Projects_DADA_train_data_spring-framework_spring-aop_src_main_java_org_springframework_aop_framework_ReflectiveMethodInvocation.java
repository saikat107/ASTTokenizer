<METHOD_START> protected void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Class<?> < ? > java.lang.Class<?> , java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { this . java.lang.Object = java.lang.Object ; this . java.lang.Object = java.lang.Object ; this . java.lang.Class<?> = java.lang.Class<> ; this . java.lang.reflect.Method = BridgeMethodResolver . findBridgedMethod ( java.lang.reflect.Method ) ; this . java.lang.Object[] = AopProxyUtils . adaptArgumentsIfNecessary ( java.lang.reflect.Method , java.lang.Object[] ) ; this . java.util.List<?> = java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.reflect.AccessibleObject java.lang.reflect.AccessibleObject ( ) { return this . java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.reflect.Method java.lang.reflect.Method ( ) { return this . java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.Object [] java.lang.Object[] ( ) { return ( this . java.lang.Object[] != null ? this . java.lang.Object[] : new java.lang.Object [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object ... java.lang.Object[] ) { this . java.lang.Object[] = java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { if ( this . int == this . java.util.List<> . int ( ) - NUMBER ) { return java.lang.Object ( ) ; } java.lang.Object java.lang.Object = this . java.util.List<> . get ( ++ this . int ) ; if ( java.lang.Object instanceof InterceptorAndDynamicMethodMatcher ) { InterceptorAndDynamicMethodMatcher org.springframework.aop.framework.InterceptorAndDynamicMethodMatcher = ( InterceptorAndDynamicMethodMatcher ) java.lang.Object ; if ( dm . methodMatcher . matches ( this . java.lang.reflect.Method , this . java.lang.Class<> , this . java.lang.Object[] ) ) { return dm . interceptor . invoke ( this ) ; } else { return java.lang.Object ( ) ; } } else { return ( ( MethodInterceptor ) java.lang.Object ) . invoke ( this ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) java.lang.Throwable { return AopUtils . invokeJoinpointUsingReflection ( this . java.lang.Object , this . java.lang.reflect.Method , this . java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.framework.MethodInvocation org.springframework.aop.framework.MethodInvocation ( ) { java.lang.Object [] java.lang.Object[] = null ; if ( this . java.lang.Object[] != null ) { java.lang.Object[] = new java.lang.Object [ this . java.lang.Object[] . int ] ; java.lang.System . void ( this . java.lang.Object[] , NUMBER , java.lang.Object[] , NUMBER , this . java.lang.Object[] . int ) ; } return org.springframework.aop.framework.MethodInvocation ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.framework.MethodInvocation org.springframework.aop.framework.MethodInvocation ( java.lang.Object ... java.lang.Object[] ) { if ( this . java.util.Map<java.lang.String,java.lang.Object> == null ) { this . java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; } try { org.springframework.aop.framework.ReflectiveMethodInvocation org.springframework.aop.framework.ReflectiveMethodInvocation = ( org.springframework.aop.framework.ReflectiveMethodInvocation ) java.lang.Object ( ) ; org.springframework.aop.framework.ReflectiveMethodInvocation . java.lang.Object[] = java.lang.Object[] ; return org.springframework.aop.framework.ReflectiveMethodInvocation ; } catch ( java.lang.CloneNotSupportedException java.lang.CloneNotSupportedException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<? extends org.springframework.aop.framework.ReflectiveMethodInvocation> ( ) + STRING + java.lang.CloneNotSupportedException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( java.lang.Object != null ) { if ( this . java.util.Map<java.lang.String,java.lang.Object> == null ) { this . java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; } this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } else { if ( this . java.util.Map<java.lang.String,java.lang.Object> != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return ( this . java.util.Map<java.lang.String,java.lang.Object> != null ? this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) : null ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { if ( this . java.util.Map<java.lang.String,java.lang.Object> == null ) { this . java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; } return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( this . java.lang.reflect.Method ) . java.lang.StringBuilder ( STRING ) ; if ( this . java.lang.Object == null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) . java.lang.StringBuilder ( ']' ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
