<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( org.w3c.dom.Element org.w3c.dom.Element ) { java.lang.String java.lang.String = ( StringUtils . hasText ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) ? STRING : STRING ; return STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.String java.lang.String ) { return ! ( java.lang.String . boolean ( STRING ) ) && ! ( java.lang.String . boolean ( STRING ) ) && ! ( java.lang.String . boolean ( STRING ) ) && super. isEligibleAttribute ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( BeanDefinitionBuilder org.springframework.integration.ws.config.BeanDefinitionBuilder , org.w3c.dom.Element org.w3c.dom.Element ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.ws.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.ws.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } } else { if ( StringUtils . hasText ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } } if ( StringUtils . hasText ( java.lang.String ) || StringUtils . hasText ( java.lang.String ) ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { this . org.springframework.integration.ws.config.Log . warn ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.ws.config.ParserContext , BeanDefinitionBuilder org.springframework.integration.ws.config.BeanDefinitionBuilder ) { super. doParse ( org.w3c.dom.Element , org.springframework.integration.ws.config.ParserContext , org.springframework.integration.ws.config.BeanDefinitionBuilder ) ; IntegrationNamespaceUtils . configureHeaderMapper ( org.w3c.dom.Element , org.springframework.integration.ws.config.BeanDefinitionBuilder , org.springframework.integration.ws.config.ParserContext , DefaultSoapHeaderMapper .class , null ) ; }  <METHOD_END>
