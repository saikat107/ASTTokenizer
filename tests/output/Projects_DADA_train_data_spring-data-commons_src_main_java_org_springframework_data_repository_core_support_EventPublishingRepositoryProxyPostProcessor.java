<METHOD_START> @ java.lang.Override public void void ( ProxyFactory org.springframework.data.repository.core.support.ProxyFactory , RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation ) { org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod = org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod . org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod ( org.springframework.data.repository.core.support.RepositoryInformation . getDomainType ( ) ) ; if ( org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod == null ) { return; } org.springframework.data.repository.core.support.ProxyFactory . addAdvice ( new org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethodInterceptor ( org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod , org.springframework.data.repository.core.support.ApplicationEventPublisher ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.data.repository.core.support.MethodInvocation ) throws java.lang.Throwable { java.lang.Object java.lang.Object = org.springframework.data.repository.core.support.MethodInvocation . proceed ( ) ; if ( ! org.springframework.data.repository.core.support.MethodInvocation . getMethod ( ) . getName ( ) . equals ( STRING ) ) { return java.lang.Object ; } for ( java.lang.Object java.lang.Object : org.springframework.data.repository.core.support.MethodInvocation . getArguments ( ) ) { org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod . void ( java.lang.Object , org.springframework.data.repository.core.support.ApplicationEventPublisher ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod = java.util.Map<java.lang.Class<?>,org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod> . org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod ( java.lang.Class<> ) ; if ( org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod != null ) { return org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod . org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod ( ) ; } AnnotationDetectionMethodCallback < DomainEvents > org.springframework.data.repository.core.support.AnnotationDetectionMethodCallback<org.springframework.data.repository.core.support.DomainEvents> = new AnnotationDetectionMethodCallback <> ( DomainEvents .class ) ; ReflectionUtils . doWithMethods ( java.lang.Class<> , org.springframework.data.repository.core.support.AnnotationDetectionMethodCallback<org.springframework.data.repository.core.support.DomainEvents> ) ; AnnotationDetectionMethodCallback < AfterDomainEventPublication > org.springframework.data.repository.core.support.AnnotationDetectionMethodCallback<org.springframework.data.repository.core.support.AfterDomainEventPublication> = new AnnotationDetectionMethodCallback <> ( AfterDomainEventPublication .class ) ; ReflectionUtils . doWithMethods ( java.lang.Class<> , org.springframework.data.repository.core.support.AnnotationDetectionMethodCallback<org.springframework.data.repository.core.support.AfterDomainEventPublication> ) ; org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod = org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod ( org.springframework.data.repository.core.support.AnnotationDetectionMethodCallback<org.springframework.data.repository.core.support.DomainEvents> , org.springframework.data.repository.core.support.AnnotationDetectionMethodCallback<org.springframework.data.repository.core.support.AfterDomainEventPublication> ) ; java.util.Map<java.lang.Class<?>,org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod> . org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod ( java.lang.Class<> , org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod ) ; return org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod . org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object , ApplicationEventPublisher org.springframework.data.repository.core.support.ApplicationEventPublisher ) { if ( java.lang.Object == null ) { return; } for ( java.lang.Object java.lang.Object : java.util.Collection<java.lang.Object> ( java.lang.Object ) ) { for ( java.lang.Object java.lang.Object : java.util.Collection<java.lang.Object> ( ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.Object ) ) ) { org.springframework.data.repository.core.support.ApplicationEventPublisher . publishEvent ( java.lang.Object ) ; } } if ( java.lang.reflect.Method != null ) { ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod ( ) { return this == org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod . org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod ? null : this ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod ( AnnotationDetectionMethodCallback < ? > org.springframework.data.repository.core.support.AnnotationDetectionMethodCallback<?> , AnnotationDetectionMethodCallback < ? > org.springframework.data.repository.core.support.AnnotationDetectionMethodCallback<?> ) { if ( ! org.springframework.data.repository.core.support.AnnotationDetectionMethodCallback<> . hasFoundAnnotation ( ) ) { return org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod . org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod ; } java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.AnnotationDetectionMethodCallback<> . getMethod ( ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; return new org.springframework.data.repository.core.support.EventPublishingRepositoryProxyPostProcessor.EventPublishingMethod ( java.lang.reflect.Method , java.lang.reflect.Method ( org.springframework.data.repository.core.support.AnnotationDetectionMethodCallback<> ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.reflect.Method java.lang.reflect.Method ( AnnotationDetectionMethodCallback < ? > org.springframework.data.repository.core.support.AnnotationDetectionMethodCallback<?> ) { if ( ! org.springframework.data.repository.core.support.AnnotationDetectionMethodCallback<> . hasFoundAnnotation ( ) ) { return null ; } java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.AnnotationDetectionMethodCallback<> . getMethod ( ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; return java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return java.util.Collections . java.util.List<java.lang.Object> ( ) ; } if ( java.util.Collection .class . boolean ( java.lang.Object ) ) { return ( java.util.Collection<java.lang.Object> < java.lang.Object > ) java.lang.Object ; } return java.util.Collections . java.util.List<java.lang.Object> ( java.lang.Object ) ; }  <METHOD_END>
