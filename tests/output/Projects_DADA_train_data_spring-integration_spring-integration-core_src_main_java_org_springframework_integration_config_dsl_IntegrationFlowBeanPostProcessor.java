<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.config.dsl.BeanFactory ) throws org.springframework.integration.config.dsl.BeansException { Assert . isInstanceOf ( ConfigurableListableBeanFactory .class , org.springframework.integration.config.dsl.BeanFactory , STRING + STRING ) ; this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory = ( ConfigurableListableBeanFactory ) org.springframework.integration.config.dsl.BeanFactory ; this . org.springframework.integration.config.dsl.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; this . org.springframework.integration.config.dsl.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.integration.config.dsl.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.integration.config.dsl.BeansException { if ( java.lang.Object instanceof StandardIntegrationFlow ) { return java.lang.Object ( ( StandardIntegrationFlow ) java.lang.Object , java.lang.String ) ; } else if ( java.lang.Object instanceof IntegrationFlow ) { return java.lang.Object ( ( IntegrationFlow ) java.lang.Object , java.lang.String ) ; } if ( java.lang.Object instanceof IntegrationComponentSpec ) { void ( ( IntegrationComponentSpec < ? , ? > ) java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory . containsBean ( AbstractApplicationContext . APPLICATION_EVENT_MULTICASTER_BEAN_NAME ) ) { ApplicationEventMulticaster org.springframework.integration.config.dsl.ApplicationEventMulticaster = ( ApplicationEventMulticaster ) this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory . getBean ( AbstractApplicationContext . APPLICATION_EVENT_MULTICASTER_BEAN_NAME ) ; this . java.util.Set<org.springframework.integration.config.dsl.ApplicationListener<?>> . forEach ( org.springframework.integration.config.dsl.ApplicationEventMulticaster :: addApplicationListener ) ; } for ( java.lang.String java.lang.String : this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory . getBeanNamesForType ( IntegrationFlow .class ) ) { if ( this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory . containsBeanDefinition ( java.lang.String ) ) { java.lang.String java.lang.String = this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory . getBeanDefinition ( java.lang.String ) . getScope ( ) ; if ( StringUtils . hasText ( java.lang.String ) && ! BeanDefinition . SCOPE_SINGLETON . equals ( java.lang.String ) ) { throw new BeanCreationNotAllowedException ( java.lang.String , STRING + STRING + STRING + STRING ) ; } } } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( StandardIntegrationFlow org.springframework.integration.config.dsl.StandardIntegrationFlow , java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String + STRING ; int int = NUMBER ; int int = NUMBER ; boolean boolean = org.springframework.integration.config.dsl.StandardIntegrationFlow . isRegisterComponents ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList <> ( org.springframework.integration.config.dsl.StandardIntegrationFlow . getIntegrationComponents ( ) ) ; for ( int int = NUMBER ; int < java.util.List<java.lang.Object> . int ( ) ; int ++ ) { java.lang.Object java.lang.Object = java.util.List<java.lang.Object> . java.lang.Object ( int ) ; if ( java.lang.Object instanceof ConsumerEndpointSpec ) { ConsumerEndpointSpec < ? , ? > org.springframework.integration.config.dsl.ConsumerEndpointSpec<?,?> = ( ConsumerEndpointSpec < ? , ? > ) java.lang.Object ; MessageHandler org.springframework.integration.config.dsl.MessageHandler = org.springframework.integration.config.dsl.ConsumerEndpointSpec<,> . get ( ) . getT2 ( ) ; ConsumerEndpointFactoryBean org.springframework.integration.config.dsl.ConsumerEndpointFactoryBean = org.springframework.integration.config.dsl.ConsumerEndpointSpec<,> . get ( ) . getT1 ( ) ; java.lang.String java.lang.String = org.springframework.integration.config.dsl.ConsumerEndpointSpec<,> . getId ( ) ; java.util.Collection<?> < ? > java.util.Collection<?> = this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory . getBeansOfType ( org.springframework.integration.config.dsl.MessageHandler . getClass ( ) , false , false ) . values ( ) ; if ( ! java.util.Collection<> . boolean ( org.springframework.integration.config.dsl.MessageHandler ) ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.integration.config.dsl.MessageHandler ) ; java.lang.String [] java.lang.String[] = java.lang.String != null ? new java.lang.String [] { java.lang.String + IntegrationConfigUtils . HANDLER_ALIAS_SUFFIX } : null ; void ( org.springframework.integration.config.dsl.MessageHandler , java.lang.String , java.lang.String , boolean ) ; if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory . registerAlias ( java.lang.String , java.lang.String ) ; } } } java.lang.String java.lang.String = java.lang.String ; if ( java.lang.String == null ) { java.lang.String = java.lang.String ( org.springframework.integration.config.dsl.ConsumerEndpointFactoryBean ) ; } void ( org.springframework.integration.config.dsl.ConsumerEndpointFactoryBean , java.lang.String , java.lang.String , boolean ) ; java.util.List<java.lang.Object> . java.lang.Object ( int , org.springframework.integration.config.dsl.ConsumerEndpointFactoryBean ) ; } else { java.util.Collection<?> < ? > java.util.Collection<?> = this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory . getBeansOfType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , false , false ) . values ( ) ; if ( ! java.util.Collection<> . boolean ( java.lang.Object ) ) { if ( java.lang.Object instanceof AbstractMessageChannel ) { java.lang.String java.lang.String = ( ( AbstractMessageChannel ) java.lang.Object ) . getComponentName ( ) ; if ( java.lang.String == null ) { java.lang.String = java.lang.String + STRING + BeanFactoryUtils . GENERATED_BEAN_NAME_SEPARATOR + int ++ ; } void ( java.lang.Object , java.lang.String , java.lang.String , boolean ) ; } else if ( java.lang.Object instanceof MessageChannelReference ) { java.lang.String java.lang.String = ( ( MessageChannelReference ) java.lang.Object ) . getName ( ) ; if ( ! this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory . containsBean ( java.lang.String ) ) { DirectChannel org.springframework.integration.config.dsl.DirectChannel = new DirectChannel ( ) ; void ( org.springframework.integration.config.dsl.DirectChannel , java.lang.String , java.lang.String , boolean ) ; java.util.List<java.lang.Object> . java.lang.Object ( int , org.springframework.integration.config.dsl.DirectChannel ) ; } } else if ( java.lang.Object instanceof FixedSubscriberChannel ) { FixedSubscriberChannel org.springframework.integration.config.dsl.FixedSubscriberChannel = ( FixedSubscriberChannel ) java.lang.Object ; java.lang.String java.lang.String = org.springframework.integration.config.dsl.FixedSubscriberChannel . getComponentName ( ) ; if ( STRING . boolean ( java.lang.String ) ) { java.lang.String = java.lang.String + STRING + BeanFactoryUtils . GENERATED_BEAN_NAME_SEPARATOR + int ++ ; } void ( java.lang.Object , java.lang.String , java.lang.String , boolean ) ; } else if ( java.lang.Object instanceof SourcePollingChannelAdapterSpec ) { SourcePollingChannelAdapterSpec org.springframework.integration.config.dsl.SourcePollingChannelAdapterSpec = ( SourcePollingChannelAdapterSpec ) java.lang.Object ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = org.springframework.integration.config.dsl.SourcePollingChannelAdapterSpec . getComponentsToRegister ( ) ; if ( ! CollectionUtils . isEmpty ( java.util.Collection<java.lang.Object> ) ) { java.util.Collection<java.lang.Object> . java.util.stream.Stream<java.lang.Object> ( ) . java.util.stream.Stream<java.lang.Object> ( java.lang.Object -> ! this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory . getBeansOfType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , false , false ) . values ( ) . contains ( java.lang.Object ) ) . void ( java.lang.Object -> void ( java.lang.Object , java.lang.String ( java.lang.Object ) ) ) ; } SourcePollingChannelAdapterFactoryBean org.springframework.integration.config.dsl.SourcePollingChannelAdapterFactoryBean = org.springframework.integration.config.dsl.SourcePollingChannelAdapterSpec . get ( ) . getT1 ( ) ; java.lang.String java.lang.String = org.springframework.integration.config.dsl.SourcePollingChannelAdapterSpec . getId ( ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String = java.lang.String ( org.springframework.integration.config.dsl.SourcePollingChannelAdapterFactoryBean ) ; } void ( org.springframework.integration.config.dsl.SourcePollingChannelAdapterFactoryBean , java.lang.String , java.lang.String , boolean ) ; java.util.List<java.lang.Object> . java.lang.Object ( int , org.springframework.integration.config.dsl.SourcePollingChannelAdapterFactoryBean ) ; MessageSource < ? > org.springframework.integration.config.dsl.MessageSource<?> = org.springframework.integration.config.dsl.SourcePollingChannelAdapterSpec . get ( ) . getT2 ( ) ; if ( ! this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory . getBeansOfType ( org.springframework.integration.config.dsl.MessageSource<> . getClass ( ) , false , false ) . values ( ) . contains ( org.springframework.integration.config.dsl.MessageSource<> ) ) { java.lang.String java.lang.String = java.lang.String + STRING ; if ( org.springframework.integration.config.dsl.MessageSource<> instanceof NamedComponent && ( ( NamedComponent ) org.springframework.integration.config.dsl.MessageSource<> ) . getComponentName ( ) != null ) { java.lang.String = ( ( NamedComponent ) org.springframework.integration.config.dsl.MessageSource<> ) . getComponentName ( ) ; } void ( org.springframework.integration.config.dsl.MessageSource<> , java.lang.String , java.lang.String , boolean ) ; } } else if ( java.lang.Object instanceof StandardIntegrationFlow ) { java.lang.String java.lang.String = java.lang.String + STRING + BeanFactoryUtils . GENERATED_BEAN_NAME_SEPARATOR + int ++ ; void ( java.lang.Object , java.lang.String , java.lang.String , boolean ) ; } else if ( java.lang.Object instanceof AnnotationGatewayProxyFactoryBean ) { void ( java.lang.Object , java.lang.String + STRING , java.lang.String , boolean ) ; } else { java.lang.String java.lang.String = java.lang.String ( java.lang.Object ) ; void ( java.lang.Object , java.lang.String , java.lang.String , boolean ) ; } } } } org.springframework.integration.config.dsl.StandardIntegrationFlow . setIntegrationComponents ( java.util.List<java.lang.Object> ) ; return org.springframework.integration.config.dsl.StandardIntegrationFlow ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( IntegrationFlow org.springframework.integration.config.dsl.IntegrationFlow , java.lang.String java.lang.String ) { IntegrationFlowBuilder org.springframework.integration.config.dsl.IntegrationFlowBuilder = IntegrationFlows . from ( java.lang.String + STRING ) ; org.springframework.integration.config.dsl.IntegrationFlow . configure ( org.springframework.integration.config.dsl.IntegrationFlowBuilder ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.integration.config.dsl.IntegrationFlowBuilder . get ( ) , java.lang.String ) ; return boolean ( org.springframework.integration.config.dsl.IntegrationFlow ) ? java.lang.Object : org.springframework.integration.config.dsl.IntegrationFlow ; }  <METHOD_END>
<METHOD_START> private void void ( IntegrationComponentSpec < ? , ? > org.springframework.integration.config.dsl.IntegrationComponentSpec<?,?> ) { void ( org.springframework.integration.config.dsl.IntegrationComponentSpec<,> . get ( ) , java.lang.String ( org.springframework.integration.config.dsl.IntegrationComponentSpec<,> . get ( ) ) , null , false ) ; if ( org.springframework.integration.config.dsl.IntegrationComponentSpec<,> instanceof ComponentsRegistration ) { java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = ( ( ComponentsRegistration ) org.springframework.integration.config.dsl.IntegrationComponentSpec<,> ) . getComponentsToRegister ( ) ; if ( ! CollectionUtils . isEmpty ( java.util.Collection<java.lang.Object> ) ) { java.util.Collection<java.lang.Object> . java.util.stream.Stream<java.lang.Object> ( ) . java.util.stream.Stream<java.lang.Object> ( java.lang.Object -> ! this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory . getBeansOfType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , false , false ) . values ( ) . contains ( java.lang.Object ) ) . void ( java.lang.Object -> void ( java.lang.Object , java.lang.String ( java.lang.Object ) ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { void ( java.lang.Object , java.lang.String , null , true ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.String java.lang.String , boolean boolean ) { if ( java.lang.Object instanceof ApplicationListener ) { this . java.util.Set<org.springframework.integration.config.dsl.ApplicationListener<?>> . add ( ( ApplicationListener < ? > ) java.lang.Object ) ; } this . org.springframework.integration.config.dsl.AutowiredAnnotationBeanPostProcessor . processInjection ( java.lang.Object ) ; this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory . initializeBean ( java.lang.Object , java.lang.String ) ; if ( boolean ) { this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory . registerSingleton ( java.lang.String , java.lang.Object ) ; if ( java.lang.String != null ) { this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory . registerDependentBean ( java.lang.String , java.lang.String ) ; } } if ( java.lang.Object instanceof DisposableBean ) { ( ( DefaultSingletonBeanRegistry ) this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory ) . registerDisposableBean ( java.lang.String , ( DisposableBean ) java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof NamedComponent && ( ( NamedComponent ) java.lang.Object ) . getComponentName ( ) != null ) { return ( ( NamedComponent ) java.lang.Object ) . getComponentName ( ) ; } java.lang.String java.lang.String = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ; java.lang.String java.lang.String = java.lang.String ; int int = - NUMBER ; while ( int == - NUMBER || this . org.springframework.integration.config.dsl.ConfigurableListableBeanFactory . containsBean ( java.lang.String ) ) { int ++ ; java.lang.String = java.lang.String + BeanFactoryUtils . GENERATED_BEAN_NAME_SEPARATOR + int ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.Object java.lang.Object ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; return java.lang.Class<> . boolean ( ) && ! java.lang.Class<> . boolean ( ) && ! java.lang.Class<> . boolean ( ) ; }  <METHOD_END>
