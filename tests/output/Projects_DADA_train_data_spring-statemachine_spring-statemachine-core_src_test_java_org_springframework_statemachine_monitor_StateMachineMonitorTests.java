<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.monitor.StateMachineMonitorTests.Config1 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor = context . getBean ( org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor .class ) ; Action < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> = context . getBean ( STRING , Action .class ) ; Action < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> = context . getBean ( STRING , Action .class ) ; Action < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> = context . getBean ( STRING , Action .class ) ; org.springframework.statemachine.monitor.StateMachineMonitorTests.LatchAction org.springframework.statemachine.monitor.StateMachineMonitorTests.LatchAction = context . getBean ( STRING , org.springframework.statemachine.monitor.StateMachineMonitorTests.LatchAction .class ) ; org.springframework.statemachine.monitor.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.monitor.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; org.springframework.statemachine.monitor.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.monitor.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; assertThat ( org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor . java.util.Map<org.springframework.statemachine.monitor.Transition<java.lang.String,java.lang.String>,org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor.Transitions> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.monitor.StateMachineMonitorTests.LatchAction . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor . java.util.Map<org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String>,org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor.Actions> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor . java.util.Map<org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String>,org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor.Actions> . keySet ( ) , containsInAnyOrder ( org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> , org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> , org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> , org.springframework.statemachine.monitor.StateMachineMonitorTests.LatchAction ) ) ; org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor . void ( ) ; org.springframework.statemachine.monitor.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.monitor.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.monitor.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withMonitoring ( ) . monitor ( org.springframework.statemachine.monitor.StateMachineMonitor<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.monitor.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING , null , org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> ( ) ) . state ( STRING , org.springframework.statemachine.monitor.StateMachineMonitorTests.LatchAction ( ) ) . state ( STRING , org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.monitor.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . action ( org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> ( ) ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> ( ) { return new Action < java.lang.String , java.lang.String > ( ) { @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.StateContext<java.lang.String,java.lang.String> ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {					} } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.StateContext<java.lang.String,java.lang.String> ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {					} }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> ( ) { return new Action < java.lang.String , java.lang.String > ( ) { @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.StateContext<java.lang.String,java.lang.String> ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {					} } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.StateContext<java.lang.String,java.lang.String> ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {					} }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> ( ) { return new Action < java.lang.String , java.lang.String > ( ) { @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.StateContext<java.lang.String,java.lang.String> ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {					} } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.StateContext<java.lang.String,java.lang.String> ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {					} }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.monitor.StateMachineMonitorTests.LatchAction org.springframework.statemachine.monitor.StateMachineMonitorTests.LatchAction ( ) { return new org.springframework.statemachine.monitor.StateMachineMonitorTests.LatchAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.monitor.StateMachineMonitor<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.StateMachineMonitor<java.lang.String,java.lang.String> ( ) { return new org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.StateContext<java.lang.String,java.lang.String> ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {			} finally { java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.monitor.AnnotationConfigApplicationContext org.springframework.statemachine.monitor.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.StateMachine<java.lang.String,java.lang.String> , Transition < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.Transition<java.lang.String,java.lang.String> , long long ) { java.util.Map<org.springframework.statemachine.monitor.Transition<java.lang.String,java.lang.String>,org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor.Transitions> . put ( org.springframework.statemachine.monitor.Transition<java.lang.String,java.lang.String> , new org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor.Transitions ( org.springframework.statemachine.monitor.Transition<java.lang.String,java.lang.String> , long ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.StateMachine<java.lang.String,java.lang.String> , Action < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> , long long ) { java.util.Map<org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String>,org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor.Actions> . put ( org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> , new org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor.Actions ( org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> , long ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> void void ( ) { java.util.Map<org.springframework.statemachine.monitor.Transition<java.lang.String,java.lang.String>,org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor.Transitions> . clear ( ) ; java.util.Map<org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String>,org.springframework.statemachine.monitor.StateMachineMonitorTests.TestStateMachineMonitor.Actions> . clear ( ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void ( Transition < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.Transition<java.lang.String,java.lang.String> , java.lang.Long java.lang.Long ) { super(); this . org.springframework.statemachine.monitor.Transition<java.lang.String,java.lang.String> = org.springframework.statemachine.monitor.Transition<java.lang.String,java.lang.String> ; this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void ( Action < java.lang.String , java.lang.String > org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> , java.lang.Long java.lang.Long ) { this . org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> = org.springframework.statemachine.monitor.Action<java.lang.String,java.lang.String> ; this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
