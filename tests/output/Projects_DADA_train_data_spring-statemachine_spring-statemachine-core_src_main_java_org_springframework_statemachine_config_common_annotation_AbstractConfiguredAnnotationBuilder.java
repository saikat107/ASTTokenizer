<METHOD_START> protected void ( ) { this( ObjectPostProcessor . QUIESCENT_POSTPROCESSOR ); }  <METHOD_END>
<METHOD_START> protected void ( ObjectPostProcessor < java.lang.Object > org.springframework.statemachine.config.common.annotation.ObjectPostProcessor<java.lang.Object> ) { this( org.springframework.statemachine.config.common.annotation.ObjectPostProcessor<java.lang.Object> , false ); }  <METHOD_END>
<METHOD_START> protected void ( ObjectPostProcessor < java.lang.Object > org.springframework.statemachine.config.common.annotation.ObjectPostProcessor<java.lang.Object> , boolean boolean ) { Assert . notNull ( org.springframework.statemachine.config.common.annotation.ObjectPostProcessor<java.lang.Object> , STRING ) ; this . org.springframework.statemachine.config.common.annotation.ObjectPostProcessor<java.lang.Object> = org.springframework.statemachine.config.common.annotation.ObjectPostProcessor<java.lang.Object> ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final O O ( ) java.lang.Exception { synchronized ( java.util.LinkedHashMap<java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>,java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>> ) { org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState = org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState . org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState ; void ( ) ; void ( ) ; org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState = org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState . org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState ; void ( ) ; void ( ) ; org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState = org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState . org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState ; void ( ) ; void ( ) ; org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState = org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState . org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState ; O O = O ( ) ; org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState = org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState . org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState ; return O ; } }  <METHOD_END>
<METHOD_START> public O O ( ) { if ( boolean ( ) ) { try { return build ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.config.common.annotation.Log . error ( STRING , java.lang.Exception ) ; return null ; } } else { return getObject ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < C extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurerAdapter<O,I,B> < O , I , B > > C C ( C C ) throws java.lang.Exception { void ( C ) ; C . addObjectPostProcessor ( org.springframework.statemachine.config.common.annotation.ObjectPostProcessor<java.lang.Object> ) ; C . setBuilder ( ( B ) this ) ; return C ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < C extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurerAdapter<O,I,B> < O , I , B > > C C ( C C ) throws java.lang.Exception { C C = ( C ) C ( C . java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurerAdapter> ( ) ) ; if ( C != null ) { return C ; } return C ( C ) ; }  <METHOD_END>
<METHOD_START> public < C extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B> < O , B > > C C ( C C ) throws java.lang.Exception { void ( C ) ; return C ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < C > void void ( java.lang.Class<C> < C > java.lang.Class<C> , C C ) { this . java.util.Map<java.lang.Class<java.lang.Object>,java.lang.Object> . java.lang.Object ( ( java.lang.Class<java.lang.Object> < java.lang.Object > ) java.lang.Class<C> , C ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < C > C C ( java.lang.Class<C> < C > java.lang.Class<C> ) { return ( C ) this . java.util.Map<java.lang.Class<java.lang.Object>,java.lang.Object> . java.lang.Object ( java.lang.Class<C> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.Class<java.lang.Object>,java.lang.Object> < java.lang.Class<java.lang.Object> < java.lang.Object > , java.lang.Object > java.util.Map<java.lang.Class<java.lang.Object>,java.lang.Object> ( ) { return java.util.Collections . java.util.Map<java.lang.Class<java.lang.Object>,java.lang.Object> ( this . java.util.Map<java.lang.Class<java.lang.Object>,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < C extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B> < O , B > > void void ( C C ) throws java.lang.Exception { Assert . notNull ( C , STRING ) ; java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < ? extends AnnotationConfigurer < O , B > > java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> = ( java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < ? extends AnnotationConfigurer < O , B > > ) C . java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer> ( ) ; if ( ! org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState . boolean ( ) ) { synchronized ( java.util.LinkedHashMap<java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>,java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>> ) { java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> = boolean ? this . java.util.LinkedHashMap<java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>,java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>> . get ( java.lang.Class<> ) : null ; if ( java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> == null ) { java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> = new java.util.ArrayList<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > ( NUMBER ) ; } java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> . add ( C ) ; this . java.util.LinkedHashMap<java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>,java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>> . put ( java.lang.Class<> , java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ) ; if ( org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState . boolean ( ) ) { C . init ( ( B ) this ) ; } } } else { synchronized ( java.util.LinkedHashMap<java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>,java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>> ) { java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> = boolean ? this . java.util.LinkedHashMap<java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>,java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>> . get ( java.lang.Class<> ) : null ; if ( java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> == null ) { java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> = new java.util.ArrayList<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > ( NUMBER ) ; } java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> . add ( C ) ; this . java.util.LinkedHashMap<java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>,java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>> . put ( java.lang.Class<> , java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ) ; C . init ( ( B ) this ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < C extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B> < O , B > > java.util.List<C> < C > java.util.List<C> ( java.lang.Class<C> < C > java.lang.Class<C> ) { java.util.List<C> < C > java.util.List<C> = ( java.util.List<C> < C > ) this . java.util.LinkedHashMap<java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>,java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>> . get ( java.lang.Class<C> ) ; if ( java.util.List<C> == null ) { return new java.util.ArrayList<C> < C > ( ) ; } return new java.util.ArrayList<C> < C > ( java.util.List<C> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < C extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B> < O , B > > java.util.List<C> < C > java.util.List<C> ( java.lang.Class<C> < C > java.lang.Class<C> ) { java.util.List<C> < C > java.util.List<C> = ( java.util.List<C> < C > ) this . java.util.LinkedHashMap<java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>,java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>> . remove ( java.lang.Class<C> ) ; if ( java.util.List<C> == null ) { return new java.util.ArrayList<C> < C > ( ) ; } return new java.util.ArrayList<C> < C > ( java.util.List<C> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < C extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B> < O , B > > C C ( java.lang.Class<C> < C > java.lang.Class<C> ) { java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> = this . java.util.LinkedHashMap<java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>,java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>> . get ( java.lang.Class<C> ) ; if ( java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> == null ) { return null ; } if ( java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> . size ( ) != NUMBER ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<C> + STRING + java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ) ; } return ( C ) java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < C extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B> < O , B > > C C ( java.lang.Class<C> < C > java.lang.Class<C> ) { java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> = this . java.util.LinkedHashMap<java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>,java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>> . remove ( java.lang.Class<C> ) ; if ( java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> == null ) { return null ; } if ( java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> . size ( ) != NUMBER ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<C> + STRING + java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ) ; } return ( C ) java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public O O ( ObjectPostProcessor < java.lang.Object > org.springframework.statemachine.config.common.annotation.ObjectPostProcessor<java.lang.Object> ) { Assert . notNull ( org.springframework.statemachine.config.common.annotation.ObjectPostProcessor<java.lang.Object> , STRING ) ; this . org.springframework.statemachine.config.common.annotation.ObjectPostProcessor<java.lang.Object> = org.springframework.statemachine.config.common.annotation.ObjectPostProcessor<java.lang.Object> ; return ( O ) this ; }  <METHOD_END>
<METHOD_START> protected < P > P P ( P P ) { return ( P ) this . org.springframework.statemachine.config.common.annotation.ObjectPostProcessor<java.lang.Object> . postProcess ( P ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) java.lang.Exception {	}  <METHOD_END>
<METHOD_START> protected void void ( ) java.lang.Exception {	}  <METHOD_END>
<METHOD_START> protected void void ( ) java.lang.Exception {	}  <METHOD_END>
<METHOD_START> protected abstract O O ( ) java.lang.Exception ;  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( ) java.lang.Exception { for ( AnnotationConfigurer < O , B > org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B> : java.util.Collection<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ( ) ) { org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B> . init ( ( B ) this ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( ) java.lang.Exception { for ( AnnotationConfigurer < O , B > org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B> : java.util.Collection<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ( ) ) { org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B> . configure ( ( B ) this ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( ) java.lang.Exception { for ( AnnotationConfigurer < O , B > org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B> : java.util.Collection<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ( ) ) { org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B> . configure ( ( B ) this ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > java.util.Collection<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ( ) { java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> = new java.util.ArrayList<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > ( ) ; for ( java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> : this . java.util.LinkedHashMap<java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>,java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>> . values ( ) ) { java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> . addAll ( java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ) ; } return java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > java.util.Collection<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ( ) { java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> = new java.util.ArrayList<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > ( ) ; for ( java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> : this . java.util.LinkedHashMap<java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>,java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>> . values ( ) ) { java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> . addAll ( java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ) ; } return java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { synchronized ( java.util.LinkedHashMap<java.lang.Class<? extends org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>,java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>>> ) { return org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState == org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState . org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState ; } }  <METHOD_END>
<METHOD_START> void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState . int == int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return int >= org.springframework.statemachine.config.common.annotation.AbstractConfiguredAnnotationBuilder.BuildState . int ; }  <METHOD_END>
