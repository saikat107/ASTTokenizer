<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpServletRequest org.springframework.web.filter.HttpServletRequest = mock ( HttpServletRequest .class ) ; org.springframework.web.filter.HttpServletRequest . setCharacterEncoding ( java.lang.String ) ; given ( org.springframework.web.filter.HttpServletRequest . getAttribute ( WebUtils . ERROR_REQUEST_URI_ATTRIBUTE ) ) . willReturn ( null ) ; given ( org.springframework.web.filter.HttpServletRequest . getAttribute ( java.lang.String + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX ) ) . willReturn ( null ) ; HttpServletResponse org.springframework.web.filter.HttpServletResponse = mock ( HttpServletResponse .class ) ; FilterChain org.springframework.web.filter.FilterChain = mock ( FilterChain .class ) ; CharacterEncodingFilter org.springframework.web.filter.CharacterEncodingFilter = new CharacterEncodingFilter ( java.lang.String , true ) ; org.springframework.web.filter.CharacterEncodingFilter . init ( new MockFilterConfig ( java.lang.String ) ) ; org.springframework.web.filter.CharacterEncodingFilter . doFilter ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.HttpServletResponse , org.springframework.web.filter.FilterChain ) ; verify ( org.springframework.web.filter.HttpServletRequest ) . setAttribute ( java.lang.String + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX , java.lang.Boolean . java.lang.Boolean ) ; verify ( org.springframework.web.filter.HttpServletRequest ) . removeAttribute ( java.lang.String + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX ) ; verify ( org.springframework.web.filter.HttpServletResponse ) . setCharacterEncoding ( java.lang.String ) ; verify ( org.springframework.web.filter.FilterChain ) . doFilter ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpServletRequest org.springframework.web.filter.HttpServletRequest = mock ( HttpServletRequest .class ) ; given ( org.springframework.web.filter.HttpServletRequest . getCharacterEncoding ( ) ) . willReturn ( null ) ; given ( org.springframework.web.filter.HttpServletRequest . getAttribute ( WebUtils . ERROR_REQUEST_URI_ATTRIBUTE ) ) . willReturn ( null ) ; given ( org.springframework.web.filter.HttpServletRequest . getAttribute ( java.lang.String + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX ) ) . willReturn ( null ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; FilterChain org.springframework.web.filter.FilterChain = mock ( FilterChain .class ) ; CharacterEncodingFilter org.springframework.web.filter.CharacterEncodingFilter = new CharacterEncodingFilter ( java.lang.String ) ; org.springframework.web.filter.CharacterEncodingFilter . init ( new MockFilterConfig ( java.lang.String ) ) ; org.springframework.web.filter.CharacterEncodingFilter . doFilter ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; verify ( org.springframework.web.filter.HttpServletRequest ) . setCharacterEncoding ( java.lang.String ) ; verify ( org.springframework.web.filter.HttpServletRequest ) . setAttribute ( java.lang.String + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX , java.lang.Boolean . java.lang.Boolean ) ; verify ( org.springframework.web.filter.HttpServletRequest ) . removeAttribute ( java.lang.String + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX ) ; verify ( org.springframework.web.filter.FilterChain ) . doFilter ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpServletRequest org.springframework.web.filter.HttpServletRequest = mock ( HttpServletRequest .class ) ; given ( org.springframework.web.filter.HttpServletRequest . getCharacterEncoding ( ) ) . willReturn ( java.lang.String ) ; given ( org.springframework.web.filter.HttpServletRequest . getAttribute ( WebUtils . ERROR_REQUEST_URI_ATTRIBUTE ) ) . willReturn ( null ) ; given ( org.springframework.web.filter.HttpServletRequest . getAttribute ( java.lang.String + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX ) ) . willReturn ( null ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; FilterChain org.springframework.web.filter.FilterChain = mock ( FilterChain .class ) ; CharacterEncodingFilter org.springframework.web.filter.CharacterEncodingFilter = new CharacterEncodingFilter ( java.lang.String ) ; org.springframework.web.filter.CharacterEncodingFilter . init ( new MockFilterConfig ( java.lang.String ) ) ; org.springframework.web.filter.CharacterEncodingFilter . doFilter ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; verify ( org.springframework.web.filter.HttpServletRequest ) . setAttribute ( java.lang.String + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX , java.lang.Boolean . java.lang.Boolean ) ; verify ( org.springframework.web.filter.HttpServletRequest ) . removeAttribute ( java.lang.String + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX ) ; verify ( org.springframework.web.filter.FilterChain ) . doFilter ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpServletRequest org.springframework.web.filter.HttpServletRequest = mock ( HttpServletRequest .class ) ; given ( org.springframework.web.filter.HttpServletRequest . getCharacterEncoding ( ) ) . willReturn ( null ) ; given ( org.springframework.web.filter.HttpServletRequest . getAttribute ( WebUtils . ERROR_REQUEST_URI_ATTRIBUTE ) ) . willReturn ( null ) ; given ( org.springframework.web.filter.HttpServletRequest . getAttribute ( java.lang.String + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX ) ) . willReturn ( null ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; FilterChain org.springframework.web.filter.FilterChain = mock ( FilterChain .class ) ; CharacterEncodingFilter org.springframework.web.filter.CharacterEncodingFilter = new CharacterEncodingFilter ( ) ; org.springframework.web.filter.CharacterEncodingFilter . setEncoding ( java.lang.String ) ; org.springframework.web.filter.CharacterEncodingFilter . setBeanName ( java.lang.String ) ; org.springframework.web.filter.CharacterEncodingFilter . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.filter.CharacterEncodingFilter . doFilter ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; verify ( org.springframework.web.filter.HttpServletRequest ) . setCharacterEncoding ( java.lang.String ) ; verify ( org.springframework.web.filter.HttpServletRequest ) . setAttribute ( java.lang.String + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX , java.lang.Boolean . java.lang.Boolean ) ; verify ( org.springframework.web.filter.HttpServletRequest ) . removeAttribute ( java.lang.String + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX ) ; verify ( org.springframework.web.filter.FilterChain ) . doFilter ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpServletRequest org.springframework.web.filter.HttpServletRequest = mock ( HttpServletRequest .class ) ; given ( org.springframework.web.filter.HttpServletRequest . getCharacterEncoding ( ) ) . willReturn ( null ) ; given ( org.springframework.web.filter.HttpServletRequest . getAttribute ( WebUtils . ERROR_REQUEST_URI_ATTRIBUTE ) ) . willReturn ( null ) ; given ( org.springframework.web.filter.HttpServletRequest . getAttribute ( CharacterEncodingFilter .class . java.lang.String ( ) + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX ) ) . willReturn ( null ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; FilterChain org.springframework.web.filter.FilterChain = mock ( FilterChain .class ) ; CharacterEncodingFilter org.springframework.web.filter.CharacterEncodingFilter = new CharacterEncodingFilter ( java.lang.String ) ; org.springframework.web.filter.CharacterEncodingFilter . doFilter ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; verify ( org.springframework.web.filter.HttpServletRequest ) . setCharacterEncoding ( java.lang.String ) ; verify ( org.springframework.web.filter.HttpServletRequest ) . setAttribute ( CharacterEncodingFilter .class . java.lang.String ( ) + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX , java.lang.Boolean . java.lang.Boolean ) ; verify ( org.springframework.web.filter.HttpServletRequest ) . removeAttribute ( CharacterEncodingFilter .class . java.lang.String ( ) + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX ) ; verify ( org.springframework.web.filter.FilterChain ) . doFilter ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpServletRequest org.springframework.web.filter.HttpServletRequest = mock ( HttpServletRequest .class ) ; org.springframework.web.filter.HttpServletRequest . setCharacterEncoding ( java.lang.String ) ; given ( org.springframework.web.filter.HttpServletRequest . getAttribute ( WebUtils . ERROR_REQUEST_URI_ATTRIBUTE ) ) . willReturn ( null ) ; given ( org.springframework.web.filter.HttpServletRequest . getAttribute ( java.lang.String + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX ) ) . willReturn ( null ) ; HttpServletResponse org.springframework.web.filter.HttpServletResponse = mock ( HttpServletResponse .class ) ; FilterChain org.springframework.web.filter.FilterChain = mock ( FilterChain .class ) ; CharacterEncodingFilter org.springframework.web.filter.CharacterEncodingFilter = new CharacterEncodingFilter ( java.lang.String , true , false ) ; org.springframework.web.filter.CharacterEncodingFilter . init ( new MockFilterConfig ( java.lang.String ) ) ; org.springframework.web.filter.CharacterEncodingFilter . doFilter ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.HttpServletResponse , org.springframework.web.filter.FilterChain ) ; verify ( org.springframework.web.filter.HttpServletRequest ) . setAttribute ( java.lang.String + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX , java.lang.Boolean . java.lang.Boolean ) ; verify ( org.springframework.web.filter.HttpServletRequest ) . removeAttribute ( java.lang.String + OncePerRequestFilter . ALREADY_FILTERED_SUFFIX ) ; verify ( org.springframework.web.filter.HttpServletRequest , times ( NUMBER ) ) . setCharacterEncoding ( java.lang.String ) ; verify ( org.springframework.web.filter.HttpServletResponse , never ( ) ) . setCharacterEncoding ( java.lang.String ) ; verify ( org.springframework.web.filter.FilterChain ) . doFilter ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.HttpServletResponse ) ; }  <METHOD_END>
