<METHOD_START> public static < S , E > org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E> < S , E > org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E> ( ) { return new org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E> < S , E > ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E> < S , E > org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E> ( StateMachine < S , E > org.springframework.statemachine.test.StateMachine<S,E> ) { return org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E> ( org.springframework.statemachine.test.StateMachine<S,E> , org.springframework.statemachine.test.StateMachine<S,E> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E> < S , E > org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E> ( StateMachine < S , E > org.springframework.statemachine.test.StateMachine<S,E> , java.lang.Object java.lang.Object ) { this . java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> . put ( java.lang.Object , org.springframework.statemachine.test.StateMachine<S,E> ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E> < S , E > org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E> ( int int ) { if ( int < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + int ) ; } this . java.lang.Integer = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( ) { return new org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlan<S,E> < S , E > org.springframework.statemachine.test.StateMachineTestPlan<S,E> ( ) { return new StateMachineTestPlan < S , E > ( java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> , java.util.List<org.springframework.statemachine.test.StateMachineTestPlanBuilder.StateMachineTestPlanStep<S,E>> , java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( S S ) { this . java.util.Collection<S> . boolean ( S ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( S ... S[] ) { this . java.util.Collection<S> . boolean ( java.util.Arrays . java.util.List<S> ( S[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( E E ) { return org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( E , false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( E E , boolean boolean ) { org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( E , boolean , false ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( E E , boolean boolean , boolean boolean ) { this . java.util.List<E> . boolean ( E ) ; this . java.lang.Object = null ; this . boolean = boolean ; this . boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( E E , java.lang.Object java.lang.Object ) { this . java.util.List<E> . boolean ( E ) ; this . java.lang.Object = java.lang.Object ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( Message < E > org.springframework.statemachine.test.Message<E> ) { return org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( org.springframework.statemachine.test.Message<E> , false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( Message < E > org.springframework.statemachine.test.Message<E> , boolean boolean ) { this . java.util.List<org.springframework.statemachine.test.Message<E>> . add ( org.springframework.statemachine.test.Message<E> ) ; this . java.lang.Object = null ; this . boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( Message < E > org.springframework.statemachine.test.Message<E> , java.lang.Object java.lang.Object ) { this . java.util.List<org.springframework.statemachine.test.Message<E>> . add ( org.springframework.statemachine.test.Message<E> ) ; this . java.lang.Object = java.lang.Object ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( java.lang.Object java.lang.Object ) { this . java.util.Collection<java.lang.Object> . boolean ( java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { this . java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( int int ) { if ( int < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + int ) ; } this . java.lang.Integer = int ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( S ... S[] ) { this . java.util.Collection<S> . boolean ( java.util.Arrays . java.util.List<S> ( S[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( S ... S[] ) { this . java.util.Collection<S> . boolean ( java.util.Arrays . java.util.List<S> ( S[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( int int ) { if ( int < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + int ) ; } this . java.lang.Integer = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( int int ) { if ( int < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + int ) ; } this . java.lang.Integer = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( int int ) { if ( int < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + int ) ; } this . java.lang.Integer = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( int int ) { if ( int < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + int ) ; } this . java.lang.Integer = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( int int ) { if ( int < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + int ) ; } this . java.lang.Integer = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( int int ) { if ( int < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + int ) ; } this . java.lang.Integer = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( int int ) { if ( int < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + int ) ; } this . java.lang.Integer = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( int int ) { if ( int < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + int ) ; } this . java.lang.Integer = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E>.StateMachineTestPlanStepBuilder ( int int ) { if ( int < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + int ) ; } this . java.lang.Integer = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E> < S , E > org.springframework.statemachine.test.StateMachineTestPlanBuilder<S,E> ( ) { java.util.List<org.springframework.statemachine.test.StateMachineTestPlanBuilder.StateMachineTestPlanStep<S,E>> . boolean ( new org.springframework.statemachine.test.StateMachineTestPlanBuilder.StateMachineTestPlanStep<S,E> < S , E > ( java.util.List<E> , java.util.List<org.springframework.statemachine.test.Message<E>> , java.lang.Object , boolean , boolean , java.util.Collection<S> , java.lang.Integer , java.lang.Integer , java.lang.Integer , java.lang.Integer , java.lang.Integer , java.lang.Integer , java.lang.Integer , java.lang.Integer , java.lang.Integer , java.util.Collection<java.lang.Object> , java.util.Map<java.lang.Object,java.lang.Object> , java.lang.Integer , java.util.Collection<S> , java.util.Collection<S> ) ) ; return org.springframework.statemachine.test.StateMachineTestPlanBuilder .this ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<E> < E > java.util.List<E> , java.util.List<org.springframework.statemachine.test.Message<E>> < Message < E > > java.util.List<org.springframework.statemachine.test.Message<E>> , java.lang.Object java.lang.Object , boolean boolean , boolean boolean , java.util.Collection<S> < S > java.util.Collection<S> , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> , java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> , java.lang.Integer java.lang.Integer , java.util.Collection<S> < S > java.util.Collection<S> , java.util.Collection<S> < S > java.util.Collection<S> ) { this . java.util.List<E> = java.util.List<E> ; this . java.util.List<org.springframework.statemachine.test.Message<E>> = java.util.List<org.springframework.statemachine.test.Message<E>> ; this . java.lang.Object = java.lang.Object ; this . boolean = boolean ; this . boolean = boolean ; this . java.util.Collection<S> = java.util.Collection<S> ; this . java.lang.Integer = java.lang.Integer ; this . java.lang.Integer = java.lang.Integer ; this . java.lang.Integer = java.lang.Integer ; this . java.lang.Integer = java.lang.Integer ; this . java.lang.Integer = java.lang.Integer ; this . java.lang.Integer = java.lang.Integer ; this . java.lang.Integer = java.lang.Integer ; this . java.lang.Integer = java.lang.Integer ; this . java.lang.Integer = java.lang.Integer ; this . java.util.Collection<java.lang.Object> = java.util.Collection<java.lang.Object> ; this . java.util.Map<java.lang.Object,java.lang.Object> = java.util.Map<java.lang.Object,java.lang.Object> ; this . java.lang.Integer = java.lang.Integer ; this . java.util.Collection<S> = java.util.Collection<S> ; this . java.util.Collection<S> = java.util.Collection<S> ; }  <METHOD_END>
