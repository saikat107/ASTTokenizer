<METHOD_START> @ Test public void void ( ) { LoggingHandler org.springframework.integration.config.xml.LoggingHandler = TestUtils . getPropertyValue ( org.springframework.integration.config.xml.EventDrivenConsumer , STRING , LoggingHandler .class ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.config.xml.LoggingHandler , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.config.xml.LoggingHandler , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.config.xml.LoggingHandler , STRING ) . toString ( ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.config.xml.LoggingHandler , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LoggingHandler org.springframework.integration.config.xml.LoggingHandler = TestUtils . getPropertyValue ( org.springframework.integration.config.xml.EventDrivenConsumer , STRING , LoggingHandler .class ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.config.xml.LoggingHandler , STRING ) ) ; assertEquals ( Ordered . LOWEST_PRECEDENCE , TestUtils . getPropertyValue ( org.springframework.integration.config.xml.LoggingHandler , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.config.xml.LoggingHandler , STRING ) . toString ( ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.config.xml.LoggingHandler , STRING ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.config.xml.LoggingHandler , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.xml.LoggingChannelAdapterParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeansException org.springframework.integration.config.xml.BeansException ) { assertTrue ( org.springframework.integration.config.xml.BeansException instanceof BeanDefinitionParsingException ) ; assertTrue ( org.springframework.integration.config.xml.BeansException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
