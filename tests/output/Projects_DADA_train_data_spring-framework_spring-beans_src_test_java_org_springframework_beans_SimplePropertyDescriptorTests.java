<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException , java.lang.SecurityException , java.lang.NoSuchMethodException { { java.lang.Object java.lang.Object = new ExtendedBeanInfo . ExtendedBeanInfo ( STRING , null , null ) ; assertThat ( java.lang.Object . java.lang.String ( ) , containsString ( STRING ) ) ; } { class C { @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return null ; } } java.lang.reflect.Method java.lang.reflect.Method = C .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; java.lang.Object java.lang.Object = new ExtendedBeanInfo . ExtendedBeanInfo ( STRING , null , java.lang.reflect.Method ) ; assertThat ( java.lang.Object . java.lang.String ( ) , allOf ( containsString ( STRING ) , containsString ( STRING ) , containsString ( STRING ) ) ) ; } { java.lang.Object java.lang.Object = new ExtendedBeanInfo . ExtendedBeanInfo ( STRING , null , null , null , null ) ; assertThat ( java.lang.Object . java.lang.String ( ) , containsString ( STRING ) ) ; } { class C { @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( int int , java.lang.String java.lang.String ) { return null ; } } java.lang.reflect.Method java.lang.reflect.Method = C .class . java.lang.reflect.Method ( STRING , int .class , java.lang.String .class ) ; java.lang.Object java.lang.Object = new ExtendedBeanInfo . ExtendedBeanInfo ( STRING , null , null , null , java.lang.reflect.Method ) ; assertThat ( java.lang.Object . java.lang.String ( ) , allOf ( containsString ( STRING ) , containsString ( STRING ) , containsString ( STRING ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( int int , java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException , java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.Object java.lang.Object = new ExtendedBeanInfo . ExtendedBeanInfo ( STRING , null , null ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; java.lang.Object java.lang.Object = new ExtendedBeanInfo . ExtendedBeanInfo ( STRING , null , null ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return null ; } public java.lang.String java.lang.String ( ) { return null ; } } java.lang.reflect.Method java.lang.reflect.Method = C .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; java.lang.Object java.lang.Object = new ExtendedBeanInfo . ExtendedBeanInfo ( STRING , null , java.lang.reflect.Method ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; java.lang.reflect.Method java.lang.reflect.Method = C .class . java.lang.reflect.Method ( STRING ) ; java.lang.Object java.lang.Object = new ExtendedBeanInfo . ExtendedBeanInfo ( STRING , java.lang.reflect.Method , null ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; java.lang.Object java.lang.Object = new java.beans.PropertyDescriptor ( STRING , null , null ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; java.lang.Object java.lang.Object = STRING ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; java.lang.Object java.lang.Object = null ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException , java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.Object java.lang.Object = new ExtendedBeanInfo . ExtendedBeanInfo ( STRING , null , null , null , null ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; java.lang.Object java.lang.Object = new ExtendedBeanInfo . ExtendedBeanInfo ( STRING , null , null , null , null ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; @ java.lang.SuppressWarnings ( STRING ) class C { public java.lang.Object java.lang.Object ( int int , java.lang.String java.lang.String ) { return null ; } public java.lang.String java.lang.String ( int int ) { return null ; } } java.lang.reflect.Method java.lang.reflect.Method = C .class . java.lang.reflect.Method ( STRING , int .class , java.lang.String .class ) ; java.lang.Object java.lang.Object = new ExtendedBeanInfo . ExtendedBeanInfo ( STRING , null , null , null , java.lang.reflect.Method ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; java.lang.reflect.Method java.lang.reflect.Method = C .class . java.lang.reflect.Method ( STRING , int .class ) ; java.lang.Object java.lang.Object = new ExtendedBeanInfo . ExtendedBeanInfo ( STRING , null , null , java.lang.reflect.Method , null ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; java.lang.Object java.lang.Object = new java.beans.IndexedPropertyDescriptor ( STRING , null , null , null , null ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; java.lang.Object java.lang.Object = STRING ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; java.lang.Object java.lang.Object = null ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( int int , java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( int int ) { return null ; }  <METHOD_END>
