<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { final Cache org.springframework.data.gemfire.client.function.Cache = mock ( Cache .class , STRING ) ; Region org.springframework.data.gemfire.client.function.Region = mock ( Region .class , STRING ) ; Region org.springframework.data.gemfire.client.function.Region = mock ( Region .class , STRING ) ; Region org.springframework.data.gemfire.client.function.Region = mock ( Region .class , STRING ) ; FunctionContext org.springframework.data.gemfire.client.function.FunctionContext = mock ( FunctionContext .class , STRING ) ; ResultSender < java.lang.Object > org.springframework.data.gemfire.client.function.ResultSender<java.lang.Object> = mock ( ResultSender .class , STRING ) ; when ( org.springframework.data.gemfire.client.function.Cache . rootRegions ( ) ) . thenReturn ( new java.util.HashSet <> ( java.util.Arrays .< Region < ? , ? > > java.util.List<org.springframework.data.gemfire.client.function.Region<?,?>> ( org.springframework.data.gemfire.client.function.Region , org.springframework.data.gemfire.client.function.Region , org.springframework.data.gemfire.client.function.Region ) ) ) ; when ( org.springframework.data.gemfire.client.function.Region . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.client.function.Region . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.client.function.Region . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.client.function.FunctionContext . getResultSender ( ) ) . thenReturn ( org.springframework.data.gemfire.client.function.ResultSender<java.lang.Object> ) ; final java.util.concurrent.atomic.AtomicReference<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > java.util.concurrent.atomic.AtomicReference<java.util.List<java.lang.String>> = new java.util.concurrent.atomic.AtomicReference<java.util.List<java.lang.String>> <> ( null ) ; doAnswer ( new Answer < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.client.function.InvocationOnMock ) throws java.lang.Throwable { java.util.concurrent.atomic.AtomicReference<java.util.List<java.lang.String>> . boolean ( null , org.springframework.data.gemfire.client.function.InvocationOnMock . getArgument ( NUMBER ) ) ; return null ; } } ) . when ( org.springframework.data.gemfire.client.function.ResultSender<java.lang.Object> ) . lastResult ( any ( java.util.List .class ) ) ; ListRegionsOnServerFunction org.springframework.data.gemfire.client.function.ListRegionsOnServerFunction = new ListRegionsOnServerFunction ( ) { @ java.lang.Override org.springframework.data.gemfire.client.function.Cache org.springframework.data.gemfire.client.function.Cache ( ) { return org.springframework.data.gemfire.client.function.Cache ; } } ; org.springframework.data.gemfire.client.function.ListRegionsOnServerFunction . execute ( org.springframework.data.gemfire.client.function.FunctionContext ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.concurrent.atomic.AtomicReference<java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ; assertThat ( java.util.List<java.lang.String> , is ( not ( nullValue ( ) ) ) ) ; assertThat ( java.util.List<java.lang.String> . boolean ( ) , is ( false ) ) ; assertThat ( java.util.List<java.lang.String> . int ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( java.util.List<java.lang.String> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.client.function.Cache , times ( NUMBER ) ) . rootRegions ( ) ; verify ( org.springframework.data.gemfire.client.function.Region , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.client.function.Region , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.client.function.Region , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.client.function.FunctionContext , times ( NUMBER ) ) . getResultSender ( ) ; verify ( org.springframework.data.gemfire.client.function.ResultSender<java.lang.Object> , times ( NUMBER ) ) . lastResult ( any ( java.util.List .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.client.function.InvocationOnMock ) throws java.lang.Throwable { java.util.concurrent.atomic.AtomicReference<java.util.List<java.lang.String>> . boolean ( null , org.springframework.data.gemfire.client.function.InvocationOnMock . getArgument ( NUMBER ) ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.client.function.Cache org.springframework.data.gemfire.client.function.Cache ( ) { return org.springframework.data.gemfire.client.function.Cache ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { final Cache org.springframework.data.gemfire.client.function.Cache = mock ( Cache .class , STRING ) ; FunctionContext org.springframework.data.gemfire.client.function.FunctionContext = mock ( FunctionContext .class , STRING ) ; ResultSender < java.lang.Object > org.springframework.data.gemfire.client.function.ResultSender<java.lang.Object> = mock ( ResultSender .class , STRING ) ; when ( org.springframework.data.gemfire.client.function.Cache . rootRegions ( ) ) . thenReturn ( java.util.Collections . java.util.Set<java.lang.Object> ( ) ) ; when ( org.springframework.data.gemfire.client.function.FunctionContext . getResultSender ( ) ) . thenReturn ( org.springframework.data.gemfire.client.function.ResultSender<java.lang.Object> ) ; final java.util.concurrent.atomic.AtomicReference<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > java.util.concurrent.atomic.AtomicReference<java.util.List<java.lang.String>> = new java.util.concurrent.atomic.AtomicReference<java.util.List<java.lang.String>> <> ( null ) ; doAnswer ( new Answer < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.client.function.InvocationOnMock ) throws java.lang.Throwable { java.util.concurrent.atomic.AtomicReference<java.util.List<java.lang.String>> . boolean ( null , org.springframework.data.gemfire.client.function.InvocationOnMock . getArgument ( NUMBER ) ) ; return null ; } } ) . when ( org.springframework.data.gemfire.client.function.ResultSender<java.lang.Object> ) . lastResult ( any ( java.util.List .class ) ) ; ListRegionsOnServerFunction org.springframework.data.gemfire.client.function.ListRegionsOnServerFunction = new ListRegionsOnServerFunction ( ) { @ java.lang.Override org.springframework.data.gemfire.client.function.Cache org.springframework.data.gemfire.client.function.Cache ( ) { return org.springframework.data.gemfire.client.function.Cache ; } } ; org.springframework.data.gemfire.client.function.ListRegionsOnServerFunction . execute ( org.springframework.data.gemfire.client.function.FunctionContext ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.concurrent.atomic.AtomicReference<java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ; assertThat ( java.util.List<java.lang.String> , is ( not ( nullValue ( ) ) ) ) ; assertThat ( java.util.List<java.lang.String> . boolean ( ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.client.function.Cache , times ( NUMBER ) ) . rootRegions ( ) ; verify ( org.springframework.data.gemfire.client.function.FunctionContext , times ( NUMBER ) ) . getResultSender ( ) ; verify ( org.springframework.data.gemfire.client.function.ResultSender<java.lang.Object> , times ( NUMBER ) ) . lastResult ( any ( java.util.List .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.client.function.InvocationOnMock ) throws java.lang.Throwable { java.util.concurrent.atomic.AtomicReference<java.util.List<java.lang.String>> . boolean ( null , org.springframework.data.gemfire.client.function.InvocationOnMock . getArgument ( NUMBER ) ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.client.function.Cache org.springframework.data.gemfire.client.function.Cache ( ) { return org.springframework.data.gemfire.client.function.Cache ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.client.function.ListRegionsOnServerFunction . getId ( ) , is ( equalTo ( ListRegionsOnServerFunction .class . java.lang.String ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.client.function.ListRegionsOnServerFunction . hasResult ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.client.function.ListRegionsOnServerFunction . isHA ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.client.function.ListRegionsOnServerFunction . optimizeForWrite ( ) , is ( false ) ) ; }  <METHOD_END>
