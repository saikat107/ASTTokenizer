<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) < T extends org.springframework.data.gemfire.cache.GemFireCache > T T ( T T ) { Assert . state ( T != null , STRING ) ; Assert . state ( ! T . isClosed ( ) , java.lang.String . java.lang.String ( STRING , T . getName ( ) ) ) ; return T ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) org.springframework.data.gemfire.cache.Region<?,?> < ? , ? > org.springframework.data.gemfire.cache.Region<?,?> ( Region < ? , ? > org.springframework.data.gemfire.cache.Region<?,?> , java.lang.String java.lang.String ) { Assert . state ( org.springframework.data.gemfire.cache.Region<,> != null , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; Assert . state ( ! org.springframework.data.gemfire.cache.Region<,> . isDestroyed ( ) , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; return org.springframework.data.gemfire.cache.Region<,> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<org.springframework.data.gemfire.cache.Cache> < Cache > java.util.Collection<org.springframework.data.gemfire.cache.Cache> ( ) { java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> = java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ( this . org.apache.geode.cache.GemFireCache , this . java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> , this . java.util.Set<java.lang.String> ) ; java.util.Collection<org.springframework.data.gemfire.cache.Cache> < Cache > java.util.Collection<org.springframework.data.gemfire.cache.Cache> = new java.util.HashSet<org.springframework.data.gemfire.cache.Cache> < Cache > ( java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> . size ( ) ) ; for ( Region < ? , ? > org.springframework.data.gemfire.cache.Region<?,?> : java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ) { java.util.Collection<org.springframework.data.gemfire.cache.Cache> . add ( org.springframework.data.gemfire.cache.GemfireCache ( org.springframework.data.gemfire.cache.Region<,> ) ) ; } return java.util.Collection<org.springframework.data.gemfire.cache.Cache> ; }  <METHOD_END>
<METHOD_START> java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ( GemFireCache org.springframework.data.gemfire.cache.GemFireCache , java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ) { if ( boolean ( java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ) ) { java.util.concurrent.atomic.AtomicBoolean . void ( false ) ; return java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ; } else if ( boolean ( java.util.Set<java.lang.String> ) ) { java.util.concurrent.atomic.AtomicBoolean . void ( false ) ; java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> = new java.util.HashSet<org.springframework.data.gemfire.cache.Region<?,?>> < Region < ? , ? > > ( java.util.Set<java.lang.String> . int ( ) ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> . add ( org.springframework.data.gemfire.cache.Region<?,?> ( org.springframework.data.gemfire.cache.GemFireCache , java.lang.String ) ) ; } return java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ; } else { return org.springframework.data.gemfire.cache.GemFireCache ( org.springframework.data.gemfire.cache.GemFireCache ) . rootRegions ( ) ; } }  <METHOD_END>
<METHOD_START> boolean boolean ( java.lang.Iterable<?> < ? > java.lang.Iterable<?> ) { return ( java.lang.Iterable<> != null && java.lang.Iterable<> . java.util.Iterator<> ( ) . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.cache.GemfireCache org.springframework.data.gemfire.cache.GemfireCache ( Region < ? , ? > org.springframework.data.gemfire.cache.Region<?,?> ) { return GemfireCache . wrap ( org.springframework.data.gemfire.cache.Region<,> ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.cache.Region<?,?> < ? , ? > org.springframework.data.gemfire.cache.Region<?,?> ( GemFireCache org.springframework.data.gemfire.cache.GemFireCache , java.lang.String java.lang.String ) { return org.springframework.data.gemfire.cache.Region<?,?> ( org.springframework.data.gemfire.cache.GemFireCache ( org.springframework.data.gemfire.cache.GemFireCache ) . getRegion ( java.lang.String ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.cache.Cache org.springframework.data.gemfire.cache.Cache ( java.lang.String java.lang.String ) { Cache org.springframework.data.gemfire.cache.Cache = super. getMissingCache ( java.lang.String ) ; return ( org.springframework.data.gemfire.cache.Cache != null ? org.springframework.data.gemfire.cache.Cache : ( boolean ( ) ? org.springframework.data.gemfire.cache.GemfireCache ( org.springframework.data.gemfire.cache.Region<?,?> ( this . org.apache.geode.cache.GemFireCache , java.lang.String ) ) : null ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( org . org.apache . org.apache . org.apache . org.apache org.apache.geode.cache.GemFireCache ) { this . org.apache.geode.cache.GemFireCache = org.apache.geode.cache.GemFireCache ; }  <METHOD_END>
<METHOD_START> protected org . org.apache . org.apache . org.apache . org.apache.geode.cache.GemFireCache org.apache.geode.cache.GemFireCache ( ) { return this . org.apache.geode.cache.GemFireCache ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ) { this . java.util.Set<java.lang.String> = java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ) { this . java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> = java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ; }  <METHOD_END>
<METHOD_START> protected java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ( ) { return this . java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ; }  <METHOD_END>
