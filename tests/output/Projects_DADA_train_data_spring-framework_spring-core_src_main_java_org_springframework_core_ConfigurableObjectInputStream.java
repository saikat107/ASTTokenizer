<METHOD_START> public void ( java.io.InputStream java.io.InputStream , java.lang.ClassLoader java.lang.ClassLoader ) throws java.io.IOException { this( java.io.InputStream , java.lang.ClassLoader , true ); }  <METHOD_END>
<METHOD_START> public void ( java.io.InputStream java.io.InputStream , java.lang.ClassLoader java.lang.ClassLoader , boolean boolean ) throws java.io.IOException { super( java.io.InputStream ); this . java.lang.ClassLoader = java.lang.ClassLoader ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.io.ObjectStreamClass java.io.ObjectStreamClass ) throws java.io.IOException , java.lang.ClassNotFoundException { try { if ( this . java.lang.ClassLoader != null ) { return ClassUtils . forName ( java.io.ObjectStreamClass . java.lang.String ( ) , this . java.lang.ClassLoader ) ; } else { return super. java.lang.Class<?> ( java.io.ObjectStreamClass ) ; } } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { return java.lang.Class<?> ( java.io.ObjectStreamClass . java.lang.String ( ) , java.lang.ClassNotFoundException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String [] java.lang.String[] ) throws java.io.IOException , java.lang.ClassNotFoundException { if ( ! this . boolean ) { throw new java.io.NotSerializableException ( STRING ) ; } if ( this . java.lang.ClassLoader != null ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { try { java.lang.Class<?>[] [ int ] = ClassUtils . forName ( java.lang.String[] [ int ] , this . java.lang.ClassLoader ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { java.lang.Class<?>[] [ int ] = java.lang.Class<?> ( java.lang.String[] [ int ] , java.lang.ClassNotFoundException ) ; } } try { return ClassUtils . createCompositeInterface ( java.lang.Class<?>[] , this . java.lang.ClassLoader ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { throw new java.lang.ClassNotFoundException ( null , java.lang.IllegalArgumentException ) ; } } else { try { return super. java.lang.Class<?> ( java.lang.String[] ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.Class<?>[] [ int ] = java.lang.Class<?> ( java.lang.String[] [ int ] , java.lang.ClassNotFoundException ) ; } return ClassUtils . createCompositeInterface ( java.lang.Class<?>[] , java.lang.ClassLoader ( ) ) ; } } }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , java.lang.ClassNotFoundException java.lang.ClassNotFoundException )			throws java.io.IOException , java.lang.ClassNotFoundException { throw java.lang.ClassNotFoundException ; }  <METHOD_END>
<METHOD_START> protected java.lang.ClassLoader java.lang.ClassLoader ( ) java.io.IOException { return null ; }  <METHOD_END>
