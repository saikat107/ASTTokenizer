<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object ... java.lang.Object[] ) { return java.lang.Object ( java.lang.reflect.Method . java.lang.String ( ) , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> static java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String ) ; for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Object ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
