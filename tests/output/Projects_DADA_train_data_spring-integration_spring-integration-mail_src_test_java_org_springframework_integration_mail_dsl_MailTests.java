<METHOD_START> @ BeforeClass public static void void ( ) java.lang.InterruptedException { int int = NUMBER ; while ( int ++ < NUMBER && ( ! org.springframework.integration.mail.dsl.SmtpServer . isListening ( ) || ! org.springframework.integration.mail.dsl.Pop3Server . isListening ( ) || ! org.springframework.integration.mail.dsl.ImapServer . isListening ( ) ) || ! org.springframework.integration.mail.dsl.ImapServer . isListening ( ) ) { java.lang.Thread . void ( NUMBER ) ; } assertTrue ( int < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.integration.mail.dsl.SmtpServer . stop ( ) ; org.springframework.integration.mail.dsl.Pop3Server . stop ( ) ; org.springframework.integration.mail.dsl.ImapServer . stop ( ) ; org.springframework.integration.mail.dsl.ImapServer . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , TestUtils . getPropertyValue ( this . org.springframework.integration.mail.dsl.MessageHandler , STRING ) ) ; java.util.Properties java.util.Properties = TestUtils . getPropertyValue ( this . org.springframework.integration.mail.dsl.MessageHandler , STRING , java.util.Properties .class ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; this . org.springframework.integration.mail.dsl.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; int int = NUMBER ; while ( int ++ < NUMBER && org.springframework.integration.mail.dsl.SmtpServer . getMessages ( ) . size ( ) == NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } assertTrue ( org.springframework.integration.mail.dsl.SmtpServer . getMessages ( ) . size ( ) > NUMBER ) ; java.lang.String java.lang.String = org.springframework.integration.mail.dsl.SmtpServer . getMessages ( ) . get ( NUMBER ) ; assertThat ( java.lang.String , endsWith ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.mail.dsl.Message<?> = this . org.springframework.integration.mail.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mail.dsl.Message<> ) ; MessageHeaders org.springframework.integration.mail.dsl.MessageHeaders = org.springframework.integration.mail.dsl.Message<> . getHeaders ( ) ; assertEquals ( STRING , org.springframework.integration.mail.dsl.MessageHeaders . get ( MailHeaders . TO , java.lang.String [] .class ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.integration.mail.dsl.MessageHeaders . get ( MailHeaders . FROM ) ) ; assertEquals ( STRING , org.springframework.integration.mail.dsl.MessageHeaders . get ( MailHeaders . SUBJECT ) ) ; assertEquals ( STRING , org.springframework.integration.mail.dsl.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.mail.dsl.Message<?> = this . org.springframework.integration.mail.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mail.dsl.Message<> ) ; MimeMessage org.springframework.integration.mail.dsl.MimeMessage = ( MimeMessage ) org.springframework.integration.mail.dsl.Message<> . getPayload ( ) ; assertEquals ( STRING , org.springframework.integration.mail.dsl.MimeMessage . getRecipients ( RecipientType . TO ) [ NUMBER ] . toString ( ) ) ; assertEquals ( STRING , org.springframework.integration.mail.dsl.MimeMessage . getFrom ( ) [ NUMBER ] . toString ( ) ) ; assertEquals ( STRING , org.springframework.integration.mail.dsl.MimeMessage . getSubject ( ) ) ; assertThat ( org.springframework.integration.mail.dsl.MimeMessage . getContent ( ) , equalTo ( TestMailServer . MailServer . MailHandler . BODY + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.mail.dsl.Message<?> = this . org.springframework.integration.mail.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mail.dsl.Message<> ) ; MessageHeaders org.springframework.integration.mail.dsl.MessageHeaders = org.springframework.integration.mail.dsl.Message<> . getHeaders ( ) ; assertEquals ( STRING , org.springframework.integration.mail.dsl.MessageHeaders . get ( MailHeaders . TO , java.lang.String [] .class ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.integration.mail.dsl.MessageHeaders . get ( MailHeaders . FROM ) ) ; assertEquals ( STRING , org.springframework.integration.mail.dsl.MessageHeaders . get ( MailHeaders . SUBJECT ) ) ; assertThat ( org.springframework.integration.mail.dsl.Message<> . getPayload ( ) , equalTo ( TestMailServer . MailServer . MailHandler . MESSAGE + STRING ) ) ; this . org.springframework.integration.mail.dsl.ImapIdleChannelAdapter . stop ( ) ; assertFalse ( TestUtils . getPropertyValue ( this . org.springframework.integration.mail.dsl.ImapIdleChannelAdapter , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.mail.dsl.IntegrationFlow org.springframework.integration.mail.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) . enrichHeaders ( Mail . headers ( ) . subjectFunction ( m -> STRING ) . from ( STRING ) . toFunction ( m -> new String [] { STRING } ) ) . handle ( Mail . outboundAdapter ( STRING ) . port ( org.springframework.integration.mail.dsl.SmtpServer . getPort ( ) ) . credentials ( STRING , STRING ) . protocol ( STRING ) . javaMailProperties ( p -> p . put ( STRING , STRING ) ) , e -> e . id ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.mail.dsl.IntegrationFlow org.springframework.integration.mail.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Mail . pop3InboundAdapter ( STRING , org.springframework.integration.mail.dsl.Pop3Server . getPort ( ) , STRING , STRING ) . javaMailProperties ( p -> p . put ( STRING , STRING ) ) . headerMapper ( org.springframework.integration.mail.dsl.HeaderMapper<org.springframework.integration.mail.dsl.MimeMessage> ( ) ) , e -> e . autoStartup ( true ) . poller ( p -> p . fixedDelay ( NUMBER ) ) ) . enrichHeaders ( s -> s . headerExpressions ( c -> c . put ( MailHeaders . SUBJECT , STRING ) . put ( MailHeaders . FROM , STRING ) ) ) . channel ( MessageChannels . queue ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.mail.dsl.IntegrationFlow org.springframework.integration.mail.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Mail . imapInboundAdapter ( STRING + org.springframework.integration.mail.dsl.ImapServer . getPort ( ) + STRING ) . searchTermStrategy ( this :: org.springframework.integration.mail.dsl.SearchTerm ) . userFlag ( STRING ) . simpleContent ( true ) . javaMailProperties ( p -> p . put ( STRING , STRING ) ) , e -> e . autoStartup ( true ) . poller ( p -> p . fixedDelay ( NUMBER ) ) ) . channel ( MessageChannels . queue ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.mail.dsl.IntegrationFlow org.springframework.integration.mail.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Mail . imapIdleAdapter ( STRING + org.springframework.integration.mail.dsl.ImapServer . getPort ( ) + STRING ) . autoStartup ( true ) . searchTermStrategy ( this :: org.springframework.integration.mail.dsl.SearchTerm ) . userFlag ( STRING ) . javaMailProperties ( p -> p . put ( STRING , STRING ) . put ( STRING , STRING ) ) . shouldReconnectAutomatically ( false ) . headerMapper ( org.springframework.integration.mail.dsl.HeaderMapper<org.springframework.integration.mail.dsl.MimeMessage> ( ) ) ) . channel ( MessageChannels . queue ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.mail.dsl.HeaderMapper<org.springframework.integration.mail.dsl.MimeMessage> < MimeMessage > org.springframework.integration.mail.dsl.HeaderMapper<org.springframework.integration.mail.dsl.MimeMessage> ( ) { return new DefaultMailHeaderMapper ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.mail.dsl.SearchTerm org.springframework.integration.mail.dsl.SearchTerm ( Flags org.springframework.integration.mail.dsl.Flags , Folder org.springframework.integration.mail.dsl.Folder ) { try { FromTerm org.springframework.integration.mail.dsl.FromTerm = new FromTerm ( new InternetAddress ( STRING ) ) ; return new AndTerm ( org.springframework.integration.mail.dsl.FromTerm , new FlagTerm ( new Flags ( Flags . Flag . SEEN ) , false ) ) ; } catch ( AddressException org.springframework.integration.mail.dsl.AddressException ) { throw new java.lang.RuntimeException ( org.springframework.integration.mail.dsl.AddressException ) ; } }  <METHOD_END>
