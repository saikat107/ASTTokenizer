<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . setApplicationContext ( org.springframework.web.reactive.result.method.annotation.StaticWebApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . useSuffixPatternMatch ( ) ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . useRegisteredSuffixPatternMatch ( ) ) ; MappingContentTypeResolver org.springframework.web.reactive.result.method.annotation.MappingContentTypeResolver = mock ( MappingContentTypeResolver .class ) ; when ( org.springframework.web.reactive.result.method.annotation.MappingContentTypeResolver . getKeys ( ) ) . thenReturn ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ; this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . setContentTypeResolver ( org.springframework.web.reactive.result.method.annotation.MappingContentTypeResolver ) ; this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . afterPropertiesSet ( ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . useSuffixPatternMatch ( ) ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . useRegisteredSuffixPatternMatch ( ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . getFileExtensions ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MappingContentTypeResolver org.springframework.web.reactive.result.method.annotation.MappingContentTypeResolver = mock ( MappingContentTypeResolver .class ) ; when ( org.springframework.web.reactive.result.method.annotation.MappingContentTypeResolver . getKeys ( ) ) . thenReturn ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ; final java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; RequestMappingHandlerMapping org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping = new RequestMappingHandlerMapping ( ) { @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.RequestMappingInfo org.springframework.web.reactive.result.method.annotation.RequestMappingInfo ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Set<java.lang.String> . boolean ( getFileExtensions ( ) ) ; return super. getMappingForMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; } } ; this . org.springframework.web.reactive.result.method.annotation.StaticWebApplicationContext . registerSingleton ( STRING , org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMappingTests.ComposedAnnotationController .class ) ; this . org.springframework.web.reactive.result.method.annotation.StaticWebApplicationContext . refresh ( ) ; org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . setContentTypeResolver ( org.springframework.web.reactive.result.method.annotation.MappingContentTypeResolver ) ; org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . setUseRegisteredSuffixPatternMatch ( true ) ; org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . setApplicationContext ( this . org.springframework.web.reactive.result.method.annotation.StaticWebApplicationContext ) ; org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . afterPropertiesSet ( ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.RequestMappingInfo org.springframework.web.reactive.result.method.annotation.RequestMappingInfo ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Set<java.lang.String> . boolean ( getFileExtensions ( ) ) ; return super. getMappingForMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . useSuffixPatternMatch ( ) ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . useRegisteredSuffixPatternMatch ( ) ) ; this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . setUseSuffixPatternMatch ( false ) ; assertFalse ( this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . useSuffixPatternMatch ( ) ) ; this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . setUseRegisteredSuffixPatternMatch ( false ) ; assertFalse ( STRING , this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . useSuffixPatternMatch ( ) ) ; this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . setUseRegisteredSuffixPatternMatch ( true ) ; assertTrue ( STRING , this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . useSuffixPatternMatch ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . setEmbeddedValueResolver ( value -> STRING . equals ( value ) ? STRING : value ) ; java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; java.lang.String [] java.lang.String[] = this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . resolveEmbeddedValuesInPatterns ( java.lang.String[] ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestMappingInfo org.springframework.web.reactive.result.method.annotation.RequestMappingInfo = org.springframework.web.reactive.result.method.annotation.RequestMappingInfo ( STRING , STRING , RequestMethod . POST ) ; assertEquals ( MediaType . APPLICATION_JSON_VALUE , org.springframework.web.reactive.result.method.annotation.RequestMappingInfo . getConsumesCondition ( ) . getConsumableMediaTypes ( ) . iterator ( ) . next ( ) . toString ( ) ) ; assertEquals ( MediaType . APPLICATION_JSON_VALUE , org.springframework.web.reactive.result.method.annotation.RequestMappingInfo . getProducesCondition ( ) . getProducibleMediaTypes ( ) . iterator ( ) . next ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestMappingInfo org.springframework.web.reactive.result.method.annotation.RequestMappingInfo = org.springframework.web.reactive.result.method.annotation.RequestMappingInfo ( RequestMethod . GET ) ; assertArrayEquals ( new MediaType [] { MediaType . ALL } , new java.util.ArrayList <> ( org.springframework.web.reactive.result.method.annotation.RequestMappingInfo . getConsumesCondition ( ) . getConsumableMediaTypes ( ) ) . toArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestMappingInfo ( RequestMethod . GET ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestMappingInfo ( RequestMethod . POST ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestMappingInfo ( RequestMethod . PUT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestMappingInfo ( RequestMethod . DELETE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestMappingInfo ( RequestMethod . PATCH ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.RequestMappingInfo org.springframework.web.reactive.result.method.annotation.RequestMappingInfo ( RequestMethod org.springframework.web.reactive.result.method.annotation.RequestMethod ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.web.reactive.result.method.annotation.RequestMethod . name ( ) . toLowerCase ( ) ; java.lang.String java.lang.String = STRING + java.lang.String ; return org.springframework.web.reactive.result.method.annotation.RequestMappingInfo ( java.lang.String , java.lang.String , org.springframework.web.reactive.result.method.annotation.RequestMethod ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.RequestMappingInfo org.springframework.web.reactive.result.method.annotation.RequestMappingInfo ( java.lang.String java.lang.String , java.lang.String java.lang.String , RequestMethod org.springframework.web.reactive.result.method.annotation.RequestMethod ) throws java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMappingTests.ComposedAnnotationController .class ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( java.lang.String ) ; RequestMappingInfo org.springframework.web.reactive.result.method.annotation.RequestMappingInfo = this . org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping . getMappingForMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; assertNotNull ( org.springframework.web.reactive.result.method.annotation.RequestMappingInfo ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.web.reactive.result.method.annotation.RequestMappingInfo . getPatternsCondition ( ) . getPatterns ( ) ; assertEquals ( NUMBER , java.util.Set<java.lang.String> . int ( ) ) ; assertEquals ( java.lang.String , java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ) ; java.util.Set<org.springframework.web.reactive.result.method.annotation.RequestMethod> < RequestMethod > java.util.Set<org.springframework.web.reactive.result.method.annotation.RequestMethod> = org.springframework.web.reactive.result.method.annotation.RequestMappingInfo . getMethodsCondition ( ) . getMethods ( ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.web.reactive.result.method.annotation.RequestMethod> . size ( ) ) ; assertEquals ( org.springframework.web.reactive.result.method.annotation.RequestMethod , java.util.Set<org.springframework.web.reactive.result.method.annotation.RequestMethod> . iterator ( ) . next ( ) ) ; return org.springframework.web.reactive.result.method.annotation.RequestMappingInfo ; }  <METHOD_END>
<METHOD_START> @ RequestMapping public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMappingTests.PostJson ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ GetMapping ( value = STRING , consumes = MediaType . ALL_VALUE ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ PutMapping ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ DeleteMapping ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ PatchMapping ( STRING ) public void void ( ) {		}  <METHOD_END>
