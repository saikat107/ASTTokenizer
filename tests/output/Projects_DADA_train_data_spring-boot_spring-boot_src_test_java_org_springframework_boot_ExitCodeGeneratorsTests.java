<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.ExpectedException . expectMessage ( STRING ) ; java.util.List<org.springframework.boot.ExitCodeGenerator> < ExitCodeGenerator > java.util.List<org.springframework.boot.ExitCodeGenerator> = null ; new ExitCodeGenerators ( ) . addAll ( java.util.List<org.springframework.boot.ExitCodeGenerator> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.ExpectedException . expectMessage ( STRING ) ; new ExitCodeGenerators ( ) . add ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( new ExitCodeGenerators ( ) . getExitCode ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExitCodeGenerator org.springframework.boot.ExitCodeGenerator = mock ( ExitCodeGenerator .class ) ; given ( org.springframework.boot.ExitCodeGenerator . getExitCode ( ) ) . willThrow ( new java.lang.IllegalStateException ( ) ) ; ExitCodeGenerators org.springframework.boot.ExitCodeGenerators = new ExitCodeGenerators ( ) ; org.springframework.boot.ExitCodeGenerators . add ( org.springframework.boot.ExitCodeGenerator ) ; assertThat ( org.springframework.boot.ExitCodeGenerators . getExitCode ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExitCodeGenerators org.springframework.boot.ExitCodeGenerators = new ExitCodeGenerators ( ) ; org.springframework.boot.ExitCodeGenerators . add ( org.springframework.boot.ExitCodeGenerator ( - NUMBER ) ) ; org.springframework.boot.ExitCodeGenerators . add ( org.springframework.boot.ExitCodeGenerator ( - NUMBER ) ) ; org.springframework.boot.ExitCodeGenerators . add ( org.springframework.boot.ExitCodeGenerator ( - NUMBER ) ) ; assertThat ( org.springframework.boot.ExitCodeGenerators . getExitCode ( ) ) . isEqualTo ( - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExitCodeGenerators org.springframework.boot.ExitCodeGenerators = new ExitCodeGenerators ( ) ; org.springframework.boot.ExitCodeGenerators . add ( org.springframework.boot.ExitCodeGenerator ( NUMBER ) ) ; org.springframework.boot.ExitCodeGenerators . add ( org.springframework.boot.ExitCodeGenerator ( NUMBER ) ) ; org.springframework.boot.ExitCodeGenerators . add ( org.springframework.boot.ExitCodeGenerator ( NUMBER ) ) ; assertThat ( org.springframework.boot.ExitCodeGenerators . getExitCode ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExitCodeGenerators org.springframework.boot.ExitCodeGenerators = new ExitCodeGenerators ( ) ; java.lang.Exception java.lang.Exception = new java.io.IOException ( ) ; org.springframework.boot.ExitCodeGenerators . add ( java.lang.Exception , org.springframework.boot.ExitCodeExceptionMapper ( java.lang.IllegalStateException .class , NUMBER ) ) ; org.springframework.boot.ExitCodeGenerators . add ( java.lang.Exception , org.springframework.boot.ExitCodeExceptionMapper ( java.io.IOException .class , NUMBER ) ) ; org.springframework.boot.ExitCodeGenerators . add ( java.lang.Exception , org.springframework.boot.ExitCodeExceptionMapper ( java.lang.UnsupportedOperationException .class , NUMBER ) ) ; assertThat ( org.springframework.boot.ExitCodeGenerators . getExitCode ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.ExitCodeGenerator org.springframework.boot.ExitCodeGenerator ( int int ) { ExitCodeGenerator org.springframework.boot.ExitCodeGenerator = mock ( ExitCodeGenerator .class ) ; given ( org.springframework.boot.ExitCodeGenerator . getExitCode ( ) ) . willReturn ( int ) ; return org.springframework.boot.ExitCodeGenerator ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.ExitCodeExceptionMapper org.springframework.boot.ExitCodeExceptionMapper ( final java.lang.Class<?> < ? > java.lang.Class<?> , final int int ) { return new ExitCodeExceptionMapper ( ) { @ java.lang.Override public int int ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Class<> . boolean ( java.lang.Throwable ) ) { return int ; } return NUMBER ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Class<> . boolean ( java.lang.Throwable ) ) { return int ; } return NUMBER ; }  <METHOD_END>
