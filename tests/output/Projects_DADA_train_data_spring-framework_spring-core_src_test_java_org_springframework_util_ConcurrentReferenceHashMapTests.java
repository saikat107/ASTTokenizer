<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConcurrentReferenceHashMap < java.lang.Integer , java.lang.String > org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> = new ConcurrentReferenceHashMap <> ( ) ; assertThat ( org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> . getSegmentsSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> . getSegment ( NUMBER ) . getSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> . getLoadFactor ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConcurrentReferenceHashMap < java.lang.Integer , java.lang.String > org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> = new ConcurrentReferenceHashMap <> ( NUMBER ) ; assertThat ( org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> . getSegmentsSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> . getSegment ( NUMBER ) . getSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> . getLoadFactor ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConcurrentReferenceHashMap < java.lang.Integer , java.lang.String > org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> = new ConcurrentReferenceHashMap <> ( NUMBER , NUMBER ) ; assertThat ( org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> . getSegmentsSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> . getSegment ( NUMBER ) . getSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> . getLoadFactor ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConcurrentReferenceHashMap < java.lang.Integer , java.lang.String > org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> = new ConcurrentReferenceHashMap <> ( NUMBER , NUMBER ) ; assertThat ( org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> . getSegmentsSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> . getSegment ( NUMBER ) . getSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> . getLoadFactor ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConcurrentReferenceHashMap < java.lang.Integer , java.lang.String > org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> = new ConcurrentReferenceHashMap <> ( NUMBER , NUMBER , NUMBER ) ; assertThat ( org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> . getSegmentsSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> . getSegment ( NUMBER ) . getSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.util.ConcurrentReferenceHashMap<java.lang.Integer,java.lang.String> . getLoadFactor ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new ConcurrentReferenceHashMap < java.lang.Integer , java.lang.String > ( NUMBER , NUMBER ) ; this . org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.util.ExpectedException . expectMessage ( STRING ) ; new org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > ( - NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new ConcurrentReferenceHashMap < java.lang.Integer , java.lang.String > ( NUMBER , NUMBER , NUMBER ) ; this . org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.util.ExpectedException . expectMessage ( STRING ) ; new org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > ( NUMBER , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new ConcurrentReferenceHashMap < java.lang.Integer , java.lang.String > ( NUMBER , NUMBER ) ; this . org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.util.ExpectedException . expectMessage ( STRING ) ; new org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . size ( ) , is ( NUMBER ) ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . size ( ) , is ( NUMBER ) ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . size ( ) , is ( NUMBER ) ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , null ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( null , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( null ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , null ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Integer java.lang.Integer = NUMBER ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( java.lang.Integer , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . int ( ) , is ( not ( java.lang.Integer . int ( ) ) ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . int ( ) >> NUMBER & NUMBER , is ( not ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> = new org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> <> ( NUMBER , NUMBER , NUMBER ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . getSegment ( NUMBER ) . getSize ( ) , is ( NUMBER ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> = new org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> <> ( NUMBER , NUMBER , NUMBER ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . getSegment ( NUMBER ) . getSize ( ) , is ( NUMBER ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . getSegment ( NUMBER ) . getSize ( ) , is ( NUMBER ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . getSegment ( NUMBER ) . getSize ( ) , is ( NUMBER ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . getSegment ( NUMBER ) . getSize ( ) , is ( NUMBER ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( int , java.lang.String . java.lang.String ( int ) ) ; } assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . getSegment ( NUMBER ) . getSize ( ) , is ( NUMBER ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> = new org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> <> ( NUMBER , NUMBER , NUMBER ) ; for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( int , java.lang.String . java.lang.String ( int ) ) ; } this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<java.lang.Integer,java.lang.String> ( NUMBER , Restructure . NEVER ) . queueForPurge ( ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<java.lang.Integer,java.lang.String> ( NUMBER , Restructure . NEVER ) . queueForPurge ( ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . getReference ( NUMBER , Restructure . WHEN_NECESSARY ) , is ( nullValue ( ) ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . getReference ( NUMBER , Restructure . WHEN_NECESSARY ) , is ( nullValue ( ) ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> = new org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> <> ( NUMBER , NUMBER , NUMBER ) ; for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( int , java.lang.String . java.lang.String ( int ) ) ; } this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<java.lang.Integer,java.lang.String> ( NUMBER , Restructure . NEVER ) . queueForPurge ( ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<java.lang.Integer,java.lang.String> ( NUMBER , Restructure . NEVER ) . queueForPurge ( ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . getReference ( NUMBER , Restructure . WHEN_NECESSARY ) , is ( nullValue ( ) ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . putIfAbsent ( NUMBER , STRING ) , is ( nullValue ( ) ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . putIfAbsent ( NUMBER , STRING ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . putIfAbsent ( NUMBER , null ) , is ( nullValue ( ) ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . putIfAbsent ( NUMBER , STRING ) , is ( nullValue ( ) ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . putIfAbsent ( null , STRING ) , is ( nullValue ( ) ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . putIfAbsent ( null , STRING ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( null ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . remove ( NUMBER , STRING ) , is ( false ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . remove ( NUMBER , STRING ) , is ( true ) ) ; assertFalse ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . containsKey ( NUMBER ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . isEmpty ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , null ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . remove ( NUMBER , STRING ) , is ( false ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( nullValue ( ) ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . remove ( NUMBER , null ) , is ( true ) ) ; assertFalse ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . containsKey ( NUMBER ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . isEmpty ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . replace ( NUMBER , STRING , STRING ) , is ( false ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . replace ( NUMBER , STRING , STRING ) , is ( true ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , null ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . replace ( NUMBER , STRING , STRING ) , is ( false ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( nullValue ( ) ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . replace ( NUMBER , null , STRING ) , is ( true ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . replace ( NUMBER , STRING ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , null ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . replace ( NUMBER , STRING ) , is ( nullValue ( ) ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . size ( ) , is ( NUMBER ) ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , null ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . isEmpty ( ) , is ( true ) ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , null ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . isEmpty ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . containsKey ( NUMBER ) , is ( false ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . containsKey ( NUMBER ) , is ( false ) ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , null ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . containsKey ( NUMBER ) , is ( true ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . containsKey ( NUMBER ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . containsValue ( STRING ) , is ( false ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . containsValue ( null ) , is ( false ) ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , null ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . containsValue ( STRING ) , is ( true ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . containsValue ( null ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , null ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( null , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . remove ( NUMBER ) , is ( nullValue ( ) ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . remove ( NUMBER ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . remove ( null ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . isEmpty ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . remove ( NUMBER ) , is ( nullValue ( ) ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . remove ( null ) , is ( nullValue ( ) ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . isEmpty ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > java.util.Map<java.lang.Integer,java.lang.String> = new java.util.HashMap<java.lang.Integer,java.lang.String> <> ( ) ; java.util.Map<java.lang.Integer,java.lang.String> . java.lang.String ( NUMBER , STRING ) ; java.util.Map<java.lang.Integer,java.lang.String> . java.lang.String ( NUMBER , null ) ; java.util.Map<java.lang.Integer,java.lang.String> . java.lang.String ( null , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . putAll ( java.util.Map<java.lang.Integer,java.lang.String> ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . size ( ) , is ( NUMBER ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( nullValue ( ) ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( null ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , null ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( null , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . clear ( ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . size ( ) , is ( NUMBER ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . containsKey ( NUMBER ) , is ( false ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . containsKey ( NUMBER ) , is ( false ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . containsKey ( null ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , null ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( null , STRING ) ; java.util.Set<java.lang.Integer> < java.lang.Integer > java.util.Set<java.lang.Integer> = new java.util.HashSet<java.lang.Integer> <> ( ) ; java.util.Set<java.lang.Integer> . boolean ( NUMBER ) ; java.util.Set<java.lang.Integer> . boolean ( NUMBER ) ; java.util.Set<java.lang.Integer> . boolean ( null ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . keySet ( ) , is ( java.util.Set<java.lang.Integer> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , null ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( null , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList <> ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . values ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( null ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.Collections . void ( java.util.List<java.lang.String> , java.util.Comparator<> ) ; java.util.Collections . void ( java.util.List<java.lang.String> , java.util.Comparator<> ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , null ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( null , STRING ) ; java.util.HashMap<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > java.util.HashMap<java.lang.Integer,java.lang.String> = new java.util.HashMap<java.lang.Integer,java.lang.String> <> ( ) ; java.util.HashMap<java.lang.Integer,java.lang.String> . java.lang.String ( NUMBER , STRING ) ; java.util.HashMap<java.lang.Integer,java.lang.String> . java.lang.String ( NUMBER , null ) ; java.util.HashMap<java.lang.Integer,java.lang.String> . java.lang.String ( null , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . entrySet ( ) , is ( java.util.HashMap<java.lang.Integer,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.Integer,java.lang.String>> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> = new org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> <> ( NUMBER , NUMBER , NUMBER ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; java.util.HashMap<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > java.util.HashMap<java.lang.Integer,java.lang.String> = new java.util.HashMap<java.lang.Integer,java.lang.String> <> ( ) ; java.util.HashMap<java.lang.Integer,java.lang.String> . java.lang.String ( NUMBER , STRING ) ; java.util.HashMap<java.lang.Integer,java.lang.String> . java.lang.String ( NUMBER , STRING ) ; java.util.HashMap<java.lang.Integer,java.lang.String> . java.lang.String ( NUMBER , STRING ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . entrySet ( ) , is ( java.util.HashMap<java.lang.Integer,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.Integer,java.lang.String>> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; java.util.Iterator<java.util.Map.Entry<java.lang.Integer,java.lang.String>> < java.util.Map . java.util.Map.Entry<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > > java.util.Iterator<java.util.Map.Entry<java.lang.Integer,java.lang.String>> = this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . entrySet ( ) . iterator ( ) ; java.util.Iterator<java.util.Map.Entry<java.lang.Integer,java.lang.String>> . java.util.Map.Entry<java.lang.Integer,java.lang.String> ( ) ; java.util.Iterator<java.util.Map.Entry<java.lang.Integer,java.lang.String>> . java.util.Map.Entry<java.lang.Integer,java.lang.String> ( ) ; java.util.Iterator<java.util.Map.Entry<java.lang.Integer,java.lang.String>> . void ( ) ; java.util.Iterator<java.util.Map.Entry<java.lang.Integer,java.lang.String>> . java.util.Map.Entry<java.lang.Integer,java.lang.String> ( ) ; assertThat ( java.util.Iterator<java.util.Map.Entry<java.lang.Integer,java.lang.String>> . boolean ( ) , is ( false ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . size ( ) , is ( NUMBER ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . containsKey ( NUMBER ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . put ( NUMBER , STRING ) ; java.util.Iterator<java.util.Map.Entry<java.lang.Integer,java.lang.String>> < java.util.Map . java.util.Map.Entry<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > > java.util.Iterator<java.util.Map.Entry<java.lang.Integer,java.lang.String>> = this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . entrySet ( ) . iterator ( ) ; java.util.Iterator<java.util.Map.Entry<java.lang.Integer,java.lang.String>> . java.util.Map.Entry<java.lang.Integer,java.lang.String> ( ) ; java.util.Iterator<java.util.Map.Entry<java.lang.Integer,java.lang.String>> . java.util.Map.Entry<java.lang.Integer,java.lang.String> ( ) . java.lang.String ( STRING ) ; java.util.Iterator<java.util.Map.Entry<java.lang.Integer,java.lang.String>> . java.util.Map.Entry<java.lang.Integer,java.lang.String> ( ) ; assertThat ( java.util.Iterator<java.util.Map.Entry<java.lang.Integer,java.lang.String>> . boolean ( ) , is ( false ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . size ( ) , is ( NUMBER ) ) ; assertThat ( this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . get ( NUMBER ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) java.lang.Exception { java.util.Map<java.lang.Integer,java.lang.ref.WeakReference<java.lang.String>> < java.lang.Integer , java.lang.ref.WeakReference<java.lang.String> < java.lang.String > > java.util.Map<java.lang.Integer,java.lang.ref.WeakReference<java.lang.String>> = java.util.Collections . java.util.Map<java.lang.Integer,java.lang.ref.WeakReference<java.lang.String>> ( new java.util.WeakHashMap<java.lang.Integer,java.lang.ref.WeakReference<java.lang.String>> < java.lang.Integer , java.lang.ref.WeakReference<java.lang.String> < java.lang.String > > ( ) ) ; StopWatch org.springframework.util.StopWatch = org.springframework.util.StopWatch ( STRING , java.util.Map<java.lang.Integer,java.lang.ref.WeakReference<java.lang.String>> , new org.springframework.util.ConcurrentReferenceHashMapTests.ValueFactory<java.lang.ref.WeakReference<java.lang.String>> < java.lang.ref.WeakReference<java.lang.String> < java.lang.String > > ( ) { @ java.lang.Override public java.lang.ref.WeakReference<java.lang.String> < java.lang.String > java.lang.ref.WeakReference<java.lang.String> ( int int ) { return new java.lang.ref.WeakReference<java.lang.String> <> ( java.lang.String . java.lang.String ( int ) ) ; } } ) ; java.lang.System . java.io.PrintStream . void ( org.springframework.util.StopWatch . prettyPrint ( ) ) ; this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . void ( true ) ; StopWatch org.springframework.util.StopWatch = org.springframework.util.StopWatch ( STRING , this . org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> , new org.springframework.util.ConcurrentReferenceHashMapTests.ValueFactory<java.lang.String> < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( int int ) { return java.lang.String . java.lang.String ( int ) ; } } ) ; java.lang.System . java.io.PrintStream . void ( org.springframework.util.StopWatch . prettyPrint ( ) ) ; assertThat ( org.springframework.util.StopWatch . getTotalTimeSeconds ( ) , is ( lessThan ( org.springframework.util.StopWatch . getTotalTimeSeconds ( ) / NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ref.WeakReference<java.lang.String> < java.lang.String > java.lang.ref.WeakReference<java.lang.String> ( int int ) { return new java.lang.ref.WeakReference<java.lang.String> <> ( java.lang.String . java.lang.String ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( int int ) { return java.lang.String . java.lang.String ( int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache<java.lang.Integer,java.lang.String> . org.springframework.util.ReferenceManager ( ) . createReference ( null , NUMBER , null ) ; }  <METHOD_END>
<METHOD_START> private < V > org.springframework.util.StopWatch org.springframework.util.StopWatch ( java.lang.String java.lang.String , final java.util.Map<java.lang.Integer,V> < java.lang.Integer , V > java.util.Map<java.lang.Integer,V> , org.springframework.util.ConcurrentReferenceHashMapTests.ValueFactory<V> < V > org.springframework.util.ConcurrentReferenceHashMapTests.ValueFactory<V> ) throws java.lang.InterruptedException { StopWatch org.springframework.util.StopWatch = new StopWatch ( java.lang.String ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Map<java.lang.Integer,V> . V ( int , org.springframework.util.ConcurrentReferenceHashMapTests.ValueFactory<V> . V ( int ) ) ; } java.lang.Thread [] java.lang.Thread[] = new java.lang.Thread [ NUMBER ] ; org.springframework.util.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < java.lang.Thread[] . int ; int ++ ) { java.lang.Thread[] [ int ] = new java.lang.Thread ( STRING + int ) { @ java.lang.Override public void void ( ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Map<java.lang.Integer,V> . V ( int ) ; } } } } ; } for ( java.lang.Thread java.lang.Thread : java.lang.Thread[] ) { java.lang.Thread . void ( ) ; } for ( java.lang.Thread java.lang.Thread : java.lang.Thread[] ) { if ( java.lang.Thread . boolean ( ) ) { java.lang.Thread . void ( NUMBER ) ; } } org.springframework.util.StopWatch . stop ( ) ; return org.springframework.util.StopWatch ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Map<java.lang.Integer,V> . V ( int ) ; } } }  <METHOD_END>
<METHOD_START> V V ( int int );  <METHOD_END>
<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void ( int int , float float , int int ) { super( int , float , int ); }  <METHOD_END>
<METHOD_START> public void ( int int , int int ) { super( int , int ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected int int ( java.lang.Object java.lang.Object ) { if ( this . boolean ) { return super. getHash ( java.lang.Object ) ; } this . int = super. getHash ( java.lang.Object ) ; return java.lang.Object == null ? NUMBER : java.lang.Object . int ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.util.ReferenceManager org.springframework.util.ReferenceManager ( ) { return new ReferenceManager ( ) { @ java.lang.Override public org.springframework.util.Reference<K,V> < K , V > org.springframework.util.Reference<K,V> ( Entry < K , V > org.springframework.util.Entry<K,V> , int int , Reference < K , V > org.springframework.util.Reference<K,V> ) { if ( org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache .this . boolean ) { return super. createReference ( org.springframework.util.Entry<K,V> , int , org.springframework.util.Reference<K,V> ) ; } return new org.springframework.util.ConcurrentReferenceHashMapTests.MockReference <> ( org.springframework.util.Entry<K,V> , int , org.springframework.util.Reference<K,V> , org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache .this . java.util.LinkedList<org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V>> ) ; } @ java.lang.Override public org.springframework.util.Reference<K,V> < K , V > org.springframework.util.Reference<K,V> ( ) { if ( org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache .this . boolean ) { return super. pollForPurge ( ) ; } return org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache .this . java.util.LinkedList<org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V>> . boolean ( ) ? null : org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache .this . java.util.LinkedList<org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V>> . org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V> ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.util.Reference<K,V> < K , V > org.springframework.util.Reference<K,V> ( Entry < K , V > org.springframework.util.Entry<K,V> , int int , Reference < K , V > org.springframework.util.Reference<K,V> ) { if ( org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache .this . boolean ) { return super. createReference ( org.springframework.util.Entry<K,V> , int , org.springframework.util.Reference<K,V> ) ; } return new org.springframework.util.ConcurrentReferenceHashMapTests.MockReference <> ( org.springframework.util.Entry<K,V> , int , org.springframework.util.Reference<K,V> , org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache .this . java.util.LinkedList<org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.util.Reference<K,V> < K , V > org.springframework.util.Reference<K,V> ( ) { if ( org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache .this . boolean ) { return super. pollForPurge ( ) ; } return org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache .this . java.util.LinkedList<org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V>> . boolean ( ) ? null : org.springframework.util.ConcurrentReferenceHashMapTests.TestWeakConcurrentCache .this . java.util.LinkedList<org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V>> . org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V> ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V> < K , V > org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V> ( K K , Restructure org.springframework.util.Restructure ) { return ( org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V> < K , V > ) super. getReference ( K , org.springframework.util.Restructure ) ; }  <METHOD_END>
<METHOD_START> public void ( Entry < K , V > org.springframework.util.Entry<K,V> , int int , Reference < K , V > org.springframework.util.Reference<K,V> , java.util.LinkedList<org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V>> < org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V> < K , V > > java.util.LinkedList<org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V>> ) { this . int = int ; this . org.springframework.util.Entry<K,V> = org.springframework.util.Entry<K,V> ; this . org.springframework.util.Reference<K,V> = org.springframework.util.Reference<K,V> ; this . java.util.LinkedList<org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V>> = java.util.LinkedList<org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.util.Entry<K,V> < K , V > org.springframework.util.Entry<K,V> ( ) { return this . org.springframework.util.Entry<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.util.Reference<K,V> < K , V > org.springframework.util.Reference<K,V> ( ) { return this . org.springframework.util.Reference<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . java.util.LinkedList<org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V>> . boolean ( this ) ; this . org.springframework.util.Entry<K,V> = null ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.LinkedList<org.springframework.util.ConcurrentReferenceHashMapTests.MockReference<K,V>> . boolean ( this ) ; }  <METHOD_END>
