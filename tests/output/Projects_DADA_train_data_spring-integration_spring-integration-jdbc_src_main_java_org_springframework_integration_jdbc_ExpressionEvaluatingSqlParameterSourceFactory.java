<METHOD_START> public void ( ) { this . java.util.Map<java.lang.String,?> = java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ) ; this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> = new java.util.HashMap<java.lang.String,org.springframework.integration.jdbc.Expression[]> < java.lang.String , Expression [] > ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { this . java.util.Map<java.lang.String,?> = java.util.Map<java.lang.String,> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> < java.lang.String , Expression [] > java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> = new java.util.HashMap<java.lang.String,org.springframework.integration.jdbc.Expression[]> < java.lang.String , Expression [] > ( java.util.Map<java.lang.String,java.lang.String> . int ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ; java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ; Expression [] org.springframework.integration.jdbc.Expression[] = new Expression [] { org.springframework.integration.jdbc.ExpressionParser . parseExpression ( java.lang.String ) , org.springframework.integration.jdbc.ExpressionParser . parseExpression ( STRING + java.lang.String + STRING ) } ; java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> . put ( java.lang.String , org.springframework.integration.jdbc.Expression[] ) ; } this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> = java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.jdbc.SqlParameterSource org.springframework.integration.jdbc.SqlParameterSource ( final java.lang.Object java.lang.Object ) { return new org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory.ExpressionEvaluatingSqlParameterSource ( java.lang.Object , this . java.util.Map<java.lang.String,> , this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> , true ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.jdbc.SqlParameterSource org.springframework.integration.jdbc.SqlParameterSource ( final java.lang.Object java.lang.Object ) { return new org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory.ExpressionEvaluatingSqlParameterSource ( java.lang.Object , this . java.util.Map<java.lang.String,> , this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { super. afterPropertiesSet ( ) ; this . getEvaluationContext ( ) . setVariable ( STRING , this . java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Object java.lang.Object , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> < java.lang.String , Expression [] > java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> , boolean boolean ) { this . java.lang.Object = java.lang.Object ; this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> = java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> ; this . java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,> ) ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { return this . java.lang.Object ( java.lang.String , false ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , boolean boolean ) throws java.lang.IllegalArgumentException { if ( this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) { java.lang.Object java.lang.Object = this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( ! this . boolean ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; } return java.lang.Object ; } if ( ! this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> . containsKey ( java.lang.String ) ) { Expression [] org.springframework.integration.jdbc.Expression[] = new Expression [] { org.springframework.integration.jdbc.ExpressionParser . parseExpression ( java.lang.String ) , org.springframework.integration.jdbc.ExpressionParser . parseExpression ( STRING + java.lang.String + STRING ) } ; org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory .this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> . put ( java.lang.String , org.springframework.integration.jdbc.Expression[] ) ; this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> . put ( java.lang.String , org.springframework.integration.jdbc.Expression[] ) ; } Expression org.springframework.integration.jdbc.Expression = null ; if ( this . java.lang.Object instanceof java.util.Collection<?> < ? > ) { org.springframework.integration.jdbc.Expression = this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> . get ( java.lang.String ) [ NUMBER ] ; } else { org.springframework.integration.jdbc.Expression = this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.Expression[]> . get ( java.lang.String ) [ NUMBER ] ; } java.lang.Object java.lang.Object = evaluateExpression ( org.springframework.integration.jdbc.Expression , this . java.lang.Object ) ; if ( this . boolean || boolean ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } if ( org.springframework.integration.jdbc.Log . isDebugEnabled ( ) ) { org.springframework.integration.jdbc.Log . debug ( STRING + org.springframework.integration.jdbc.Expression + STRING + java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { try { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String , true ) ; if ( java.lang.Object == java.lang.Object ) { return false ; } } catch ( ExpressionException org.springframework.integration.jdbc.ExpressionException ) { if ( org.springframework.integration.jdbc.Log . isDebugEnabled ( ) ) { org.springframework.integration.jdbc.Log . debug ( STRING , org.springframework.integration.jdbc.ExpressionException ) ; } if ( this . boolean ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } return false ; } return true ; }  <METHOD_END>
