<METHOD_START> protected void ( UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ) { Assert . notNull ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder = org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder ( UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ) { return new org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( null , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.Class<?> < ? > java.lang.Class<?> ) { org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder = org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.Class<> ) ; return org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder . path ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( java.lang.Class<> , java.lang.String , java.lang.Object[] ) ; return org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( null , java.lang.Class<> , java.lang.reflect.Method , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( java.lang.Class<> , java.lang.String , java.lang.Object[] ) ; return org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.Class<> , java.lang.reflect.Method , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( java.lang.Object java.lang.Object ) { Assert . isInstanceOf ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo .class , java.lang.Object , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo = ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo ) java.lang.Object ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo . java.lang.Class<?> ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo . java.lang.reflect.Method ( ) ; java.lang.Object [] java.lang.Object[] = org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo . java.lang.Object[] ( ) ; return org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( null , java.lang.Class<> , java.lang.reflect.Method , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.Object java.lang.Object ) { Assert . isInstanceOf ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo .class , java.lang.Object , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo = ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo ) java.lang.Object ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo . java.lang.Class<?> ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo . java.lang.reflect.Method ( ) ; java.lang.Object [] java.lang.Object[] = org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo . java.lang.Object[] ( ) ; return org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.Class<> , java.lang.reflect.Method , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodArgumentBuilder org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodArgumentBuilder ( java.lang.String java.lang.String ) { return org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodArgumentBuilder ( null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodArgumentBuilder org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodArgumentBuilder ( UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.String java.lang.String ) { RequestMappingInfoHandlerMapping org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfoHandlerMapping = org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfoHandlerMapping ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethod> < HandlerMethod > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethod> = org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfoHandlerMapping . getHandlerMethodsForMappingName ( java.lang.String ) ; if ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethod> == null ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String ) ; } if ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethod> . size ( ) != NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethod> ) ; } HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethod> . get ( NUMBER ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getBeanType ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getMethod ( ) ; return new org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodArgumentBuilder ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.Class<> , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object ... java.lang.Object[] ) { return org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( null , java.lang.Class<> , java.lang.reflect.Method , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object ... java.lang.Object[] ) { return org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , ( java.lang.Class<> != null ? java.lang.Class<> : java.lang.reflect.Method . java.lang.Class<?> ( ) ) , java.lang.reflect.Method , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object ... java.lang.Object[] ) { org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder = org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.Class<> ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.reflect.Method ) ; java.lang.String java.lang.String = org.springframework.web.servlet.mvc.method.annotation.PathMatcher . combine ( java.lang.String , java.lang.String ) ; org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder . path ( java.lang.String ) ; UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = org.springframework.web.servlet.mvc.method.annotation.UriComponents ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.reflect.Method , java.lang.Object[] ) ; return UriComponentsBuilder . newInstance ( ) . uriComponents ( org.springframework.web.servlet.mvc.method.annotation.UriComponents ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ) { if ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder != null ) { return org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder . cloneBuilder ( ) ; } else { return ServletUriComponentsBuilder . fromCurrentServletMapping ( ) ; } }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; RequestMapping org.springframework.web.servlet.mvc.method.annotation.RequestMapping = AnnotatedElementUtils . findMergedAnnotation ( java.lang.Class<> , RequestMapping .class ) ; if ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping == null ) { return STRING ; } java.lang.String [] java.lang.String[] = org.springframework.web.servlet.mvc.method.annotation.RequestMapping . path ( ) ; if ( ObjectUtils . isEmpty ( java.lang.String[] ) || StringUtils . isEmpty ( java.lang.String[] [ NUMBER ] ) ) { return STRING ; } if ( java.lang.String[] . int > NUMBER && org.springframework.web.servlet.mvc.method.annotation.Log . isWarnEnabled ( ) ) { org.springframework.web.servlet.mvc.method.annotation.Log . warn ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } return java.lang.String[] [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; RequestMapping org.springframework.web.servlet.mvc.method.annotation.RequestMapping = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , RequestMapping .class ) ; if ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping == null ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.reflect.Method . java.lang.String ( ) ) ; } java.lang.String [] java.lang.String[] = org.springframework.web.servlet.mvc.method.annotation.RequestMapping . path ( ) ; if ( ObjectUtils . isEmpty ( java.lang.String[] ) || StringUtils . isEmpty ( java.lang.String[] [ NUMBER ] ) ) { return STRING ; } if ( java.lang.String[] . int > NUMBER && org.springframework.web.servlet.mvc.method.annotation.Log . isWarnEnabled ( ) ) { org.springframework.web.servlet.mvc.method.annotation.Log . warn ( STRING + java.lang.reflect.Method . java.lang.String ( ) + STRING ) ; } return java.lang.String[] [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> private static java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Class<?> < ? > java.lang.Class<?> , final java.lang.String java.lang.String , final java.lang.Object ... java.lang.Object[] ) { MethodFilter org.springframework.web.servlet.mvc.method.annotation.MethodFilter = new MethodFilter ( ) { @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; int int = java.lang.reflect.Method . int ( ) ; return ( java.lang.String . boolean ( java.lang.String ) && int == java.lang.Object[] . int ) ; } } ; java.util.Set<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Set<java.lang.reflect.Method> = MethodIntrospector . selectMethods ( java.lang.Class<> , org.springframework.web.servlet.mvc.method.annotation.MethodFilter ) ; if ( java.util.Set<java.lang.reflect.Method> . int ( ) == NUMBER ) { return java.util.Set<java.lang.reflect.Method> . java.util.Iterator<java.lang.reflect.Method> ( ) . java.lang.reflect.Method ( ) ; } else if ( java.util.Set<java.lang.reflect.Method> . int ( ) > NUMBER ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) , java.lang.Class<> . java.lang.String ( ) , java.util.Set<java.lang.reflect.Method> ) ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.lang.Object[] . int + STRING + java.lang.Class<> . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; int int = java.lang.reflect.Method . int ( ) ; return ( java.lang.String . boolean ( java.lang.String ) && int == java.lang.Object[] . int ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.servlet.mvc.method.annotation.UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents ( UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object ... java.lang.Object[] ) { CompositeUriComponentsContributor org.springframework.web.servlet.mvc.method.annotation.CompositeUriComponentsContributor = org.springframework.web.servlet.mvc.method.annotation.CompositeUriComponentsContributor ( ) ; if ( org.springframework.web.servlet.mvc.method.annotation.CompositeUriComponentsContributor == null ) { org.springframework.web.servlet.mvc.method.annotation.Log . debug ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.CompositeUriComponentsContributor = org.springframework.web.servlet.mvc.method.annotation.CompositeUriComponentsContributor ; } int int = java.lang.reflect.Method . int ( ) ; int int = java.lang.Object[] . int ; if ( int != int ) { throw new java.lang.IllegalArgumentException ( STRING + int + STRING + int ) ; } final java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , int ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter . initParameterNameDiscovery ( org.springframework.web.servlet.mvc.method.annotation.ParameterNameDiscoverer ) ; org.springframework.web.servlet.mvc.method.annotation.CompositeUriComponentsContributor . contributeMethodArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.Object[] [ int ] , org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.util.Map<java.lang.String,java.lang.Object> ) ; } return org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder . build ( ) . expand ( new UriComponents . UriComponents ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ? java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) : UriComponents . UriTemplateVariables . SKIP_VALUE ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ? java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) : UriComponents . UriTemplateVariables . SKIP_VALUE ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.servlet.mvc.method.annotation.CompositeUriComponentsContributor org.springframework.web.servlet.mvc.method.annotation.CompositeUriComponentsContributor ( ) { WebApplicationContext org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext = org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext ( ) ; if ( org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext == null ) { return null ; } try { return org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext . getBean ( java.lang.String , CompositeUriComponentsContributor .class ) ; } catch ( NoSuchBeanDefinitionException org.springframework.web.servlet.mvc.method.annotation.NoSuchBeanDefinitionException ) { if ( org.springframework.web.servlet.mvc.method.annotation.Log . isDebugEnabled ( ) ) { org.springframework.web.servlet.mvc.method.annotation.Log . debug ( STRING + java.lang.String + STRING ) ; } return null ; } }  <METHOD_END>
<METHOD_START> private static org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfoHandlerMapping org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfoHandlerMapping ( ) { WebApplicationContext org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext = org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext ( ) ; Assert . notNull ( org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext , STRING ) ; try { return org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext . getBean ( RequestMappingInfoHandlerMapping .class ) ; } catch ( NoUniqueBeanDefinitionException org.springframework.web.servlet.mvc.method.annotation.NoUniqueBeanDefinitionException ) { throw new java.lang.IllegalStateException ( STRING , org.springframework.web.servlet.mvc.method.annotation.NoUniqueBeanDefinitionException ) ; } catch ( NoSuchBeanDefinitionException org.springframework.web.servlet.mvc.method.annotation.NoSuchBeanDefinitionException ) { throw new java.lang.IllegalStateException ( STRING , org.springframework.web.servlet.mvc.method.annotation.NoSuchBeanDefinitionException ) ; } }  <METHOD_END>
<METHOD_START> private static org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext ( ) { RequestAttributes org.springframework.web.servlet.mvc.method.annotation.RequestAttributes = RequestContextHolder . getRequestAttributes ( ) ; if ( org.springframework.web.servlet.mvc.method.annotation.RequestAttributes == null ) { org.springframework.web.servlet.mvc.method.annotation.Log . debug ( STRING ) ; return null ; } HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest = ( ( ServletRequestAttributes ) org.springframework.web.servlet.mvc.method.annotation.RequestAttributes ) . getRequest ( ) ; WebApplicationContext org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext = ( WebApplicationContext ) org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . getAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ; if ( org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext == null ) { org.springframework.web.servlet.mvc.method.annotation.Log . debug ( STRING ) ; return null ; } return org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext ; }  <METHOD_END>
<METHOD_START> public static < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { return T ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public static < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( java.lang.Class<T> , STRING ) ; return T ( java.lang.Class<T> , new org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.ControllerMethodInvocationInterceptor ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static < T > T T ( java.lang.Class<?> < ? > java.lang.Class<?> , org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.ControllerMethodInvocationInterceptor org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.ControllerMethodInvocationInterceptor ) { if ( java.lang.Class<> . boolean ( ) ) { ProxyFactory org.springframework.web.servlet.mvc.method.annotation.ProxyFactory = new ProxyFactory ( EmptyTargetSource . INSTANCE ) ; org.springframework.web.servlet.mvc.method.annotation.ProxyFactory . addInterface ( java.lang.Class<> ) ; org.springframework.web.servlet.mvc.method.annotation.ProxyFactory . addInterface ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo .class ) ; org.springframework.web.servlet.mvc.method.annotation.ProxyFactory . addAdvice ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.ControllerMethodInvocationInterceptor ) ; return ( T ) org.springframework.web.servlet.mvc.method.annotation.ProxyFactory . getProxy ( ) ; } else { Enhancer org.springframework.web.servlet.mvc.method.annotation.Enhancer = new Enhancer ( ) ; org.springframework.web.servlet.mvc.method.annotation.Enhancer . setSuperclass ( java.lang.Class<> ) ; org.springframework.web.servlet.mvc.method.annotation.Enhancer . setInterfaces ( new java.lang.Class<?> < ? > [] { org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo .class } ) ; org.springframework.web.servlet.mvc.method.annotation.Enhancer . setNamingPolicy ( SpringNamingPolicy . INSTANCE ) ; org.springframework.web.servlet.mvc.method.annotation.Enhancer . setCallbackType ( org . springframework . org.springframework.cglib . org.springframework.cglib . org.springframework.cglib .class ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.servlet.mvc.method.annotation.Enhancer . createClass ( ) ; java.lang.Object java.lang.Object = null ; if ( org.springframework.web.servlet.mvc.method.annotation.SpringObjenesis . isWorthTrying ( ) ) { try { java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.SpringObjenesis . newInstance ( java.lang.Class<> , org.springframework.web.servlet.mvc.method.annotation.Enhancer . getUseCache ( ) ) ; } catch ( ObjenesisException org.springframework.web.servlet.mvc.method.annotation.ObjenesisException ) { org.springframework.web.servlet.mvc.method.annotation.Log . debug ( STRING + STRING , org.springframework.web.servlet.mvc.method.annotation.ObjenesisException ) ; } } if ( java.lang.Object == null ) { try { java.lang.Object = ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING + STRING , java.lang.Throwable ) ; } } ( ( Factory ) java.lang.Object ) . setCallbacks ( new Callback [] { org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.ControllerMethodInvocationInterceptor } ) ; return ( T ) java.lang.Object ; } }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( this . org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { return org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( this . org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.Class<> , java.lang.String , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( java.lang.Object java.lang.Object ) { return org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( this . org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodArgumentBuilder org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodArgumentBuilder ( java.lang.String java.lang.String ) { return org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodArgumentBuilder ( this . org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object ... java.lang.Object[] ) { return org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( this . org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.Class<> , java.lang.reflect.Method , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.web.servlet.mvc.method.annotation.MethodProxy ) { if ( java.lang.reflect.Method . boolean ( java.lang.reflect.Method ) ) { return this . java.lang.reflect.Method ; } else if ( java.lang.reflect.Method . boolean ( java.lang.reflect.Method ) ) { return this . java.lang.Object[] ; } else if ( java.lang.reflect.Method . boolean ( java.lang.reflect.Method ) ) { return this . java.lang.Class<> ; } else if ( ReflectionUtils . isObjectMethod ( java.lang.reflect.Method ) ) { return ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.Object , java.lang.Object[] ) ; } else { this . java.lang.reflect.Method = java.lang.reflect.Method ; this . java.lang.Object[] = java.lang.Object[] ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; return ( void .class == java.lang.Class<> ? null : java.lang.Class<> . cast ( java.lang.Object ( java.lang.Class<> , this ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( org . org.aopalliance . org.aopalliance . org.aopalliance org.aopalliance.intercept.MethodInvocation ) throws java.lang.Throwable { return java.lang.Object ( org.aopalliance.intercept.MethodInvocation . getThis ( ) , org.aopalliance.intercept.MethodInvocation . getMethod ( ) , org.aopalliance.intercept.MethodInvocation . getArguments ( ) , null ) ; }  <METHOD_END>
<METHOD_START> java.lang.reflect.Method java.lang.reflect.Method ( )  <METHOD_END>
<METHOD_START> java.lang.Object [] java.lang.Object[] ( )  <METHOD_END>
<METHOD_START> java.lang.Class<?> < ? > java.lang.Class<?> ( )  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.reflect.Method java.lang.reflect.Method ) { this( null , java.lang.Class<> , java.lang.reflect.Method ); }  <METHOD_END>
<METHOD_START> public void ( UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.reflect.Method java.lang.reflect.Method ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.lang.reflect.Method , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder = ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder != null ? org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder : org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( ) ) ; this . java.lang.Class<?> = java.lang.Class<> ; this . java.lang.reflect.Method = java.lang.reflect.Method ; this . java.lang.Object[] = new java.lang.Object [ java.lang.reflect.Method . int ( ) ] ; for ( int int = NUMBER ; int < this . java.lang.Object[] . int ; int ++ ) { this . java.lang.Object[] [ int ] = null ; } }  <METHOD_END>
<METHOD_START> private static org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( ) { UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder = ServletUriComponentsBuilder . fromCurrentServletMapping ( ) ; return UriComponentsBuilder . fromPath ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder . build ( ) . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodArgumentBuilder org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodArgumentBuilder ( int int , java.lang.Object java.lang.Object ) { this . java.lang.Object[] [ int ] = java.lang.Object ; return this ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( this . org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , this . java.lang.Class<> , this . java.lang.reflect.Method , this . java.lang.Object[] ) . build ( false ) . encode ( ) . toUriString ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.Object ... java.lang.Object[] ) { return org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ( this . org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , this . java.lang.Class<> , this . java.lang.reflect.Method , this . java.lang.Object[] ) . build ( false ) . expand ( java.lang.Object[] ) . encode ( ) . toString ( ) ; }  <METHOD_END>
