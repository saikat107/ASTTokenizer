<METHOD_START> @ Test public void void ( ) { BasicCassandraPersistentEntity < org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Notification > org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Notification> = new BasicCassandraPersistentEntity <> ( ClassTypeInformation . from ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Notification .class ) ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Notification> . getTableName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicCassandraPersistentEntity < org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Area > org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Area> = new BasicCassandraPersistentEntity <> ( ClassTypeInformation . from ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Area .class ) ) ; org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Area> . setApplicationContext ( org.springframework.data.cassandra.mapping.ApplicationContext ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Area> . getTableName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.TableNameHolderThingy org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.TableNameHolderThingy = new org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.TableNameHolderThingy ( ) ; org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.TableNameHolderThingy . java.lang.String = STRING ; when ( org.springframework.data.cassandra.mapping.ApplicationContext . getBean ( STRING ) ) . thenReturn ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.TableNameHolderThingy ) ; when ( org.springframework.data.cassandra.mapping.ApplicationContext . containsBean ( STRING ) ) . thenReturn ( true ) ; BasicCassandraPersistentEntity < org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.UserLine > org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.UserLine> = new BasicCassandraPersistentEntity <> ( ClassTypeInformation . from ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.UserLine .class ) ) ; org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.UserLine> . setApplicationContext ( org.springframework.data.cassandra.mapping.ApplicationContext ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.UserLine> . getTableName ( ) . toCql ( ) ) . isEqualTo ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.TableNameHolderThingy . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicCassandraPersistentEntity < org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Message > org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Message> = spy ( new BasicCassandraPersistentEntity <> ( ClassTypeInformation . from ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Message .class ) ) ) ; org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Message> . setTableName ( CqlIdentifier . cqlId ( STRING , false ) ) ; assertThat ( entitySpy . forceQuote ) . isNotPresent ( ) ; org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Message> . setForceQuote ( true ) ; assertThat ( entitySpy . forceQuote ) . contains ( true ) ; verify ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Message> , times ( NUMBER ) ) . setTableName ( isA ( CqlIdentifier .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicCassandraPersistentEntity < org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Message > org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Message> = spy ( new BasicCassandraPersistentEntity <> ( ClassTypeInformation . from ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Message .class ) ) ) ; entitySpy . forceQuote = java.util.Optional . java.util.Optional<java.lang.Boolean> ( true ) ; org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Message> . setForceQuote ( true ) ; assertThat ( entitySpy . forceQuote ) . contains ( true ) ; verify ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.Message> , never ( ) ) . setTableName ( isA ( CqlIdentifier .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicCassandraPersistentEntity < org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.UserLine > org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.UserLine> = new BasicCassandraPersistentEntity <> ( ClassTypeInformation . from ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.UserLine .class ) ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.UserLine> . isUserDefinedType ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicCassandraPersistentEntity < org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.TableWithComposedAnnotation > org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.TableWithComposedAnnotation> = new BasicCassandraPersistentEntity <> ( ClassTypeInformation . from ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.TableWithComposedAnnotation .class ) ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.TableWithComposedAnnotation> . getTableName ( ) ) . isEqualTo ( CqlIdentifier . cqlId ( STRING , true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicCassandraPersistentEntity < org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.PrimaryKeyClassWithComposedAnnotation > org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.PrimaryKeyClassWithComposedAnnotation> = new BasicCassandraPersistentEntity <> ( ClassTypeInformation . from ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.PrimaryKeyClassWithComposedAnnotation .class ) ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntityUnitTests.PrimaryKeyClassWithComposedAnnotation> . isCompositePrimaryKey ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
