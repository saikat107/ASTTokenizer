<METHOD_START> public static < S , E > org.springframework.statemachine.config.StateMachineBuilder.Builder<S,E> < S , E > org.springframework.statemachine.config.StateMachineBuilder.Builder<S,E> ( ) { return new org.springframework.statemachine.config.StateMachineBuilder.Builder<S,E> < S , E > ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { org.springframework.statemachine.config.StateMachineBuilder.BuilderStateMachineConfigurerAdapter<S,E> = new org.springframework.statemachine.config.StateMachineBuilder.BuilderStateMachineConfigurerAdapter<S,E> < S , E > ( ) ; org.springframework.statemachine.config.StateMachineConfigBuilder<S,E> = new StateMachineConfigBuilder < S , E > ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.config.StateMachineModelConfigurer<S,E> < S , E > org.springframework.statemachine.config.StateMachineModelConfigurer<S,E> ( ) { return org.springframework.statemachine.config.StateMachineBuilder.BuilderStateMachineConfigurerAdapter<S,E> . org.springframework.statemachine.config.StateMachineModelBuilder<S,E> ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.config.StateMachineConfigurationConfigurer<S,E> < S , E > org.springframework.statemachine.config.StateMachineConfigurationConfigurer<S,E> ( ) { return org.springframework.statemachine.config.StateMachineBuilder.BuilderStateMachineConfigurerAdapter<S,E> . org.springframework.statemachine.config.StateMachineConfigurationBuilder<S,E> ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.config.StateMachineStateConfigurer<S,E> < S , E > org.springframework.statemachine.config.StateMachineStateConfigurer<S,E> ( ) { return org.springframework.statemachine.config.StateMachineBuilder.BuilderStateMachineConfigurerAdapter<S,E> . org.springframework.statemachine.config.StateMachineStateBuilder<S,E> ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.config.StateMachineTransitionConfigurer<S,E> < S , E > org.springframework.statemachine.config.StateMachineTransitionConfigurer<S,E> ( ) { return org.springframework.statemachine.config.StateMachineBuilder.BuilderStateMachineConfigurerAdapter<S,E> . org.springframework.statemachine.config.StateMachineTransitionBuilder<S,E> ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.config.StateMachine<S,E> < S , E > org.springframework.statemachine.config.StateMachine<S,E> ( ) { try { org.springframework.statemachine.config.StateMachineConfigBuilder<S,E> . apply ( org.springframework.statemachine.config.StateMachineBuilder.BuilderStateMachineConfigurerAdapter<S,E> ) ; StateMachineConfig < S , E > org.springframework.statemachine.config.StateMachineConfig<S,E> = org.springframework.statemachine.config.StateMachineConfigBuilder<S,E> . getOrBuild ( ) ; TransitionsData < S , E > org.springframework.statemachine.config.TransitionsData<S,E> = org.springframework.statemachine.config.StateMachineConfig<S,E> . getTransitions ( ) ; StatesData < S , E > org.springframework.statemachine.config.StatesData<S,E> = org.springframework.statemachine.config.StateMachineConfig<S,E> . getStates ( ) ; ConfigurationData < S , E > org.springframework.statemachine.config.ConfigurationData<S,E> = org.springframework.statemachine.config.StateMachineConfig<S,E> . getStateMachineConfigurationConfig ( ) ; ObjectStateMachineFactory < S , E > org.springframework.statemachine.config.ObjectStateMachineFactory<S,E> = null ; if ( org.springframework.statemachine.config.StateMachineConfig<S,E> . getModel ( ) != null && org.springframework.statemachine.config.StateMachineConfig<S,E> . getModel ( ) . getFactory ( ) != null ) { org.springframework.statemachine.config.ObjectStateMachineFactory<S,E> = new ObjectStateMachineFactory < S , E > ( new DefaultStateMachineModel < S , E > ( org.springframework.statemachine.config.ConfigurationData<S,E> , null , null ) , org.springframework.statemachine.config.StateMachineConfig<S,E> . getModel ( ) . getFactory ( ) ) ; } else { org.springframework.statemachine.config.ObjectStateMachineFactory<S,E> = new ObjectStateMachineFactory < S , E > ( new DefaultStateMachineModel < S , E > ( org.springframework.statemachine.config.ConfigurationData<S,E> , org.springframework.statemachine.config.StatesData<S,E> , org.springframework.statemachine.config.TransitionsData<S,E> ) , null ) ; } org.springframework.statemachine.config.ObjectStateMachineFactory<S,E> . setHandleAutostartup ( org.springframework.statemachine.config.ConfigurationData<S,E> . isAutoStart ( ) ) ; if ( org.springframework.statemachine.config.ConfigurationData<S,E> . getBeanFactory ( ) != null ) { org.springframework.statemachine.config.ObjectStateMachineFactory<S,E> . setBeanFactory ( org.springframework.statemachine.config.ConfigurationData<S,E> . getBeanFactory ( ) ) ; } if ( org.springframework.statemachine.config.ConfigurationData<S,E> . getTaskExecutor ( ) != null ) { org.springframework.statemachine.config.ObjectStateMachineFactory<S,E> . setTaskExecutor ( org.springframework.statemachine.config.ConfigurationData<S,E> . getTaskExecutor ( ) ) ; } else { org.springframework.statemachine.config.ObjectStateMachineFactory<S,E> . setTaskExecutor ( new SyncTaskExecutor ( ) ) ; } if ( org.springframework.statemachine.config.ConfigurationData<S,E> . getTaskScheduler ( ) != null ) { org.springframework.statemachine.config.ObjectStateMachineFactory<S,E> . setTaskScheduler ( org.springframework.statemachine.config.ConfigurationData<S,E> . getTaskScheduler ( ) ) ; } else { org.springframework.statemachine.config.ObjectStateMachineFactory<S,E> . setTaskScheduler ( new ConcurrentTaskScheduler ( ) ) ; } return org.springframework.statemachine.config.ObjectStateMachineFactory<S,E> . getStateMachine ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new StateMachineException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { try { org.springframework.statemachine.config.StateMachineModelBuilder<S,E> ( ) ; org.springframework.statemachine.config.StateMachineTransitionBuilder<S,E> ( ) ; org.springframework.statemachine.config.StateMachineStateBuilder<S,E> ( ) ; org.springframework.statemachine.config.StateMachineConfigurationBuilder<S,E> ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new StateMachineException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigBuilder < S , E > org.springframework.statemachine.config.StateMachineConfigBuilder<S,E> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineConfigBuilder<S,E> . setSharedObject ( StateMachineModelBuilder .class , org.springframework.statemachine.config.StateMachineModelBuilder<S,E> ( ) ) ; org.springframework.statemachine.config.StateMachineConfigBuilder<S,E> . setSharedObject ( StateMachineTransitionBuilder .class , org.springframework.statemachine.config.StateMachineTransitionBuilder<S,E> ( ) ) ; org.springframework.statemachine.config.StateMachineConfigBuilder<S,E> . setSharedObject ( StateMachineStateBuilder .class , org.springframework.statemachine.config.StateMachineStateBuilder<S,E> ( ) ) ; org.springframework.statemachine.config.StateMachineConfigBuilder<S,E> . setSharedObject ( StateMachineConfigurationBuilder .class , org.springframework.statemachine.config.StateMachineConfigurationBuilder<S,E> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigBuilder < S , E > org.springframework.statemachine.config.StateMachineConfigBuilder<S,E> ) throws java.lang.Exception {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( AnnotationBuilder < StateMachineConfig < S , E > > org.springframework.statemachine.config.AnnotationBuilder<org.springframework.statemachine.config.StateMachineConfig<S,E>> ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < S , E > org.springframework.statemachine.config.StateMachineModelConfigurer<S,E> ) throws java.lang.Exception {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < S , E > org.springframework.statemachine.config.StateMachineConfigurationConfigurer<S,E> ) throws java.lang.Exception {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < S , E > org.springframework.statemachine.config.StateMachineStateConfigurer<S,E> ) throws java.lang.Exception {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < S , E > org.springframework.statemachine.config.StateMachineTransitionConfigurer<S,E> ) throws java.lang.Exception {		}  <METHOD_END>
<METHOD_START> protected final org.springframework.statemachine.config.StateMachineModelBuilder<S,E> < S , E > org.springframework.statemachine.config.StateMachineModelBuilder<S,E> ( ) java.lang.Exception { if ( org.springframework.statemachine.config.StateMachineModelBuilder<S,E> != null ) { return org.springframework.statemachine.config.StateMachineModelBuilder<S,E> ; } org.springframework.statemachine.config.StateMachineModelBuilder<S,E> = new StateMachineModelBuilder < S , E > ( ObjectPostProcessor . QUIESCENT_POSTPROCESSOR , true ) ; void ( org.springframework.statemachine.config.StateMachineModelBuilder<S,E> ) ; return org.springframework.statemachine.config.StateMachineModelBuilder<S,E> ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.statemachine.config.StateMachineTransitionBuilder<S,E> < S , E > org.springframework.statemachine.config.StateMachineTransitionBuilder<S,E> ( ) java.lang.Exception { if ( org.springframework.statemachine.config.StateMachineTransitionBuilder<S,E> != null ) { return org.springframework.statemachine.config.StateMachineTransitionBuilder<S,E> ; } org.springframework.statemachine.config.StateMachineTransitionBuilder<S,E> = new StateMachineTransitionBuilder < S , E > ( ObjectPostProcessor . QUIESCENT_POSTPROCESSOR , true ) ; return org.springframework.statemachine.config.StateMachineTransitionBuilder<S,E> ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.statemachine.config.StateMachineStateBuilder<S,E> < S , E > org.springframework.statemachine.config.StateMachineStateBuilder<S,E> ( ) java.lang.Exception { if ( org.springframework.statemachine.config.StateMachineStateBuilder<S,E> != null ) { return org.springframework.statemachine.config.StateMachineStateBuilder<S,E> ; } org.springframework.statemachine.config.StateMachineStateBuilder<S,E> = new StateMachineStateBuilder < S , E > ( ObjectPostProcessor . QUIESCENT_POSTPROCESSOR , true ) ; return org.springframework.statemachine.config.StateMachineStateBuilder<S,E> ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.statemachine.config.StateMachineConfigurationBuilder<S,E> < S , E > org.springframework.statemachine.config.StateMachineConfigurationBuilder<S,E> ( ) java.lang.Exception { if ( org.springframework.statemachine.config.StateMachineConfigurationBuilder<S,E> != null ) { return org.springframework.statemachine.config.StateMachineConfigurationBuilder<S,E> ; } org.springframework.statemachine.config.StateMachineConfigurationBuilder<S,E> = new StateMachineConfigurationBuilder < S , E > ( ObjectPostProcessor . QUIESCENT_POSTPROCESSOR , true ) ; return org.springframework.statemachine.config.StateMachineConfigurationBuilder<S,E> ; }  <METHOD_END>
