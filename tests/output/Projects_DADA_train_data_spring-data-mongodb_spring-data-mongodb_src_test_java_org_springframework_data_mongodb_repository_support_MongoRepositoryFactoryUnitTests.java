<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { when ( org.springframework.data.mongodb.repository.support.MongoTemplate . getConverter ( ) ) . thenReturn ( org.springframework.data.mongodb.repository.support.MongoConverter ) ; when ( org.springframework.data.mongodb.repository.support.MongoConverter . getMappingContext ( ) ) . thenReturn ( org.springframework.data.mongodb.repository.support.MappingContext ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { when ( org.springframework.data.mongodb.repository.support.MappingContext . getRequiredPersistentEntity ( Person .class ) ) . thenReturn ( org.springframework.data.mongodb.repository.support.MongoPersistentEntity ) ; when ( org.springframework.data.mongodb.repository.support.MongoPersistentEntity . getType ( ) ) . thenReturn ( Person .class ) ; MongoRepositoryFactory org.springframework.data.mongodb.repository.support.MongoRepositoryFactory = new MongoRepositoryFactory ( org.springframework.data.mongodb.repository.support.MongoTemplate ) ; MongoEntityInformation < Person , java.io.Serializable > org.springframework.data.mongodb.repository.support.MongoEntityInformation<org.springframework.data.mongodb.repository.support.Person,java.io.Serializable> = org.springframework.data.mongodb.repository.support.MongoRepositoryFactory . getEntityInformation ( Person .class ) ; assertTrue ( org.springframework.data.mongodb.repository.support.MongoEntityInformation<org.springframework.data.mongodb.repository.support.Person,java.io.Serializable> instanceof MappingMongoEntityInformation ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { when ( org.springframework.data.mongodb.repository.support.MappingContext . getRequiredPersistentEntity ( Person .class ) ) . thenReturn ( org.springframework.data.mongodb.repository.support.MongoPersistentEntity ) ; when ( org.springframework.data.mongodb.repository.support.MongoPersistentEntity . getType ( ) ) . thenReturn ( Person .class ) ; MongoRepositoryFactory org.springframework.data.mongodb.repository.support.MongoRepositoryFactory = new MongoRepositoryFactory ( org.springframework.data.mongodb.repository.support.MongoTemplate ) ; org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryUnitTests.MyPersonRepository org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryUnitTests.MyPersonRepository = org.springframework.data.mongodb.repository.support.MongoRepositoryFactory . getRepository ( org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryUnitTests.MyPersonRepository .class ) ; assertThat ( org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryUnitTests.MyPersonRepository , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
