<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.servlet.config.annotation.ViewControllerRegistry = new ViewControllerRegistry ( ) ; this . org.springframework.web.servlet.config.annotation.ViewControllerRegistry . setApplicationContext ( new StaticApplicationContext ( ) ) ; this . org.springframework.web.servlet.config.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; this . org.springframework.web.servlet.config.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNull ( this . org.springframework.web.servlet.config.annotation.ViewControllerRegistry . getHandlerMapping ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.ViewControllerRegistry . addViewController ( STRING ) . setViewName ( STRING ) ; ParameterizableViewController org.springframework.web.servlet.config.annotation.ParameterizableViewController = org.springframework.web.servlet.config.annotation.ParameterizableViewController ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.config.annotation.ParameterizableViewController . getViewName ( ) ) ; assertNull ( org.springframework.web.servlet.config.annotation.ParameterizableViewController . getStatusCode ( ) ) ; assertFalse ( org.springframework.web.servlet.config.annotation.ParameterizableViewController . isStatusOnly ( ) ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.ParameterizableViewController . getApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.ViewControllerRegistry . addViewController ( STRING ) ; ParameterizableViewController org.springframework.web.servlet.config.annotation.ParameterizableViewController = org.springframework.web.servlet.config.annotation.ParameterizableViewController ( STRING ) ; assertNull ( org.springframework.web.servlet.config.annotation.ParameterizableViewController . getViewName ( ) ) ; assertNull ( org.springframework.web.servlet.config.annotation.ParameterizableViewController . getStatusCode ( ) ) ; assertFalse ( org.springframework.web.servlet.config.annotation.ParameterizableViewController . isStatusOnly ( ) ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.ParameterizableViewController . getApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.config.annotation.ViewControllerRegistry . addRedirectViewController ( STRING , STRING ) ; RedirectView org.springframework.web.servlet.config.annotation.RedirectView = org.springframework.web.servlet.config.annotation.RedirectView ( STRING ) ; this . org.springframework.web.servlet.config.annotation.MockHttpServletRequest . setQueryString ( STRING ) ; this . org.springframework.web.servlet.config.annotation.MockHttpServletRequest . setContextPath ( STRING ) ; org.springframework.web.servlet.config.annotation.RedirectView . render ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) , this . org.springframework.web.servlet.config.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.config.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.config.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.config.annotation.MockHttpServletResponse . getRedirectedUrl ( ) ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.RedirectView . getApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.config.annotation.ViewControllerRegistry . addRedirectViewController ( STRING , STRING ) . setContextRelative ( false ) . setKeepQueryParams ( true ) . setStatusCode ( HttpStatus . PERMANENT_REDIRECT ) ; RedirectView org.springframework.web.servlet.config.annotation.RedirectView = org.springframework.web.servlet.config.annotation.RedirectView ( STRING ) ; this . org.springframework.web.servlet.config.annotation.MockHttpServletRequest . setQueryString ( STRING ) ; this . org.springframework.web.servlet.config.annotation.MockHttpServletRequest . setContextPath ( STRING ) ; org.springframework.web.servlet.config.annotation.RedirectView . render ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) , this . org.springframework.web.servlet.config.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.config.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.config.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.annotation.MockHttpServletResponse . getRedirectedUrl ( ) ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.RedirectView . getApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.ViewControllerRegistry . addStatusController ( STRING , HttpStatus . NOT_FOUND ) ; ParameterizableViewController org.springframework.web.servlet.config.annotation.ParameterizableViewController = org.springframework.web.servlet.config.annotation.ParameterizableViewController ( STRING ) ; assertNull ( org.springframework.web.servlet.config.annotation.ParameterizableViewController . getViewName ( ) ) ; assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.servlet.config.annotation.ParameterizableViewController . getStatusCode ( ) ) ; assertTrue ( org.springframework.web.servlet.config.annotation.ParameterizableViewController . isStatusOnly ( ) ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.ParameterizableViewController . getApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.ViewControllerRegistry . addViewController ( STRING ) ; SimpleUrlHandlerMapping org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping = org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping . getOrder ( ) ) ; this . org.springframework.web.servlet.config.annotation.ViewControllerRegistry . setOrder ( NUMBER ) ; org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping = org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.annotation.ParameterizableViewController org.springframework.web.servlet.config.annotation.ParameterizableViewController ( java.lang.String java.lang.String ) { java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping ( ) . getUrlMap ( ) ; ParameterizableViewController org.springframework.web.servlet.config.annotation.ParameterizableViewController = ( ParameterizableViewController ) java.util.Map<java.lang.String,> . get ( java.lang.String ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.ParameterizableViewController ) ; return org.springframework.web.servlet.config.annotation.ParameterizableViewController ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.annotation.RedirectView org.springframework.web.servlet.config.annotation.RedirectView ( java.lang.String java.lang.String ) { ParameterizableViewController org.springframework.web.servlet.config.annotation.ParameterizableViewController = org.springframework.web.servlet.config.annotation.ParameterizableViewController ( java.lang.String ) ; assertNull ( org.springframework.web.servlet.config.annotation.ParameterizableViewController . getViewName ( ) ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.ParameterizableViewController . getView ( ) ) ; assertEquals ( RedirectView .class , org.springframework.web.servlet.config.annotation.ParameterizableViewController . getView ( ) . getClass ( ) ) ; return ( RedirectView ) org.springframework.web.servlet.config.annotation.ParameterizableViewController . getView ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping ( ) { return ( SimpleUrlHandlerMapping ) this . org.springframework.web.servlet.config.annotation.ViewControllerRegistry . getHandlerMapping ( ) ; }  <METHOD_END>
