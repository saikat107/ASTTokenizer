<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object , java.io.DataOutput java.io.DataOutput ) throws java.io.IOException { if ( java.lang.Object instanceof java.lang.Enum<?> < ? > ) { java.lang.Enum<?> < ? > java.lang.Enum<?> = ( java.lang.Enum<?> < ? > ) java.lang.Object ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Enum<> . java.lang.Class<> ( ) ; void ( java.lang.Class<> ) ; DataSerializer . writeClass ( java.lang.Class<> , java.io.DataOutput ) ; java.io.DataOutput . void ( java.lang.Enum<> . int ( ) ) ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public java.lang.Object java.lang.Object ( java.io.DataInput java.io.DataInput ) throws java.io.IOException , java.lang.ClassNotFoundException { java.lang.Class java.lang.Class = DataSerializer . readClass ( java.io.DataInput ) ; if ( java.lang.Class . boolean ( ) ) { void ( java.lang.Class ) ; int int = java.io.DataInput . int ( ) ; return java.util.concurrent.ConcurrentMap<java.lang.Class<?>,java.lang.Enum[]> . java.lang.Enum[] ( java.lang.Class ) [ int ] ; } throw new java.io.IOException ( STRING + java.lang.Class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.Class java.lang.Class ) { if ( ! java.util.concurrent.ConcurrentMap<java.lang.Class<?>,java.lang.Enum[]> . boolean ( java.lang.Class ) ) { java.util.concurrent.ConcurrentMap<java.lang.Class<?>,java.lang.Enum[]> . java.lang.Enum[] ( java.lang.Class , ( java.lang.Enum [] ) java.lang.Class . java.lang.Object[] ( ) ) ; } if ( InternalDataSerializer . getSerializer ( int ( ) ) != null ) { if ( InternalDataSerializer . getSerializer ( java.lang.Class ) == null ) { InternalDataSerializer . unregister ( int ( ) ) ; InternalDataSerializer . register ( java.lang.Class<? extends org.springframework.data.gemfire.serialization.EnumSerializer> ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return java.util.concurrent.ConcurrentMap<java.lang.Class<?>,java.lang.Enum[]> . java.util.Set<java.lang.Class<?>> ( ) . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.concurrent.ConcurrentMap<java.lang.Class<?>,java.lang.Enum[]> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
