<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . value ( STRING ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . value ( STRING ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . value ( equalTo ( STRING ) ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . value ( equalTo ( STRING ) ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . exists ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . exists ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . exists ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . exists ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . doesNotExist ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . doesNotExist ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . doesNotExist ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . doesNotExist ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isEmpty ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isEmpty ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isEmpty ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isNotEmpty ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isNotEmpty ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isNotEmpty ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isNotEmpty ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isNotEmpty ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isNotEmpty ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isNotEmpty ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isNotEmpty ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isArray ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isArray ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isArray ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isMap ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isMap ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isMap ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isBoolean ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isBoolean ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isNumber ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isNumber ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isString ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new JsonPathRequestMatchers ( STRING ) . isString ( ) . match ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
