<METHOD_START> @ Bean @ RestartScope @ ConditionalOnMissingBean public org.springframework.boot.devtools.autoconfigure.LiveReloadServer org.springframework.boot.devtools.autoconfigure.LiveReloadServer ( ) { return new LiveReloadServer ( this . org.springframework.boot.devtools.autoconfigure.DevToolsProperties . getLivereload ( ) . getPort ( ) , Restarter . getInstance ( ) . getThreadFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ EventListener public void void ( ContextRefreshedEvent org.springframework.boot.devtools.autoconfigure.ContextRefreshedEvent ) { org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer ( ) . triggerReload ( ) ; }  <METHOD_END>
<METHOD_START> @ EventListener public void void ( ClassPathChangedEvent org.springframework.boot.devtools.autoconfigure.ClassPathChangedEvent ) { if ( ! org.springframework.boot.devtools.autoconfigure.ClassPathChangedEvent . isRestartRequired ( ) ) { org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer ( ) . triggerReload ( ) ; } }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer ( ) { return new OptionalLiveReloadServer ( this . org.springframework.boot.devtools.autoconfigure.LiveReloadServer ) ; }  <METHOD_END>
<METHOD_START> @ EventListener public void void ( ClassPathChangedEvent org.springframework.boot.devtools.autoconfigure.ClassPathChangedEvent ) { if ( org.springframework.boot.devtools.autoconfigure.ClassPathChangedEvent . isRestartRequired ( ) ) { Restarter . getInstance ( ) . restart ( new FileWatchingFailureHandler ( org.springframework.boot.devtools.autoconfigure.FileSystemWatcherFactory ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.devtools.autoconfigure.ClassPathFileSystemWatcher org.springframework.boot.devtools.autoconfigure.ClassPathFileSystemWatcher ( ) { java.net.URL [] java.net.URL[] = Restarter . getInstance ( ) . getInitialUrls ( ) ; ClassPathFileSystemWatcher org.springframework.boot.devtools.autoconfigure.ClassPathFileSystemWatcher = new ClassPathFileSystemWatcher ( org.springframework.boot.devtools.autoconfigure.FileSystemWatcherFactory ( ) , org.springframework.boot.devtools.autoconfigure.ClassPathRestartStrategy ( ) , java.net.URL[] ) ; org.springframework.boot.devtools.autoconfigure.ClassPathFileSystemWatcher . setStopWatcherOnRestart ( true ) ; return org.springframework.boot.devtools.autoconfigure.ClassPathFileSystemWatcher ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.devtools.autoconfigure.ClassPathRestartStrategy org.springframework.boot.devtools.autoconfigure.ClassPathRestartStrategy ( ) { return new PatternClassPathRestartStrategy ( this . org.springframework.boot.devtools.autoconfigure.DevToolsProperties . getRestart ( ) . getAllExclude ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.autoconfigure.HateoasObjenesisCacheDisabler org.springframework.boot.devtools.autoconfigure.HateoasObjenesisCacheDisabler ( ) { return new HateoasObjenesisCacheDisabler ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.autoconfigure.FileSystemWatcherFactory org.springframework.boot.devtools.autoconfigure.FileSystemWatcherFactory ( ) { return new FileSystemWatcherFactory ( ) { @ java.lang.Override public org.springframework.boot.devtools.autoconfigure.FileSystemWatcher org.springframework.boot.devtools.autoconfigure.FileSystemWatcher ( ) { return org.springframework.boot.devtools.autoconfigure.FileSystemWatcher ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.devtools.autoconfigure.FileSystemWatcher org.springframework.boot.devtools.autoconfigure.FileSystemWatcher ( ) { return org.springframework.boot.devtools.autoconfigure.FileSystemWatcher ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.autoconfigure.FileSystemWatcher org.springframework.boot.devtools.autoconfigure.FileSystemWatcher ( ) { Restart org.springframework.boot.devtools.autoconfigure.Restart = this . org.springframework.boot.devtools.autoconfigure.DevToolsProperties . getRestart ( ) ; FileSystemWatcher org.springframework.boot.devtools.autoconfigure.FileSystemWatcher = new FileSystemWatcher ( true , org.springframework.boot.devtools.autoconfigure.Restart . getPollInterval ( ) , org.springframework.boot.devtools.autoconfigure.Restart . getQuietPeriod ( ) ) ; java.lang.String java.lang.String = org.springframework.boot.devtools.autoconfigure.Restart . getTriggerFile ( ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { org.springframework.boot.devtools.autoconfigure.FileSystemWatcher . setTriggerFilter ( new TriggerFileFilter ( java.lang.String ) ) ; } java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = org.springframework.boot.devtools.autoconfigure.Restart . getAdditionalPaths ( ) ; for ( java.io.File java.io.File : java.util.List<java.io.File> ) { org.springframework.boot.devtools.autoconfigure.FileSystemWatcher . addSourceFolder ( java.io.File . java.io.File ( ) ) ; } return org.springframework.boot.devtools.autoconfigure.FileSystemWatcher ; }  <METHOD_END>
