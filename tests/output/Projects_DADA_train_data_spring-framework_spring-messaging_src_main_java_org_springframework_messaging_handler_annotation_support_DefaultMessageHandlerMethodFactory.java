<METHOD_START> public void void ( ConversionService org.springframework.messaging.handler.annotation.support.ConversionService ) { this . org.springframework.messaging.handler.annotation.support.ConversionService = org.springframework.messaging.handler.annotation.support.ConversionService ; }  <METHOD_END>
<METHOD_START> public void void ( MessageConverter org.springframework.messaging.handler.annotation.support.MessageConverter ) { this . org.springframework.messaging.handler.annotation.support.MessageConverter = org.springframework.messaging.handler.annotation.support.MessageConverter ; }  <METHOD_END>
<METHOD_START> public void void ( Validator org.springframework.messaging.handler.annotation.support.Validator ) { this . org.springframework.messaging.handler.annotation.support.Validator = org.springframework.messaging.handler.annotation.support.Validator ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> ) { this . java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> = java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> ) { if ( java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> == null ) { this . org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolverComposite . clear ( ) ; return; } this . org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolverComposite . addResolvers ( java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.messaging.handler.annotation.support.BeanFactory ) { this . org.springframework.messaging.handler.annotation.support.BeanFactory = org.springframework.messaging.handler.annotation.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.messaging.handler.annotation.support.MessageConverter == null ) { this . org.springframework.messaging.handler.annotation.support.MessageConverter = new GenericMessageConverter ( this . org.springframework.messaging.handler.annotation.support.ConversionService ) ; } if ( this . org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolverComposite . getResolvers ( ) . isEmpty ( ) ) { this . org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolverComposite . addResolvers ( java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.handler.annotation.support.InvocableHandlerMethod org.springframework.messaging.handler.annotation.support.InvocableHandlerMethod ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { InvocableHandlerMethod org.springframework.messaging.handler.annotation.support.InvocableHandlerMethod = new InvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; org.springframework.messaging.handler.annotation.support.InvocableHandlerMethod . setMessageMethodArgumentResolvers ( this . org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolverComposite ) ; return org.springframework.messaging.handler.annotation.support.InvocableHandlerMethod ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> ( ) { java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> = new java.util.ArrayList<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> <> ( ) ; ConfigurableBeanFactory org.springframework.messaging.handler.annotation.support.ConfigurableBeanFactory = ( this . org.springframework.messaging.handler.annotation.support.BeanFactory instanceof ConfigurableBeanFactory ? ( ConfigurableBeanFactory ) this . org.springframework.messaging.handler.annotation.support.BeanFactory : null ) ; java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> . add ( new HeaderMethodArgumentResolver ( this . org.springframework.messaging.handler.annotation.support.ConversionService , org.springframework.messaging.handler.annotation.support.ConfigurableBeanFactory ) ) ; java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> . add ( new HeadersMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> . add ( new MessageMethodArgumentResolver ( this . org.springframework.messaging.handler.annotation.support.MessageConverter ) ) ; if ( this . java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> != null ) { java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> . addAll ( this . java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> ) ; } java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> . add ( new PayloadArgumentResolver ( this . org.springframework.messaging.handler.annotation.support.MessageConverter , this . org.springframework.messaging.handler.annotation.support.Validator ) ) ; return java.util.List<org.springframework.messaging.handler.annotation.support.HandlerMethodArgumentResolver> ; }  <METHOD_END>
