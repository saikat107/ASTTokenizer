<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.BeanMethodPolymorphismTests.Config .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , TestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.BeanMethodPolymorphismTests.OverridingConfig .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . setAllowBeanDefinitionOverriding ( false ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , TestBean .class ) . toString ( ) ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.BeanMethodPolymorphismTests.OverridingConfig .class . java.lang.String ( ) ) ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . setAllowBeanDefinitionOverriding ( false ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , TestBean .class ) . toString ( ) ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.BeanMethodPolymorphismTests.NarrowedOverridingConfig .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . setAllowBeanDefinitionOverriding ( false ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , TestBean .class ) . toString ( ) ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.BeanMethodPolymorphismTests.NarrowedOverridingConfig .class . java.lang.String ( ) ) ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . setAllowBeanDefinitionOverriding ( false ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , TestBean .class ) . toString ( ) ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.BeanMethodPolymorphismTests.ConfigWithOverloading .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . setAllowBeanDefinitionOverriding ( false ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( java.lang.String .class ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.BeanMethodPolymorphismTests.ConfigWithOverloading .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , NUMBER ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . setAllowBeanDefinitionOverriding ( false ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( java.lang.String .class ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.BeanMethodPolymorphismTests.ConfigWithOverloadingAndAdditionalMetadata .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . setAllowBeanDefinitionOverriding ( false ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( java.lang.String .class ) , equalTo ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.BeanMethodPolymorphismTests.ConfigWithOverloadingAndAdditionalMetadata .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , NUMBER ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . setAllowBeanDefinitionOverriding ( false ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( java.lang.String .class ) , equalTo ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.BeanMethodPolymorphismTests.SubConfig .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . setAllowBeanDefinitionOverriding ( false ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( java.lang.String .class ) , equalTo ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.BeanMethodPolymorphismTests.SubConfigWithList .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . setAllowBeanDefinitionOverriding ( false ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( java.lang.String .class ) , equalTo ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.BeanMethodPolymorphismTests.ShadowConfig .class ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( java.lang.String .class ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.BeanMethodPolymorphismTests.Config .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( AnnotationAwareAspectJAutoProxyCreator .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.BeanMethodPolymorphismTests.TestAdvisor .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , TestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Lazy @ java.lang.Override public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new TestBean ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean @ Lazy @ java.lang.Override public org.springframework.context.annotation.BeanMethodPolymorphismTests.ExtendedTestBean org.springframework.context.annotation.BeanMethodPolymorphismTests.ExtendedTestBean ( ) { return new org.springframework.context.annotation.BeanMethodPolymorphismTests.ExtendedTestBean ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer ) { return STRING + java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ Bean @ Lazy java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean @ Lazy java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer ) { return STRING + java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ Bean java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean java.lang.Integer java.lang.Integer ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Bean @ Lazy java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer ) { return STRING + java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ Bean java.lang.Integer java.lang.Integer ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Bean @ Lazy java.lang.String java.lang.String ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { return STRING + java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( new SimpleTraceInterceptor ( ) ); }  <METHOD_END>
