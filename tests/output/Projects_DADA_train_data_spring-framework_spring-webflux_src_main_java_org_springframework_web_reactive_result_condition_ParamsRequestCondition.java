<METHOD_START> public void ( java.lang.String ... java.lang.String[] ) { this( java.util.Collection<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> ( java.lang.String[] ) ); }  <METHOD_END>
<METHOD_START> private void ( java.util.Collection<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> < org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression > java.util.Collection<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> ) { this . java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> = java.util.Collections . java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> ( new java.util.LinkedHashSet<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> <> ( java.util.Collection<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Collection<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> < org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression > java.util.Collection<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> ( java.lang.String ... java.lang.String[] ) { java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> < org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression > java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> = new java.util.LinkedHashSet<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> <> ( ) ; if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> . boolean ( new org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression ( java.lang.String ) ) ; } } return java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.web.reactive.result.condition.NameValueExpression<java.lang.String>> < NameValueExpression < java.lang.String > > java.util.Set<org.springframework.web.reactive.result.condition.NameValueExpression<java.lang.String>> ( ) { return new java.util.LinkedHashSet <> ( this . java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> < org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression > java.util.Collection<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> ( ) { return this . java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.condition.ParamsRequestCondition org.springframework.web.reactive.result.condition.ParamsRequestCondition ( org.springframework.web.reactive.result.condition.ParamsRequestCondition org.springframework.web.reactive.result.condition.ParamsRequestCondition ) { java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> < org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression > java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> = new java.util.LinkedHashSet<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> <> ( this . java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> ) ; java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> . boolean ( org.springframework.web.reactive.result.condition.ParamsRequestCondition . java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> ) ; return new org.springframework.web.reactive.result.condition.ParamsRequestCondition ( java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.condition.ParamsRequestCondition org.springframework.web.reactive.result.condition.ParamsRequestCondition ( ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange ) { for ( org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression : java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> ) { if ( ! org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression . match ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ) { return null ; } } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.web.reactive.result.condition.ParamsRequestCondition org.springframework.web.reactive.result.condition.ParamsRequestCondition , ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange ) { return ( org.springframework.web.reactive.result.condition.ParamsRequestCondition . java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> . int ( ) - this . java.util.Set<org.springframework.web.reactive.result.condition.ParamsRequestCondition.ParamExpression> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange ) { return org.springframework.web.reactive.result.condition.MultiValueMap<java.lang.String,java.lang.String> ( org.springframework.web.reactive.result.condition.ServerWebExchange ) . containsKey ( this . name ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange ) { return this . value . equals ( org.springframework.web.reactive.result.condition.MultiValueMap<java.lang.String,java.lang.String> ( org.springframework.web.reactive.result.condition.ServerWebExchange ) . getFirst ( this . name ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.condition.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.web.reactive.result.condition.MultiValueMap<java.lang.String,java.lang.String> ( ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.result.condition.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.reactive.result.condition.ServerWebExchange . getRequestParams ( ) . subscribe ( ) . peek ( ) ; Assert . notNull ( org.springframework.web.reactive.result.condition.MultiValueMap<java.lang.String,java.lang.String> , STRING ) ; return org.springframework.web.reactive.result.condition.MultiValueMap<java.lang.String,java.lang.String> ; }  <METHOD_END>
