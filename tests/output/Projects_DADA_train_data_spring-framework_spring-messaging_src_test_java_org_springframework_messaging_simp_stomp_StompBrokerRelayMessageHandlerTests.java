<METHOD_START> @ Before public void void ( ) { this . org.springframework.messaging.simp.stomp.StubMessageChannel = new StubMessageChannel ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler = new StompBrokerRelayMessageHandler ( new StubMessageChannel ( ) , this . org.springframework.messaging.simp.stomp.StubMessageChannel , new StubMessageChannel ( ) , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) { @ java.lang.Override protected void void ( ) { publishBrokerAvailableEvent ( ) ; super. startInternal ( ) ; } } ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations = new org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . setTcpClient ( this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { publishBrokerAvailableEvent ( ) ; super. startInternal ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . setVirtualHost ( STRING ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . start ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING , STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ( ) . size ( ) ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . org.springframework.messaging.simp.stomp.StompHeaderAccessor ( NUMBER ) ; assertEquals ( StompCommand . CONNECT , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( StompBrokerRelayMessageHandler . SYSTEM_SESSION_ID , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getSessionId ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getHost ( ) ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . org.springframework.messaging.simp.stomp.StompHeaderAccessor ( NUMBER ) ; assertEquals ( StompCommand . CONNECT , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getSessionId ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getHost ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . setSystemLogin ( STRING ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . setSystemPasscode ( STRING ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . setClientLogin ( STRING ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . setClientPasscode ( STRING ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . start ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING , STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ( ) . size ( ) ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . org.springframework.messaging.simp.stomp.StompHeaderAccessor ( NUMBER ) ; assertEquals ( StompCommand . CONNECT , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getLogin ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getPasscode ( ) ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . org.springframework.messaging.simp.stomp.StompHeaderAccessor ( NUMBER ) ; assertEquals ( StompCommand . CONNECT , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getLogin ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getPasscode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . start ( ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.stomp.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . MESSAGE ) ; org.springframework.messaging.simp.stomp.SimpMessageHeaderAccessor . setSessionId ( STRING ) ; org.springframework.messaging.simp.stomp.SimpMessageHeaderAccessor . setDestination ( STRING ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( MessageBuilder . createMessage ( new byte [ NUMBER ] , org.springframework.messaging.simp.stomp.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ( ) . size ( ) ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . org.springframework.messaging.simp.stomp.StompHeaderAccessor ( NUMBER ) ; assertEquals ( StompCommand . CONNECT , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( StompBrokerRelayMessageHandler . SYSTEM_SESSION_ID , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getSessionId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . start ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING , STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ( ) . size ( ) ) ; assertEquals ( StompCommand . CONNECT , this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . org.springframework.messaging.simp.stomp.StompHeaderAccessor ( NUMBER ) . getCommand ( ) ) ; assertEquals ( StompCommand . CONNECT , this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . org.springframework.messaging.simp.stomp.StompHeaderAccessor ( NUMBER ) . getCommand ( ) ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . void ( org.springframework.messaging.simp.stomp.Message<byte[]> ( StompCommand . MESSAGE , null , null , null ) ) ; Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = this . org.springframework.messaging.simp.stomp.StubMessageChannel . getMessages ( ) . get ( NUMBER ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . getAccessor ( org.springframework.messaging.simp.stomp.Message<byte[]> , StompHeaderAccessor .class ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getSessionId ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getUser ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . start ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . stopInternal ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING , STRING ) ) ; Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = this . org.springframework.messaging.simp.stomp.StubMessageChannel . getMessages ( ) . get ( NUMBER ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . getAccessor ( org.springframework.messaging.simp.stomp.Message<byte[]> , StompHeaderAccessor .class ) ; assertEquals ( StompCommand . ERROR , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getSessionId ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getUser ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . start ( ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . getConnectionCount ( ) ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING , STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . getConnectionCount ( ) ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . stopInternal ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( org.springframework.messaging.simp.stomp.Message<byte[]> ( StompCommand . SEND , STRING , STRING , STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . getConnectionCount ( ) ) ; Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = this . org.springframework.messaging.simp.stomp.StubMessageChannel . getMessages ( ) . get ( NUMBER ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . getAccessor ( org.springframework.messaging.simp.stomp.Message<byte[]> , StompHeaderAccessor .class ) ; assertEquals ( StompCommand . ERROR , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getSessionId ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getUser ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.messaging.simp.stomp.MessageHandler = mock ( MessageHandler .class ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . setSystemSubscriptions ( java.util.Collections . java.util.Map ( STRING , org.springframework.messaging.simp.stomp.MessageHandler ) ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . start ( ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECTED ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setLeaveMutable ( true ) ; MessageHeaders org.springframework.messaging.simp.stomp.MessageHeaders = org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessageHeaders ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . void ( MessageBuilder . createMessage ( new byte [ NUMBER ] , org.springframework.messaging.simp.stomp.MessageHeaders ) ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ( ) . size ( ) ) ; assertEquals ( StompCommand . CONNECT , this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . org.springframework.messaging.simp.stomp.StompHeaderAccessor ( NUMBER ) . getCommand ( ) ) ; assertEquals ( StompCommand . SUBSCRIBE , this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . org.springframework.messaging.simp.stomp.StompHeaderAccessor ( NUMBER ) . getCommand ( ) ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . org.springframework.messaging.simp.stomp.StompHeaderAccessor ( NUMBER ) . getDestination ( ) ) ; Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = org.springframework.messaging.simp.stomp.Message<byte[]> ( StompCommand . MESSAGE , null , null , STRING ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpOperations . void ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ; ArgumentCaptor < Message > org.springframework.messaging.simp.stomp.ArgumentCaptor<org.springframework.messaging.simp.stomp.Message> = ArgumentCaptor . forClass ( Message .class ) ; verify ( org.springframework.messaging.simp.stomp.MessageHandler ) . handleMessage ( org.springframework.messaging.simp.stomp.ArgumentCaptor<org.springframework.messaging.simp.stomp.Message> . capture ( ) ) ; assertSame ( org.springframework.messaging.simp.stomp.Message<byte[]> , org.springframework.messaging.simp.stomp.ArgumentCaptor<org.springframework.messaging.simp.stomp.Message> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.stomp.Message<byte[]> < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECT ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setUser ( new TestPrincipal ( java.lang.String ) ) ; return MessageBuilder . createMessage ( new byte [ NUMBER ] , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessageHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.stomp.Message<byte[]> < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> ( StompCommand org.springframework.messaging.simp.stomp.StompCommand , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . create ( org.springframework.messaging.simp.stomp.StompCommand ) ; if ( java.lang.String != null ) { org.springframework.messaging.simp.stomp.StompHeaderAccessor . setSessionId ( java.lang.String ) ; } if ( java.lang.String != null ) { org.springframework.messaging.simp.stomp.StompHeaderAccessor . setUser ( new TestPrincipal ( java.lang.String ) ) ; } if ( java.lang.String != null ) { org.springframework.messaging.simp.stomp.StompHeaderAccessor . setDestination ( java.lang.String ) ; } org.springframework.messaging.simp.stomp.StompHeaderAccessor . setLeaveMutable ( true ) ; return MessageBuilder . createMessage ( new byte [ NUMBER ] , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessageHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.messaging.simp.stomp.ListenableFutureTask<java.lang.Void> < java.lang.Void > org.springframework.messaging.simp.stomp.ListenableFutureTask<java.lang.Void> ( ) { ListenableFutureTask < java.lang.Void > org.springframework.messaging.simp.stomp.ListenableFutureTask<java.lang.Void> = new ListenableFutureTask <> ( new java.util.concurrent.Callable<java.lang.Void> < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( ) java.lang.Exception { return null ; } } ) ; org.springframework.messaging.simp.stomp.ListenableFutureTask<java.lang.Void> . run ( ) ; return org.springframework.messaging.simp.stomp.ListenableFutureTask<java.lang.Void> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( ) java.lang.Exception { return null ; }  <METHOD_END>
<METHOD_START> private static org.springframework.messaging.simp.stomp.ListenableFutureTask<java.lang.Boolean> < java.lang.Boolean > org.springframework.messaging.simp.stomp.ListenableFutureTask<java.lang.Boolean> ( ) { ListenableFutureTask < java.lang.Boolean > org.springframework.messaging.simp.stomp.ListenableFutureTask<java.lang.Boolean> = new ListenableFutureTask <> ( new java.util.concurrent.Callable<java.lang.Boolean> < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) java.lang.Exception { return null ; } } ) ; org.springframework.messaging.simp.stomp.ListenableFutureTask<java.lang.Boolean> . run ( ) ; return org.springframework.messaging.simp.stomp.ListenableFutureTask<java.lang.Boolean> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) java.lang.Exception { return null ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ( ) { return this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpConnection . java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.stomp.StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor ( int int ) { assertTrue ( STRING + java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ( ) . size ( ) , java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ( ) . size ( ) > int ) ; Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ( ) . get ( int ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.messaging.simp.stomp.Message<byte[]> , StompHeaderAccessor .class ) ; assertNotNull ( org.springframework.messaging.simp.stomp.StompHeaderAccessor ) ; return org.springframework.messaging.simp.stomp.StompHeaderAccessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.simp.stomp.ListenableFuture<java.lang.Void> < java.lang.Void > org.springframework.messaging.simp.stomp.ListenableFuture<java.lang.Void> ( TcpConnectionHandler < byte [] > org.springframework.messaging.simp.stomp.TcpConnectionHandler<byte[]> ) { this . org.springframework.messaging.simp.stomp.TcpConnectionHandler<byte[]> = org.springframework.messaging.simp.stomp.TcpConnectionHandler<byte[]> ; org.springframework.messaging.simp.stomp.TcpConnectionHandler<byte[]> . afterConnected ( this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpConnection ) ; return org.springframework.messaging.simp.stomp.ListenableFutureTask<java.lang.Void> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.simp.stomp.ListenableFuture<java.lang.Void> < java.lang.Void > org.springframework.messaging.simp.stomp.ListenableFuture<java.lang.Void> ( TcpConnectionHandler < byte [] > org.springframework.messaging.simp.stomp.TcpConnectionHandler<byte[]> , ReconnectStrategy org.springframework.messaging.simp.stomp.ReconnectStrategy ) { this . org.springframework.messaging.simp.stomp.TcpConnectionHandler<byte[]> = org.springframework.messaging.simp.stomp.TcpConnectionHandler<byte[]> ; org.springframework.messaging.simp.stomp.TcpConnectionHandler<byte[]> . afterConnected ( this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerTests.StubTcpConnection ) ; return org.springframework.messaging.simp.stomp.ListenableFutureTask<java.lang.Void> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.simp.stomp.ListenableFuture<java.lang.Void> < java.lang.Void > org.springframework.messaging.simp.stomp.ListenableFuture<java.lang.Void> ( ) { return org.springframework.messaging.simp.stomp.ListenableFutureTask<java.lang.Void> ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> ) { this . org.springframework.messaging.simp.stomp.TcpConnectionHandler<byte[]> . handleMessage ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ( ) { return this . java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.simp.stomp.ListenableFuture<java.lang.Void> < java.lang.Void > org.springframework.messaging.simp.stomp.ListenableFuture<java.lang.Void> ( Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> ) { this . java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . add ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ; return org.springframework.messaging.simp.stomp.ListenableFutureTask<java.lang.Void> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable , long long ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable , long long ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
