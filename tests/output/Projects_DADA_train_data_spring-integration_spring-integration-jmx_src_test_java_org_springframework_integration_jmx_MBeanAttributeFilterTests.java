<METHOD_START> @ Test public void void ( ) { while ( org.springframework.integration.jmx.PollableChannel . receive ( NUMBER ) != null ) { } org.springframework.integration.jmx.SourcePollingChannelAdapter . start ( ) ; Message < ? > org.springframework.integration.jmx.Message<?> = org.springframework.integration.jmx.PollableChannel . receive ( long ) ; assertNotNull ( org.springframework.integration.jmx.Message<> ) ; assertEquals ( java.util.HashMap .class , org.springframework.integration.jmx.Message<> . getPayload ( ) . getClass ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.jmx.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String + STRING ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; org.springframework.integration.jmx.SourcePollingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { while ( org.springframework.integration.jmx.PollableChannel . receive ( NUMBER ) != null ) { } org.springframework.integration.jmx.SourcePollingChannelAdapter . start ( ) ; Message < ? > org.springframework.integration.jmx.Message<?> = org.springframework.integration.jmx.PollableChannel . receive ( long ) ; assertNotNull ( org.springframework.integration.jmx.Message<> ) ; assertEquals ( java.util.HashMap .class , org.springframework.integration.jmx.Message<> . getPayload ( ) . getClass ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.jmx.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String + STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) ; java.util.Collections . void ( java.util.List<java.lang.String> ) ; assertThat ( java.util.List<java.lang.String> , contains ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) ) ; org.springframework.integration.jmx.SourcePollingChannelAdapter . stop ( ) ; }  <METHOD_END>
