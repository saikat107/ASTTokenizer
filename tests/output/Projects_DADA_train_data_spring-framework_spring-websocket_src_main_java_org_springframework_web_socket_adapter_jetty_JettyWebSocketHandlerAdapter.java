<METHOD_START> public void ( WebSocketHandler org.springframework.web.socket.adapter.jetty.WebSocketHandler , JettyWebSocketSession org.springframework.web.socket.adapter.jetty.JettyWebSocketSession ) { Assert . notNull ( org.springframework.web.socket.adapter.jetty.WebSocketHandler , STRING ) ; Assert . notNull ( org.springframework.web.socket.adapter.jetty.JettyWebSocketSession , STRING ) ; this . org.springframework.web.socket.adapter.jetty.WebSocketHandler = org.springframework.web.socket.adapter.jetty.WebSocketHandler ; this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession = org.springframework.web.socket.adapter.jetty.JettyWebSocketSession ; }  <METHOD_END>
<METHOD_START> @ OnWebSocketConnect public void void ( Session org.springframework.web.socket.adapter.jetty.Session ) { try { this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession . initializeNativeSession ( org.springframework.web.socket.adapter.jetty.Session ) ; this . org.springframework.web.socket.adapter.jetty.WebSocketHandler . afterConnectionEstablished ( this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { ExceptionWebSocketHandlerDecorator . tryCloseWithError ( this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession , java.lang.Throwable , org.springframework.web.socket.adapter.jetty.Log ) ; } }  <METHOD_END>
<METHOD_START> @ OnWebSocketMessage public void void ( java.lang.String java.lang.String ) { TextMessage org.springframework.web.socket.adapter.jetty.TextMessage = new TextMessage ( java.lang.String ) ; try { this . org.springframework.web.socket.adapter.jetty.WebSocketHandler . handleMessage ( this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession , org.springframework.web.socket.adapter.jetty.TextMessage ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { ExceptionWebSocketHandlerDecorator . tryCloseWithError ( this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession , java.lang.Throwable , org.springframework.web.socket.adapter.jetty.Log ) ; } }  <METHOD_END>
<METHOD_START> @ OnWebSocketMessage public void void ( byte [] byte[] , int int , int int ) { BinaryMessage org.springframework.web.socket.adapter.jetty.BinaryMessage = new BinaryMessage ( byte[] , int , int , true ) ; try { this . org.springframework.web.socket.adapter.jetty.WebSocketHandler . handleMessage ( this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession , org.springframework.web.socket.adapter.jetty.BinaryMessage ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { ExceptionWebSocketHandlerDecorator . tryCloseWithError ( this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession , java.lang.Throwable , org.springframework.web.socket.adapter.jetty.Log ) ; } }  <METHOD_END>
<METHOD_START> @ OnWebSocketFrame public void void ( Frame org.springframework.web.socket.adapter.jetty.Frame ) { if ( OpCode . PONG == org.springframework.web.socket.adapter.jetty.Frame . getOpCode ( ) ) { java.nio.ByteBuffer java.nio.ByteBuffer = org.springframework.web.socket.adapter.jetty.Frame . getPayload ( ) != null ? org.springframework.web.socket.adapter.jetty.Frame . getPayload ( ) : java.nio.ByteBuffer ; PongMessage org.springframework.web.socket.adapter.jetty.PongMessage = new PongMessage ( java.nio.ByteBuffer ) ; try { this . org.springframework.web.socket.adapter.jetty.WebSocketHandler . handleMessage ( this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession , org.springframework.web.socket.adapter.jetty.PongMessage ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { ExceptionWebSocketHandlerDecorator . tryCloseWithError ( this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession , java.lang.Throwable , org.springframework.web.socket.adapter.jetty.Log ) ; } } }  <METHOD_END>
<METHOD_START> @ OnWebSocketClose public void void ( int int , java.lang.String java.lang.String ) { CloseStatus org.springframework.web.socket.adapter.jetty.CloseStatus = new CloseStatus ( int , java.lang.String ) ; try { this . org.springframework.web.socket.adapter.jetty.WebSocketHandler . afterConnectionClosed ( this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession , org.springframework.web.socket.adapter.jetty.CloseStatus ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.web.socket.adapter.jetty.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.adapter.jetty.Log . error ( STRING + this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ OnWebSocketError public void void ( java.lang.Throwable java.lang.Throwable ) { try { this . org.springframework.web.socket.adapter.jetty.WebSocketHandler . handleTransportError ( this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession , java.lang.Throwable ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { ExceptionWebSocketHandlerDecorator . tryCloseWithError ( this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession , java.lang.Throwable , org.springframework.web.socket.adapter.jetty.Log ) ; } }  <METHOD_END>
