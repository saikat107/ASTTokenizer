<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( DestinationResolver org.springframework.jms.support.destination.DestinationResolver ) { this . org.springframework.jms.support.destination.DestinationResolver = org.springframework.jms.support.destination.DestinationResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.support.destination.Destination org.springframework.jms.support.destination.Destination ( Session org.springframework.jms.support.destination.Session , java.lang.String java.lang.String , boolean boolean )			throws org.springframework.jms.support.destination.JMSException { Assert . notNull ( java.lang.String , STRING ) ; Destination org.springframework.jms.support.destination.Destination = this . java.util.Map<java.lang.String,org.springframework.jms.support.destination.Destination> . get ( java.lang.String ) ; if ( org.springframework.jms.support.destination.Destination != null ) { void ( org.springframework.jms.support.destination.Destination , java.lang.String , boolean ) ; } else { try { org.springframework.jms.support.destination.Destination = lookup ( java.lang.String , Destination .class ) ; void ( org.springframework.jms.support.destination.Destination , java.lang.String , boolean ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING , javax.naming.NamingException ) ; } if ( this . boolean ) { org.springframework.jms.support.destination.Destination = this . org.springframework.jms.support.destination.DestinationResolver . resolveDestinationName ( org.springframework.jms.support.destination.Session , java.lang.String , boolean ) ; } else { throw new DestinationResolutionException ( STRING + java.lang.String + STRING , javax.naming.NamingException ) ; } } if ( this . boolean ) { this . java.util.Map<java.lang.String,org.springframework.jms.support.destination.Destination> . put ( java.lang.String , org.springframework.jms.support.destination.Destination ) ; } } return org.springframework.jms.support.destination.Destination ; }  <METHOD_END>
<METHOD_START> protected void void ( Destination org.springframework.jms.support.destination.Destination , java.lang.String java.lang.String , boolean boolean ) { java.lang.Class<?> < ? > java.lang.Class<?> = Queue .class ; if ( boolean ) { java.lang.Class<?> = Topic .class ; } if ( ! java.lang.Class<> . boolean ( org.springframework.jms.support.destination.Destination ) ) { throw new DestinationResolutionException ( STRING + java.lang.String + STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,org.springframework.jms.support.destination.Destination> . remove ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . java.util.Map<java.lang.String,org.springframework.jms.support.destination.Destination> . clear ( ) ; }  <METHOD_END>
