<METHOD_START> @ java.lang.Override protected java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( ) { return EnableJpaAuditing .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.config.BeanDefinitionBuilder org.springframework.data.jpa.repository.config.BeanDefinitionBuilder ( AuditingConfiguration org.springframework.data.jpa.repository.config.AuditingConfiguration ) { BeanDefinitionBuilder org.springframework.data.jpa.repository.config.BeanDefinitionBuilder = super. getAuditHandlerBeanDefinitionBuilder ( org.springframework.data.jpa.repository.config.AuditingConfiguration ) ; return org.springframework.data.jpa.repository.config.BeanDefinitionBuilder . addConstructorArgReference ( JPA_MAPPING_CONTEXT_BEAN_NAME ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.data.jpa.repository.config.AnnotationMetadata , BeanDefinitionRegistry org.springframework.data.jpa.repository.config.BeanDefinitionRegistry ) { Assert . notNull ( org.springframework.data.jpa.repository.config.AnnotationMetadata , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.config.BeanDefinitionRegistry , STRING ) ; void ( org.springframework.data.jpa.repository.config.BeanDefinitionRegistry ) ; super. registerBeanDefinitions ( org.springframework.data.jpa.repository.config.AnnotationMetadata , org.springframework.data.jpa.repository.config.BeanDefinitionRegistry ) ; registerInfrastructureBeanWithId ( BeanDefinitionBuilder . rootBeanDefinition ( AuditingBeanFactoryPostProcessor .class ) . getRawBeanDefinition ( ) , AuditingBeanFactoryPostProcessor .class . java.lang.String ( ) , org.springframework.data.jpa.repository.config.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( BeanDefinition org.springframework.data.jpa.repository.config.BeanDefinition , BeanDefinitionRegistry org.springframework.data.jpa.repository.config.BeanDefinitionRegistry ) { if ( ! org.springframework.data.jpa.repository.config.BeanDefinitionRegistry . containsBeanDefinition ( JPA_MAPPING_CONTEXT_BEAN_NAME ) ) { org.springframework.data.jpa.repository.config.BeanDefinitionRegistry . registerBeanDefinition ( JPA_MAPPING_CONTEXT_BEAN_NAME , new RootBeanDefinition ( JpaMetamodelMappingContextFactoryBean .class ) ) ; } BeanDefinitionBuilder org.springframework.data.jpa.repository.config.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AuditingEntityListener .class ) ; org.springframework.data.jpa.repository.config.BeanDefinitionBuilder . addPropertyValue ( STRING , ParsingUtils . getObjectFactoryBeanDefinition ( java.lang.String ( ) , null ) ) ; registerInfrastructureBeanWithId ( org.springframework.data.jpa.repository.config.BeanDefinitionBuilder . getRawBeanDefinition ( ) , AuditingEntityListener .class . java.lang.String ( ) , org.springframework.data.jpa.repository.config.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.data.jpa.repository.config.BeanDefinitionRegistry ) { if ( org.springframework.data.jpa.repository.config.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { return; } if ( ! ClassUtils . isPresent ( java.lang.String , java.lang.Class<? extends org.springframework.data.jpa.repository.config.JpaAuditingRegistrar> ( ) . java.lang.ClassLoader ( ) ) ) { throw new BeanDefinitionStoreException ( java.lang.String + STRING + STRING + STRING + STRING ) ; } RootBeanDefinition org.springframework.data.jpa.repository.config.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.data.jpa.repository.config.RootBeanDefinition . setBeanClassName ( java.lang.String ) ; org.springframework.data.jpa.repository.config.RootBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.data.jpa.repository.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.data.jpa.repository.config.BeanDefinitionRegistry . registerBeanDefinition ( BEAN_CONFIGURER_ASPECT_BEAN_NAME , new BeanComponentDefinition ( org.springframework.data.jpa.repository.config.RootBeanDefinition , BEAN_CONFIGURER_ASPECT_BEAN_NAME ) . getBeanDefinition ( ) ) ; }  <METHOD_END>
