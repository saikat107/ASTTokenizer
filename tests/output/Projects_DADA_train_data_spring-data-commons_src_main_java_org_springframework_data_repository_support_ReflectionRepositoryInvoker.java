<METHOD_START> public void ( java.lang.Object java.lang.Object , RepositoryMetadata org.springframework.data.repository.support.RepositoryMetadata , ConversionService org.springframework.data.repository.support.ConversionService ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( org.springframework.data.repository.support.RepositoryMetadata , STRING ) ; Assert . notNull ( org.springframework.data.repository.support.ConversionService , STRING ) ; this . java.lang.Object = java.lang.Object ; this . org.springframework.data.repository.support.CrudMethods = org.springframework.data.repository.support.RepositoryMetadata . getCrudMethods ( ) ; this . java.lang.Class<? extends java.io.Serializable> = org.springframework.data.repository.support.RepositoryMetadata . getIdType ( ) ; this . org.springframework.data.repository.support.ConversionService = org.springframework.data.repository.support.ConversionService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.data.repository.support.CrudMethods . hasFindAllMethod ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<java.lang.Object> < java.lang.Object > java.lang.Iterable<java.lang.Object> ( Sort org.springframework.data.repository.support.Sort ) { return java.lang.Iterable<java.lang.Object> ( org.springframework.data.repository.support.Sort ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<java.lang.Object> < java.lang.Object > java.lang.Iterable<java.lang.Object> ( Pageable org.springframework.data.repository.support.Pageable ) { return java.lang.Iterable<java.lang.Object> ( org.springframework.data.repository.support.Pageable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.data.repository.support.CrudMethods . hasSaveMethod ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( T T ) { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.support.CrudMethods . getSaveMethod ( ) . orElseThrow ( ( ) new IllegalStateException ( STRING ) ) ; return T ( java.lang.reflect.Method , T ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.data.repository.support.CrudMethods . hasFindOneMethod ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Optional<T> < T > java.util.Optional<T> ( java.io.Serializable java.io.Serializable ) { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.support.CrudMethods . getFindOneMethod ( ) . orElseThrow ( ( ) new IllegalStateException ( STRING ) ) ; return java.util.Optional<T> ( java.lang.Object ( java.lang.reflect.Method , java.io.Serializable ( java.io.Serializable ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.data.repository.support.CrudMethods . hasDelete ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.Serializable java.io.Serializable ) { Assert . notNull ( java.io.Serializable , STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.support.CrudMethods . getDeleteMethod ( ) . orElseThrow ( ( ) new IllegalStateException ( STRING ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] ; java.util.List<java.lang.Class<? extends java.io.Serializable>> < java.lang.Class<? extends java.io.Serializable> < ? extends java.io.Serializable > > java.util.List<java.lang.Class<? extends java.io.Serializable>> = java.util.Arrays . java.util.List<java.lang.Class<? extends java.io.Serializable>> ( java.lang.Class<> , java.io.Serializable .class ) ; if ( java.util.List<java.lang.Class<? extends java.io.Serializable>> . boolean ( java.lang.Class<> ) ) { java.lang.Object ( java.lang.reflect.Method , java.io.Serializable ( java.io.Serializable ) ) ; } else { java.lang.Object ( java.lang.reflect.Method , this .< java.lang.Object > java.util.Optional<java.lang.Object> ( java.io.Serializable ) . java.lang.Object ( null ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( java.lang.reflect.Method java.lang.reflect.Method , MultiValueMap < java.lang.String , ? extends java.lang.Object > org.springframework.data.repository.support.MultiValueMap<java.lang.String,? extends java.lang.Object> , Pageable org.springframework.data.repository.support.Pageable , Sort org.springframework.data.repository.support.Sort ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; Assert . notNull ( org.springframework.data.repository.support.MultiValueMap<java.lang.String,> , STRING ) ; Assert . notNull ( org.springframework.data.repository.support.Pageable , STRING ) ; Assert . notNull ( org.springframework.data.repository.support.Sort , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; return java.util.Optional ( java.lang.Object ( java.lang.reflect.Method , java.lang.Object[] ( java.lang.reflect.Method , org.springframework.data.repository.support.MultiValueMap<java.lang.String,> , org.springframework.data.repository.support.Pageable , org.springframework.data.repository.support.Sort ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object [] java.lang.Object[] ( java.lang.reflect.Method java.lang.reflect.Method , MultiValueMap < java.lang.String , ? extends java.lang.Object > org.springframework.data.repository.support.MultiValueMap<java.lang.String,? extends java.lang.Object> , Pageable org.springframework.data.repository.support.Pageable , Sort org.springframework.data.repository.support.Sort ) { java.util.List<org.springframework.data.repository.support.MethodParameter> < MethodParameter > java.util.List<org.springframework.data.repository.support.MethodParameter> = new MethodParameters ( java.lang.reflect.Method , java.util.Optional . java.util.Optional ( org.springframework.data.repository.support.AnnotationAttribute ) ) . getParameters ( ) ; if ( java.util.List<org.springframework.data.repository.support.MethodParameter> . isEmpty ( ) ) { return new java.lang.Object [ NUMBER ] ; } java.lang.Object [] java.lang.Object[] = new java.lang.Object [ java.util.List<org.springframework.data.repository.support.MethodParameter> . size ( ) ] ; Sort org.springframework.data.repository.support.Sort = org.springframework.data.repository.support.Pageable . getSortOr ( org.springframework.data.repository.support.Sort ) ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { MethodParameter org.springframework.data.repository.support.MethodParameter = java.util.List<org.springframework.data.repository.support.MethodParameter> . get ( int ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.repository.support.MethodParameter . getParameterType ( ) ; if ( Pageable .class . boolean ( java.lang.Class<> ) ) { java.lang.Object[] [ int ] = org.springframework.data.repository.support.Pageable ; } else if ( Sort .class . boolean ( java.lang.Class<> ) ) { java.lang.Object[] [ int ] = org.springframework.data.repository.support.Sort ; } else { java.lang.String java.lang.String = org.springframework.data.repository.support.MethodParameter . getParameterName ( ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( java.lang.String , ClassUtils . getQualifiedMethodName ( java.lang.reflect.Method ) ) ) ; } java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.data.repository.support.MultiValueMap<java.lang.String,> . get ( java.lang.String ) ) ; java.lang.Object[] [ int ] = java.lang.Class<> . boolean ( java.lang.Object ) ? java.lang.Object : java.lang.Object ( java.lang.Object , org.springframework.data.repository.support.MethodParameter ) ; } } return java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , MethodParameter org.springframework.data.repository.support.MethodParameter ) { try { return org.springframework.data.repository.support.ConversionService . convert ( java.lang.Object , TypeDescriptor . forObject ( java.lang.Object ) , new TypeDescriptor ( org.springframework.data.repository.support.MethodParameter ) ) ; } catch ( ConversionException org.springframework.data.repository.support.ConversionException ) { throw new QueryMethodParameterConversionException ( java.lang.Object , org.springframework.data.repository.support.MethodParameter , org.springframework.data.repository.support.ConversionException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > T T ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object ... java.lang.Object[] ) { return ( T ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.Object , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > java.util.Optional<T> < T > java.util.Optional<T> ( java.lang.Object java.lang.Object ) { return ( java.util.Optional<T> < T > ) ( java.util.Optional .class . boolean ( java.lang.Object ) ? java.lang.Object : java.util.Optional . java.util.Optional ( QueryExecutionConverters . unwrap ( java.lang.Object ) ) ) ; }  <METHOD_END>
<METHOD_START> protected java.io.Serializable java.io.Serializable ( java.io.Serializable java.io.Serializable ) { Assert . notNull ( java.io.Serializable , STRING ) ; return org.springframework.data.repository.support.ConversionService . convert ( java.io.Serializable , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Iterable<java.lang.Object> < java.lang.Object > java.lang.Iterable<java.lang.Object> ( Pageable org.springframework.data.repository.support.Pageable ) { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.support.CrudMethods . getFindAllMethod ( ) . orElseThrow ( ( ) new IllegalStateException ( STRING ) ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; if ( java.lang.Class<?>[] . int == NUMBER ) { return java.lang.Iterable<java.lang.Object> ( java.lang.reflect.Method ) ; } if ( Pageable .class . boolean ( java.lang.Class<?>[] [ NUMBER ] ) ) { return java.lang.Iterable<java.lang.Object> ( java.lang.reflect.Method , org.springframework.data.repository.support.Pageable ) ; } return java.lang.Iterable<java.lang.Object> ( org.springframework.data.repository.support.Pageable . getSort ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Iterable<java.lang.Object> < java.lang.Object > java.lang.Iterable<java.lang.Object> ( Sort org.springframework.data.repository.support.Sort ) { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.support.CrudMethods . getFindAllMethod ( ) . orElseThrow ( ( ) new IllegalStateException ( STRING ) ) ; if ( java.lang.reflect.Method . int ( ) == NUMBER ) { return java.lang.Iterable<java.lang.Object> ( java.lang.reflect.Method ) ; } return java.lang.Iterable<java.lang.Object> ( java.lang.reflect.Method , org.springframework.data.repository.support.Sort ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.Object java.lang.Object ( java.util.List<? extends java.lang.Object> < ? extends java.lang.Object > java.util.List<? extends java.lang.Object> ) { return java.util.List<> == null ? null : java.util.List<> . int ( ) == NUMBER ? java.util.List<> . get ( NUMBER ) : java.util.List<> ; }  <METHOD_END>
