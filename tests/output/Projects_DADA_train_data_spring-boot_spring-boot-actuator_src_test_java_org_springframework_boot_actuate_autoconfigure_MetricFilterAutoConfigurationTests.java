<METHOD_START> @ Test public void void ( ) { MetricFilterProperties org.springframework.boot.actuate.autoconfigure.MetricFilterProperties = new MetricFilterProperties ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.MetricFilterProperties . getGaugeSubmissions ( ) ) . containsExactly ( MetricsFilterSubmission . MERGED ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.MetricFilterProperties . getCounterSubmissions ( ) ) . containsExactly ( MetricsFilterSubmission . MERGED ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class ) ; Filter org.springframework.boot.actuate.autoconfigure.Filter = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( Filter .class ) ; final MockHttpServletRequest org.springframework.boot.actuate.autoconfigure.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; final MockHttpServletResponse org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse = new MockHttpServletResponse ( ) ; FilterChain org.springframework.boot.actuate.autoconfigure.FilterChain = mock ( FilterChain .class ) ; willAnswer ( new Answer < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.boot.actuate.autoconfigure.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse . setStatus ( NUMBER ) ; return null ; } } ) . given ( org.springframework.boot.actuate.autoconfigure.FilterChain ) . doFilter ( org.springframework.boot.actuate.autoconfigure.MockHttpServletRequest , org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse ) ; org.springframework.boot.actuate.autoconfigure.Filter . doFilter ( org.springframework.boot.actuate.autoconfigure.MockHttpServletRequest , org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse , org.springframework.boot.actuate.autoconfigure.FilterChain ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) ) . increment ( STRING ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( GaugeService .class ) ) . submit ( eq ( STRING ) , anyDouble ( ) ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.boot.actuate.autoconfigure.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse . setStatus ( NUMBER ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class ) ; Filter org.springframework.boot.actuate.autoconfigure.Filter = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( Filter .class ) ; MockMvc org.springframework.boot.actuate.autoconfigure.MockMvc = MockMvcBuilders . standaloneSetup ( new org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.MetricFilterTestController ( ) ) . addFilter ( org.springframework.boot.actuate.autoconfigure.Filter ) . build ( ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) ) . increment ( STRING ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( GaugeService .class ) ) . submit ( eq ( STRING ) , anyDouble ( ) ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class ) ; Filter org.springframework.boot.actuate.autoconfigure.Filter = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( Filter .class ) ; MockMvc org.springframework.boot.actuate.autoconfigure.MockMvc = MockMvcBuilders . standaloneSetup ( new org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.MetricFilterTestController ( ) ) . addFilter ( org.springframework.boot.actuate.autoconfigure.Filter ) . build ( ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) ) . increment ( STRING ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( GaugeService .class ) ) . submit ( eq ( STRING ) , anyDouble ( ) ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class ) ; Filter org.springframework.boot.actuate.autoconfigure.Filter = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( Filter .class ) ; MockMvc org.springframework.boot.actuate.autoconfigure.MockMvc = MockMvcBuilders . standaloneSetup ( new org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.MetricFilterTestController ( ) ) . addFilter ( org.springframework.boot.actuate.autoconfigure.Filter ) . build ( ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) ) . increment ( STRING ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( GaugeService .class ) ) . submit ( eq ( STRING ) , anyDouble ( ) ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class ) ; Filter org.springframework.boot.actuate.autoconfigure.Filter = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( Filter .class ) ; MockMvc org.springframework.boot.actuate.autoconfigure.MockMvc = MockMvcBuilders . standaloneSetup ( new org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.MetricFilterTestController ( ) ) . addFilter ( org.springframework.boot.actuate.autoconfigure.Filter ) . build ( ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) ) . increment ( STRING ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( GaugeService .class ) ) . submit ( eq ( STRING ) , anyDouble ( ) ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class ) ; Filter org.springframework.boot.actuate.autoconfigure.Filter = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( Filter .class ) ; MockMvc org.springframework.boot.actuate.autoconfigure.MockMvc = MockMvcBuilders . standaloneSetup ( new org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.MetricFilterTestController ( ) ) . addFilter ( org.springframework.boot.actuate.autoconfigure.Filter ) . build ( ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) ) . increment ( STRING ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( GaugeService .class ) ) . submit ( eq ( STRING ) , anyDouble ( ) ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class ) ; Filter org.springframework.boot.actuate.autoconfigure.Filter = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( Filter .class ) ; MockMvc org.springframework.boot.actuate.autoconfigure.MockMvc = MockMvcBuilders . standaloneSetup ( new org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.MetricFilterTestController ( ) ) . addFilter ( org.springframework.boot.actuate.autoconfigure.Filter ) . build ( ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) , times ( NUMBER ) ) . increment ( STRING ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( GaugeService .class ) , times ( NUMBER ) ) . submit ( eq ( STRING ) , anyDouble ( ) ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class , org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.RedirectFilter .class ) ; MetricsFilter org.springframework.boot.actuate.autoconfigure.MetricsFilter = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( MetricsFilter .class ) ; MockMvc org.springframework.boot.actuate.autoconfigure.MockMvc = MockMvcBuilders . standaloneSetup ( new org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.MetricFilterTestController ( ) ) . addFilter ( org.springframework.boot.actuate.autoconfigure.MetricsFilter ) . addFilter ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.RedirectFilter .class ) ) . build ( ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . is3xxRedirection ( ) ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . is3xxRedirection ( ) ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) , times ( NUMBER ) ) . increment ( STRING ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( GaugeService .class ) , times ( NUMBER ) ) . submit ( eq ( STRING ) , anyDouble ( ) ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( MetricFilterAutoConfiguration .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( Filter .class ) . size ( ) ) . isEqualTo ( NUMBER ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( Filter .class ) . size ( ) ) . isEqualTo ( NUMBER ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class ) ; Filter org.springframework.boot.actuate.autoconfigure.Filter = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( Filter .class ) ; MockMvc org.springframework.boot.actuate.autoconfigure.MockMvc = MockMvcBuilders . standaloneSetup ( new org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.MetricFilterTestController ( ) ) . addFilter ( org.springframework.boot.actuate.autoconfigure.Filter ) . build ( ) ; try { org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isInternalServerError ( ) ) ; } catch ( NestedServletException org.springframework.boot.actuate.autoconfigure.NestedServletException ) { } verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) ) . increment ( STRING ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( GaugeService .class ) ) . submit ( eq ( STRING ) , anyDouble ( ) ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class ) ; GaugeService org.springframework.boot.actuate.autoconfigure.GaugeService = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( GaugeService .class ) ; willThrow ( new java.lang.IllegalStateException ( ) ) . given ( org.springframework.boot.actuate.autoconfigure.GaugeService ) . submit ( anyString ( ) , anyDouble ( ) ) ; Filter org.springframework.boot.actuate.autoconfigure.Filter = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( Filter .class ) ; MockMvc org.springframework.boot.actuate.autoconfigure.MockMvc = MockMvcBuilders . standaloneSetup ( new org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.MetricFilterTestController ( ) ) . addFilter ( org.springframework.boot.actuate.autoconfigure.Filter ) . build ( ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) ) . increment ( STRING ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( GaugeService .class ) ) . submit ( eq ( STRING ) , anyDouble ( ) ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class ) ; MetricsFilter org.springframework.boot.actuate.autoconfigure.MetricsFilter = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( MetricsFilter .class ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; MockMvc org.springframework.boot.actuate.autoconfigure.MockMvc = MockMvcBuilders . standaloneSetup ( new org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.MetricFilterTestController ( java.util.concurrent.CountDownLatch ) ) . addFilter ( org.springframework.boot.actuate.autoconfigure.MetricsFilter ) . build ( ) ; java.lang.String java.lang.String = MetricsFilter .class . java.lang.String ( ) + STRING ; MvcResult org.springframework.boot.actuate.autoconfigure.MvcResult = org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( post ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( request ( ) . asyncStarted ( ) ) . andExpect ( request ( ) . attribute ( java.lang.String , is ( notNullValue ( ) ) ) ) . andReturn ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( asyncDispatch ( org.springframework.boot.actuate.autoconfigure.MvcResult ) ) . andExpect ( status ( ) . isCreated ( ) ) . andExpect ( request ( ) . attribute ( java.lang.String , is ( nullValue ( ) ) ) ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) ) . increment ( STRING ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class ) ; MetricsFilter org.springframework.boot.actuate.autoconfigure.MetricsFilter = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( MetricsFilter .class ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; MockMvc org.springframework.boot.actuate.autoconfigure.MockMvc = MockMvcBuilders . standaloneSetup ( new org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.MetricFilterTestController ( java.util.concurrent.CountDownLatch ) ) . addFilter ( org.springframework.boot.actuate.autoconfigure.MetricsFilter ) . build ( ) ; java.lang.String java.lang.String = MetricsFilter .class . java.lang.String ( ) + STRING ; MvcResult org.springframework.boot.actuate.autoconfigure.MvcResult = org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( post ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( request ( ) . asyncStarted ( ) ) . andExpect ( request ( ) . attribute ( java.lang.String , is ( notNullValue ( ) ) ) ) . andReturn ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; try { org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( asyncDispatch ( org.springframework.boot.actuate.autoconfigure.MvcResult ) ) ; fail ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( org.springframework.boot.actuate.autoconfigure.MvcResult . getRequest ( ) . getAttribute ( java.lang.String ) ) . isNull ( ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) ) . increment ( STRING ) ; } finally { org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class , org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.ServiceUnavailableFilter .class ) ; MetricsFilter org.springframework.boot.actuate.autoconfigure.MetricsFilter = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( MetricsFilter .class ) ; MockMvc org.springframework.boot.actuate.autoconfigure.MockMvc = MockMvcBuilders . standaloneSetup ( new org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.MetricFilterTestController ( ) ) . addFilter ( org.springframework.boot.actuate.autoconfigure.MetricsFilter ) . addFilter ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.ServiceUnavailableFilter .class ) ) . build ( ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isServiceUnavailable ( ) ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isServiceUnavailable ( ) ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) , times ( NUMBER ) ) . increment ( STRING ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( GaugeService .class ) , times ( NUMBER ) ) . submit ( eq ( STRING ) , anyDouble ( ) ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; Filter org.springframework.boot.actuate.autoconfigure.Filter = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( Filter .class ) ; final MockHttpServletRequest org.springframework.boot.actuate.autoconfigure.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; final MockHttpServletResponse org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse = new MockHttpServletResponse ( ) ; FilterChain org.springframework.boot.actuate.autoconfigure.FilterChain = mock ( FilterChain .class ) ; willAnswer ( new Answer < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.boot.actuate.autoconfigure.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse . setStatus ( NUMBER ) ; return null ; } } ) . given ( org.springframework.boot.actuate.autoconfigure.FilterChain ) . doFilter ( org.springframework.boot.actuate.autoconfigure.MockHttpServletRequest , org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse ) ; org.springframework.boot.actuate.autoconfigure.Filter . doFilter ( org.springframework.boot.actuate.autoconfigure.MockHttpServletRequest , org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse , org.springframework.boot.actuate.autoconfigure.FilterChain ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( GaugeService .class ) ) . submit ( eq ( STRING ) , anyDouble ( ) ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( GaugeService .class ) ) . submit ( eq ( STRING ) , anyDouble ( ) ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) ) . increment ( eq ( STRING ) ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) ) . increment ( eq ( STRING ) ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.boot.actuate.autoconfigure.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse . setStatus ( NUMBER ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; Filter org.springframework.boot.actuate.autoconfigure.Filter = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( Filter .class ) ; final MockHttpServletRequest org.springframework.boot.actuate.autoconfigure.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; final MockHttpServletResponse org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse = new MockHttpServletResponse ( ) ; FilterChain org.springframework.boot.actuate.autoconfigure.FilterChain = mock ( FilterChain .class ) ; willAnswer ( new Answer < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.boot.actuate.autoconfigure.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse . setStatus ( NUMBER ) ; return null ; } } ) . given ( org.springframework.boot.actuate.autoconfigure.FilterChain ) . doFilter ( org.springframework.boot.actuate.autoconfigure.MockHttpServletRequest , org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse ) ; org.springframework.boot.actuate.autoconfigure.Filter . doFilter ( org.springframework.boot.actuate.autoconfigure.MockHttpServletRequest , org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse , org.springframework.boot.actuate.autoconfigure.FilterChain ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( GaugeService .class ) , never ( ) ) . submit ( anyString ( ) , anyDouble ( ) ) ; verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) , never ( ) ) . increment ( anyString ( ) ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.boot.actuate.autoconfigure.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse . setStatus ( NUMBER ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.Config .class , MetricFilterAutoConfiguration .class ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; Filter org.springframework.boot.actuate.autoconfigure.Filter = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( Filter .class ) ; final MockHttpServletRequest org.springframework.boot.actuate.autoconfigure.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; final MockHttpServletResponse org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse = new MockHttpServletResponse ( ) ; FilterChain org.springframework.boot.actuate.autoconfigure.FilterChain = mock ( FilterChain .class ) ; willAnswer ( new Answer < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.boot.actuate.autoconfigure.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse . setStatus ( NUMBER ) ; org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse . setCommitted ( true ) ; throw new java.io.IOException ( ) ; } } ) . given ( org.springframework.boot.actuate.autoconfigure.FilterChain ) . doFilter ( org.springframework.boot.actuate.autoconfigure.MockHttpServletRequest , org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse ) ; try { org.springframework.boot.actuate.autoconfigure.Filter . doFilter ( org.springframework.boot.actuate.autoconfigure.MockHttpServletRequest , org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse , org.springframework.boot.actuate.autoconfigure.FilterChain ) ; fail ( ) ; } catch ( java.io.IOException java.io.IOException ) { } verify ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( CounterService .class ) ) . increment ( eq ( STRING ) ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.boot.actuate.autoconfigure.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse . setStatus ( NUMBER ) ; org.springframework.boot.actuate.autoconfigure.MockHttpServletResponse . setCommitted ( true ) ; throw new java.io.IOException ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.CounterService org.springframework.boot.actuate.autoconfigure.CounterService ( ) { return mock ( CounterService .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.GaugeService org.springframework.boot.actuate.autoconfigure.GaugeService ( ) { return mock ( GaugeService .class ) ; }  <METHOD_END>
<METHOD_START> void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> void ( java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { this . java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( @ PathVariable java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( @ PathVariable java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) @ ResponseStatus ( HttpStatus . NOT_FOUND ) @ ResponseBody public java.lang.String java.lang.String ( @ PathVariable java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ ResponseBody @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public org.springframework.boot.actuate.autoconfigure.DeferredResult<org.springframework.boot.actuate.autoconfigure.ResponseEntity<java.lang.String>> < ResponseEntity < java.lang.String > > org.springframework.boot.actuate.autoconfigure.DeferredResult<org.springframework.boot.actuate.autoconfigure.ResponseEntity<java.lang.String>> ( ) { final DeferredResult < ResponseEntity < java.lang.String > > org.springframework.boot.actuate.autoconfigure.DeferredResult<org.springframework.boot.actuate.autoconfigure.ResponseEntity<java.lang.String>> = new DeferredResult <> ( ) ; new java.lang.Thread ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { try { org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.MetricFilterTestController .this . java.util.concurrent.CountDownLatch . void ( ) ; org.springframework.boot.actuate.autoconfigure.DeferredResult<org.springframework.boot.actuate.autoconfigure.ResponseEntity<java.lang.String>> . setResult ( new ResponseEntity <> ( STRING , HttpStatus . CREATED ) ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {					} } } ) . void ( ) ; return org.springframework.boot.actuate.autoconfigure.DeferredResult<org.springframework.boot.actuate.autoconfigure.ResponseEntity<java.lang.String>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.MetricFilterTestController .this . java.util.concurrent.CountDownLatch . void ( ) ; org.springframework.boot.actuate.autoconfigure.DeferredResult<org.springframework.boot.actuate.autoconfigure.ResponseEntity<java.lang.String>> . setResult ( new ResponseEntity <> ( STRING , HttpStatus . CREATED ) ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {					} }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public org.springframework.boot.actuate.autoconfigure.DeferredResult<org.springframework.boot.actuate.autoconfigure.ResponseEntity<java.lang.String>> < ResponseEntity < java.lang.String > > org.springframework.boot.actuate.autoconfigure.DeferredResult<org.springframework.boot.actuate.autoconfigure.ResponseEntity<java.lang.String>> ( ) { final DeferredResult < ResponseEntity < java.lang.String > > org.springframework.boot.actuate.autoconfigure.DeferredResult<org.springframework.boot.actuate.autoconfigure.ResponseEntity<java.lang.String>> = new DeferredResult <> ( ) ; new java.lang.Thread ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { try { org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.MetricFilterTestController .this . java.util.concurrent.CountDownLatch . void ( ) ; org.springframework.boot.actuate.autoconfigure.DeferredResult<org.springframework.boot.actuate.autoconfigure.ResponseEntity<java.lang.String>> . setErrorResult ( new java.lang.Exception ( STRING ) ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {					} } } ) . void ( ) ; return org.springframework.boot.actuate.autoconfigure.DeferredResult<org.springframework.boot.actuate.autoconfigure.ResponseEntity<java.lang.String>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfigurationTests.MetricFilterTestController .this . java.util.concurrent.CountDownLatch . void ( ) ; org.springframework.boot.actuate.autoconfigure.DeferredResult<org.springframework.boot.actuate.autoconfigure.ResponseEntity<java.lang.String>> . setErrorResult ( new java.lang.Exception ( STRING ) ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {					} }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.boot.actuate.autoconfigure.HttpServletRequest , HttpServletResponse org.springframework.boot.actuate.autoconfigure.HttpServletResponse , FilterChain org.springframework.boot.actuate.autoconfigure.FilterChain )						throws org.springframework.boot.actuate.autoconfigure.ServletException , java.io.IOException { org.springframework.boot.actuate.autoconfigure.HttpServletResponse . sendRedirect ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.boot.actuate.autoconfigure.HttpServletRequest , HttpServletResponse org.springframework.boot.actuate.autoconfigure.HttpServletResponse , FilterChain org.springframework.boot.actuate.autoconfigure.FilterChain )						throws org.springframework.boot.actuate.autoconfigure.ServletException , java.io.IOException { org.springframework.boot.actuate.autoconfigure.HttpServletResponse . sendError ( HttpStatus . SERVICE_UNAVAILABLE . value ( ) ) ; }  <METHOD_END>
