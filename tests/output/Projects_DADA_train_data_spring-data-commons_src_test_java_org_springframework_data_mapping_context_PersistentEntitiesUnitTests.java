<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new PersistentEntities ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.mapping.context.SampleMappingContext . hasPersistentEntityFor ( org.springframework.data.mapping.context.PersistentEntitiesUnitTests.Sample .class ) ) . thenReturn ( false ) ; when ( org.springframework.data.mapping.context.SampleMappingContext . hasPersistentEntityFor ( org.springframework.data.mapping.context.PersistentEntitiesUnitTests.Sample .class ) ) . thenReturn ( true ) ; new PersistentEntities ( java.util.Arrays . java.util.List ( org.springframework.data.mapping.context.SampleMappingContext , org.springframework.data.mapping.context.SampleMappingContext ) ) . getPersistentEntity ( org.springframework.data.mapping.context.PersistentEntitiesUnitTests.Sample .class ) ; verify ( org.springframework.data.mapping.context.SampleMappingContext , times ( NUMBER ) ) . hasPersistentEntityFor ( org.springframework.data.mapping.context.PersistentEntitiesUnitTests.Sample .class ) ; verify ( org.springframework.data.mapping.context.SampleMappingContext , times ( NUMBER ) ) . getRequiredPersistentEntity ( org.springframework.data.mapping.context.PersistentEntitiesUnitTests.Sample .class ) ; verify ( org.springframework.data.mapping.context.SampleMappingContext , times ( NUMBER ) ) . hasPersistentEntityFor ( org.springframework.data.mapping.context.PersistentEntitiesUnitTests.Sample .class ) ; verify ( org.springframework.data.mapping.context.SampleMappingContext , times ( NUMBER ) ) . getRequiredPersistentEntity ( org.springframework.data.mapping.context.PersistentEntitiesUnitTests.Sample .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SampleMappingContext org.springframework.data.mapping.context.SampleMappingContext = new SampleMappingContext ( ) ; org.springframework.data.mapping.context.SampleMappingContext . setInitialEntitySet ( java.util.Collections . java.util.Set<java.lang.Class<org.springframework.data.mapping.context.PersistentEntitiesUnitTests.Sample>> ( org.springframework.data.mapping.context.PersistentEntitiesUnitTests.Sample .class ) ) ; org.springframework.data.mapping.context.SampleMappingContext . initialize ( ) ; PersistentEntities org.springframework.data.mapping.context.PersistentEntities = new PersistentEntities ( java.util.Collections . java.util.List ( org.springframework.data.mapping.context.SampleMappingContext ) ) ; assertThat ( org.springframework.data.mapping.context.PersistentEntities . getPersistentEntity ( org.springframework.data.mapping.context.PersistentEntitiesUnitTests.Sample .class ) ) . isPresent ( ) ; assertThat ( org.springframework.data.mapping.context.PersistentEntities . getPersistentEntity ( java.lang.Object .class ) ) . isNotPresent ( ) ; assertThat ( org.springframework.data.mapping.context.PersistentEntities . getManagedTypes ( ) ) . contains ( ClassTypeInformation . from ( org.springframework.data.mapping.context.PersistentEntitiesUnitTests.Sample .class ) ) ; assertThat ( org.springframework.data.mapping.context.PersistentEntities . getPersistentEntity ( org.springframework.data.mapping.context.PersistentEntitiesUnitTests.Sample .class ) ) . hasValueSatisfying ( it -> assertThat ( entities ) . contains ( it ) ) ; }  <METHOD_END>
