<METHOD_START> protected void ( Twitter org.springframework.integration.twitter.inbound.Twitter , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.integration.twitter.inbound.Twitter , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; this . org.springframework.integration.twitter.inbound.Twitter = org.springframework.integration.twitter.inbound.Twitter ; if ( this . org.springframework.integration.twitter.inbound.Twitter . isAuthorized ( ) ) { UserOperations org.springframework.integration.twitter.inbound.UserOperations = this . org.springframework.integration.twitter.inbound.Twitter . userOperations ( ) ; java.lang.String += STRING + org.springframework.integration.twitter.inbound.UserOperations . getProfileId ( ) ; } this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( MetadataStore org.springframework.integration.twitter.inbound.MetadataStore ) { this . org.springframework.integration.twitter.inbound.MetadataStore = org.springframework.integration.twitter.inbound.MetadataStore ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.twitter.inbound.Twitter org.springframework.integration.twitter.inbound.Twitter ( ) { return this . org.springframework.integration.twitter.inbound.Twitter ; }  <METHOD_END>
<METHOD_START> protected int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; if ( this . org.springframework.integration.twitter.inbound.MetadataStore == null ) { BeanFactory org.springframework.integration.twitter.inbound.BeanFactory = this . getBeanFactory ( ) ; if ( org.springframework.integration.twitter.inbound.BeanFactory != null ) { this . org.springframework.integration.twitter.inbound.MetadataStore = IntegrationContextUtils . getMetadataStore ( org.springframework.integration.twitter.inbound.BeanFactory ) ; } if ( this . org.springframework.integration.twitter.inbound.MetadataStore == null ) { this . org.springframework.integration.twitter.inbound.MetadataStore = new SimpleMetadataStore ( ) ; } } java.lang.String java.lang.String = this . org.springframework.integration.twitter.inbound.MetadataStore . get ( this . java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { this . long = java.lang.Long . long ( java.lang.String ) ; this . long = this . long ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.twitter.inbound.Message<?> < ? > org.springframework.integration.twitter.inbound.Message<?> ( ) { T T = this . java.util.Queue<T> . T ( ) ; if ( T == null ) { this . void ( ) ; T = this . java.util.Queue<T> . T ( ) ; } if ( T != null ) { this . long = this . long ( T ) ; this . org.springframework.integration.twitter.inbound.MetadataStore . put ( this . java.lang.String , java.lang.String . java.lang.String ( this . long ) ) ; return this . getMessageBuilderFactory ( ) . withPayload ( T ) . build ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<T> < T > java.util.List<T> ) { java.util.Collections . void ( java.util.List<T> , this . org.springframework.integration.twitter.inbound.AbstractTwitterMessageSource<T>.TweetComparator ) ; for ( T T : java.util.List<T> ) { void ( T ) ; } }  <METHOD_END>
<METHOD_START> private void void ( T T ) { synchronized ( this . java.lang.Object ) { long long = this . long ( T ) ; if ( long > this . long ) { this . java.util.Queue<T> . boolean ( T ) ; this . long = long ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { try { if ( this . java.util.Queue<T> . int ( ) <= this . int ) { java.util.List<T> < T > java.util.List<T> = java.util.List<T> ( this . long ) ; if ( ! CollectionUtils . isEmpty ( java.util.List<T> ) ) { void ( java.util.List<T> ) ; } } } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessagingException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> protected abstract java.util.List<T> < T > java.util.List<T> ( long long );  <METHOD_END>
<METHOD_START> private long long ( T T ) { if ( T instanceof Tweet ) { return java.lang.Long . long ( ( ( Tweet ) T ) . getId ( ) ) ; } else if ( T instanceof DirectMessage ) { return ( ( DirectMessage ) T ) . getId ( ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + T ) ; } }  <METHOD_END>
<METHOD_START> @ ManagedOperation ( description = STRING ) void void ( ) { synchronized ( this ) { this . org.springframework.integration.twitter.inbound.MetadataStore . remove ( this . java.lang.String ) ; this . long = - NUMBER ; this . long = - NUMBER ; } }  <METHOD_END>
<METHOD_START> @ ManagedAttribute public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( T T , T T ) { if ( T instanceof Tweet && T instanceof Tweet ) { Tweet org.springframework.integration.twitter.inbound.Tweet = ( Tweet ) T ; Tweet org.springframework.integration.twitter.inbound.Tweet = ( Tweet ) T ; java.util.Date java.util.Date = org.springframework.integration.twitter.inbound.Tweet . getCreatedAt ( ) ; java.util.Date java.util.Date = org.springframework.integration.twitter.inbound.Tweet . getCreatedAt ( ) ; Assert . notNull ( java.util.Date , STRING ) ; Assert . notNull ( java.util.Date , STRING ) ; return java.util.Date . int ( java.util.Date ) ; } else if ( T instanceof DirectMessage && T instanceof DirectMessage ) { DirectMessage org.springframework.integration.twitter.inbound.DirectMessage = ( DirectMessage ) T ; DirectMessage org.springframework.integration.twitter.inbound.DirectMessage = ( DirectMessage ) T ; java.util.Date java.util.Date = org.springframework.integration.twitter.inbound.DirectMessage . getCreatedAt ( ) ; java.util.Date java.util.Date = org.springframework.integration.twitter.inbound.DirectMessage . getCreatedAt ( ) ; Assert . notNull ( java.util.Date , STRING ) ; Assert . notNull ( java.util.Date , STRING ) ; return java.util.Date . int ( java.util.Date ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + T + STRING + T ) ; } }  <METHOD_END>
