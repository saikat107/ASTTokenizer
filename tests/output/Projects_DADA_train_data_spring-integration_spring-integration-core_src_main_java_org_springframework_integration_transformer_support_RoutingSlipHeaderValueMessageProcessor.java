<METHOD_START> public void ( java.lang.Object ... java.lang.Object[] ) { Assert . notNull ( java.lang.Object[] , STRING ) ; Assert . noNullElements ( java.lang.Object[] , STRING ) ; for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { if ( ! ( java.lang.Object instanceof java.lang.String || java.lang.Object instanceof MessageChannel || java.lang.Object instanceof RoutingSlipRouteStrategy ) ) { throw new java.lang.IllegalArgumentException ( STRING + STRING + STRING + java.lang.Object ) ; } } this . java.util.List<java.lang.Object> = java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.transformer.support.BeanFactory ) throws org.springframework.integration.transformer.support.BeansException { Assert . notNull ( org.springframework.integration.transformer.support.BeanFactory , STRING ) ; this . org.springframework.integration.transformer.support.BeanFactory = org.springframework.integration.transformer.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.util.List<java.lang.Object>,java.lang.Integer> < java.util.List<java.lang.Object> < java.lang.Object > , java.lang.Integer > java.util.Map<java.util.List<java.lang.Object>,java.lang.Integer> ( Message < ? > org.springframework.integration.transformer.support.Message<?> ) { java.util.Map<java.util.List<java.lang.Object>,java.lang.Integer> < java.util.List<java.lang.Object> < java.lang.Object > , java.lang.Integer > java.util.Map<java.util.List<java.lang.Object>,java.lang.Integer> = this . java.util.Map<java.util.List<java.lang.Object>,java.lang.Integer> ; if ( java.util.Map<java.util.List<java.lang.Object>,java.lang.Integer> == null ) { synchronized ( this ) { java.util.Map<java.util.List<java.lang.Object>,java.lang.Integer> = this . java.util.Map<java.util.List<java.lang.Object>,java.lang.Integer> ; if ( java.util.Map<java.util.List<java.lang.Object>,java.lang.Integer> == null ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = this . java.util.List<java.lang.Object> ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( java.util.List<java.lang.Object> . int ( ) ) ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { if ( java.lang.Object instanceof java.lang.String ) { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; if ( this . org.springframework.integration.transformer.support.BeanFactory . containsBean ( java.lang.String ) ) { java.lang.Object java.lang.Object = this . org.springframework.integration.transformer.support.BeanFactory . getBean ( java.lang.String ) ; if ( ! ( java.lang.Object instanceof MessageChannel || java.lang.Object instanceof RoutingSlipRouteStrategy ) ) { throw new java.lang.IllegalArgumentException ( STRING + STRING + java.lang.Object ) ; } java.util.List<java.lang.Object> . boolean ( java.lang.String ) ; } else { ExpressionEvaluatingRoutingSlipRouteStrategy org.springframework.integration.transformer.support.ExpressionEvaluatingRoutingSlipRouteStrategy = new ExpressionEvaluatingRoutingSlipRouteStrategy ( java.lang.String ) ; org.springframework.integration.transformer.support.ExpressionEvaluatingRoutingSlipRouteStrategy . setBeanFactory ( this . org.springframework.integration.transformer.support.BeanFactory ) ; try { org.springframework.integration.transformer.support.ExpressionEvaluatingRoutingSlipRouteStrategy . afterPropertiesSet ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } java.util.List<java.lang.Object> . boolean ( org.springframework.integration.transformer.support.ExpressionEvaluatingRoutingSlipRouteStrategy ) ; } } else { java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; } } java.util.Map<java.util.List<java.lang.Object>,java.lang.Integer> = java.util.Collections . java.util.Map<java.util.List<java.lang.Object>,java.lang.Integer> ( java.util.Collections . java.util.List<java.lang.Object> ( java.util.List<java.lang.Object> ) , NUMBER ) ; this . java.util.Map<java.util.List<java.lang.Object>,java.lang.Integer> = java.util.Map<java.util.List<java.lang.Object>,java.lang.Integer> ; } } } return java.util.Map<java.util.List<java.lang.Object>,java.lang.Integer> ; }  <METHOD_END>
