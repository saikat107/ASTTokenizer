<METHOD_START> @ Test public void void ( ) { assertThat ( new org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties ( ) . getContentType ( ) ) . hasToString ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties = new org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties ( ) ; org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties . setContentType ( MimeTypeUtils . parseMimeType ( STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties . getContentType ( ) ) . hasToString ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties = new org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties ( ) ; org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties . setCharset ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties . getContentType ( ) ) . hasToString ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties = new org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties ( ) ; org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties . setContentType ( MimeTypeUtils . parseMimeType ( STRING ) ) ; org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties . setCharset ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties . getContentType ( ) ) . hasToString ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties = new org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties ( ) ; org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties . setContentType ( MimeTypeUtils . parseMimeType ( STRING ) ) ; org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties . setCharset ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.template.ViewResolverPropertiesTests.ViewResolverProperties . getContentType ( ) ) . hasToString ( STRING ) ; }  <METHOD_END>
