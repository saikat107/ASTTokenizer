<METHOD_START> public static org.springframework.orm.jpa.EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ( ListableBeanFactory org.springframework.orm.jpa.ListableBeanFactory , java.lang.String java.lang.String ) throws org.springframework.orm.jpa.NoSuchBeanDefinitionException { Assert . notNull ( org.springframework.orm.jpa.ListableBeanFactory , STRING ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { java.lang.String [] java.lang.String[] = BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( org.springframework.orm.jpa.ListableBeanFactory , EntityManagerFactory .class ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory = ( EntityManagerFactory ) org.springframework.orm.jpa.ListableBeanFactory . getBean ( java.lang.String ) ; if ( org.springframework.orm.jpa.EntityManagerFactory instanceof EntityManagerFactoryInfo ) { if ( java.lang.String . boolean ( ( ( EntityManagerFactoryInfo ) org.springframework.orm.jpa.EntityManagerFactory ) . getPersistenceUnitName ( ) ) ) { return org.springframework.orm.jpa.EntityManagerFactory ; } } } return org.springframework.orm.jpa.ListableBeanFactory . getBean ( java.lang.String , EntityManagerFactory .class ) ; } else { return org.springframework.orm.jpa.ListableBeanFactory . getBean ( EntityManagerFactory .class ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory )			throws org.springframework.orm.jpa.DataAccessResourceFailureException { return org.springframework.orm.jpa.EntityManager ( org.springframework.orm.jpa.EntityManagerFactory , null ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> )			throws org.springframework.orm.jpa.DataAccessResourceFailureException { try { return org.springframework.orm.jpa.EntityManager ( org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<,> , true ) ; } catch ( PersistenceException org.springframework.orm.jpa.PersistenceException ) { throw new DataAccessResourceFailureException ( STRING , org.springframework.orm.jpa.PersistenceException ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> )			throws org.springframework.orm.jpa.PersistenceException { return org.springframework.orm.jpa.EntityManager ( org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<,> , true ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , boolean boolean ) throws org.springframework.orm.jpa.PersistenceException { Assert . notNull ( org.springframework.orm.jpa.EntityManagerFactory , STRING ) ; EntityManagerHolder org.springframework.orm.jpa.EntityManagerHolder = ( EntityManagerHolder ) TransactionSynchronizationManager . getResource ( org.springframework.orm.jpa.EntityManagerFactory ) ; if ( org.springframework.orm.jpa.EntityManagerHolder != null ) { if ( boolean ) { if ( ! org.springframework.orm.jpa.EntityManagerHolder . isSynchronizedWithTransaction ( ) ) { if ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) { try { org.springframework.orm.jpa.EntityManagerHolder . getEntityManager ( ) . joinTransaction ( ) ; } catch ( TransactionRequiredException org.springframework.orm.jpa.TransactionRequiredException ) { org.springframework.orm.jpa.Log . debug ( STRING , org.springframework.orm.jpa.TransactionRequiredException ) ; } } if ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.orm.jpa.EntityManagerHolder . getEntityManager ( ) , org.springframework.orm.jpa.EntityManagerFactory ) ; TransactionSynchronizationManager . registerSynchronization ( new org.springframework.orm.jpa.EntityManagerFactoryUtils.TransactionalEntityManagerSynchronization ( org.springframework.orm.jpa.EntityManagerHolder , org.springframework.orm.jpa.EntityManagerFactory , java.lang.Object , false ) ) ; org.springframework.orm.jpa.EntityManagerHolder . setSynchronizedWithTransaction ( true ) ; } } org.springframework.orm.jpa.EntityManagerHolder . requested ( ) ; return org.springframework.orm.jpa.EntityManagerHolder . getEntityManager ( ) ; } else { if ( org.springframework.orm.jpa.EntityManagerHolder . isTransactionActive ( ) && ! org.springframework.orm.jpa.EntityManagerHolder . isOpen ( ) ) { if ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) { return null ; } TransactionSynchronizationManager . unbindResource ( org.springframework.orm.jpa.EntityManagerFactory ) ; } else { return org.springframework.orm.jpa.EntityManagerHolder . getEntityManager ( ) ; } } } else if ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) { return null ; } org.springframework.orm.jpa.Log . debug ( STRING ) ; EntityManager org.springframework.orm.jpa.EntityManager = null ; if ( ! boolean ) { try { org.springframework.orm.jpa.EntityManager = org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( SynchronizationType . UNSYNCHRONIZED , java.util.Map<,> ) ; } catch ( java.lang.AbstractMethodError java.lang.AbstractMethodError ) { } } if ( org.springframework.orm.jpa.EntityManager == null ) { org.springframework.orm.jpa.EntityManager = ( ! CollectionUtils . isEmpty ( java.util.Map<,> ) ? org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( java.util.Map<,> ) : org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( ) ) ; } org.springframework.orm.jpa.Log . debug ( STRING ) ; org.springframework.orm.jpa.EntityManagerHolder = new EntityManagerHolder ( org.springframework.orm.jpa.EntityManager ) ; if ( boolean ) { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.orm.jpa.EntityManager , org.springframework.orm.jpa.EntityManagerFactory ) ; TransactionSynchronizationManager . registerSynchronization ( new org.springframework.orm.jpa.EntityManagerFactoryUtils.TransactionalEntityManagerSynchronization ( org.springframework.orm.jpa.EntityManagerHolder , org.springframework.orm.jpa.EntityManagerFactory , java.lang.Object , true ) ) ; org.springframework.orm.jpa.EntityManagerHolder . setSynchronizedWithTransaction ( true ) ; } else { TransactionSynchronizationManager . registerSynchronization ( new org.springframework.orm.jpa.EntityManagerFactoryUtils.TransactionScopedEntityManagerSynchronization ( org.springframework.orm.jpa.EntityManagerHolder , org.springframework.orm.jpa.EntityManagerFactory ) ) ; } TransactionSynchronizationManager . bindResource ( org.springframework.orm.jpa.EntityManagerFactory , org.springframework.orm.jpa.EntityManagerHolder ) ; return org.springframework.orm.jpa.EntityManager ; }  <METHOD_END>
<METHOD_START> private static java.lang.Object java.lang.Object ( EntityManager org.springframework.orm.jpa.EntityManager , EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ) { if ( org.springframework.orm.jpa.EntityManagerFactory instanceof EntityManagerFactoryInfo ) { EntityManagerFactoryInfo org.springframework.orm.jpa.EntityManagerFactoryInfo = ( EntityManagerFactoryInfo ) org.springframework.orm.jpa.EntityManagerFactory ; JpaDialect org.springframework.orm.jpa.JpaDialect = org.springframework.orm.jpa.EntityManagerFactoryInfo . getJpaDialect ( ) ; if ( org.springframework.orm.jpa.JpaDialect != null ) { return org.springframework.orm.jpa.JpaDialect . prepareTransaction ( org.springframework.orm.jpa.EntityManager , TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) , TransactionSynchronizationManager . getCurrentTransactionName ( ) ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.Object java.lang.Object , EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ) { if ( org.springframework.orm.jpa.EntityManagerFactory instanceof EntityManagerFactoryInfo ) { EntityManagerFactoryInfo org.springframework.orm.jpa.EntityManagerFactoryInfo = ( EntityManagerFactoryInfo ) org.springframework.orm.jpa.EntityManagerFactory ; JpaDialect org.springframework.orm.jpa.JpaDialect = org.springframework.orm.jpa.EntityManagerFactoryInfo . getJpaDialect ( ) ; if ( org.springframework.orm.jpa.JpaDialect != null ) { org.springframework.orm.jpa.JpaDialect . cleanupTransaction ( java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> public static void void ( Query org.springframework.orm.jpa.Query , EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ) { EntityManagerHolder org.springframework.orm.jpa.EntityManagerHolder = ( EntityManagerHolder ) TransactionSynchronizationManager . getResource ( org.springframework.orm.jpa.EntityManagerFactory ) ; if ( org.springframework.orm.jpa.EntityManagerHolder != null && org.springframework.orm.jpa.EntityManagerHolder . hasTimeout ( ) ) { int int = ( int ) org.springframework.orm.jpa.EntityManagerHolder . getTimeToLiveInMillis ( ) ; try { org.springframework.orm.jpa.Query . setHint ( STRING , int ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } } }  <METHOD_END>
<METHOD_START> public static org.springframework.orm.jpa.DataAccessException org.springframework.orm.jpa.DataAccessException ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( java.lang.RuntimeException instanceof java.lang.IllegalStateException ) { return new InvalidDataAccessApiUsageException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } if ( java.lang.RuntimeException instanceof java.lang.IllegalArgumentException ) { return new InvalidDataAccessApiUsageException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } if ( java.lang.RuntimeException instanceof EntityNotFoundException ) { return new JpaObjectRetrievalFailureException ( ( EntityNotFoundException ) java.lang.RuntimeException ) ; } if ( java.lang.RuntimeException instanceof NoResultException ) { return new EmptyResultDataAccessException ( java.lang.RuntimeException . java.lang.String ( ) , NUMBER , java.lang.RuntimeException ) ; } if ( java.lang.RuntimeException instanceof NonUniqueResultException ) { return new IncorrectResultSizeDataAccessException ( java.lang.RuntimeException . java.lang.String ( ) , NUMBER , java.lang.RuntimeException ) ; } if ( java.lang.RuntimeException instanceof QueryTimeoutException ) { return new org . springframework . org.springframework.dao . org.springframework.dao ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } if ( java.lang.RuntimeException instanceof LockTimeoutException ) { return new CannotAcquireLockException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } if ( java.lang.RuntimeException instanceof PessimisticLockException ) { return new PessimisticLockingFailureException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } if ( java.lang.RuntimeException instanceof OptimisticLockException ) { return new JpaOptimisticLockingFailureException ( ( OptimisticLockException ) java.lang.RuntimeException ) ; } if ( java.lang.RuntimeException instanceof EntityExistsException ) { return new DataIntegrityViolationException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } if ( java.lang.RuntimeException instanceof TransactionRequiredException ) { return new InvalidDataAccessApiUsageException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } if ( java.lang.RuntimeException instanceof PersistenceException ) { return new JpaSystemException ( java.lang.RuntimeException ) ; } return null ; }  <METHOD_END>
<METHOD_START> public static void void ( EntityManager org.springframework.orm.jpa.EntityManager ) { if ( org.springframework.orm.jpa.EntityManager != null ) { org.springframework.orm.jpa.Log . debug ( STRING ) ; try { if ( org.springframework.orm.jpa.EntityManager . isOpen ( ) ) { org.springframework.orm.jpa.EntityManager . close ( ) ; } } catch ( PersistenceException org.springframework.orm.jpa.PersistenceException ) { org.springframework.orm.jpa.Log . debug ( STRING , org.springframework.orm.jpa.PersistenceException ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.orm.jpa.Log . debug ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> public void ( EntityManagerHolder org.springframework.orm.jpa.EntityManagerHolder , EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory , java.lang.Object java.lang.Object , boolean boolean ) { super( org.springframework.orm.jpa.EntityManagerHolder , org.springframework.orm.jpa.EntityManagerFactory ); this . java.lang.Object = java.lang.Object ; this . org.springframework.orm.jpa.JpaDialect = ( org.springframework.orm.jpa.EntityManagerFactory instanceof EntityManagerFactoryInfo ? ( ( EntityManagerFactoryInfo ) org.springframework.orm.jpa.EntityManagerFactory ) . getJpaDialect ( ) : null ) ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( EntityManagerHolder org.springframework.orm.jpa.EntityManagerHolder ) { EntityManager org.springframework.orm.jpa.EntityManager = org.springframework.orm.jpa.EntityManagerHolder . getEntityManager ( ) ; if ( org.springframework.orm.jpa.EntityManager instanceof EntityManagerProxy ) { EntityManager org.springframework.orm.jpa.EntityManager = ( ( EntityManagerProxy ) org.springframework.orm.jpa.EntityManager ) . getTargetEntityManager ( ) ; if ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManager ) ) { return; } } try { org.springframework.orm.jpa.EntityManager . flush ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( this . org.springframework.orm.jpa.JpaDialect != null ) { throw this . org.springframework.orm.jpa.JpaDialect . translateExceptionIfPossible ( java.lang.RuntimeException ) ; } else { throw org.springframework.orm.jpa.DataAccessException ( java.lang.RuntimeException ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( EntityManagerHolder org.springframework.orm.jpa.EntityManagerHolder , EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ) { void ( org.springframework.orm.jpa.EntityManagerHolder . getEntityManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( EntityManagerHolder org.springframework.orm.jpa.EntityManagerHolder , EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory , boolean boolean ) { if ( ! boolean ) { org.springframework.orm.jpa.EntityManagerHolder . getEntityManager ( ) . clear ( ) ; } void ( this . java.lang.Object , org.springframework.orm.jpa.EntityManagerFactory ) ; }  <METHOD_END>
<METHOD_START> public void ( EntityManagerHolder org.springframework.orm.jpa.EntityManagerHolder , EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ) { super( org.springframework.orm.jpa.EntityManagerHolder , org.springframework.orm.jpa.EntityManagerFactory ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int + NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( EntityManagerHolder org.springframework.orm.jpa.EntityManagerHolder , EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ) { void ( org.springframework.orm.jpa.EntityManagerHolder . getEntityManager ( ) ) ; }  <METHOD_END>
