<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.integration.gemfire.metadata.Cache = new CacheFactory ( ) . create ( ) ; org.springframework.integration.gemfire.metadata.ConcurrentMetadataStore = new GemfireMetadataStore ( org.springframework.integration.gemfire.metadata.Cache ) ; org.springframework.integration.gemfire.metadata.Region<java.lang.Object,java.lang.Object> = org.springframework.integration.gemfire.metadata.Cache . getRegion ( GemfireMetadataStore . KEY ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { if ( org.springframework.integration.gemfire.metadata.Region<java.lang.Object,java.lang.Object> != null ) { org.springframework.integration.gemfire.metadata.Region<java.lang.Object,java.lang.Object> . close ( ) ; } if ( org.springframework.integration.gemfire.metadata.Cache != null ) { org.springframework.integration.gemfire.metadata.Cache . close ( ) ; Assert . isTrue ( org.springframework.integration.gemfire.metadata.Cache . isClosed ( ) , STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Before @ After public void void ( ) { if ( org.springframework.integration.gemfire.metadata.Region<java.lang.Object,java.lang.Object> != null ) { org.springframework.integration.gemfire.metadata.Region<java.lang.Object,java.lang.Object> . clear ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.integration.gemfire.metadata.ConcurrentMetadataStore . get ( STRING ) ; assertNull ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.gemfire.metadata.ConcurrentMetadataStore . put ( STRING , STRING ) ; GemfireTemplate org.springframework.integration.gemfire.metadata.GemfireTemplate = new GemfireTemplate ( org.springframework.integration.gemfire.metadata.Region<java.lang.Object,java.lang.Object> ) ; assertEquals ( STRING , org.springframework.integration.gemfire.metadata.GemfireTemplate . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.gemfire.metadata.ConcurrentMetadataStore . put ( STRING , STRING ) ; java.lang.String java.lang.String = org.springframework.integration.gemfire.metadata.ConcurrentMetadataStore . get ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.gemfire.metadata.ConcurrentMetadataStore . put ( STRING , STRING ) ; java.lang.String java.lang.String = org.springframework.integration.gemfire.metadata.ConcurrentMetadataStore . get ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.integration.gemfire.metadata.ConcurrentMetadataStore . put ( STRING , null ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.gemfire.metadata.ConcurrentMetadataStore . put ( STRING , STRING ) ; java.lang.String java.lang.String = org.springframework.integration.gemfire.metadata.ConcurrentMetadataStore . get ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.integration.gemfire.metadata.ConcurrentMetadataStore . put ( null , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.integration.gemfire.metadata.ConcurrentMetadataStore . get ( null ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.integration.gemfire.metadata.ConcurrentMetadataStore . put ( java.lang.String , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.integration.gemfire.metadata.ConcurrentMetadataStore . remove ( java.lang.String ) ) ; assertNull ( org.springframework.integration.gemfire.metadata.ConcurrentMetadataStore . remove ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.gemfire.metadata.ConcurrentMetadataStore . putIfAbsent ( STRING , STRING ) ; GemfireTemplate org.springframework.integration.gemfire.metadata.GemfireTemplate = new GemfireTemplate ( org.springframework.integration.gemfire.metadata.Region<java.lang.Object,java.lang.Object> ) ; assertEquals ( STRING , org.springframework.integration.gemfire.metadata.GemfireTemplate . get ( STRING ) ) ; }  <METHOD_END>
