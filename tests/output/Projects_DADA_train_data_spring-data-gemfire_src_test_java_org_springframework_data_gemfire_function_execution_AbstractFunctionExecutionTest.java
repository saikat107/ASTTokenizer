<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.Object [] java.lang.Object[] = { STRING , STRING , STRING } ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) ; Function org.springframework.data.gemfire.function.execution.Function = mock ( Function .class , STRING ) ; ResultCollector org.springframework.data.gemfire.function.execution.ResultCollector = mock ( ResultCollector .class , STRING ) ; when ( org.springframework.data.gemfire.function.execution.Execution . withArgs ( eq ( java.lang.Object[] ) ) ) . thenReturn ( org.springframework.data.gemfire.function.execution.Execution ) ; when ( org.springframework.data.gemfire.function.execution.Execution . execute ( eq ( org.springframework.data.gemfire.function.execution.Function ) ) ) . thenReturn ( org.springframework.data.gemfire.function.execution.ResultCollector ) ; when ( org.springframework.data.gemfire.function.execution.Function . hasResult ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.function.execution.ResultCollector . getResult ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) . thenReturn ( java.util.List<java.lang.Object> ) ; AbstractFunctionExecution org.springframework.data.gemfire.function.execution.AbstractFunctionExecution = new AbstractFunctionExecution ( ) { @ java.lang.Override protected org.springframework.data.gemfire.function.execution.Execution org.springframework.data.gemfire.function.execution.Execution ( ) { return org.springframework.data.gemfire.function.execution.Execution ; } } ; java.lang.Iterable<java.lang.Object> < java.lang.Object > java.lang.Iterable<java.lang.Object> = org.springframework.data.gemfire.function.execution.AbstractFunctionExecution . setFunction ( org.springframework.data.gemfire.function.execution.Function ) . setArgs ( java.lang.Object[] ) . setTimeout ( NUMBER ) . execute ( ) ; assertThat ( java.lang.Iterable<java.lang.Object> , is ( notNullValue ( ) ) ) ; assertThat ( java.lang.Iterable<java.lang.Object> , is ( equalTo ( ( java.lang.Iterable<java.lang.Object> < java.lang.Object > ) java.util.List<java.lang.Object> ) ) ) ; verify ( org.springframework.data.gemfire.function.execution.Execution , times ( NUMBER ) ) . withArgs ( eq ( java.lang.Object[] ) ) ; verify ( org.springframework.data.gemfire.function.execution.Execution , never ( ) ) . withCollector ( any ( ResultCollector .class ) ) ; verify ( org.springframework.data.gemfire.function.execution.Execution , never ( ) ) . withFilter ( any ( java.util.Set .class ) ) ; verify ( org.springframework.data.gemfire.function.execution.Execution , times ( NUMBER ) ) . execute ( eq ( org.springframework.data.gemfire.function.execution.Function ) ) ; verify ( org.springframework.data.gemfire.function.execution.Execution , never ( ) ) . execute ( any ( java.lang.String .class ) ) ; verify ( org.springframework.data.gemfire.function.execution.ResultCollector , times ( NUMBER ) ) . getResult ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; verify ( org.springframework.data.gemfire.function.execution.ResultCollector , never ( ) ) . getResult ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.function.execution.Execution org.springframework.data.gemfire.function.execution.Execution ( ) { return org.springframework.data.gemfire.function.execution.Execution ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; AbstractFunctionExecution org.springframework.data.gemfire.function.execution.AbstractFunctionExecution = new AbstractFunctionExecution ( ) { @ java.lang.Override protected org.springframework.data.gemfire.function.execution.Execution org.springframework.data.gemfire.function.execution.Execution ( ) { return org.springframework.data.gemfire.function.execution.Execution ; } @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override < T > java.lang.Iterable<T> < T > java.lang.Iterable<T> ( ) { return ( java.lang.Iterable<T> < T > ) java.util.List<java.lang.String> ; } } ; assertThat ( org.springframework.data.gemfire.function.execution.AbstractFunctionExecution . executeAndExtract ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.function.execution.Execution org.springframework.data.gemfire.function.execution.Execution ( ) { return org.springframework.data.gemfire.function.execution.Execution ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override < T > java.lang.Iterable<T> < T > java.lang.Iterable<T> ( ) { return ( java.lang.Iterable<T> < T > ) java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; AbstractFunctionExecution org.springframework.data.gemfire.function.execution.AbstractFunctionExecution = new AbstractFunctionExecution ( ) { @ java.lang.Override protected org.springframework.data.gemfire.function.execution.Execution org.springframework.data.gemfire.function.execution.Execution ( ) { return org.springframework.data.gemfire.function.execution.Execution ; } @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override < T > java.lang.Iterable<T> < T > java.lang.Iterable<T> ( ) { return ( java.lang.Iterable<T> < T > ) java.util.List<java.lang.String> ; } } ; assertThat ( org.springframework.data.gemfire.function.execution.AbstractFunctionExecution . executeAndExtract ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.function.execution.Execution org.springframework.data.gemfire.function.execution.Execution ( ) { return org.springframework.data.gemfire.function.execution.Execution ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override < T > java.lang.Iterable<T> < T > java.lang.Iterable<T> ( ) { return ( java.lang.Iterable<T> < T > ) java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractFunctionExecution org.springframework.data.gemfire.function.execution.AbstractFunctionExecution = new AbstractFunctionExecution ( ) { @ java.lang.Override protected org.springframework.data.gemfire.function.execution.Execution org.springframework.data.gemfire.function.execution.Execution ( ) { return org.springframework.data.gemfire.function.execution.Execution ; } @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override < T > java.lang.Iterable<T> < T > java.lang.Iterable<T> ( ) { return null ; } } ; assertThat ( org.springframework.data.gemfire.function.execution.AbstractFunctionExecution . executeAndExtract ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.function.execution.Execution org.springframework.data.gemfire.function.execution.Execution ( ) { return org.springframework.data.gemfire.function.execution.Execution ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override < T > java.lang.Iterable<T> < T > java.lang.Iterable<T> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractFunctionExecution org.springframework.data.gemfire.function.execution.AbstractFunctionExecution = new AbstractFunctionExecution ( ) { @ java.lang.Override protected org.springframework.data.gemfire.function.execution.Execution org.springframework.data.gemfire.function.execution.Execution ( ) { return org.springframework.data.gemfire.function.execution.Execution ; } @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override < T > java.lang.Iterable<T> < T > java.lang.Iterable<T> ( ) { return java.util.Collections . java.util.List<T> ( ) ; } } ; assertThat ( org.springframework.data.gemfire.function.execution.AbstractFunctionExecution . executeAndExtract ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.function.execution.Execution org.springframework.data.gemfire.function.execution.Execution ( ) { return org.springframework.data.gemfire.function.execution.Execution ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override < T > java.lang.Iterable<T> < T > java.lang.Iterable<T> ( ) { return java.util.Collections . java.util.List<T> ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractFunctionExecution org.springframework.data.gemfire.function.execution.AbstractFunctionExecution = new AbstractFunctionExecution ( ) { @ java.lang.Override protected org.springframework.data.gemfire.function.execution.Execution org.springframework.data.gemfire.function.execution.Execution ( ) { return org.springframework.data.gemfire.function.execution.Execution ; } @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override < T > java.lang.Iterable<T> < T > java.lang.Iterable<T> ( ) { return java.util.Collections . java.util.List<T> ( ( T ) new java.lang.IllegalArgumentException ( STRING ) ) ; } } ; org.springframework.data.gemfire.function.execution.ExpectedException . expect ( FunctionException .class ) ; org.springframework.data.gemfire.function.execution.ExpectedException . expectCause ( isA ( java.lang.IllegalArgumentException .class ) ) ; org.springframework.data.gemfire.function.execution.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.data.gemfire.function.execution.AbstractFunctionExecution . setFunctionId ( STRING ) . executeAndExtract ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.function.execution.Execution org.springframework.data.gemfire.function.execution.Execution ( ) { return org.springframework.data.gemfire.function.execution.Execution ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override < T > java.lang.Iterable<T> < T > java.lang.Iterable<T> ( ) { return java.util.Collections . java.util.List<T> ( ( T ) new java.lang.IllegalArgumentException ( STRING ) ) ; }  <METHOD_END>
