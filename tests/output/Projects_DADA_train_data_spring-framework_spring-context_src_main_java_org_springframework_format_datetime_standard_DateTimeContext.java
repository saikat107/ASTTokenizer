<METHOD_START> public void void ( java.time.chrono.Chronology java.time.chrono.Chronology ) { this . java.time.chrono.Chronology = java.time.chrono.Chronology ; }  <METHOD_END>
<METHOD_START> public java.time.chrono.Chronology java.time.chrono.Chronology ( ) { return this . java.time.chrono.Chronology ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.ZoneId java.time.ZoneId ) { this . java.time.ZoneId = java.time.ZoneId ; }  <METHOD_END>
<METHOD_START> public java.time.ZoneId java.time.ZoneId ( ) { return this . java.time.ZoneId ; }  <METHOD_END>
<METHOD_START> public java.time.format.DateTimeFormatter java.time.format.DateTimeFormatter ( java.time.format.DateTimeFormatter java.time.format.DateTimeFormatter ) { if ( this . java.time.chrono.Chronology != null ) { java.time.format.DateTimeFormatter = java.time.format.DateTimeFormatter . java.time.format.DateTimeFormatter ( this . java.time.chrono.Chronology ) ; } if ( this . java.time.ZoneId != null ) { java.time.format.DateTimeFormatter = java.time.format.DateTimeFormatter . java.time.format.DateTimeFormatter ( this . java.time.ZoneId ) ; } else { LocaleContext org.springframework.format.datetime.standard.LocaleContext = LocaleContextHolder . getLocaleContext ( ) ; if ( org.springframework.format.datetime.standard.LocaleContext instanceof TimeZoneAwareLocaleContext ) { java.util.TimeZone java.util.TimeZone = ( ( TimeZoneAwareLocaleContext ) org.springframework.format.datetime.standard.LocaleContext ) . getTimeZone ( ) ; if ( java.util.TimeZone != null ) { java.time.format.DateTimeFormatter = java.time.format.DateTimeFormatter . java.time.format.DateTimeFormatter ( java.util.TimeZone . java.time.ZoneId ( ) ) ; } } } return java.time.format.DateTimeFormatter ; }  <METHOD_END>
