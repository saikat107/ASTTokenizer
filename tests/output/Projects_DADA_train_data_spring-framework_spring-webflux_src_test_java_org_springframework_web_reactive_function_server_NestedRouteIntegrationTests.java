<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.function.server.RouterFunction<?> < ? > org.springframework.web.reactive.function.server.RouterFunction<?> ( ) { org.springframework.web.reactive.function.server.NestedRouteIntegrationTests.NestedHandler org.springframework.web.reactive.function.server.NestedRouteIntegrationTests.NestedHandler = new org.springframework.web.reactive.function.server.NestedRouteIntegrationTests.NestedHandler ( ) ; return nest ( path ( STRING ) , route ( GET ( STRING ) , org.springframework.web.reactive.function.server.NestedRouteIntegrationTests.NestedHandler :: org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ) . andRoute ( GET ( STRING ) , org.springframework.web.reactive.function.server.NestedRouteIntegrationTests.NestedHandler :: org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ) ) . andNest ( GET ( STRING ) , nest ( GET ( STRING ) , route ( GET ( STRING ) , org.springframework.web.reactive.function.server.NestedRouteIntegrationTests.NestedHandler :: org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > org.springframework.web.reactive.function.server.ResponseEntity<java.lang.String> = org.springframework.web.reactive.function.server.RestTemplate . getForEntity ( STRING + port + STRING , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.function.server.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.function.server.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > org.springframework.web.reactive.function.server.ResponseEntity<java.lang.String> = org.springframework.web.reactive.function.server.RestTemplate . getForEntity ( STRING + port + STRING , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.function.server.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.function.server.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > org.springframework.web.reactive.function.server.ResponseEntity<java.lang.String> = org.springframework.web.reactive.function.server.RestTemplate . getForEntity ( STRING + port + STRING , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.function.server.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.function.server.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( ServerRequest org.springframework.web.reactive.function.server.ServerRequest ) { return ServerResponse . ok ( ) . body ( fromObject ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( ServerRequest org.springframework.web.reactive.function.server.ServerRequest ) { return ServerResponse . ok ( ) . body ( fromObject ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( ServerRequest org.springframework.web.reactive.function.server.ServerRequest ) { Flux < java.lang.String > org.springframework.web.reactive.function.server.Flux<java.lang.String> = Flux . just ( org.springframework.web.reactive.function.server.ServerRequest . pathVariable ( STRING ) , STRING , org.springframework.web.reactive.function.server.ServerRequest . pathVariable ( STRING ) , STRING , org.springframework.web.reactive.function.server.ServerRequest . pathVariable ( STRING ) ) ; return ServerResponse . ok ( ) . body ( org.springframework.web.reactive.function.server.Flux<java.lang.String> , java.lang.String .class ) ; }  <METHOD_END>
