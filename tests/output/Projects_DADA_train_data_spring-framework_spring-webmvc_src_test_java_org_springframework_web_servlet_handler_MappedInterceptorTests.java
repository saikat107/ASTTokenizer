<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.servlet.handler.LocaleChangeInterceptor = new LocaleChangeInterceptor ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MappedInterceptor org.springframework.web.servlet.handler.MappedInterceptor = new MappedInterceptor ( null , null , this . org.springframework.web.servlet.handler.LocaleChangeInterceptor ) ; assertTrue ( org.springframework.web.servlet.handler.MappedInterceptor . matches ( STRING , org.springframework.web.servlet.handler.AntPathMatcher ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MappedInterceptor org.springframework.web.servlet.handler.MappedInterceptor = new MappedInterceptor ( new java.lang.String [] { STRING } , this . org.springframework.web.servlet.handler.LocaleChangeInterceptor ) ; assertTrue ( org.springframework.web.servlet.handler.MappedInterceptor . matches ( STRING , org.springframework.web.servlet.handler.AntPathMatcher ) ) ; assertFalse ( org.springframework.web.servlet.handler.MappedInterceptor . matches ( STRING , org.springframework.web.servlet.handler.AntPathMatcher ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MappedInterceptor org.springframework.web.servlet.handler.MappedInterceptor = new MappedInterceptor ( new java.lang.String [] { STRING } , this . org.springframework.web.servlet.handler.LocaleChangeInterceptor ) ; assertTrue ( org.springframework.web.servlet.handler.MappedInterceptor . matches ( STRING , org.springframework.web.servlet.handler.AntPathMatcher ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MappedInterceptor org.springframework.web.servlet.handler.MappedInterceptor = new MappedInterceptor ( null , new java.lang.String [] { STRING } , this . org.springframework.web.servlet.handler.LocaleChangeInterceptor ) ; assertTrue ( org.springframework.web.servlet.handler.MappedInterceptor . matches ( STRING , org.springframework.web.servlet.handler.AntPathMatcher ) ) ; assertFalse ( org.springframework.web.servlet.handler.MappedInterceptor . matches ( STRING , org.springframework.web.servlet.handler.AntPathMatcher ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MappedInterceptor org.springframework.web.servlet.handler.MappedInterceptor = new MappedInterceptor ( new java.lang.String [] { STRING } , new java.lang.String [] { STRING } , this . org.springframework.web.servlet.handler.LocaleChangeInterceptor ) ; assertTrue ( org.springframework.web.servlet.handler.MappedInterceptor . matches ( STRING , org.springframework.web.servlet.handler.AntPathMatcher ) ) ; assertFalse ( org.springframework.web.servlet.handler.MappedInterceptor . matches ( STRING , org.springframework.web.servlet.handler.AntPathMatcher ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MappedInterceptor org.springframework.web.servlet.handler.MappedInterceptor = new MappedInterceptor ( new java.lang.String [] { STRING } , this . org.springframework.web.servlet.handler.LocaleChangeInterceptor ) ; org.springframework.web.servlet.handler.MappedInterceptor . setPathMatcher ( new org.springframework.web.servlet.handler.MappedInterceptorTests.TestPathMatcher ( ) ) ; assertTrue ( org.springframework.web.servlet.handler.MappedInterceptor . matches ( STRING , org.springframework.web.servlet.handler.AntPathMatcher ) ) ; assertFalse ( org.springframework.web.servlet.handler.MappedInterceptor . matches ( STRING , org.springframework.web.servlet.handler.AntPathMatcher ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerInterceptor org.springframework.web.servlet.handler.HandlerInterceptor = mock ( HandlerInterceptor .class ) ; MappedInterceptor org.springframework.web.servlet.handler.MappedInterceptor = new MappedInterceptor ( new java.lang.String [] { STRING } , org.springframework.web.servlet.handler.HandlerInterceptor ) ; org.springframework.web.servlet.handler.MappedInterceptor . preHandle ( mock ( HttpServletRequest .class ) , mock ( HttpServletResponse .class ) , null ) ; then ( org.springframework.web.servlet.handler.HandlerInterceptor ) . should ( ) . preHandle ( any ( HttpServletRequest .class ) , any ( HttpServletResponse .class ) , any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerInterceptor org.springframework.web.servlet.handler.HandlerInterceptor = mock ( HandlerInterceptor .class ) ; MappedInterceptor org.springframework.web.servlet.handler.MappedInterceptor = new MappedInterceptor ( new java.lang.String [] { STRING } , org.springframework.web.servlet.handler.HandlerInterceptor ) ; org.springframework.web.servlet.handler.MappedInterceptor . postHandle ( mock ( HttpServletRequest .class ) , mock ( HttpServletResponse .class ) , null , mock ( ModelAndView .class ) ) ; then ( org.springframework.web.servlet.handler.HandlerInterceptor ) . should ( ) . postHandle ( any ( ) , any ( ) , any ( ) , any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerInterceptor org.springframework.web.servlet.handler.HandlerInterceptor = mock ( HandlerInterceptor .class ) ; MappedInterceptor org.springframework.web.servlet.handler.MappedInterceptor = new MappedInterceptor ( new java.lang.String [] { STRING } , org.springframework.web.servlet.handler.HandlerInterceptor ) ; org.springframework.web.servlet.handler.MappedInterceptor . afterCompletion ( mock ( HttpServletRequest .class ) , mock ( HttpServletResponse .class ) , null , mock ( java.lang.Exception .class ) ) ; then ( org.springframework.web.servlet.handler.HandlerInterceptor ) . should ( ) . afterCompletion ( any ( ) , any ( ) , any ( ) , any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.lang.String . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Comparator<java.lang.String> < java.lang.String > java.util.Comparator<java.lang.String> ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
