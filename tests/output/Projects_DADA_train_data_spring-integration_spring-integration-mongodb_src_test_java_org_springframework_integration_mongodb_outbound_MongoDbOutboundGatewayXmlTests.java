<METHOD_START> @ Before public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.outbound.MongoDbFactory = this . prepareMongoFactory ( ) ; MongoTemplate org.springframework.integration.mongodb.outbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.outbound.MongoDbFactory ) ; org.springframework.integration.mongodb.outbound.MongoTemplate . save ( this . createPerson ( STRING ) , java.lang.String ) ; org.springframework.integration.mongodb.outbound.MongoTemplate . save ( this . createPerson ( STRING ) , java.lang.String ) ; org.springframework.integration.mongodb.outbound.MongoTemplate . save ( this . createPerson ( STRING ) , java.lang.String ) ; org.springframework.integration.mongodb.outbound.MongoTemplate . save ( this . createPerson ( STRING ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.outbound.MongoDbFactory = this . prepareMongoFactory ( ) ; MongoTemplate org.springframework.integration.mongodb.outbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.outbound.MongoDbFactory ) ; org.springframework.integration.mongodb.outbound.MongoTemplate . dropCollection ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { EventDrivenConsumer org.springframework.integration.mongodb.outbound.EventDrivenConsumer = org.springframework.integration.mongodb.outbound.ApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; PollableChannel org.springframework.integration.mongodb.outbound.PollableChannel = org.springframework.integration.mongodb.outbound.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.mongodb.outbound.EventDrivenConsumer . getHandler ( ) . handleMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.mongodb.outbound.Message<?> = org.springframework.integration.mongodb.outbound.PollableChannel . receive ( NUMBER ) ; Person org.springframework.integration.mongodb.outbound.Person = org.springframework.integration.mongodb.outbound.Person ( org.springframework.integration.mongodb.outbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.outbound.Person . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { EventDrivenConsumer org.springframework.integration.mongodb.outbound.EventDrivenConsumer = org.springframework.integration.mongodb.outbound.ApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; PollableChannel org.springframework.integration.mongodb.outbound.PollableChannel = org.springframework.integration.mongodb.outbound.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.mongodb.outbound.EventDrivenConsumer . getHandler ( ) . handleMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.mongodb.outbound.Message<?> = org.springframework.integration.mongodb.outbound.PollableChannel . receive ( NUMBER ) ; Person org.springframework.integration.mongodb.outbound.Person = org.springframework.integration.mongodb.outbound.Person ( org.springframework.integration.mongodb.outbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.outbound.Person . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { EventDrivenConsumer org.springframework.integration.mongodb.outbound.EventDrivenConsumer = org.springframework.integration.mongodb.outbound.ApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; PollableChannel org.springframework.integration.mongodb.outbound.PollableChannel = org.springframework.integration.mongodb.outbound.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.mongodb.outbound.EventDrivenConsumer . getHandler ( ) . handleMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.mongodb.outbound.Message<?> = org.springframework.integration.mongodb.outbound.PollableChannel . receive ( NUMBER ) ; Person org.springframework.integration.mongodb.outbound.Person = org.springframework.integration.mongodb.outbound.Person ( org.springframework.integration.mongodb.outbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.outbound.Person . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { EventDrivenConsumer org.springframework.integration.mongodb.outbound.EventDrivenConsumer = org.springframework.integration.mongodb.outbound.ApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; PollableChannel org.springframework.integration.mongodb.outbound.PollableChannel = org.springframework.integration.mongodb.outbound.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.mongodb.outbound.EventDrivenConsumer . getHandler ( ) . handleMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.mongodb.outbound.Message<?> = org.springframework.integration.mongodb.outbound.PollableChannel . receive ( NUMBER ) ; java.util.List<org.springframework.integration.mongodb.outbound.Person> < Person > java.util.List<org.springframework.integration.mongodb.outbound.Person> = java.util.List<org.springframework.integration.mongodb.outbound.Person> ( org.springframework.integration.mongodb.outbound.Message<> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.mongodb.outbound.Person> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { EventDrivenConsumer org.springframework.integration.mongodb.outbound.EventDrivenConsumer = org.springframework.integration.mongodb.outbound.ApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; PollableChannel org.springframework.integration.mongodb.outbound.PollableChannel = org.springframework.integration.mongodb.outbound.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.mongodb.outbound.EventDrivenConsumer . getHandler ( ) . handleMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.mongodb.outbound.Message<?> = org.springframework.integration.mongodb.outbound.PollableChannel . receive ( NUMBER ) ; java.util.List<org.springframework.integration.mongodb.outbound.Person> < Person > java.util.List<org.springframework.integration.mongodb.outbound.Person> = java.util.List<org.springframework.integration.mongodb.outbound.Person> ( org.springframework.integration.mongodb.outbound.Message<> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.mongodb.outbound.Person> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { EventDrivenConsumer org.springframework.integration.mongodb.outbound.EventDrivenConsumer = org.springframework.integration.mongodb.outbound.ApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; PollableChannel org.springframework.integration.mongodb.outbound.PollableChannel = org.springframework.integration.mongodb.outbound.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.mongodb.outbound.EventDrivenConsumer . getHandler ( ) . handleMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.mongodb.outbound.Message<?> = org.springframework.integration.mongodb.outbound.PollableChannel . receive ( NUMBER ) ; long long = ( java.lang.Long ) org.springframework.integration.mongodb.outbound.Message<> . getPayload ( ) ; assertEquals ( NUMBER , long ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.mongodb.outbound.Person org.springframework.integration.mongodb.outbound.Person ( Message < ? > org.springframework.integration.mongodb.outbound.Message<?> ) { return ( Person ) org.springframework.integration.mongodb.outbound.Message<> . getPayload ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<org.springframework.integration.mongodb.outbound.Person> < Person > java.util.List<org.springframework.integration.mongodb.outbound.Person> ( Message < ? > org.springframework.integration.mongodb.outbound.Message<?> ) { return ( java.util.List<org.springframework.integration.mongodb.outbound.Person> < Person > ) org.springframework.integration.mongodb.outbound.Message<> . getPayload ( ) ; }  <METHOD_END>
