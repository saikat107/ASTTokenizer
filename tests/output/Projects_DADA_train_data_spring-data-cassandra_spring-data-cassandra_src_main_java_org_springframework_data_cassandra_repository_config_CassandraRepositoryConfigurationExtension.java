<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return CassandraRepositoryFactoryBean .class . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionBuilder org.springframework.data.cassandra.repository.config.BeanDefinitionBuilder , XmlRepositoryConfigurationSource org.springframework.data.cassandra.repository.config.XmlRepositoryConfigurationSource ) { org.w3c.dom.Element org.w3c.dom.Element = org.springframework.data.cassandra.repository.config.XmlRepositoryConfigurationSource . getElement ( ) ; java.lang.String java.lang.String = java.util.Optional . java.util.Optional<java.lang.String> ( org.w3c.dom.Element . java.lang.String ( java.lang.String ) ) . java.util.Optional<java.lang.String> ( StringUtils :: hasText ) . orElse ( DefaultBeanNames . DATA_TEMPLATE ) ; org.springframework.data.cassandra.repository.config.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionBuilder org.springframework.data.cassandra.repository.config.BeanDefinitionBuilder , AnnotationRepositoryConfigurationSource org.springframework.data.cassandra.repository.config.AnnotationRepositoryConfigurationSource ) { java.lang.String java.lang.String = org.springframework.data.cassandra.repository.config.AnnotationRepositoryConfigurationSource . getAttributes ( ) . getString ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.cassandra.repository.config.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) { return java.util.Collections . java.util.Set<java.lang.Class<org.springframework.data.cassandra.repository.config.Table>> ( Table .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Collection<java.lang.Class<?>> ( ) { return java.util.Collections . java.util.Set<java.lang.Class<?>> ( CassandraRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( RepositoryMetadata org.springframework.data.cassandra.repository.config.RepositoryMetadata ) { return ! org.springframework.data.cassandra.repository.config.RepositoryMetadata . isReactiveRepository ( ) ; }  <METHOD_END>
