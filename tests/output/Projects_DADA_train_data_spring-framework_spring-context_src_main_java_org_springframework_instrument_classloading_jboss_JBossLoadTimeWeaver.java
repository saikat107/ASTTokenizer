<METHOD_START> public void ( ) { this( ClassUtils . getDefaultClassLoader ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { Assert . notNull ( java.lang.ClassLoader , STRING ) ; this . java.lang.ClassLoader = java.lang.ClassLoader ; try { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( java.lang.ClassLoader . java.lang.Class<? extends java.lang.ClassLoader> ( ) , STRING ) ; if ( java.lang.reflect.Field == null ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.ClassLoader . java.lang.Class<? extends java.lang.ClassLoader> ( ) . java.lang.String ( ) ) ; } java.lang.reflect.Field . void ( true ) ; this . java.lang.Object = java.lang.reflect.Field . java.lang.Object ( java.lang.ClassLoader ) ; if ( ! this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) . boolean ( java.lang.String ) ) { throw new java.lang.IllegalStateException ( STRING + this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; } this . java.lang.reflect.Method = ReflectionUtils . findMethod ( this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , STRING , java.lang.instrument.ClassFileTransformer .class ) ; if ( this . java.lang.reflect.Method == null ) { throw new java.lang.IllegalArgumentException ( STRING + this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; } this . java.lang.reflect.Method . void ( true ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.instrument.ClassFileTransformer java.lang.instrument.ClassFileTransformer ) { try { this . java.lang.reflect.Method . java.lang.Object ( this . java.lang.Object , java.lang.instrument.ClassFileTransformer ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING + this . java.lang.ClassLoader , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return new SimpleThrowawayClassLoader ( java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
