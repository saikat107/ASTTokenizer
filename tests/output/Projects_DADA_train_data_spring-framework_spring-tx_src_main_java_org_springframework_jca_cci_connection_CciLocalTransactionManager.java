<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( ConnectionFactory org.springframework.jca.cci.connection.ConnectionFactory ) { void ( org.springframework.jca.cci.connection.ConnectionFactory ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ConnectionFactory org.springframework.jca.cci.connection.ConnectionFactory ) { if ( org.springframework.jca.cci.connection.ConnectionFactory instanceof TransactionAwareConnectionFactoryProxy ) { this . org.springframework.jca.cci.connection.ConnectionFactory = ( ( TransactionAwareConnectionFactoryProxy ) org.springframework.jca.cci.connection.ConnectionFactory ) . getTargetConnectionFactory ( ) ; } else { this . org.springframework.jca.cci.connection.ConnectionFactory = org.springframework.jca.cci.connection.ConnectionFactory ; } }  <METHOD_END>
<METHOD_START> public org.springframework.jca.cci.connection.ConnectionFactory org.springframework.jca.cci.connection.ConnectionFactory ( ) { return this . org.springframework.jca.cci.connection.ConnectionFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( org.springframework.jca.cci.connection.ConnectionFactory ( ) == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.jca.cci.connection.ConnectionFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject = new org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject ( ) ; ConnectionHolder org.springframework.jca.cci.connection.ConnectionHolder = ( ConnectionHolder ) TransactionSynchronizationManager . getResource ( org.springframework.jca.cci.connection.ConnectionFactory ( ) ) ; org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject . void ( org.springframework.jca.cci.connection.ConnectionHolder ) ; return org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Object java.lang.Object ) { org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject = ( org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject ) java.lang.Object ; return ( org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject . org.springframework.jca.cci.connection.ConnectionHolder ( ) != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , TransactionDefinition org.springframework.jca.cci.connection.TransactionDefinition ) { org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject = ( org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject ) java.lang.Object ; Connection org.springframework.jca.cci.connection.Connection = null ; try { org.springframework.jca.cci.connection.Connection = org.springframework.jca.cci.connection.ConnectionFactory ( ) . getConnection ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.jca.cci.connection.Connection + STRING ) ; } org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject . void ( new ConnectionHolder ( org.springframework.jca.cci.connection.Connection ) ) ; org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject . org.springframework.jca.cci.connection.ConnectionHolder ( ) . setSynchronizedWithTransaction ( true ) ; org.springframework.jca.cci.connection.Connection . getLocalTransaction ( ) . begin ( ) ; int int = determineTimeout ( org.springframework.jca.cci.connection.TransactionDefinition ) ; if ( int != TransactionDefinition . TIMEOUT_DEFAULT ) { org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject . org.springframework.jca.cci.connection.ConnectionHolder ( ) . setTimeoutInSeconds ( int ) ; } TransactionSynchronizationManager . bindResource ( org.springframework.jca.cci.connection.ConnectionFactory ( ) , org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject . org.springframework.jca.cci.connection.ConnectionHolder ( ) ) ; } catch ( NotSupportedException org.springframework.jca.cci.connection.NotSupportedException ) { ConnectionFactoryUtils . releaseConnection ( org.springframework.jca.cci.connection.Connection , org.springframework.jca.cci.connection.ConnectionFactory ( ) ) ; throw new CannotCreateTransactionException ( STRING , org.springframework.jca.cci.connection.NotSupportedException ) ; } catch ( LocalTransactionException org.springframework.jca.cci.connection.LocalTransactionException ) { ConnectionFactoryUtils . releaseConnection ( org.springframework.jca.cci.connection.Connection , org.springframework.jca.cci.connection.ConnectionFactory ( ) ) ; throw new CannotCreateTransactionException ( STRING , org.springframework.jca.cci.connection.LocalTransactionException ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { ConnectionFactoryUtils . releaseConnection ( org.springframework.jca.cci.connection.Connection , org.springframework.jca.cci.connection.ConnectionFactory ( ) ) ; throw new TransactionSystemException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject = ( org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject ) java.lang.Object ; org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject . void ( null ) ; return TransactionSynchronizationManager . unbindResource ( org.springframework.jca.cci.connection.ConnectionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { ConnectionHolder org.springframework.jca.cci.connection.ConnectionHolder = ( ConnectionHolder ) java.lang.Object ; TransactionSynchronizationManager . bindResource ( org.springframework.jca.cci.connection.ConnectionFactory ( ) , org.springframework.jca.cci.connection.ConnectionHolder ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Object java.lang.Object ) throws org.springframework.jca.cci.connection.TransactionException { org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject = ( org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject ) java.lang.Object ; return org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject . org.springframework.jca.cci.connection.ConnectionHolder ( ) . isRollbackOnly ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.jca.cci.connection.DefaultTransactionStatus ) { org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject = ( org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject ) org.springframework.jca.cci.connection.DefaultTransactionStatus . getTransaction ( ) ; Connection org.springframework.jca.cci.connection.Connection = org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject . org.springframework.jca.cci.connection.ConnectionHolder ( ) . getConnection ( ) ; if ( org.springframework.jca.cci.connection.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + org.springframework.jca.cci.connection.Connection + STRING ) ; } try { org.springframework.jca.cci.connection.Connection . getLocalTransaction ( ) . commit ( ) ; } catch ( LocalTransactionException org.springframework.jca.cci.connection.LocalTransactionException ) { throw new TransactionSystemException ( STRING , org.springframework.jca.cci.connection.LocalTransactionException ) ; } catch ( ResourceException org.springframework.jca.cci.connection.ResourceException ) { throw new TransactionSystemException ( STRING , org.springframework.jca.cci.connection.ResourceException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.jca.cci.connection.DefaultTransactionStatus ) { org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject = ( org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject ) org.springframework.jca.cci.connection.DefaultTransactionStatus . getTransaction ( ) ; Connection org.springframework.jca.cci.connection.Connection = org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject . org.springframework.jca.cci.connection.ConnectionHolder ( ) . getConnection ( ) ; if ( org.springframework.jca.cci.connection.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + org.springframework.jca.cci.connection.Connection + STRING ) ; } try { org.springframework.jca.cci.connection.Connection . getLocalTransaction ( ) . rollback ( ) ; } catch ( LocalTransactionException org.springframework.jca.cci.connection.LocalTransactionException ) { throw new TransactionSystemException ( STRING , org.springframework.jca.cci.connection.LocalTransactionException ) ; } catch ( ResourceException org.springframework.jca.cci.connection.ResourceException ) { throw new TransactionSystemException ( STRING , org.springframework.jca.cci.connection.ResourceException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.jca.cci.connection.DefaultTransactionStatus ) { org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject = ( org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject ) org.springframework.jca.cci.connection.DefaultTransactionStatus . getTransaction ( ) ; if ( org.springframework.jca.cci.connection.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject . org.springframework.jca.cci.connection.ConnectionHolder ( ) . getConnection ( ) + STRING ) ; } org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject . org.springframework.jca.cci.connection.ConnectionHolder ( ) . setRollbackOnly ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject = ( org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject ) java.lang.Object ; TransactionSynchronizationManager . unbindResource ( org.springframework.jca.cci.connection.ConnectionFactory ( ) ) ; org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject . org.springframework.jca.cci.connection.ConnectionHolder ( ) . clear ( ) ; Connection org.springframework.jca.cci.connection.Connection = org.springframework.jca.cci.connection.CciLocalTransactionManager.CciLocalTransactionObject . org.springframework.jca.cci.connection.ConnectionHolder ( ) . getConnection ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.jca.cci.connection.Connection + STRING ) ; } ConnectionFactoryUtils . releaseConnection ( org.springframework.jca.cci.connection.Connection , org.springframework.jca.cci.connection.ConnectionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ConnectionHolder org.springframework.jca.cci.connection.ConnectionHolder ) { this . org.springframework.jca.cci.connection.ConnectionHolder = org.springframework.jca.cci.connection.ConnectionHolder ; }  <METHOD_END>
<METHOD_START> public org.springframework.jca.cci.connection.ConnectionHolder org.springframework.jca.cci.connection.ConnectionHolder ( ) { return this . org.springframework.jca.cci.connection.ConnectionHolder ; }  <METHOD_END>
