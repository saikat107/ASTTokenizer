<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { assertEquals ( java.lang.String , ExposeBeanNameAdvisors . getBeanName ( ) ) ; return super. getAge ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; TestBean org.springframework.aop.interceptor.TestBean = new org.springframework.aop.interceptor.ExposeBeanNameAdvisorsTests.RequiresBeanNameBoundTestBean ( java.lang.String ) ; ProxyFactory org.springframework.aop.interceptor.ProxyFactory = new ProxyFactory ( org.springframework.aop.interceptor.TestBean ) ; org.springframework.aop.interceptor.ProxyFactory . addAdvisor ( ExposeInvocationInterceptor . ADVISOR ) ; org.springframework.aop.interceptor.ProxyFactory . addAdvisor ( ExposeBeanNameAdvisors . createAdvisorWithoutIntroduction ( java.lang.String ) ) ; ITestBean org.springframework.aop.interceptor.ITestBean = ( ITestBean ) org.springframework.aop.interceptor.ProxyFactory . getProxy ( ) ; assertFalse ( STRING , org.springframework.aop.interceptor.ITestBean instanceof NamedBean ) ; org.springframework.aop.interceptor.ITestBean . getAge ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; TestBean org.springframework.aop.interceptor.TestBean = new org.springframework.aop.interceptor.ExposeBeanNameAdvisorsTests.RequiresBeanNameBoundTestBean ( java.lang.String ) ; ProxyFactory org.springframework.aop.interceptor.ProxyFactory = new ProxyFactory ( org.springframework.aop.interceptor.TestBean ) ; org.springframework.aop.interceptor.ProxyFactory . addAdvisor ( ExposeInvocationInterceptor . ADVISOR ) ; org.springframework.aop.interceptor.ProxyFactory . addAdvisor ( ExposeBeanNameAdvisors . createAdvisorIntroducingNamedBean ( java.lang.String ) ) ; ITestBean org.springframework.aop.interceptor.ITestBean = ( ITestBean ) org.springframework.aop.interceptor.ProxyFactory . getProxy ( ) ; assertTrue ( STRING , org.springframework.aop.interceptor.ITestBean instanceof NamedBean ) ; org.springframework.aop.interceptor.ITestBean . getAge ( ) ; NamedBean org.springframework.aop.interceptor.NamedBean = ( NamedBean ) org.springframework.aop.interceptor.ITestBean ; assertEquals ( STRING , java.lang.String , org.springframework.aop.interceptor.NamedBean . getBeanName ( ) ) ; }  <METHOD_END>
