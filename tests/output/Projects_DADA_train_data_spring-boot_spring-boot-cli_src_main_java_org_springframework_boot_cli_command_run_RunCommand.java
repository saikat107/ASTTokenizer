<METHOD_START> public void ( ) { super( STRING , STRING , new org.springframework.boot.cli.command.run.RunCommand.RunOptionHandler ( ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( this . getHandler ( ) != null ) { ( ( org.springframework.boot.cli.command.run.RunCommand.RunOptionHandler ) this . getHandler ( ) ) . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.boot.cli.command.run.OptionSpec<java.lang.Void> = option ( STRING , STRING ) ; this . org.springframework.boot.cli.command.run.OptionSpec<java.lang.Void> = option ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , STRING ) ; this . org.springframework.boot.cli.command.run.OptionSpec<java.lang.Void> = option ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.boot.cli.command.run.SpringApplicationRunner != null ) { this . org.springframework.boot.cli.command.run.SpringApplicationRunner . stop ( ) ; } this . org.springframework.boot.cli.command.run.SpringApplicationRunner = null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected synchronized org.springframework.boot.cli.command.run.ExitStatus org.springframework.boot.cli.command.run.ExitStatus ( OptionSet org.springframework.boot.cli.command.run.OptionSet ) throws java.lang.Exception { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.boot.cli.command.run.SpringApplicationRunner != null ) { throw new java.lang.RuntimeException ( STRING ) ; } SourceOptions org.springframework.boot.cli.command.run.SourceOptions = new SourceOptions ( org.springframework.boot.cli.command.run.OptionSet ) ; java.util.List<org.springframework.boot.cli.command.run.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.command.run.RepositoryConfiguration> = RepositoryConfigurationFactory . createDefaultRepositoryConfiguration ( ) ; java.util.List<org.springframework.boot.cli.command.run.RepositoryConfiguration> . add ( NUMBER , new RepositoryConfiguration ( STRING , new java.io.File ( STRING ) . java.net.URI ( ) , true ) ) ; SpringApplicationRunnerConfiguration org.springframework.boot.cli.command.run.SpringApplicationRunnerConfiguration = new org.springframework.boot.cli.command.run.RunCommand.RunOptionHandler.SpringApplicationRunnerConfigurationAdapter ( org.springframework.boot.cli.command.run.OptionSet , this , java.util.List<org.springframework.boot.cli.command.run.RepositoryConfiguration> ) ; this . org.springframework.boot.cli.command.run.SpringApplicationRunner = new SpringApplicationRunner ( org.springframework.boot.cli.command.run.SpringApplicationRunnerConfiguration , org.springframework.boot.cli.command.run.SourceOptions . getSourcesArray ( ) , org.springframework.boot.cli.command.run.SourceOptions . getArgsArray ( ) ) ; this . org.springframework.boot.cli.command.run.SpringApplicationRunner . compileAndRun ( ) ; return ExitStatus . OK ; } }  <METHOD_END>
<METHOD_START> void ( OptionSet org.springframework.boot.cli.command.run.OptionSet , CompilerOptionHandler org.springframework.boot.cli.command.run.CompilerOptionHandler , java.util.List<org.springframework.boot.cli.command.run.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.command.run.RepositoryConfiguration> ) { super( org.springframework.boot.cli.command.run.OptionSet , org.springframework.boot.cli.command.run.CompilerOptionHandler , java.util.List<org.springframework.boot.cli.command.run.RepositoryConfiguration> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.cli.command.run.GroovyCompilerScope org.springframework.boot.cli.command.run.GroovyCompilerScope ( ) { return GroovyCompilerScope . DEFAULT ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return getOptions ( ) . has ( org.springframework.boot.cli.command.run.RunCommand.RunOptionHandler .this . org.springframework.boot.cli.command.run.OptionSpec<java.lang.Void> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.logging.Level java.util.logging.Level ( ) { if ( getOptions ( ) . has ( org.springframework.boot.cli.command.run.RunCommand.RunOptionHandler .this . org.springframework.boot.cli.command.run.OptionSpec<java.lang.Void> ) ) { return java.util.logging.Level . java.util.logging.Level ; } if ( getOptions ( ) . has ( org.springframework.boot.cli.command.run.RunCommand.RunOptionHandler .this . org.springframework.boot.cli.command.run.OptionSpec<java.lang.Void> ) ) { return java.util.logging.Level . java.util.logging.Level ; } return java.util.logging.Level . java.util.logging.Level ; }  <METHOD_END>
