<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext != null ) { this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . register ( ThymeleafAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . refresh ( ) ; TemplateEngine org.springframework.boot.autoconfigure.thymeleaf.TemplateEngine = this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . getBean ( TemplateEngine .class ) ; Context org.springframework.boot.autoconfigure.thymeleaf.Context = new Context ( java.util.Locale . java.util.Locale , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.thymeleaf.TemplateEngine . process ( STRING , org.springframework.boot.autoconfigure.thymeleaf.Context ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . register ( ThymeleafAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . refresh ( ) ; ITemplateResolver org.springframework.boot.autoconfigure.thymeleaf.ITemplateResolver = this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . getBean ( ITemplateResolver .class ) ; assertThat ( org.springframework.boot.autoconfigure.thymeleaf.ITemplateResolver instanceof SpringResourceTemplateResolver ) . isTrue ( ) ; assertThat ( ( ( SpringResourceTemplateResolver ) org.springframework.boot.autoconfigure.thymeleaf.ITemplateResolver ) . getCharacterEncoding ( ) ) . isEqualTo ( STRING ) ; ThymeleafViewResolver org.springframework.boot.autoconfigure.thymeleaf.ThymeleafViewResolver = this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . getBean ( ThymeleafViewResolver .class ) ; assertThat ( org.springframework.boot.autoconfigure.thymeleaf.ThymeleafViewResolver . getCharacterEncoding ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.thymeleaf.ThymeleafViewResolver . getContentType ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . register ( ThymeleafAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . refresh ( ) ; ITemplateResolver org.springframework.boot.autoconfigure.thymeleaf.ITemplateResolver = this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . getBean ( ITemplateResolver .class ) ; assertThat ( org.springframework.boot.autoconfigure.thymeleaf.ITemplateResolver . getOrder ( ) ) . isEqualTo ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . register ( ThymeleafAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . refresh ( ) ; ThymeleafViewResolver org.springframework.boot.autoconfigure.thymeleaf.ThymeleafViewResolver = this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . getBean ( ThymeleafViewResolver .class ) ; assertThat ( org.springframework.boot.autoconfigure.thymeleaf.ThymeleafViewResolver . getViewNames ( ) ) . isEqualTo ( new java.lang.String [] { STRING , STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . register ( ThymeleafAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.thymeleaf.OutputCapture . expect ( containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new java.io.File ( STRING ) . boolean ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . register ( ThymeleafAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigWebApplicationContext org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . register ( ThymeleafAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; MockServletContext org.springframework.boot.autoconfigure.thymeleaf.MockServletContext = new MockServletContext ( ) ; org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . setServletContext ( org.springframework.boot.autoconfigure.thymeleaf.MockServletContext ) ; org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . refresh ( ) ; ThymeleafView org.springframework.boot.autoconfigure.thymeleaf.ThymeleafView = ( ThymeleafView ) org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . getBean ( ThymeleafViewResolver .class ) . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; MockHttpServletResponse org.springframework.boot.autoconfigure.thymeleaf.MockHttpServletResponse = new MockHttpServletResponse ( ) ; MockHttpServletRequest org.springframework.boot.autoconfigure.thymeleaf.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.boot.autoconfigure.thymeleaf.MockHttpServletRequest . setAttribute ( RequestContext . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext ) ; org.springframework.boot.autoconfigure.thymeleaf.ThymeleafView . render ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , org.springframework.boot.autoconfigure.thymeleaf.MockHttpServletRequest , org.springframework.boot.autoconfigure.thymeleaf.MockHttpServletResponse ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.thymeleaf.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . register ( ThymeleafAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . refresh ( ) ; TemplateEngine org.springframework.boot.autoconfigure.thymeleaf.TemplateEngine = this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . getBean ( TemplateEngine .class ) ; Context org.springframework.boot.autoconfigure.thymeleaf.Context = new Context ( java.util.Locale . java.util.Locale , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.thymeleaf.TemplateEngine . process ( STRING , org.springframework.boot.autoconfigure.thymeleaf.Context ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . register ( ThymeleafAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . refresh ( ) ; TemplateEngine org.springframework.boot.autoconfigure.thymeleaf.TemplateEngine = this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . getBean ( TemplateEngine .class ) ; Context org.springframework.boot.autoconfigure.thymeleaf.Context = new Context ( java.util.Locale . java.util.Locale ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.thymeleaf.TemplateEngine . process ( STRING , org.springframework.boot.autoconfigure.thymeleaf.Context ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . register ( ThymeleafAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . refresh ( ) ; TemplateEngine org.springframework.boot.autoconfigure.thymeleaf.TemplateEngine = this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . getBean ( TemplateEngine .class ) ; Context org.springframework.boot.autoconfigure.thymeleaf.Context = new Context ( java.util.Locale . java.util.Locale , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.thymeleaf.TemplateEngine . process ( STRING , org.springframework.boot.autoconfigure.thymeleaf.Context ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ThymeleafAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; assertThat ( org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigApplicationContext . getBeanNamesForType ( ViewResolver .class ) . length ) . isEqualTo ( NUMBER ) ; try { TemplateEngine org.springframework.boot.autoconfigure.thymeleaf.TemplateEngine = org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigApplicationContext . getBean ( TemplateEngine .class ) ; Context org.springframework.boot.autoconfigure.thymeleaf.Context = new Context ( java.util.Locale . java.util.Locale , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.thymeleaf.TemplateEngine . process ( STRING , org.springframework.boot.autoconfigure.thymeleaf.Context ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; } finally { org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . register ( ThymeleafAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . getBeansOfType ( ResourceUrlEncodingFilter .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . register ( ThymeleafAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . getBean ( ResourceUrlEncodingFilter .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfigurationTests.LayoutDialectConfiguration .class ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . refresh ( ) ; LayoutDialect org.springframework.boot.autoconfigure.thymeleaf.LayoutDialect = this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . getBean ( LayoutDialect .class ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.thymeleaf.LayoutDialect , STRING ) ) . isInstanceOf ( GroupingStrategy .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . register ( ThymeleafAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . getBean ( ThymeleafViewResolver .class ) . isCache ( ) ) . isFalse ( ) ; SpringResourceTemplateResolver org.springframework.boot.autoconfigure.thymeleaf.SpringResourceTemplateResolver = this . org.springframework.boot.autoconfigure.thymeleaf.AnnotationConfigWebApplicationContext . getBean ( SpringResourceTemplateResolver .class ) ; assertThat ( org.springframework.boot.autoconfigure.thymeleaf.SpringResourceTemplateResolver . isCacheable ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.thymeleaf.LayoutDialect org.springframework.boot.autoconfigure.thymeleaf.LayoutDialect ( ) { return new LayoutDialect ( new GroupingStrategy ( ) ) ; }  <METHOD_END>
