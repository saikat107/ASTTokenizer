<METHOD_START> public void ( java.lang.Object ... java.lang.Object[] ) { void ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public void ( ResourceLoader org.springframework.boot.ResourceLoader , java.lang.Object ... java.lang.Object[] ) { this . org.springframework.boot.ResourceLoader = org.springframework.boot.ResourceLoader ; void ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private void void ( java.lang.Object [] java.lang.Object[] ) { if ( java.lang.Object[] != null && java.lang.Object[] . int > NUMBER ) { this . java.util.Set<java.lang.Object> . boolean ( java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) ) ; } this . org.springframework.boot.WebApplicationType = org.springframework.boot.WebApplicationType ( ) ; void ( ( java.util.Collection ) java.util.Collection<org.springframework.boot.ApplicationContextInitializer> ( ApplicationContextInitializer .class ) ) ; void ( ( java.util.Collection ) java.util.Collection<org.springframework.boot.ApplicationListener> ( ApplicationListener .class ) ) ; this . java.lang.Class<?> = java.lang.Class<?> ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.WebApplicationType org.springframework.boot.WebApplicationType ( ) { if ( ClassUtils . isPresent ( java.lang.String , null ) && ! ClassUtils . isPresent ( java.lang.String , null ) ) { return WebApplicationType . REACTIVE ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ! ClassUtils . isPresent ( java.lang.String , null ) ) { return WebApplicationType . NONE ; } } return WebApplicationType . SERVLET ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( ) { try { java.lang.StackTraceElement [] java.lang.StackTraceElement[] = new java.lang.RuntimeException ( ) . java.lang.StackTraceElement[] ( ) ; for ( java.lang.StackTraceElement java.lang.StackTraceElement : java.lang.StackTraceElement[] ) { if ( STRING . boolean ( java.lang.StackTraceElement . java.lang.String ( ) ) ) { return java.lang.Class . java.lang.Class<?> ( java.lang.StackTraceElement . java.lang.String ( ) ) ; } } } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { } return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext ( java.lang.String ... java.lang.String[] ) { StopWatch org.springframework.boot.StopWatch = new StopWatch ( ) ; org.springframework.boot.StopWatch . start ( ) ; ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext = null ; java.util.Collection<org.springframework.boot.SpringBootExceptionReporter> < SpringBootExceptionReporter > java.util.Collection<org.springframework.boot.SpringBootExceptionReporter> = new java.util.ArrayList<org.springframework.boot.SpringBootExceptionReporter> <> ( ) ; void ( ) ; SpringApplicationRunListeners org.springframework.boot.SpringApplicationRunListeners = org.springframework.boot.SpringApplicationRunListeners ( java.lang.String[] ) ; org.springframework.boot.SpringApplicationRunListeners . starting ( ) ; try { ApplicationArguments org.springframework.boot.ApplicationArguments = new DefaultApplicationArguments ( java.lang.String[] ) ; ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment = org.springframework.boot.ConfigurableEnvironment ( org.springframework.boot.SpringApplicationRunListeners , org.springframework.boot.ApplicationArguments ) ; void ( org.springframework.boot.ConfigurableEnvironment ) ; void ( org.springframework.boot.ConfigurableEnvironment ) ; Banner org.springframework.boot.Banner = org.springframework.boot.Banner ( org.springframework.boot.ConfigurableEnvironment ) ; org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.ConfigurableApplicationContext ( ) ; java.util.Collection<org.springframework.boot.SpringBootExceptionReporter> = java.util.Collection<org.springframework.boot.SpringBootExceptionReporter> ( SpringBootExceptionReporter .class , new java.lang.Class [] { ConfigurableApplicationContext .class } , org.springframework.boot.ConfigurableApplicationContext ) ; void ( org.springframework.boot.ConfigurableApplicationContext , org.springframework.boot.ConfigurableEnvironment , org.springframework.boot.SpringApplicationRunListeners , org.springframework.boot.ApplicationArguments , org.springframework.boot.Banner ) ; void ( org.springframework.boot.ConfigurableApplicationContext ) ; void ( org.springframework.boot.ConfigurableApplicationContext , org.springframework.boot.ApplicationArguments ) ; org.springframework.boot.SpringApplicationRunListeners . finished ( org.springframework.boot.ConfigurableApplicationContext , null ) ; org.springframework.boot.StopWatch . stop ( ) ; if ( this . boolean ) { new StartupInfoLogger ( this . java.lang.Class<> ) . logStarted ( org.springframework.boot.Log ( ) , org.springframework.boot.StopWatch ) ; } return org.springframework.boot.ConfigurableApplicationContext ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( org.springframework.boot.ConfigurableApplicationContext , org.springframework.boot.SpringApplicationRunListeners , java.util.Collection<org.springframework.boot.SpringBootExceptionReporter> , java.lang.Throwable ) ; throw new java.lang.IllegalStateException ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment ( SpringApplicationRunListeners org.springframework.boot.SpringApplicationRunListeners , ApplicationArguments org.springframework.boot.ApplicationArguments ) { ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment = org.springframework.boot.ConfigurableEnvironment ( ) ; void ( org.springframework.boot.ConfigurableEnvironment , org.springframework.boot.ApplicationArguments . getSourceArgs ( ) ) ; org.springframework.boot.SpringApplicationRunListeners . environmentPrepared ( org.springframework.boot.ConfigurableEnvironment ) ; if ( boolean ( org.springframework.boot.ConfigurableEnvironment ) && this . org.springframework.boot.WebApplicationType == WebApplicationType . NONE ) { org.springframework.boot.ConfigurableEnvironment = org.springframework.boot.ConfigurableEnvironment ( org.springframework.boot.ConfigurableEnvironment ) ; } return org.springframework.boot.ConfigurableEnvironment ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext , ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment , SpringApplicationRunListeners org.springframework.boot.SpringApplicationRunListeners , ApplicationArguments org.springframework.boot.ApplicationArguments , Banner org.springframework.boot.Banner ) { org.springframework.boot.ConfigurableApplicationContext . setEnvironment ( org.springframework.boot.ConfigurableEnvironment ) ; void ( org.springframework.boot.ConfigurableApplicationContext ) ; void ( org.springframework.boot.ConfigurableApplicationContext ) ; org.springframework.boot.SpringApplicationRunListeners . contextPrepared ( org.springframework.boot.ConfigurableApplicationContext ) ; if ( this . boolean ) { void ( org.springframework.boot.ConfigurableApplicationContext . getParent ( ) == null ) ; void ( org.springframework.boot.ConfigurableApplicationContext ) ; } org.springframework.boot.ConfigurableApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.boot.ApplicationArguments ) ; if ( org.springframework.boot.Banner != null ) { org.springframework.boot.ConfigurableApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.boot.Banner ) ; } java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = java.util.Set<java.lang.Object> ( ) ; Assert . notEmpty ( java.util.Set<java.lang.Object> , STRING ) ; void ( org.springframework.boot.ConfigurableApplicationContext , java.util.Set<java.lang.Object> . java.lang.Object[] ( new java.lang.Object [ java.util.Set<java.lang.Object> . int ( ) ] ) ) ; org.springframework.boot.SpringApplicationRunListeners . contextLoaded ( org.springframework.boot.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext ) { void ( org.springframework.boot.ConfigurableApplicationContext ) ; if ( this . boolean ) { try { org.springframework.boot.ConfigurableApplicationContext . registerShutdownHook ( ) ; } catch ( java.security.AccessControlException java.security.AccessControlException ) { } } }  <METHOD_END>
<METHOD_START> private void void ( ) { java.lang.System . java.lang.String ( java.lang.String , java.lang.System . java.lang.String ( java.lang.String , java.lang.Boolean . java.lang.String ( this . boolean ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.SpringApplicationRunListeners org.springframework.boot.SpringApplicationRunListeners ( java.lang.String [] java.lang.String[] ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [] { org.springframework.boot.SpringApplication .class , java.lang.String [] .class } ; return new SpringApplicationRunListeners ( org.springframework.boot.Log , java.util.Collection<org.springframework.boot.SpringApplicationRunListener> ( SpringApplicationRunListener .class , java.lang.Class<?>[] , this , java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> private < T > java.util.Collection<T> < T > java.util.Collection<T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return java.util.Collection<T> ( java.lang.Class<T> , new java.lang.Class<?> < ? > [] {} ) ; }  <METHOD_END>
<METHOD_START> private < T > java.util.Collection<T> < T > java.util.Collection<T> ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.Object ... java.lang.Object[] ) { java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet <> ( SpringFactoriesLoader . loadFactoryNames ( java.lang.Class<T> , java.lang.ClassLoader ) ) ; java.util.List<T> < T > java.util.List<T> = java.util.List<T> ( java.lang.Class<T> , java.lang.Class<?>[] , java.lang.ClassLoader , java.lang.Object[] , java.util.Set<java.lang.String> ) ; AnnotationAwareOrderComparator . sort ( java.util.List<T> ) ; return java.util.List<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > java.util.List<T> < T > java.util.List<T> ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.ClassLoader java.lang.ClassLoader , java.lang.Object [] java.lang.Object[] , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ) { java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> <> ( java.util.Set<java.lang.String> . int ( ) ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.String , java.lang.ClassLoader ) ; Assert . isAssignable ( java.lang.Class<T> , java.lang.Class<> ) ; java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = java.lang.Class<> . java.lang.reflect.Constructor<> ( java.lang.Class<?>[] ) ; T T = ( T ) BeanUtils . instantiateClass ( java.lang.reflect.Constructor<> , java.lang.Object[] ) ; java.util.List<T> . boolean ( T ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<T> + STRING + java.lang.String , java.lang.Throwable ) ; } } return java.util.List<T> ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment ( ) { if ( this . org.springframework.boot.ConfigurableEnvironment != null ) { return this . org.springframework.boot.ConfigurableEnvironment ; } if ( this . org.springframework.boot.WebApplicationType == WebApplicationType . SERVLET ) { return new StandardServletEnvironment ( ) ; } return new StandardEnvironment ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment , java.lang.String [] java.lang.String[] ) { void ( org.springframework.boot.ConfigurableEnvironment , java.lang.String[] ) ; void ( org.springframework.boot.ConfigurableEnvironment , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.String , java.lang.ClassLoader ( ) ) ; return ( java.lang.Class<> . boolean ( org.springframework.boot.ConfigurableEnvironment ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { return false ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment ( ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment ) { StandardEnvironment org.springframework.boot.StandardEnvironment = new StandardEnvironment ( ) ; void ( org.springframework.boot.StandardEnvironment . getPropertySources ( ) ) ; org.springframework.boot.StandardEnvironment . setActiveProfiles ( org.springframework.boot.ConfigurableEnvironment . getActiveProfiles ( ) ) ; for ( PropertySource < ? > org.springframework.boot.PropertySource<?> : org.springframework.boot.ConfigurableEnvironment . getPropertySources ( ) ) { if ( ! java.util.Set<java.lang.String> . boolean ( org.springframework.boot.PropertySource<> . getName ( ) ) ) { org.springframework.boot.StandardEnvironment . getPropertySources ( ) . addLast ( org.springframework.boot.PropertySource<> ) ; } } return org.springframework.boot.StandardEnvironment ; }  <METHOD_END>
<METHOD_START> private void void ( MutablePropertySources org.springframework.boot.MutablePropertySources ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( PropertySource < ? > org.springframework.boot.PropertySource<?> : org.springframework.boot.MutablePropertySources ) { java.util.Set<java.lang.String> . boolean ( org.springframework.boot.PropertySource<> . getName ( ) ) ; } for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { org.springframework.boot.MutablePropertySources . remove ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment , java.lang.String [] java.lang.String[] ) { MutablePropertySources org.springframework.boot.MutablePropertySources = org.springframework.boot.ConfigurableEnvironment . getPropertySources ( ) ; if ( this . java.util.Map<java.lang.String,java.lang.Object> != null && ! this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) ) { org.springframework.boot.MutablePropertySources . addLast ( new MapPropertySource ( STRING , this . java.util.Map<java.lang.String,java.lang.Object> ) ) ; } if ( this . boolean && java.lang.String[] . int > NUMBER ) { java.lang.String java.lang.String = CommandLinePropertySource . COMMAND_LINE_PROPERTY_SOURCE_NAME ; if ( org.springframework.boot.MutablePropertySources . contains ( java.lang.String ) ) { PropertySource < ? > org.springframework.boot.PropertySource<?> = org.springframework.boot.MutablePropertySources . get ( java.lang.String ) ; CompositePropertySource org.springframework.boot.CompositePropertySource = new CompositePropertySource ( java.lang.String ) ; org.springframework.boot.CompositePropertySource . addPropertySource ( new SimpleCommandLinePropertySource ( java.lang.String + STRING + java.lang.String[] . int ( ) , java.lang.String[] ) ) ; org.springframework.boot.CompositePropertySource . addPropertySource ( org.springframework.boot.PropertySource<> ) ; org.springframework.boot.MutablePropertySources . replace ( java.lang.String , org.springframework.boot.CompositePropertySource ) ; } else { org.springframework.boot.MutablePropertySources . addFirst ( new SimpleCommandLinePropertySource ( java.lang.String[] ) ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment , java.lang.String [] java.lang.String[] ) { org.springframework.boot.ConfigurableEnvironment . getActiveProfiles ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( this . java.util.Set<java.lang.String> ) ; java.util.Set<java.lang.String> . boolean ( java.util.Arrays . java.util.List ( org.springframework.boot.ConfigurableEnvironment . getActiveProfiles ( ) ) ) ; org.springframework.boot.ConfigurableEnvironment . setActiveProfiles ( java.util.Set<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.Set<java.lang.String> . int ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment ) { if ( java.lang.System . java.lang.String ( CachedIntrospectionResults . IGNORE_BEANINFO_PROPERTY_NAME ) == null ) { RelaxedPropertyResolver org.springframework.boot.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.ConfigurableEnvironment , STRING ) ; java.lang.Boolean java.lang.Boolean = org.springframework.boot.RelaxedPropertyResolver . getProperty ( STRING , java.lang.Boolean .class , java.lang.Boolean . java.lang.Boolean ) ; java.lang.System . java.lang.String ( CachedIntrospectionResults . IGNORE_BEANINFO_PROPERTY_NAME , java.lang.Boolean . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment ) { PropertiesConfigurationFactory < org.springframework.boot.SpringApplication > org.springframework.boot.PropertiesConfigurationFactory<org.springframework.boot.SpringApplication> = new PropertiesConfigurationFactory <> ( this ) ; ConversionService org.springframework.boot.ConversionService = new DefaultConversionService ( ) ; org.springframework.boot.PropertiesConfigurationFactory<org.springframework.boot.SpringApplication> . setTargetName ( STRING ) ; org.springframework.boot.PropertiesConfigurationFactory<org.springframework.boot.SpringApplication> . setConversionService ( org.springframework.boot.ConversionService ) ; org.springframework.boot.PropertiesConfigurationFactory<org.springframework.boot.SpringApplication> . setPropertySources ( org.springframework.boot.ConfigurableEnvironment . getPropertySources ( ) ) ; try { org.springframework.boot.PropertiesConfigurationFactory<org.springframework.boot.SpringApplication> . bindPropertiesToTarget ( ) ; } catch ( BindException org.springframework.boot.BindException ) { throw new java.lang.IllegalStateException ( STRING , org.springframework.boot.BindException ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.Banner org.springframework.boot.Banner ( ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment ) { if ( this . Banner.Mode == Banner . Mode . OFF ) { return null ; } ResourceLoader org.springframework.boot.ResourceLoader = this . org.springframework.boot.ResourceLoader != null ? this . org.springframework.boot.ResourceLoader : new DefaultResourceLoader ( java.lang.ClassLoader ( ) ) ; SpringApplicationBannerPrinter org.springframework.boot.SpringApplicationBannerPrinter = new SpringApplicationBannerPrinter ( org.springframework.boot.ResourceLoader , this . org.springframework.boot.Banner ) ; if ( this . Banner.Mode == Mode . LOG ) { return org.springframework.boot.SpringApplicationBannerPrinter . print ( org.springframework.boot.ConfigurableEnvironment , this . java.lang.Class<> , org.springframework.boot.Log ) ; } return org.springframework.boot.SpringApplicationBannerPrinter . print ( org.springframework.boot.ConfigurableEnvironment , this . java.lang.Class<> , java.lang.System . java.io.PrintStream ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = this . java.lang.Class<> ; if ( java.lang.Class<> == null ) { try { switch ( this . org.springframework.boot.WebApplicationType ) { case SERVLET : java.lang.Class<?> = java.lang.Class . java.lang.Class<?> ( java.lang.String ) ; break; case REACTIVE : java.lang.Class<?> = java.lang.Class . java.lang.Class<?> ( java.lang.String ) ; break; default: java.lang.Class<?> = java.lang.Class . java.lang.Class<?> ( java.lang.String ) ; } } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new java.lang.IllegalStateException ( STRING + STRING , java.lang.ClassNotFoundException ) ; } } return ( ConfigurableApplicationContext ) BeanUtils . instantiateClass ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext ) { if ( this . org.springframework.boot.BeanNameGenerator != null ) { org.springframework.boot.ConfigurableApplicationContext . getBeanFactory ( ) . registerSingleton ( AnnotationConfigUtils . CONFIGURATION_BEAN_NAME_GENERATOR , this . org.springframework.boot.BeanNameGenerator ) ; } if ( this . org.springframework.boot.ResourceLoader != null ) { if ( org.springframework.boot.ConfigurableApplicationContext instanceof GenericApplicationContext ) { ( ( GenericApplicationContext ) org.springframework.boot.ConfigurableApplicationContext ) . setResourceLoader ( this . org.springframework.boot.ResourceLoader ) ; } if ( org.springframework.boot.ConfigurableApplicationContext instanceof DefaultResourceLoader ) { ( ( DefaultResourceLoader ) org.springframework.boot.ConfigurableApplicationContext ) . setClassLoader ( this . org.springframework.boot.ResourceLoader . getClassLoader ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected void void ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext ) { for ( ApplicationContextInitializer org.springframework.boot.ApplicationContextInitializer : java.util.Set<org.springframework.boot.ApplicationContextInitializer<?>> ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = GenericTypeResolver . resolveTypeArgument ( org.springframework.boot.ApplicationContextInitializer . getClass ( ) , ApplicationContextInitializer .class ) ; Assert . isInstanceOf ( java.lang.Class<> , org.springframework.boot.ConfigurableApplicationContext , STRING ) ; org.springframework.boot.ApplicationContextInitializer . initialize ( org.springframework.boot.ConfigurableApplicationContext ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( boolean boolean ) { if ( boolean ) { new StartupInfoLogger ( this . java.lang.Class<> ) . logStarting ( org.springframework.boot.Log ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext ) { Log org.springframework.boot.Log = org.springframework.boot.Log ( ) ; if ( org.springframework.boot.Log . isInfoEnabled ( ) ) { java.lang.String [] java.lang.String[] = org.springframework.boot.ConfigurableApplicationContext . getEnvironment ( ) . getActiveProfiles ( ) ; if ( ObjectUtils . isEmpty ( java.lang.String[] ) ) { java.lang.String [] java.lang.String[] = org.springframework.boot.ConfigurableApplicationContext . getEnvironment ( ) . getDefaultProfiles ( ) ; org.springframework.boot.Log . info ( STRING + StringUtils . arrayToCommaDelimitedString ( java.lang.String[] ) ) ; } else { org.springframework.boot.Log . info ( STRING + StringUtils . arrayToCommaDelimitedString ( java.lang.String[] ) ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.Log org.springframework.boot.Log ( ) { if ( this . java.lang.Class<> == null ) { return org.springframework.boot.Log ; } return LogFactory . getLog ( this . java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ApplicationContext org.springframework.boot.ApplicationContext , java.lang.Object [] java.lang.Object[] ) { if ( org.springframework.boot.Log . isDebugEnabled ( ) ) { org.springframework.boot.Log . debug ( STRING + StringUtils . arrayToCommaDelimitedString ( java.lang.Object[] ) ) ; } BeanDefinitionLoader org.springframework.boot.BeanDefinitionLoader = org.springframework.boot.BeanDefinitionLoader ( org.springframework.boot.BeanDefinitionRegistry ( org.springframework.boot.ApplicationContext ) , java.lang.Object[] ) ; if ( this . org.springframework.boot.BeanNameGenerator != null ) { org.springframework.boot.BeanDefinitionLoader . setBeanNameGenerator ( this . org.springframework.boot.BeanNameGenerator ) ; } if ( this . org.springframework.boot.ResourceLoader != null ) { org.springframework.boot.BeanDefinitionLoader . setResourceLoader ( this . org.springframework.boot.ResourceLoader ) ; } if ( this . org.springframework.boot.ConfigurableEnvironment != null ) { org.springframework.boot.BeanDefinitionLoader . setEnvironment ( this . org.springframework.boot.ConfigurableEnvironment ) ; } org.springframework.boot.BeanDefinitionLoader . load ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.ResourceLoader org.springframework.boot.ResourceLoader ( ) { return this . org.springframework.boot.ResourceLoader ; }  <METHOD_END>
<METHOD_START> public java.lang.ClassLoader java.lang.ClassLoader ( ) { if ( this . org.springframework.boot.ResourceLoader != null ) { return this . org.springframework.boot.ResourceLoader . getClassLoader ( ) ; } return ClassUtils . getDefaultClassLoader ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.BeanDefinitionRegistry org.springframework.boot.BeanDefinitionRegistry ( ApplicationContext org.springframework.boot.ApplicationContext ) { if ( org.springframework.boot.ApplicationContext instanceof BeanDefinitionRegistry ) { return ( BeanDefinitionRegistry ) org.springframework.boot.ApplicationContext ; } if ( org.springframework.boot.ApplicationContext instanceof AbstractApplicationContext ) { return ( BeanDefinitionRegistry ) ( ( AbstractApplicationContext ) org.springframework.boot.ApplicationContext ) . getBeanFactory ( ) ; } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.BeanDefinitionLoader org.springframework.boot.BeanDefinitionLoader ( BeanDefinitionRegistry org.springframework.boot.BeanDefinitionRegistry , java.lang.Object [] java.lang.Object[] ) { return new BeanDefinitionLoader ( org.springframework.boot.BeanDefinitionRegistry , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ApplicationContext org.springframework.boot.ApplicationContext ) { Assert . isInstanceOf ( AbstractApplicationContext .class , org.springframework.boot.ApplicationContext ) ; ( ( AbstractApplicationContext ) org.springframework.boot.ApplicationContext ) . refresh ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext , ApplicationArguments org.springframework.boot.ApplicationArguments ) { void ( org.springframework.boot.ConfigurableApplicationContext , org.springframework.boot.ApplicationArguments ) ; }  <METHOD_END>
<METHOD_START> private void void ( ApplicationContext org.springframework.boot.ApplicationContext , ApplicationArguments org.springframework.boot.ApplicationArguments ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.boot.ApplicationContext . getBeansOfType ( ApplicationRunner .class ) . values ( ) ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.boot.ApplicationContext . getBeansOfType ( CommandLineRunner .class ) . values ( ) ) ; AnnotationAwareOrderComparator . sort ( java.util.List<java.lang.Object> ) ; for ( java.lang.Object java.lang.Object : new java.util.LinkedHashSet<java.lang.Object> <> ( java.util.List<java.lang.Object> ) ) { if ( java.lang.Object instanceof ApplicationRunner ) { void ( ( ApplicationRunner ) java.lang.Object , org.springframework.boot.ApplicationArguments ) ; } if ( java.lang.Object instanceof CommandLineRunner ) { void ( ( CommandLineRunner ) java.lang.Object , org.springframework.boot.ApplicationArguments ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ApplicationRunner org.springframework.boot.ApplicationRunner , ApplicationArguments org.springframework.boot.ApplicationArguments ) { try { ( org.springframework.boot.ApplicationRunner ) . run ( org.springframework.boot.ApplicationArguments ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( CommandLineRunner org.springframework.boot.CommandLineRunner , ApplicationArguments org.springframework.boot.ApplicationArguments ) { try { ( org.springframework.boot.CommandLineRunner ) . run ( org.springframework.boot.ApplicationArguments . getSourceArgs ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext , SpringApplicationRunListeners org.springframework.boot.SpringApplicationRunListeners , java.util.Collection<org.springframework.boot.SpringBootExceptionReporter> < SpringBootExceptionReporter > java.util.Collection<org.springframework.boot.SpringBootExceptionReporter> , java.lang.Throwable java.lang.Throwable ) { try { try { void ( org.springframework.boot.ConfigurableApplicationContext , java.lang.Throwable ) ; org.springframework.boot.SpringApplicationRunListeners . finished ( org.springframework.boot.ConfigurableApplicationContext , java.lang.Throwable ) ; } finally { void ( java.util.Collection<org.springframework.boot.SpringBootExceptionReporter> , java.lang.Throwable ) ; if ( org.springframework.boot.ConfigurableApplicationContext != null ) { org.springframework.boot.ConfigurableApplicationContext . close ( ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.Log . warn ( STRING , java.lang.Exception ) ; } ReflectionUtils . rethrowRuntimeException ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Collection<org.springframework.boot.SpringBootExceptionReporter> < SpringBootExceptionReporter > java.util.Collection<org.springframework.boot.SpringBootExceptionReporter> , java.lang.Throwable java.lang.Throwable ) { try { for ( SpringBootExceptionReporter org.springframework.boot.SpringBootExceptionReporter : java.util.Collection<org.springframework.boot.SpringBootExceptionReporter> ) { if ( org.springframework.boot.SpringBootExceptionReporter . reportException ( java.lang.Throwable ) ) { void ( java.lang.Throwable ) ; return; } } } catch ( java.lang.Throwable java.lang.Throwable ) { } if ( org.springframework.boot.Log . isErrorEnabled ( ) ) { org.springframework.boot.Log . error ( STRING , java.lang.Throwable ) ; void ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Throwable java.lang.Throwable ) { SpringBootExceptionHandler org.springframework.boot.SpringBootExceptionHandler = org.springframework.boot.SpringBootExceptionHandler ( ) ; if ( org.springframework.boot.SpringBootExceptionHandler != null ) { org.springframework.boot.SpringBootExceptionHandler . registerLoggedException ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext , java.lang.Throwable java.lang.Throwable ) { int int = int ( org.springframework.boot.ConfigurableApplicationContext , java.lang.Throwable ) ; if ( int != NUMBER ) { if ( org.springframework.boot.ConfigurableApplicationContext != null ) { org.springframework.boot.ConfigurableApplicationContext . publishEvent ( new ExitCodeEvent ( org.springframework.boot.ConfigurableApplicationContext , int ) ) ; } SpringBootExceptionHandler org.springframework.boot.SpringBootExceptionHandler = org.springframework.boot.SpringBootExceptionHandler ( ) ; if ( org.springframework.boot.SpringBootExceptionHandler != null ) { org.springframework.boot.SpringBootExceptionHandler . registerExitCode ( int ) ; } } }  <METHOD_END>
<METHOD_START> private int int ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext , java.lang.Throwable java.lang.Throwable ) { int int = int ( org.springframework.boot.ConfigurableApplicationContext , java.lang.Throwable ) ; if ( int == NUMBER ) { int = int ( java.lang.Throwable ) ; } return int ; }  <METHOD_END>
<METHOD_START> private int int ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext , java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.boot.ConfigurableApplicationContext == null || ! org.springframework.boot.ConfigurableApplicationContext . isActive ( ) ) { return NUMBER ; } ExitCodeGenerators org.springframework.boot.ExitCodeGenerators = new ExitCodeGenerators ( ) ; java.util.Collection<org.springframework.boot.ExitCodeExceptionMapper> < ExitCodeExceptionMapper > java.util.Collection<org.springframework.boot.ExitCodeExceptionMapper> = org.springframework.boot.ConfigurableApplicationContext . getBeansOfType ( ExitCodeExceptionMapper .class ) . values ( ) ; org.springframework.boot.ExitCodeGenerators . addAll ( java.lang.Throwable , java.util.Collection<org.springframework.boot.ExitCodeExceptionMapper> ) ; return org.springframework.boot.ExitCodeGenerators . getExitCode ( ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable == null ) { return NUMBER ; } if ( java.lang.Throwable instanceof ExitCodeGenerator ) { return ( ( ExitCodeGenerator ) java.lang.Throwable ) . getExitCode ( ) ; } return int ( java.lang.Throwable . java.lang.Throwable ( ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.boot.SpringBootExceptionHandler org.springframework.boot.SpringBootExceptionHandler ( ) { if ( boolean ( java.lang.Thread . java.lang.Thread ( ) ) ) { return SpringBootExceptionHandler . forCurrentThread ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Thread java.lang.Thread ) { return ( STRING . boolean ( java.lang.Thread . java.lang.String ( ) ) || STRING . boolean ( java.lang.Thread . java.lang.String ( ) ) ) && STRING . boolean ( java.lang.Thread . java.lang.ThreadGroup ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public boolean boolean ( ) { return this . org.springframework.boot.WebApplicationType == WebApplicationType . SERVLET ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.WebApplicationType org.springframework.boot.WebApplicationType ( ) { return this . org.springframework.boot.WebApplicationType ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public void void ( boolean boolean ) { this . org.springframework.boot.WebApplicationType = boolean ? WebApplicationType . SERVLET : WebApplicationType . NONE ; }  <METHOD_END>
<METHOD_START> public void void ( WebApplicationType org.springframework.boot.WebApplicationType ) { Assert . notNull ( org.springframework.boot.WebApplicationType , STRING ) ; this . org.springframework.boot.WebApplicationType = org.springframework.boot.WebApplicationType ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( Banner org.springframework.boot.Banner ) { this . org.springframework.boot.Banner = org.springframework.boot.Banner ; }  <METHOD_END>
<METHOD_START> public void void ( Banner . Banner Banner.Mode ) { this . Banner.Mode = Banner.Mode ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; for ( java.lang.Object java.lang.Object : java.util.Collections . java.util.ArrayList<> ( java.util.Properties . java.util.Enumeration<?> ( ) ) ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ( java.lang.String ) java.lang.Object , java.util.Properties . java.lang.Object ( java.lang.Object ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { this . java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( BeanNameGenerator org.springframework.boot.BeanNameGenerator ) { this . org.springframework.boot.BeanNameGenerator = org.springframework.boot.BeanNameGenerator ; }  <METHOD_END>
<METHOD_START> public void void ( ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment ) { this . org.springframework.boot.ConfigurableEnvironment = org.springframework.boot.ConfigurableEnvironment ; }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> ( ) { return this . java.util.Set<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> ) { Assert . notNull ( java.util.Set<java.lang.Object> , STRING ) ; this . java.util.Set<java.lang.Object> . boolean ( java.util.Set<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ResourceLoader org.springframework.boot.ResourceLoader ) { Assert . notNull ( org.springframework.boot.ResourceLoader , STRING ) ; this . org.springframework.boot.ResourceLoader = org.springframework.boot.ResourceLoader ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<? extends org.springframework.boot.ConfigurableApplicationContext> < ? extends ConfigurableApplicationContext > java.lang.Class<? extends org.springframework.boot.ConfigurableApplicationContext> ) { this . java.lang.Class<? extends org.springframework.boot.ConfigurableApplicationContext> = java.lang.Class<> ; if ( ! boolean ( java.lang.Class<> ) ) { this . org.springframework.boot.WebApplicationType = WebApplicationType . NONE ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { try { return WebApplicationContext .class . boolean ( java.lang.Class<> ) ; } catch ( java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError ) { return false ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<? extends org.springframework.boot.ApplicationContextInitializer<?>> < ? extends ApplicationContextInitializer < ? > > java.util.Collection<? extends org.springframework.boot.ApplicationContextInitializer<?>> ) { this . java.util.List<org.springframework.boot.ApplicationContextInitializer<?>> = new java.util.ArrayList <> ( ) ; this . java.util.List<org.springframework.boot.ApplicationContextInitializer<?>> . addAll ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.boot.ApplicationContextInitializer<?> < ? > ... org.springframework.boot.ApplicationContextInitializer<?>[] ) { this . java.util.List<org.springframework.boot.ApplicationContextInitializer<?>> . addAll ( java.util.Arrays . java.util.List ( org.springframework.boot.ApplicationContextInitializer<?>[] ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.boot.ApplicationContextInitializer<?>> < ApplicationContextInitializer < ? > > java.util.Set<org.springframework.boot.ApplicationContextInitializer<?>> ( ) { return java.util.Set<org.springframework.boot.ApplicationContextInitializer<?>> ( this . java.util.List<org.springframework.boot.ApplicationContextInitializer<?>> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<? extends org.springframework.boot.ApplicationListener<?>> < ? extends ApplicationListener < ? > > java.util.Collection<? extends org.springframework.boot.ApplicationListener<?>> ) { this . java.util.List<org.springframework.boot.ApplicationListener<?>> = new java.util.ArrayList <> ( ) ; this . java.util.List<org.springframework.boot.ApplicationListener<?>> . addAll ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.boot.ApplicationListener<?> < ? > ... org.springframework.boot.ApplicationListener<?>[] ) { this . java.util.List<org.springframework.boot.ApplicationListener<?>> . addAll ( java.util.Arrays . java.util.List ( org.springframework.boot.ApplicationListener<?>[] ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.boot.ApplicationListener<?>> < ApplicationListener < ? > > java.util.Set<org.springframework.boot.ApplicationListener<?>> ( ) { return java.util.Set<org.springframework.boot.ApplicationListener<?>> ( this . java.util.List<org.springframework.boot.ApplicationListener<?>> ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext ( java.lang.Object java.lang.Object , java.lang.String ... java.lang.String[] ) { return org.springframework.boot.ConfigurableApplicationContext ( new java.lang.Object [] { java.lang.Object } , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext ( java.lang.Object [] java.lang.Object[] , java.lang.String [] java.lang.String[] ) { return new org.springframework.boot.SpringApplication ( java.lang.Object[] ) . org.springframework.boot.ConfigurableApplicationContext ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) throws java.lang.Exception { org.springframework.boot.SpringApplication . org.springframework.boot.ConfigurableApplicationContext ( new java.lang.Object [ NUMBER ] , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public static int int ( ApplicationContext org.springframework.boot.ApplicationContext , ExitCodeGenerator ... org.springframework.boot.ExitCodeGenerator[] ) { Assert . notNull ( org.springframework.boot.ApplicationContext , STRING ) ; int int = NUMBER ; try { try { ExitCodeGenerators org.springframework.boot.ExitCodeGenerators = new ExitCodeGenerators ( ) ; java.util.Collection<org.springframework.boot.ExitCodeGenerator> < ExitCodeGenerator > java.util.Collection<org.springframework.boot.ExitCodeGenerator> = org.springframework.boot.ApplicationContext . getBeansOfType ( ExitCodeGenerator .class ) . values ( ) ; org.springframework.boot.ExitCodeGenerators . addAll ( org.springframework.boot.ExitCodeGenerator[] ) ; org.springframework.boot.ExitCodeGenerators . addAll ( java.util.Collection<org.springframework.boot.ExitCodeGenerator> ) ; int = org.springframework.boot.ExitCodeGenerators . getExitCode ( ) ; if ( int != NUMBER ) { org.springframework.boot.ApplicationContext . publishEvent ( new ExitCodeEvent ( org.springframework.boot.ApplicationContext , int ) ) ; } } finally { void ( org.springframework.boot.ApplicationContext ) ; } } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; int = ( int == NUMBER ? NUMBER : int ) ; } return int ; }  <METHOD_END>
<METHOD_START> private static void void ( ApplicationContext org.springframework.boot.ApplicationContext ) { if ( org.springframework.boot.ApplicationContext instanceof ConfigurableApplicationContext ) { ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext = ( ConfigurableApplicationContext ) org.springframework.boot.ApplicationContext ; org.springframework.boot.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> private static < E > java.util.Set<E> < E > java.util.Set<E> ( java.util.Collection<E> < E > java.util.Collection<E> ) { java.util.List<E> < E > java.util.List<E> = new java.util.ArrayList<E> <> ( ) ; java.util.List<E> . boolean ( java.util.Collection<E> ) ; java.util.Collections . void ( java.util.List<E> , AnnotationAwareOrderComparator . INSTANCE ) ; return new java.util.LinkedHashSet<E> <> ( java.util.List<E> ) ; }  <METHOD_END>
