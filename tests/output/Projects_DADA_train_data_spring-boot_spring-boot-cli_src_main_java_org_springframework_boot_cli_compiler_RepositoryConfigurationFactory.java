<METHOD_START> private void ( ) {	}  <METHOD_END>
<METHOD_START> public static java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> ( ) { MavenSettings org.springframework.boot.cli.compiler.MavenSettings = new MavenSettingsReader ( ) . readSettings ( ) ; java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> = new java.util.ArrayList<org.springframework.boot.cli.compiler.RepositoryConfiguration> <> ( ) ; java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> . add ( org.springframework.boot.cli.compiler.RepositoryConfiguration ) ; if ( ! java.lang.Boolean . boolean ( STRING ) ) { java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> . add ( org.springframework.boot.cli.compiler.RepositoryConfiguration ) ; java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> . add ( org.springframework.boot.cli.compiler.RepositoryConfiguration ) ; } void ( org.springframework.boot.cli.compiler.MavenSettings . getLocalRepository ( ) , java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> ) ; void ( org.springframework.boot.cli.compiler.MavenSettings . getActiveProfiles ( ) , java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> ) ; return java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String java.lang.String , java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> ) { RepositoryConfiguration org.springframework.boot.cli.compiler.RepositoryConfiguration = new RepositoryConfiguration ( STRING , java.io.File ( java.lang.String ) . java.net.URI ( ) , true ) ; if ( ! java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> . contains ( org.springframework.boot.cli.compiler.RepositoryConfiguration ) ) { java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> . add ( NUMBER , org.springframework.boot.cli.compiler.RepositoryConfiguration ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( java.util.List<org.springframework.boot.cli.compiler.Profile> < Profile > java.util.List<org.springframework.boot.cli.compiler.Profile> , java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> ) { for ( Profile org.springframework.boot.cli.compiler.Profile : java.util.List<org.springframework.boot.cli.compiler.Profile> ) { Interpolator org.springframework.boot.cli.compiler.Interpolator = new RegexBasedInterpolator ( ) ; org.springframework.boot.cli.compiler.Interpolator . addValueSource ( new PropertiesBasedValueSource ( org.springframework.boot.cli.compiler.Profile . getProperties ( ) ) ) ; for ( Repository org.springframework.boot.cli.compiler.Repository : org.springframework.boot.cli.compiler.Profile . getRepositories ( ) ) { java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> . add ( org.springframework.boot.cli.compiler.RepositoryConfiguration ( org.springframework.boot.cli.compiler.Interpolator , org.springframework.boot.cli.compiler.Repository ) ) ; } } }  <METHOD_END>
<METHOD_START> private static org.springframework.boot.cli.compiler.RepositoryConfiguration org.springframework.boot.cli.compiler.RepositoryConfiguration ( Interpolator org.springframework.boot.cli.compiler.Interpolator , Repository org.springframework.boot.cli.compiler.Repository ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.cli.compiler.Interpolator , org.springframework.boot.cli.compiler.Repository . getId ( ) ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.cli.compiler.Interpolator , org.springframework.boot.cli.compiler.Repository . getUrl ( ) ) ; boolean boolean = false ; if ( org.springframework.boot.cli.compiler.Repository . getSnapshots ( ) != null ) { boolean = org.springframework.boot.cli.compiler.Repository . getSnapshots ( ) . isEnabled ( ) ; } return new RepositoryConfiguration ( java.lang.String , java.net.URI . java.net.URI ( java.lang.String ) , boolean ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( Interpolator org.springframework.boot.cli.compiler.Interpolator , java.lang.String java.lang.String ) { try { return org.springframework.boot.cli.compiler.Interpolator . interpolate ( java.lang.String ) ; } catch ( InterpolationException org.springframework.boot.cli.compiler.InterpolationException ) { return java.lang.String ; } }  <METHOD_END>
<METHOD_START> private static java.io.File java.io.File ( java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) ) { return new java.io.File ( java.lang.String ) ; } return new java.io.File ( java.io.File ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> private static java.io.File java.io.File ( ) { java.lang.String java.lang.String = java.lang.System . java.lang.String ( STRING ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { return new java.io.File ( java.lang.String ) ; } return new java.io.File ( java.lang.System . java.lang.String ( STRING ) , STRING ) ; }  <METHOD_END>
