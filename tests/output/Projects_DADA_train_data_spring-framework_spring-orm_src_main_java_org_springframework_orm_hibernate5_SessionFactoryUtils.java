<METHOD_START> static org.springframework.orm.hibernate5.FlushMode org.springframework.orm.hibernate5.FlushMode ( Session org.springframework.orm.hibernate5.Session ) { return ( FlushMode ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , org.springframework.orm.hibernate5.Session ) ; }  <METHOD_END>
<METHOD_START> static void void ( Session org.springframework.orm.hibernate5.Session , boolean boolean ) throws org.springframework.orm.hibernate5.DataAccessException { if ( boolean ) { org.springframework.orm.hibernate5.Log . debug ( STRING ) ; } else { org.springframework.orm.hibernate5.Log . debug ( STRING ) ; } try { org.springframework.orm.hibernate5.Session . flush ( ) ; } catch ( HibernateException org.springframework.orm.hibernate5.HibernateException ) { throw org.springframework.orm.hibernate5.DataAccessException ( org.springframework.orm.hibernate5.HibernateException ) ; } catch ( PersistenceException org.springframework.orm.hibernate5.PersistenceException ) { if ( org.springframework.orm.hibernate5.PersistenceException . getCause ( ) instanceof HibernateException ) { throw org.springframework.orm.hibernate5.DataAccessException ( ( HibernateException ) org.springframework.orm.hibernate5.PersistenceException . getCause ( ) ) ; } throw org.springframework.orm.hibernate5.PersistenceException ; } }  <METHOD_END>
<METHOD_START> public static void void ( Session org.springframework.orm.hibernate5.Session ) { if ( org.springframework.orm.hibernate5.Session != null ) { try { org.springframework.orm.hibernate5.Session . close ( ) ; } catch ( HibernateException org.springframework.orm.hibernate5.HibernateException ) { org.springframework.orm.hibernate5.Log . debug ( STRING , org.springframework.orm.hibernate5.HibernateException ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.orm.hibernate5.Log . debug ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> public static javax.sql.DataSource javax.sql.DataSource ( SessionFactory org.springframework.orm.hibernate5.SessionFactory ) { java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getMethodIfAvailable ( org.springframework.orm.hibernate5.SessionFactory . getClass ( ) , STRING ) ; if ( java.lang.reflect.Method != null ) { java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , org.springframework.orm.hibernate5.SessionFactory ) ; java.lang.Object java.lang.Object = java.util.Map<,> . get ( Environment . DATASOURCE ) ; if ( java.lang.Object instanceof javax.sql.DataSource ) { return ( javax.sql.DataSource ) java.lang.Object ; } } if ( org.springframework.orm.hibernate5.SessionFactory instanceof SessionFactoryImplementor ) { SessionFactoryImplementor org.springframework.orm.hibernate5.SessionFactoryImplementor = ( SessionFactoryImplementor ) org.springframework.orm.hibernate5.SessionFactory ; try { ConnectionProvider org.springframework.orm.hibernate5.ConnectionProvider = org.springframework.orm.hibernate5.SessionFactoryImplementor . getServiceRegistry ( ) . getService ( ConnectionProvider .class ) ; if ( org.springframework.orm.hibernate5.ConnectionProvider != null ) { return org.springframework.orm.hibernate5.ConnectionProvider . unwrap ( javax.sql.DataSource .class ) ; } } catch ( UnknownServiceException org.springframework.orm.hibernate5.UnknownServiceException ) { if ( org.springframework.orm.hibernate5.Log . isDebugEnabled ( ) ) { org.springframework.orm.hibernate5.Log . debug ( STRING + org.springframework.orm.hibernate5.UnknownServiceException ) ; } } } return null ; }  <METHOD_END>
<METHOD_START> public static org.springframework.orm.hibernate5.DataAccessException org.springframework.orm.hibernate5.DataAccessException ( HibernateException org.springframework.orm.hibernate5.HibernateException ) { if ( org.springframework.orm.hibernate5.HibernateException instanceof JDBCConnectionException ) { return new DataAccessResourceFailureException ( org.springframework.orm.hibernate5.HibernateException . getMessage ( ) , org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof SQLGrammarException ) { SQLGrammarException org.springframework.orm.hibernate5.SQLGrammarException = ( SQLGrammarException ) org.springframework.orm.hibernate5.HibernateException ; return new InvalidDataAccessResourceUsageException ( org.springframework.orm.hibernate5.HibernateException . getMessage ( ) + STRING + org.springframework.orm.hibernate5.SQLGrammarException . getSQL ( ) + STRING , org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof QueryTimeoutException ) { QueryTimeoutException org.springframework.orm.hibernate5.QueryTimeoutException = ( QueryTimeoutException ) org.springframework.orm.hibernate5.HibernateException ; return new org . springframework . org.springframework.dao . org.springframework.dao ( org.springframework.orm.hibernate5.HibernateException . getMessage ( ) + STRING + org.springframework.orm.hibernate5.QueryTimeoutException . getSQL ( ) + STRING , org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof LockAcquisitionException ) { LockAcquisitionException org.springframework.orm.hibernate5.LockAcquisitionException = ( LockAcquisitionException ) org.springframework.orm.hibernate5.HibernateException ; return new CannotAcquireLockException ( org.springframework.orm.hibernate5.HibernateException . getMessage ( ) + STRING + org.springframework.orm.hibernate5.LockAcquisitionException . getSQL ( ) + STRING , org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof PessimisticLockException ) { PessimisticLockException org.springframework.orm.hibernate5.PessimisticLockException = ( PessimisticLockException ) org.springframework.orm.hibernate5.HibernateException ; return new PessimisticLockingFailureException ( org.springframework.orm.hibernate5.HibernateException . getMessage ( ) + STRING + org.springframework.orm.hibernate5.PessimisticLockException . getSQL ( ) + STRING , org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof ConstraintViolationException ) { ConstraintViolationException org.springframework.orm.hibernate5.ConstraintViolationException = ( ConstraintViolationException ) org.springframework.orm.hibernate5.HibernateException ; return new DataIntegrityViolationException ( org.springframework.orm.hibernate5.HibernateException . getMessage ( ) + STRING + org.springframework.orm.hibernate5.ConstraintViolationException . getSQL ( ) + STRING + org.springframework.orm.hibernate5.ConstraintViolationException . getConstraintName ( ) + STRING , org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof DataException ) { DataException org.springframework.orm.hibernate5.DataException = ( DataException ) org.springframework.orm.hibernate5.HibernateException ; return new DataIntegrityViolationException ( org.springframework.orm.hibernate5.HibernateException . getMessage ( ) + STRING + org.springframework.orm.hibernate5.DataException . getSQL ( ) + STRING , org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof JDBCException ) { return new HibernateJdbcException ( ( JDBCException ) org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof QueryException ) { return new HibernateQueryException ( ( QueryException ) org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof NonUniqueResultException ) { return new IncorrectResultSizeDataAccessException ( org.springframework.orm.hibernate5.HibernateException . getMessage ( ) , NUMBER , org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof NonUniqueObjectException ) { return new DuplicateKeyException ( org.springframework.orm.hibernate5.HibernateException . getMessage ( ) , org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof PropertyValueException ) { return new DataIntegrityViolationException ( org.springframework.orm.hibernate5.HibernateException . getMessage ( ) , org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof PersistentObjectException ) { return new InvalidDataAccessApiUsageException ( org.springframework.orm.hibernate5.HibernateException . getMessage ( ) , org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof TransientObjectException ) { return new InvalidDataAccessApiUsageException ( org.springframework.orm.hibernate5.HibernateException . getMessage ( ) , org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof ObjectDeletedException ) { return new InvalidDataAccessApiUsageException ( org.springframework.orm.hibernate5.HibernateException . getMessage ( ) , org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof UnresolvableObjectException ) { return new HibernateObjectRetrievalFailureException ( ( UnresolvableObjectException ) org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof WrongClassException ) { return new HibernateObjectRetrievalFailureException ( ( WrongClassException ) org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof StaleObjectStateException ) { return new HibernateOptimisticLockingFailureException ( ( StaleObjectStateException ) org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof StaleStateException ) { return new HibernateOptimisticLockingFailureException ( ( StaleStateException ) org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof OptimisticEntityLockException ) { return new HibernateOptimisticLockingFailureException ( ( OptimisticEntityLockException ) org.springframework.orm.hibernate5.HibernateException ) ; } if ( org.springframework.orm.hibernate5.HibernateException instanceof PessimisticEntityLockException ) { if ( org.springframework.orm.hibernate5.HibernateException . getCause ( ) instanceof LockAcquisitionException ) { return new CannotAcquireLockException ( org.springframework.orm.hibernate5.HibernateException . getMessage ( ) , org.springframework.orm.hibernate5.HibernateException . getCause ( ) ) ; } return new PessimisticLockingFailureException ( org.springframework.orm.hibernate5.HibernateException . getMessage ( ) , org.springframework.orm.hibernate5.HibernateException ) ; } return new HibernateSystemException ( org.springframework.orm.hibernate5.HibernateException ) ; }  <METHOD_END>
