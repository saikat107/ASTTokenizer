<METHOD_START> @ java.lang.Override protected org.springframework.test.context.transaction.PlatformTransactionManager org.springframework.test.context.transaction.PlatformTransactionManager ( TestContext org.springframework.test.context.transaction.TestContext , java.lang.String java.lang.String ) { return org.springframework.test.context.transaction.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable> < ? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable > java.lang.Class<? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable> ) throws java.lang.Exception { void ( java.lang.Class<> ) ; void ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable> < ? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable > java.lang.Class<? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable> ) throws java.lang.Exception { void ( java.lang.Class<> , true ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable> < ? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable > java.lang.Class<? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable> , boolean boolean )			throws java.lang.Exception { BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.transaction.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable = java.lang.Class<> . newInstance ( ) ; given ( org.springframework.test.context.transaction.TestContext . getTestInstance ( ) ) . willReturn ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable ) ; given ( org.springframework.test.context.transaction.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; assertFalse ( STRING , org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable . boolean ( ) ) ; TransactionContextHolder . removeCurrentTransactionContext ( ) ; org.springframework.test.context.transaction.TransactionalTestExecutionListener . beforeTestMethod ( org.springframework.test.context.transaction.TestContext ) ; assertEquals ( boolean , org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable> < ? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable > java.lang.Class<? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable> )			throws java.lang.Exception { BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.transaction.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable = java.lang.Class<> . newInstance ( ) ; given ( org.springframework.test.context.transaction.TestContext . getTestInstance ( ) ) . willReturn ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable ) ; given ( org.springframework.test.context.transaction.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; assertFalse ( STRING , org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable . boolean ( ) ) ; TransactionContextHolder . removeCurrentTransactionContext ( ) ; org.springframework.test.context.transaction.TransactionalTestExecutionListener . beforeTestMethod ( org.springframework.test.context.transaction.TestContext ) ; assertFalse ( STRING , org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable> < ? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable > java.lang.Class<? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable> ) throws java.lang.Exception { void ( java.lang.Class<> ) ; void ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable> < ? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable > java.lang.Class<? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable> ) throws java.lang.Exception { BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.transaction.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable = java.lang.Class<> . newInstance ( ) ; given ( org.springframework.test.context.transaction.TestContext . getTestInstance ( ) ) . willReturn ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable ) ; given ( org.springframework.test.context.transaction.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; given ( org.springframework.test.context.transaction.PlatformTransactionManager . getTransaction ( BDDMockito . any ( TransactionDefinition .class ) ) ) . willReturn ( new SimpleTransactionStatus ( ) ) ; assertFalse ( STRING , org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable . boolean ( ) ) ; TransactionContextHolder . removeCurrentTransactionContext ( ) ; org.springframework.test.context.transaction.TransactionalTestExecutionListener . beforeTestMethod ( org.springframework.test.context.transaction.TestContext ) ; assertFalse ( STRING , org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable . boolean ( ) ) ; org.springframework.test.context.transaction.TransactionalTestExecutionListener . afterTestMethod ( org.springframework.test.context.transaction.TestContext ) ; assertTrue ( STRING , org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable> < ? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable > java.lang.Class<? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable> ) throws java.lang.Exception { BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.transaction.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable = java.lang.Class<> . newInstance ( ) ; given ( org.springframework.test.context.transaction.TestContext . getTestInstance ( ) ) . willReturn ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable ) ; given ( org.springframework.test.context.transaction.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; assertFalse ( STRING , org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable . boolean ( ) ) ; TransactionContextHolder . removeCurrentTransactionContext ( ) ; org.springframework.test.context.transaction.TransactionalTestExecutionListener . beforeTestMethod ( org.springframework.test.context.transaction.TestContext ) ; org.springframework.test.context.transaction.TransactionalTestExecutionListener . afterTestMethod ( org.springframework.test.context.transaction.TestContext ) ; assertFalse ( STRING , org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) throws java.lang.NoSuchMethodException , java.lang.Exception { BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.transaction.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; given ( org.springframework.test.context.transaction.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; assertEquals ( boolean , org.springframework.test.context.transaction.TransactionalTestExecutionListener . isRollback ( org.springframework.test.context.transaction.TestContext ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { TransactionContextHolder . removeCurrentTransactionContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TransactionalTestExecutionListener org.springframework.test.context.transaction.TransactionalTestExecutionListener = new TransactionalTestExecutionListener ( ) { protected org.springframework.test.context.transaction.PlatformTransactionManager org.springframework.test.context.transaction.PlatformTransactionManager ( TestContext org.springframework.test.context.transaction.TestContext , java.lang.String java.lang.String ) { return null ; } } ; java.lang.Class<? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable> < ? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable > java.lang.Class<? extends org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable> = org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.TransactionalDeclaredOnClassLocallyTestCase .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.transaction.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable = java.lang.Class<> . newInstance ( ) ; given ( org.springframework.test.context.transaction.TestContext . getTestInstance ( ) ) . willReturn ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable ) ; given ( org.springframework.test.context.transaction.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; assertFalse ( STRING , org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.Invocable . boolean ( ) ) ; TransactionContextHolder . removeCurrentTransactionContext ( ) ; try { org.springframework.test.context.transaction.TransactionalTestExecutionListener . beforeTestMethod ( org.springframework.test.context.transaction.TestContext ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.test.context.transaction.PlatformTransactionManager org.springframework.test.context.transaction.PlatformTransactionManager ( TestContext org.springframework.test.context.transaction.TestContext , java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.TransactionalDeclaredOnClassLocallyTestCase .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.TransactionalDeclaredOnClassViaMetaAnnotationTestCase .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.TransactionalDeclaredOnClassViaMetaAnnotationWithOverrideTestCase .class , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.TransactionalDeclaredOnMethodViaMetaAnnotationWithOverrideTestCase .class , false ) ; void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.TransactionalDeclaredOnMethodViaMetaAnnotationWithOverrideTestCase .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.TransactionalDeclaredOnMethodLocallyTestCase .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.TransactionalDeclaredOnMethodViaMetaAnnotationTestCase .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.BeforeTransactionDeclaredLocallyTestCase .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.BeforeTransactionDeclaredViaMetaAnnotationTestCase .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.AfterTransactionDeclaredLocallyTestCase .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.AfterTransactionDeclaredViaMetaAnnotationTestCase .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.BeforeTransactionDeclaredAsInterfaceDefaultMethodTestCase .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.AfterTransactionDeclaredAsInterfaceDefaultMethodTestCase .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.MissingRollbackTestCase .class , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.EmptyMethodLevelRollbackTestCase .class , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.MethodLevelRollbackWithExplicitValueTestCase .class , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.MethodLevelRollbackViaMetaAnnotationTestCase .class , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.EmptyClassLevelRollbackTestCase .class , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.ClassLevelRollbackWithExplicitValueTestCase .class , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.ClassLevelRollbackViaMetaAnnotationTestCase .class , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.ClassLevelRollbackWithExplicitValueOnTestInterfaceTestCase .class , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.ClassLevelRollbackViaMetaAnnotationOnTestInterfaceTestCase .class , false ) ; }  <METHOD_END>
<METHOD_START> void void ( boolean boolean );  <METHOD_END>
<METHOD_START> boolean boolean ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ BeforeTransaction public void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { }  <METHOD_END>
<METHOD_START> @ BeforeTransaction public void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( ) { }  <METHOD_END>
<METHOD_START> public void void ( ) { }  <METHOD_END>
<METHOD_START> @ BeforeTransaction public void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { }  <METHOD_END>
<METHOD_START> @ BeforeTransaction public void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> @ org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.MetaTransactional public void void ( ) { }  <METHOD_END>
<METHOD_START> public void void ( ) { }  <METHOD_END>
<METHOD_START> @ BeforeTransaction public void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { }  <METHOD_END>
<METHOD_START> @ BeforeTransaction public void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> @ org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.MetaTxWithOverride ( org.springframework.test.context.transaction.Propagation = NOT_SUPPORTED ) public void void ( ) { }  <METHOD_END>
<METHOD_START> public void void ( ) { }  <METHOD_END>
<METHOD_START> @ BeforeTransaction public void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( ) { }  <METHOD_END>
<METHOD_START> public void void ( ) { }  <METHOD_END>
<METHOD_START> @ org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.MetaBeforeTransaction public void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( ) { }  <METHOD_END>
<METHOD_START> public void void ( ) { }  <METHOD_END>
<METHOD_START> @ AfterTransaction public void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( ) { }  <METHOD_END>
<METHOD_START> public void void ( ) { }  <METHOD_END>
<METHOD_START> @ org.springframework.test.context.transaction.TransactionalTestExecutionListenerTests.MetaAfterTransaction public void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( ) { }  <METHOD_END>
<METHOD_START> public void void ( ) { }  <METHOD_END>
<METHOD_START> @ BeforeTransaction default void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> @ AfterTransaction default void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( ) { }  <METHOD_END>
<METHOD_START> public void void ( ) { }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( ) { }  <METHOD_END>
<METHOD_START> public void void ( ) { }  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Rollback public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Rollback ( false ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Commit public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
