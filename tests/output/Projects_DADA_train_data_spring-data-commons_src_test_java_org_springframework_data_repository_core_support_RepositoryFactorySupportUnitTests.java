<METHOD_START> @ Before public void void ( ) { org.springframework.data.repository.core.support.DummyRepositoryFactory = new DummyRepositoryFactory ( org.springframework.data.repository.core.support.PagingAndSortingRepository<java.lang.Object,java.io.Serializable> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mockito . reset ( org.springframework.data.repository.core.support.DummyRepositoryFactory . strategy ) ; when ( org.springframework.data.repository.core.support.DummyRepositoryFactory . strategy . resolveQuery ( Mockito . any ( java.lang.reflect.Method .class ) , Mockito . any ( RepositoryMetadata .class ) , Mockito . any ( ProjectionFactory .class ) , Mockito . any ( NamedQueries .class ) ) ) . thenReturn ( org.springframework.data.repository.core.support.DummyRepositoryFactory . queryOne , org.springframework.data.repository.core.support.DummyRepositoryFactory . queryTwo ) ; org.springframework.data.repository.core.support.DummyRepositoryFactory . addQueryCreationListener ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.MyQueryCreationListener ) ; org.springframework.data.repository.core.support.DummyRepositoryFactory . addQueryCreationListener ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.PlainQueryCreationListener ) ; org.springframework.data.repository.core.support.DummyRepositoryFactory . getRepository ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepository .class ) ; verify ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.MyQueryCreationListener , times ( NUMBER ) ) . onCreation ( Mockito . any ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.MyRepositoryQuery .class ) ) ; verify ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.PlainQueryCreationListener , times ( NUMBER ) ) . onCreation ( Mockito . any ( RepositoryQuery .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepository org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepository = org.springframework.data.repository.core.support.DummyRepositoryFactory . getRepository ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepository .class ) ; org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepository . java.lang.Object ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepository ) ; verify ( org.springframework.data.repository.core.support.PagingAndSortingRepository<java.lang.Object,java.io.Serializable> , times ( NUMBER ) ) . save ( Mockito . any ( java.lang.Object .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepository org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepository = org.springframework.data.repository.core.support.DummyRepositoryFactory . getRepository ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepository .class , org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepositoryCustom ) ; org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepository . java.lang.Object ( NUMBER ) ; verify ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepositoryCustom , times ( NUMBER ) ) . findOne ( NUMBER ) ; verify ( org.springframework.data.repository.core.support.PagingAndSortingRepository<java.lang.Object,java.io.Serializable> , times ( NUMBER ) ) . findOne ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.CustomRepository org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.CustomRepository = org.springframework.data.repository.core.support.DummyRepositoryFactory . getRepository ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.CustomRepository .class ) ; Pageable org.springframework.data.repository.core.support.Pageable = PageRequest . of ( NUMBER , NUMBER ) ; org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.CustomRepository . org.springframework.data.repository.core.support.Page<java.lang.Object> ( org.springframework.data.repository.core.support.Pageable ) ; verify ( org.springframework.data.repository.core.support.PagingAndSortingRepository<java.lang.Object,java.io.Serializable> , times ( NUMBER ) ) . findAll ( org.springframework.data.repository.core.support.Pageable ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.AnnotatedRepository .class ; java.lang.Class<? extends org.springframework.data.repository.core.support.Repository<?,?>> < ? extends Repository < ? , ? > > java.lang.Class<? extends org.springframework.data.repository.core.support.Repository<?,?>> = ( java.lang.Class<? extends org.springframework.data.repository.core.support.Repository<?,?>> < ? extends Repository < ? , ? > > ) java.lang.Class<> ; assertThat ( org.springframework.data.repository.core.support.DummyRepositoryFactory . getRepository ( java.lang.Class<> ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.repository.core.support.DummyRepositoryFactory . setBeanClassLoader ( null ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.data.repository.core.support.DummyRepositoryFactory , STRING ) ) . isEqualTo ( ClassUtils . getDefaultClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.Object java.lang.Object = new java.lang.Object ( ) ; when ( org.springframework.data.repository.core.support.DummyRepositoryFactory . queryOne . execute ( Mockito . any ( java.lang.Object [] .class ) ) ) . then ( invocation -> { Thread . sleep ( NUMBER ) ; return reference ; } ) ; org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository = org.springframework.data.repository.core.support.DummyRepositoryFactory . getRepository ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository .class ) ; AsyncAnnotationBeanPostProcessor org.springframework.data.repository.core.support.AsyncAnnotationBeanPostProcessor = new AsyncAnnotationBeanPostProcessor ( ) ; org.springframework.data.repository.core.support.AsyncAnnotationBeanPostProcessor . setBeanFactory ( new DefaultListableBeanFactory ( ) ) ; org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository = ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository ) org.springframework.data.repository.core.support.AsyncAnnotationBeanPostProcessor . postProcessAfterInitialization ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository , null ) ; java.util.concurrent.Future<java.lang.Object> < java.lang.Object > java.util.concurrent.Future<java.lang.Object> = org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository . java.util.concurrent.Future<java.lang.Object> ( STRING ) ; assertThat ( java.util.concurrent.Future<java.lang.Object> . boolean ( ) ) . isFalse ( ) ; while ( ! java.util.concurrent.Future<java.lang.Object> . boolean ( ) ) { java.lang.Thread . void ( NUMBER ) ; } assertThat ( java.util.concurrent.Future<java.lang.Object> . java.lang.Object ( ) ) . isEqualTo ( java.lang.Object ) ; verify ( org.springframework.data.repository.core.support.DummyRepositoryFactory . queryOne , times ( NUMBER ) ) . execute ( Mockito . any ( java.lang.Object [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; when ( org.springframework.data.repository.core.support.DummyRepositoryFactory . queryOne . execute ( Mockito . any ( java.lang.Object [] .class ) ) ) . thenReturn ( java.util.List<java.lang.String> ) ; org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository = org.springframework.data.repository.core.support.DummyRepositoryFactory . getRepository ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository .class ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository . java.util.Set<java.lang.String> ( ) ; assertThat ( java.util.Set<java.lang.String> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; when ( org.springframework.data.repository.core.support.DummyRepositoryFactory . queryOne . execute ( Mockito . any ( java.lang.Object [] .class ) ) ) . thenReturn ( java.util.List<java.lang.String> ) ; org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository = org.springframework.data.repository.core.support.DummyRepositoryFactory . getRepository ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository .class ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository . java.util.Set<java.lang.Object> ( ) ; assertThat ( java.util.Set<java.lang.Object> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Set<java.lang.Object> . java.util.Iterator<java.lang.Object> ( ) . java.lang.Object ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.repository.core.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.repository.core.support.ExpectedException . expectMessage ( RepositoryProxyPostProcessor .class . java.lang.String ( ) ) ; org.springframework.data.repository.core.support.DummyRepositoryFactory . addRepositoryProxyPostProcessor ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.repository.core.support.DummyRepositoryFactory . getRepository ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.SimpleRepository .class ) ) . isInstanceOf ( TransactionalProxy .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assumeThat ( org.springframework.data.repository.core.support.Version . isGreaterThanOrEqualTo ( org.springframework.data.repository.core.support.Version ) , is ( true ) ) ; User org.springframework.data.repository.core.support.User = new User ( ) ; void ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository ( org.springframework.data.repository.core.support.User ) . findOneByFirstname ( STRING ) , org.springframework.data.repository.core.support.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assumeThat ( org.springframework.data.repository.core.support.Version . isGreaterThanOrEqualTo ( org.springframework.data.repository.core.support.Version ) , is ( true ) ) ; User org.springframework.data.repository.core.support.User = new User ( ) ; void ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository ( org.springframework.data.repository.core.support.User ) . findOneByLastname ( STRING ) , org.springframework.data.repository.core.support.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assumeThat ( org.springframework.data.repository.core.support.Version . isGreaterThanOrEqualTo ( org.springframework.data.repository.core.support.Version ) , is ( true ) ) ; java.util.List<org.springframework.data.repository.core.support.User> < User > java.util.List<org.springframework.data.repository.core.support.User> = java.util.Collections . java.util.List ( new User ( ) ) ; void ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository ( java.util.List<org.springframework.data.repository.core.support.User> ) . readAllByFirstname ( STRING ) , java.util.List<org.springframework.data.repository.core.support.User> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.repository.core.support.User> < User > java.util.List<org.springframework.data.repository.core.support.User> = java.util.Collections . java.util.List ( new User ( ) ) ; void ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository ( java.util.List<org.springframework.data.repository.core.support.User> ) . readAllByLastname ( STRING ) , java.util.List<org.springframework.data.repository.core.support.User> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = mock ( RepositoryInformation .class ) ; doReturn ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.CustomRepositoryBaseClass .class ) . when ( org.springframework.data.repository.core.support.RepositoryInformation ) . getRepositoryBaseClass ( ) ; EntityInformation org.springframework.data.repository.core.support.EntityInformation = mock ( EntityInformation .class ) ; org.springframework.data.repository.core.support.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.repository.core.support.ExpectedException . expectMessage ( org.springframework.data.repository.core.support.EntityInformation . getClass ( ) . getName ( ) ) ; org.springframework.data.repository.core.support.ExpectedException . expectMessage ( java.lang.String .class . java.lang.String ( ) ) ; org.springframework.data.repository.core.support.DummyRepositoryFactory . getTargetRepositoryViaReflection ( org.springframework.data.repository.core.support.RepositoryInformation , org.springframework.data.repository.core.support.EntityInformation , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepository org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepository = org.springframework.data.repository.core.support.DummyRepositoryFactory . getRepository ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepository .class , org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepositoryCustom ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepository . java.lang.String ( ) ) . isEqualTo ( STRING ) ; verifyZeroInteractions ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ObjectRepositoryCustom ) ; verifyZeroInteractions ( org.springframework.data.repository.core.support.PagingAndSortingRepository<java.lang.Object,java.io.Serializable> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository ( final java.lang.Object java.lang.Object ) { when ( org.springframework.data.repository.core.support.DummyRepositoryFactory . queryOne . execute ( Mockito . any ( java.lang.Object [] .class ) ) ) . then ( invocation -> { Thread . sleep ( NUMBER ) ; return expectedValue ; } ) ; AsyncAnnotationBeanPostProcessor org.springframework.data.repository.core.support.AsyncAnnotationBeanPostProcessor = new AsyncAnnotationBeanPostProcessor ( ) ; org.springframework.data.repository.core.support.AsyncAnnotationBeanPostProcessor . setBeanFactory ( new DefaultListableBeanFactory ( ) ) ; return ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository ) org.springframework.data.repository.core.support.AsyncAnnotationBeanPostProcessor . postProcessAfterInitialization ( org.springframework.data.repository.core.support.DummyRepositoryFactory . getRepository ( org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.ConvertingRepository .class ) , null ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> , java.lang.Object java.lang.Object ) throws java.lang.Exception { assertThat ( java.util.concurrent.Future<> . boolean ( ) ) . isFalse ( ) ; while ( ! java.util.concurrent.Future<> . boolean ( ) ) { java.lang.Thread . void ( NUMBER ) ; } assertThat ( java.util.concurrent.Future<> . get ( ) ) . isEqualTo ( java.lang.Object ) ; verify ( org.springframework.data.repository.core.support.DummyRepositoryFactory . queryOne , times ( NUMBER ) ) . execute ( Mockito . any ( java.lang.Object [] .class ) ) ; }  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> );  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( )  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> static java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> default java.lang.String java.lang.String ( ) { return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( java.io.Serializable java.io.Serializable );  <METHOD_END>
<METHOD_START> T T ( ID ID );  <METHOD_END>
<METHOD_START> java.lang.Iterable<T> < T > java.lang.Iterable<T> ( )  <METHOD_END>
<METHOD_START> org.springframework.data.repository.core.support.Page<T> < T > org.springframework.data.repository.core.support.Page<T> ( Pageable org.springframework.data.repository.core.support.Pageable );  <METHOD_END>
<METHOD_START> java.util.List<T> < T > java.util.List<T> ( Sort org.springframework.data.repository.core.support.Sort );  <METHOD_END>
<METHOD_START> boolean boolean ( ID ID );  <METHOD_END>
<METHOD_START> long long ( )  <METHOD_END>
<METHOD_START> java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( )  <METHOD_END>
<METHOD_START> java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> ( )  <METHOD_END>
<METHOD_START> @ Async java.util.concurrent.Future<java.lang.Object> < java.lang.Object > java.util.concurrent.Future<java.lang.Object> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Async java.util.concurrent.CompletableFuture<org.springframework.data.repository.core.support.User> < User > java.util.concurrent.CompletableFuture<org.springframework.data.repository.core.support.User> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Async java.util.concurrent.CompletableFuture<java.util.List<org.springframework.data.repository.core.support.User>> < java.util.List<org.springframework.data.repository.core.support.User> < User > > java.util.concurrent.CompletableFuture<java.util.List<org.springframework.data.repository.core.support.User>> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Async org.springframework.data.repository.core.support.ListenableFuture<org.springframework.data.repository.core.support.User> < User > org.springframework.data.repository.core.support.ListenableFuture<org.springframework.data.repository.core.support.User> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Async org.springframework.data.repository.core.support.ListenableFuture<java.util.List<org.springframework.data.repository.core.support.User>> < java.util.List<org.springframework.data.repository.core.support.User> < User > > org.springframework.data.repository.core.support.ListenableFuture<java.util.List<org.springframework.data.repository.core.support.User>> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public void ( EntityInformation < ? , ? > org.springframework.data.repository.core.support.EntityInformation<?,?> ) {}  <METHOD_END>
