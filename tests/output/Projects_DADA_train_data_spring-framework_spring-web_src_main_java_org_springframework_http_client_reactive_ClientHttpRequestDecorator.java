<METHOD_START> public void ( ClientHttpRequest org.springframework.http.client.reactive.ClientHttpRequest ) { Assert . notNull ( org.springframework.http.client.reactive.ClientHttpRequest , STRING ) ; this . org.springframework.http.client.reactive.ClientHttpRequest = org.springframework.http.client.reactive.ClientHttpRequest ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.client.reactive.ClientHttpRequest org.springframework.http.client.reactive.ClientHttpRequest ( ) { return this . org.springframework.http.client.reactive.ClientHttpRequest ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.HttpMethod org.springframework.http.client.reactive.HttpMethod ( ) { return this . org.springframework.http.client.reactive.ClientHttpRequest . getMethod ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return this . org.springframework.http.client.reactive.ClientHttpRequest . getURI ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.HttpHeaders org.springframework.http.client.reactive.HttpHeaders ( ) { return this . org.springframework.http.client.reactive.ClientHttpRequest . getHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.MultiValueMap<java.lang.String,org.springframework.http.client.reactive.HttpCookie> < java.lang.String , HttpCookie > org.springframework.http.client.reactive.MultiValueMap<java.lang.String,org.springframework.http.client.reactive.HttpCookie> ( ) { return this . org.springframework.http.client.reactive.ClientHttpRequest . getCookies ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.DataBufferFactory org.springframework.http.client.reactive.DataBufferFactory ( ) { return this . org.springframework.http.client.reactive.ClientHttpRequest . bufferFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.function.Supplier<? extends org.springframework.http.client.reactive.Mono<java.lang.Void>> < ? extends Mono < java.lang.Void > > java.util.function.Supplier<? extends org.springframework.http.client.reactive.Mono<java.lang.Void>> ) { this . org.springframework.http.client.reactive.ClientHttpRequest . beforeCommit ( java.util.function.Supplier<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.http.client.reactive.ClientHttpRequest . isCommitted ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.client.reactive.Mono<java.lang.Void> ( Publisher < ? extends DataBuffer > org.springframework.http.client.reactive.Publisher<? extends org.springframework.http.client.reactive.DataBuffer> ) { return this . org.springframework.http.client.reactive.ClientHttpRequest . writeWith ( org.springframework.http.client.reactive.Publisher<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.client.reactive.Mono<java.lang.Void> ( Publisher < ? extends Publisher < ? extends DataBuffer > > org.springframework.http.client.reactive.Publisher<? extends org.springframework.http.client.reactive.Publisher<? extends org.springframework.http.client.reactive.DataBuffer>> ) { return this . org.springframework.http.client.reactive.ClientHttpRequest . writeAndFlushWith ( org.springframework.http.client.reactive.Publisher<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.client.reactive.Mono<java.lang.Void> ( ) { return this . org.springframework.http.client.reactive.ClientHttpRequest . setComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.http.client.reactive.ClientHttpRequestDecorator> ( ) . java.lang.String ( ) + STRING + org.springframework.http.client.reactive.ClientHttpRequest ( ) + STRING ; }  <METHOD_END>
