<METHOD_START> protected void ( MediaType org.springframework.http.converter.feed.MediaType ) { super( org.springframework.http.converter.feed.MediaType ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected T T ( java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> , HttpInputMessage org.springframework.http.converter.feed.HttpInputMessage )			throws java.io.IOException , org.springframework.http.converter.feed.HttpMessageNotReadableException { WireFeedInput org.springframework.http.converter.feed.WireFeedInput = new WireFeedInput ( ) ; MediaType org.springframework.http.converter.feed.MediaType = org.springframework.http.converter.feed.HttpInputMessage . getHeaders ( ) . getContentType ( ) ; java.nio.charset.Charset java.nio.charset.Charset = ( org.springframework.http.converter.feed.MediaType != null && org.springframework.http.converter.feed.MediaType . getCharset ( ) != null ? org.springframework.http.converter.feed.MediaType . getCharset ( ) : java.nio.charset.Charset ) ; try { java.io.Reader java.io.Reader = new java.io.InputStreamReader ( org.springframework.http.converter.feed.HttpInputMessage . getBody ( ) , java.nio.charset.Charset ) ; return ( T ) org.springframework.http.converter.feed.WireFeedInput . build ( java.io.Reader ) ; } catch ( FeedException org.springframework.http.converter.feed.FeedException ) { throw new HttpMessageNotReadableException ( STRING + org.springframework.http.converter.feed.FeedException . getMessage ( ) , org.springframework.http.converter.feed.FeedException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( T T , HttpOutputMessage org.springframework.http.converter.feed.HttpOutputMessage )			throws java.io.IOException , org.springframework.http.converter.feed.HttpMessageNotWritableException { java.lang.String java.lang.String = T . getEncoding ( ) ; if ( ! StringUtils . hasLength ( java.lang.String ) ) { java.lang.String = java.nio.charset.Charset . java.lang.String ( ) ; } MediaType org.springframework.http.converter.feed.MediaType = org.springframework.http.converter.feed.HttpOutputMessage . getHeaders ( ) . getContentType ( ) ; if ( org.springframework.http.converter.feed.MediaType != null ) { java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.Charset . java.nio.charset.Charset ( java.lang.String ) ; org.springframework.http.converter.feed.MediaType = new MediaType ( org.springframework.http.converter.feed.MediaType . getType ( ) , org.springframework.http.converter.feed.MediaType . getSubtype ( ) , java.nio.charset.Charset ) ; org.springframework.http.converter.feed.HttpOutputMessage . getHeaders ( ) . setContentType ( org.springframework.http.converter.feed.MediaType ) ; } WireFeedOutput org.springframework.http.converter.feed.WireFeedOutput = new WireFeedOutput ( ) ; try { java.io.Writer java.io.Writer = new java.io.OutputStreamWriter ( org.springframework.http.converter.feed.HttpOutputMessage . getBody ( ) , java.lang.String ) ; org.springframework.http.converter.feed.WireFeedOutput . output ( T , java.io.Writer ) ; } catch ( FeedException org.springframework.http.converter.feed.FeedException ) { throw new HttpMessageNotWritableException ( STRING + org.springframework.http.converter.feed.FeedException . getMessage ( ) , org.springframework.http.converter.feed.FeedException ) ; } }  <METHOD_END>
