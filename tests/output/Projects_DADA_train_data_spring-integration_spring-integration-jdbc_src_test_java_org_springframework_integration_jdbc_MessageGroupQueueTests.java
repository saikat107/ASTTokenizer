<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MessageGroupQueue org.springframework.integration.jdbc.MessageGroupQueue = new MessageGroupQueue ( new SimpleMessageStore ( ) , NUMBER , NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.InterruptedException> < java.lang.InterruptedException > java.util.concurrent.atomic.AtomicReference<java.lang.InterruptedException> = new java.util.concurrent.atomic.AtomicReference<java.lang.InterruptedException> < java.lang.InterruptedException > ( ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { org.springframework.integration.jdbc.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) ) ; try { org.springframework.integration.jdbc.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.util.concurrent.atomic.AtomicReference<java.lang.InterruptedException> . void ( java.lang.InterruptedException ) ; } } ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; assertTrue ( java.util.concurrent.atomic.AtomicReference<java.lang.InterruptedException> . java.lang.InterruptedException ( ) instanceof java.lang.InterruptedException ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MessageGroupQueue org.springframework.integration.jdbc.MessageGroupQueue = new MessageGroupQueue ( new SimpleMessageStore ( ) , NUMBER , NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> < Message < ? > > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> < Message < ? > > ( ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> . set ( org.springframework.integration.jdbc.MessageGroupQueue . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.jdbc.MessageGroupQueueTests> ( ) ) . error ( STRING , java.lang.Exception ) ; } } ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { org.springframework.integration.jdbc.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.jdbc.MessageGroupQueueTests> ( ) ) . error ( STRING , java.lang.Exception ) ; } } ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; assertTrue ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> . get ( ) instanceof Message ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MessageGroupQueue org.springframework.integration.jdbc.MessageGroupQueue = new MessageGroupQueue ( new SimpleMessageStore ( ) , NUMBER , NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> < Message < ? > > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> < Message < ? > > ( ) ; org.springframework.integration.jdbc.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { org.springframework.integration.jdbc.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.jdbc.MessageGroupQueueTests> ( ) ) . error ( STRING , java.lang.Exception ) ; } } ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { org.springframework.integration.jdbc.MessageGroupQueue . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> . set ( org.springframework.integration.jdbc.MessageGroupQueue . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.jdbc.MessageGroupQueueTests> ( ) ) . error ( STRING , java.lang.Exception ) ; } } ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; assertTrue ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> . get ( ) . getPayload ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MessageGroupQueue org.springframework.integration.jdbc.MessageGroupQueue = new MessageGroupQueue ( new SimpleMessageStore ( ) , NUMBER , NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> < Message < ? > > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> < Message < ? > > ( ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> < Message < ? > > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> < Message < ? > > ( ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> < Message < ? > > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> < Message < ? > > ( ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> . set ( org.springframework.integration.jdbc.MessageGroupQueue . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.jdbc.MessageGroupQueueTests> ( ) ) . error ( STRING , java.lang.Exception ) ; } } ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> . set ( org.springframework.integration.jdbc.MessageGroupQueue . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.jdbc.MessageGroupQueueTests> ( ) ) . error ( STRING , java.lang.Exception ) ; } } ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> . set ( org.springframework.integration.jdbc.MessageGroupQueue . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.jdbc.MessageGroupQueueTests> ( ) ) . error ( STRING , java.lang.Exception ) ; } } ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { org.springframework.integration.jdbc.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.jdbc.MessageGroupQueueTests> ( ) ) . error ( STRING , java.lang.Exception ) ; } } ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> . get ( ) ) ; assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> . get ( ) . getPayload ( ) ) ; java.lang.Thread . void ( NUMBER ) ; assertTrue ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> . get ( ) == null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MessageGroupQueue org.springframework.integration.jdbc.MessageGroupQueue = new MessageGroupQueue ( new SimpleMessageStore ( ) , NUMBER , NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> = new java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> < java.lang.Boolean > ( true ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> = new java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> < java.lang.Boolean > ( true ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> = new java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> < java.lang.Boolean > ( true ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> . void ( org.springframework.integration.jdbc.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.jdbc.MessageGroupQueueTests> ( ) ) . error ( STRING , java.lang.Exception ) ; } } ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { boolean boolean = org.springframework.integration.jdbc.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> . void ( boolean ) ; } catch ( java.lang.Exception java.lang.Exception ) { LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.jdbc.MessageGroupQueueTests> ( ) ) . error ( STRING , java.lang.Exception ) ; } } ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { boolean boolean = org.springframework.integration.jdbc.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> . void ( boolean ) ; } catch ( java.lang.Exception java.lang.Exception ) { LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.jdbc.MessageGroupQueueTests> ( ) ) . error ( STRING , java.lang.Exception ) ; } } ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; assertTrue ( java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> . java.lang.Boolean ( ) ) ; assertFalse ( java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> . java.lang.Boolean ( ) ) ; assertFalse ( java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> . java.lang.Boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MessageGroupQueue org.springframework.integration.jdbc.MessageGroupQueue = new MessageGroupQueue ( new SimpleMessageStore ( ) , NUMBER , NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> < Message < ? > > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> < Message < ? > > ( ) ; org.springframework.integration.jdbc.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { org.springframework.integration.jdbc.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; org.springframework.integration.jdbc.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; org.springframework.integration.jdbc.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.jdbc.MessageGroupQueueTests> ( ) ) . error ( STRING , java.lang.Exception ) ; } } ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { org.springframework.integration.jdbc.MessageGroupQueue . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> . set ( org.springframework.integration.jdbc.MessageGroupQueue . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.jdbc.MessageGroupQueue . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; org.springframework.integration.jdbc.MessageGroupQueue . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.jdbc.MessageGroupQueueTests> ( ) ) . error ( STRING , java.lang.Exception ) ; } } ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; assertTrue ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.jdbc.Message<?>> . get ( ) . getPayload ( ) . equals ( STRING ) ) ; assertNull ( org.springframework.integration.jdbc.MessageGroupQueue . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageGroupStore org.springframework.integration.jdbc.MessageGroupStore = Mockito . mock ( MessageGroupStore .class ) ; Mockito . doAnswer ( invocation -> { Thread . sleep ( NUMBER ) ; return null ; } ) . when ( org.springframework.integration.jdbc.MessageGroupStore ) . addMessageToGroup ( Mockito . any ( java.lang.Integer .class ) , Mockito . any ( Message .class ) ) ; MessageGroup org.springframework.integration.jdbc.MessageGroup = Mockito . mock ( MessageGroup .class ) ; Mockito . when ( org.springframework.integration.jdbc.MessageGroupStore . getMessageGroup ( Mockito . any ( ) ) ) . thenReturn ( org.springframework.integration.jdbc.MessageGroup ) ; Mockito . when ( org.springframework.integration.jdbc.MessageGroup . size ( ) ) . thenReturn ( NUMBER ) ; final MessageGroupQueue org.springframework.integration.jdbc.MessageGroupQueue = new MessageGroupQueue ( org.springframework.integration.jdbc.MessageGroupStore , NUMBER , NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.InterruptedException> < java.lang.InterruptedException > java.util.concurrent.atomic.AtomicReference<java.lang.InterruptedException> = new java.util.concurrent.atomic.AtomicReference<java.lang.InterruptedException> < java.lang.InterruptedException > ( ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) org.springframework.integration.jdbc.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { org.springframework.integration.jdbc.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) ) ; try { org.springframework.integration.jdbc.MessageGroupQueue . offer ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.util.concurrent.atomic.AtomicReference<java.lang.InterruptedException> . void ( java.lang.InterruptedException ) ; } } ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; assertTrue ( java.util.concurrent.atomic.AtomicReference<java.lang.InterruptedException> . java.lang.InterruptedException ( ) instanceof java.lang.InterruptedException ) ; }  <METHOD_END>
