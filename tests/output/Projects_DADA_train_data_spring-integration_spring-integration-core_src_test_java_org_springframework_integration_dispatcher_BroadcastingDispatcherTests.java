<METHOD_START> @ Before public void void ( ) { Mockito . reset ( org.springframework.integration.dispatcher.TaskExecutor , org.springframework.integration.dispatcher.Message<> , org.springframework.integration.dispatcher.TaskExecutor , org.springframework.integration.dispatcher.MessageHandler , org.springframework.integration.dispatcher.MessageHandler , org.springframework.integration.dispatcher.MessageHandler ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.dispatcher.BroadcastingDispatcher = new BroadcastingDispatcher ( ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . dispatch ( org.springframework.integration.dispatcher.Message<> ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.dispatcher.BroadcastingDispatcher = new BroadcastingDispatcher ( org.springframework.integration.dispatcher.TaskExecutor ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . dispatch ( org.springframework.integration.dispatcher.Message<> ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.dispatcher.BroadcastingDispatcher = new BroadcastingDispatcher ( ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . dispatch ( org.springframework.integration.dispatcher.Message<> ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.dispatcher.BroadcastingDispatcher = new BroadcastingDispatcher ( org.springframework.integration.dispatcher.TaskExecutor ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . dispatch ( org.springframework.integration.dispatcher.Message<> ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.dispatcher.BroadcastingDispatcher = new BroadcastingDispatcher ( org.springframework.integration.dispatcher.TaskExecutor ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; void ( false , true , true ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . dispatch ( org.springframework.integration.dispatcher.Message<> ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler , Mockito . never ( ) ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.dispatcher.BroadcastingDispatcher = new BroadcastingDispatcher ( org.springframework.integration.dispatcher.TaskExecutor ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; void ( true , false , true ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . dispatch ( org.springframework.integration.dispatcher.Message<> ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler , Mockito . never ( ) ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.dispatcher.BroadcastingDispatcher = new BroadcastingDispatcher ( org.springframework.integration.dispatcher.TaskExecutor ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; void ( true , true , false ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . dispatch ( org.springframework.integration.dispatcher.Message<> ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler , Mockito . never ( ) ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.dispatcher.BroadcastingDispatcher = new BroadcastingDispatcher ( org.springframework.integration.dispatcher.TaskExecutor ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; void ( false , false , false ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . dispatch ( org.springframework.integration.dispatcher.Message<> ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler , Mockito . never ( ) ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler , Mockito . never ( ) ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler , Mockito . never ( ) ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.dispatcher.BroadcastingDispatcher = new BroadcastingDispatcher ( org.springframework.integration.dispatcher.TaskExecutor ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . dispatch ( org.springframework.integration.dispatcher.Message<> ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.dispatcher.BroadcastingDispatcher = new BroadcastingDispatcher ( org.springframework.integration.dispatcher.TaskExecutor ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . removeHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . dispatch ( org.springframework.integration.dispatcher.Message<> ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler , Mockito . never ( ) ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.dispatcher.BroadcastingDispatcher = new BroadcastingDispatcher ( org.springframework.integration.dispatcher.TaskExecutor ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . dispatch ( org.springframework.integration.dispatcher.Message<> ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . removeHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . dispatch ( org.springframework.integration.dispatcher.Message<> ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler , Mockito . times ( NUMBER ) ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; Mockito . verify ( org.springframework.integration.dispatcher.MessageHandler , Mockito . times ( NUMBER ) ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BroadcastingDispatcher org.springframework.integration.dispatcher.BroadcastingDispatcher = new BroadcastingDispatcher ( ) ; final java.util.List<org.springframework.integration.dispatcher.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.dispatcher.Message<?>> = java.util.Collections . java.util.List<org.springframework.integration.dispatcher.Message<?>> ( new java.util.ArrayList<org.springframework.integration.dispatcher.Message<?>> < Message < ? > > ( ) ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.BroadcastingDispatcherTests.MessageStoringTestEndpoint ( java.util.List<org.springframework.integration.dispatcher.Message<?>> ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.BroadcastingDispatcherTests.MessageStoringTestEndpoint ( java.util.List<org.springframework.integration.dispatcher.Message<?>> ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . dispatch ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.dispatcher.Message<?>> . size ( ) ) ; assertEquals ( NUMBER , ( int ) new IntegrationMessageHeaderAccessor ( java.util.List<org.springframework.integration.dispatcher.Message<?>> . get ( NUMBER ) ) . getSequenceNumber ( ) ) ; assertEquals ( NUMBER , ( int ) new IntegrationMessageHeaderAccessor ( java.util.List<org.springframework.integration.dispatcher.Message<?>> . get ( NUMBER ) ) . getSequenceSize ( ) ) ; assertEquals ( NUMBER , ( int ) new IntegrationMessageHeaderAccessor ( java.util.List<org.springframework.integration.dispatcher.Message<?>> . get ( NUMBER ) ) . getSequenceNumber ( ) ) ; assertEquals ( NUMBER , ( int ) new IntegrationMessageHeaderAccessor ( java.util.List<org.springframework.integration.dispatcher.Message<?>> . get ( NUMBER ) ) . getSequenceSize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BroadcastingDispatcher org.springframework.integration.dispatcher.BroadcastingDispatcher = new BroadcastingDispatcher ( ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . setApplySequence ( true ) ; final java.util.List<org.springframework.integration.dispatcher.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.dispatcher.Message<?>> = java.util.Collections . java.util.List<org.springframework.integration.dispatcher.Message<?>> ( new java.util.ArrayList<org.springframework.integration.dispatcher.Message<?>> < Message < ? > > ( ) ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.BroadcastingDispatcherTests.MessageStoringTestEndpoint ( java.util.List<org.springframework.integration.dispatcher.Message<?>> ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.BroadcastingDispatcherTests.MessageStoringTestEndpoint ( java.util.List<org.springframework.integration.dispatcher.Message<?>> ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.BroadcastingDispatcherTests.MessageStoringTestEndpoint ( java.util.List<org.springframework.integration.dispatcher.Message<?>> ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; Message < ? > org.springframework.integration.dispatcher.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.integration.dispatcher.Message<> . getHeaders ( ) . getId ( ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . dispatch ( org.springframework.integration.dispatcher.Message<> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.dispatcher.Message<?>> . size ( ) ) ; assertEquals ( NUMBER , ( int ) new IntegrationMessageHeaderAccessor ( java.util.List<org.springframework.integration.dispatcher.Message<?>> . get ( NUMBER ) ) . getSequenceNumber ( ) ) ; assertEquals ( NUMBER , ( int ) new IntegrationMessageHeaderAccessor ( java.util.List<org.springframework.integration.dispatcher.Message<?>> . get ( NUMBER ) ) . getSequenceSize ( ) ) ; assertEquals ( java.lang.Object , new IntegrationMessageHeaderAccessor ( java.util.List<org.springframework.integration.dispatcher.Message<?>> . get ( NUMBER ) ) . getCorrelationId ( ) ) ; assertEquals ( NUMBER , ( int ) new IntegrationMessageHeaderAccessor ( java.util.List<org.springframework.integration.dispatcher.Message<?>> . get ( NUMBER ) ) . getSequenceNumber ( ) ) ; assertEquals ( NUMBER , ( int ) new IntegrationMessageHeaderAccessor ( java.util.List<org.springframework.integration.dispatcher.Message<?>> . get ( NUMBER ) ) . getSequenceSize ( ) ) ; assertEquals ( java.lang.Object , new IntegrationMessageHeaderAccessor ( java.util.List<org.springframework.integration.dispatcher.Message<?>> . get ( NUMBER ) ) . getCorrelationId ( ) ) ; assertEquals ( NUMBER , ( int ) new IntegrationMessageHeaderAccessor ( java.util.List<org.springframework.integration.dispatcher.Message<?>> . get ( NUMBER ) ) . getSequenceNumber ( ) ) ; assertEquals ( NUMBER , ( int ) new IntegrationMessageHeaderAccessor ( java.util.List<org.springframework.integration.dispatcher.Message<?>> . get ( NUMBER ) ) . getSequenceSize ( ) ) ; assertEquals ( java.lang.Object , new IntegrationMessageHeaderAccessor ( java.util.List<org.springframework.integration.dispatcher.Message<?>> . get ( NUMBER ) ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.dispatcher.BroadcastingDispatcher = new BroadcastingDispatcher ( ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; Mockito . doThrow ( new MessagingException ( STRING ) ) . when ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; try { org.springframework.integration.dispatcher.BroadcastingDispatcher . dispatch ( org.springframework.integration.dispatcher.Message<> ) ; fail ( STRING ) ; } catch ( MessagingException org.springframework.integration.dispatcher.MessagingException ) { assertEquals ( org.springframework.integration.dispatcher.Message<> , org.springframework.integration.dispatcher.MessagingException . getFailedMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.dispatcher.BroadcastingDispatcher = new BroadcastingDispatcher ( ) ; org.springframework.integration.dispatcher.BroadcastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.MessageHandler . handleMessage ( org.springframework.integration.dispatcher.Message<> ) ; Message < java.lang.String > org.springframework.integration.dispatcher.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Mockito . doThrow ( new MessagingException ( org.springframework.integration.dispatcher.Message<java.lang.String> , STRING ) ) . when ( org.springframework.integration.dispatcher.MessageHandler ) . handleMessage ( Mockito . eq ( org.springframework.integration.dispatcher.Message<> ) ) ; try { org.springframework.integration.dispatcher.BroadcastingDispatcher . dispatch ( org.springframework.integration.dispatcher.Message<> ) ; fail ( STRING ) ; } catch ( MessagingException org.springframework.integration.dispatcher.MessagingException ) { assertEquals ( org.springframework.integration.dispatcher.Message<java.lang.String> , org.springframework.integration.dispatcher.MessagingException . getFailedMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { Mockito . doAnswer ( invocation -> { ( ( Runnable ) invocation . getArgument ( NUMBER ) ) . run ( ) ; return null ; } ) . when ( org.springframework.integration.dispatcher.TaskExecutor ) . execute ( Mockito . any ( java.lang.Runnable .class ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( final boolean ... boolean[] ) { final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; Mockito . doAnswer ( invocation -> { if ( passes [ count . getAndIncrement ( ) ] ) { ( ( Runnable ) invocation . getArgument ( NUMBER ) ) . run ( ) ; } return null ; } ) . when ( org.springframework.integration.dispatcher.TaskExecutor ) . execute ( Mockito . any ( java.lang.Runnable .class ) ) ; }  <METHOD_END>
<METHOD_START> void ( java.util.List<org.springframework.integration.dispatcher.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.dispatcher.Message<?>> ) { this . java.util.List<org.springframework.integration.dispatcher.Message<?>> = java.util.List<org.springframework.integration.dispatcher.Message<?>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.dispatcher.Message<?> ) { this . java.util.List<org.springframework.integration.dispatcher.Message<?>> . add ( org.springframework.integration.dispatcher.Message<> ) ; }  <METHOD_END>
