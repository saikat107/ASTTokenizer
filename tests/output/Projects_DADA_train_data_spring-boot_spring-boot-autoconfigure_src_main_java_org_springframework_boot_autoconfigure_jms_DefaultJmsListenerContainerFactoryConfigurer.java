<METHOD_START> void void ( DestinationResolver org.springframework.boot.autoconfigure.jms.DestinationResolver ) { this . org.springframework.boot.autoconfigure.jms.DestinationResolver = org.springframework.boot.autoconfigure.jms.DestinationResolver ; }  <METHOD_END>
<METHOD_START> void void ( MessageConverter org.springframework.boot.autoconfigure.jms.MessageConverter ) { this . org.springframework.boot.autoconfigure.jms.MessageConverter = org.springframework.boot.autoconfigure.jms.MessageConverter ; }  <METHOD_END>
<METHOD_START> void void ( JtaTransactionManager org.springframework.boot.autoconfigure.jms.JtaTransactionManager ) { this . org.springframework.boot.autoconfigure.jms.JtaTransactionManager = org.springframework.boot.autoconfigure.jms.JtaTransactionManager ; }  <METHOD_END>
<METHOD_START> void void ( JmsProperties org.springframework.boot.autoconfigure.jms.JmsProperties ) { this . org.springframework.boot.autoconfigure.jms.JmsProperties = org.springframework.boot.autoconfigure.jms.JmsProperties ; }  <METHOD_END>
<METHOD_START> public void void ( DefaultJmsListenerContainerFactory org.springframework.boot.autoconfigure.jms.DefaultJmsListenerContainerFactory , ConnectionFactory org.springframework.boot.autoconfigure.jms.ConnectionFactory ) { Assert . notNull ( org.springframework.boot.autoconfigure.jms.DefaultJmsListenerContainerFactory , STRING ) ; Assert . notNull ( org.springframework.boot.autoconfigure.jms.ConnectionFactory , STRING ) ; org.springframework.boot.autoconfigure.jms.DefaultJmsListenerContainerFactory . setConnectionFactory ( org.springframework.boot.autoconfigure.jms.ConnectionFactory ) ; org.springframework.boot.autoconfigure.jms.DefaultJmsListenerContainerFactory . setPubSubDomain ( this . org.springframework.boot.autoconfigure.jms.JmsProperties . isPubSubDomain ( ) ) ; if ( this . org.springframework.boot.autoconfigure.jms.JtaTransactionManager != null ) { org.springframework.boot.autoconfigure.jms.DefaultJmsListenerContainerFactory . setTransactionManager ( this . org.springframework.boot.autoconfigure.jms.JtaTransactionManager ) ; } else { org.springframework.boot.autoconfigure.jms.DefaultJmsListenerContainerFactory . setSessionTransacted ( true ) ; } if ( this . org.springframework.boot.autoconfigure.jms.DestinationResolver != null ) { org.springframework.boot.autoconfigure.jms.DefaultJmsListenerContainerFactory . setDestinationResolver ( this . org.springframework.boot.autoconfigure.jms.DestinationResolver ) ; } if ( this . org.springframework.boot.autoconfigure.jms.MessageConverter != null ) { org.springframework.boot.autoconfigure.jms.DefaultJmsListenerContainerFactory . setMessageConverter ( this . org.springframework.boot.autoconfigure.jms.MessageConverter ) ; } JmsProperties . JmsProperties JmsProperties.Listener = this . org.springframework.boot.autoconfigure.jms.JmsProperties . getListener ( ) ; org.springframework.boot.autoconfigure.jms.DefaultJmsListenerContainerFactory . setAutoStartup ( JmsProperties.Listener . isAutoStartup ( ) ) ; if ( JmsProperties.Listener . getAcknowledgeMode ( ) != null ) { org.springframework.boot.autoconfigure.jms.DefaultJmsListenerContainerFactory . setSessionAcknowledgeMode ( JmsProperties.Listener . getAcknowledgeMode ( ) . getMode ( ) ) ; } java.lang.String java.lang.String = JmsProperties.Listener . formatConcurrency ( ) ; if ( java.lang.String != null ) { org.springframework.boot.autoconfigure.jms.DefaultJmsListenerContainerFactory . setConcurrency ( java.lang.String ) ; } }  <METHOD_END>
