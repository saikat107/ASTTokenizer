<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; this . void ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , null ) ; TcpNetClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ) ; void ( org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . getConnection ( ) ; java.net.Socket java.net.Socket = TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING , java.net.Socket .class ) ; assertEquals ( NUMBER , java.net.Socket . int ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . stop ( ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; this . void ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , null ) ; TcpNetClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . registerListener ( message -> false ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . setSoTimeout ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ( org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory ) ; void ( org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . getConnection ( ) ; java.net.Socket java.net.Socket = TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING , java.net.Socket .class ) ; assertEquals ( NUMBER , java.net.Socket . int ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertFalse ( org.springframework.integration.ip.tcp.connection.TcpConnection . isOpen ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . stop ( ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; void ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory ) ; TcpNetClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ) ; this . void ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; void ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory ) ; TcpNioClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory = new TcpNioClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ) ; this . void ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory )			throws java.lang.Exception , java.lang.InterruptedException { final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . registerListener ( message -> { if ( ! ( message instanceof ErrorMessage ) ) { reply . set ( message ) ; replyLatch . countDown ( ) ; } return false ; } ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setSoTimeout ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; void ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertFalse ( org.springframework.integration.ip.tcp.connection.TcpConnection . isOpen ( ) ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . stop ( ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) { this . void ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; this . void ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > ( ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , null ) ; TcpNetClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . registerListener ( message -> { if ( ! ( message instanceof ErrorMessage ) ) { reply . set ( message ) ; } return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . setSoTimeout ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ( org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory ) ; void ( org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . getConnection ( ) ; java.net.Socket java.net.Socket = TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING , java.net.Socket .class ) ; assertEquals ( NUMBER , java.net.Socket . int ( ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; java.lang.Thread . void ( NUMBER ) ; assertTrue ( org.springframework.integration.ip.tcp.connection.TcpConnection . isOpen ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertNull ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( ) ) ; assertFalse ( org.springframework.integration.ip.tcp.connection.TcpConnection . isOpen ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . stop ( ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; this . void ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > ( ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , null ) ; TcpNioClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory = new TcpNioClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . registerListener ( message -> { if ( ! ( message instanceof ErrorMessage ) ) { reply . set ( message ) ; } return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . setSoTimeout ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ( org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory ) ; void ( org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . getConnection ( ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; java.lang.Thread . void ( NUMBER ) ; assertTrue ( org.springframework.integration.ip.tcp.connection.TcpConnection . isOpen ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertNull ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( ) ) ; assertFalse ( org.springframework.integration.ip.tcp.connection.TcpConnection . isOpen ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . stop ( ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , final int int ) { org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setComponentName ( STRING ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.TcpConnection> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > ( ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . registerListener ( message -> { try { Thread . sleep ( serverDelay ) ; serverConnection . get ( ) . send ( message ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return false ; } ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . registerSender ( new TcpSender ( ) { @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.TcpConnection> . set ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; } @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) {			} } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.TcpConnection> . set ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) {			}  <METHOD_END>
<METHOD_START> public void void ( AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) { org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setComponentName ( STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . registerSender ( new TcpSender ( ) { @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) {			} @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) {			} } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) {			}  <METHOD_END>
<METHOD_START> private java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) { final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setApplicationEventPublisher ( new ApplicationEventPublisher ( ) { @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) { if ( org.springframework.integration.ip.tcp.connection.ApplicationEvent instanceof TcpConnectionCloseEvent ) { java.util.concurrent.CountDownLatch . void ( ) ; } } @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			} } ) ; return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) { if ( org.springframework.integration.ip.tcp.connection.ApplicationEvent instanceof TcpConnectionCloseEvent ) { java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			}  <METHOD_END>
