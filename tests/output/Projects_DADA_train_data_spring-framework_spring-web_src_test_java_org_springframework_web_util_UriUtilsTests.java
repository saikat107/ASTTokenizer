<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException { assertEquals ( STRING , STRING , UriUtils . encodeScheme ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . encodeScheme ( STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException { assertEquals ( STRING , STRING , UriUtils . encodeUserInfo ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . encodeUserInfo ( STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException { assertEquals ( STRING , STRING , UriUtils . encodeHost ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . encodeHost ( STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException { assertEquals ( STRING , STRING , UriUtils . encodePort ( STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException { assertEquals ( STRING , STRING , UriUtils . encodePath ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . encodePath ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . encodePath ( STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException { assertEquals ( STRING , STRING , UriUtils . encodePathSegment ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . encodePathSegment ( STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException { assertEquals ( STRING , STRING , UriUtils . encodeQuery ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . encodeQuery ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . encodeQuery ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . encodeQuery ( STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException { assertEquals ( STRING , STRING , UriUtils . encodeQueryParam ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . encodeQueryParam ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . encodeQueryParam ( STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException { assertEquals ( STRING , STRING , UriUtils . encodeFragment ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . encodeFragment ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . encodeFragment ( STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException { assertEquals ( STRING , STRING , UriUtils . decode ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . decode ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . decode ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . decode ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . decode ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . decode ( STRING , java.lang.String ) ) ; assertEquals ( STRING , STRING , UriUtils . decode ( STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.io.UnsupportedEncodingException { UriUtils . decode ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , UriUtils . extractFileExtension ( STRING ) ) ; assertEquals ( STRING , UriUtils . extractFileExtension ( STRING ) ) ; assertEquals ( STRING , UriUtils . extractFileExtension ( STRING ) ) ; assertEquals ( STRING , UriUtils . extractFileExtension ( STRING ) ) ; assertEquals ( STRING , UriUtils . extractFileExtension ( STRING ) ) ; assertEquals ( STRING , UriUtils . extractFileExtension ( STRING ) ) ; assertEquals ( STRING , UriUtils . extractFileExtension ( STRING ) ) ; assertEquals ( STRING , UriUtils . extractFileExtension ( STRING ) ) ; assertEquals ( STRING , UriUtils . extractFileExtension ( STRING ) ) ; assertEquals ( STRING , UriUtils . extractFileExtension ( STRING ) ) ; assertEquals ( STRING , UriUtils . extractFileExtension ( STRING ) ) ; assertEquals ( STRING , UriUtils . extractFileExtension ( STRING ) ) ; assertEquals ( STRING , UriUtils . extractFileExtension ( STRING ) ) ; assertEquals ( STRING , UriUtils . extractFileExtension ( STRING ) ) ; }  <METHOD_END>
