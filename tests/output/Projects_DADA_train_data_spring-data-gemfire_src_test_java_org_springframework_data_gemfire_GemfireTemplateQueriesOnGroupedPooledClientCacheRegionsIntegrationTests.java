<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.data.gemfire.ProcessWrapper = ProcessExecutor . launch ( createDirectory ( STRING ) , org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.GemFireCacheServerOneConfiguration .class ) ; waitForServerToStart ( STRING , NUMBER ) ; org.springframework.data.gemfire.ProcessWrapper = ProcessExecutor . launch ( createDirectory ( STRING ) , org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.GemFireCacheServerTwoConfiguration .class ) ; waitForServerToStart ( STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.data.gemfire.ProcessWrapper . stop ( ) ; org.springframework.data.gemfire.ProcessWrapper . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.data.gemfire.GemfireTemplate .< java.lang.String > find ( STRING ) . asList ( ) ; assertThat ( java.util.List<java.lang.String> ) . isNotNull ( ) ; assertThat ( java.util.List<java.lang.String> . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<java.lang.String> ) . containsAll ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.data.gemfire.GemfireTemplate .< java.lang.String > find ( STRING ) . asList ( ) ; assertThat ( java.util.List<java.lang.String> ) . isNotNull ( ) ; assertThat ( java.util.List<java.lang.String> . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<java.lang.String> ) . containsAll ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> java.util.Properties java.util.Properties ( ) { return PropertiesBuilder . create ( ) . setProperty ( STRING , java.lang.String ( ) ) . setProperty ( STRING , java.lang.String ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.GemFireClientCacheConfiguration .class . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.System . java.lang.String ( STRING , GEMFIRE_LOG_LEVEL ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.ClientCacheFactoryBean org.springframework.data.gemfire.ClientCacheFactoryBean ( ) { ClientCacheFactoryBean org.springframework.data.gemfire.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.ClientCacheFactoryBean . setClose ( true ) ; org.springframework.data.gemfire.ClientCacheFactoryBean . setPoolName ( STRING ) ; org.springframework.data.gemfire.ClientCacheFactoryBean . setProperties ( java.util.Properties ( ) ) ; return org.springframework.data.gemfire.ClientCacheFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) org.springframework.data.gemfire.PoolFactoryBean org.springframework.data.gemfire.PoolFactoryBean ( ) { PoolFactoryBean org.springframework.data.gemfire.PoolFactoryBean = new PoolFactoryBean ( ) ; org.springframework.data.gemfire.PoolFactoryBean . setMaxConnections ( NUMBER ) ; org.springframework.data.gemfire.PoolFactoryBean . setPingInterval ( java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) ) ; org.springframework.data.gemfire.PoolFactoryBean . setReadTimeout ( java.lang.Long . java.lang.Long ( java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) ) . int ( ) ) ; org.springframework.data.gemfire.PoolFactoryBean . setRetryAttempts ( NUMBER ) ; org.springframework.data.gemfire.PoolFactoryBean . setServerGroup ( STRING ) ; org.springframework.data.gemfire.PoolFactoryBean . setLocators ( ConnectionEndpointList . from ( org.springframework.data.gemfire.ConnectionEndpoint ( STRING , NUMBER ) ) ) ; return org.springframework.data.gemfire.PoolFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) org.springframework.data.gemfire.PoolFactoryBean org.springframework.data.gemfire.PoolFactoryBean ( ) { PoolFactoryBean org.springframework.data.gemfire.PoolFactoryBean = new PoolFactoryBean ( ) ; org.springframework.data.gemfire.PoolFactoryBean . setMaxConnections ( NUMBER ) ; org.springframework.data.gemfire.PoolFactoryBean . setPingInterval ( java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) ) ; org.springframework.data.gemfire.PoolFactoryBean . setReadTimeout ( java.lang.Long . java.lang.Long ( java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) ) . int ( ) ) ; org.springframework.data.gemfire.PoolFactoryBean . setRetryAttempts ( NUMBER ) ; org.springframework.data.gemfire.PoolFactoryBean . setServerGroup ( STRING ) ; org.springframework.data.gemfire.PoolFactoryBean . setLocators ( ConnectionEndpointList . from ( org.springframework.data.gemfire.ConnectionEndpoint ( STRING , NUMBER ) ) ) ; return org.springframework.data.gemfire.PoolFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) org.springframework.data.gemfire.ClientRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat> < java.lang.String , org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat > org.springframework.data.gemfire.ClientRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat> ( GemFireCache org.springframework.data.gemfire.GemFireCache , @ Qualifier ( STRING ) Pool org.springframework.data.gemfire.Pool ) { ClientRegionFactoryBean < java.lang.String , org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat > org.springframework.data.gemfire.ClientRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat> = new ClientRegionFactoryBean < java.lang.String , org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat > ( ) ; org.springframework.data.gemfire.ClientRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat> . setCache ( org.springframework.data.gemfire.GemFireCache ) ; org.springframework.data.gemfire.ClientRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat> . setClose ( false ) ; org.springframework.data.gemfire.ClientRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat> . setPoolName ( org.springframework.data.gemfire.Pool . getName ( ) ) ; org.springframework.data.gemfire.ClientRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat> . setShortcut ( ClientRegionShortcut . PROXY ) ; return org.springframework.data.gemfire.ClientRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat> ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) org.springframework.data.gemfire.ClientRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat> < java.lang.String , org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat > org.springframework.data.gemfire.ClientRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat> ( GemFireCache org.springframework.data.gemfire.GemFireCache , @ Qualifier ( STRING ) Pool org.springframework.data.gemfire.Pool ) { ClientRegionFactoryBean < java.lang.String , org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat > org.springframework.data.gemfire.ClientRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat> = new ClientRegionFactoryBean < java.lang.String , org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat > ( ) ; org.springframework.data.gemfire.ClientRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat> . setCache ( org.springframework.data.gemfire.GemFireCache ) ; org.springframework.data.gemfire.ClientRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat> . setClose ( false ) ; org.springframework.data.gemfire.ClientRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat> . setPoolName ( org.springframework.data.gemfire.Pool . getName ( ) ) ; org.springframework.data.gemfire.ClientRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat> . setShortcut ( ClientRegionShortcut . PROXY ) ; return org.springframework.data.gemfire.ClientRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat> ; }  <METHOD_END>
<METHOD_START> @ Bean @ DependsOn ( STRING ) org.springframework.data.gemfire.GemfireTemplate org.springframework.data.gemfire.GemfireTemplate ( GemFireCache org.springframework.data.gemfire.GemFireCache ) { return new GemfireTemplate ( org.springframework.data.gemfire.GemFireCache . getRegion ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ DependsOn ( STRING ) org.springframework.data.gemfire.GemfireTemplate org.springframework.data.gemfire.GemfireTemplate ( GemFireCache org.springframework.data.gemfire.GemFireCache ) { return new GemfireTemplate ( org.springframework.data.gemfire.GemFireCache . getRegion ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.ConnectionEndpoint org.springframework.data.gemfire.ConnectionEndpoint ( java.lang.String java.lang.String , int int ) { return new ConnectionEndpoint ( java.lang.String , int ) ; }  <METHOD_END>
<METHOD_START> java.util.Properties java.util.Properties ( ) { return PropertiesBuilder . create ( ) . setProperty ( STRING , java.lang.String ( ) ) . setProperty ( STRING , STRING ) . setProperty ( STRING , java.lang.String ( ) ) . setProperty ( STRING , STRING ) . setProperty ( STRING , STRING ) . setProperty ( STRING , java.lang.String ( ) ) . setProperty ( STRING , java.lang.String ( ) ) . setProperty ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.AbstractGemFireCacheServerConfiguration> ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> abstract java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.System . java.lang.String ( STRING , GEMFIRE_LOG_LEVEL ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean ( ) { CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setClose ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . setProperties ( java.util.Properties ( ) ) ; return org.springframework.data.gemfire.CacheFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.CacheServerFactoryBean org.springframework.data.gemfire.CacheServerFactoryBean ( Cache org.springframework.data.gemfire.Cache ) { CacheServerFactoryBean org.springframework.data.gemfire.CacheServerFactoryBean = new CacheServerFactoryBean ( ) ; org.springframework.data.gemfire.CacheServerFactoryBean . setAutoStartup ( true ) ; org.springframework.data.gemfire.CacheServerFactoryBean . setCache ( org.springframework.data.gemfire.Cache ) ; org.springframework.data.gemfire.CacheServerFactoryBean . setMaxTimeBetweenPings ( java.lang.Long . java.lang.Long ( java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) ) . int ( ) ) ; org.springframework.data.gemfire.CacheServerFactoryBean . setPort ( int ( ) ) ; return org.springframework.data.gemfire.CacheServerFactoryBean ; }  <METHOD_END>
<METHOD_START> abstract int int ( )  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat ( org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat ) { cats . put ( org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat . getName ( ) , org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat ) ; return org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat ( org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat . newCat ( STRING ) ) ; org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat ( org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat . newCat ( STRING ) ) ; org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat ( org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat . newCat ( STRING ) ) ; org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat ( org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat . newCat ( STRING ) ) ; org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat ( org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Cat . newCat ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) org.springframework.data.gemfire.LocalRegionFactoryBean org.springframework.data.gemfire.LocalRegionFactoryBean ( Cache org.springframework.data.gemfire.Cache ) { LocalRegionFactoryBean org.springframework.data.gemfire.LocalRegionFactoryBean = new LocalRegionFactoryBean ( ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . setCache ( org.springframework.data.gemfire.Cache ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . setClose ( false ) ; org.springframework.data.gemfire.LocalRegionFactoryBean . setPersistent ( false ) ; return org.springframework.data.gemfire.LocalRegionFactoryBean ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) { new AnnotationConfigApplicationContext ( org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.GemFireCacheServerOneConfiguration .class ) . registerShutdownHook ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog ( org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog ) { dogs . put ( org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog . getName ( ) , org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog ) ; return org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog ( org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog . newDog ( STRING ) ) ; org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog ( org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog . newDog ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) org.springframework.data.gemfire.LocalRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog> < java.lang.String , org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog > org.springframework.data.gemfire.LocalRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog> ( Cache org.springframework.data.gemfire.Cache ) { LocalRegionFactoryBean < java.lang.String , org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog > org.springframework.data.gemfire.LocalRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog> = new LocalRegionFactoryBean < java.lang.String , org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog > ( ) ; org.springframework.data.gemfire.LocalRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog> . setCache ( org.springframework.data.gemfire.Cache ) ; org.springframework.data.gemfire.LocalRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog> . setClose ( false ) ; org.springframework.data.gemfire.LocalRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog> . setPersistent ( false ) ; return org.springframework.data.gemfire.LocalRegionFactoryBean<java.lang.String,org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.Dog> ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) { new AnnotationConfigApplicationContext ( org.springframework.data.gemfire.GemfireTemplateQueriesOnGroupedPooledClientCacheRegionsIntegrationTests.GemFireCacheServerTwoConfiguration .class ) . registerShutdownHook ( ) ; }  <METHOD_END>
