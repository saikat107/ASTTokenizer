<METHOD_START> private void ( Query org.springframework.data.solr.core.query.Query ) { super( java.util.Collections . java.util.List ( org.springframework.data.solr.core.query.Query ) ); }  <METHOD_END>
<METHOD_START> public static org.springframework.data.solr.core.query.QueryFunction org.springframework.data.solr.core.query.QueryFunction ( Query org.springframework.data.solr.core.query.Query ) { Assert . notNull ( org.springframework.data.solr.core.query.Query , STRING ) ; return new org.springframework.data.solr.core.query.QueryFunction ( org.springframework.data.solr.core.query.Query ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.solr.core.query.QueryFunction org.springframework.data.solr.core.query.QueryFunction ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; return org.springframework.data.solr.core.query.QueryFunction ( new SimpleStringCriteria ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.solr.core.query.QueryFunction org.springframework.data.solr.core.query.QueryFunction ( Criteria org.springframework.data.solr.core.query.Criteria ) { Assert . notNull ( org.springframework.data.solr.core.query.Criteria , STRING ) ; return org.springframework.data.solr.core.query.QueryFunction ( new SimpleQuery ( org.springframework.data.solr.core.query.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
