<METHOD_START> public java.util.UUID java.util.UUID ( java.lang.Object java.lang.Object ) { return java.util.UUID ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public static java.util.UUID java.util.UUID ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return null ; } if ( java.lang.Object instanceof java.util.UUID ) { return ( java.util.UUID ) java.lang.Object ; } if ( java.lang.Object instanceof java.lang.String ) { try { return java.util.UUID . java.util.UUID ( ( java.lang.String ) java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) { try { return java.util.UUID . java.util.UUID ( ( ( java.lang.String ) java.lang.Object ) . byte[] ( java.lang.String ) ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String , java.io.UnsupportedEncodingException ) ; } } } if ( ClassUtils . isPrimitiveOrWrapper ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { try { return java.util.UUID . java.util.UUID ( java.lang.Object . java.lang.String ( ) . byte[] ( java.lang.String ) ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String , java.io.UnsupportedEncodingException ) ; } } byte [] byte[] = byte[] ( java.lang.Object ) ; return java.util.UUID . java.util.UUID ( byte[] ) ; }  <METHOD_END>
<METHOD_START> private static byte [] byte[] ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return null ; } java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; try { new java.io.ObjectOutputStream ( java.io.ByteArrayOutputStream ) . void ( java.lang.Object ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.io.IOException ) ; } return java.io.ByteArrayOutputStream . byte[] ( ) ; }  <METHOD_END>
