<METHOD_START> public T T ( java.lang.String java.lang.String , DataType org.springframework.cassandra.core.keyspace.DataType ) { return T ( cqlId ( java.lang.String ) , org.springframework.cassandra.core.keyspace.DataType ) ; }  <METHOD_END>
<METHOD_START> public T T ( CqlIdentifier org.springframework.cassandra.core.keyspace.CqlIdentifier , DataType org.springframework.cassandra.core.keyspace.DataType ) { return T ( org.springframework.cassandra.core.keyspace.CqlIdentifier , org.springframework.cassandra.core.keyspace.DataType , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> public T T ( java.lang.String java.lang.String , DataType org.springframework.cassandra.core.keyspace.DataType ) { return T ( cqlId ( java.lang.String ) , org.springframework.cassandra.core.keyspace.DataType ) ; }  <METHOD_END>
<METHOD_START> public T T ( CqlIdentifier org.springframework.cassandra.core.keyspace.CqlIdentifier , DataType org.springframework.cassandra.core.keyspace.DataType ) { return T ( org.springframework.cassandra.core.keyspace.CqlIdentifier , org.springframework.cassandra.core.keyspace.DataType , java.util.Optional . java.util.Optional ( PARTITIONED ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> public T T ( java.lang.String java.lang.String , DataType org.springframework.cassandra.core.keyspace.DataType ) { return T ( cqlId ( java.lang.String ) , org.springframework.cassandra.core.keyspace.DataType ) ; }  <METHOD_END>
<METHOD_START> public T T ( CqlIdentifier org.springframework.cassandra.core.keyspace.CqlIdentifier , DataType org.springframework.cassandra.core.keyspace.DataType ) { return T ( org.springframework.cassandra.core.keyspace.CqlIdentifier , org.springframework.cassandra.core.keyspace.DataType , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> public T T ( CqlIdentifier org.springframework.cassandra.core.keyspace.CqlIdentifier , DataType org.springframework.cassandra.core.keyspace.DataType , Ordering org.springframework.cassandra.core.keyspace.Ordering ) { Assert . notNull ( org.springframework.cassandra.core.keyspace.Ordering , STRING ) ; return T ( org.springframework.cassandra.core.keyspace.CqlIdentifier , org.springframework.cassandra.core.keyspace.DataType , java.util.Optional . java.util.Optional ( CLUSTERED ) , java.util.Optional . java.util.Optional ( org.springframework.cassandra.core.keyspace.Ordering ) ) ; }  <METHOD_END>
<METHOD_START> public T T ( CqlIdentifier org.springframework.cassandra.core.keyspace.CqlIdentifier , DataType org.springframework.cassandra.core.keyspace.DataType , java.util.Optional<org.springframework.cassandra.core.keyspace.Ordering> < Ordering > java.util.Optional<org.springframework.cassandra.core.keyspace.Ordering> ) { return T ( org.springframework.cassandra.core.keyspace.CqlIdentifier , org.springframework.cassandra.core.keyspace.DataType , java.util.Optional . java.util.Optional ( CLUSTERED ) , java.util.Optional<org.springframework.cassandra.core.keyspace.Ordering> ) ; }  <METHOD_END>
<METHOD_START> protected T T ( java.lang.String java.lang.String , DataType org.springframework.cassandra.core.keyspace.DataType , PrimaryKeyType org.springframework.cassandra.core.keyspace.PrimaryKeyType ) { return T ( java.lang.String , org.springframework.cassandra.core.keyspace.DataType , org.springframework.cassandra.core.keyspace.PrimaryKeyType , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected T T ( java.lang.String java.lang.String , DataType org.springframework.cassandra.core.keyspace.DataType , PrimaryKeyType org.springframework.cassandra.core.keyspace.PrimaryKeyType , Ordering org.springframework.cassandra.core.keyspace.Ordering ) { Assert . notNull ( org.springframework.cassandra.core.keyspace.PrimaryKeyType , STRING ) ; Assert . notNull ( org.springframework.cassandra.core.keyspace.Ordering , STRING ) ; return T ( cqlId ( java.lang.String ) , org.springframework.cassandra.core.keyspace.DataType , java.util.Optional . java.util.Optional ( org.springframework.cassandra.core.keyspace.PrimaryKeyType ) , java.util.Optional . java.util.Optional ( org.springframework.cassandra.core.keyspace.Ordering ) ) ; }  <METHOD_END>
<METHOD_START> protected T T ( java.lang.String java.lang.String , DataType org.springframework.cassandra.core.keyspace.DataType , PrimaryKeyType org.springframework.cassandra.core.keyspace.PrimaryKeyType , java.util.Optional<org.springframework.cassandra.core.keyspace.Ordering> < Ordering > java.util.Optional<org.springframework.cassandra.core.keyspace.Ordering> ) { Assert . notNull ( org.springframework.cassandra.core.keyspace.PrimaryKeyType , STRING ) ; Assert . notNull ( java.util.Optional<org.springframework.cassandra.core.keyspace.Ordering> , STRING ) ; return T ( cqlId ( java.lang.String ) , org.springframework.cassandra.core.keyspace.DataType , java.util.Optional . java.util.Optional ( org.springframework.cassandra.core.keyspace.PrimaryKeyType ) , java.util.Optional<org.springframework.cassandra.core.keyspace.Ordering> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected T T ( CqlIdentifier org.springframework.cassandra.core.keyspace.CqlIdentifier , DataType org.springframework.cassandra.core.keyspace.DataType , java.util.Optional<org.springframework.cassandra.core.keyspace.PrimaryKeyType> < PrimaryKeyType > java.util.Optional<org.springframework.cassandra.core.keyspace.PrimaryKeyType> , java.util.Optional<org.springframework.cassandra.core.keyspace.Ordering> < Ordering > java.util.Optional<org.springframework.cassandra.core.keyspace.Ordering> ) { Assert . notNull ( org.springframework.cassandra.core.keyspace.CqlIdentifier , STRING ) ; Assert . notNull ( org.springframework.cassandra.core.keyspace.DataType , STRING ) ; Assert . notNull ( java.util.Optional<org.springframework.cassandra.core.keyspace.PrimaryKeyType> , STRING ) ; Assert . notNull ( java.util.Optional<org.springframework.cassandra.core.keyspace.Ordering> , STRING ) ; ColumnSpecification org.springframework.cassandra.core.keyspace.ColumnSpecification = new ColumnSpecification ( ) . name ( org.springframework.cassandra.core.keyspace.CqlIdentifier ) . type ( org.springframework.cassandra.core.keyspace.DataType ) ; java.util.Optional<org.springframework.cassandra.core.keyspace.PrimaryKeyType> . ifPresent ( keyType -> { column . keyType ( keyType ) ; optionalOrdering . filter ( o -> keyType == CLUSTERED ) . ifPresent ( column :: ordering ) ; if ( keyType == PrimaryKeyType . PARTITIONED ) { partitionKeyColumns . add ( column ) ; } if ( keyType == PrimaryKeyType . CLUSTERED ) { clusteredKeyColumns . add ( column ) ; } } ) ; java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> . add ( org.springframework.cassandra.core.keyspace.ColumnSpecification ) ; if ( ! java.util.Optional<org.springframework.cassandra.core.keyspace.PrimaryKeyType> . isPresent ( ) ) { java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> . add ( org.springframework.cassandra.core.keyspace.ColumnSpecification ) ; } return ( T ) this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> < ColumnSpecification > java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> ( ) { return java.util.Collections . java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> ( java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> < ColumnSpecification > java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> ( ) { return java.util.Collections . java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> ( java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> < ColumnSpecification > java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> ( ) { return java.util.Collections . java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> ( java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> < ColumnSpecification > java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> ( ) { java.util.ArrayList<org.springframework.cassandra.core.keyspace.ColumnSpecification> < ColumnSpecification > java.util.ArrayList<org.springframework.cassandra.core.keyspace.ColumnSpecification> = new java.util.ArrayList<org.springframework.cassandra.core.keyspace.ColumnSpecification> <> ( ) ; java.util.ArrayList<org.springframework.cassandra.core.keyspace.ColumnSpecification> . addAll ( java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> ) ; java.util.ArrayList<org.springframework.cassandra.core.keyspace.ColumnSpecification> . addAll ( java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> ) ; return java.util.Collections . java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> ( java.util.ArrayList<org.springframework.cassandra.core.keyspace.ColumnSpecification> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> < ColumnSpecification > java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> ( ) { return java.util.Collections . java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> ( java.util.List<org.springframework.cassandra.core.keyspace.ColumnSpecification> ) ; }  <METHOD_END>
