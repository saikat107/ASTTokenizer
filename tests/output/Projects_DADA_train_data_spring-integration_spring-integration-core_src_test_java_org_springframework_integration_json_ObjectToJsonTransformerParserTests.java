<METHOD_START> @ Test public void void ( ) { ObjectToJsonTransformer org.springframework.integration.json.ObjectToJsonTransformer = TestUtils . getPropertyValue ( org.springframework.integration.json.ApplicationContext . getBean ( STRING ) , STRING , ObjectToJsonTransformer .class ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.json.ObjectToJsonTransformer , STRING ) ) ; assertEquals ( Jackson2JsonObjectMapper .class , TestUtils . getPropertyValue ( org.springframework.integration.json.ObjectToJsonTransformer , STRING ) . getClass ( ) ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.ObjectToJsonTransformer . transform ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; assertFalse ( org.springframework.integration.json.Message<> . getHeaders ( ) . containsKey ( MessageHeaders . CONTENT_TYPE ) ) ; this . org.springframework.integration.json.DefaultMessageBuilderFactory . setReadOnlyHeaders ( ) ; org.springframework.integration.json.ObjectToJsonTransformer = TestUtils . getPropertyValue ( org.springframework.integration.json.ApplicationContext . getBean ( STRING ) , STRING , ObjectToJsonTransformer .class ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.json.ObjectToJsonTransformer , STRING ) ) ; org.springframework.integration.json.Message<?> = org.springframework.integration.json.ObjectToJsonTransformer . transform ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; assertFalse ( org.springframework.integration.json.Message<> . getHeaders ( ) . containsKey ( MessageHeaders . CONTENT_TYPE ) ) ; org.springframework.integration.json.Message<?> = org.springframework.integration.json.ObjectToJsonTransformer . transform ( MessageBuilder . withPayload ( STRING ) . setHeader ( MessageHeaders . CONTENT_TYPE , STRING ) . build ( ) ) ; assertNotNull ( org.springframework.integration.json.Message<> . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) ) ; assertEquals ( STRING , org.springframework.integration.json.Message<> . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) ) ; org.springframework.integration.json.ObjectToJsonTransformer = TestUtils . getPropertyValue ( org.springframework.integration.json.ApplicationContext . getBean ( STRING ) , STRING , ObjectToJsonTransformer .class ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.json.ObjectToJsonTransformer , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestAddress org.springframework.integration.json.TestAddress = new TestAddress ( ) ; org.springframework.integration.json.TestAddress . setNumber ( NUMBER ) ; org.springframework.integration.json.TestAddress . setStreet ( STRING ) ; TestPerson org.springframework.integration.json.TestPerson = new TestPerson ( ) ; org.springframework.integration.json.TestPerson . setFirstName ( STRING ) ; org.springframework.integration.json.TestPerson . setLastName ( STRING ) ; org.springframework.integration.json.TestPerson . setAge ( NUMBER ) ; org.springframework.integration.json.TestPerson . setAddress ( org.springframework.integration.json.TestAddress ) ; QueueChannel org.springframework.integration.json.QueueChannel = new QueueChannel ( ) ; Message < TestPerson > org.springframework.integration.json.Message<org.springframework.integration.json.TestPerson> = MessageBuilder . withPayload ( org.springframework.integration.json.TestPerson ) . setReplyChannel ( org.springframework.integration.json.QueueChannel ) . build ( ) ; this . org.springframework.integration.json.MessageChannel . send ( org.springframework.integration.json.Message<org.springframework.integration.json.TestPerson> ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.json.Message<> ) ; assertNotNull ( org.springframework.integration.json.Message<> . getPayload ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.integration.json.Message<> . getPayload ( ) . getClass ( ) ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.json.Message<> . getPayload ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern . java.util.regex.Pattern ( STRING ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; assertTrue ( java.util.regex.Matcher . boolean ( ) ) ; java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPerson org.springframework.integration.json.TestPerson = new TestPerson ( ) ; org.springframework.integration.json.TestPerson . setFirstName ( STRING ) ; org.springframework.integration.json.TestPerson . setLastName ( STRING ) ; org.springframework.integration.json.TestPerson . setAge ( NUMBER ) ; QueueChannel org.springframework.integration.json.QueueChannel = new QueueChannel ( ) ; Message < TestPerson > org.springframework.integration.json.Message<org.springframework.integration.json.TestPerson> = MessageBuilder . withPayload ( org.springframework.integration.json.TestPerson ) . setReplyChannel ( org.springframework.integration.json.QueueChannel ) . build ( ) ; this . org.springframework.integration.json.MessageChannel . send ( org.springframework.integration.json.Message<org.springframework.integration.json.TestPerson> ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.json.Message<> ) ; assertNotNull ( org.springframework.integration.json.Message<> . getPayload ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.integration.json.Message<> . getPayload ( ) . getClass ( ) ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.json.Message<> . getPayload ( ) ; assertEquals ( STRING + org.springframework.integration.json.TestPerson . toString ( ) + STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPerson org.springframework.integration.json.TestPerson = new TestPerson ( ) ; org.springframework.integration.json.TestPerson . setFirstName ( STRING ) ; org.springframework.integration.json.TestPerson . setLastName ( STRING ) ; org.springframework.integration.json.TestPerson . setAge ( NUMBER ) ; QueueChannel org.springframework.integration.json.QueueChannel = new QueueChannel ( ) ; Message < TestPerson > org.springframework.integration.json.Message<org.springframework.integration.json.TestPerson> = MessageBuilder . withPayload ( org.springframework.integration.json.TestPerson ) . setReplyChannel ( org.springframework.integration.json.QueueChannel ) . build ( ) ; this . org.springframework.integration.json.MessageChannel . send ( org.springframework.integration.json.Message<org.springframework.integration.json.TestPerson> ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.json.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.json.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , Matchers . instanceOf ( JsonNode .class ) ) ; StandardEvaluationContext org.springframework.integration.json.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.integration.json.StandardEvaluationContext . addPropertyAccessor ( new JsonPropertyAccessor ( ) ) ; Expression org.springframework.integration.json.Expression = new SpelExpressionParser ( ) . parseExpression ( STRING ) ; assertTrue ( org.springframework.integration.json.Expression . getValue ( org.springframework.integration.json.StandardEvaluationContext , java.lang.Object , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPerson org.springframework.integration.json.TestPerson = new TestPerson ( ) ; org.springframework.integration.json.TestPerson . setFirstName ( STRING ) ; org.springframework.integration.json.TestPerson . setLastName ( STRING ) ; org.springframework.integration.json.TestPerson . setAge ( NUMBER ) ; QueueChannel org.springframework.integration.json.QueueChannel = new QueueChannel ( ) ; Message < TestPerson > org.springframework.integration.json.Message<org.springframework.integration.json.TestPerson> = MessageBuilder . withPayload ( org.springframework.integration.json.TestPerson ) . setReplyChannel ( org.springframework.integration.json.QueueChannel ) . build ( ) ; this . org.springframework.integration.json.MessageChannel . send ( org.springframework.integration.json.Message<org.springframework.integration.json.TestPerson> ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.json.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.json.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , Matchers . instanceOf ( java.util.Map .class ) ) ; assertEquals ( TestPerson .class , org.springframework.integration.json.Message<> . getHeaders ( ) . get ( JsonHeaders . TYPE_ID ) ) ; Expression org.springframework.integration.json.Expression = new SpelExpressionParser ( ) . parseExpression ( STRING ) ; assertTrue ( org.springframework.integration.json.Expression . getValue ( new StandardEvaluationContext ( ) , java.lang.Object , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) throws java.lang.Exception { return STRING + java.lang.Object . java.lang.String ( ) + STRING ; }  <METHOD_END>
