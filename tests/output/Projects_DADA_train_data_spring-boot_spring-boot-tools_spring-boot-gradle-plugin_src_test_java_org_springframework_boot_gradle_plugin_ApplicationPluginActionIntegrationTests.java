<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.gradle.plugin.GradleBuild . build ( STRING , STRING ) . getOutput ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.gradle.plugin.GradleBuild . build ( STRING , STRING , STRING ) . getOutput ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.gradle.plugin.GradleBuild . build ( STRING , STRING ) . getOutput ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.gradle.plugin.GradleBuild . build ( STRING , STRING , STRING ) . getOutput ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertThat ( this . org.springframework.boot.gradle.plugin.GradleBuild . build ( STRING ) . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; java.lang.String java.lang.String = this . org.springframework.boot.gradle.plugin.GradleBuild . getProjectDir ( ) . getName ( ) ; java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.plugin.GradleBuild . getProjectDir ( ) , STRING + java.lang.String + STRING ) ; assertThat ( java.io.File ) . isFile ( ) ; assertThat ( java.util.List<java.lang.String> ( java.io.File ) ) . containsExactlyInAnyOrder ( java.lang.String + STRING , java.lang.String + STRING , java.lang.String + STRING + java.lang.String + STRING , java.lang.String + STRING , java.lang.String + STRING + java.lang.String , java.lang.String + STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertThat ( this . org.springframework.boot.gradle.plugin.GradleBuild . build ( STRING ) . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; java.lang.String java.lang.String = this . org.springframework.boot.gradle.plugin.GradleBuild . getProjectDir ( ) . getName ( ) ; java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.plugin.GradleBuild . getProjectDir ( ) , STRING + java.lang.String + STRING ) ; assertThat ( java.io.File ) . isFile ( ) ; assertThat ( java.util.List<java.lang.String> ( java.io.File ) ) . containsExactlyInAnyOrder ( java.lang.String + STRING , java.lang.String + STRING , java.lang.String + STRING + java.lang.String + STRING , java.lang.String + STRING , java.lang.String + STRING + java.lang.String , java.lang.String + STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertThat ( this . org.springframework.boot.gradle.plugin.GradleBuild . build ( STRING ) . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; java.lang.String java.lang.String = this . org.springframework.boot.gradle.plugin.GradleBuild . getProjectDir ( ) . getName ( ) ; java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.plugin.GradleBuild . getProjectDir ( ) , STRING + java.lang.String + STRING ) ; assertThat ( java.io.File ) . isFile ( ) ; assertThat ( java.util.List<java.lang.String> ( java.io.File ) ) . containsExactlyInAnyOrder ( java.lang.String + STRING , java.lang.String + STRING , java.lang.String + STRING + java.lang.String + STRING , java.lang.String + STRING , java.lang.String + STRING + java.lang.String , java.lang.String + STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertThat ( this . org.springframework.boot.gradle.plugin.GradleBuild . build ( STRING ) . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; java.lang.String java.lang.String = this . org.springframework.boot.gradle.plugin.GradleBuild . getProjectDir ( ) . getName ( ) ; java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.plugin.GradleBuild . getProjectDir ( ) , STRING + java.lang.String + STRING ) ; assertThat ( java.io.File ) . isFile ( ) ; assertThat ( java.util.List<java.lang.String> ( java.io.File ) ) . containsExactlyInAnyOrder ( java.lang.String + STRING , java.lang.String + STRING , java.lang.String + STRING + java.lang.String + STRING , java.lang.String + STRING , java.lang.String + STRING + java.lang.String , java.lang.String + STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.io.File java.io.File ) throws java.io.IOException { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; try ( java.util.zip.ZipFile java.util.zip.ZipFile = new java.util.zip.ZipFile ( java.io.File ) ) { java.util.Enumeration<? extends java.util.zip.ZipEntry> < ? extends java.util.zip.ZipEntry > java.util.Enumeration<? extends java.util.zip.ZipEntry> = java.util.zip.ZipFile . java.util.Enumeration<? extends java.util.zip.ZipEntry> ( ) ; while ( java.util.Enumeration<> . boolean ( ) ) { java.util.List<java.lang.String> . boolean ( java.util.Enumeration<> . nextElement ( ) . java.lang.String ( ) ) ; } } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.io.File java.io.File ) throws java.io.IOException { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; try ( TarArchiveInputStream org.springframework.boot.gradle.plugin.TarArchiveInputStream = new TarArchiveInputStream ( new java.io.FileInputStream ( java.io.File ) ) ) { TarArchiveEntry org.springframework.boot.gradle.plugin.TarArchiveEntry ; while ( ( org.springframework.boot.gradle.plugin.TarArchiveEntry = org.springframework.boot.gradle.plugin.TarArchiveInputStream . getNextTarEntry ( ) ) != null ) { java.util.List<java.lang.String> . boolean ( org.springframework.boot.gradle.plugin.TarArchiveEntry . getName ( ) ) ; } } return java.util.List<java.lang.String> ; }  <METHOD_END>
