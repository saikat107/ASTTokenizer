<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( org.w3c.dom.Element org.w3c.dom.Element ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( org.w3c.dom.Element org.w3c.dom.Element , AbstractBeanDefinition org.springframework.integration.config.xml.AbstractBeanDefinition , ParserContext org.springframework.integration.config.xml.ParserContext )			throws org.springframework.integration.config.xml.BeanDefinitionStoreException { return AbstractApplicationContext . APPLICATION_EVENT_MULTICASTER_BEAN_NAME ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.config.xml.ParserContext , BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; } else { BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( STRING ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , NUMBER ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , NUMBER ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , NUMBER ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , STRING ) ; java.lang.String java.lang.String = BeanDefinitionReaderUtils . registerWithGeneratedName ( org.springframework.integration.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) , org.springframework.integration.config.xml.ParserContext . getRegistry ( ) ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; } java.lang.String java.lang.String = SpringVersion . getVersion ( ) ; if ( java.lang.String != null && java.lang.String . boolean ( STRING ) ) { org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.concurrent.CopyOnWriteArraySet .class ) ; } }  <METHOD_END>
