<METHOD_START> private void ( final int int , final char [] char[] , final int int , final int int ) { this . int = int ; this . char[] = char[] ; this . int = int ; this . int = int ; }  <METHOD_END>
<METHOD_START> public static org.springframework.asm.Type org.springframework.asm.Type ( final java.lang.String java.lang.String ) { return org.springframework.asm.Type ( java.lang.String . char[] ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.asm.Type org.springframework.asm.Type ( final java.lang.String java.lang.String ) { char [] char[] = java.lang.String . char[] ( ) ; return new org.springframework.asm.Type ( char[] [ NUMBER ] == '[' ? int : int , char[] , NUMBER , char[] . int ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.asm.Type org.springframework.asm.Type ( final java.lang.String java.lang.String ) { return org.springframework.asm.Type ( java.lang.String . char[] ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.asm.Type org.springframework.asm.Type ( final org.springframework.asm.Type org.springframework.asm.Type , final org.springframework.asm.Type ... org.springframework.asm.Type[] ) { return org.springframework.asm.Type ( java.lang.String ( org.springframework.asm.Type , org.springframework.asm.Type[] ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.asm.Type org.springframework.asm.Type ( final java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> . boolean ( ) ) { if ( java.lang.Class<> == java.lang.Integer . java.lang.Class<java.lang.Integer> ) { return org.springframework.asm.Type ; } else if ( java.lang.Class<> == java.lang.Void . java.lang.Class<java.lang.Void> ) { return org.springframework.asm.Type ; } else if ( java.lang.Class<> == java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) { return org.springframework.asm.Type ; } else if ( java.lang.Class<> == java.lang.Byte . java.lang.Class<java.lang.Byte> ) { return org.springframework.asm.Type ; } else if ( java.lang.Class<> == java.lang.Character . java.lang.Class<java.lang.Character> ) { return org.springframework.asm.Type ; } else if ( java.lang.Class<> == java.lang.Short . java.lang.Class<java.lang.Short> ) { return org.springframework.asm.Type ; } else if ( java.lang.Class<> == java.lang.Double . java.lang.Class<java.lang.Double> ) { return org.springframework.asm.Type ; } else if ( java.lang.Class<> == java.lang.Float . java.lang.Class<java.lang.Float> ) { return org.springframework.asm.Type ; } else { return org.springframework.asm.Type ; } } else { return org.springframework.asm.Type ( java.lang.String ( java.lang.Class<> ) ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.asm.Type org.springframework.asm.Type ( final java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> ) { return org.springframework.asm.Type ( java.lang.String ( java.lang.reflect.Constructor<> ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.asm.Type org.springframework.asm.Type ( final java.lang.reflect.Method java.lang.reflect.Method ) { return org.springframework.asm.Type ( java.lang.String ( java.lang.reflect.Method ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.asm.Type [] org.springframework.asm.Type[] ( final java.lang.String java.lang.String ) { char [] char[] = java.lang.String . char[] ( ) ; int int = NUMBER ; int int = NUMBER ; while ( true ) { char char = char[] [ int ++ ] ; if ( char == ')' ) { break; } else if ( char == 'L' ) { while ( char[] [ int ++ ] != ';' ) {                } ++ int ; } else if ( char != '[' ) { ++ int ; } } org.springframework.asm.Type [] org.springframework.asm.Type[] = new org.springframework.asm.Type [ int ] ; int = NUMBER ; int = NUMBER ; while ( char[] [ int ] != ')' ) { org.springframework.asm.Type[] [ int ] = org.springframework.asm.Type ( char[] , int ) ; int += org.springframework.asm.Type[] [ int ] . int + ( org.springframework.asm.Type[] [ int ] . int == int ? NUMBER : NUMBER ) ; int += NUMBER ; } return org.springframework.asm.Type[] ; }  <METHOD_END>
<METHOD_START> public static org.springframework.asm.Type [] org.springframework.asm.Type[] ( final java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; org.springframework.asm.Type [] org.springframework.asm.Type[] = new org.springframework.asm.Type [ java.lang.Class<?>[] . int ] ; for ( int int = java.lang.Class<?>[] . int - NUMBER ; int >= NUMBER ; -- int ) { org.springframework.asm.Type[] [ int ] = org.springframework.asm.Type ( java.lang.Class<?>[] [ int ] ) ; } return org.springframework.asm.Type[] ; }  <METHOD_END>
<METHOD_START> public static org.springframework.asm.Type org.springframework.asm.Type ( final java.lang.String java.lang.String ) { char [] char[] = java.lang.String . char[] ( ) ; int int = NUMBER ; while ( true ) { char char = char[] [ int ++ ] ; if ( char == ')' ) { return org.springframework.asm.Type ( char[] , int ) ; } else if ( char == 'L' ) { while ( char[] [ int ++ ] != ';' ) {                } } } }  <METHOD_END>
<METHOD_START> public static org.springframework.asm.Type org.springframework.asm.Type ( final java.lang.reflect.Method java.lang.reflect.Method ) { return org.springframework.asm.Type ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> public static int int ( final java.lang.String java.lang.String ) { int int = NUMBER ; int int = NUMBER ; while ( true ) { char char = java.lang.String . char ( int ++ ) ; if ( char == ')' ) { char = java.lang.String . char ( int ) ; return int << NUMBER | ( char == 'V' ? NUMBER : ( char == 'D' || char == 'J' ? NUMBER : NUMBER ) ) ; } else if ( char == 'L' ) { while ( java.lang.String . char ( int ++ ) != ';' ) {                } int += NUMBER ; } else if ( char == '[' ) { while ( ( char = java.lang.String . char ( int ) ) == '[' ) { ++ int ; } if ( char == 'D' || char == 'J' ) { int -= NUMBER ; } } else if ( char == 'D' || char == 'J' ) { int += NUMBER ; } else { int += NUMBER ; } } }  <METHOD_END>
<METHOD_START> private static org.springframework.asm.Type org.springframework.asm.Type ( final char [] char[] , final int int ) { int int ; switch ( char[] [ int ] ) { case 'V' : return org.springframework.asm.Type ; case 'Z' : return org.springframework.asm.Type ; case 'C' : return org.springframework.asm.Type ; case 'B' : return org.springframework.asm.Type ; case 'S' : return org.springframework.asm.Type ; case 'I' : return org.springframework.asm.Type ; case 'F' : return org.springframework.asm.Type ; case 'J' : return org.springframework.asm.Type ; case 'D' : return org.springframework.asm.Type ; case '[' : int = NUMBER ; while ( char[] [ int + int ] == '[' ) { ++ int ; } if ( char[] [ int + int ] == 'L' ) { ++ int ; while ( char[] [ int + int ] != ';' ) { ++ int ; } } return new org.springframework.asm.Type ( int , char[] , int , int + NUMBER ) ; case 'L' : int = NUMBER ; while ( char[] [ int + int ] != ';' ) { ++ int ; } return new org.springframework.asm.Type ( int , char[] , int + NUMBER , int - NUMBER ) ; default: return new org.springframework.asm.Type ( int , char[] , int , char[] . int - int ) ; } }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { int int = NUMBER ; while ( char[] [ int + int ] == '[' ) { ++ int ; } return int ; }  <METHOD_END>
<METHOD_START> public org.springframework.asm.Type org.springframework.asm.Type ( ) { return org.springframework.asm.Type ( char[] , int + int ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { switch ( int ) { case int : return STRING ; case int : return STRING ; case int : return STRING ; case int : return STRING ; case int : return STRING ; case int : return STRING ; case int : return STRING ; case int : return STRING ; case int : return STRING ; case int : java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( org.springframework.asm.Type ( ) . java.lang.String ( ) ) ; for ( int int = int ( ) ; int > NUMBER ; -- int ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; case int : return new java.lang.String ( char[] , int , int ) . java.lang.String ( '/' , '.' ) . java.lang.String ( ) ; default: return null ; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return new java.lang.String ( char[] , int , int ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.asm.Type [] org.springframework.asm.Type[] ( ) { return org.springframework.asm.Type[] ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.asm.Type org.springframework.asm.Type ( ) { return org.springframework.asm.Type ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; void ( java.lang.StringBuilder ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( final org.springframework.asm.Type org.springframework.asm.Type , final org.springframework.asm.Type ... org.springframework.asm.Type[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '(' ) ; for ( int int = NUMBER ; int < org.springframework.asm.Type[] . int ; ++ int ) { org.springframework.asm.Type[] [ int ] . void ( java.lang.StringBuilder ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( ')' ) ; org.springframework.asm.Type . void ( java.lang.StringBuilder ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( final java.lang.StringBuilder java.lang.StringBuilder ) { if ( this . char[] == null ) { java.lang.StringBuilder . java.lang.StringBuilder ( ( char ) ( ( int & NUMBER ) >>> NUMBER ) ) ; } else if ( int == int ) { java.lang.StringBuilder . java.lang.StringBuilder ( 'L' ) ; java.lang.StringBuilder . java.lang.StringBuilder ( this . char[] , int , int ) ; java.lang.StringBuilder . java.lang.StringBuilder ( ';' ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( this . char[] , int , int ) ; } }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( final java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<> . java.lang.String ( ) . java.lang.String ( '.' , '/' ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( final java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; void ( java.lang.StringBuilder , java.lang.Class<> ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( final java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Constructor<> . java.lang.Class<?>[] ( ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '(' ) ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; ++ int ) { void ( java.lang.StringBuilder , java.lang.Class<?>[] [ int ] ) ; } return java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( final java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '(' ) ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; ++ int ) { void ( java.lang.StringBuilder , java.lang.Class<?>[] [ int ] ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( ')' ) ; void ( java.lang.StringBuilder , java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private static void void ( final java.lang.StringBuilder java.lang.StringBuilder , final java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<> ; while ( true ) { if ( java.lang.Class<> . boolean ( ) ) { char char ; if ( java.lang.Class<> == java.lang.Integer . java.lang.Class<java.lang.Integer> ) { char = 'I' ; } else if ( java.lang.Class<> == java.lang.Void . java.lang.Class<java.lang.Void> ) { char = 'V' ; } else if ( java.lang.Class<> == java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) { char = 'Z' ; } else if ( java.lang.Class<> == java.lang.Byte . java.lang.Class<java.lang.Byte> ) { char = 'B' ; } else if ( java.lang.Class<> == java.lang.Character . java.lang.Class<java.lang.Character> ) { char = 'C' ; } else if ( java.lang.Class<> == java.lang.Short . java.lang.Class<java.lang.Short> ) { char = 'S' ; } else if ( java.lang.Class<> == java.lang.Double . java.lang.Class<java.lang.Double> ) { char = 'D' ; } else if ( java.lang.Class<> == java.lang.Float . java.lang.Class<java.lang.Float> ) { char = 'F' ; } else { char = 'J' ; } java.lang.StringBuilder . java.lang.StringBuilder ( char ) ; return; } else if ( java.lang.Class<> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( '[' ) ; java.lang.Class<?> = java.lang.Class<> . java.lang.Class<?> ( ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( 'L' ) ; java.lang.String java.lang.String = java.lang.Class<> . java.lang.String ( ) ; int int = java.lang.String . int ( ) ; for ( int int = NUMBER ; int < int ; ++ int ) { char char = java.lang.String . char ( int ) ; java.lang.StringBuilder . java.lang.StringBuilder ( char == '.' ? '/' : char ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( ';' ) ; return; } } }  <METHOD_END>
<METHOD_START> public int int ( ) { return char[] == null ? ( int & NUMBER ) : NUMBER ; }  <METHOD_END>
<METHOD_START> public int int ( final int int ) { if ( int == Opcodes . IALOAD || int == Opcodes . IASTORE ) { return int + ( char[] == null ? ( int & NUMBER ) >> NUMBER : NUMBER ) ; } else { return int + ( char[] == null ? ( int & NUMBER ) >> NUMBER : NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( final java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.asm.Type ) ) { return false ; } org.springframework.asm.Type org.springframework.asm.Type = ( org.springframework.asm.Type ) java.lang.Object ; if ( int != org.springframework.asm.Type . int ) { return false ; } if ( int >= int ) { if ( int != org.springframework.asm.Type . int ) { return false ; } for ( int int = int , int = org.springframework.asm.Type . int , int = int + int ; int < int ; int ++ , int ++ ) { if ( char[] [ int ] != org.springframework.asm.Type . char[] [ int ] ) { return false ; } } } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = NUMBER * int ; if ( int >= int ) { for ( int int = int , int = int + int ; int < int ; int ++ ) { int = NUMBER * ( int + char[] [ int ] ) ; } } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ( ) ; }  <METHOD_END>
