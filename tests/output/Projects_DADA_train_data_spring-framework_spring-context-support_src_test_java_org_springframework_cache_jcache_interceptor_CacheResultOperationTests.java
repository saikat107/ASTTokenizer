<METHOD_START> @ java.lang.Override protected org.springframework.cache.jcache.interceptor.CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation ( ) { CacheMethodDetails < CacheResult > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> = create ( CacheResult .class , SampleObject .class , STRING , java.lang.Long .class ) ; return new CacheResultOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> , defaultCacheResolver , defaultKeyGenerator , defaultExceptionCacheResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation = org.springframework.cache.jcache.interceptor.CacheResultOperation ( ) ; assertNotNull ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getKeyGenerator ( ) ) ; assertNotNull ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getExceptionCacheResolver ( ) ) ; assertNull ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getExceptionCacheName ( ) ) ; assertEquals ( defaultExceptionCacheResolver , org.springframework.cache.jcache.interceptor.CacheResultOperation . getExceptionCacheResolver ( ) ) ; CacheInvocationParameter [] org.springframework.cache.jcache.interceptor.CacheInvocationParameter[] = org.springframework.cache.jcache.interceptor.CacheResultOperation . getAllParameters ( NUMBER ) ; assertEquals ( NUMBER , allParameters . length ) ; assertCacheInvocationParameter ( org.springframework.cache.jcache.interceptor.CacheInvocationParameter[] [ NUMBER ] , java.lang.Long .class , NUMBER , NUMBER ) ; CacheInvocationParameter [] org.springframework.cache.jcache.interceptor.CacheInvocationParameter[] = org.springframework.cache.jcache.interceptor.CacheResultOperation . getKeyParameters ( NUMBER ) ; assertEquals ( NUMBER , keyParameters . length ) ; assertCacheInvocationParameter ( org.springframework.cache.jcache.interceptor.CacheInvocationParameter[] [ NUMBER ] , java.lang.Long .class , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheMethodDetails < CacheResult > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> = create ( CacheResult .class , SampleObject .class , STRING , java.lang.Long .class , java.lang.Boolean .class , java.lang.String .class ) ; CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation = org.springframework.cache.jcache.interceptor.CacheResultOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> ) ; CacheInvocationParameter [] org.springframework.cache.jcache.interceptor.CacheInvocationParameter[] = org.springframework.cache.jcache.interceptor.CacheResultOperation . getKeyParameters ( NUMBER , java.lang.Boolean . java.lang.Boolean , STRING ) ; assertEquals ( NUMBER , keyParameters . length ) ; assertCacheInvocationParameter ( org.springframework.cache.jcache.interceptor.CacheInvocationParameter[] [ NUMBER ] , java.lang.Long .class , NUMBER , NUMBER ) ; assertCacheInvocationParameter ( org.springframework.cache.jcache.interceptor.CacheInvocationParameter[] [ NUMBER ] , java.lang.String .class , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheMethodDetails < CacheResult > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> = create ( CacheResult .class , SampleObject .class , STRING , java.lang.String .class , java.lang.Long .class ) ; CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation = org.springframework.cache.jcache.interceptor.CacheResultOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> ) ; thrown . expect ( java.lang.IllegalStateException .class ) ; org.springframework.cache.jcache.interceptor.CacheResultOperation . getAllParameters ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheMethodDetails < CacheResult > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> = create ( CacheResult .class , SampleObject .class , STRING , java.lang.String .class , java.lang.Long .class ) ; CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation = org.springframework.cache.jcache.interceptor.CacheResultOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> ) ; thrown . expect ( java.lang.IllegalStateException .class ) ; org.springframework.cache.jcache.interceptor.CacheResultOperation . getKeyParameters ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheMethodDetails < CacheResult > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> = create ( CacheResult .class , SampleObject .class , STRING , java.lang.Long .class , java.lang.String .class ) ; CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation = org.springframework.cache.jcache.interceptor.CacheResultOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> ) ; CacheInvocationParameter [] org.springframework.cache.jcache.interceptor.CacheInvocationParameter[] = org.springframework.cache.jcache.interceptor.CacheResultOperation . getAllParameters ( NUMBER , STRING ) ; java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> = org.springframework.cache.jcache.interceptor.CacheInvocationParameter[] [ NUMBER ] . getAnnotations ( ) ; assertEquals ( NUMBER , java.util.Set<java.lang.annotation.Annotation> . int ( ) ) ; assertEquals ( CacheKey .class , java.util.Set<java.lang.annotation.Annotation> . java.util.Iterator<java.lang.annotation.Annotation> ( ) . java.lang.annotation.Annotation ( ) . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) ; java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> = org.springframework.cache.jcache.interceptor.CacheInvocationParameter[] [ NUMBER ] . getAnnotations ( ) ; assertEquals ( NUMBER , java.util.Set<java.lang.annotation.Annotation> . int ( ) ) ; assertEquals ( Value .class , java.util.Set<java.lang.annotation.Annotation> . java.util.Iterator<java.lang.annotation.Annotation> ( ) . java.lang.annotation.Annotation ( ) . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheMethodDetails < CacheResult > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> = create ( CacheResult .class , SampleObject .class , STRING , java.lang.Long .class ) ; CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation = org.springframework.cache.jcache.interceptor.CacheResultOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> ) ; assertTrue ( org.springframework.cache.jcache.interceptor.CacheResultOperation . isAlwaysInvoked ( ) ) ; assertNotNull ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getExceptionTypeFilter ( ) ) ; assertTrue ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getExceptionTypeFilter ( ) . match ( java.io.IOException .class ) ) ; assertFalse ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getExceptionTypeFilter ( ) . match ( java.lang.NullPointerException .class ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cache.jcache.interceptor.CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation ( CacheMethodDetails < CacheResult > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> ) { return new CacheResultOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> , defaultCacheResolver , defaultKeyGenerator , defaultCacheResolver ) ; }  <METHOD_END>
