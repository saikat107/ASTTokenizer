<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . java.util.List<org.springframework.web.reactive.resource.Resource> . add ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.ResourceUrlProviderTests> ( ) ) ) ; this . java.util.List<org.springframework.web.reactive.resource.Resource> . add ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.ResourceUrlProviderTests> ( ) ) ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . setLocations ( java.util.List<org.springframework.web.reactive.resource.Resource> ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . afterPropertiesSet ( ) ; this . java.util.Map<java.lang.String,org.springframework.web.reactive.resource.ResourceWebHandler> . put ( STRING , this . org.springframework.web.reactive.resource.ResourceWebHandler ) ; this . org.springframework.web.reactive.resource.ResourceUrlProvider . setHandlerMap ( this . java.util.Map<java.lang.String,org.springframework.web.reactive.resource.ResourceWebHandler> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = this . org.springframework.web.reactive.resource.ResourceUrlProvider . getForLookupPath ( STRING ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = this . org.springframework.web.reactive.resource.ResourceUrlProvider . getForRequestUrl ( org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( java.lang.String , java.lang.String ) ; java.lang.String = STRING ; java.lang.String = this . org.springframework.web.reactive.resource.ResourceUrlProvider . getForRequestUrl ( org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> < java.lang.String , VersionStrategy > java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> = new java.util.HashMap<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> <> ( ) ; java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> . put ( STRING , new ContentVersionStrategy ( ) ) ; VersionResourceResolver org.springframework.web.reactive.resource.VersionResourceResolver = new VersionResourceResolver ( ) ; org.springframework.web.reactive.resource.VersionResourceResolver . setStrategyMap ( java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.reactive.resource.ResourceResolver> = new java.util.ArrayList<org.springframework.web.reactive.resource.ResourceResolver> <> ( ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> . add ( org.springframework.web.reactive.resource.VersionResourceResolver ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> . add ( new PathResourceResolver ( ) ) ; this . org.springframework.web.reactive.resource.ResourceWebHandler . setResourceResolvers ( java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ) ; java.lang.String java.lang.String = this . org.springframework.web.reactive.resource.ResourceUrlProvider . getForLookupPath ( STRING ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResourceWebHandler org.springframework.web.reactive.resource.ResourceWebHandler = new ResourceWebHandler ( ) ; org.springframework.web.reactive.resource.ResourceWebHandler . setLocations ( this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ; java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> < java.lang.String , VersionStrategy > java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> = new java.util.HashMap<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> <> ( ) ; java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> . put ( STRING , new ContentVersionStrategy ( ) ) ; VersionResourceResolver org.springframework.web.reactive.resource.VersionResourceResolver = new VersionResourceResolver ( ) ; org.springframework.web.reactive.resource.VersionResourceResolver . setStrategyMap ( java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.reactive.resource.ResourceResolver> = new java.util.ArrayList<org.springframework.web.reactive.resource.ResourceResolver> <> ( ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> . add ( org.springframework.web.reactive.resource.VersionResourceResolver ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> . add ( new PathResourceResolver ( ) ) ; org.springframework.web.reactive.resource.ResourceWebHandler . setResourceResolvers ( java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ) ; this . java.util.Map<java.lang.String,org.springframework.web.reactive.resource.ResourceWebHandler> . put ( STRING , org.springframework.web.reactive.resource.ResourceWebHandler ) ; this . org.springframework.web.reactive.resource.ResourceUrlProvider . setHandlerMap ( this . java.util.Map<java.lang.String,org.springframework.web.reactive.resource.ResourceWebHandler> ) ; java.lang.String java.lang.String = this . org.springframework.web.reactive.resource.ResourceUrlProvider . getForLookupPath ( STRING ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigWebApplicationContext org.springframework.web.reactive.resource.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.web.reactive.resource.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.reactive.resource.AnnotationConfigWebApplicationContext . register ( org.springframework.web.reactive.resource.ResourceUrlProviderTests.HandlerMappingConfiguration .class ) ; org.springframework.web.reactive.resource.AnnotationConfigWebApplicationContext . refresh ( ) ; ResourceUrlProvider org.springframework.web.reactive.resource.ResourceUrlProvider = org.springframework.web.reactive.resource.AnnotationConfigWebApplicationContext . getBean ( ResourceUrlProvider .class ) ; assertThat ( org.springframework.web.reactive.resource.ResourceUrlProvider . getHandlerMap ( ) , Matchers . hasKey ( STRING ) ) ; assertFalse ( org.springframework.web.reactive.resource.ResourceUrlProvider . isAutodetect ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.resource.SimpleUrlHandlerMapping org.springframework.web.reactive.resource.SimpleUrlHandlerMapping ( ) { ResourceWebHandler org.springframework.web.reactive.resource.ResourceWebHandler = new ResourceWebHandler ( ) ; java.util.HashMap<java.lang.String,org.springframework.web.reactive.resource.ResourceWebHandler> < java.lang.String , ResourceWebHandler > java.util.HashMap<java.lang.String,org.springframework.web.reactive.resource.ResourceWebHandler> = new java.util.HashMap<java.lang.String,org.springframework.web.reactive.resource.ResourceWebHandler> <> ( ) ; java.util.HashMap<java.lang.String,org.springframework.web.reactive.resource.ResourceWebHandler> . put ( STRING , org.springframework.web.reactive.resource.ResourceWebHandler ) ; SimpleUrlHandlerMapping org.springframework.web.reactive.resource.SimpleUrlHandlerMapping = new SimpleUrlHandlerMapping ( ) ; org.springframework.web.reactive.resource.SimpleUrlHandlerMapping . setUrlMap ( java.util.HashMap<java.lang.String,org.springframework.web.reactive.resource.ResourceWebHandler> ) ; return org.springframework.web.reactive.resource.SimpleUrlHandlerMapping ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.resource.ResourceUrlProvider org.springframework.web.reactive.resource.ResourceUrlProvider ( ) { return new ResourceUrlProvider ( ) ; }  <METHOD_END>
