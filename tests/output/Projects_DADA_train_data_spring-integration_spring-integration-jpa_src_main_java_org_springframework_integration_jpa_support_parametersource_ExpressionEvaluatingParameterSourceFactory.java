<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> public void ( BeanFactory org.springframework.integration.jpa.support.parametersource.BeanFactory ) { this . java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> = new java.util.ArrayList <> ( ) ; this . org.springframework.integration.jpa.support.parametersource.ParameterExpressionEvaluator . setBeanFactory ( org.springframework.integration.jpa.support.parametersource.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> < JpaParameter > java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> ) { Assert . notEmpty ( java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> , STRING ) ; for ( JpaParameter org.springframework.integration.jpa.support.parametersource.JpaParameter : java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> ) { Assert . notNull ( org.springframework.integration.jpa.support.parametersource.JpaParameter , STRING ) ; } this . java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> = java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> ; this . org.springframework.integration.jpa.support.parametersource.ParameterExpressionEvaluator . getEvaluationContext ( ) . setVariable ( STRING , ExpressionEvaluatingParameterSourceUtils . convertStaticParameters ( java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.jpa.support.parametersource.PositionSupportingParameterSource org.springframework.integration.jpa.support.parametersource.PositionSupportingParameterSource ( final java.lang.Object java.lang.Object ) { return new org.springframework.integration.jpa.support.parametersource.ExpressionEvaluatingParameterSourceFactory.ExpressionEvaluatingParameterSource ( java.lang.Object , this . java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> , this . org.springframework.integration.jpa.support.parametersource.ParameterExpressionEvaluator ) ; }  <METHOD_END>
<METHOD_START> protected void ( java.lang.Object java.lang.Object , java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> < JpaParameter > java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> , ParameterExpressionEvaluator org.springframework.integration.jpa.support.parametersource.ParameterExpressionEvaluator ) { this . java.lang.Object = java.lang.Object ; this . org.springframework.integration.jpa.support.parametersource.ParameterExpressionEvaluator = org.springframework.integration.jpa.support.parametersource.ParameterExpressionEvaluator ; this . java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> = java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> ; this . java.util.Map<java.lang.String,org.springframework.integration.jpa.support.parametersource.JpaParameter> = new java.util.HashMap <> ( java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> . size ( ) ) ; for ( JpaParameter org.springframework.integration.jpa.support.parametersource.JpaParameter : java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> ) { this . java.util.Map<java.lang.String,org.springframework.integration.jpa.support.parametersource.JpaParameter> . put ( org.springframework.integration.jpa.support.parametersource.JpaParameter . getName ( ) , org.springframework.integration.jpa.support.parametersource.JpaParameter ) ; } this . java.util.Map<java.lang.String,java.lang.Object> . void ( ExpressionEvaluatingParameterSourceUtils . convertStaticParameters ( java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( int int ) { Assert . isTrue ( int >= NUMBER , STRING ) ; if ( int <= this . java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> . size ( ) ) { final JpaParameter org.springframework.integration.jpa.support.parametersource.JpaParameter = this . java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> . get ( int ) ; if ( org.springframework.integration.jpa.support.parametersource.JpaParameter . getValue ( ) != null ) { return org.springframework.integration.jpa.support.parametersource.JpaParameter . getValue ( ) ; } if ( org.springframework.integration.jpa.support.parametersource.JpaParameter . getExpression ( ) != null ) { Expression org.springframework.integration.jpa.support.parametersource.Expression ; if ( this . java.lang.Object instanceof java.util.Collection<?> < ? > ) { org.springframework.integration.jpa.support.parametersource.Expression = org.springframework.integration.jpa.support.parametersource.JpaParameter . getProjectionExpression ( ) ; } else { org.springframework.integration.jpa.support.parametersource.Expression = org.springframework.integration.jpa.support.parametersource.JpaParameter . getSpelExpression ( ) ; } final java.lang.Object java.lang.Object = this . org.springframework.integration.jpa.support.parametersource.ParameterExpressionEvaluator . evaluateExpression ( org.springframework.integration.jpa.support.parametersource.Expression , this . java.lang.Object ) ; if ( org.springframework.integration.jpa.support.parametersource.JpaParameter . getName ( ) != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.integration.jpa.support.parametersource.JpaParameter . getName ( ) , java.lang.Object ) ; } if ( org.springframework.integration.jpa.support.parametersource.Log . isDebugEnabled ( ) ) { org.springframework.integration.jpa.support.parametersource.Log . debug ( STRING + org.springframework.integration.jpa.support.parametersource.Expression + STRING + java.lang.Object ) ; } return java.lang.Object ; } } return null ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { if ( this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) { return this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; } if ( ! this . java.util.Map<java.lang.String,org.springframework.integration.jpa.support.parametersource.JpaParameter> . containsKey ( java.lang.String ) ) { JpaParameter org.springframework.integration.jpa.support.parametersource.JpaParameter = new JpaParameter ( java.lang.String , null , java.lang.String ) ; org.springframework.integration.jpa.support.parametersource.ExpressionEvaluatingParameterSourceFactory .this . java.util.List<org.springframework.integration.jpa.support.parametersource.JpaParameter> . add ( org.springframework.integration.jpa.support.parametersource.JpaParameter ) ; this . java.util.Map<java.lang.String,org.springframework.integration.jpa.support.parametersource.JpaParameter> . put ( java.lang.String , org.springframework.integration.jpa.support.parametersource.JpaParameter ) ; } JpaParameter org.springframework.integration.jpa.support.parametersource.JpaParameter = this . java.util.Map<java.lang.String,org.springframework.integration.jpa.support.parametersource.JpaParameter> . get ( java.lang.String ) ; Expression org.springframework.integration.jpa.support.parametersource.Expression ; if ( this . java.lang.Object instanceof java.util.Collection<?> < ? > ) { org.springframework.integration.jpa.support.parametersource.Expression = org.springframework.integration.jpa.support.parametersource.JpaParameter . getProjectionExpression ( ) ; } else { org.springframework.integration.jpa.support.parametersource.Expression = org.springframework.integration.jpa.support.parametersource.JpaParameter . getSpelExpression ( ) ; } final java.lang.Object java.lang.Object = this . org.springframework.integration.jpa.support.parametersource.ParameterExpressionEvaluator . evaluateExpression ( org.springframework.integration.jpa.support.parametersource.Expression , this . java.lang.Object ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; if ( org.springframework.integration.jpa.support.parametersource.Log . isDebugEnabled ( ) ) { org.springframework.integration.jpa.support.parametersource.Log . debug ( STRING + org.springframework.integration.jpa.support.parametersource.Expression + STRING + java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { try { final java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == java.lang.Object ) { return false ; } } catch ( ExpressionException org.springframework.integration.jpa.support.parametersource.ExpressionException ) { if ( org.springframework.integration.jpa.support.parametersource.Log . isDebugEnabled ( ) ) { org.springframework.integration.jpa.support.parametersource.Log . debug ( STRING , org.springframework.integration.jpa.support.parametersource.ExpressionException ) ; } this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; return false ; } return true ; }  <METHOD_END>
