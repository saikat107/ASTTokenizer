<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.solr.repository.query.QueryParser = new DefaultQueryParser ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.solr.repository.query.StringBasedSolrQueryTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = new SolrQueryMethod ( java.lang.reflect.Method , org.springframework.data.solr.repository.query.RepositoryMetadata , org.springframework.data.solr.repository.query.ProjectionFactory , org.springframework.data.solr.repository.query.SolrEntityInformationCreator ) ; StringBasedSolrQuery org.springframework.data.solr.repository.query.StringBasedSolrQuery = new StringBasedSolrQuery ( org.springframework.data.solr.repository.query.SolrQueryMethod , org.springframework.data.solr.repository.query.SolrOperations ) ; org . springframework . data . solr . org.springframework.data.solr.core . org.springframework.data.solr.core . org.springframework.data.solr.core org.springframework.data.solr.core.query.Query = org.springframework.data.solr.repository.query.StringBasedSolrQuery . createQuery ( new SolrParametersParameterAccessor ( org.springframework.data.solr.repository.query.SolrQueryMethod , new java.lang.Object [] { STRING } ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.QueryParser . getQueryString ( org.springframework.data.solr.core.query.Query ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.solr.repository.query.StringBasedSolrQueryTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.lang.Integer .class , java.lang.Float .class ) ; SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = new SolrQueryMethod ( java.lang.reflect.Method , org.springframework.data.solr.repository.query.RepositoryMetadata , org.springframework.data.solr.repository.query.ProjectionFactory , org.springframework.data.solr.repository.query.SolrEntityInformationCreator ) ; StringBasedSolrQuery org.springframework.data.solr.repository.query.StringBasedSolrQuery = new StringBasedSolrQuery ( org.springframework.data.solr.repository.query.SolrQueryMethod , org.springframework.data.solr.repository.query.SolrOperations ) ; org . springframework . data . solr . org.springframework.data.solr.core . org.springframework.data.solr.core . org.springframework.data.solr.core org.springframework.data.solr.core.query.Query = org.springframework.data.solr.repository.query.StringBasedSolrQuery . createQuery ( new SolrParametersParameterAccessor ( org.springframework.data.solr.repository.query.SolrQueryMethod , new java.lang.Object [] { java.lang.Integer . java.lang.Integer ( - NUMBER ) , java.lang.Float . java.lang.Float ( - NUMBER ) } ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.QueryParser . getQueryString ( org.springframework.data.solr.core.query.Query ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.solr.repository.query.StringBasedSolrQueryTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.lang.Integer .class , java.lang.Float .class ) ; SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = new SolrQueryMethod ( java.lang.reflect.Method , org.springframework.data.solr.repository.query.RepositoryMetadata , org.springframework.data.solr.repository.query.ProjectionFactory , org.springframework.data.solr.repository.query.SolrEntityInformationCreator ) ; StringBasedSolrQuery org.springframework.data.solr.repository.query.StringBasedSolrQuery = new StringBasedSolrQuery ( org.springframework.data.solr.repository.query.SolrQueryMethod , org.springframework.data.solr.repository.query.SolrOperations ) ; org . springframework . data . solr . org.springframework.data.solr.core . org.springframework.data.solr.core . org.springframework.data.solr.core org.springframework.data.solr.core.query.Query = org.springframework.data.solr.repository.query.StringBasedSolrQuery . createQuery ( new SolrParametersParameterAccessor ( org.springframework.data.solr.repository.query.SolrQueryMethod , new java.lang.Object [] { java.lang.Integer . java.lang.Integer ( NUMBER ) , java.lang.Float . java.lang.Float ( NUMBER ) } ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.QueryParser . getQueryString ( org.springframework.data.solr.core.query.Query ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.solr.repository.query.StringBasedSolrQueryTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = new SolrQueryMethod ( java.lang.reflect.Method , org.springframework.data.solr.repository.query.RepositoryMetadata , org.springframework.data.solr.repository.query.ProjectionFactory , org.springframework.data.solr.repository.query.SolrEntityInformationCreator ) ; StringBasedSolrQuery org.springframework.data.solr.repository.query.StringBasedSolrQuery = new StringBasedSolrQuery ( org.springframework.data.solr.repository.query.SolrQueryMethod , org.springframework.data.solr.repository.query.SolrOperations ) ; org . springframework . data . solr . org.springframework.data.solr.core . org.springframework.data.solr.core . org.springframework.data.solr.core org.springframework.data.solr.core.query.Query = org.springframework.data.solr.repository.query.StringBasedSolrQuery . createQuery ( new SolrParametersParameterAccessor ( org.springframework.data.solr.repository.query.SolrQueryMethod , new java.lang.Object [] { null } ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.QueryParser . getQueryString ( org.springframework.data.solr.core.query.Query ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.solr.repository.query.StringBasedSolrQueryTests.SampleRepository .class . java.lang.reflect.Method ( STRING , Point .class , Distance .class ) ; SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = new SolrQueryMethod ( java.lang.reflect.Method , org.springframework.data.solr.repository.query.RepositoryMetadata , org.springframework.data.solr.repository.query.ProjectionFactory , org.springframework.data.solr.repository.query.SolrEntityInformationCreator ) ; StringBasedSolrQuery org.springframework.data.solr.repository.query.StringBasedSolrQuery = new StringBasedSolrQuery ( org.springframework.data.solr.repository.query.SolrQueryMethod , org.springframework.data.solr.repository.query.SolrOperations ) ; org . springframework . data . solr . org.springframework.data.solr.core . org.springframework.data.solr.core . org.springframework.data.solr.core org.springframework.data.solr.core.query.Query = org.springframework.data.solr.repository.query.StringBasedSolrQuery . createQuery ( new SolrParametersParameterAccessor ( org.springframework.data.solr.repository.query.SolrQueryMethod , new java.lang.Object [] { new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER ) } ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.QueryParser . getQueryString ( org.springframework.data.solr.core.query.Query ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.solr.repository.query.StringBasedSolrQueryTests.SampleRepository .class . java.lang.reflect.Method ( STRING , Point .class , Distance .class ) ; SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = new SolrQueryMethod ( java.lang.reflect.Method , org.springframework.data.solr.repository.query.RepositoryMetadata , org.springframework.data.solr.repository.query.ProjectionFactory , org.springframework.data.solr.repository.query.SolrEntityInformationCreator ) ; StringBasedSolrQuery org.springframework.data.solr.repository.query.StringBasedSolrQuery = new StringBasedSolrQuery ( org.springframework.data.solr.repository.query.SolrQueryMethod , org.springframework.data.solr.repository.query.SolrOperations ) ; org . springframework . data . solr . org.springframework.data.solr.core . org.springframework.data.solr.core . org.springframework.data.solr.core org.springframework.data.solr.core.query.Query = org.springframework.data.solr.repository.query.StringBasedSolrQuery . createQuery ( new SolrParametersParameterAccessor ( org.springframework.data.solr.repository.query.SolrQueryMethod , new java.lang.Object [] { new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . MILES ) } ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.QueryParser . getQueryString ( org.springframework.data.solr.core.query.Query ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.solr.repository.query.StringBasedSolrQueryTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = new SolrQueryMethod ( java.lang.reflect.Method , org.springframework.data.solr.repository.query.RepositoryMetadata , org.springframework.data.solr.repository.query.ProjectionFactory , org.springframework.data.solr.repository.query.SolrEntityInformationCreator ) ; StringBasedSolrQuery org.springframework.data.solr.repository.query.StringBasedSolrQuery = new StringBasedSolrQuery ( org.springframework.data.solr.repository.query.SolrQueryMethod , org.springframework.data.solr.repository.query.SolrOperations ) ; org . springframework . data . solr . org.springframework.data.solr.core . org.springframework.data.solr.core . org.springframework.data.solr.core org.springframework.data.solr.core.query.Query = org.springframework.data.solr.repository.query.StringBasedSolrQuery . createQuery ( new SolrParametersParameterAccessor ( org.springframework.data.solr.repository.query.SolrQueryMethod , new java.lang.Object [] { STRING } ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.QueryParser . getQueryString ( org.springframework.data.solr.core.query.Query ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.Query . getProjectionOnFields ( ) . size ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.query.Query . getProjectionOnFields ( ) . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.solr.repository.query.StringBasedSolrQueryTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = new SolrQueryMethod ( java.lang.reflect.Method , org.springframework.data.solr.repository.query.RepositoryMetadata , org.springframework.data.solr.repository.query.ProjectionFactory , org.springframework.data.solr.repository.query.SolrEntityInformationCreator ) ; StringBasedSolrQuery org.springframework.data.solr.repository.query.StringBasedSolrQuery = new StringBasedSolrQuery ( org.springframework.data.solr.repository.query.SolrQueryMethod , org.springframework.data.solr.repository.query.SolrOperations ) ; org . springframework . data . solr . org.springframework.data.solr.core . org.springframework.data.solr.core . org.springframework.data.solr.core org.springframework.data.solr.core.query.Query = org.springframework.data.solr.repository.query.StringBasedSolrQuery . createQuery ( new SolrParametersParameterAccessor ( org.springframework.data.solr.repository.query.SolrQueryMethod , new java.lang.Object [] { STRING } ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.QueryParser . getQueryString ( org.springframework.data.solr.core.query.Query ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.Query . getProjectionOnFields ( ) . size ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.query.Query . getProjectionOnFields ( ) . get ( NUMBER ) . getName ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.query.Query . getProjectionOnFields ( ) . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.solr.repository.query.StringBasedSolrQueryTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Sort .class ) ; SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = new SolrQueryMethod ( java.lang.reflect.Method , org.springframework.data.solr.repository.query.RepositoryMetadata , org.springframework.data.solr.repository.query.ProjectionFactory , org.springframework.data.solr.repository.query.SolrEntityInformationCreator ) ; StringBasedSolrQuery org.springframework.data.solr.repository.query.StringBasedSolrQuery = new StringBasedSolrQuery ( org.springframework.data.solr.repository.query.SolrQueryMethod , org.springframework.data.solr.repository.query.SolrOperations ) ; Sort org.springframework.data.solr.repository.query.Sort = new Sort ( Direction . DESC , STRING , STRING ) ; org . springframework . data . solr . org.springframework.data.solr.core . org.springframework.data.solr.core . org.springframework.data.solr.core org.springframework.data.solr.core.query.Query = org.springframework.data.solr.repository.query.StringBasedSolrQuery . createQuery ( new SolrParametersParameterAccessor ( org.springframework.data.solr.repository.query.SolrQueryMethod , new java.lang.Object [] { STRING , org.springframework.data.solr.repository.query.Sort } ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.QueryParser . getQueryString ( org.springframework.data.solr.core.query.Query ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.query.Sort , org.springframework.data.solr.core.query.Query . getSort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.solr.repository.query.StringBasedSolrQueryTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = new SolrQueryMethod ( java.lang.reflect.Method , org.springframework.data.solr.repository.query.RepositoryMetadata , org.springframework.data.solr.repository.query.ProjectionFactory , org.springframework.data.solr.repository.query.SolrEntityInformationCreator ) ; StringBasedSolrQuery org.springframework.data.solr.repository.query.StringBasedSolrQuery = new StringBasedSolrQuery ( org.springframework.data.solr.repository.query.SolrQueryMethod , org.springframework.data.solr.repository.query.SolrOperations ) ; Sort org.springframework.data.solr.repository.query.Sort = new Sort ( Direction . DESC , STRING , STRING ) ; org . springframework . data . solr . org.springframework.data.solr.core . org.springframework.data.solr.core . org.springframework.data.solr.core org.springframework.data.solr.core.query.Query = org.springframework.data.solr.repository.query.StringBasedSolrQuery . createQuery ( new SolrParametersParameterAccessor ( org.springframework.data.solr.repository.query.SolrQueryMethod , new java.lang.Object [] { STRING , new PageRequest ( NUMBER , NUMBER , org.springframework.data.solr.repository.query.Sort ) } ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.QueryParser . getQueryString ( org.springframework.data.solr.core.query.Query ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.query.Sort , org.springframework.data.solr.core.query.Query . getSort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.solr.repository.query.ProductBean org.springframework.data.solr.repository.query.ProductBean ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.solr.repository.query.ProductBean org.springframework.data.solr.repository.query.ProductBean ( java.lang.Integer java.lang.Integer , java.lang.Float java.lang.Float );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.solr.repository.query.ProductBean org.springframework.data.solr.repository.query.ProductBean ( Point org.springframework.data.solr.repository.query.Point , Distance org.springframework.data.solr.repository.query.Distance );  <METHOD_END>
<METHOD_START> @ Query ( value = STRING , fields = STRING ) org.springframework.data.solr.repository.query.ProductBean org.springframework.data.solr.repository.query.ProductBean ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( value = STRING , fields = { STRING , STRING } ) org.springframework.data.solr.repository.query.ProductBean org.springframework.data.solr.repository.query.ProductBean ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( value = STRING ) org.springframework.data.solr.repository.query.ProductBean org.springframework.data.solr.repository.query.ProductBean ( java.lang.String java.lang.String , Sort org.springframework.data.solr.repository.query.Sort );  <METHOD_END>
<METHOD_START> @ Query ( value = STRING ) org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String , Pageable org.springframework.data.solr.repository.query.Pageable );  <METHOD_END>
