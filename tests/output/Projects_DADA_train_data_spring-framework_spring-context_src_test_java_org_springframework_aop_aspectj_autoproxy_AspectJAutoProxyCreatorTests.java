<METHOD_START> private static void void ( final StopWatch org.springframework.aop.aspectj.autoproxy.StopWatch , final long long ) { final long long = org.springframework.aop.aspectj.autoproxy.StopWatch . getTotalTimeMillis ( ) ; assertTrue ( STRING + org.springframework.aop.aspectj.autoproxy.StopWatch . getLastTaskName ( ) + STRING + long + STRING + long + STRING , long < long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ( STRING ) ; ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; MethodInvokingFactoryBean org.springframework.aop.aspectj.autoproxy.MethodInvokingFactoryBean = ( MethodInvokingFactoryBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.autoproxy.MethodInvokingFactoryBean . getTargetObject ( ) ) ) ; assertEquals ( NUMBER , ( ( ITestBean ) org.springframework.aop.aspectj.autoproxy.MethodInvokingFactoryBean . getTargetObject ( ) ) . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ( STRING ) ; ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.autoproxy.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ( STRING ) ; ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ( STRING ) ; ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; void ( org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext , org.springframework.aop.aspectj.autoproxy.ITestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assume . group ( TestGroup . PERFORMANCE ) ; Assume . notLogging ( org.springframework.aop.aspectj.autoproxy.Log ) ; ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ( STRING ) ; StopWatch org.springframework.aop.aspectj.autoproxy.StopWatch = new StopWatch ( ) ; org.springframework.aop.aspectj.autoproxy.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; if ( int < NUMBER ) { void ( org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext , org.springframework.aop.aspectj.autoproxy.ITestBean ) ; } } org.springframework.aop.aspectj.autoproxy.StopWatch . stop ( ) ; void ( org.springframework.aop.aspectj.autoproxy.StopWatch , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assume . group ( TestGroup . PERFORMANCE ) ; Assume . notLogging ( org.springframework.aop.aspectj.autoproxy.Log ) ; ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ( STRING ) ; StopWatch org.springframework.aop.aspectj.autoproxy.StopWatch = new StopWatch ( ) ; org.springframework.aop.aspectj.autoproxy.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { INestedTestBean org.springframework.aop.aspectj.autoproxy.INestedTestBean = ( INestedTestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; if ( int < NUMBER ) { assertFalse ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.autoproxy.INestedTestBean ) ) ; } } org.springframework.aop.aspectj.autoproxy.StopWatch . stop ( ) ; void ( org.springframework.aop.aspectj.autoproxy.StopWatch , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assume . group ( TestGroup . PERFORMANCE ) ; Assume . notLogging ( org.springframework.aop.aspectj.autoproxy.Log ) ; GenericApplicationContext org.springframework.aop.aspectj.autoproxy.GenericApplicationContext = new GenericApplicationContext ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.aspectj.autoproxy.GenericApplicationContext ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String ( STRING ) , java.lang.Class<? extends org.springframework.aop.aspectj.autoproxy.AspectJAutoProxyCreatorTests> ( ) ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.aop.aspectj.autoproxy.GenericApplicationContext . registerBeanDefinition ( STRING + int , new RootBeanDefinition ( NestedTestBean .class ) ) ; } StopWatch org.springframework.aop.aspectj.autoproxy.StopWatch = new StopWatch ( ) ; org.springframework.aop.aspectj.autoproxy.StopWatch . start ( STRING ) ; org.springframework.aop.aspectj.autoproxy.GenericApplicationContext . refresh ( ) ; org.springframework.aop.aspectj.autoproxy.StopWatch . stop ( ) ; void ( org.springframework.aop.aspectj.autoproxy.StopWatch , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ( STRING ) ; GenericApplicationContext org.springframework.aop.aspectj.autoproxy.GenericApplicationContext = new GenericApplicationContext ( org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ) ; RootBeanDefinition org.springframework.aop.aspectj.autoproxy.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.aop.aspectj.autoproxy.RootBeanDefinition . getPropertyValues ( ) . addPropertyValue ( new PropertyValue ( STRING , STRING ) ) . addPropertyValue ( new PropertyValue ( STRING , new java.lang.Integer ( NUMBER ) ) ) ; org.springframework.aop.aspectj.autoproxy.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.aop.aspectj.autoproxy.RootBeanDefinition ) ; org.springframework.aop.aspectj.autoproxy.GenericApplicationContext . registerBeanDefinition ( AnnotationAwareAspectJAutoProxyCreator .class . java.lang.String ( ) , new RootBeanDefinition ( AnnotationAwareAspectJAutoProxyCreator .class ) ) ; org.springframework.aop.aspectj.autoproxy.GenericApplicationContext . refresh ( ) ; ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.GenericApplicationContext . getBean ( STRING ) ; void ( org.springframework.aop.aspectj.autoproxy.GenericApplicationContext , org.springframework.aop.aspectj.autoproxy.ITestBean ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ApplicationContext org.springframework.aop.aspectj.autoproxy.ApplicationContext , ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean ) { org.springframework.aop.aspectj.autoproxy.TestBeanAdvisor org.springframework.aop.aspectj.autoproxy.TestBeanAdvisor = ( org.springframework.aop.aspectj.autoproxy.TestBeanAdvisor ) org.springframework.aop.aspectj.autoproxy.ApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.autoproxy.MultiplyReturnValue org.springframework.aop.aspectj.autoproxy.MultiplyReturnValue = ( org.springframework.aop.aspectj.autoproxy.MultiplyReturnValue ) org.springframework.aop.aspectj.autoproxy.ApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.MultiplyReturnValue . int ( ) ) ; org.springframework.aop.aspectj.autoproxy.TestBeanAdvisor . int = NUMBER ; org.springframework.aop.aspectj.autoproxy.MultiplyReturnValue . int = NUMBER ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.aop.aspectj.autoproxy.ITestBean ) ) ; assertEquals ( STRING , org.springframework.aop.aspectj.autoproxy.ITestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.MultiplyReturnValue . int ) ; assertEquals ( NUMBER * org.springframework.aop.aspectj.autoproxy.MultiplyReturnValue . int ( ) , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.autoproxy.TestBeanAdvisor . int ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.autoproxy.MultiplyReturnValue . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ( STRING ) ; ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.autoproxy.ITestBean ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertNotSame ( org.springframework.aop.aspectj.autoproxy.ITestBean , org.springframework.aop.aspectj.autoproxy.ITestBean ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.autoproxy.ITestBean ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ( STRING ) ; ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.autoproxy.ITestBean ) ) ; int int = NUMBER ; org.springframework.aop.aspectj.autoproxy.ITestBean . setAge ( int ) ; assertEquals ( STRING , int , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; AspectMetadata org.springframework.aop.aspectj.autoproxy.AspectMetadata = new AspectMetadata ( org.springframework.aop.aspectj.autoproxy.PerTargetAspect .class , STRING ) ; assertTrue ( org.springframework.aop.aspectj.autoproxy.AspectMetadata . getPerClausePointcut ( ) . getMethodMatcher ( ) . matches ( TestBean .class . java.lang.reflect.Method ( STRING ) , null ) ) ; org.springframework.aop.aspectj.autoproxy.ITestBean . getSpouse ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; org.springframework.aop.aspectj.autoproxy.ITestBean . setAge ( NUMBER ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; org.springframework.aop.aspectj.autoproxy.ITestBean . setName ( STRING ) ; ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertNotSame ( org.springframework.aop.aspectj.autoproxy.ITestBean , org.springframework.aop.aspectj.autoproxy.ITestBean ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.autoproxy.ITestBean ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; org.springframework.aop.aspectj.autoproxy.ITestBean . getSpouse ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ( java.lang.String ) ; boolean boolean = org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . isSingleton ( STRING ) ; ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; void ( org.springframework.aop.aspectj.autoproxy.ITestBean , NUMBER ) ; ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertNotSame ( org.springframework.aop.aspectj.autoproxy.ITestBean , org.springframework.aop.aspectj.autoproxy.ITestBean ) ; void ( org.springframework.aop.aspectj.autoproxy.ITestBean , boolean ? NUMBER : NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ( STRING ) ; ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ; org.springframework.aop.aspectj.autoproxy.AdviceUsingThisJoinPoint org.springframework.aop.aspectj.autoproxy.AdviceUsingThisJoinPoint = ( org.springframework.aop.aspectj.autoproxy.AdviceUsingThisJoinPoint ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.aop.aspectj.autoproxy.AdviceUsingThisJoinPoint . java.lang.String ( ) . int ( STRING ) != NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ( STRING ) ; ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.autoproxy.ITestBean ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean , int int ) { assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.autoproxy.ITestBean ) ) ; org.springframework.aop.aspectj.autoproxy.ITestBean . setName ( STRING ) ; assertEquals ( int ++ , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; int int = NUMBER ; org.springframework.aop.aspectj.autoproxy.ITestBean . setAge ( int ) ; assertEquals ( int ++ , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; org.springframework.aop.aspectj.autoproxy.ITestBean . setAge ( NUMBER ) ; assertEquals ( int ++ , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ( STRING ) ; ProxyConfig org.springframework.aop.aspectj.autoproxy.ProxyConfig = ( ProxyConfig ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( AopConfigUtils . AUTO_PROXY_CREATOR_BEAN_NAME ) ; assertTrue ( STRING , org.springframework.aop.aspectj.autoproxy.ProxyConfig . isProxyTargetClass ( ) ) ; assertTrue ( STRING , org.springframework.aop.aspectj.autoproxy.ProxyConfig . isExposeProxy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ( STRING ) ; ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.autoproxy.ITestBean ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ( STRING ) ; org.springframework.aop.aspectj.autoproxy.UnreliableBean org.springframework.aop.aspectj.autoproxy.UnreliableBean = ( org.springframework.aop.aspectj.autoproxy.UnreliableBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.autoproxy.RetryAspect org.springframework.aop.aspectj.autoproxy.RetryAspect = ( org.springframework.aop.aspectj.autoproxy.RetryAspect ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; int int = org.springframework.aop.aspectj.autoproxy.UnreliableBean . int ( ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.RetryAspect . int ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.RetryAspect . int ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.RetryAspect . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext ( java.lang.String java.lang.String ) { return new ClassPathXmlApplicationContext ( java.lang.String ( java.lang.String ) , java.lang.Class<? extends org.springframework.aop.aspectj.autoproxy.AspectJAutoProxyCreatorTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ( STRING , java.lang.Class<? extends org.springframework.aop.aspectj.autoproxy.AspectJAutoProxyCreatorTests> ( ) . java.lang.String ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public int int ( ) { return int ++ ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { ++ int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Pointcut ( STRING ) public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( JoinPoint org.springframework.aop.aspectj.autoproxy.JoinPoint ) { this . java.lang.String = org.springframework.aop.aspectj.autoproxy.JoinPoint . toString ( ) ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.aop.aspectj.autoproxy.ProceedingJoinPoint ) throws java.lang.Throwable { return org.springframework.aop.aspectj.autoproxy.ProceedingJoinPoint . proceed ( ) ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.aop.aspectj.autoproxy.ProceedingJoinPoint , int int ) throws java.lang.Throwable { return org.springframework.aop.aspectj.autoproxy.ProceedingJoinPoint . proceed ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.aop.aspectj.autoproxy.ProceedingJoinPoint ) throws java.lang.Throwable { int int = ( java.lang.Integer ) org.springframework.aop.aspectj.autoproxy.ProceedingJoinPoint . proceed ( ) ; return int + NUMBER ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.aop.aspectj.autoproxy.ProceedingJoinPoint ) throws java.lang.Throwable { ++ this . int ; int int = ( java.lang.Integer ) org.springframework.aop.aspectj.autoproxy.ProceedingJoinPoint . proceed ( ) ; return int * this . int ; }  <METHOD_END>
<METHOD_START> @ Pointcut ( STRING ) public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.aop.aspectj.autoproxy.ProceedingJoinPoint ) throws java.lang.Throwable { boolean boolean = true ; java.lang.Object java.lang.Object = null ; while ( boolean ) { try { boolean = false ; this . int ++ ; try { java.lang.Object = org.springframework.aop.aspectj.autoproxy.ProceedingJoinPoint . proceed ( ) ; this . int ++ ; } catch ( org.springframework.aop.aspectj.autoproxy.RetryableException org.springframework.aop.aspectj.autoproxy.RetryableException ) { this . int ++ ; throw org.springframework.aop.aspectj.autoproxy.RetryableException ; } } catch ( org.springframework.aop.aspectj.autoproxy.RetryableException org.springframework.aop.aspectj.autoproxy.RetryableException ) { boolean = true ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { super( java.lang.String , java.lang.Throwable ); }  <METHOD_END>
<METHOD_START> public int int ( ) { this . int ++ ; if ( this . int % NUMBER != NUMBER ) { throw new org.springframework.aop.aspectj.autoproxy.RetryableException ( STRING ) ; } return this . int ; }  <METHOD_END>
<METHOD_START> public void ( ) { setAdvice ( new MethodBeforeAdvice ( ) { @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { ++ int ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { ++ int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return ITestBean .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
