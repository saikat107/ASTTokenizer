<METHOD_START> void ( int int , char char ) { super( int , char ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( int int , MatchingContext org.springframework.web.util.patterns.MatchingContext ) { boolean boolean = false ; if ( int < matchingContext . candidateLength ) { if ( matchingContext . candidate [ int ] == separator ) { while ( ( int + NUMBER ) < matchingContext . candidateLength && matchingContext . candidate [ int + NUMBER ] == separator ) { int ++ ; } if ( next == null ) { if ( matchingContext . determineRemaining ) { matchingContext . remainingPathIndex = int + NUMBER ; boolean = true ; } else { boolean = ( ( int + NUMBER ) == matchingContext . candidateLength ) ; } } else { int ++ ; if ( matchingContext . isMatchStartMatching && int == matchingContext . candidateLength ) { return true ; } boolean = next . matches ( int , org.springframework.web.util.patterns.MatchingContext ) ; } } } return boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING + separator + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
