<METHOD_START> @ java.lang.Override public void void ( MessageHeaders org.springframework.integration.mail.support.MessageHeaders , MimeMessage org.springframework.integration.mail.support.MimeMessage ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( MimeMessage org.springframework.integration.mail.support.MimeMessage ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = MailUtils . extractStandardHeaders ( org.springframework.integration.mail.support.MimeMessage ) ; try { java.util.Enumeration<?> < ? > java.util.Enumeration<?> = org.springframework.integration.mail.support.MimeMessage . getAllHeaders ( ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.integration.mail.support.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap < java.lang.String , java.lang.String > ( ) ; while ( java.util.Enumeration<> . boolean ( ) ) { java.lang.Object java.lang.Object = java.util.Enumeration<> . nextElement ( ) ; if ( java.lang.Object instanceof Header ) { Header org.springframework.integration.mail.support.Header = ( Header ) java.lang.Object ; org.springframework.integration.mail.support.MultiValueMap<java.lang.String,java.lang.String> . add ( org.springframework.integration.mail.support.Header . getName ( ) , org.springframework.integration.mail.support.Header . getValue ( ) ) ; } } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . RAW_HEADERS , org.springframework.integration.mail.support.MultiValueMap<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . FLAGS , org.springframework.integration.mail.support.MimeMessage . getFlags ( ) ) ; int int = org.springframework.integration.mail.support.MimeMessage . getLineCount ( ) ; if ( int > NUMBER ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . LINE_COUNT , int ) ; } java.util.Date java.util.Date = org.springframework.integration.mail.support.MimeMessage . getReceivedDate ( ) ; if ( java.util.Date != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . RECEIVED_DATE , java.util.Date ) ; } int int = org.springframework.integration.mail.support.MimeMessage . getSize ( ) ; if ( int > NUMBER ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . SIZE , int ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . EXPUNGED , org.springframework.integration.mail.support.MimeMessage . isExpunged ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . CONTENT_TYPE , org.springframework.integration.mail.support.MimeMessage . getContentType ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessagingException ( STRING , java.lang.Exception ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
