<METHOD_START> public void ( ) { this( new Jackson2JsonObjectMapper ( ) ); }  <METHOD_END>
<METHOD_START> public void ( Jackson2JsonObjectMapper org.springframework.integration.support.json.Jackson2JsonObjectMapper ) { super( org.springframework.integration.support.json.Jackson2JsonObjectMapper ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.support.json.JsonParser org.springframework.integration.support.json.JsonParser ( java.lang.String java.lang.String ) throws java.lang.Exception { return new JsonFactory ( ) . createParser ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.support.json.Message<?> < ? > org.springframework.integration.support.json.Message<?> ( JsonParser org.springframework.integration.support.json.JsonParser , java.lang.String java.lang.String ) throws java.lang.Exception { java.lang.String java.lang.String = AbstractJsonInboundMessageMapper . MESSAGE_FORMAT_ERROR + java.lang.String ; Assert . isTrue ( JsonToken . START_OBJECT == org.springframework.integration.support.json.JsonParser . nextToken ( ) , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = null ; java.lang.Object java.lang.Object = null ; while ( JsonToken . END_OBJECT != org.springframework.integration.support.json.JsonParser . nextToken ( ) ) { Assert . isTrue ( JsonToken . FIELD_NAME == org.springframework.integration.support.json.JsonParser . getCurrentToken ( ) , java.lang.String ) ; boolean boolean = STRING . boolean ( org.springframework.integration.support.json.JsonParser . getCurrentName ( ) ) ; boolean boolean = STRING . boolean ( org.springframework.integration.support.json.JsonParser . getCurrentName ( ) ) ; Assert . isTrue ( boolean || boolean , java.lang.String ) ; if ( boolean ) { Assert . isTrue ( org.springframework.integration.support.json.JsonParser . nextToken ( ) == JsonToken . START_OBJECT , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.integration.support.json.JsonParser , java.lang.String ) ; } else if ( boolean ) { org.springframework.integration.support.json.JsonParser . nextToken ( ) ; java.lang.Object = this . readPayload ( org.springframework.integration.support.json.JsonParser , java.lang.String ) ; } } Assert . notNull ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.String ) ; return this . getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( JsonParser org.springframework.integration.support.json.JsonParser , java.lang.String java.lang.String ) throws java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; while ( JsonToken . END_OBJECT != org.springframework.integration.support.json.JsonParser . nextToken ( ) ) { java.lang.String java.lang.String = org.springframework.integration.support.json.JsonParser . getCurrentName ( ) ; org.springframework.integration.support.json.JsonParser . nextToken ( ) ; java.lang.Object java.lang.Object = this . readHeader ( org.springframework.integration.support.json.JsonParser , java.lang.String , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
