<METHOD_START> @ Test public void void ( ) { java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { org.springframework.integration.expression.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } } ) ; java.lang.Thread . void ( new java.lang.ClassLoader ( ) { @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { throw new java.lang.ClassNotFoundException ( STRING ) ; } } ) ; java.lang.Thread . void ( ) ; Message < ? > org.springframework.integration.expression.Message<?> = org.springframework.integration.expression.PollableChannel . receive ( NUMBER ) ; assertThat ( org.springframework.integration.expression.Message<> . getPayload ( ) , instanceOf ( org.springframework.integration.expression.ForeignClassloaderTests.Foo .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { throw new java.lang.ClassNotFoundException ( STRING ) ; }  <METHOD_END>
