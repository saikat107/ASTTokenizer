<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { Assume . group ( TestGroup . JMXMP ) ; }  <METHOD_END>
<METHOD_START> @ After @ java.lang.Override public void void ( ) java.lang.Exception { Assume . group ( TestGroup . JMXMP , ( ) super. tearDown ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConnectorServerFactoryBean org.springframework.jmx.support.ConnectorServerFactoryBean = new ConnectorServerFactoryBean ( ) ; org.springframework.jmx.support.ConnectorServerFactoryBean . afterPropertiesSet ( ) ; try { void ( getServer ( ) ) ; } finally { org.springframework.jmx.support.ConnectorServerFactoryBean . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Thread . void ( NUMBER ) ; ConnectorServerFactoryBean org.springframework.jmx.support.ConnectorServerFactoryBean = new ConnectorServerFactoryBean ( ) ; org.springframework.jmx.support.ConnectorServerFactoryBean . setServer ( getServer ( ) ) ; org.springframework.jmx.support.ConnectorServerFactoryBean . afterPropertiesSet ( ) ; try { void ( getServer ( ) ) ; } finally { org.springframework.jmx.support.ConnectorServerFactoryBean . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Thread . void ( NUMBER ) ; ConnectorServerFactoryBean org.springframework.jmx.support.ConnectorServerFactoryBean = new ConnectorServerFactoryBean ( ) ; org.springframework.jmx.support.ConnectorServerFactoryBean . setObjectName ( java.lang.String ) ; org.springframework.jmx.support.ConnectorServerFactoryBean . afterPropertiesSet ( ) ; try { javax.management.ObjectInstance javax.management.ObjectInstance = getServer ( ) . getObjectInstance ( javax.management.ObjectName . javax.management.ObjectName ( java.lang.String ) ) ; assertNotNull ( STRING , javax.management.ObjectInstance ) ; } finally { org.springframework.jmx.support.ConnectorServerFactoryBean . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConnectorServerFactoryBean org.springframework.jmx.support.ConnectorServerFactoryBean = new ConnectorServerFactoryBean ( ) ; org.springframework.jmx.support.ConnectorServerFactoryBean . afterPropertiesSet ( ) ; try { getServer ( ) . getObjectInstance ( javax.management.ObjectName . javax.management.ObjectName ( java.lang.String ) ) ; fail ( STRING ) ; } catch ( javax.management.InstanceNotFoundException javax.management.InstanceNotFoundException ) { } finally { org.springframework.jmx.support.ConnectorServerFactoryBean . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.management.MBeanServer javax.management.MBeanServer ) throws java.io.IOException , java.net.MalformedURLException { javax.management.remote.JMXServiceURL javax.management.remote.JMXServiceURL = new javax.management.remote.JMXServiceURL ( ConnectorServerFactoryBean . DEFAULT_SERVICE_URL ) ; javax.management.remote.JMXConnector javax.management.remote.JMXConnector = javax.management.remote.JMXConnectorFactory . javax.management.remote.JMXConnector ( javax.management.remote.JMXServiceURL ) ; assertNotNull ( STRING , javax.management.remote.JMXConnector ) ; javax.management.MBeanServerConnection javax.management.MBeanServerConnection = javax.management.remote.JMXConnector . javax.management.MBeanServerConnection ( ) ; assertNotNull ( STRING , javax.management.MBeanServerConnection ) ; assertEquals ( STRING , javax.management.MBeanServer . java.lang.Integer ( ) , javax.management.MBeanServerConnection . java.lang.Integer ( ) ) ; }  <METHOD_END>
