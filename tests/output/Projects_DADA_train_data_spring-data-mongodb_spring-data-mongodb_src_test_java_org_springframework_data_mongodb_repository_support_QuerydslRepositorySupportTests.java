<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.repository.support.MongoOperations . remove ( new Query ( ) , Person .class ) ; org.springframework.data.mongodb.repository.support.Person = new Person ( STRING , STRING ) ; org.springframework.data.mongodb.repository.support.MongoOperations . save ( org.springframework.data.mongodb.repository.support.Person ) ; org.springframework.data.mongodb.repository.support.QuerydslRepositorySupport = new QuerydslRepositorySupport ( org.springframework.data.mongodb.repository.support.MongoOperations ) {} ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QPerson org.springframework.data.mongodb.repository.support.QPerson = QPerson . person ; QuerydslRepositorySupport org.springframework.data.mongodb.repository.support.QuerydslRepositorySupport = new QuerydslRepositorySupport ( org.springframework.data.mongodb.repository.support.MongoOperations ) {} ; SpringDataMongodbQuery < Person > org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.QuerydslRepositorySupport . from ( org.springframework.data.mongodb.repository.support.QPerson ) . where ( p . lastname . eq ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<org.springframework.data.mongodb.repository.support.Person> . fetchOne ( ) , is ( org.springframework.data.mongodb.repository.support.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.support.Person . setSkills ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; org.springframework.data.mongodb.repository.support.MongoOperations . save ( org.springframework.data.mongodb.repository.support.Person ) ; QPerson org.springframework.data.mongodb.repository.support.QPerson = QPerson . person ; SpringDataMongodbQuery < Person > org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.QuerydslRepositorySupport . from ( org.springframework.data.mongodb.repository.support.QPerson ) . where ( p . skills . any ( ) . in ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<org.springframework.data.mongodb.repository.support.Person> . fetchOne ( ) , is ( org.springframework.data.mongodb.repository.support.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.mongodb.repository.support.User = new User ( ) ; org.springframework.data.mongodb.repository.support.User . setUsername ( STRING ) ; org.springframework.data.mongodb.repository.support.MongoOperations . save ( org.springframework.data.mongodb.repository.support.User ) ; org.springframework.data.mongodb.repository.support.Person . setCoworker ( org.springframework.data.mongodb.repository.support.User ) ; org.springframework.data.mongodb.repository.support.MongoOperations . save ( org.springframework.data.mongodb.repository.support.Person ) ; QPerson org.springframework.data.mongodb.repository.support.QPerson = QPerson . person ; SpringDataMongodbQuery < Person > org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.QuerydslRepositorySupport . from ( org.springframework.data.mongodb.repository.support.QPerson ) . where ( p . coworker . id . eq ( org.springframework.data.mongodb.repository.support.User . getId ( ) ) ) ; SpringDataMongodbQuery < Person > org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.QuerydslRepositorySupport . from ( org.springframework.data.mongodb.repository.support.QPerson ) . where ( p . coworker . eq ( org.springframework.data.mongodb.repository.support.User ) ) ; assertThat ( org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<org.springframework.data.mongodb.repository.support.Person> . fetchOne ( ) , equalTo ( org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<org.springframework.data.mongodb.repository.support.Person> . fetchOne ( ) , equalTo ( org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<org.springframework.data.mongodb.repository.support.Person> . fetchOne ( ) ) ) ; }  <METHOD_END>
