<METHOD_START> public void ( java.util.List<org.springframework.statemachine.state.ChoicePseudoState.ChoiceStateData<S,E>> < org.springframework.statemachine.state.ChoicePseudoState.ChoiceStateData<S,E> < S , E > > java.util.List<org.springframework.statemachine.state.ChoicePseudoState.ChoiceStateData<S,E>> ) { this . java.util.List<org.springframework.statemachine.state.ChoicePseudoState.ChoiceStateData<S,E>> = java.util.List<org.springframework.statemachine.state.ChoicePseudoState.ChoiceStateData<S,E>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.state.PseudoStateKind org.springframework.statemachine.state.PseudoStateKind ( ) { return PseudoStateKind . CHOICE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.state.State<S,E> < S , E > org.springframework.statemachine.state.State<S,E> ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { State < S , E > org.springframework.statemachine.state.State<S,E> = null ; for ( org.springframework.statemachine.state.ChoicePseudoState.ChoiceStateData<S,E> < S , E > org.springframework.statemachine.state.ChoicePseudoState.ChoiceStateData<S,E> : java.util.List<org.springframework.statemachine.state.ChoicePseudoState.ChoiceStateData<S,E>> ) { org.springframework.statemachine.state.State<S,E> = org.springframework.statemachine.state.ChoicePseudoState.ChoiceStateData<S,E> . org.springframework.statemachine.state.State<S,E> ( ) ; if ( org.springframework.statemachine.state.ChoicePseudoState.ChoiceStateData<S,E> . org.springframework.statemachine.state.Guard<S,E> != null && boolean ( org.springframework.statemachine.state.ChoicePseudoState.ChoiceStateData<S,E> . org.springframework.statemachine.state.Guard<S,E> , org.springframework.statemachine.state.StateContext<S,E> ) ) { break; } } return org.springframework.statemachine.state.State<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PseudoStateListener < S , E > org.springframework.statemachine.state.PseudoStateListener<S,E> ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.statemachine.state.PseudoStateListener<S,E>> < PseudoStateListener < S , E > > java.util.List<org.springframework.statemachine.state.PseudoStateListener<S,E>> ) {	}  <METHOD_END>
<METHOD_START> private boolean boolean ( Guard < S , E > org.springframework.statemachine.state.Guard<S,E> , StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { try { return org.springframework.statemachine.state.Guard<S,E> . evaluate ( org.springframework.statemachine.state.StateContext<S,E> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.state.Log . warn ( STRING , java.lang.Throwable ) ; return false ; } }  <METHOD_END>
<METHOD_START> public void ( StateHolder < S , E > org.springframework.statemachine.state.StateHolder<S,E> , Guard < S , E > org.springframework.statemachine.state.Guard<S,E> ) { Assert . notNull ( org.springframework.statemachine.state.StateHolder<S,E> , STRING ) ; this . org.springframework.statemachine.state.StateHolder<S,E> = org.springframework.statemachine.state.StateHolder<S,E> ; this . org.springframework.statemachine.state.Guard<S,E> = org.springframework.statemachine.state.Guard<S,E> ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.state.StateHolder<S,E> < S , E > org.springframework.statemachine.state.StateHolder<S,E> ( ) { return org.springframework.statemachine.state.StateHolder<S,E> ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.state.State<S,E> < S , E > org.springframework.statemachine.state.State<S,E> ( ) { return org.springframework.statemachine.state.StateHolder<S,E> . getState ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.state.Guard<S,E> < S , E > org.springframework.statemachine.state.Guard<S,E> ( ) { return org.springframework.statemachine.state.Guard<S,E> ; }  <METHOD_END>
