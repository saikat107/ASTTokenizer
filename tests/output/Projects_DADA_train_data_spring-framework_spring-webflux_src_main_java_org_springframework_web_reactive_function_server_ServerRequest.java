<METHOD_START> org.springframework.web.reactive.function.server.HttpMethod org.springframework.web.reactive.function.server.HttpMethod ( )  <METHOD_END>
<METHOD_START> java.net.URI java.net.URI ( )  <METHOD_END>
<METHOD_START> default java.lang.String java.lang.String ( ) { return java.net.URI ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.ServerRequest.Headers org.springframework.web.reactive.function.server.ServerRequest.Headers ( )  <METHOD_END>
<METHOD_START> < T > T T ( BodyExtractor < T , ? super ServerHttpRequest > org.springframework.web.reactive.function.server.BodyExtractor<T,? super org.springframework.web.reactive.function.server.ServerHttpRequest> );  <METHOD_END>
<METHOD_START> < T > T T ( BodyExtractor < T , ? super ServerHttpRequest > org.springframework.web.reactive.function.server.BodyExtractor<T,? super org.springframework.web.reactive.function.server.ServerHttpRequest> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> );  <METHOD_END>
<METHOD_START> < T > org.springframework.web.reactive.function.server.Mono<T> < T > org.springframework.web.reactive.function.server.Mono<T> ( java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> );  <METHOD_END>
<METHOD_START> < T > org.springframework.web.reactive.function.server.Flux<T> < T > org.springframework.web.reactive.function.server.Flux<T> ( java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> );  <METHOD_END>
<METHOD_START> < T > java.util.Optional<T> < T > java.util.Optional<T> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( )  <METHOD_END>
<METHOD_START> default java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . java.util.List<java.lang.String> ( java.lang.String ) ; return ( ! java.util.List<java.lang.String> . boolean ( ) ? java.util.Optional . java.util.Optional<java.lang.String> ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) : java.util.Optional . java.util.Optional<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> default java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ( ) ; if ( java.util.Map<java.lang.String,java.lang.String> . boolean ( java.lang.String ) ) { return java.util.Map<java.lang.String,java.lang.String> ( ) . java.lang.String ( java.lang.String ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( )  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.WebSession> < WebSession > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.WebSession> ( )  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.web.reactive.function.server.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.function.server.MediaType> ( )  <METHOD_END>
<METHOD_START> java.util.List<java.nio.charset.Charset> < java.nio.charset.Charset > java.util.List<java.nio.charset.Charset> ( )  <METHOD_END>
<METHOD_START> java.util.List<java.util.Locale.LanguageRange> < java.util.Locale . java.util.Locale.LanguageRange > java.util.List<java.util.Locale.LanguageRange> ( )  <METHOD_END>
<METHOD_START> java.util.OptionalLong java.util.OptionalLong ( )  <METHOD_END>
<METHOD_START> java.util.Optional<org.springframework.web.reactive.function.server.MediaType> < MediaType > java.util.Optional<org.springframework.web.reactive.function.server.MediaType> ( )  <METHOD_END>
<METHOD_START> java.net.InetSocketAddress java.net.InetSocketAddress ( )  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.web.reactive.function.server.HttpRange> < HttpRange > java.util.List<org.springframework.web.reactive.function.server.HttpRange> ( )  <METHOD_END>
<METHOD_START> java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders ( )  <METHOD_END>
