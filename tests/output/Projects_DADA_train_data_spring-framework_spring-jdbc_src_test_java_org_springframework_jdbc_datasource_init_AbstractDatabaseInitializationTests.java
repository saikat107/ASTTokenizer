<METHOD_START> @ Before public void void ( ) { org.springframework.jdbc.datasource.init.EmbeddedDatabase = new EmbeddedDatabaseBuilder ( ) . setType ( org.springframework.jdbc.datasource.init.EmbeddedDatabaseType ( ) ) . build ( ) ; org.springframework.jdbc.datasource.init.JdbcTemplate = new JdbcTemplate ( org.springframework.jdbc.datasource.init.EmbeddedDatabase ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) { TransactionSynchronizationManager . clear ( ) ; TransactionSynchronizationManager . unbindResource ( org.springframework.jdbc.datasource.init.EmbeddedDatabase ) ; } org.springframework.jdbc.datasource.init.EmbeddedDatabase . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> abstract org.springframework.jdbc.datasource.init.EmbeddedDatabaseType org.springframework.jdbc.datasource.init.EmbeddedDatabaseType ( )  <METHOD_END>
<METHOD_START> org.springframework.jdbc.datasource.init.Resource org.springframework.jdbc.datasource.init.Resource ( java.lang.String java.lang.String ) { return org.springframework.jdbc.datasource.init.ClassRelativeResourceLoader . getResource ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> org.springframework.jdbc.datasource.init.Resource org.springframework.jdbc.datasource.init.Resource ( ) { return org.springframework.jdbc.datasource.init.Resource ( STRING ) ; }  <METHOD_END>
<METHOD_START> org.springframework.jdbc.datasource.init.Resource org.springframework.jdbc.datasource.init.Resource ( ) { return org.springframework.jdbc.datasource.init.Resource ( STRING ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { assertThat ( STRING + java.lang.String + STRING , org.springframework.jdbc.datasource.init.JdbcTemplate . queryForObject ( STRING , java.lang.Integer .class , java.lang.String ) , equalTo ( NUMBER ) ) ; } }  <METHOD_END>
