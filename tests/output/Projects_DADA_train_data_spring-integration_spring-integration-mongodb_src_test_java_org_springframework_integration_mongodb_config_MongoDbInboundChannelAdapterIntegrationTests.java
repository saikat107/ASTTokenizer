<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . org.springframework.integration.mongodb.config.MongoTemplate . save ( createPerson ( STRING ) , STRING ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . start ( ) ; @ java.lang.SuppressWarnings ( STRING ) Message < java.util.List<org.springframework.integration.mongodb.config.Person> < Person > > org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> = ( Message < java.util.List<org.springframework.integration.mongodb.config.Person> < Person > > ) org.springframework.integration.mongodb.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> . getPayload ( ) . get ( NUMBER ) . getName ( ) ) ; assertNotNull ( this . org.springframework.integration.mongodb.config.QueueChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . stop ( ) ; this . org.springframework.integration.mongodb.config.QueueChannel . purge ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . org.springframework.integration.mongodb.config.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . start ( ) ; @ java.lang.SuppressWarnings ( STRING ) Message < java.util.List<org.springframework.integration.mongodb.config.Document> < Document > > org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Document>> = ( Message < java.util.List<org.springframework.integration.mongodb.config.Document> < Document > > ) org.springframework.integration.mongodb.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Document>> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Document>> . getPayload ( ) . get ( NUMBER ) . get ( STRING ) ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . stop ( ) ; this . org.springframework.integration.mongodb.config.QueueChannel . purge ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . org.springframework.integration.mongodb.config.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . start ( ) ; @ java.lang.SuppressWarnings ( STRING ) Message < Person > org.springframework.integration.mongodb.config.Message<org.springframework.integration.mongodb.config.Person> = ( Message < Person > ) org.springframework.integration.mongodb.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.config.Message<org.springframework.integration.mongodb.config.Person> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.config.Message<org.springframework.integration.mongodb.config.Person> . getPayload ( ) . getName ( ) ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . stop ( ) ; this . org.springframework.integration.mongodb.config.QueueChannel . purge ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . org.springframework.integration.mongodb.config.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . start ( ) ; @ java.lang.SuppressWarnings ( STRING ) Message < java.util.List<org.springframework.integration.mongodb.config.Person> < Person > > org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> = ( Message < java.util.List<org.springframework.integration.mongodb.config.Person> < Person > > ) org.springframework.integration.mongodb.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> . getPayload ( ) . get ( NUMBER ) . getName ( ) ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . stop ( ) ; this . org.springframework.integration.mongodb.config.QueueChannel . purge ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . org.springframework.integration.mongodb.config.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; this . org.springframework.integration.mongodb.config.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . start ( ) ; @ java.lang.SuppressWarnings ( STRING ) Message < java.util.List<org.springframework.integration.mongodb.config.Person> < Person > > org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> = ( Message < java.util.List<org.springframework.integration.mongodb.config.Person> < Person > > ) org.springframework.integration.mongodb.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> . getPayload ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> . getPayload ( ) . get ( NUMBER ) . getName ( ) ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . org.springframework.integration.mongodb.config.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . start ( ) ; @ java.lang.SuppressWarnings ( STRING ) Message < java.util.List<org.springframework.integration.mongodb.config.Person> < Person > > org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> = ( Message < java.util.List<org.springframework.integration.mongodb.config.Person> < Person > > ) org.springframework.integration.mongodb.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> . getPayload ( ) . get ( NUMBER ) . getName ( ) ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . org.springframework.integration.mongodb.config.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . start ( ) ; @ java.lang.SuppressWarnings ( STRING ) Message < java.util.List<org.springframework.integration.mongodb.config.Person> < Person > > org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> = ( Message < java.util.List<org.springframework.integration.mongodb.config.Person> < Person > > ) org.springframework.integration.mongodb.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> . getPayload ( ) . get ( NUMBER ) . getName ( ) ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . stop ( ) ; this . org.springframework.integration.mongodb.config.QueueChannel . purge ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . org.springframework.integration.mongodb.config.MongoTemplate . save ( createPerson ( STRING ) , STRING ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . start ( ) ; assertNotNull ( org.springframework.integration.mongodb.config.QueueChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.mongodb.config.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( this . org.springframework.integration.mongodb.config.QueueChannel . receive ( NUMBER ) ) ; assertNull ( this . org.springframework.integration.mongodb.config.MongoTemplate . findOne ( new Query ( Criteria . where ( STRING ) . is ( STRING ) ) , Person .class , STRING ) ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . stop ( ) ; this . org.springframework.integration.mongodb.config.QueueChannel . purge ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . org.springframework.integration.mongodb.config.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . start ( ) ; @ java.lang.SuppressWarnings ( STRING ) Message < java.util.List<org.springframework.integration.mongodb.config.Person> < Person > > org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> = ( Message < java.util.List<org.springframework.integration.mongodb.config.Person> < Person > > ) org.springframework.integration.mongodb.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.config.Message<java.util.List<org.springframework.integration.mongodb.config.Person>> . getPayload ( ) . get ( NUMBER ) . getName ( ) ) ; assertNotNull ( org.springframework.integration.mongodb.config.QueueChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.mongodb.config.SourcePollingChannelAdapter . stop ( ) ; this . org.springframework.integration.mongodb.config.QueueChannel . purge ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionParsingException .class ) @ MongoDbAvailable public void void ( ) java.lang.Exception { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mongodb.config.MongoDbInboundChannelAdapterIntegrationTests> ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionParsingException .class ) @ MongoDbAvailable public void void ( ) java.lang.Exception { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mongodb.config.MongoDbInboundChannelAdapterIntegrationTests> ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionParsingException .class ) @ MongoDbAvailable public void void ( ) java.lang.Exception { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mongodb.config.MongoDbInboundChannelAdapterIntegrationTests> ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionParsingException .class ) @ MongoDbAvailable public void void ( ) java.lang.Exception { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mongodb.config.MongoDbInboundChannelAdapterIntegrationTests> ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( MongoOperations org.springframework.integration.mongodb.config.MongoOperations , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { if ( java.lang.Object instanceof java.util.List<?> < ? > ) { java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; for ( java.lang.Object java.lang.Object : java.util.List<> ) { org.springframework.integration.mongodb.config.MongoOperations . remove ( new BasicQuery ( JSON . serialize ( java.lang.Object ) ) , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageSource < ? > org.springframework.integration.mongodb.config.MessageSource<?> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.config.Message<?> < ? > org.springframework.integration.mongodb.config.Message<?> ( Message < ? > org.springframework.integration.mongodb.config.Message<?> , MessageSource < ? > org.springframework.integration.mongodb.config.MessageSource<?> ) { return org.springframework.integration.mongodb.config.Message<> ; }  <METHOD_END>
