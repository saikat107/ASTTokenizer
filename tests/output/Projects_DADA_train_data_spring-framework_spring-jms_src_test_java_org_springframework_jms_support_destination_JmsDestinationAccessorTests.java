<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConnectionFactory org.springframework.jms.support.destination.ConnectionFactory = mock ( ConnectionFactory .class ) ; try { JmsDestinationAccessor org.springframework.jms.support.destination.JmsDestinationAccessor = new org.springframework.jms.support.destination.JmsDestinationAccessorTests.StubJmsDestinationAccessor ( ) ; org.springframework.jms.support.destination.JmsDestinationAccessor . setConnectionFactory ( org.springframework.jms.support.destination.ConnectionFactory ) ; org.springframework.jms.support.destination.JmsDestinationAccessor . setDestinationResolver ( null ) ; org.springframework.jms.support.destination.JmsDestinationAccessor . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JmsDestinationAccessor org.springframework.jms.support.destination.JmsDestinationAccessor = new org.springframework.jms.support.destination.JmsDestinationAccessorTests.StubJmsDestinationAccessor ( ) ; assertFalse ( STRING + STRING + STRING , org.springframework.jms.support.destination.JmsDestinationAccessor . isPubSubDomain ( ) ) ; }  <METHOD_END>
