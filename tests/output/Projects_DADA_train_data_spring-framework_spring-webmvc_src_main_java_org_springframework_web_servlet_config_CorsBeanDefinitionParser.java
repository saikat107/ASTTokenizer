<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.config.BeanDefinition org.springframework.web.servlet.config.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.servlet.config.ParserContext ) { java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> < java.lang.String , CorsConfiguration > java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> = new java.util.LinkedHashMap<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> <> ( ) ; java.util.List<org.w3c.dom.Element> < org.w3c.dom.Element > java.util.List<org.w3c.dom.Element> = DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING ) ; if ( java.util.List<org.w3c.dom.Element> . boolean ( ) ) { CorsConfiguration org.springframework.web.servlet.config.CorsConfiguration = new CorsConfiguration ( ) . applyPermitDefaultValues ( ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> . put ( STRING , org.springframework.web.servlet.config.CorsConfiguration ) ; } else { for ( org.w3c.dom.Element org.w3c.dom.Element : java.util.List<org.w3c.dom.Element> ) { CorsConfiguration org.springframework.web.servlet.config.CorsConfiguration = new CorsConfiguration ( ) ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( org.w3c.dom.Element . java.lang.String ( STRING ) , STRING ) ; org.springframework.web.servlet.config.CorsConfiguration . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( org.w3c.dom.Element . java.lang.String ( STRING ) , STRING ) ; org.springframework.web.servlet.config.CorsConfiguration . setAllowedMethods ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( org.w3c.dom.Element . java.lang.String ( STRING ) , STRING ) ; org.springframework.web.servlet.config.CorsConfiguration . setAllowedHeaders ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( org.w3c.dom.Element . java.lang.String ( STRING ) , STRING ) ; org.springframework.web.servlet.config.CorsConfiguration . setExposedHeaders ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.CorsConfiguration . setAllowCredentials ( java.lang.Boolean . boolean ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.CorsConfiguration . setMaxAge ( java.lang.Long . long ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) ; } java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> . put ( org.w3c.dom.Element . java.lang.String ( STRING ) , org.springframework.web.servlet.config.CorsConfiguration . applyPermitDefaultValues ( ) ) ; } } MvcNamespaceUtils . registerCorsConfigurations ( java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> , org.springframework.web.servlet.config.ParserContext , org.springframework.web.servlet.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; return null ; }  <METHOD_END>
