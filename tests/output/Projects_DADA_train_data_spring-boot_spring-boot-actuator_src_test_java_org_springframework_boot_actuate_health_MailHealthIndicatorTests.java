<METHOD_START> @ Before public void void ( ) { Session org.springframework.boot.actuate.health.Session = Session . getDefaultInstance ( new java.util.Properties ( ) ) ; org.springframework.boot.actuate.health.Session . addProvider ( new Provider ( Type . TRANSPORT , STRING , org.springframework.boot.actuate.health.MailHealthIndicatorTests.SuccessTransport .class . java.lang.String ( ) , STRING , STRING ) ) ; this . org.springframework.boot.actuate.health.JavaMailSenderImpl = mock ( JavaMailSenderImpl .class ) ; given ( this . org.springframework.boot.actuate.health.JavaMailSenderImpl . getHost ( ) ) . willReturn ( STRING ) ; given ( this . org.springframework.boot.actuate.health.JavaMailSenderImpl . getPort ( ) ) . willReturn ( NUMBER ) ; given ( this . org.springframework.boot.actuate.health.JavaMailSenderImpl . getSession ( ) ) . willReturn ( org.springframework.boot.actuate.health.Session ) ; this . org.springframework.boot.actuate.health.MailHealthIndicator = new MailHealthIndicator ( this . org.springframework.boot.actuate.health.JavaMailSenderImpl ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( this . org.springframework.boot.actuate.health.JavaMailSenderImpl . getProtocol ( ) ) . willReturn ( STRING ) ; Health org.springframework.boot.actuate.health.Health = this . org.springframework.boot.actuate.health.MailHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.actuate.health.MessagingException { willThrow ( new MessagingException ( STRING ) ) . given ( this . org.springframework.boot.actuate.health.JavaMailSenderImpl ) . testConnection ( ) ; Health org.springframework.boot.actuate.health.Health = this . org.springframework.boot.actuate.health.MailHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . DOWN ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ; assertThat ( java.lang.Object ) . isNotNull ( ) ; assertThat ( java.lang.Object . java.lang.String ( ) . boolean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> public void ( Session org.springframework.boot.actuate.health.Session , URLName org.springframework.boot.actuate.health.URLName ) { super( org.springframework.boot.actuate.health.Session , org.springframework.boot.actuate.health.URLName ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , int int , java.lang.String java.lang.String , java.lang.String java.lang.String )				throws org.springframework.boot.actuate.health.MessagingException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.boot.actuate.health.Message , Address [] org.springframework.boot.actuate.health.Address[] )				throws org.springframework.boot.actuate.health.MessagingException {		}  <METHOD_END>
