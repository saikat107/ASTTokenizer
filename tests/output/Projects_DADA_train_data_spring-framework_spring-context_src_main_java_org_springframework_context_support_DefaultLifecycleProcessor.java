<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.context.support.BeanFactory ) { if ( ! ( org.springframework.context.support.BeanFactory instanceof ConfigurableListableBeanFactory ) ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.context.support.BeanFactory ) ; } this . org.springframework.context.support.ConfigurableListableBeanFactory = ( ConfigurableListableBeanFactory ) org.springframework.context.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( false ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; this . boolean = false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( true ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; this . boolean = false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { java.util.Map<java.lang.String,org.springframework.context.support.Lifecycle> < java.lang.String , Lifecycle > java.util.Map<java.lang.String,org.springframework.context.support.Lifecycle> = java.util.Map<java.lang.String,org.springframework.context.support.Lifecycle> ( ) ; java.util.Map<java.lang.Integer,org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup> < java.lang.Integer , org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup > java.util.Map<java.lang.Integer,org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup> = new java.util.HashMap<java.lang.Integer,org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,? extends org.springframework.context.support.Lifecycle> < java.lang.String , ? extends Lifecycle > java.util.Map.Entry<java.lang.String,? extends org.springframework.context.support.Lifecycle> : java.util.Map<java.lang.String,org.springframework.context.support.Lifecycle> . entrySet ( ) ) { Lifecycle org.springframework.context.support.Lifecycle = java.util.Map.Entry<java.lang.String,> . getValue ( ) ; if ( ! boolean || ( org.springframework.context.support.Lifecycle instanceof SmartLifecycle && ( ( SmartLifecycle ) org.springframework.context.support.Lifecycle ) . isAutoStartup ( ) ) ) { int int = int ( org.springframework.context.support.Lifecycle ) ; org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup = java.util.Map<java.lang.Integer,org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup> . org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup ( int ) ; if ( org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup == null ) { org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup = new org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup ( int , this . long , java.util.Map<java.lang.String,org.springframework.context.support.Lifecycle> , boolean ) ; java.util.Map<java.lang.Integer,org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup> . org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup ( int , org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup ) ; } org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup . void ( java.util.Map.Entry<java.lang.String,> . java.lang.String ( ) , org.springframework.context.support.Lifecycle ) ; } } if ( ! java.util.Map<java.lang.Integer,org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup> . boolean ( ) ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( java.util.Map<java.lang.Integer,org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup> . java.util.Set<java.lang.Integer> ( ) ) ; java.util.Collections . void ( java.util.List<java.lang.Integer> ) ; for ( java.lang.Integer java.lang.Integer : java.util.List<java.lang.Integer> ) { java.util.Map<java.lang.Integer,org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup> . org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup ( java.lang.Integer ) . void ( ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,? extends org.springframework.context.support.Lifecycle> < java.lang.String , ? extends Lifecycle > java.util.Map<java.lang.String,? extends org.springframework.context.support.Lifecycle> , java.lang.String java.lang.String , boolean boolean ) { Lifecycle org.springframework.context.support.Lifecycle = java.util.Map<java.lang.String,> . remove ( java.lang.String ) ; if ( org.springframework.context.support.Lifecycle != null && ! this . boolean ( org.springframework.context.support.Lifecycle ) ) { java.lang.String [] java.lang.String[] = this . org.springframework.context.support.ConfigurableListableBeanFactory . getDependenciesForBean ( java.lang.String ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { void ( java.util.Map<java.lang.String,> , java.lang.String , boolean ) ; } if ( ! org.springframework.context.support.Lifecycle . isRunning ( ) && ( ! boolean || ! ( org.springframework.context.support.Lifecycle instanceof SmartLifecycle ) || ( ( SmartLifecycle ) org.springframework.context.support.Lifecycle ) . isAutoStartup ( ) ) ) { if ( org.springframework.context.support.Log . isDebugEnabled ( ) ) { org.springframework.context.support.Log . debug ( STRING + java.lang.String + STRING + org.springframework.context.support.Lifecycle . getClass ( ) + STRING ) ; } try { org.springframework.context.support.Lifecycle . start ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new ApplicationContextException ( STRING + java.lang.String + STRING , java.lang.Throwable ) ; } if ( org.springframework.context.support.Log . isDebugEnabled ( ) ) { org.springframework.context.support.Log . debug ( STRING + java.lang.String + STRING ) ; } } } }  <METHOD_END>
<METHOD_START> private void void ( ) { java.util.Map<java.lang.String,org.springframework.context.support.Lifecycle> < java.lang.String , Lifecycle > java.util.Map<java.lang.String,org.springframework.context.support.Lifecycle> = java.util.Map<java.lang.String,org.springframework.context.support.Lifecycle> ( ) ; java.util.Map<java.lang.Integer,org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup> < java.lang.Integer , org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup > java.util.Map<java.lang.Integer,org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup> = new java.util.HashMap<java.lang.Integer,org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.context.support.Lifecycle> < java.lang.String , Lifecycle > java.util.Map.Entry<java.lang.String,org.springframework.context.support.Lifecycle> : java.util.Map<java.lang.String,org.springframework.context.support.Lifecycle> . entrySet ( ) ) { Lifecycle org.springframework.context.support.Lifecycle = java.util.Map.Entry<java.lang.String,org.springframework.context.support.Lifecycle> . getValue ( ) ; int int = int ( org.springframework.context.support.Lifecycle ) ; org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup = java.util.Map<java.lang.Integer,org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup> . org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup ( int ) ; if ( org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup == null ) { org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup = new org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup ( int , this . long , java.util.Map<java.lang.String,org.springframework.context.support.Lifecycle> , false ) ; java.util.Map<java.lang.Integer,org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup> . org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup ( int , org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup ) ; } org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup . void ( java.util.Map.Entry<java.lang.String,org.springframework.context.support.Lifecycle> . getKey ( ) , org.springframework.context.support.Lifecycle ) ; } if ( ! java.util.Map<java.lang.Integer,org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup> . boolean ( ) ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( java.util.Map<java.lang.Integer,org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup> . java.util.Set<java.lang.Integer> ( ) ) ; java.util.Collections . void ( java.util.List<java.lang.Integer> , java.util.Collections . java.util.Comparator<java.lang.Integer> ( ) ) ; for ( java.lang.Integer java.lang.Integer : java.util.List<java.lang.Integer> ) { java.util.Map<java.lang.Integer,org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup> . org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup ( java.lang.Integer ) . void ( ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,? extends org.springframework.context.support.Lifecycle> < java.lang.String , ? extends Lifecycle > java.util.Map<java.lang.String,? extends org.springframework.context.support.Lifecycle> , final java.lang.String java.lang.String , final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch , final java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ) { Lifecycle org.springframework.context.support.Lifecycle = java.util.Map<java.lang.String,> . remove ( java.lang.String ) ; if ( org.springframework.context.support.Lifecycle != null ) { java.lang.String [] java.lang.String[] = this . org.springframework.context.support.ConfigurableListableBeanFactory . getDependentBeans ( java.lang.String ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { void ( java.util.Map<java.lang.String,> , java.lang.String , java.util.concurrent.CountDownLatch , java.util.Set<java.lang.String> ) ; } try { if ( org.springframework.context.support.Lifecycle . isRunning ( ) ) { if ( org.springframework.context.support.Lifecycle instanceof SmartLifecycle ) { if ( org.springframework.context.support.Log . isDebugEnabled ( ) ) { org.springframework.context.support.Log . debug ( STRING + java.lang.String + STRING + org.springframework.context.support.Lifecycle . getClass ( ) + STRING ) ; } java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; ( ( SmartLifecycle ) org.springframework.context.support.Lifecycle ) . stop ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; if ( org.springframework.context.support.Log . isDebugEnabled ( ) ) { org.springframework.context.support.Log . debug ( STRING + java.lang.String + STRING ) ; } } } ) ; } else { if ( org.springframework.context.support.Log . isDebugEnabled ( ) ) { org.springframework.context.support.Log . debug ( STRING + java.lang.String + STRING + org.springframework.context.support.Lifecycle . getClass ( ) + STRING ) ; } org.springframework.context.support.Lifecycle . stop ( ) ; if ( org.springframework.context.support.Log . isDebugEnabled ( ) ) { org.springframework.context.support.Log . debug ( STRING + java.lang.String + STRING ) ; } } } else if ( org.springframework.context.support.Lifecycle instanceof SmartLifecycle ) { java.util.concurrent.CountDownLatch . void ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.context.support.Log . isWarnEnabled ( ) ) { org.springframework.context.support.Log . warn ( STRING + java.lang.String + STRING , java.lang.Throwable ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; if ( org.springframework.context.support.Log . isDebugEnabled ( ) ) { org.springframework.context.support.Log . debug ( STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,org.springframework.context.support.Lifecycle> < java.lang.String , Lifecycle > java.util.Map<java.lang.String,org.springframework.context.support.Lifecycle> ( ) { java.util.Map<java.lang.String,org.springframework.context.support.Lifecycle> < java.lang.String , Lifecycle > java.util.Map<java.lang.String,org.springframework.context.support.Lifecycle> = new java.util.LinkedHashMap<java.lang.String,org.springframework.context.support.Lifecycle> <> ( ) ; java.lang.String [] java.lang.String[] = this . org.springframework.context.support.ConfigurableListableBeanFactory . getBeanNamesForType ( Lifecycle .class , false , false ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String java.lang.String = BeanFactoryUtils . transformedBeanName ( java.lang.String ) ; boolean boolean = this . org.springframework.context.support.ConfigurableListableBeanFactory . isFactoryBean ( java.lang.String ) ; java.lang.String java.lang.String = ( boolean ? BeanFactory . FACTORY_BEAN_PREFIX + java.lang.String : java.lang.String ) ; if ( ( this . org.springframework.context.support.ConfigurableListableBeanFactory . containsSingleton ( java.lang.String ) && ( ! boolean || Lifecycle .class . boolean ( this . org.springframework.context.support.ConfigurableListableBeanFactory . getType ( java.lang.String ) ) ) ) || SmartLifecycle .class . boolean ( this . org.springframework.context.support.ConfigurableListableBeanFactory . getType ( java.lang.String ) ) ) { Lifecycle org.springframework.context.support.Lifecycle = this . org.springframework.context.support.ConfigurableListableBeanFactory . getBean ( java.lang.String , Lifecycle .class ) ; if ( org.springframework.context.support.Lifecycle != this ) { java.util.Map<java.lang.String,org.springframework.context.support.Lifecycle> . put ( java.lang.String , org.springframework.context.support.Lifecycle ) ; } } } return java.util.Map<java.lang.String,org.springframework.context.support.Lifecycle> ; }  <METHOD_END>
<METHOD_START> protected int int ( Lifecycle org.springframework.context.support.Lifecycle ) { return ( org.springframework.context.support.Lifecycle instanceof Phased ? ( ( Phased ) org.springframework.context.support.Lifecycle ) . getPhase ( ) : NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void ( int int , long long , java.util.Map<java.lang.String,? extends org.springframework.context.support.Lifecycle> < java.lang.String , ? extends Lifecycle > java.util.Map<java.lang.String,? extends org.springframework.context.support.Lifecycle> , boolean boolean ) { this . int = int ; this . long = long ; this . java.util.Map<java.lang.String,? extends org.springframework.context.support.Lifecycle> = java.util.Map<java.lang.String,> ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , Lifecycle org.springframework.context.support.Lifecycle ) { if ( org.springframework.context.support.Lifecycle instanceof SmartLifecycle ) { this . int ++ ; } this . java.util.List<org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember> . boolean ( new org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember ( java.lang.String , org.springframework.context.support.Lifecycle ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( this . java.util.List<org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember> . boolean ( ) ) { return; } if ( org.springframework.context.support.Log . isInfoEnabled ( ) ) { org.springframework.context.support.Log . info ( STRING + this . int ) ; } java.util.Collections . void ( this . java.util.List<org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember> ) ; for ( org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember : this . java.util.List<org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember> ) { if ( this . java.util.Map<java.lang.String,> . boolean ( org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember . java.lang.String ) ) { void ( this . java.util.Map<java.lang.String,> , org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember . java.lang.String , this . boolean ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( this . java.util.List<org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember> . boolean ( ) ) { return; } if ( org.springframework.context.support.Log . isInfoEnabled ( ) ) { org.springframework.context.support.Log . info ( STRING + this . int ) ; } java.util.Collections . void ( this . java.util.List<org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember> , java.util.Collections . java.util.Comparator<org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember> ( ) ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( this . int ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = java.util.Collections . java.util.Set<java.lang.String> ( new java.util.LinkedHashSet<java.lang.String> < java.lang.String > ( ) ) ; for ( org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember : this . java.util.List<org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember> ) { if ( this . java.util.Map<java.lang.String,> . boolean ( org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember . java.lang.String ) ) { void ( this . java.util.Map<java.lang.String,> , org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember . java.lang.String , java.util.concurrent.CountDownLatch , java.util.Set<java.lang.String> ) ; } else if ( org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember . org.springframework.context.support.Lifecycle instanceof SmartLifecycle ) { java.util.concurrent.CountDownLatch . void ( ) ; } } try { java.util.concurrent.CountDownLatch . boolean ( this . long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; if ( java.util.concurrent.CountDownLatch . long ( ) > NUMBER && ! java.util.Set<java.lang.String> . boolean ( ) && org.springframework.context.support.Log . isWarnEnabled ( ) ) { org.springframework.context.support.Log . warn ( STRING + java.util.Set<java.lang.String> . int ( ) + STRING + ( java.util.Set<java.lang.String> . int ( ) > NUMBER ? STRING : STRING ) + STRING + this . int + STRING + this . long + STRING + java.util.Set<java.lang.String> ) ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , Lifecycle org.springframework.context.support.Lifecycle ) { this . java.lang.String = java.lang.String ; this . org.springframework.context.support.Lifecycle = org.springframework.context.support.Lifecycle ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember ) { int int = int ( this . org.springframework.context.support.Lifecycle ) ; int int = int ( org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroupMember . org.springframework.context.support.Lifecycle ) ; return ( int == int ? NUMBER : ( int < int ) ? - NUMBER : NUMBER ) ; }  <METHOD_END>
