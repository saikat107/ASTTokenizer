<METHOD_START> public void ( java.lang.Class<? extends org.springframework.data.repository.query.EvaluationContextExtension> < ? extends EvaluationContextExtension > java.lang.Class<? extends org.springframework.data.repository.query.EvaluationContextExtension> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method ( java.lang.Class<> ) . java.lang.Class<?> ( ) ; this . java.util.Optional<org.springframework.data.repository.query.EvaluationContextExtensionInformation.RootObjectInformation> = java.util.Optional . java.util.Optional<org.springframework.data.repository.query.EvaluationContextExtensionInformation.RootObjectInformation> ( java.lang.Object .class . boolean ( java.lang.Class<> ) ? null : new org.springframework.data.repository.query.EvaluationContextExtensionInformation.RootObjectInformation ( java.lang.Class<> ) ) ; this . org.springframework.data.repository.query.EvaluationContextExtensionInformation.ExtensionTypeInformation = new org.springframework.data.repository.query.EvaluationContextExtensionInformation.ExtensionTypeInformation ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.query.EvaluationContextExtensionInformation.ExtensionTypeInformation org.springframework.data.repository.query.EvaluationContextExtensionInformation.ExtensionTypeInformation ( ) { return this . org.springframework.data.repository.query.EvaluationContextExtensionInformation.ExtensionTypeInformation ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.query.EvaluationContextExtensionInformation.RootObjectInformation org.springframework.data.repository.query.EvaluationContextExtensionInformation.RootObjectInformation ( java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ) { return java.util.Optional<java.lang.Object> . java.util.Optional<org.springframework.data.repository.query.EvaluationContextExtensionInformation.RootObjectInformation> ( java.lang.Object -> java.util.Optional<org.springframework.data.repository.query.EvaluationContextExtensionInformation.RootObjectInformation> . org.springframework.data.repository.query.EvaluationContextExtensionInformation.RootObjectInformation ( ( ) new org.springframework.data.repository.query.EvaluationContextExtensionInformation.RootObjectInformation ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ) . org.springframework.data.repository.query.EvaluationContextExtensionInformation.RootObjectInformation ( org.springframework.data.repository.query.EvaluationContextExtensionInformation.RootObjectInformation . org.springframework.data.repository.query.EvaluationContextExtensionInformation.RootObjectInformation ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Class<?> < ? > java.lang.Class<?> ) { try { return java.lang.Class<> . java.lang.reflect.Method ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { return null ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<? extends org.springframework.data.repository.query.EvaluationContextExtension> < ? extends EvaluationContextExtension > java.lang.Class<? extends org.springframework.data.repository.query.EvaluationContextExtension> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> = java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> ( java.lang.Class<> ) ; this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> < java.lang.String , Function > java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> < java.lang.String , Function > java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> = new java.util.HashMap<java.lang.String,org.springframework.data.repository.query.Function> <> ( ) ; ReflectionUtils . doWithMethods ( java.lang.Class<> , method -> map . put ( method . getName ( ) , new Function ( method , null ) ) , org.springframework.data.repository.query.EvaluationContextExtensionInformation.ExtensionTypeInformation.PublicMethodAndFieldFilter . org.springframework.data.repository.query.EvaluationContextExtensionInformation.ExtensionTypeInformation.PublicMethodAndFieldFilter ) ; return java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> . isEmpty ( ) ? java.util.Collections . java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> ( ) : java.util.Collections . java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> ( java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { if ( ReflectionUtils . isObjectMethod ( java.lang.reflect.Method ) ) { return false ; } boolean boolean = java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ; boolean boolean = boolean ? boolean : ! boolean ; return java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) && boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Field java.lang.reflect.Field ) { boolean boolean = java.lang.reflect.Modifier . boolean ( java.lang.reflect.Field . int ( ) ) ; boolean boolean = boolean ? boolean : ! boolean ; return java.lang.reflect.Modifier . boolean ( java.lang.reflect.Field . int ( ) ) && boolean ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.util.Map<java.lang.String,java.lang.reflect.Method> = new java.util.HashMap<java.lang.String,java.lang.reflect.Method> <> ( ) ; this . java.util.Collection<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method> <> ( ) ; this . java.util.Collection<java.lang.reflect.Field> = new java.util.ArrayList<java.lang.reflect.Field> <> ( ) ; if ( java.lang.Object .class . boolean ( java.lang.Class<> ) ) { return; } Streamable < java.beans.PropertyDescriptor > org.springframework.data.repository.query.Streamable<java.beans.PropertyDescriptor> = Streamable . of ( BeanUtils . getPropertyDescriptors ( java.lang.Class<> ) ) ; ReflectionUtils . doWithMethods ( java.lang.Class<> , method -> { RootObjectInformation .this . methods . add ( method ) ; descriptors . stream ( ) . filter ( it -> method . equals ( it . getReadMethod ( ) ) ) . forEach ( it -> RootObjectInformation .this . accessors . put ( it . getName ( ) , method ) ) ; } , org.springframework.data.repository.query.EvaluationContextExtensionInformation.ExtensionTypeInformation.PublicMethodAndFieldFilter . org.springframework.data.repository.query.EvaluationContextExtensionInformation.ExtensionTypeInformation.PublicMethodAndFieldFilter ) ; ReflectionUtils . doWithFields ( java.lang.Class<> , org.springframework.data.repository.query.EvaluationContextExtensionInformation.RootObjectInformation .this . java.util.Collection<java.lang.reflect.Field> :: boolean , org.springframework.data.repository.query.EvaluationContextExtensionInformation.ExtensionTypeInformation.PublicMethodAndFieldFilter . org.springframework.data.repository.query.EvaluationContextExtensionInformation.ExtensionTypeInformation.PublicMethodAndFieldFilter ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> < java.lang.String , Function > java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> ( java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ) { return java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> java.util.Collection<java.lang.reflect.Method> . java.util.stream.Stream<java.lang.reflect.Method> ( ) . java.util.Map<java.lang.String,java.lang.Object> ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.reflect.Method,?,java.util.Map<java.lang.String,java.lang.Object>> ( java.lang.reflect.Method :: java.lang.String , java.lang.reflect.Method -> new Function ( java.lang.reflect.Method , java.lang.Object ) , ( java.lang.Object , java.lang.Object ) -> java.lang.Object ) ) ) . orElseGet ( java.util.Collections :: emptyMap ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ) { return java.util.Optional<java.lang.Object> . java.util.Optional<java.util.Map<java.lang.String,java.lang.Object>> ( java.lang.Object -> { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.reflect.Method> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.reflect.Method>> ( ) . java.util.stream.Stream<java.util.Map.Entry<java.lang.String,java.lang.reflect.Method>> ( ) . void ( java.util.Map.Entry<java.lang.String,java.lang.reflect.Method> -> java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<java.lang.String,java.lang.reflect.Method> . java.lang.String ( ) , new Function ( java.util.Map.Entry<java.lang.String,java.lang.reflect.Method> . java.lang.reflect.Method ( ) , java.lang.Object ) ) ) ; java.util.Collection<java.lang.reflect.Field> . java.util.stream.Stream<java.lang.reflect.Field> ( ) . void ( java.lang.reflect.Field -> java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.reflect.Field . java.lang.String ( ) , ReflectionUtils . getField ( java.lang.reflect.Field , java.lang.Object ) ) ) ; return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) ; } ) . java.util.Map<java.lang.String,java.lang.Object> ( java.util.Collections :: java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; ReflectionUtils . doWithFields ( java.lang.Class<> , field -> map . put ( field . getName ( ) , field . get ( null ) ) , org.springframework.data.repository.query.EvaluationContextExtensionInformation.ExtensionTypeInformation.PublicMethodAndFieldFilter . org.springframework.data.repository.query.EvaluationContextExtensionInformation.ExtensionTypeInformation.PublicMethodAndFieldFilter ) ; return java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) ? java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) : java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
