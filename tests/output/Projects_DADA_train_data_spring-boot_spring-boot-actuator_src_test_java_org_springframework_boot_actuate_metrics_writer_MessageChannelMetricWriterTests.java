<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; given ( this . org.springframework.boot.actuate.metrics.writer.MessageChannel . send ( any ( Message .class ) ) ) . willAnswer ( new Answer < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.boot.actuate.metrics.writer.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.actuate.metrics.writer.MessageChannelMetricWriterTests .this . org.springframework.boot.actuate.metrics.writer.MetricWriterMessageHandler . handleMessage ( org.springframework.boot.actuate.metrics.writer.InvocationOnMock . getArgument ( NUMBER ) ) ; return true ; } } ) ; this . org.springframework.boot.actuate.metrics.writer.MessageChannelMetricWriter = new MessageChannelMetricWriter ( this . org.springframework.boot.actuate.metrics.writer.MessageChannel ) ; this . org.springframework.boot.actuate.metrics.writer.MetricWriterMessageHandler = new MetricWriterMessageHandler ( this . org.springframework.boot.actuate.metrics.writer.MetricWriter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.boot.actuate.metrics.writer.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.actuate.metrics.writer.MessageChannelMetricWriterTests .this . org.springframework.boot.actuate.metrics.writer.MetricWriterMessageHandler . handleMessage ( org.springframework.boot.actuate.metrics.writer.InvocationOnMock . getArgument ( NUMBER ) ) ; return true ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.writer.MessageChannelMetricWriter . increment ( new Delta <> ( STRING , NUMBER ) ) ; verify ( this . org.springframework.boot.actuate.metrics.writer.MessageChannel ) . send ( any ( Message .class ) ) ; verify ( this . org.springframework.boot.actuate.metrics.writer.MetricWriter ) . increment ( any ( Delta .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.writer.MessageChannelMetricWriter . set ( new Metric <> ( STRING , NUMBER ) ) ; verify ( this . org.springframework.boot.actuate.metrics.writer.MessageChannel ) . send ( any ( Message .class ) ) ; verify ( this . org.springframework.boot.actuate.metrics.writer.MetricWriter ) . set ( any ( Metric .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.metrics.writer.MessageChannelMetricWriter . reset ( STRING ) ; verify ( this . org.springframework.boot.actuate.metrics.writer.MessageChannel ) . send ( any ( Message .class ) ) ; verify ( this . org.springframework.boot.actuate.metrics.writer.MetricWriter ) . reset ( STRING ) ; }  <METHOD_END>
