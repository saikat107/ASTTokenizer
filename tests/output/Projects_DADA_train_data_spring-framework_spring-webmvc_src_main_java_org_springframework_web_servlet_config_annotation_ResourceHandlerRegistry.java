<METHOD_START> public void ( ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext , ServletContext org.springframework.web.servlet.config.annotation.ServletContext ) { this( org.springframework.web.servlet.config.annotation.ApplicationContext , org.springframework.web.servlet.config.annotation.ServletContext , null ); }  <METHOD_END>
<METHOD_START> public void ( ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext , ServletContext org.springframework.web.servlet.config.annotation.ServletContext , ContentNegotiationManager org.springframework.web.servlet.config.annotation.ContentNegotiationManager ) { Assert . notNull ( org.springframework.web.servlet.config.annotation.ApplicationContext , STRING ) ; this . org.springframework.web.servlet.config.annotation.ApplicationContext = org.springframework.web.servlet.config.annotation.ApplicationContext ; this . org.springframework.web.servlet.config.annotation.ServletContext = org.springframework.web.servlet.config.annotation.ServletContext ; this . org.springframework.web.servlet.config.annotation.ContentNegotiationManager = org.springframework.web.servlet.config.annotation.ContentNegotiationManager ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration ( java.lang.String ... java.lang.String[] ) { ResourceHandlerRegistration org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration = new ResourceHandlerRegistration ( this . org.springframework.web.servlet.config.annotation.ApplicationContext , java.lang.String[] ) ; this . java.util.List<org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration> . add ( org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration ) ; return org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { for ( ResourceHandlerRegistration org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration : this . java.util.List<org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration> ) { if ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration . getPathPatterns ( ) ) . contains ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry ( int int ) { this . int = int ; return this ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.config.annotation.AbstractHandlerMapping org.springframework.web.servlet.config.annotation.AbstractHandlerMapping ( ) { if ( this . java.util.List<org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration> . isEmpty ( ) ) { return null ; } java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.HttpRequestHandler> < java.lang.String , HttpRequestHandler > java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.HttpRequestHandler> = new java.util.LinkedHashMap<java.lang.String,org.springframework.web.servlet.config.annotation.HttpRequestHandler> <> ( ) ; for ( ResourceHandlerRegistration org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration : this . java.util.List<org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration> ) { for ( java.lang.String java.lang.String : org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration . getPathPatterns ( ) ) { ResourceHttpRequestHandler org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler = org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration . getRequestHandler ( ) ; org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler . setServletContext ( this . org.springframework.web.servlet.config.annotation.ServletContext ) ; org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler . setApplicationContext ( this . org.springframework.web.servlet.config.annotation.ApplicationContext ) ; org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler . setContentNegotiationManager ( this . org.springframework.web.servlet.config.annotation.ContentNegotiationManager ) ; try { org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler . afterPropertiesSet ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanInitializationException ( STRING , java.lang.Throwable ) ; } java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.HttpRequestHandler> . put ( java.lang.String , org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler ) ; } } SimpleUrlHandlerMapping org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping = new SimpleUrlHandlerMapping ( ) ; org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping . setOrder ( int ) ; org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping . setUrlMap ( java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.HttpRequestHandler> ) ; return org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping ; }  <METHOD_END>
