<METHOD_START> @ Before public void void ( ) java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { org.springframework.data.solr.core.query.SolrTemplate = new SolrTemplate ( server ) ; org.springframework.data.solr.core.query.SolrTemplate . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.data.solr.core.query.SolrTemplate . delete ( new SimpleQuery ( new Criteria ( Criteria . WILDCARD ) . expression ( Criteria . WILDCARD ) ) ) ; org.springframework.data.solr.core.query.SolrTemplate . commit ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.query.ExampleSolrBean = createExampleBeanWithId ( STRING ) ; org.springframework.data.solr.core.query.ExampleSolrBean . setPopularity ( NUMBER ) ; ExampleSolrBean org.springframework.data.solr.core.query.ExampleSolrBean = createExampleBeanWithId ( STRING ) ; org.springframework.data.solr.core.query.ExampleSolrBean . setPopularity ( - NUMBER ) ; org.springframework.data.solr.core.query.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.query.ExampleSolrBean , org.springframework.data.solr.core.query.ExampleSolrBean ) ) ; org.springframework.data.solr.core.query.SolrTemplate . commit ( ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.query.Page<org.springframework.data.solr.core.query.ExampleSolrBean> = org.springframework.data.solr.core.query.SolrTemplate . queryForPage ( new SimpleQuery ( new Criteria ( STRING ) . is ( - NUMBER ) ) , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.Page<org.springframework.data.solr.core.query.ExampleSolrBean> . getContent ( ) . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.ExampleSolrBean . getId ( ) , org.springframework.data.solr.core.query.Page<org.springframework.data.solr.core.query.ExampleSolrBean> . getContent ( ) . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.query.ExampleSolrBean = createExampleBeanWithId ( STRING ) ; org.springframework.data.solr.core.query.ExampleSolrBean . setPopularity ( - NUMBER ) ; ExampleSolrBean org.springframework.data.solr.core.query.ExampleSolrBean = createExampleBeanWithId ( STRING ) ; org.springframework.data.solr.core.query.ExampleSolrBean . setPopularity ( - NUMBER ) ; org.springframework.data.solr.core.query.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.query.ExampleSolrBean , org.springframework.data.solr.core.query.ExampleSolrBean ) ) ; org.springframework.data.solr.core.query.SolrTemplate . commit ( ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.query.Page<org.springframework.data.solr.core.query.ExampleSolrBean> = org.springframework.data.solr.core.query.SolrTemplate . queryForPage ( new SimpleQuery ( new Criteria ( STRING ) . between ( - NUMBER , - NUMBER ) ) , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.Page<org.springframework.data.solr.core.query.ExampleSolrBean> . getContent ( ) . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.ExampleSolrBean . getId ( ) , org.springframework.data.solr.core.query.Page<org.springframework.data.solr.core.query.ExampleSolrBean> . getContent ( ) . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.query.ExampleSolrBean = createExampleBeanWithId ( STRING ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; java.util.Calendar . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.data.solr.core.query.ExampleSolrBean . setLastModified ( java.util.Calendar . java.util.Date ( ) ) ; org.springframework.data.solr.core.query.SolrTemplate . saveBean ( org.springframework.data.solr.core.query.ExampleSolrBean ) ; org.springframework.data.solr.core.query.SolrTemplate . commit ( ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.query.Page<org.springframework.data.solr.core.query.ExampleSolrBean> = org.springframework.data.solr.core.query.SolrTemplate . queryForPage ( new SimpleQuery ( new Criteria ( STRING ) . is ( java.util.Calendar . java.util.Date ( ) ) ) , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.Page<org.springframework.data.solr.core.query.ExampleSolrBean> . getContent ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.query.ExampleSolrBean = createExampleBeanWithId ( STRING ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; java.util.Calendar . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.data.solr.core.query.ExampleSolrBean . setLastModified ( java.util.Calendar . java.util.Date ( ) ) ; ExampleSolrBean org.springframework.data.solr.core.query.ExampleSolrBean = createExampleBeanWithId ( STRING ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; java.util.Calendar . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.data.solr.core.query.ExampleSolrBean . setLastModified ( java.util.Calendar . java.util.Date ( ) ) ; org.springframework.data.solr.core.query.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.query.ExampleSolrBean , org.springframework.data.solr.core.query.ExampleSolrBean ) ) ; org.springframework.data.solr.core.query.SolrTemplate . commit ( ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.query.Page<org.springframework.data.solr.core.query.ExampleSolrBean> = org.springframework.data.solr.core.query.SolrTemplate . queryForPage ( new SimpleQuery ( new Criteria ( STRING ) . between ( new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) , new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) ) ) , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.Page<org.springframework.data.solr.core.query.ExampleSolrBean> . getContent ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.query.ExampleSolrBean = createExampleBeanWithId ( STRING ) ; org.springframework.data.solr.core.query.ExampleSolrBean . setStore ( STRING ) ; ExampleSolrBean org.springframework.data.solr.core.query.ExampleSolrBean = createExampleBeanWithId ( STRING ) ; org.springframework.data.solr.core.query.ExampleSolrBean . setStore ( STRING ) ; org.springframework.data.solr.core.query.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.query.ExampleSolrBean , org.springframework.data.solr.core.query.ExampleSolrBean ) ) ; org.springframework.data.solr.core.query.SolrTemplate . commit ( ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.query.Page<org.springframework.data.solr.core.query.ExampleSolrBean> = org.springframework.data.solr.core.query.SolrTemplate . queryForPage ( new SimpleQuery ( new Criteria ( STRING ) . near ( new Point ( NUMBER , - NUMBER ) , new Distance ( NUMBER ) ) ) , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.Page<org.springframework.data.solr.core.query.ExampleSolrBean> . getContent ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.query.ExampleSolrBean = createExampleBeanWithId ( STRING ) ; org.springframework.data.solr.core.query.ExampleSolrBean . setStore ( STRING ) ; ExampleSolrBean org.springframework.data.solr.core.query.ExampleSolrBean = createExampleBeanWithId ( STRING ) ; org.springframework.data.solr.core.query.ExampleSolrBean . setStore ( STRING ) ; org.springframework.data.solr.core.query.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.query.ExampleSolrBean , org.springframework.data.solr.core.query.ExampleSolrBean ) ) ; org.springframework.data.solr.core.query.SolrTemplate . commit ( ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.query.Page<org.springframework.data.solr.core.query.ExampleSolrBean> = org.springframework.data.solr.core.query.SolrTemplate . queryForPage ( new SimpleQuery ( new Criteria ( STRING ) . near ( new Point ( NUMBER , - NUMBER ) , new Distance ( NUMBER , Metrics . MILES ) ) ) , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.Page<org.springframework.data.solr.core.query.ExampleSolrBean> . getContent ( ) . size ( ) ) ; }  <METHOD_END>
