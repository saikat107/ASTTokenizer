<METHOD_START> @ Bean ( name = TaskManagementConfigUtils . ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME ) @ Role ( BeanDefinition . ROLE_INFRASTRUCTURE ) public org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor ( ) { Assert . notNull ( this . enableAsync , STRING ) ; AsyncAnnotationBeanPostProcessor org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor = new AsyncAnnotationBeanPostProcessor ( ) ; java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = this . enableAsync . getClass ( STRING ) ; if ( java.lang.Class<> != AnnotationUtils . getDefaultValue ( EnableAsync .class , STRING ) ) { org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor . setAsyncAnnotationType ( java.lang.Class<> ) ; } if ( this . executor != null ) { org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor . setExecutor ( this . executor ) ; } if ( this . exceptionHandler != null ) { org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor . setExceptionHandler ( this . exceptionHandler ) ; } org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor . setProxyTargetClass ( this . enableAsync . getBoolean ( STRING ) ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor . setOrder ( this . enableAsync .< java.lang.Integer > getNumber ( STRING ) ) ; return org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor ; }  <METHOD_END>
