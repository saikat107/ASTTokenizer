<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream java.io.ObjectOutputStream = new java.io.ObjectOutputStream ( java.io.ByteArrayOutputStream ) ; java.io.ObjectOutputStream . void ( STRING ) ; byte [] byte[] = java.io.ByteArrayOutputStream . byte[] ( ) ; PayloadDeserializingTransformer org.springframework.integration.transformer.PayloadDeserializingTransformer = new PayloadDeserializingTransformer ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.PayloadDeserializingTransformer . transform ( new GenericMessage < byte [] > ( byte[] ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.transformer.Message<> . getPayload ( ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( java.lang.String .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.transformer.PayloadDeserializingTransformerTests.TestBean org.springframework.integration.transformer.PayloadDeserializingTransformerTests.TestBean = new org.springframework.integration.transformer.PayloadDeserializingTransformerTests.TestBean ( STRING ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream java.io.ObjectOutputStream = new java.io.ObjectOutputStream ( java.io.ByteArrayOutputStream ) ; java.io.ObjectOutputStream . void ( org.springframework.integration.transformer.PayloadDeserializingTransformerTests.TestBean ) ; byte [] byte[] = java.io.ByteArrayOutputStream . byte[] ( ) ; PayloadDeserializingTransformer org.springframework.integration.transformer.PayloadDeserializingTransformer = new PayloadDeserializingTransformer ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.PayloadDeserializingTransformer . transform ( new GenericMessage < byte [] > ( byte[] ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.transformer.Message<> . getPayload ( ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( org.springframework.integration.transformer.PayloadDeserializingTransformerTests.TestBean .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( org.springframework.integration.transformer.PayloadDeserializingTransformerTests.TestBean . java.lang.String , ( ( org.springframework.integration.transformer.PayloadDeserializingTransformerTests.TestBean ) java.lang.Object ) . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageTransformationException .class ) public void void ( ) { byte [] byte[] = new byte [] { NUMBER , NUMBER , NUMBER } ; PayloadDeserializingTransformer org.springframework.integration.transformer.PayloadDeserializingTransformer = new PayloadDeserializingTransformer ( ) ; org.springframework.integration.transformer.PayloadDeserializingTransformer . transform ( new GenericMessage < byte [] > ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PayloadDeserializingTransformer org.springframework.integration.transformer.PayloadDeserializingTransformer = new PayloadDeserializingTransformer ( ) ; org.springframework.integration.transformer.PayloadDeserializingTransformer . setConverter ( source -> STRING ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.PayloadDeserializingTransformer . transform ( MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
