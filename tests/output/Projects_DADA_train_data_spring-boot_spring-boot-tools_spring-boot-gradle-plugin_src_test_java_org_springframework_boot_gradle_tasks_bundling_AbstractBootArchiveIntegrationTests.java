<METHOD_START> protected void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.gradle.tasks.bundling.InvalidRunnerConfigurationException , org.springframework.boot.gradle.tasks.bundling.UnexpectedBuildFailure , java.io.IOException { assertThat ( this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . build ( this . java.lang.String ) . task ( STRING + this . java.lang.String ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.gradle.tasks.bundling.InvalidRunnerConfigurationException , org.springframework.boot.gradle.tasks.bundling.UnexpectedBuildFailure , java.io.IOException { assertThat ( this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . build ( this . java.lang.String ) . task ( STRING + this . java.lang.String ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; assertThat ( this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . build ( this . java.lang.String ) . task ( STRING + this . java.lang.String ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . UP_TO_DATE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.gradle.tasks.bundling.InvalidRunnerConfigurationException , org.springframework.boot.gradle.tasks.bundling.UnexpectedBuildFailure , java.io.IOException { assertThat ( this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . build ( STRING , this . java.lang.String ) . task ( STRING + this . java.lang.String ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; assertThat ( this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . build ( STRING , this . java.lang.String ) . task ( STRING + this . java.lang.String ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . UP_TO_DATE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . build ( this . java.lang.String ) . task ( STRING + this . java.lang.String ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; assertThat ( this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . build ( STRING , this . java.lang.String ) . task ( STRING + this . java.lang.String ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . build ( this . java.lang.String ) . task ( STRING + this . java.lang.String ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; assertThat ( this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . build ( STRING , this . java.lang.String ) . task ( STRING + this . java.lang.String ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . build ( STRING , STRING , this . java.lang.String ) . task ( STRING + this . java.lang.String ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; assertThat ( this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . build ( STRING , STRING , this . java.lang.String ) . task ( STRING + this . java.lang.String ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertThat ( this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . build ( this . java.lang.String ) . task ( STRING + this . java.lang.String ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( new java.io.File ( this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . getProjectDir ( ) , STRING ) . java.io.File[] ( ) [ NUMBER ] ) ) { assertThat ( java.util.jar.JarFile . java.util.jar.Manifest ( ) . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; } }  <METHOD_END>
