<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.cluster.AnnotationConfigApplicationContext org.springframework.statemachine.cluster.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class , org.springframework.statemachine.cluster.LeaderZookeeperStateMachineEnsembleTests.Config1 .class ) ; context . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.cluster.StateMachineFactory<java.lang.String,java.lang.String> = context . getBean ( StateMachineFactory .class ) ; StateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.cluster.StateMachineEnsemble<java.lang.String,java.lang.String> = context . getBean ( StateMachineEnsemble .class ) ; org.springframework.statemachine.cluster.LeaderZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.cluster.LeaderZookeeperStateMachineEnsembleTests.TestEnsembleListener = context . getBean ( org.springframework.statemachine.cluster.LeaderZookeeperStateMachineEnsembleTests.TestEnsembleListener .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.cluster.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.cluster.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; assertThat ( org.springframework.statemachine.cluster.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; assertThat ( org.springframework.statemachine.cluster.LeaderZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.cluster.StateMachineEnsemble<java.lang.String,java.lang.String> . getLeader ( ) , is ( org.springframework.statemachine.cluster.StateMachine<java.lang.String,java.lang.String> ) ) ; org.springframework.statemachine.cluster.LeaderZookeeperStateMachineEnsembleTests.TestEnsembleListener . void ( NUMBER ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.cluster.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.cluster.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; org.springframework.statemachine.cluster.StateMachineEnsemble<java.lang.String,java.lang.String> . leave ( org.springframework.statemachine.cluster.StateMachine<java.lang.String,java.lang.String> ) ; assertThat ( org.springframework.statemachine.cluster.LeaderZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.cluster.StateMachineEnsemble<java.lang.String,java.lang.String> . getLeader ( ) , is ( org.springframework.statemachine.cluster.StateMachine<java.lang.String,java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.cluster.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.cluster.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withConfiguration ( ) . autoStartup ( true ) . and ( ) . withDistributed ( ) . ensemble ( org.springframework.statemachine.cluster.StateMachineEnsemble<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.cluster.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.cluster.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.cluster.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.cluster.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.cluster.StateMachineEnsemble<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.cluster.StateMachineEnsemble<java.lang.String,java.lang.String> ( ) java.lang.Exception { LeaderZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.cluster.LeaderZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new LeaderZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.cluster.CuratorFramework , STRING ) ; org.springframework.statemachine.cluster.LeaderZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . addEnsembleListener ( org.springframework.statemachine.cluster.LeaderZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ) ; return org.springframework.statemachine.cluster.LeaderZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.cluster.LeaderZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.cluster.LeaderZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) { return new org.springframework.statemachine.cluster.LeaderZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.cluster.StateMachine<java.lang.String,java.lang.String> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> void void ( int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; }  <METHOD_END>
