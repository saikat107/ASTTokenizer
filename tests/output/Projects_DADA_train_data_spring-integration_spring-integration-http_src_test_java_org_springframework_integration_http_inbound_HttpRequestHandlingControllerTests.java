<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.http.inbound.QueueChannel = new QueueChannel ( ) ; HttpRequestHandlingController org.springframework.integration.http.inbound.HttpRequestHandlingController = new HttpRequestHandlingController ( false ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setRequestChannel ( org.springframework.integration.http.inbound.QueueChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setViewName ( STRING ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.integration.http.inbound.ModelAndView = org.springframework.integration.http.inbound.HttpRequestHandlingController . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.integration.http.inbound.ModelAndView . getViewName ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . size ( ) ) ; Message < ? > org.springframework.integration.http.inbound.Message<?> = org.springframework.integration.http.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.http.inbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.http.inbound.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.http.inbound.QueueChannel = new QueueChannel ( ) ; HttpRequestHandlingController org.springframework.integration.http.inbound.HttpRequestHandlingController = new HttpRequestHandlingController ( false ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setRequestChannel ( org.springframework.integration.http.inbound.QueueChannel ) ; Expression org.springframework.integration.http.inbound.Expression = new SpelExpressionParser ( ) . parseExpression ( STRING ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setViewExpression ( org.springframework.integration.http.inbound.Expression ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.integration.http.inbound.ModelAndView = org.springframework.integration.http.inbound.HttpRequestHandlingController . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.integration.http.inbound.ModelAndView . getViewName ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . size ( ) ) ; Message < ? > org.springframework.integration.http.inbound.Message<?> = org.springframework.integration.http.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.http.inbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.http.inbound.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectChannel org.springframework.integration.http.inbound.DirectChannel = new DirectChannel ( ) ; AbstractReplyProducingMessageHandler org.springframework.integration.http.inbound.AbstractReplyProducingMessageHandler = new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return org.springframework.integration.http.inbound.Message<> . getPayload ( ) . toString ( ) . toUpperCase ( ) ; } } ; org.springframework.integration.http.inbound.DirectChannel . subscribe ( org.springframework.integration.http.inbound.AbstractReplyProducingMessageHandler ) ; HttpRequestHandlingController org.springframework.integration.http.inbound.HttpRequestHandlingController = new HttpRequestHandlingController ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setRequestChannel ( org.springframework.integration.http.inbound.DirectChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setViewName ( STRING ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.integration.http.inbound.ModelAndView = org.springframework.integration.http.inbound.HttpRequestHandlingController . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.integration.http.inbound.ModelAndView . getViewName ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . size ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . get ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return org.springframework.integration.http.inbound.Message<> . getPayload ( ) . toString ( ) . toUpperCase ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectChannel org.springframework.integration.http.inbound.DirectChannel = new DirectChannel ( ) ; AbstractReplyProducingMessageHandler org.springframework.integration.http.inbound.AbstractReplyProducingMessageHandler = new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected org.springframework.integration.http.inbound.Message<java.lang.String> < java.lang.String > org.springframework.integration.http.inbound.Message<java.lang.String> ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; } } ; org.springframework.integration.http.inbound.DirectChannel . subscribe ( org.springframework.integration.http.inbound.AbstractReplyProducingMessageHandler ) ; HttpRequestHandlingController org.springframework.integration.http.inbound.HttpRequestHandlingController = new HttpRequestHandlingController ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setRequestChannel ( org.springframework.integration.http.inbound.DirectChannel ) ; Expression org.springframework.integration.http.inbound.Expression = new SpelExpressionParser ( ) . parseExpression ( STRING ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setViewExpression ( org.springframework.integration.http.inbound.Expression ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContentType ( STRING ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.integration.http.inbound.ModelAndView = org.springframework.integration.http.inbound.HttpRequestHandlingController . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.integration.http.inbound.ModelAndView . getViewName ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . size ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . get ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.http.inbound.Message<java.lang.String> < java.lang.String > org.springframework.integration.http.inbound.Message<java.lang.String> ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final View org.springframework.integration.http.inbound.View = mock ( View .class ) ; DirectChannel org.springframework.integration.http.inbound.DirectChannel = new DirectChannel ( ) ; AbstractReplyProducingMessageHandler org.springframework.integration.http.inbound.AbstractReplyProducingMessageHandler = new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected org.springframework.integration.http.inbound.Message<java.lang.String> < java.lang.String > org.springframework.integration.http.inbound.Message<java.lang.String> ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , org.springframework.integration.http.inbound.View ) . build ( ) ; } } ; org.springframework.integration.http.inbound.DirectChannel . subscribe ( org.springframework.integration.http.inbound.AbstractReplyProducingMessageHandler ) ; HttpRequestHandlingController org.springframework.integration.http.inbound.HttpRequestHandlingController = new HttpRequestHandlingController ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setRequestChannel ( org.springframework.integration.http.inbound.DirectChannel ) ; Expression org.springframework.integration.http.inbound.Expression = new SpelExpressionParser ( ) . parseExpression ( STRING ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setViewExpression ( org.springframework.integration.http.inbound.Expression ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContentType ( STRING ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.integration.http.inbound.ModelAndView = org.springframework.integration.http.inbound.HttpRequestHandlingController . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; assertSame ( org.springframework.integration.http.inbound.View , org.springframework.integration.http.inbound.ModelAndView . getView ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . size ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . get ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.http.inbound.Message<java.lang.String> < java.lang.String > org.springframework.integration.http.inbound.Message<java.lang.String> ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , org.springframework.integration.http.inbound.View ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectChannel org.springframework.integration.http.inbound.DirectChannel = new DirectChannel ( ) ; AbstractReplyProducingMessageHandler org.springframework.integration.http.inbound.AbstractReplyProducingMessageHandler = new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return org.springframework.integration.http.inbound.Message<> . getPayload ( ) . toString ( ) . toUpperCase ( ) ; } } ; org.springframework.integration.http.inbound.DirectChannel . subscribe ( org.springframework.integration.http.inbound.AbstractReplyProducingMessageHandler ) ; HttpRequestHandlingController org.springframework.integration.http.inbound.HttpRequestHandlingController = new HttpRequestHandlingController ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setRequestChannel ( org.springframework.integration.http.inbound.DirectChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setViewName ( STRING ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setReplyKey ( STRING ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.integration.http.inbound.ModelAndView = org.springframework.integration.http.inbound.HttpRequestHandlingController . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.integration.http.inbound.ModelAndView . getViewName ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . size ( ) ) ; assertNull ( org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . get ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . get ( STRING ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return org.springframework.integration.http.inbound.Message<> . getPayload ( ) . toString ( ) . toUpperCase ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectChannel org.springframework.integration.http.inbound.DirectChannel = new DirectChannel ( ) ; AbstractReplyProducingMessageHandler org.springframework.integration.http.inbound.AbstractReplyProducingMessageHandler = new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return org.springframework.integration.http.inbound.Message<> . getPayload ( ) . toString ( ) . toUpperCase ( ) ; } } ; org.springframework.integration.http.inbound.DirectChannel . subscribe ( org.springframework.integration.http.inbound.AbstractReplyProducingMessageHandler ) ; HttpRequestHandlingController org.springframework.integration.http.inbound.HttpRequestHandlingController = new HttpRequestHandlingController ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setRequestChannel ( org.springframework.integration.http.inbound.DirectChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setViewName ( STRING ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setExtractReplyPayload ( false ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.integration.http.inbound.ModelAndView = org.springframework.integration.http.inbound.HttpRequestHandlingController . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.integration.http.inbound.ModelAndView . getViewName ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . size ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . get ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof Message < ? > ) ; assertEquals ( STRING , ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return org.springframework.integration.http.inbound.Message<> . getPayload ( ) . toString ( ) . toUpperCase ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.http.inbound.QueueChannel = new QueueChannel ( ) { @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.integration.http.inbound.Message<?> , long long ) { throw new java.lang.RuntimeException ( STRING ) ; } } ; HttpRequestHandlingController org.springframework.integration.http.inbound.HttpRequestHandlingController = new HttpRequestHandlingController ( false ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setRequestChannel ( org.springframework.integration.http.inbound.QueueChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContentType ( STRING ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.integration.http.inbound.ModelAndView = org.springframework.integration.http.inbound.HttpRequestHandlingController . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . size ( ) ) ; Errors org.springframework.integration.http.inbound.Errors = ( Errors ) org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . get ( STRING ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.Errors . getErrorCount ( ) ) ; ObjectError org.springframework.integration.http.inbound.ObjectError = org.springframework.integration.http.inbound.Errors . getAllErrors ( ) . get ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.ObjectError . getArguments ( ) . length ) ; assertTrue ( STRING + org.springframework.integration.http.inbound.ObjectError , ( ( java.lang.String ) org.springframework.integration.http.inbound.ObjectError . getArguments ( ) [ NUMBER ] ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.integration.http.inbound.Message<?> , long long ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectChannel org.springframework.integration.http.inbound.DirectChannel = new DirectChannel ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; AbstractReplyProducingMessageHandler org.springframework.integration.http.inbound.AbstractReplyProducingMessageHandler = new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { try { java.util.concurrent.CountDownLatch . void ( ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } return org.springframework.integration.http.inbound.Message<> . getPayload ( ) . toString ( ) . toUpperCase ( ) ; } } ; org.springframework.integration.http.inbound.DirectChannel . subscribe ( org.springframework.integration.http.inbound.AbstractReplyProducingMessageHandler ) ; final HttpRequestHandlingController org.springframework.integration.http.inbound.HttpRequestHandlingController = new HttpRequestHandlingController ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setRequestChannel ( org.springframework.integration.http.inbound.DirectChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . setViewName ( STRING ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . start ( ) ; final MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) . void ( ( ) { try { java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } java.util.concurrent.atomic.AtomicInteger . void ( org.springframework.integration.http.inbound.HttpRequestHandlingController . beforeShutdown ( ) ) ; try { MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingController . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; java.util.concurrent.atomic.AtomicBoolean . void ( org.springframework.integration.http.inbound.MockHttpServletResponse . getStatus ( ) == HttpStatus . SERVICE_UNAVAILABLE . value ( ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.http.inbound.HttpRequestHandlingControllerTests> ( ) ) . error ( STRING , java.lang.Exception ) ; } } ) ; ModelAndView org.springframework.integration.http.inbound.ModelAndView = org.springframework.integration.http.inbound.HttpRequestHandlingController . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.inbound.ModelAndView . getViewName ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . size ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.inbound.ModelAndView . getModel ( ) . get ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { try { java.util.concurrent.CountDownLatch . void ( ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } return org.springframework.integration.http.inbound.Message<> . getPayload ( ) . toString ( ) . toUpperCase ( ) ; }  <METHOD_END>
