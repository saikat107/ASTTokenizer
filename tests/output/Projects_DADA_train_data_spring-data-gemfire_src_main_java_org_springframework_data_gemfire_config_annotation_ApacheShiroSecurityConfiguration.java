<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.data.gemfire.config.annotation.BeanFactory ) throws org.springframework.data.gemfire.config.annotation.BeansException { Assert . isInstanceOf ( ListableBeanFactory .class , org.springframework.data.gemfire.config.annotation.BeanFactory ) ; this . org.springframework.data.gemfire.config.annotation.ListableBeanFactory = ( ListableBeanFactory ) org.springframework.data.gemfire.config.annotation.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.ListableBeanFactory org.springframework.data.gemfire.config.annotation.ListableBeanFactory ( ) { Assert . state ( this . org.springframework.data.gemfire.config.annotation.ListableBeanFactory != null , STRING ) ; return this . org.springframework.data.gemfire.config.annotation.ListableBeanFactory ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.gemfire.config.annotation.BeanPostProcessor org.springframework.data.gemfire.config.annotation.BeanPostProcessor ( ) { return new LifecycleBeanPostProcessor ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org . org.apache . org.apache . org.apache . org.apache.shiro.mgt.SecurityManager org.apache.shiro.mgt.SecurityManager ( GemFireCache org.springframework.data.gemfire.config.annotation.GemFireCache ) { org . org.apache . org.apache . org.apache . org.apache org.apache.shiro.mgt.SecurityManager = null ; java.util.List<org.springframework.data.gemfire.config.annotation.Realm> < Realm > java.util.List<org.springframework.data.gemfire.config.annotation.Realm> = java.util.List<org.springframework.data.gemfire.config.annotation.Realm> ( ) ; if ( ! java.util.List<org.springframework.data.gemfire.config.annotation.Realm> . isEmpty ( ) ) { org.apache.shiro.mgt.SecurityManager = org.apache.shiro.mgt.SecurityManager ( new DefaultSecurityManager ( java.util.List<org.springframework.data.gemfire.config.annotation.Realm> ) ) ; if ( ! boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } } return org.apache.shiro.mgt.SecurityManager ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.data.gemfire.config.annotation.Realm> < Realm > java.util.List<org.springframework.data.gemfire.config.annotation.Realm> ( ) { try { java.util.Map<java.lang.String,org.springframework.data.gemfire.config.annotation.Realm> < java.lang.String , Realm > java.util.Map<java.lang.String,org.springframework.data.gemfire.config.annotation.Realm> = org.springframework.data.gemfire.config.annotation.ListableBeanFactory ( ) . getBeansOfType ( Realm .class , false , true ) ; java.util.List<org.springframework.data.gemfire.config.annotation.Realm> < Realm > java.util.List<org.springframework.data.gemfire.config.annotation.Realm> = new java.util.ArrayList <> ( CollectionUtils . nullSafeMap ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.annotation.Realm> ) . values ( ) ) ; java.util.Collections . void ( java.util.List<org.springframework.data.gemfire.config.annotation.Realm> , OrderComparator . INSTANCE ) ; return java.util.List<org.springframework.data.gemfire.config.annotation.Realm> ; } catch ( java.lang.Exception java.lang.Exception ) { return java.util.Collections . java.util.List<org.springframework.data.gemfire.config.annotation.Realm> ( ) ; } }  <METHOD_END>
<METHOD_START> protected org . org.apache . org.apache . org.apache . org.apache.shiro.mgt.SecurityManager org.apache.shiro.mgt.SecurityManager ( org . org.apache . org.apache . org.apache . org.apache org.apache.shiro.mgt.SecurityManager ) { Assert . notNull ( org.apache.shiro.mgt.SecurityManager , STRING ) ; SecurityUtils . setSecurityManager ( org.apache.shiro.mgt.SecurityManager ) ; return org.apache.shiro.mgt.SecurityManager ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { SecurityService org.springframework.data.gemfire.config.annotation.SecurityService = SecurityService . getSecurityService ( ) ; if ( org.springframework.data.gemfire.config.annotation.SecurityService != null ) { java.lang.String java.lang.String = STRING ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( org.springframework.data.gemfire.config.annotation.SecurityService . getClass ( ) , java.lang.String , java.lang.Boolean .class ) ; java.lang.reflect.Field = ( java.lang.reflect.Field != null ? java.lang.reflect.Field : ReflectionUtils . findField ( org.springframework.data.gemfire.config.annotation.SecurityService . getClass ( ) , java.lang.String , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; if ( java.lang.reflect.Field != null ) { ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; ReflectionUtils . setField ( java.lang.reflect.Field , org.springframework.data.gemfire.config.annotation.SecurityService , java.lang.Boolean . java.lang.Boolean ) ; return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ConditionContext org.springframework.data.gemfire.config.annotation.ConditionContext , AnnotatedTypeMetadata org.springframework.data.gemfire.config.annotation.AnnotatedTypeMetadata ) { return ClassUtils . isPresent ( java.lang.String , org.springframework.data.gemfire.config.annotation.ConditionContext . getClassLoader ( ) ) ; }  <METHOD_END>
