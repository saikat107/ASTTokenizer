<METHOD_START> @ java.lang.Override protected void void ( ) { AnnotationConfigApplicationContext org.springframework.statemachine.data.mongodb.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.statemachine.data.mongodb.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.mongodb.MongoDbRepositoryTests.TestConfig .class ) ; org.springframework.statemachine.data.mongodb.AnnotationConfigApplicationContext . refresh ( ) ; MongoTemplate org.springframework.statemachine.data.mongodb.MongoTemplate = org.springframework.statemachine.data.mongodb.AnnotationConfigApplicationContext . getBean ( MongoTemplate .class ) ; org.springframework.statemachine.data.mongodb.MongoTemplate . dropCollection ( MongoDbRepositoryAction .class ) ; org.springframework.statemachine.data.mongodb.MongoTemplate . dropCollection ( MongoDbRepositoryGuard .class ) ; org.springframework.statemachine.data.mongodb.MongoTemplate . dropCollection ( MongoDbRepositoryState .class ) ; org.springframework.statemachine.data.mongodb.MongoTemplate . dropCollection ( MongoDbRepositoryTransition .class ) ; org.springframework.statemachine.data.mongodb.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . register ( java.lang.Class<?>[] ( ) ) ; context . register ( Config2 .class ) ; context . refresh ( ) ; MongoDbStateRepository org.springframework.statemachine.data.mongodb.MongoDbStateRepository = context . getBean ( MongoDbStateRepository .class ) ; MongoDbTransitionRepository org.springframework.statemachine.data.mongodb.MongoDbTransitionRepository = context . getBean ( MongoDbTransitionRepository .class ) ; assertThat ( org.springframework.statemachine.data.mongodb.MongoDbStateRepository . count ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.data.mongodb.MongoDbTransitionRepository . count ( ) , is ( NUMBER ) ) ; java.util.List<org.springframework.statemachine.data.mongodb.MongoDbRepositoryState> < MongoDbRepositoryState > java.util.List<org.springframework.statemachine.data.mongodb.MongoDbRepositoryState> = new java.util.ArrayList<org.springframework.statemachine.data.mongodb.MongoDbRepositoryState> <> ( ) ; org.springframework.statemachine.data.mongodb.MongoDbStateRepository . findAll ( ) . iterator ( ) . forEachRemaining ( java.util.List<org.springframework.statemachine.data.mongodb.MongoDbRepositoryState> :: add ) ; java.util.List<org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition> < MongoDbRepositoryTransition > java.util.List<org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition> = new java.util.ArrayList<org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition> <> ( ) ; org.springframework.statemachine.data.mongodb.MongoDbTransitionRepository . findAll ( ) . iterator ( ) . forEachRemaining ( java.util.List<org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition> :: add ) ; assertThat ( java.util.List<org.springframework.statemachine.data.mongodb.MongoDbRepositoryState> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition> . size ( ) , is ( NUMBER ) ) ; MongoDbRepositoryTransition org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition = java.util.List<org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition> . get ( NUMBER ) ; assertThat ( org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition . getSource ( ) , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition . getTarget ( ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . register ( java.lang.Class<?>[] ( ) ) ; context . refresh ( ) ; MongoDbStateRepository org.springframework.statemachine.data.mongodb.MongoDbStateRepository = context . getBean ( MongoDbStateRepository .class ) ; MongoDbRepositoryState org.springframework.statemachine.data.mongodb.MongoDbRepositoryState = new MongoDbRepositoryState ( STRING ) ; MongoDbRepositoryState org.springframework.statemachine.data.mongodb.MongoDbRepositoryState = new MongoDbRepositoryState ( STRING ) ; assertThat ( org.springframework.statemachine.data.mongodb.MongoDbStateRepository . count ( ) , is ( NUMBER ) ) ; org.springframework.statemachine.data.mongodb.MongoDbStateRepository . save ( org.springframework.statemachine.data.mongodb.MongoDbRepositoryState ) ; org.springframework.statemachine.data.mongodb.MongoDbStateRepository . save ( org.springframework.statemachine.data.mongodb.MongoDbRepositoryState ) ; assertThat ( org.springframework.statemachine.data.mongodb.MongoDbStateRepository . count ( ) , is ( NUMBER ) ) ; MongoDbTransitionRepository org.springframework.statemachine.data.mongodb.MongoDbTransitionRepository = context . getBean ( MongoDbTransitionRepository .class ) ; MongoDbRepositoryTransition org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition = new MongoDbRepositoryTransition ( org.springframework.statemachine.data.mongodb.MongoDbRepositoryState , org.springframework.statemachine.data.mongodb.MongoDbRepositoryState , STRING ) ; org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition . setKind ( TransitionKind . EXTERNAL ) ; org.springframework.statemachine.data.mongodb.MongoDbTransitionRepository . save ( org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition ) ; assertThat ( org.springframework.statemachine.data.mongodb.MongoDbStateRepository . count ( ) , is ( NUMBER ) ) ; MongoDbRepositoryTransition org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition = org.springframework.statemachine.data.mongodb.MongoDbTransitionRepository . findAll ( ) . iterator ( ) . next ( ) ; assertThat ( org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition . getSource ( ) . getState ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition . getTarget ( ) . getState ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition . getEvent ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.data.mongodb.MongoDbRepositoryTransition . getKind ( ) , is ( TransitionKind . EXTERNAL ) ) ; java.util.List<org.springframework.statemachine.data.mongodb.MongoDbRepositoryState> < MongoDbRepositoryState > java.util.List<org.springframework.statemachine.data.mongodb.MongoDbRepositoryState> = org.springframework.statemachine.data.mongodb.MongoDbStateRepository . findByMachineId ( STRING ) ; assertThat ( java.util.List<org.springframework.statemachine.data.mongodb.MongoDbRepositoryState> . size ( ) , is ( NUMBER ) ) ; context . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class<?> < ? > [] { org.springframework.statemachine.data.mongodb.MongoDbRepositoryTests.TestConfig .class } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.data.mongodb.AnnotationConfigApplicationContext org.springframework.statemachine.data.mongodb.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
