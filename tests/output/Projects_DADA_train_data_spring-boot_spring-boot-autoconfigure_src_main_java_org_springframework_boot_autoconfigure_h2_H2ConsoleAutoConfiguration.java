<METHOD_START> public void ( H2ConsoleProperties org.springframework.boot.autoconfigure.h2.H2ConsoleProperties ) { this . org.springframework.boot.autoconfigure.h2.H2ConsoleProperties = org.springframework.boot.autoconfigure.h2.H2ConsoleProperties ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<org.springframework.boot.autoconfigure.h2.WebServlet> < WebServlet > org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<org.springframework.boot.autoconfigure.h2.WebServlet> ( ) { java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.h2.H2ConsoleProperties . getPath ( ) ; java.lang.String java.lang.String = ( java.lang.String . boolean ( STRING ) ? java.lang.String + STRING : java.lang.String + STRING ) ; ServletRegistrationBean < WebServlet > org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<org.springframework.boot.autoconfigure.h2.WebServlet> = new ServletRegistrationBean <> ( new WebServlet ( ) , java.lang.String ) ; H2ConsoleProperties . H2ConsoleProperties H2ConsoleProperties.Settings = this . org.springframework.boot.autoconfigure.h2.H2ConsoleProperties . getSettings ( ) ; if ( H2ConsoleProperties.Settings . isTrace ( ) ) { org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<org.springframework.boot.autoconfigure.h2.WebServlet> . addInitParameter ( STRING , STRING ) ; } if ( H2ConsoleProperties.Settings . isWebAllowOthers ( ) ) { org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<org.springframework.boot.autoconfigure.h2.WebServlet> . addInitParameter ( STRING , STRING ) ; } return org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<org.springframework.boot.autoconfigure.h2.WebServlet> ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.h2.WebSecurityConfigurerAdapter org.springframework.boot.autoconfigure.h2.WebSecurityConfigurerAdapter ( ) { return new org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.H2ConsoleSecurityConfiguration.H2ConsoleSecurityConfigurer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpSecurity org.springframework.boot.autoconfigure.h2.HttpSecurity ) throws java.lang.Exception { java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.h2.H2ConsoleProperties . getPath ( ) ; java.lang.String java.lang.String = ( java.lang.String . boolean ( STRING ) ? java.lang.String + STRING : java.lang.String + STRING ) ; HttpSecurity org.springframework.boot.autoconfigure.h2.HttpSecurity = org.springframework.boot.autoconfigure.h2.HttpSecurity . antMatcher ( java.lang.String ) ; org.springframework.boot.autoconfigure.h2.HttpSecurity . csrf ( ) . disable ( ) ; org.springframework.boot.autoconfigure.h2.HttpSecurity . httpBasic ( ) ; org.springframework.boot.autoconfigure.h2.HttpSecurity . headers ( ) . frameOptions ( ) . sameOrigin ( ) ; java.lang.String [] java.lang.String[] = this . org.springframework.boot.autoconfigure.h2.SecurityProperties . getUser ( ) . getRole ( ) . toArray ( new java.lang.String [ NUMBER ] ) ; SecurityAuthorizeMode org.springframework.boot.autoconfigure.h2.SecurityAuthorizeMode = this . org.springframework.boot.autoconfigure.h2.SecurityProperties . getBasic ( ) . getAuthorizeMode ( ) ; if ( org.springframework.boot.autoconfigure.h2.SecurityAuthorizeMode == null || org.springframework.boot.autoconfigure.h2.SecurityAuthorizeMode == SecurityAuthorizeMode . ROLE ) { org.springframework.boot.autoconfigure.h2.HttpSecurity . authorizeRequests ( ) . anyRequest ( ) . hasAnyRole ( java.lang.String[] ) ; } else if ( org.springframework.boot.autoconfigure.h2.SecurityAuthorizeMode == SecurityAuthorizeMode . AUTHENTICATED ) { org.springframework.boot.autoconfigure.h2.HttpSecurity . authorizeRequests ( ) . anyRequest ( ) . authenticated ( ) ; } }  <METHOD_END>
