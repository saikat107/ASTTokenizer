<METHOD_START> @ Before public void void ( ) { LogManager . getLogger ( java.lang.Class<? extends org.springframework.integration.jms.request_reply.PipelineJmsTests> ( ) ) . setLevel ( Level . INFO ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws java.lang.Exception { ActiveMqTestUtils . prepare ( ) ; ClassPathXmlApplicationContext org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , this . java.lang.Class<? extends org.springframework.integration.jms.request_reply.PipelineJmsTests> ( ) ) ; final RequestReplyExchanger org.springframework.integration.jms.request_reply.RequestReplyExchanger = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( RequestReplyExchanger .class ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; try { for ( int int = NUMBER ; int < int ; int ++ ) { final int int = int ; java.util.concurrent.Executor . void ( ( ) { try { assertEquals ( int , org.springframework.integration.jms.request_reply.RequestReplyExchanger . exchange ( new GenericMessage < java.lang.Integer > ( int ) ) . getPayload ( ) ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; } catch ( MessageTimeoutException org.springframework.integration.jms.request_reply.MessageTimeoutException ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } finally { java.util.concurrent.CountDownLatch . void ( ) ; } } ) ; } java.util.concurrent.CountDownLatch . void ( ) ; } finally { org.springframework.integration.jms.request_reply.Log . info ( STRING + java.lang.String ) ; org.springframework.integration.jms.request_reply.Log . info ( STRING + java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.jms.request_reply.Log . info ( STRING + java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.jms.request_reply.Log . info ( STRING + java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicInteger . int ( ) > NUMBER ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( int , java.util.concurrent.atomic.AtomicInteger . int ( ) + java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . close ( ) ; } }  <METHOD_END>
