<METHOD_START> @ Bean public org.springframework.web.socket.config.annotation.HandlerMapping org.springframework.web.socket.config.annotation.HandlerMapping ( ) { ServletWebSocketHandlerRegistry org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistry = new ServletWebSocketHandlerRegistry ( org.springframework.web.socket.config.annotation.ThreadPoolTaskScheduler ( ) ) ; void ( org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistry ) ; return org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistry . getHandlerMapping ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( WebSocketHandlerRegistry org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry ) {	}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.socket.config.annotation.ThreadPoolTaskScheduler org.springframework.web.socket.config.annotation.ThreadPoolTaskScheduler ( ) { ThreadPoolTaskScheduler org.springframework.web.socket.config.annotation.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.web.socket.config.annotation.ThreadPoolTaskScheduler . setThreadNamePrefix ( STRING ) ; org.springframework.web.socket.config.annotation.ThreadPoolTaskScheduler . setPoolSize ( java.lang.Runtime . java.lang.Runtime ( ) . int ( ) ) ; org.springframework.web.socket.config.annotation.ThreadPoolTaskScheduler . setRemoveOnCancelPolicy ( true ) ; return org.springframework.web.socket.config.annotation.ThreadPoolTaskScheduler ; }  <METHOD_END>
