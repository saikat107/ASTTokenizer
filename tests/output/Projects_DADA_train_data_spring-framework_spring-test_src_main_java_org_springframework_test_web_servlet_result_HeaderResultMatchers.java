<METHOD_START> protected void ( ) {	}  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String , final Matcher < ? super java.lang.String > org.springframework.test.web.servlet.result.Matcher<? super java.lang.String> ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { assertThat ( STRING + java.lang.String , org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getHeader ( java.lang.String ) , org.springframework.test.web.servlet.result.Matcher<> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { assertThat ( STRING + java.lang.String , org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getHeader ( java.lang.String ) , org.springframework.test.web.servlet.result.Matcher<> ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String , final Matcher < java.lang.Iterable<java.lang.String> < java.lang.String > > org.springframework.test.web.servlet.result.Matcher<java.lang.Iterable<java.lang.String>> ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getHeaders ( java.lang.String ) ; assertThat ( STRING + java.lang.String , java.util.List<java.lang.String> , org.springframework.test.web.servlet.result.Matcher<java.lang.Iterable<java.lang.String>> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getHeaders ( java.lang.String ) ; assertThat ( STRING + java.lang.String , java.util.List<java.lang.String> , org.springframework.test.web.servlet.result.Matcher<java.lang.Iterable<java.lang.String>> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { assertEquals ( STRING + java.lang.String , java.lang.String , org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getHeader ( java.lang.String ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { assertEquals ( STRING + java.lang.String , java.lang.String , org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getHeader ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String , final java.lang.String ... java.lang.String[] ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getHeaderValues ( java.lang.String ) ; assertEquals ( STRING + java.lang.String , java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) , java.util.List<java.lang.Object> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getHeaderValues ( java.lang.String ) ; assertEquals ( STRING + java.lang.String , java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) , java.util.List<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { assertTrue ( STRING + java.lang.String , ! org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . containsHeader ( java.lang.String ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { assertTrue ( STRING + java.lang.String , ! org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . containsHeader ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String , final long long ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; assertTrue ( STRING + java.lang.String , org.springframework.test.web.servlet.result.MockHttpServletResponse . containsHeader ( java.lang.String ) ) ; assertEquals ( STRING + java.lang.String , long , java.lang.Long . long ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getHeader ( java.lang.String ) ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; assertTrue ( STRING + java.lang.String , org.springframework.test.web.servlet.result.MockHttpServletResponse . containsHeader ( java.lang.String ) ) ; assertEquals ( STRING + java.lang.String , long , java.lang.Long . long ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getHeader ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String , final long long ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; java.text.SimpleDateFormat . void ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; java.lang.String java.lang.String = java.text.SimpleDateFormat . java.lang.String ( new java.util.Date ( long ) ) ; MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; assertTrue ( STRING + java.lang.String , org.springframework.test.web.servlet.result.MockHttpServletResponse . containsHeader ( java.lang.String ) ) ; assertEquals ( STRING + java.lang.String , java.lang.String , org.springframework.test.web.servlet.result.MockHttpServletResponse . getHeader ( java.lang.String ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; java.text.SimpleDateFormat . void ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; java.lang.String java.lang.String = java.text.SimpleDateFormat . java.lang.String ( new java.util.Date ( long ) ) ; MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; assertTrue ( STRING + java.lang.String , org.springframework.test.web.servlet.result.MockHttpServletResponse . containsHeader ( java.lang.String ) ) ; assertEquals ( STRING + java.lang.String , java.lang.String , org.springframework.test.web.servlet.result.MockHttpServletResponse . getHeader ( java.lang.String ) ) ; }  <METHOD_END>
