<METHOD_START> public void ( RequestMethod ... org.springframework.web.reactive.result.condition.RequestMethod[] ) { this( java.util.List<org.springframework.web.reactive.result.condition.RequestMethod> ( org.springframework.web.reactive.result.condition.RequestMethod[] ) ); }  <METHOD_END>
<METHOD_START> private void ( java.util.Collection<org.springframework.web.reactive.result.condition.RequestMethod> < RequestMethod > java.util.Collection<org.springframework.web.reactive.result.condition.RequestMethod> ) { this . java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> = java.util.Collections . java.util.Set<java.lang.Object> ( new java.util.LinkedHashSet <> ( java.util.Collection<org.springframework.web.reactive.result.condition.RequestMethod> ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.List<org.springframework.web.reactive.result.condition.RequestMethod> < RequestMethod > java.util.List<org.springframework.web.reactive.result.condition.RequestMethod> ( RequestMethod ... org.springframework.web.reactive.result.condition.RequestMethod[] ) { return ( org.springframework.web.reactive.result.condition.RequestMethod[] != null ? java.util.Arrays . java.util.List ( org.springframework.web.reactive.result.condition.RequestMethod[] ) : java.util.Collections . java.util.List<org.springframework.web.reactive.result.condition.RequestMethod> ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> < RequestMethod > java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> ( ) { return this . java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<org.springframework.web.reactive.result.condition.RequestMethod> < RequestMethod > java.util.Collection<org.springframework.web.reactive.result.condition.RequestMethod> ( ) { return this . java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition ( org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition ) { java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> < RequestMethod > java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> = new java.util.LinkedHashSet <> ( this . java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> ) ; java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> . addAll ( org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition . java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> ) ; return new org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition ( java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition ( ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange ) { if ( CorsUtils . isPreFlightRequest ( org.springframework.web.reactive.result.condition.ServerWebExchange . getRequest ( ) ) ) { return org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange . getRequest ( ) ) ; } if ( java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> ( ) . isEmpty ( ) ) { if ( RequestMethod . OPTIONS . name ( ) . equals ( org.springframework.web.reactive.result.condition.ServerWebExchange . getRequest ( ) . getMethod ( ) . name ( ) ) ) { return null ; } return this ; } return org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange . getRequest ( ) . getMethod ( ) . name ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition ( ServerHttpRequest org.springframework.web.reactive.result.condition.ServerHttpRequest ) { if ( java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> ( ) . isEmpty ( ) ) { return this ; } HttpMethod org.springframework.web.reactive.result.condition.HttpMethod = org.springframework.web.reactive.result.condition.ServerHttpRequest . getHeaders ( ) . getAccessControlRequestMethod ( ) ; return org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition ( org.springframework.web.reactive.result.condition.HttpMethod . name ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition ( java.lang.String java.lang.String ) { HttpMethod org.springframework.web.reactive.result.condition.HttpMethod = HttpMethod . resolve ( java.lang.String ) ; if ( org.springframework.web.reactive.result.condition.HttpMethod != null ) { for ( RequestMethod org.springframework.web.reactive.result.condition.RequestMethod : java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> ( ) ) { if ( org.springframework.web.reactive.result.condition.HttpMethod . matches ( org.springframework.web.reactive.result.condition.RequestMethod . name ( ) ) ) { return new org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition ( org.springframework.web.reactive.result.condition.RequestMethod ) ; } } if ( org.springframework.web.reactive.result.condition.HttpMethod == HttpMethod . HEAD && java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> ( ) . contains ( RequestMethod . GET ) ) { return org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition , ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange ) { return ( org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition . java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> . size ( ) - this . java.util.Set<org.springframework.web.reactive.result.condition.RequestMethod> . size ( ) ) ; }  <METHOD_END>
