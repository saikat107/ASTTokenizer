<METHOD_START> public void ( ) { void ( Status . DOWN , Status . OUT_OF_SERVICE , Status . UP , Status . UNKNOWN ) ; }  <METHOD_END>
<METHOD_START> public void void ( Status ... org.springframework.boot.actuate.health.Status[] ) { java.lang.String [] java.lang.String[] = new java.lang.String [ statusOrder . length ] ; for ( int int = NUMBER ; int < statusOrder . length ; int ++ ) { java.lang.String[] [ int ] = org.springframework.boot.actuate.health.Status[] [ int ] . getCode ( ) ; } void ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { Assert . notNull ( java.util.List<java.lang.String> , STRING ) ; this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.actuate.health.Status org.springframework.boot.actuate.health.Status ( java.util.List<org.springframework.boot.actuate.health.Status> < Status > java.util.List<org.springframework.boot.actuate.health.Status> ) { java.util.List<org.springframework.boot.actuate.health.Status> < Status > java.util.List<org.springframework.boot.actuate.health.Status> = new java.util.ArrayList<org.springframework.boot.actuate.health.Status> <> ( ) ; for ( Status org.springframework.boot.actuate.health.Status : java.util.List<org.springframework.boot.actuate.health.Status> ) { if ( this . java.util.List<java.lang.String> . boolean ( org.springframework.boot.actuate.health.Status . getCode ( ) ) ) { java.util.List<org.springframework.boot.actuate.health.Status> . add ( org.springframework.boot.actuate.health.Status ) ; } } if ( java.util.List<org.springframework.boot.actuate.health.Status> . isEmpty ( ) ) { return Status . UNKNOWN ; } java.util.Collections . void ( java.util.List<org.springframework.boot.actuate.health.Status> , new org.springframework.boot.actuate.health.OrderedHealthAggregator.StatusComparator ( this . java.util.List<java.lang.String> ) ) ; return java.util.List<org.springframework.boot.actuate.health.Status> . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( Status org.springframework.boot.actuate.health.Status , Status org.springframework.boot.actuate.health.Status ) { int int = this . java.util.List<java.lang.String> . int ( org.springframework.boot.actuate.health.Status . getCode ( ) ) ; int int = this . java.util.List<java.lang.String> . int ( org.springframework.boot.actuate.health.Status . getCode ( ) ) ; return ( int < int ? - NUMBER : ( int == int ? org.springframework.boot.actuate.health.Status . getCode ( ) . compareTo ( org.springframework.boot.actuate.health.Status . getCode ( ) ) : NUMBER ) ) ; }  <METHOD_END>
