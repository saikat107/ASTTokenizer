<METHOD_START> void ( SinglePublishedArtifact org.springframework.boot.gradle.plugin.SinglePublishedArtifact ) { this . org.springframework.boot.gradle.plugin.SinglePublishedArtifact = org.springframework.boot.gradle.plugin.SinglePublishedArtifact ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends org.springframework.boot.gradle.plugin.Plugin<? extends org.springframework.boot.gradle.plugin.Project>> < ? extends Plugin < ? extends Project > > java.lang.Class<? extends org.springframework.boot.gradle.plugin.Plugin<? extends org.springframework.boot.gradle.plugin.Project>> ( ) { return WarPlugin .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Project org.springframework.boot.gradle.plugin.Project ) { BootWar org.springframework.boot.gradle.plugin.BootWar = org.springframework.boot.gradle.plugin.Project . getTasks ( ) . create ( SpringBootPlugin . BOOT_WAR_TASK_NAME , BootWar .class ) ; org.springframework.boot.gradle.plugin.BootWar . providedClasspath ( org.springframework.boot.gradle.plugin.Configuration ( org.springframework.boot.gradle.plugin.Project ) ) ; ArchivePublishArtifact org.springframework.boot.gradle.plugin.ArchivePublishArtifact = new ArchivePublishArtifact ( org.springframework.boot.gradle.plugin.BootWar ) ; this . org.springframework.boot.gradle.plugin.SinglePublishedArtifact . addCandidate ( org.springframework.boot.gradle.plugin.ArchivePublishArtifact ) ; org.springframework.boot.gradle.plugin.Project . getComponents ( ) . add ( new SpringBootSoftwareComponent ( org.springframework.boot.gradle.plugin.ArchivePublishArtifact , SpringBootPlugin . BOOT_WEB_SOFTWARE_COMPONENT_NAME ) ) ; org.springframework.boot.gradle.plugin.BootWar . conventionMapping ( STRING , new MainClassConvention ( org.springframework.boot.gradle.plugin.Project , org.springframework.boot.gradle.plugin.BootWar :: getClasspath ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.gradle.plugin.Configuration org.springframework.boot.gradle.plugin.Configuration ( Project org.springframework.boot.gradle.plugin.Project ) { return org.springframework.boot.gradle.plugin.Project . getConfigurations ( ) . getByName ( WarPlugin . PROVIDED_RUNTIME_CONFIGURATION_NAME ) ; }  <METHOD_END>
