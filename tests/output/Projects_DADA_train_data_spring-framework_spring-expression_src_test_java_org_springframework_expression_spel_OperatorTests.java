<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Double .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Double .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.Integer .class ) ; evaluate ( STRING , STRING , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Double .class ) ; evaluate ( STRING , NUMBER , java.lang.Float .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { evaluate ( STRING , STRING , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Float .class ) ; evaluate ( STRING , NUMBER , java.lang.Double .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; SpelExpression org.springframework.expression.spel.SpelExpression = ( SpelExpression ) parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelExpression . toStringAST ( ) ) ; org.springframework.expression.spel.SpelExpression = ( SpelExpression ) parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelExpression . toStringAST ( ) ) ; evaluate ( STRING , NUMBER , java.lang.Double .class ) ; evaluate ( STRING , NUMBER , java.lang.Long .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluateAndCheckError ( STRING , SpelMessage . OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , - NUMBER , java.lang.Float .class ) ; evaluateAndCheckError ( STRING , SpelMessage . OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES ) ; evaluateAndCheckError ( STRING , SpelMessage . OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES ) ; SpelExpression org.springframework.expression.spel.SpelExpression = ( SpelExpression ) parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelExpression . toStringAST ( ) ) ; org.springframework.expression.spel.SpelExpression = ( SpelExpression ) parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelExpression . toStringAST ( ) ) ; evaluate ( STRING , - NUMBER , java.lang.Double .class ) ; evaluate ( STRING , - NUMBER , java.lang.Long .class ) ; evaluate ( STRING , - NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluateAndCheckError ( STRING , SpelMessage . OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Long .class ) ; evaluate ( STRING , NUMBER , java.lang.Float .class ) ; evaluate ( STRING , NUMBER , java.lang.Double .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluateAndCheckError ( STRING , SpelMessage . OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Float .class ) ; evaluate ( STRING , NUMBER , java.lang.Long .class ) ; evaluate ( STRING , NUMBER , java.lang.Float .class ) ; evaluate ( STRING , NUMBER , java.lang.Long .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluateAndCheckError ( STRING , SpelMessage . OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluateAndAskForReturnType ( STRING , new java.lang.Double ( NUMBER ) , java.lang.Double .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluateAndAskForReturnType ( STRING , new java.lang.Float ( NUMBER ) , java.lang.Float .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , NUMBER , java.lang.Double .class ) ; evaluate ( STRING , - NUMBER , java.lang.Double .class ) ; evaluate ( STRING , NUMBER , java.lang.Double .class ) ; evaluate ( STRING , NUMBER , java.lang.Double .class ) ; evaluate ( STRING , NUMBER , java.lang.Double .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Operator org.springframework.expression.spel.Operator = org.springframework.expression.spel.Operator ( ( SpelExpression ) parser . parseExpression ( STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Operator . getOperatorName ( ) ) ; org.springframework.expression.spel.Operator = org.springframework.expression.spel.Operator ( ( SpelExpression ) parser . parseExpression ( STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Operator . getOperatorName ( ) ) ; org.springframework.expression.spel.Operator = org.springframework.expression.spel.Operator ( ( SpelExpression ) parser . parseExpression ( STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Operator . getOperatorName ( ) ) ; org.springframework.expression.spel.Operator = org.springframework.expression.spel.Operator ( ( SpelExpression ) parser . parseExpression ( STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Operator . getOperatorName ( ) ) ; org.springframework.expression.spel.Operator = org.springframework.expression.spel.Operator ( ( SpelExpression ) parser . parseExpression ( STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Operator . getOperatorName ( ) ) ; org.springframework.expression.spel.Operator = org.springframework.expression.spel.Operator ( ( SpelExpression ) parser . parseExpression ( STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Operator . getOperatorName ( ) ) ; org.springframework.expression.spel.Operator = org.springframework.expression.spel.Operator ( ( SpelExpression ) parser . parseExpression ( STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Operator . getOperatorName ( ) ) ; org.springframework.expression.spel.Operator = org.springframework.expression.spel.Operator ( ( SpelExpression ) parser . parseExpression ( STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Operator . getOperatorName ( ) ) ; org.springframework.expression.spel.Operator = org.springframework.expression.spel.Operator ( ( SpelExpression ) parser . parseExpression ( STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Operator . getOperatorName ( ) ) ; org.springframework.expression.spel.Operator = org.springframework.expression.spel.Operator ( ( SpelExpression ) parser . parseExpression ( STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Operator . getOperatorName ( ) ) ; org.springframework.expression.spel.Operator = org.springframework.expression.spel.Operator ( ( SpelExpression ) parser . parseExpression ( STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Operator . getOperatorName ( ) ) ; org.springframework.expression.spel.Operator = org.springframework.expression.spel.Operator ( ( SpelExpression ) parser . parseExpression ( STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Operator . getOperatorName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluateAndCheckError ( STRING , SpelMessage . OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES ) ; evaluateAndCheckError ( STRING , SpelMessage . OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Double .class ) ; evaluate ( STRING , NUMBER , java.lang.Long .class ) ; evaluate ( STRING , NUMBER , java.lang.Long .class ) ; evaluate ( STRING , new java.math.BigDecimal ( STRING ) , java.math.BigDecimal .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Double .class ) ; evaluate ( STRING , - NUMBER , java.lang.Double .class ) ; evaluate ( STRING , NUMBER , java.lang.Double .class ) ; evaluate ( STRING , NUMBER , java.lang.Double .class ) ; evaluate ( STRING , NUMBER , java.lang.Double .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Double .class ) ; evaluate ( STRING , - NUMBER , java.lang.Double .class ) ; evaluate ( STRING , NUMBER , java.lang.Float .class ) ; evaluate ( STRING , NUMBER , java.lang.Float .class ) ; evaluate ( STRING , NUMBER , java.lang.Float .class ) ; evaluate ( STRING , NUMBER , java.lang.Double .class ) ; evaluate ( STRING , NUMBER , java.lang.Double .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , NUMBER , java.lang.Long .class ) ; evaluate ( STRING , NUMBER , java.lang.Long .class ) ; evaluate ( STRING , - NUMBER , java.lang.Long .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , new java.math.BigInteger ( STRING ) , java.math.BigInteger .class ) ; evaluate ( STRING , new java.math.BigInteger ( STRING ) , java.math.BigInteger .class ) ; evaluate ( STRING , new java.math.BigInteger ( STRING ) , java.math.BigInteger .class ) ; evaluate ( STRING , new java.math.BigInteger ( STRING ) , java.math.BigInteger .class ) ; evaluate ( STRING , new java.math.BigInteger ( STRING ) , java.math.BigInteger .class ) ; evaluate ( STRING , new java.math.BigInteger ( STRING ) , java.math.BigInteger .class ) ; evaluate ( STRING , new java.math.BigInteger ( STRING ) , java.math.BigInteger .class ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.Operator org.springframework.expression.spel.Operator ( SpelExpression org.springframework.expression.spel.SpelExpression ) { SpelNode org.springframework.expression.spel.SpelNode = org.springframework.expression.spel.SpelExpression . getAST ( ) ; return org.springframework.expression.spel.Operator ( org.springframework.expression.spel.SpelNode ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.Operator org.springframework.expression.spel.Operator ( SpelNode org.springframework.expression.spel.SpelNode ) { if ( org.springframework.expression.spel.SpelNode instanceof Operator ) { return ( Operator ) org.springframework.expression.spel.SpelNode ; } int int = org.springframework.expression.spel.SpelNode . getChildCount ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { Operator org.springframework.expression.spel.Operator = org.springframework.expression.spel.Operator ( org.springframework.expression.spel.SpelNode . getChild ( int ) ) ; if ( org.springframework.expression.spel.Operator != null ) { return org.springframework.expression.spel.Operator ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.expression.spel.OperatorTests.BaseComparable org.springframework.expression.spel.OperatorTests.BaseComparable ) { return NUMBER ; }  <METHOD_END>
