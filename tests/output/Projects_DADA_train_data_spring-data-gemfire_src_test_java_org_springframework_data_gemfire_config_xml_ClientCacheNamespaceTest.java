<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean . getCacheXml ( ) . toString ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean . getProperties ( ) , is ( equalTo ( java.util.Properties ) ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean . getCopyOnRead ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean . getCriticalHeapPercentage ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean . getDurableClientId ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean . getDurableClientTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean . getEvictionHeapPercentage ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean . isKeepAlive ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean . getPdxIgnoreUnreadFields ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean . getPdxPersistent ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean . getPdxReadSerialized ( ) , is ( true ) ) ; assertThat ( ( PdxSerializer ) org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean . getPdxSerializer ( ) , is ( equalTo ( org.springframework.data.gemfire.config.xml.PdxSerializer ) ) ) ; assertThat ( TestUtils .< java.lang.String > readField ( STRING , org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean . getReadyForEvents ( ) , is ( false ) ) ; }  <METHOD_END>
