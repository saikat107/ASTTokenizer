<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.integration.dsl.flows.ListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.dsl.flows.ListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.dsl.flows.ListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.dsl.flows.ListableBeanFactory . containsBean ( STRING ) ) ; QueueChannel org.springframework.integration.dsl.flows.QueueChannel = new QueueChannel ( ) ; Message < java.lang.String > org.springframework.integration.dsl.flows.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.dsl.flows.QueueChannel ) . build ( ) ; try { this . org.springframework.integration.dsl.flows.MessageChannel . send ( org.springframework.integration.dsl.flows.Message<java.lang.String> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( MessageDeliveryException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) , instanceOf ( MessageDispatchingException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , containsString ( STRING ) ) ; } this . org.springframework.integration.dsl.flows.IntegrationFlowTests.ControlBusGateway . void ( STRING ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; this . org.springframework.integration.dsl.flows.SubscribableChannel . subscribe ( m -> used . set ( true ) ) ; this . org.springframework.integration.dsl.flows.MessageChannel . send ( org.springframework.integration.dsl.flows.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.dsl.flows.Message<?> = org.springframework.integration.dsl.flows.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.dsl.flows.Message<?> = this . org.springframework.integration.dsl.flows.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; this . org.springframework.integration.dsl.flows.MessageChannel . send ( new GenericMessage < java.lang.Object > ( NUMBER ) ) ; Message < ? > org.springframework.integration.dsl.flows.Message<?> = this . org.springframework.integration.dsl.flows.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericMessage < java.lang.String > org.springframework.integration.dsl.flows.GenericMessage<java.lang.String> = new GenericMessage <> ( STRING ) ; this . org.springframework.integration.dsl.flows.PollableChannel . send ( org.springframework.integration.dsl.flows.GenericMessage<java.lang.String> ) ; Message < ? > org.springframework.integration.dsl.flows.Message<?> = this . org.springframework.integration.dsl.flows.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; assertTrue ( this . org.springframework.integration.dsl.flows.ListableBeanFactory . containsBean ( STRING ) ) ; assertThat ( this . org.springframework.integration.dsl.flows.ListableBeanFactory . getBean ( STRING ) , instanceOf ( FixedSubscriberChannel .class ) ) ; try { this . org.springframework.integration.dsl.flows.MessageChannel . send ( org.springframework.integration.dsl.flows.GenericMessage<java.lang.String> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( MessageDeliveryException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) , instanceOf ( MessageDispatchingException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , containsString ( STRING ) ) ; } this . org.springframework.integration.dsl.flows.IntegrationFlowTests.ControlBusGateway . void ( STRING ) ; this . org.springframework.integration.dsl.flows.MessageChannel . send ( org.springframework.integration.dsl.flows.GenericMessage<java.lang.String> ) ; org.springframework.integration.dsl.flows.Message<?> = this . org.springframework.integration.dsl.flows.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; assertTrue ( this . org.springframework.integration.dsl.flows.IntegrationFlowTests.DelayedAdvice . java.lang.Boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.dsl.flows.ConfigurableApplicationContext = null ; try { org.springframework.integration.dsl.flows.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.integration.dsl.flows.IntegrationFlowTests.InvalidLastMessageChannelFlowContext .class ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( BeanCreationException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , containsString ( STRING + STRING ) ) ; } finally { if ( org.springframework.integration.dsl.flows.ConfigurableApplicationContext != null ) { org.springframework.integration.dsl.flows.ConfigurableApplicationContext . close ( ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.dsl.flows.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.dsl.flows.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( MessageHeaders . REPLY_CHANNEL , org.springframework.integration.dsl.flows.QueueChannel ) . build ( ) ; this . org.springframework.integration.dsl.flows.MessageChannel . send ( org.springframework.integration.dsl.flows.Message<> ) ; Message < ? > org.springframework.integration.dsl.flows.Message<?> = org.springframework.integration.dsl.flows.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.dsl.flows.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.dsl.flows.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( MessageHeaders . REPLY_CHANNEL , org.springframework.integration.dsl.flows.QueueChannel ) . build ( ) ; this . org.springframework.integration.dsl.flows.MessageChannel . send ( org.springframework.integration.dsl.flows.Message<> ) ; Message < ? > org.springframework.integration.dsl.flows.Message<?> = org.springframework.integration.dsl.flows.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; org.springframework.integration.dsl.flows.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( MessageHeaders . REPLY_CHANNEL , org.springframework.integration.dsl.flows.QueueChannel ) . build ( ) ; this . org.springframework.integration.dsl.flows.MessageChannel . send ( org.springframework.integration.dsl.flows.Message<> ) ; assertNull ( org.springframework.integration.dsl.flows.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.dsl.flows.QueueChannel = new QueueChannel ( ) ; Message < java.lang.String > org.springframework.integration.dsl.flows.Message<java.lang.String> = MutableMessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.dsl.flows.QueueChannel ) . build ( ) ; this . org.springframework.integration.dsl.flows.MessageChannel . send ( org.springframework.integration.dsl.flows.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.dsl.flows.Message<?> = org.springframework.integration.dsl.flows.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertSame ( org.springframework.integration.dsl.flows.Message<java.lang.String> , org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( NUMBER , this . org.springframework.integration.dsl.flows.MessageStore . getMessageCount ( ) ) ; assertSame ( org.springframework.integration.dsl.flows.Message<java.lang.String> , this . org.springframework.integration.dsl.flows.MessageStore . getMessage ( org.springframework.integration.dsl.flows.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PollableChannel org.springframework.integration.dsl.flows.PollableChannel = new QueueChannel ( ) ; Message < java.lang.String > org.springframework.integration.dsl.flows.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.dsl.flows.PollableChannel ) . build ( ) ; this . org.springframework.integration.dsl.flows.MessageChannel . send ( org.springframework.integration.dsl.flows.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.dsl.flows.Message<?> = org.springframework.integration.dsl.flows.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.dsl.flows.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.dsl.flows.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.dsl.flows.PollableChannel ) . build ( ) ; this . org.springframework.integration.dsl.flows.MessageChannel . send ( org.springframework.integration.dsl.flows.Message<java.lang.String> ) ; org.springframework.integration.dsl.flows.Message<?> = org.springframework.integration.dsl.flows.PollableChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.dsl.flows.Message<> ) ; org.springframework.integration.dsl.flows.Message<?> = this . org.springframework.integration.dsl.flows.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertThat ( org.springframework.integration.dsl.flows.Message<> , instanceOf ( ErrorMessage .class ) ) ; assertThat ( org.springframework.integration.dsl.flows.Message<> . getPayload ( ) , instanceOf ( MessageRejectedException .class ) ) ; assertThat ( ( ( java.lang.Exception ) org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) . java.lang.String ( ) , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.dsl.flows.SubscribableChannel . send ( new GenericMessage <> ( STRING ) ) ; this . org.springframework.integration.dsl.flows.SubscribableChannel . send ( new GenericMessage <> ( STRING ) ) ; Message < ? > org.springframework.integration.dsl.flows.Message<?> = this . org.springframework.integration.dsl.flows.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.dsl.flows.QueueChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.dsl.flows.SubscribableChannel . send ( new GenericMessage <> ( STRING ) ) ; this . org.springframework.integration.dsl.flows.SubscribableChannel . send ( new GenericMessage <> ( STRING ) ) ; org.springframework.integration.dsl.flows.Message<?> = this . org.springframework.integration.dsl.flows.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.dsl.flows.QueueChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.dsl.flows.SubscribableChannel . send ( new GenericMessage <> ( STRING ) ) ; this . org.springframework.integration.dsl.flows.SubscribableChannel . send ( new GenericMessage <> ( STRING ) ) ; org.springframework.integration.dsl.flows.Message<?> = this . org.springframework.integration.dsl.flows.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.dsl.flows.QueueChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.dsl.flows.SubscribableChannel . send ( new GenericMessage <> ( STRING ) ) ; this . org.springframework.integration.dsl.flows.SubscribableChannel . send ( new GenericMessage <> ( STRING ) ) ; org.springframework.integration.dsl.flows.Message<?> = this . org.springframework.integration.dsl.flows.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; org.springframework.integration.dsl.flows.Message<?> = this . org.springframework.integration.dsl.flows.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; this . org.springframework.integration.dsl.flows.SubscribableChannel . send ( new GenericMessage <> ( STRING ) ) ; org.springframework.integration.dsl.flows.Message<?> = this . org.springframework.integration.dsl.flows.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.dsl.flows.MessageChannel . send ( new GenericMessage <> ( NUMBER ) ) ; Message < ? > org.springframework.integration.dsl.flows.Message<?> = this . org.springframework.integration.dsl.flows.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.dsl.flows.Message<?> = this . org.springframework.integration.dsl.flows.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.dsl.flows.Message<?> = this . org.springframework.integration.dsl.flows.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flows.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , this . org.springframework.integration.dsl.flows.IntegrationFlowTests.ErrorRecovererFlowGateway . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return IntegrationFlows . from ( org.springframework.integration.dsl.flows.IntegrationFlowTests.ControlBusGateway .class ) . controlBus ( ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = PollerMetadata . DEFAULT_POLLER ) public org.springframework.integration.dsl.flows.PollerMetadata org.springframework.integration.dsl.flows.PollerMetadata ( ) { return Pollers . fixedRate ( NUMBER ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = IntegrationContextUtils . TASK_SCHEDULER_BEAN_NAME ) public org.springframework.integration.dsl.flows.TaskScheduler org.springframework.integration.dsl.flows.TaskScheduler ( ) { ThreadPoolTaskScheduler org.springframework.integration.dsl.flows.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.dsl.flows.ThreadPoolTaskScheduler . setPoolSize ( NUMBER ) ; return org.springframework.integration.dsl.flows.ThreadPoolTaskScheduler ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.MessageChannel org.springframework.integration.dsl.flows.MessageChannel ( ) { return MessageChannels . direct ( ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.MessageChannel org.springframework.integration.dsl.flows.MessageChannel ( ) { return MessageChannels . publishSubscribe ( ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.Advice org.springframework.integration.dsl.flows.Advice ( ) { ExpressionEvaluatingRequestHandlerAdvice org.springframework.integration.dsl.flows.ExpressionEvaluatingRequestHandlerAdvice = new ExpressionEvaluatingRequestHandlerAdvice ( ) ; org.springframework.integration.dsl.flows.ExpressionEvaluatingRequestHandlerAdvice . setOnSuccessExpressionString ( STRING ) ; org.springframework.integration.dsl.flows.ExpressionEvaluatingRequestHandlerAdvice . setSuccessChannel ( this . org.springframework.integration.dsl.flows.PollableChannel ) ; return org.springframework.integration.dsl.flows.ExpressionEvaluatingRequestHandlerAdvice ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return IntegrationFlows . from ( this . org.springframework.integration.dsl.flows.MessageChannel ) . filter ( p -> p instanceof String , e -> e . id ( STRING ) . discardFlow ( df -> df . transform ( String .class , STRING :: concat ) . channel ( MessageChannels . queue ( STRING ) ) ) ) . channel ( STRING ) . fixedSubscriberChannel ( ) .< java.lang.String , java.lang.Integer > transform ( java.lang.Integer :: parseInt ) . transform ( new PayloadSerializingTransformer ( ) , c -> c . autoStartup ( false ) . id ( STRING ) ) . channel ( MessageChannels . queue ( new SimpleMessageStore ( ) , STRING ) ) . transform ( new PayloadDeserializingTransformer ( ) ) . filter ( STRING , e -> e . id ( STRING ) ) . channel ( org.springframework.integration.dsl.flows.MessageChannel ( ) ) . transform ( ( java.lang.Integer p ) -> p * NUMBER , c -> c . advice ( this . expressionAdvice ( ) ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.MessageChannel org.springframework.integration.dsl.flows.MessageChannel ( ) { return MessageChannels . publishSubscribe ( ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return flow -> flow . publishSubscribeChannel ( Executors . newCachedThreadPool ( ) , s -> s . subscribe ( f -> f .< Integer > handle ( ( p , h ) -> p / NUMBER ) . channel ( MessageChannels . queue ( STRING ) ) ) . subscribe ( f -> f .< Integer > handle ( ( p , h ) -> p * NUMBER ) . channel ( MessageChannels . queue ( STRING ) ) ) ) .< Integer > handle ( ( p , h ) -> p * NUMBER ) . channel ( MessageChannels . queue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) . wireTap ( STRING , wt -> wt . selector ( m -> m . getPayload ( ) . equals ( STRING ) ) ) . channel ( STRING ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return f -> f . wireTap ( STRING , wt -> wt . selector ( m -> m . getPayload ( ) . equals ( STRING ) ) ) . channel ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return f -> f . transform ( STRING ) . wireTap ( STRING , wt -> wt . selector ( STRING ) ) . channel ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) . wireTap ( org.springframework.integration.dsl.flows.QueueChannel ( ) ) . channel ( STRING ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return f -> f . wireTap ( sf -> sf .< String , String > transform ( String :: toUpperCase ) . channel ( MessageChannels . queue ( STRING ) ) ) . channel ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.QueueChannel org.springframework.integration.dsl.flows.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator ( inputChannel = STRING ) public void void ( java.lang.Object java.lang.Object ) { assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.QueueChannel org.springframework.integration.dsl.flows.QueueChannel ( ) { return MessageChannels . queue ( ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return IntegrationFlows . from ( MessageChannels . queue ( STRING ) ) . channel ( MessageChannels . queue ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) . bridge ( c -> c . autoStartup ( false ) . id ( STRING ) ) . fixedSubscriberChannel ( ) . delay ( STRING , d -> d . delayExpression ( STRING ) . advice ( this . delayedAdvice ) . messageStore ( this . messageStore ( ) ) ) . channel ( MessageChannels . queue ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.SimpleMessageStore org.springframework.integration.dsl.flows.SimpleMessageStore ( ) { return new SimpleMessageStore ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) . claimCheckIn ( this . org.springframework.integration.dsl.flows.SimpleMessageStore ( ) ) . claimCheckOut ( this . org.springframework.integration.dsl.flows.SimpleMessageStore ( ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.integration.dsl.flows.MethodInvocation ) throws java.lang.Throwable { this . java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return org.springframework.integration.dsl.flows.MethodInvocation . proceed ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( ) { return java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) . handle ( this . org.springframework.integration.dsl.flows.MessageHandler ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) . filter ( STRING :: boolean ) . transform ( STRING :: java.lang.String ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) . gateway ( STRING , g -> g . errorChannel ( STRING ) . replyTimeout ( NUMBER ) ) . gateway ( f -> f . transform ( STRING :: concat ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) . filter ( STRING :: boolean , f -> f . throwExceptionOnRejection ( true ) ) .< java.lang.String , java.lang.String > transform ( java.lang.String :: toUpperCase ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.MessageChannel org.springframework.integration.dsl.flows.MessageChannel ( ) { return MessageChannels . queue ( ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return IntegrationFlows . from ( org.springframework.integration.dsl.flows.IntegrationFlowTests.ErrorRecovererFlowGateway .class ) . handle ( ( GenericHandler < ? > ) ( p , h ) -> { throw new RuntimeException ( STRING ) ; } , e -> e . advice ( retryAdvice ( ) ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.RequestHandlerRetryAdvice org.springframework.integration.dsl.flows.RequestHandlerRetryAdvice ( ) { RequestHandlerRetryAdvice org.springframework.integration.dsl.flows.RequestHandlerRetryAdvice = new RequestHandlerRetryAdvice ( ) ; org.springframework.integration.dsl.flows.RequestHandlerRetryAdvice . setRecoveryCallback ( new ErrorMessageSendingRecoverer ( org.springframework.integration.dsl.flows.MessageChannel ( ) ) ) ; return org.springframework.integration.dsl.flows.RequestHandlerRetryAdvice ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.MessageChannel org.springframework.integration.dsl.flows.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return IntegrationFlows . from ( org.springframework.integration.dsl.flows.MessageChannel ( ) ) .< MessagingException , Message < ? > > transform ( MessagingException :: getFailedMessage ) . get ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.dsl.flows.Message<?> ) { return STRING + this . org.springframework.integration.dsl.flows.IntegrationFlowTests.WorldService . java.lang.String ( ) + STRING + org.springframework.integration.dsl.flows.Message<> . getPayload ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flows.IntegrationFlow org.springframework.integration.dsl.flows.IntegrationFlow ( ) { return IntegrationFlows . from ( MessageChannels . direct ( ) ) . fixedSubscriberChannel ( ) . get ( ) ; }  <METHOD_END>
