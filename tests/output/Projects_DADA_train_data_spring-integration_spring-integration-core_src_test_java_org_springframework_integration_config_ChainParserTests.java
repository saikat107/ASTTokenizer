<METHOD_START> @ Factory public static org.springframework.integration.config.Matcher<org.springframework.integration.config.Message<?>> < Message < ? > > org.springframework.integration.config.Matcher<org.springframework.integration.config.Message<?>> ( Message < ? > org.springframework.integration.config.Message<?> ) { return new MessageMatcher ( org.springframework.integration.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; Message < ? > org.springframework.integration.config.Message<?> = this . org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.config.Message<?> = MessageBuilder . withPayload ( NUMBER ) . build ( ) ; this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; Message < ? > org.springframework.integration.config.Message<?> = this . org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.config.Message<?> = MessageBuilder . withPayload ( NUMBER ) . build ( ) ; this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; Message < ? > org.springframework.integration.config.Message<?> = this . org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.Message<> . getPayload ( ) ) ; assertEquals ( STRING , new IntegrationMessageHeaderAccessor ( org.springframework.integration.config.Message<> ) . getCorrelationId ( ) ) ; assertEquals ( STRING , org.springframework.integration.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; Message < ? > org.springframework.integration.config.Message<?> = this . org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; Message < ? > org.springframework.integration.config.Message<?> = this . org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; Message < ? > org.springframework.integration.config.Message<?> = this . org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertThat ( org.springframework.integration.config.Message<> , org.springframework.integration.config.Matcher<org.springframework.integration.config.Message<?>> ( org.springframework.integration.config.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( NUMBER ) . setSequenceSize ( NUMBER ) . build ( ) ; this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; Message org.springframework.integration.config.Message = this . org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message ) ; assertEquals ( STRING , org.springframework.integration.config.Message . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < ? > org.springframework.integration.config.Message<?> = MessageBuilder . withPayload ( NUMBER ) . build ( ) ; this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; Message < ? > org.springframework.integration.config.Message<?> = this . org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.config.Message<?> = this . org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < ? > org.springframework.integration.config.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; Message < ? > org.springframework.integration.config.Message<?> = this . org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.config.Message<?> = this . org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < ? > org.springframework.integration.config.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; Message < ? > org.springframework.integration.config.Message<?> = this . org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.config.Message<?> = this . org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = TestUtils . getPropertyValue ( this . org.springframework.integration.config.MessageHandlerChain , STRING , java.lang.Long .class ) ; assertEquals ( NUMBER , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; Message < ? > org.springframework.integration.config.Message<?> = this . org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( org.springframework.integration.config.Message<> . getPayload ( ) , org.springframework.integration.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; assertSame ( org.springframework.integration.config.Message<> , org.springframework.integration.config.TestConsumer . getLastMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Log org.springframework.integration.config.Log = mock ( Log .class ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > ( ) ; when ( org.springframework.integration.config.Log . isWarnEnabled ( ) ) . thenReturn ( true ) ; doAnswer ( invocation -> { log . set ( invocation . getArgument ( NUMBER ) ) ; return null ; } ) . when ( org.springframework.integration.config.Log ) . warn ( any ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.config.MessageHandler> < MessageHandler > java.util.List<org.springframework.integration.config.MessageHandler> = TestUtils . getPropertyValue ( this . org.springframework.integration.config.MessageHandlerChain , STRING , java.util.List .class ) ; MessageHandler org.springframework.integration.config.MessageHandler = java.util.List<org.springframework.integration.config.MessageHandler> . get ( NUMBER ) ; assertTrue ( org.springframework.integration.config.MessageHandler instanceof LoggingHandler ) ; DirectFieldAccessor org.springframework.integration.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.config.MessageHandler ) ; org.springframework.integration.config.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.config.Log ) ; this . org.springframework.integration.config.MessageChannel . send ( MessageBuilder . withPayload ( new byte [] { NUMBER , NUMBER , NUMBER , NUMBER } ) . build ( ) ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) ; assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.ChainParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeansException org.springframework.integration.config.BeansException ) { assertEquals ( java.lang.IllegalArgumentException .class , org.springframework.integration.config.BeansException . getCause ( ) . getClass ( ) ) ; assertTrue ( org.springframework.integration.config.BeansException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.integration.config.BeansException . getMessage ( ) . contains ( STRING ) ) ; throw org.springframework.integration.config.BeansException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.ChainParserTests> ( ) ) ; AbstractEndpoint org.springframework.integration.config.AbstractEndpoint = org.springframework.integration.config.ConfigurableApplicationContext . getBean ( STRING , AbstractEndpoint .class ) ; assertEquals ( false , org.springframework.integration.config.AbstractEndpoint . isAutoStartup ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.AbstractEndpoint . getPhase ( ) ) ; MessageHandlerChain org.springframework.integration.config.MessageHandlerChain = org.springframework.integration.config.ConfigurableApplicationContext . getBean ( STRING , MessageHandlerChain .class ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.config.MessageHandlerChain , STRING ) ) ; assertEquals ( false , TestUtils . getPropertyValue ( org.springframework.integration.config.MessageHandlerChain , STRING ) ) ; MessageHandler org.springframework.integration.config.MessageHandler = org.springframework.integration.config.ConfigurableApplicationContext . getBean ( STRING , MessageHandler .class ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.config.MessageHandler , STRING , java.lang.Boolean .class ) ) ; org.springframework.integration.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; GatewayProxyFactoryBean org.springframework.integration.config.GatewayProxyFactoryBean = this . org.springframework.integration.config.BeanFactory . getBean ( STRING , GatewayProxyFactoryBean .class ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.config.GatewayProxyFactoryBean , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.config.GatewayProxyFactoryBean , STRING ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , TestUtils . getPropertyValue ( org.springframework.integration.config.GatewayProxyFactoryBean , STRING , java.lang.Long .class ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , TestUtils . getPropertyValue ( org.springframework.integration.config.GatewayProxyFactoryBean , STRING , java.lang.Long .class ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; MessageHandlerChain org.springframework.integration.config.MessageHandlerChain = this . org.springframework.integration.config.BeanFactory . getBean ( STRING , MessageHandlerChain .class ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . getPropertyValue ( org.springframework.integration.config.MessageHandlerChain , STRING , java.util.List .class ) ; assertTrue ( java.util.List<> . get ( NUMBER ) instanceof MessageTransformingHandler ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( java.util.List<> . get ( NUMBER ) , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( java.util.List<> . get ( NUMBER ) , STRING ) ) ; assertTrue ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( java.util.List<> . get ( NUMBER ) instanceof ServiceActivatingHandler ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( java.util.List<> . get ( NUMBER ) , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( java.util.List<> . get ( NUMBER ) , STRING ) ) ; assertFalse ( this . org.springframework.integration.config.BeanFactory . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericMessage < java.lang.String > org.springframework.integration.config.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; try { this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.GenericMessage<java.lang.String> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( java.lang.Exception instanceof ReplyRequiredException ) ; assertTrue ( java.lang.Exception . java.lang.String ( ) . boolean ( STRING ) ) ; } try { this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.GenericMessage<java.lang.String> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( java.lang.Exception instanceof MessageRejectedException ) ; assertTrue ( java.lang.Exception . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.config.QueueChannel = new QueueChannel ( ) ; Message < java.lang.String > org.springframework.integration.config.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , org.springframework.integration.config.QueueChannel ) . build ( ) ; this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; org.springframework.integration.config.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.config.QueueChannel ) . build ( ) ; Message < java.lang.String > org.springframework.integration.config.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , org.springframework.integration.config.Message<java.lang.String> ) . build ( ) ; this . org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<java.lang.String> ) ; org.springframework.integration.config.Message<?> = org.springframework.integration.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.config.Message<?> ) { return org.springframework.integration.config.Message<> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return StringUtils . collectionToCommaDelimitedString ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
