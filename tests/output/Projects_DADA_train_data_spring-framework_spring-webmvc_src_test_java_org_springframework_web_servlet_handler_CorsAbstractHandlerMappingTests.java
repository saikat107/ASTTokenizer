<METHOD_START> @ Before public void void ( ) { StaticWebApplicationContext org.springframework.web.servlet.handler.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMapping = new org.springframework.web.servlet.handler.CorsAbstractHandlerMappingTests.TestHandlerMapping ( ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMapping . setApplicationContext ( org.springframework.web.servlet.handler.StaticWebApplicationContext ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . setRemoteHost ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.handler.MockHttpServletRequest . setMethod ( RequestMethod . GET . name ( ) ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . setRequestURI ( STRING ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.AbstractHandlerMapping . getHandler ( this . org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.handler.HandlerExecutionChain ) ; assertTrue ( org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) instanceof org.springframework.web.servlet.handler.CorsAbstractHandlerMappingTests.SimpleHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.handler.MockHttpServletRequest . setMethod ( RequestMethod . OPTIONS . name ( ) ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . setRequestURI ( STRING ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.AbstractHandlerMapping . getHandler ( this . org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.handler.HandlerExecutionChain ) ; assertNotNull ( org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) ) ; assertTrue ( org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) . getClass ( ) . getSimpleName ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.handler.MockHttpServletRequest . setMethod ( RequestMethod . GET . name ( ) ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . setRequestURI ( STRING ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.AbstractHandlerMapping . getHandler ( this . org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.handler.HandlerExecutionChain ) ; assertTrue ( org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) instanceof org.springframework.web.servlet.handler.CorsAbstractHandlerMappingTests.CorsAwareHandler ) ; CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration = org.springframework.web.servlet.handler.CorsConfiguration ( org.springframework.web.servlet.handler.HandlerExecutionChain , false ) ; assertNotNull ( org.springframework.web.servlet.handler.CorsConfiguration ) ; assertArrayEquals ( org.springframework.web.servlet.handler.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) , new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.handler.MockHttpServletRequest . setMethod ( RequestMethod . OPTIONS . name ( ) ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . setRequestURI ( STRING ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.AbstractHandlerMapping . getHandler ( this . org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.handler.HandlerExecutionChain ) ; assertNotNull ( org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) ) ; assertTrue ( org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) . getClass ( ) . getSimpleName ( ) . equals ( STRING ) ) ; CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration = org.springframework.web.servlet.handler.CorsConfiguration ( org.springframework.web.servlet.handler.HandlerExecutionChain , true ) ; assertNotNull ( org.springframework.web.servlet.handler.CorsConfiguration ) ; assertArrayEquals ( org.springframework.web.servlet.handler.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) , new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration = new CorsConfiguration ( ) ; org.springframework.web.servlet.handler.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMapping . setCorsConfigurations ( java.util.Collections . java.util.Map ( STRING , org.springframework.web.servlet.handler.CorsConfiguration ) ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . setMethod ( RequestMethod . GET . name ( ) ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . setRequestURI ( STRING ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.AbstractHandlerMapping . getHandler ( this . org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.handler.HandlerExecutionChain ) ; assertTrue ( org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) instanceof org.springframework.web.servlet.handler.CorsAbstractHandlerMappingTests.SimpleHandler ) ; org.springframework.web.servlet.handler.CorsConfiguration = org.springframework.web.servlet.handler.CorsConfiguration ( org.springframework.web.servlet.handler.HandlerExecutionChain , false ) ; assertNotNull ( org.springframework.web.servlet.handler.CorsConfiguration ) ; assertArrayEquals ( org.springframework.web.servlet.handler.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) , new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration = new CorsConfiguration ( ) ; org.springframework.web.servlet.handler.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMapping . setCorsConfigurations ( java.util.Collections . java.util.Map ( STRING , org.springframework.web.servlet.handler.CorsConfiguration ) ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . setMethod ( RequestMethod . OPTIONS . name ( ) ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . setRequestURI ( STRING ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.AbstractHandlerMapping . getHandler ( this . org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.handler.HandlerExecutionChain ) ; assertNotNull ( org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) ) ; assertTrue ( org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) . getClass ( ) . getSimpleName ( ) . equals ( STRING ) ) ; org.springframework.web.servlet.handler.CorsConfiguration = org.springframework.web.servlet.handler.CorsConfiguration ( org.springframework.web.servlet.handler.HandlerExecutionChain , true ) ; assertNotNull ( org.springframework.web.servlet.handler.CorsConfiguration ) ; assertArrayEquals ( org.springframework.web.servlet.handler.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) , new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.handler.CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration ( HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain , boolean boolean ) { if ( boolean ) { java.lang.Object java.lang.Object = org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) ; assertTrue ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) . boolean ( STRING ) ) ; DirectFieldAccessor org.springframework.web.servlet.handler.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; return ( CorsConfiguration ) org.springframework.web.servlet.handler.DirectFieldAccessor . getPropertyValue ( STRING ) ; } else { HandlerInterceptor [] org.springframework.web.servlet.handler.HandlerInterceptor[] = org.springframework.web.servlet.handler.HandlerExecutionChain . getInterceptors ( ) ; if ( org.springframework.web.servlet.handler.HandlerInterceptor[] != null ) { for ( HandlerInterceptor org.springframework.web.servlet.handler.HandlerInterceptor : org.springframework.web.servlet.handler.HandlerInterceptor[] ) { if ( org.springframework.web.servlet.handler.HandlerInterceptor . getClass ( ) . getSimpleName ( ) . equals ( STRING ) ) { DirectFieldAccessor org.springframework.web.servlet.handler.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.handler.HandlerInterceptor ) ; return ( CorsConfiguration ) org.springframework.web.servlet.handler.DirectFieldAccessor . getPropertyValue ( STRING ) ; } } } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest ) throws java.lang.Exception { if ( org.springframework.web.servlet.handler.HttpServletRequest . getRequestURI ( ) . equals ( STRING ) ) { return new org.springframework.web.servlet.handler.CorsAbstractHandlerMappingTests.CorsAwareHandler ( ) ; } return new org.springframework.web.servlet.handler.CorsAbstractHandlerMappingTests.SimpleHandler ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( METHOD_GET ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.handler.HttpServletResponse ) throws org.springframework.web.servlet.handler.ServletException , java.io.IOException { org.springframework.web.servlet.handler.HttpServletResponse . setStatus ( HttpStatus . OK . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.handler.CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest ) { CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration = new CorsConfiguration ( ) ; org.springframework.web.servlet.handler.CorsConfiguration . addAllowedOrigin ( STRING ) ; return org.springframework.web.servlet.handler.CorsConfiguration ; }  <METHOD_END>
