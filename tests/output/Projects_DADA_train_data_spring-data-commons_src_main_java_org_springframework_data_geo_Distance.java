<METHOD_START> public void ( double double ) { this( double , Metrics . NEUTRAL ); }  <METHOD_END>
<METHOD_START> public void ( double double , Metric org.springframework.data.geo.Metric ) { this . double = double ; this . org.springframework.data.geo.Metric = org.springframework.data.geo.Metric == null ? Metrics . NEUTRAL : org.springframework.data.geo.Metric ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.geo.Range<org.springframework.data.geo.Distance> < org.springframework.data.geo.Distance > org.springframework.data.geo.Range<org.springframework.data.geo.Distance> ( org.springframework.data.geo.Distance org.springframework.data.geo.Distance , org.springframework.data.geo.Distance org.springframework.data.geo.Distance ) { return new Range <> ( org.springframework.data.geo.Distance , org.springframework.data.geo.Distance ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.geo.Range<org.springframework.data.geo.Distance> < org.springframework.data.geo.Distance > org.springframework.data.geo.Range<org.springframework.data.geo.Distance> ( double double , Metric org.springframework.data.geo.Metric , double double , Metric org.springframework.data.geo.Metric ) { return org.springframework.data.geo.Range<org.springframework.data.geo.Distance> ( new org.springframework.data.geo.Distance ( double , org.springframework.data.geo.Metric ) , new org.springframework.data.geo.Distance ( double , org.springframework.data.geo.Metric ) ) ; }  <METHOD_END>
<METHOD_START> public double double ( ) { return double ; }  <METHOD_END>
<METHOD_START> public double double ( ) { return double / org.springframework.data.geo.Metric . getMultiplier ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.geo.Metric org.springframework.data.geo.Metric ( ) { return org.springframework.data.geo.Metric ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return org.springframework.data.geo.Metric . getAbbreviation ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.geo.Distance org.springframework.data.geo.Distance ( org.springframework.data.geo.Distance org.springframework.data.geo.Distance ) { Assert . notNull ( org.springframework.data.geo.Distance , STRING ) ; double double = double ( ) + org.springframework.data.geo.Distance . double ( ) ; return new org.springframework.data.geo.Distance ( double * org.springframework.data.geo.Metric . getMultiplier ( ) , org.springframework.data.geo.Metric ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.geo.Distance org.springframework.data.geo.Distance ( org.springframework.data.geo.Distance org.springframework.data.geo.Distance , Metric org.springframework.data.geo.Metric ) { Assert . notNull ( org.springframework.data.geo.Distance , STRING ) ; Assert . notNull ( org.springframework.data.geo.Metric , STRING ) ; double double = double ( ) * org.springframework.data.geo.Metric . getMultiplier ( ) ; double double = org.springframework.data.geo.Distance . double ( ) * org.springframework.data.geo.Metric . getMultiplier ( ) ; return new org.springframework.data.geo.Distance ( double + double , org.springframework.data.geo.Metric ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.geo.Distance org.springframework.data.geo.Distance ( Metric org.springframework.data.geo.Metric ) { Assert . notNull ( org.springframework.data.geo.Metric , STRING ) ; return this . org.springframework.data.geo.Metric . equals ( org.springframework.data.geo.Metric ) ? this : new org.springframework.data.geo.Distance ( double ( ) * org.springframework.data.geo.Metric . getMultiplier ( ) , org.springframework.data.geo.Metric ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.data.geo.Distance org.springframework.data.geo.Distance ) { double double = this . double ( ) - org.springframework.data.geo.Distance . double ( ) ; return double == NUMBER ? NUMBER : double > NUMBER ? NUMBER : - NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.data.geo.Distance ) ) { return false ; } org.springframework.data.geo.Distance org.springframework.data.geo.Distance = ( org.springframework.data.geo.Distance ) java.lang.Object ; return this . double == org.springframework.data.geo.Distance . double && this . org.springframework.data.geo.Metric . equals ( org.springframework.data.geo.Distance . org.springframework.data.geo.Metric ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = NUMBER ; int += NUMBER * java.lang.Double . long ( double ) ; int += NUMBER * org.springframework.data.geo.Metric . hashCode ( ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( double ) ; if ( org.springframework.data.geo.Metric != Metrics . NEUTRAL ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( org.springframework.data.geo.Metric . toString ( ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
