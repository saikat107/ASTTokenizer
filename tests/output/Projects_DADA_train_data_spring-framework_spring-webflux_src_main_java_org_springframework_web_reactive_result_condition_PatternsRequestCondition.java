<METHOD_START> public void ( java.lang.String ... java.lang.String[] ) { this( java.util.List<java.lang.String> ( java.lang.String[] ) , null , null , true , true , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String [] java.lang.String[] , HttpRequestPathHelper org.springframework.web.reactive.result.condition.HttpRequestPathHelper , PathMatcher org.springframework.web.reactive.result.condition.PathMatcher , boolean boolean , boolean boolean , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ) { this( java.util.List<java.lang.String> ( java.lang.String[] ) , org.springframework.web.reactive.result.condition.HttpRequestPathHelper , org.springframework.web.reactive.result.condition.PathMatcher , boolean , boolean , java.util.Set<java.lang.String> ); }  <METHOD_END>
<METHOD_START> private void ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> , HttpRequestPathHelper org.springframework.web.reactive.result.condition.HttpRequestPathHelper , PathMatcher org.springframework.web.reactive.result.condition.PathMatcher , boolean boolean , boolean boolean , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ) { this . java.util.Set<java.lang.String> = java.util.Collections . java.util.Set<java.lang.String> ( java.util.Set<java.lang.String> ( java.util.Collection<java.lang.String> ) ) ; this . org.springframework.web.reactive.result.condition.HttpRequestPathHelper = ( org.springframework.web.reactive.result.condition.HttpRequestPathHelper != null ? org.springframework.web.reactive.result.condition.HttpRequestPathHelper : new HttpRequestPathHelper ( ) ) ; this . org.springframework.web.reactive.result.condition.PathMatcher = ( org.springframework.web.reactive.result.condition.PathMatcher != null ? org.springframework.web.reactive.result.condition.PathMatcher : new ParsingPathMatcher ( ) ) ; this . boolean = boolean ; this . boolean = boolean ; if ( java.util.Set<java.lang.String> != null ) { for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { if ( java.lang.String . char ( NUMBER ) != '.' ) { java.lang.String = STRING + java.lang.String ; } this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> private static java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String ... java.lang.String[] ) { return ( java.lang.String[] != null ? java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) : java.util.Collections . java.util.List<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { if ( java.util.Collection<java.lang.String> == null ) { return java.util.Collections . java.util.Set<java.lang.String> ( ) ; } java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( java.util.Collection<java.lang.String> . int ( ) ) ; for ( java.lang.String java.lang.String : java.util.Collection<java.lang.String> ) { if ( StringUtils . hasLength ( java.lang.String ) && ! java.lang.String . boolean ( STRING ) ) { java.lang.String = STRING + java.lang.String ; } java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return this . java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return this . java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.condition.PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition ( org.springframework.web.reactive.result.condition.PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; if ( ! this . java.util.Set<java.lang.String> . boolean ( ) && ! org.springframework.web.reactive.result.condition.PatternsRequestCondition . java.util.Set<java.lang.String> . boolean ( ) ) { for ( java.lang.String java.lang.String : this . java.util.Set<java.lang.String> ) { for ( java.lang.String java.lang.String : org.springframework.web.reactive.result.condition.PatternsRequestCondition . java.util.Set<java.lang.String> ) { java.util.Set<java.lang.String> . boolean ( this . org.springframework.web.reactive.result.condition.PathMatcher . combine ( java.lang.String , java.lang.String ) ) ; } } } else if ( ! this . java.util.Set<java.lang.String> . boolean ( ) ) { java.util.Set<java.lang.String> . boolean ( this . java.util.Set<java.lang.String> ) ; } else if ( ! org.springframework.web.reactive.result.condition.PatternsRequestCondition . java.util.Set<java.lang.String> . boolean ( ) ) { java.util.Set<java.lang.String> . boolean ( org.springframework.web.reactive.result.condition.PatternsRequestCondition . java.util.Set<java.lang.String> ) ; } else { java.util.Set<java.lang.String> . boolean ( STRING ) ; } return new org.springframework.web.reactive.result.condition.PatternsRequestCondition ( java.util.Set<java.lang.String> , this . org.springframework.web.reactive.result.condition.HttpRequestPathHelper , this . org.springframework.web.reactive.result.condition.PathMatcher , this . boolean , this . boolean , this . java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.condition.PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition ( ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange ) { if ( this . java.util.Set<java.lang.String> . boolean ( ) ) { return this ; } java.lang.String java.lang.String = this . org.springframework.web.reactive.result.condition.HttpRequestPathHelper . getLookupPathForRequest ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.lang.String ) ; return java.util.List<java.lang.String> . boolean ( ) ? null : new org.springframework.web.reactive.result.condition.PatternsRequestCondition ( java.util.List<java.lang.String> , this . org.springframework.web.reactive.result.condition.HttpRequestPathHelper , this . org.springframework.web.reactive.result.condition.PathMatcher , this . boolean , this . boolean , this . java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : this . java.util.Set<java.lang.String> ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String , java.lang.String ) ; if ( java.lang.String != null ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } java.util.Collections . void ( java.util.List<java.lang.String> , this . org.springframework.web.reactive.result.condition.PathMatcher . getPatternComparator ( java.lang.String ) ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return java.lang.String ; } if ( this . boolean ) { if ( ! this . java.util.Set<java.lang.String> . boolean ( ) && java.lang.String . int ( '.' ) != - NUMBER ) { for ( java.lang.String java.lang.String : this . java.util.Set<java.lang.String> ) { if ( this . org.springframework.web.reactive.result.condition.PathMatcher . match ( java.lang.String + java.lang.String , java.lang.String ) ) { return java.lang.String + java.lang.String ; } } } else { boolean boolean = java.lang.String . int ( '.' ) != - NUMBER ; if ( ! boolean && this . org.springframework.web.reactive.result.condition.PathMatcher . match ( java.lang.String + STRING , java.lang.String ) ) { return java.lang.String + STRING ; } } } if ( this . org.springframework.web.reactive.result.condition.PathMatcher . match ( java.lang.String , java.lang.String ) ) { return java.lang.String ; } if ( this . boolean ) { if ( ! java.lang.String . boolean ( STRING ) && this . org.springframework.web.reactive.result.condition.PathMatcher . match ( java.lang.String + STRING , java.lang.String ) ) { return java.lang.String + STRING ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.web.reactive.result.condition.PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition , ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange ) { java.lang.String java.lang.String = this . org.springframework.web.reactive.result.condition.HttpRequestPathHelper . getLookupPathForRequest ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; java.util.Comparator<java.lang.String> < java.lang.String > java.util.Comparator<java.lang.String> = this . org.springframework.web.reactive.result.condition.PathMatcher . getPatternComparator ( java.lang.String ) ; java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = this . java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ; java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.web.reactive.result.condition.PatternsRequestCondition . java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ; while ( java.util.Iterator<java.lang.String> . boolean ( ) && java.util.Iterator<java.lang.String> . boolean ( ) ) { int int = java.util.Comparator<java.lang.String> . int ( java.util.Iterator<java.lang.String> . java.lang.String ( ) , java.util.Iterator<java.lang.String> . java.lang.String ( ) ) ; if ( int != NUMBER ) { return int ; } } if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { return - NUMBER ; } else if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { return NUMBER ; } else { return NUMBER ; } }  <METHOD_END>
