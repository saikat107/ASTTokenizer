<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void ( XMPPConnection org.springframework.integration.xmpp.inbound.XMPPConnection ) { super( org.springframework.integration.xmpp.inbound.XMPPConnection ); }  <METHOD_END>
<METHOD_START> public void void ( XmppHeaderMapper org.springframework.integration.xmpp.inbound.XmppHeaderMapper ) { this . org.springframework.integration.xmpp.inbound.XmppHeaderMapper = org.springframework.integration.xmpp.inbound.XmppHeaderMapper ; }  <METHOD_END>
<METHOD_START> public void void ( StanzaFilter org.springframework.integration.xmpp.inbound.StanzaFilter ) { this . org.springframework.integration.xmpp.inbound.StanzaFilter = org.springframework.integration.xmpp.inbound.StanzaFilter ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.xmpp.inbound.Expression ) { this . org.springframework.integration.xmpp.inbound.Expression = org.springframework.integration.xmpp.inbound.Expression ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. onInit ( ) ; this . org.springframework.integration.xmpp.inbound.EvaluationContext = ExpressionUtils . createStandardEvaluationContext ( getBeanFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { Assert . isTrue ( this . initialized , this . getComponentName ( ) + STRING + this . java.lang.String ( ) + STRING ) ; this . xmppConnection . addAsyncStanzaListener ( this . org.springframework.integration.xmpp.inbound.StanzaListener , this . org.springframework.integration.xmpp.inbound.StanzaFilter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . xmppConnection != null ) { this . xmppConnection . removeAsyncStanzaListener ( this . org.springframework.integration.xmpp.inbound.StanzaListener ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final Stanza org.springframework.integration.xmpp.inbound.Stanza ) { if ( org.springframework.integration.xmpp.inbound.Stanza instanceof org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware ) { org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware org.jivesoftware.smack.packet.Message = ( org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware ) org.springframework.integration.xmpp.inbound.Stanza ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint .this . org.springframework.integration.xmpp.inbound.XmppHeaderMapper . toHeadersFromRequest ( org.jivesoftware.smack.packet.Message ) ; java.lang.Object java.lang.Object = org.jivesoftware.smack.packet.Message . getBody ( ) ; if ( org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint .this . org.springframework.integration.xmpp.inbound.Expression != null ) { EvaluationContext org.springframework.integration.xmpp.inbound.EvaluationContext = org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint .this . org.springframework.integration.xmpp.inbound.EvaluationContext ; java.util.List<org.springframework.integration.xmpp.inbound.ExtensionElement> < ExtensionElement > java.util.List<org.springframework.integration.xmpp.inbound.ExtensionElement> = org.jivesoftware.smack.packet.Message . getExtensions ( ) ; if ( java.util.List<org.springframework.integration.xmpp.inbound.ExtensionElement> . size ( ) == NUMBER ) { ExtensionElement org.springframework.integration.xmpp.inbound.ExtensionElement = java.util.List<org.springframework.integration.xmpp.inbound.ExtensionElement> . get ( NUMBER ) ; org.springframework.integration.xmpp.inbound.EvaluationContext = ExpressionUtils . createStandardEvaluationContext ( getBeanFactory ( ) ) ; org.springframework.integration.xmpp.inbound.EvaluationContext . setVariable ( STRING , org.springframework.integration.xmpp.inbound.ExtensionElement ) ; } java.lang.Object = org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint .this . org.springframework.integration.xmpp.inbound.Expression . getValue ( org.springframework.integration.xmpp.inbound.EvaluationContext , org.jivesoftware.smack.packet.Message ) ; } if ( java.lang.Object != null ) { sendMessage ( getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . copyHeaders ( java.util.Map<java.lang.String,> ) . build ( ) ) ; } else if ( logger . isInfoEnabled ( ) ) { if ( org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint .this . org.springframework.integration.xmpp.inbound.Expression != null ) { logger . info ( STRING + org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint .this . org.springframework.integration.xmpp.inbound.Expression . getExpressionString ( ) + STRING + org.jivesoftware.smack.packet.Message + STRING ) ; } else { logger . info ( STRING + org.jivesoftware.smack.packet.Message + STRING ) ; } } } }  <METHOD_END>
