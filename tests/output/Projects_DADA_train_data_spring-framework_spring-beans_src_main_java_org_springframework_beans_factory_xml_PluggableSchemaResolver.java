<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.ClassLoader = java.lang.ClassLoader ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.xml.sax.InputSource org.xml.sax.InputSource ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.IOException { if ( org.springframework.beans.factory.xml.Log . isTraceEnabled ( ) ) { org.springframework.beans.factory.xml.Log . trace ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } if ( java.lang.String != null ) { java.lang.String java.lang.String = java.util.Map<java.lang.String,java.lang.String> ( ) . java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { Resource org.springframework.beans.factory.xml.Resource = new ClassPathResource ( java.lang.String , this . java.lang.ClassLoader ) ; try { org.xml.sax.InputSource org.xml.sax.InputSource = new org.xml.sax.InputSource ( org.springframework.beans.factory.xml.Resource . getInputStream ( ) ) ; org.xml.sax.InputSource . void ( java.lang.String ) ; org.xml.sax.InputSource . void ( java.lang.String ) ; if ( org.springframework.beans.factory.xml.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.xml.Log . debug ( STRING + java.lang.String + STRING + java.lang.String ) ; } return org.xml.sax.InputSource ; } catch ( java.io.FileNotFoundException java.io.FileNotFoundException ) { if ( org.springframework.beans.factory.xml.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.xml.Log . debug ( STRING + java.lang.String + STRING + org.springframework.beans.factory.xml.Resource , java.io.FileNotFoundException ) ; } } } } return null ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { if ( this . java.util.Map<java.lang.String,java.lang.String> == null ) { synchronized ( this ) { if ( this . java.util.Map<java.lang.String,java.lang.String> == null ) { if ( org.springframework.beans.factory.xml.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.xml.Log . debug ( STRING + this . java.lang.String + STRING ) ; } try { java.util.Properties java.util.Properties = PropertiesLoaderUtils . loadAllProperties ( this . java.lang.String , this . java.lang.ClassLoader ) ; if ( org.springframework.beans.factory.xml.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.xml.Log . debug ( STRING + java.util.Properties ) ; } java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> <> ( java.util.Properties . int ( ) ) ; CollectionUtils . mergePropertiesIntoMap ( java.util.Properties , java.util.Map<java.lang.String,java.lang.String> ) ; this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING + this . java.lang.String + STRING , java.io.IOException ) ; } } } } return this . java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.util.Map<java.lang.String,java.lang.String> ( ) ; }  <METHOD_END>
