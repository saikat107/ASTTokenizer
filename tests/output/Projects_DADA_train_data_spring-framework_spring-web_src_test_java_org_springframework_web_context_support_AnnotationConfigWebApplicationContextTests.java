<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { AnnotationConfigWebApplicationContext org.springframework.web.context.support.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.web.context.support.AnnotationConfigWebApplicationContext . register ( org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.Config .class ) ; org.springframework.web.context.support.AnnotationConfigWebApplicationContext . refresh ( ) ; org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.TestBean org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.TestBean = org.springframework.web.context.support.AnnotationConfigWebApplicationContext . getBean ( org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.TestBean .class ) ; assertNotNull ( org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { AnnotationConfigWebApplicationContext org.springframework.web.context.support.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.web.context.support.AnnotationConfigWebApplicationContext . setConfigLocation ( org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.Config .class . java.lang.String ( ) ) ; org.springframework.web.context.support.AnnotationConfigWebApplicationContext . refresh ( ) ; org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.TestBean org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.TestBean = org.springframework.web.context.support.AnnotationConfigWebApplicationContext . getBean ( org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.TestBean .class ) ; assertNotNull ( org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { AnnotationConfigWebApplicationContext org.springframework.web.context.support.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.web.context.support.AnnotationConfigWebApplicationContext . setConfigLocation ( STRING ) ; org.springframework.web.context.support.AnnotationConfigWebApplicationContext . refresh ( ) ; org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.TestBean org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.TestBean = org.springframework.web.context.support.AnnotationConfigWebApplicationContext . getBean ( org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.TestBean .class ) ; assertNotNull ( org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { AnnotationConfigWebApplicationContext org.springframework.web.context.support.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.web.context.support.AnnotationConfigWebApplicationContext . setBeanNameGenerator ( new AnnotationBeanNameGenerator ( ) { @ java.lang.Override public java.lang.String java.lang.String ( BeanDefinition org.springframework.web.context.support.BeanDefinition , BeanDefinitionRegistry org.springframework.web.context.support.BeanDefinitionRegistry ) { return STRING + super. generateBeanName ( org.springframework.web.context.support.BeanDefinition , org.springframework.web.context.support.BeanDefinitionRegistry ) ; } } ) ; org.springframework.web.context.support.AnnotationConfigWebApplicationContext . setConfigLocation ( org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.Config .class . java.lang.String ( ) ) ; org.springframework.web.context.support.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( org.springframework.web.context.support.AnnotationConfigWebApplicationContext . containsBean ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( BeanDefinition org.springframework.web.context.support.BeanDefinition , BeanDefinitionRegistry org.springframework.web.context.support.BeanDefinitionRegistry ) { return STRING + super. generateBeanName ( org.springframework.web.context.support.BeanDefinition , org.springframework.web.context.support.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.TestBean org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.TestBean ( ) { return new org.springframework.web.context.support.AnnotationConfigWebApplicationContextTests.TestBean ( ) ; }  <METHOD_END>
