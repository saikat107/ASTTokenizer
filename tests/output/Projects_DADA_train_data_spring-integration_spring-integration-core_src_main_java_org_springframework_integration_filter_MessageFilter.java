<METHOD_START> public void ( MessageSelector org.springframework.integration.filter.MessageSelector ) { Assert . notNull ( org.springframework.integration.filter.MessageSelector , STRING ) ; this . org.springframework.integration.filter.MessageSelector = org.springframework.integration.filter.MessageSelector ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.filter.MessageChannel ) { this . org.springframework.integration.filter.MessageChannel = org.springframework.integration.filter.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . setPostProcessWithinAdvice ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.filter.MessageChannel org.springframework.integration.filter.MessageChannel ( ) { if ( this . java.lang.String != null ) { synchronized ( this ) { if ( this . java.lang.String != null ) { this . org.springframework.integration.filter.MessageChannel = getChannelResolver ( ) . resolveDestination ( this . java.lang.String ) ; this . java.lang.String = null ; } } } return this . org.springframework.integration.filter.MessageChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { Assert . state ( ! ( this . java.lang.String != null && this . org.springframework.integration.filter.MessageChannel != null ) , STRING ) ; if ( this . org.springframework.integration.filter.MessageSelector instanceof AbstractMessageProcessingSelector ) { ConversionService org.springframework.integration.filter.ConversionService = getConversionService ( ) ; if ( org.springframework.integration.filter.ConversionService != null ) { ( ( AbstractMessageProcessingSelector ) this . org.springframework.integration.filter.MessageSelector ) . setConversionService ( org.springframework.integration.filter.ConversionService ) ; } } if ( this . org.springframework.integration.filter.MessageSelector instanceof BeanFactoryAware && this . getBeanFactory ( ) != null ) { ( ( BeanFactoryAware ) this . org.springframework.integration.filter.MessageSelector ) . setBeanFactory ( this . getBeanFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.filter.MessageSelector instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.filter.MessageSelector ) . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.filter.MessageSelector instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.filter.MessageSelector ) . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! ( this . org.springframework.integration.filter.MessageSelector instanceof Lifecycle ) || ( ( Lifecycle ) this . org.springframework.integration.filter.MessageSelector ) . isRunning ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.filter.Message<?> ) { if ( this . org.springframework.integration.filter.MessageSelector . accept ( org.springframework.integration.filter.Message<> ) ) { return org.springframework.integration.filter.Message<> ; } else { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.filter.Message<?> , java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { MessageChannel org.springframework.integration.filter.MessageChannel = org.springframework.integration.filter.MessageChannel ( ) ; if ( org.springframework.integration.filter.MessageChannel != null ) { this . messagingTemplate . send ( org.springframework.integration.filter.MessageChannel , org.springframework.integration.filter.Message<> ) ; } if ( this . boolean ) { throw new MessageRejectedException ( org.springframework.integration.filter.Message<> , STRING + this . getComponentName ( ) + STRING ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
