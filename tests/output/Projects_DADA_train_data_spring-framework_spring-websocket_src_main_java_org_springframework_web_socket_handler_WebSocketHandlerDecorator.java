<METHOD_START> public void ( WebSocketHandler org.springframework.web.socket.handler.WebSocketHandler ) { Assert . notNull ( org.springframework.web.socket.handler.WebSocketHandler , STRING ) ; this . org.springframework.web.socket.handler.WebSocketHandler = org.springframework.web.socket.handler.WebSocketHandler ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.handler.WebSocketHandler org.springframework.web.socket.handler.WebSocketHandler ( ) { return this . org.springframework.web.socket.handler.WebSocketHandler ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.handler.WebSocketHandler org.springframework.web.socket.handler.WebSocketHandler ( ) { WebSocketHandler org.springframework.web.socket.handler.WebSocketHandler = this . org.springframework.web.socket.handler.WebSocketHandler ; while ( org.springframework.web.socket.handler.WebSocketHandler instanceof org.springframework.web.socket.handler.WebSocketHandlerDecorator ) { org.springframework.web.socket.handler.WebSocketHandler = ( ( org.springframework.web.socket.handler.WebSocketHandlerDecorator ) org.springframework.web.socket.handler.WebSocketHandler ) . org.springframework.web.socket.handler.WebSocketHandler ( ) ; } return org.springframework.web.socket.handler.WebSocketHandler ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.socket.handler.WebSocketHandler org.springframework.web.socket.handler.WebSocketHandler ( WebSocketHandler org.springframework.web.socket.handler.WebSocketHandler ) { if ( org.springframework.web.socket.handler.WebSocketHandler instanceof org.springframework.web.socket.handler.WebSocketHandlerDecorator ) { return ( ( org.springframework.web.socket.handler.WebSocketHandlerDecorator ) org.springframework.web.socket.handler.WebSocketHandler ) . org.springframework.web.socket.handler.WebSocketHandler ( ) ; } else { return org.springframework.web.socket.handler.WebSocketHandler ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession ) throws java.lang.Exception { this . org.springframework.web.socket.handler.WebSocketHandler . afterConnectionEstablished ( org.springframework.web.socket.handler.WebSocketSession ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession , WebSocketMessage < ? > org.springframework.web.socket.handler.WebSocketMessage<?> ) throws java.lang.Exception { this . org.springframework.web.socket.handler.WebSocketHandler . handleMessage ( org.springframework.web.socket.handler.WebSocketSession , org.springframework.web.socket.handler.WebSocketMessage<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession , java.lang.Throwable java.lang.Throwable ) throws java.lang.Exception { this . org.springframework.web.socket.handler.WebSocketHandler . handleTransportError ( org.springframework.web.socket.handler.WebSocketSession , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession , CloseStatus org.springframework.web.socket.handler.CloseStatus ) throws java.lang.Exception { this . org.springframework.web.socket.handler.WebSocketHandler . afterConnectionClosed ( org.springframework.web.socket.handler.WebSocketSession , org.springframework.web.socket.handler.CloseStatus ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.web.socket.handler.WebSocketHandler . supportsPartialMessages ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.web.socket.handler.WebSocketHandlerDecorator> ( ) . java.lang.String ( ) + STRING + this . org.springframework.web.socket.handler.WebSocketHandler + STRING ; }  <METHOD_END>
