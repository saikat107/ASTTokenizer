<METHOD_START> protected void ( ClientHttpRequestFactory org.springframework.http.client.ClientHttpRequestFactory , java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> < ClientHttpRequestInterceptor > java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> , java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) { this . org.springframework.http.client.ClientHttpRequestFactory = org.springframework.http.client.ClientHttpRequestFactory ; this . java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> = java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> ; this . org.springframework.http.client.HttpMethod = org.springframework.http.client.HttpMethod ; this . java.net.URI = java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.HttpMethod org.springframework.http.client.HttpMethod ( ) { return this . org.springframework.http.client.HttpMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return this . java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( HttpHeaders org.springframework.http.client.HttpHeaders , byte [] byte[] ) throws java.io.IOException { org.springframework.http.client.InterceptingClientHttpRequest.InterceptingRequestExecution org.springframework.http.client.InterceptingClientHttpRequest.InterceptingRequestExecution = new org.springframework.http.client.InterceptingClientHttpRequest.InterceptingRequestExecution ( ) ; return org.springframework.http.client.InterceptingClientHttpRequest.InterceptingRequestExecution . org.springframework.http.client.ClientHttpResponse ( this , byte[] ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { this . java.util.Iterator<org.springframework.http.client.ClientHttpRequestInterceptor> = java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> . iterator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( HttpRequest org.springframework.http.client.HttpRequest , byte [] byte[] ) throws java.io.IOException { if ( this . java.util.Iterator<org.springframework.http.client.ClientHttpRequestInterceptor> . hasNext ( ) ) { ClientHttpRequestInterceptor org.springframework.http.client.ClientHttpRequestInterceptor = this . java.util.Iterator<org.springframework.http.client.ClientHttpRequestInterceptor> . next ( ) ; return org.springframework.http.client.ClientHttpRequestInterceptor . intercept ( org.springframework.http.client.HttpRequest , byte[] , this ) ; } else { ClientHttpRequest org.springframework.http.client.ClientHttpRequest = org.springframework.http.client.ClientHttpRequestFactory . createRequest ( org.springframework.http.client.HttpRequest . getURI ( ) , org.springframework.http.client.HttpRequest . getMethod ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : org.springframework.http.client.HttpRequest . getHeaders ( ) . entrySet ( ) ) { org.springframework.http.client.ClientHttpRequest . getHeaders ( ) . addAll ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ) ; } if ( byte[] . int > NUMBER ) { StreamUtils . copy ( byte[] , org.springframework.http.client.ClientHttpRequest . getBody ( ) ) ; } return org.springframework.http.client.ClientHttpRequest . execute ( ) ; } }  <METHOD_END>
