<METHOD_START> @ Autowired public void ( Repositories org.springframework.data.rest.webmvc.Repositories , RepositoryInvokerFactory org.springframework.data.rest.webmvc.RepositoryInvokerFactory , PagedResourcesAssembler < java.lang.Object > org.springframework.data.rest.webmvc.PagedResourcesAssembler<java.lang.Object> ) { super( org.springframework.data.rest.webmvc.PagedResourcesAssembler<java.lang.Object> ); this . org.springframework.data.rest.webmvc.Repositories = org.springframework.data.rest.webmvc.Repositories ; this . org.springframework.data.rest.webmvc.RepositoryInvokerFactory = org.springframework.data.rest.webmvc.RepositoryInvokerFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.data.rest.webmvc.ApplicationEventPublisher ) { this . org.springframework.data.rest.webmvc.ApplicationEventPublisher = org.springframework.data.rest.webmvc.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = java.lang.String , method = GET ) public org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ResourceSupport> < ResourceSupport > org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ResourceSupport> ( final RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation , @ BackendId java.io.Serializable java.io.Serializable , final @ PathVariable java.lang.String java.lang.String , final PersistentEntityResourceAssembler org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler ) throws java.lang.Exception { final HttpHeaders org.springframework.data.rest.webmvc.HttpHeaders = new HttpHeaders ( ) ; java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> < org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty , ResourceSupport > java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> = org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty -> org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> { if ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentProperty<> . isCollectionLike ( ) ) { return toResources ( ( java.lang.Iterable<?> < ? > ) java.lang.Object , org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler , org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . java.lang.Class<> , null ) ; } else if ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentProperty<> . isMap ( ) ) { java.util.Map<java.lang.Object,org.springframework.data.rest.webmvc.Resource<?>> < java.lang.Object , Resource < ? > > java.util.Map<java.lang.Object,org.springframework.data.rest.webmvc.Resource<?>> = new java.util.HashMap<java.lang.Object,org.springframework.data.rest.webmvc.Resource<?>> < java.lang.Object , Resource < ? > > ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : ( ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.lang.Object ) . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { java.util.Map<java.lang.Object,org.springframework.data.rest.webmvc.Resource<?>> . put ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) , org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler . toResource ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) ) ; } return new Resource < java.lang.Object > ( java.util.Map<java.lang.Object,org.springframework.data.rest.webmvc.Resource<?>> ) ; } else { PersistentEntityResource org.springframework.data.rest.webmvc.PersistentEntityResource = org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler . toResource ( java.lang.Object ) ; org.springframework.data.rest.webmvc.HttpHeaders . set ( STRING , org.springframework.data.rest.webmvc.PersistentEntityResource . getId ( ) . getHref ( ) ) ; return org.springframework.data.rest.webmvc.PersistentEntityResource ; } } ) . orElseThrow ( ( ) new ResourceNotFoundException ( ) ) ; return ControllerUtils . toResponseEntity ( HttpStatus . OK , org.springframework.data.rest.webmvc.HttpHeaders , java.util.Optional<org.springframework.data.rest.webmvc.ResourceSupport> ( org.springframework.data.rest.webmvc.RootResourceInformation , java.io.Serializable , java.lang.String , java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> , HttpMethod . GET ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = java.lang.String , method = DELETE ) public org.springframework.data.rest.webmvc.ResponseEntity<? extends org.springframework.data.rest.webmvc.ResourceSupport> < ? extends ResourceSupport > org.springframework.data.rest.webmvc.ResponseEntity<? extends org.springframework.data.rest.webmvc.ResourceSupport> ( final RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation , @ BackendId java.io.Serializable java.io.Serializable , @ PathVariable java.lang.String java.lang.String ) throws java.lang.Exception { java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> < org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty , ResourceSupport > java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> = org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty -> org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> { if ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentProperty<> . isCollectionLike ( ) || org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentProperty<> . isMap ( ) ) { throw org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.HttpRequestMethodNotSupportedException . org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.HttpRequestMethodNotSupportedException ( HttpMethod . DELETE ) . withAllowedMethods ( HttpMethod . GET , HttpMethod . HEAD ) ; } else { org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . void ( ) ; } org.springframework.data.rest.webmvc.ApplicationEventPublisher . publishEvent ( new BeforeLinkDeleteEvent ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentPropertyAccessor . getBean ( ) , org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . java.util.Optional<java.lang.Object> ) ) ; java.lang.Object java.lang.Object = org.springframework.data.rest.webmvc.RootResourceInformation . getInvoker ( ) . invokeSave ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentPropertyAccessor . getBean ( ) ) ; org.springframework.data.rest.webmvc.ApplicationEventPublisher . publishEvent ( new AfterLinkDeleteEvent ( java.lang.Object , org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . java.util.Optional<java.lang.Object> ) ) ; return ( ResourceSupport ) null ; } ) . orElse ( null ) ; java.util.Optional<org.springframework.data.rest.webmvc.ResourceSupport> ( org.springframework.data.rest.webmvc.RootResourceInformation , java.io.Serializable , java.lang.String , java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> , HttpMethod . DELETE ) ; return ControllerUtils . toEmptyResponse ( HttpStatus . NO_CONTENT ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = java.lang.String + STRING , method = GET ) public org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ResourceSupport> < ResourceSupport > org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ResourceSupport> ( final RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation , @ BackendId java.io.Serializable java.io.Serializable , @ PathVariable java.lang.String java.lang.String , final @ PathVariable java.lang.String java.lang.String , final PersistentEntityResourceAssembler org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler ) throws java.lang.Exception { final HttpHeaders org.springframework.data.rest.webmvc.HttpHeaders = new HttpHeaders ( ) ; java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> < org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty , ResourceSupport > java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> = org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty -> org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> { if ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentProperty<> . isCollectionLike ( ) ) { for ( java.lang.Object java.lang.Object : ( java.lang.Iterable<?> < ? > ) java.lang.Object ) { IdentifierAccessor org.springframework.data.rest.webmvc.IdentifierAccessor = org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentEntity<,> . getIdentifierAccessor ( java.lang.Object ) ; if ( java.lang.String . boolean ( org.springframework.data.rest.webmvc.IdentifierAccessor . getIdentifier ( ) . toString ( ) ) ) { PersistentEntityResource org.springframework.data.rest.webmvc.PersistentEntityResource = org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler . toResource ( java.lang.Object ) ; org.springframework.data.rest.webmvc.HttpHeaders . set ( STRING , org.springframework.data.rest.webmvc.PersistentEntityResource . getId ( ) . getHref ( ) ) ; return org.springframework.data.rest.webmvc.PersistentEntityResource ; } } } else if ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentProperty<> . isMap ( ) ) { for ( java.util.Map . java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : ( ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.lang.Object ) . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { IdentifierAccessor org.springframework.data.rest.webmvc.IdentifierAccessor = org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentEntity<,> . getIdentifierAccessor ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) ; if ( java.lang.String . boolean ( org.springframework.data.rest.webmvc.IdentifierAccessor . getIdentifier ( ) . toString ( ) ) ) { PersistentEntityResource org.springframework.data.rest.webmvc.PersistentEntityResource = org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler . toResource ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) ; org.springframework.data.rest.webmvc.HttpHeaders . set ( STRING , org.springframework.data.rest.webmvc.PersistentEntityResource . getId ( ) . getHref ( ) ) ; return org.springframework.data.rest.webmvc.PersistentEntityResource ; } } } else { return new Resource < java.lang.Object > ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . java.util.Optional<java.lang.Object> ) ; } throw new ResourceNotFoundException ( ) ; } ) . orElseThrow ( ( ) new ResourceNotFoundException ( ) ) ; return ControllerUtils . toResponseEntity ( HttpStatus . OK , org.springframework.data.rest.webmvc.HttpHeaders , java.util.Optional<org.springframework.data.rest.webmvc.ResourceSupport> ( org.springframework.data.rest.webmvc.RootResourceInformation , java.io.Serializable , java.lang.String , java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> , HttpMethod . GET ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = java.lang.String , method = GET , produces = { SPRING_DATA_COMPACT_JSON_VALUE , TEXT_URI_LIST_VALUE } ) public org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ResourceSupport> < ResourceSupport > org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ResourceSupport> ( RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation , @ BackendId java.io.Serializable java.io.Serializable , @ PathVariable java.lang.String java.lang.String , PersistentEntityResourceAssembler org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler )			throws java.lang.Exception { ResponseEntity < ResourceSupport > org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ResourceSupport> = org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ResourceSupport> ( org.springframework.data.rest.webmvc.RootResourceInformation , java.io.Serializable , java.lang.String , org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler ) ; if ( org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ResourceSupport> . getStatusCode ( ) != HttpStatus . OK ) { return org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ResourceSupport> ; } ResourceMetadata org.springframework.data.rest.webmvc.ResourceMetadata = org.springframework.data.rest.webmvc.RootResourceInformation . getResourceMetadata ( ) ; PersistentProperty < ? > org.springframework.data.rest.webmvc.PersistentProperty<?> = org.springframework.data.rest.webmvc.RootResourceInformation . getPersistentEntity ( ) . getRequiredPersistentProperty ( java.lang.String ) ; ResourceMapping org.springframework.data.rest.webmvc.ResourceMapping = org.springframework.data.rest.webmvc.ResourceMetadata . getMappingFor ( org.springframework.data.rest.webmvc.PersistentProperty<> ) ; ResourceSupport org.springframework.data.rest.webmvc.ResourceSupport = org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ResourceSupport> . getBody ( ) ; java.util.List<org.springframework.data.rest.webmvc.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.Link> = new java.util.ArrayList<org.springframework.data.rest.webmvc.Link> < Link > ( ) ; ControllerLinkBuilder org.springframework.data.rest.webmvc.ControllerLinkBuilder = linkTo ( methodOn ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController .class ) . followPropertyReference ( org.springframework.data.rest.webmvc.RootResourceInformation , java.io.Serializable , java.lang.String , org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler ) ) ; if ( org.springframework.data.rest.webmvc.ResourceSupport instanceof Resource ) { java.lang.Object java.lang.Object = ( ( Resource < ? > ) org.springframework.data.rest.webmvc.ResourceSupport ) . getContent ( ) ; if ( java.lang.Object instanceof java.lang.Iterable ) { for ( Resource < ? > org.springframework.data.rest.webmvc.Resource<?> : ( java.lang.Iterable<org.springframework.data.rest.webmvc.Resource<?>> < Resource < ? > > ) java.lang.Object ) { java.util.List<org.springframework.data.rest.webmvc.Link> . add ( org.springframework.data.rest.webmvc.ControllerLinkBuilder . withRel ( org.springframework.data.rest.webmvc.ResourceMapping . getRel ( ) ) ) ; } } else if ( java.lang.Object instanceof java.util.Map ) { java.util.Map<java.lang.Object,org.springframework.data.rest.webmvc.Resource<?>> < java.lang.Object , Resource < ? > > java.util.Map<java.lang.Object,org.springframework.data.rest.webmvc.Resource<?>> = ( java.util.Map<java.lang.Object,org.springframework.data.rest.webmvc.Resource<?>> < java.lang.Object , Resource < ? > > ) java.lang.Object ; for ( java.util.Map.Entry<java.lang.Object,org.springframework.data.rest.webmvc.Resource<?>> < java.lang.Object , Resource < ? > > java.util.Map.Entry<java.lang.Object,org.springframework.data.rest.webmvc.Resource<?>> : java.util.Map<java.lang.Object,org.springframework.data.rest.webmvc.Resource<?>> . entrySet ( ) ) { Link org.springframework.data.rest.webmvc.Link = new Link ( java.util.Map.Entry<java.lang.Object,org.springframework.data.rest.webmvc.Resource<?>> . getValue ( ) . getLink ( STRING ) . getHref ( ) , java.util.Map.Entry<java.lang.Object,org.springframework.data.rest.webmvc.Resource<?>> . getKey ( ) . toString ( ) ) ; java.util.List<org.springframework.data.rest.webmvc.Link> . add ( org.springframework.data.rest.webmvc.Link ) ; } } } else { java.util.List<org.springframework.data.rest.webmvc.Link> . add ( org.springframework.data.rest.webmvc.ControllerLinkBuilder . withRel ( org.springframework.data.rest.webmvc.ResourceMapping . getRel ( ) ) ) ; } return ControllerUtils . toResponseEntity ( HttpStatus . OK , null , new Resource < java.lang.Object > ( EMPTY_RESOURCE_LIST , java.util.List<org.springframework.data.rest.webmvc.Link> ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = java.lang.String , method = { PATCH , PUT , POST } , consumes = { MediaType . APPLICATION_JSON_VALUE , SPRING_DATA_COMPACT_JSON_VALUE , TEXT_URI_LIST_VALUE } ) public org.springframework.data.rest.webmvc.ResponseEntity<? extends org.springframework.data.rest.webmvc.ResourceSupport> < ? extends ResourceSupport > org.springframework.data.rest.webmvc.ResponseEntity<? extends org.springframework.data.rest.webmvc.ResourceSupport> ( final RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation , final HttpMethod org.springframework.data.rest.webmvc.HttpMethod , final @ RequestBody ( required = false ) Resources < java.lang.Object > org.springframework.data.rest.webmvc.Resources<java.lang.Object> , @ BackendId java.io.Serializable java.io.Serializable , @ PathVariable java.lang.String java.lang.String ) throws java.lang.Exception { final Resources < java.lang.Object > org.springframework.data.rest.webmvc.Resources<java.lang.Object> = org.springframework.data.rest.webmvc.Resources<java.lang.Object> == null ? new Resources < java.lang.Object > ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) : org.springframework.data.rest.webmvc.Resources<java.lang.Object> ; final RepositoryInvoker org.springframework.data.rest.webmvc.RepositoryInvoker = org.springframework.data.rest.webmvc.RootResourceInformation . getInvoker ( ) ; java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> < org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty , ResourceSupport > java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> = org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty -> { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentProperty<> . getType ( ) ; if ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentProperty<> . isCollectionLike ( ) ) { java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = java.util.Collection<org.springframework.data.rest.webmvc.HttpMethod> . contains ( org.springframework.data.rest.webmvc.HttpMethod ) ? ( java.util.Collection<java.lang.Object> < java.lang.Object > ) org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . java.util.Optional<java.lang.Object> . java.lang.Object ( null ) : CollectionFactory . createCollection ( java.lang.Class<> , NUMBER ) ; for ( Link org.springframework.data.rest.webmvc.Link : org.springframework.data.rest.webmvc.Resources<java.lang.Object> . getLinks ( ) ) { java.util.Collection<java.lang.Object> . boolean ( java.util.Optional<java.lang.Object> ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . java.lang.Class<> , org.springframework.data.rest.webmvc.Link ) . orElse ( null ) ) ; } org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentPropertyAccessor . setProperty ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentProperty<> , java.util.Optional . java.util.Optional<java.util.Collection<java.lang.Object>> ( java.util.Collection<java.lang.Object> ) ) ; } else if ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentProperty<> . isMap ( ) ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collection<org.springframework.data.rest.webmvc.HttpMethod> . contains ( org.springframework.data.rest.webmvc.HttpMethod ) ? ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . java.util.Optional<java.lang.Object> . java.lang.Object ( null ) : CollectionFactory .< java.lang.String , java.lang.Object > createMap ( java.lang.Class<> , NUMBER ) ; for ( Link org.springframework.data.rest.webmvc.Link : org.springframework.data.rest.webmvc.Resources<java.lang.Object> . getLinks ( ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.data.rest.webmvc.Link . getRel ( ) , java.util.Optional<java.lang.Object> ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . java.lang.Class<> , org.springframework.data.rest.webmvc.Link ) . orElse ( null ) ) ; } org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentPropertyAccessor . setProperty ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentProperty<> , java.util.Optional . java.util.Optional<java.util.Map<java.lang.String,java.lang.Object>> ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; } else { if ( HttpMethod . PATCH . equals ( org.springframework.data.rest.webmvc.HttpMethod ) ) { throw org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.HttpRequestMethodNotSupportedException . org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.HttpRequestMethodNotSupportedException ( HttpMethod . PATCH ) . withAllowedMethods ( HttpMethod . PATCH ) . withMessage ( STRING ) ; } if ( org.springframework.data.rest.webmvc.Resources<java.lang.Object> . getLinks ( ) . size ( ) != NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = java.util.Optional<java.lang.Object> ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . java.lang.Class<> , org.springframework.data.rest.webmvc.Resources<java.lang.Object> . getLinks ( ) . get ( NUMBER ) ) ; org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentPropertyAccessor . setProperty ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentProperty<> , java.util.Optional<java.lang.Object> ) ; } org.springframework.data.rest.webmvc.ApplicationEventPublisher . publishEvent ( new BeforeLinkSaveEvent ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentPropertyAccessor . getBean ( ) , org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . java.util.Optional<java.lang.Object> ) ) ; java.lang.Object java.lang.Object = org.springframework.data.rest.webmvc.RepositoryInvoker . invokeSave ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentPropertyAccessor . getBean ( ) ) ; org.springframework.data.rest.webmvc.ApplicationEventPublisher . publishEvent ( new AfterLinkSaveEvent ( java.lang.Object , org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . java.util.Optional<java.lang.Object> ) ) ; return null ; } ; java.util.Optional<org.springframework.data.rest.webmvc.ResourceSupport> ( org.springframework.data.rest.webmvc.RootResourceInformation , java.io.Serializable , java.lang.String , java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> , org.springframework.data.rest.webmvc.HttpMethod ) ; return ControllerUtils . toEmptyResponse ( HttpStatus . NO_CONTENT ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = java.lang.String + STRING , method = DELETE ) public org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ResourceSupport> < ResourceSupport > org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ResourceSupport> ( final RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation , @ BackendId java.io.Serializable java.io.Serializable , @ PathVariable java.lang.String java.lang.String , final @ PathVariable java.lang.String java.lang.String )			throws java.lang.Exception { java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> < org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty , ResourceSupport > java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> = org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty -> org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> { if ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentProperty<> . isCollectionLike ( ) ) { java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = ( java.util.Collection<java.lang.Object> < java.lang.Object > ) java.lang.Object ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Collection<java.lang.Object> . java.util.Iterator<java.lang.Object> ( ) ; while ( java.util.Iterator<java.lang.Object> . boolean ( ) ) { java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentEntity<,> . getIdentifierAccessor ( java.lang.Object ) . getIdentifier ( ) . map ( java.lang.Object :: java.lang.String ) . filter ( id -> propertyId . equals ( id ) ) . ifPresent ( __ -> iterator . remove ( ) ) ; } } else if ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentProperty<> . isMap ( ) ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.lang.Object ; java.util.Iterator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> < java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > > java.util.Iterator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> = java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) . java.util.Iterator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ; while ( java.util.Iterator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> . boolean ( ) ) { java.lang.Object java.lang.Object = java.util.Iterator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> . java.util.Map.Entry<java.lang.Object,java.lang.Object> ( ) . java.lang.Object ( ) ; org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentEntity<,> . getIdentifierAccessor ( java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object ) ) . getIdentifier ( ) . map ( java.lang.Object :: java.lang.String ) . filter ( id -> propertyId . equals ( id ) ) . ifPresent ( __ -> iterator . remove ( ) ) ; } } else { org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . void ( ) ; } org.springframework.data.rest.webmvc.ApplicationEventPublisher . publishEvent ( new BeforeLinkDeleteEvent ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentPropertyAccessor . getBean ( ) , java.lang.Object ) ) ; java.lang.Object java.lang.Object = org.springframework.data.rest.webmvc.RootResourceInformation . getInvoker ( ) . invokeSave ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty . org.springframework.data.rest.webmvc.PersistentPropertyAccessor . getBean ( ) ) ; org.springframework.data.rest.webmvc.ApplicationEventPublisher . publishEvent ( new AfterLinkDeleteEvent ( java.lang.Object , java.lang.Object ) ) ; return ( ResourceSupport ) null ; } ) . orElse ( null ) ; java.util.Optional<org.springframework.data.rest.webmvc.ResourceSupport> ( org.springframework.data.rest.webmvc.RootResourceInformation , java.io.Serializable , java.lang.String , java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> , HttpMethod . DELETE ) ; return ControllerUtils . toEmptyResponse ( HttpStatus . NO_CONTENT ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( java.lang.Class<?> < ? > java.lang.Class<?> , Link org.springframework.data.rest.webmvc.Link ) { java.lang.String java.lang.String = org.springframework.data.rest.webmvc.Link . expand ( ) . getHref ( ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( java.lang.String . int ( '/' ) + NUMBER ) ; RepositoryInvoker org.springframework.data.rest.webmvc.RepositoryInvoker = org.springframework.data.rest.webmvc.RepositoryInvokerFactory . getInvokerFor ( java.lang.Class<> ) ; return org.springframework.data.rest.webmvc.RepositoryInvoker . invokeFindOne ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<org.springframework.data.rest.webmvc.ResourceSupport> < ResourceSupport > java.util.Optional<org.springframework.data.rest.webmvc.ResourceSupport> ( RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation , java.io.Serializable java.io.Serializable , java.lang.String java.lang.String , java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> < org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty , ResourceSupport > java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> , HttpMethod org.springframework.data.rest.webmvc.HttpMethod )			throws java.lang.Exception { ResourceMetadata org.springframework.data.rest.webmvc.ResourceMetadata = org.springframework.data.rest.webmvc.RootResourceInformation . getResourceMetadata ( ) ; PropertyAwareResourceMapping org.springframework.data.rest.webmvc.PropertyAwareResourceMapping = org.springframework.data.rest.webmvc.ResourceMetadata . getProperty ( java.lang.String ) ; if ( org.springframework.data.rest.webmvc.PropertyAwareResourceMapping == null || ! org.springframework.data.rest.webmvc.PropertyAwareResourceMapping . isExported ( ) ) { throw new ResourceNotFoundException ( ) ; } PersistentProperty < ? > org.springframework.data.rest.webmvc.PersistentProperty<?> = org.springframework.data.rest.webmvc.PropertyAwareResourceMapping . getProperty ( ) ; org.springframework.data.rest.webmvc.RootResourceInformation . verifySupportedMethod ( org.springframework.data.rest.webmvc.HttpMethod , org.springframework.data.rest.webmvc.PersistentProperty<> ) ; RepositoryInvoker org.springframework.data.rest.webmvc.RepositoryInvoker = org.springframework.data.rest.webmvc.RootResourceInformation . getInvoker ( ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = org.springframework.data.rest.webmvc.RepositoryInvoker . invokeFindOne ( java.io.Serializable ) ; java.util.Optional<java.lang.Object> . java.lang.Object ( ( ) new ResourceNotFoundException ( ) ) ; return java.util.Optional<java.lang.Object> . java.util.Optional<org.springframework.data.rest.webmvc.ResourceSupport> ( java.lang.Object -> { PersistentPropertyAccessor org.springframework.data.rest.webmvc.PersistentPropertyAccessor = org.springframework.data.rest.webmvc.PersistentProperty<> . getOwner ( ) . getPropertyAccessor ( java.lang.Object ) ; return java.util.function.Function<org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty,org.springframework.data.rest.webmvc.ResourceSupport> . apply ( new org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.ReferencedProperty ( org.springframework.data.rest.webmvc.PersistentProperty<> , org.springframework.data.rest.webmvc.PersistentPropertyAccessor . getProperty ( org.springframework.data.rest.webmvc.PersistentProperty<> ) , org.springframework.data.rest.webmvc.PersistentPropertyAccessor ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> private void ( PersistentProperty < ? > org.springframework.data.rest.webmvc.PersistentProperty<?> , java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> , PersistentPropertyAccessor org.springframework.data.rest.webmvc.PersistentPropertyAccessor ) { this . org.springframework.data.rest.webmvc.PersistentProperty<?> = org.springframework.data.rest.webmvc.PersistentProperty<> ; this . java.util.Optional<java.lang.Object> = java.util.Optional<java.lang.Object> ; this . org.springframework.data.rest.webmvc.PersistentPropertyAccessor = org.springframework.data.rest.webmvc.PersistentPropertyAccessor ; this . java.lang.Class<?> = org.springframework.data.rest.webmvc.PersistentProperty<> . getActualType ( ) ; this . org.springframework.data.rest.webmvc.PersistentEntity<?,?> = org.springframework.data.rest.webmvc.Repositories . getPersistentEntity ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { org.springframework.data.rest.webmvc.PersistentPropertyAccessor . setProperty ( org.springframework.data.rest.webmvc.PersistentProperty<> , java.util.Optional<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { org.springframework.data.rest.webmvc.PersistentPropertyAccessor . setProperty ( org.springframework.data.rest.webmvc.PersistentProperty<> , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler public org.springframework.data.rest.webmvc.ResponseEntity<java.lang.Void> < java.lang.Void > org.springframework.data.rest.webmvc.ResponseEntity<java.lang.Void> ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.HttpRequestMethodNotSupportedException org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.HttpRequestMethodNotSupportedException ) { return org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.HttpRequestMethodNotSupportedException . org.springframework.data.rest.webmvc.ResponseEntity<java.lang.Void> ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.HttpRequestMethodNotSupportedException org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.HttpRequestMethodNotSupportedException ( HttpMethod org.springframework.data.rest.webmvc.HttpMethod ) { return new org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.HttpRequestMethodNotSupportedException ( org.springframework.data.rest.webmvc.HttpMethod , new HttpMethod [ NUMBER ] , null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.HttpRequestMethodNotSupportedException org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.HttpRequestMethodNotSupportedException ( HttpMethod ... org.springframework.data.rest.webmvc.HttpMethod[] ) { return new org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.HttpRequestMethodNotSupportedException ( this . org.springframework.data.rest.webmvc.HttpMethod , org.springframework.data.rest.webmvc.HttpMethod[] . clone ( ) , null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.HttpRequestMethodNotSupportedException org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.HttpRequestMethodNotSupportedException ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { return new org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.HttpRequestMethodNotSupportedException ( this . org.springframework.data.rest.webmvc.HttpMethod , this . org.springframework.data.rest.webmvc.HttpMethod[] , java.lang.String . java.lang.String ( java.lang.String , java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.webmvc.ResponseEntity<java.lang.Void> < java.lang.Void > org.springframework.data.rest.webmvc.ResponseEntity<java.lang.Void> ( ) { return ResponseEntity . status ( HttpStatus . METHOD_NOT_ALLOWED ) . allow ( org.springframework.data.rest.webmvc.HttpMethod[] ) . build ( ) ; }  <METHOD_END>
