<METHOD_START> @ Test public void void ( ) { assertTrue ( java.lang.reflect.Proxy . boolean ( entityManagerFactory . getClass ( ) ) ) ; assertTrue ( STRING , entityManagerFactory instanceof EntityManagerFactoryInfo ) ; EntityManagerFactoryInfo org.springframework.orm.jpa.EntityManagerFactoryInfo = ( EntityManagerFactoryInfo ) entityManagerFactory ; assertNotNull ( STRING , org.springframework.orm.jpa.EntityManagerFactoryInfo . getPersistenceUnitInfo ( ) ) ; assertNotNull ( STRING , org.springframework.orm.jpa.EntityManagerFactoryInfo . getNativeEntityManagerFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , NUMBER , countRowsInTable ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , NUMBER , countRowsInTable ( STRING ) ) ; executeSqlScript ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { assertTrue ( java.lang.reflect.Proxy . boolean ( sharedEntityManager . getClass ( ) ) ) ; Query org.springframework.orm.jpa.Query = sharedEntityManager . createQuery ( STRING ) ; java.util.List<org.springframework.orm.jpa.Person> < Person > java.util.List<org.springframework.orm.jpa.Person> = org.springframework.orm.jpa.Query . getResultList ( ) ; assertTrue ( STRING , sharedEntityManager . isOpen ( ) ) ; sharedEntityManager . close ( ) ; assertTrue ( STRING , sharedEntityManager . isOpen ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { Query org.springframework.orm.jpa.Query = sharedEntityManager . createQuery ( STRING ) ; org.springframework.orm.jpa.Query . executeUpdate ( ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { Person org.springframework.orm.jpa.Person = sharedEntityManager . getReference ( Person .class , NUMBER ) ; org.springframework.orm.jpa.Person . getFirstName ( ) ; fail ( STRING ) ; } catch ( EntityNotFoundException org.springframework.orm.jpa.EntityNotFoundException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { Person org.springframework.orm.jpa.Person = new Person ( ) ; org.springframework.orm.jpa.Person . setFirstName ( STRING ) ; org.springframework.orm.jpa.Person . setLastName ( STRING ) ; org.springframework.orm.jpa.Person . setDriversLicense ( new DriversLicense ( STRING ) ) ; sharedEntityManager . persist ( org.springframework.orm.jpa.Person ) ; setComplete ( ) ; endTransaction ( ) ; startNewTransaction ( ) ; sharedEntityManager . clear ( ) ; Person org.springframework.orm.jpa.Person = entityManagerFactory . createEntityManager ( ) . getReference ( Person .class , org.springframework.orm.jpa.Person . getId ( ) ) ; assertNotSame ( org.springframework.orm.jpa.Person , org.springframework.orm.jpa.Person ) ; endTransaction ( ) ; assertNotNull ( org.springframework.orm.jpa.Person . getDriversLicense ( ) ) ; org.springframework.orm.jpa.Person . getDriversLicense ( ) . getSerialNumber ( ) ; } finally { deleteFromTables ( STRING , STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.lang.String java.lang.String = STRING ; void ( java.lang.String ) ; assertTrue ( java.lang.reflect.Proxy . boolean ( sharedEntityManager . getClass ( ) ) ) ; Query org.springframework.orm.jpa.Query = sharedEntityManager . createQuery ( STRING ) ; java.util.List<org.springframework.orm.jpa.Person> < Person > java.util.List<org.springframework.orm.jpa.Person> = org.springframework.orm.jpa.Query . getResultList ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.orm.jpa.Person> . size ( ) ) ; assertEquals ( java.lang.String , java.util.List<org.springframework.orm.jpa.Person> . get ( NUMBER ) . getFirstName ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = STRING ; jdbcTemplate . update ( java.lang.String , NUMBER , java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { sharedEntityManager . getTransaction ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( sharedEntityManager ) ; }  <METHOD_END>
<METHOD_START> protected void void ( EntityManager org.springframework.orm.jpa.EntityManager ) { assertEquals ( STRING , NUMBER , countRowsInTable ( STRING ) ) ; Person org.springframework.orm.jpa.Person = new Person ( ) ; org.springframework.orm.jpa.Person . setFirstName ( STRING ) ; org.springframework.orm.jpa.Person . setLastName ( STRING ) ; org.springframework.orm.jpa.EntityManager . persist ( org.springframework.orm.jpa.Person ) ; org.springframework.orm.jpa.EntityManager . flush ( ) ; assertEquals ( STRING , NUMBER , countRowsInTable ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { EntityManager org.springframework.orm.jpa.EntityManager = entityManagerFactory . createEntityManager ( ) ; Query org.springframework.orm.jpa.Query = org.springframework.orm.jpa.EntityManager . createQuery ( STRING ) ; java.util.List<org.springframework.orm.jpa.Person> < Person > java.util.List<org.springframework.orm.jpa.Person> = org.springframework.orm.jpa.Query . getResultList ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.orm.jpa.Person> . size ( ) ) ; try { assertNull ( org.springframework.orm.jpa.Query . getSingleResult ( ) ) ; fail ( STRING ) ; } catch ( NoResultException org.springframework.orm.jpa.NoResultException ) { } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { EntityManager org.springframework.orm.jpa.EntityManager = entityManagerFactory . createEntityManager ( ) ; Query org.springframework.orm.jpa.Query = org.springframework.orm.jpa.EntityManager . createQuery ( STRING ) ; java.util.List<org.springframework.orm.jpa.Person> < Person > java.util.List<org.springframework.orm.jpa.Person> = org.springframework.orm.jpa.Query . getResultList ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.orm.jpa.Person> . size ( ) ) ; try { assertNull ( org.springframework.orm.jpa.Query . getSingleResult ( ) ) ; fail ( STRING ) ; } catch ( NoResultException org.springframework.orm.jpa.NoResultException ) { } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { EntityManager org.springframework.orm.jpa.EntityManager = SharedEntityManagerCreator . createSharedEntityManager ( entityManagerFactory ) ; Query org.springframework.orm.jpa.Query = org.springframework.orm.jpa.EntityManager . createQuery ( STRING ) ; org.springframework.orm.jpa.Query . setFlushMode ( FlushModeType . AUTO ) ; java.util.List<org.springframework.orm.jpa.Person> < Person > java.util.List<org.springframework.orm.jpa.Person> = org.springframework.orm.jpa.Query . getResultList ( ) ; try { assertNull ( org.springframework.orm.jpa.Query . getSingleResult ( ) ) ; fail ( STRING ) ; } catch ( NoResultException org.springframework.orm.jpa.NoResultException ) { } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { endTransaction ( ) ; EntityManager org.springframework.orm.jpa.EntityManager = SharedEntityManagerCreator . createSharedEntityManager ( entityManagerFactory ) ; Query org.springframework.orm.jpa.Query = org.springframework.orm.jpa.EntityManager . createQuery ( STRING ) ; org.springframework.orm.jpa.Query . setFlushMode ( FlushModeType . AUTO ) ; java.util.List<org.springframework.orm.jpa.Person> < Person > java.util.List<org.springframework.orm.jpa.Person> = org.springframework.orm.jpa.Query . getResultList ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.orm.jpa.Person> . size ( ) ) ; try { assertNull ( org.springframework.orm.jpa.Query . getSingleResult ( ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( java.lang.Exception . java.lang.String ( ) . boolean ( STRING ) ) ; } org.springframework.orm.jpa.Query = org.springframework.orm.jpa.EntityManager . createQuery ( STRING ) ; org.springframework.orm.jpa.Query . setFlushMode ( FlushModeType . AUTO ) ; try { assertNull ( org.springframework.orm.jpa.Query . getSingleResult ( ) ) ; fail ( STRING ) ; } catch ( NoResultException org.springframework.orm.jpa.NoResultException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNotNull ( SerializationTestUtils . serializeAndDeserialize ( entityManagerFactory ) ) ; assertNotNull ( SerializationTestUtils . serializeAndDeserialize ( sharedEntityManager ) ) ; }  <METHOD_END>
