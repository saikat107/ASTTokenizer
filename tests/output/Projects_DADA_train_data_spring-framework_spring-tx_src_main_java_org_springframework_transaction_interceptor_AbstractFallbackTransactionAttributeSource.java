<METHOD_START> @ java.lang.Override public org.springframework.transaction.interceptor.TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.reflect.Method . java.lang.Class<?> ( ) == java.lang.Object .class ) { return null ; } java.lang.Object java.lang.Object = java.lang.Object ( java.lang.reflect.Method , java.lang.Class<> ) ; java.lang.Object java.lang.Object = this . java.util.Map<java.lang.Object,org.springframework.transaction.interceptor.TransactionAttribute> . get ( java.lang.Object ) ; if ( java.lang.Object != null ) { if ( java.lang.Object == org.springframework.transaction.interceptor.TransactionAttribute ) { return null ; } else { return ( TransactionAttribute ) java.lang.Object ; } } else { TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = org.springframework.transaction.interceptor.TransactionAttribute ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( org.springframework.transaction.interceptor.TransactionAttribute == null ) { this . java.util.Map<java.lang.Object,org.springframework.transaction.interceptor.TransactionAttribute> . put ( java.lang.Object , org.springframework.transaction.interceptor.TransactionAttribute ) ; } else { java.lang.String java.lang.String = ClassUtils . getQualifiedMethodName ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( org.springframework.transaction.interceptor.TransactionAttribute instanceof DefaultTransactionAttribute ) { ( ( DefaultTransactionAttribute ) org.springframework.transaction.interceptor.TransactionAttribute ) . setDescriptor ( java.lang.String ) ; } if ( org.springframework.transaction.interceptor.Log . isDebugEnabled ( ) ) { org.springframework.transaction.interceptor.Log . debug ( STRING + java.lang.String + STRING + org.springframework.transaction.interceptor.TransactionAttribute ) ; } this . java.util.Map<java.lang.Object,org.springframework.transaction.interceptor.TransactionAttribute> . put ( java.lang.Object , org.springframework.transaction.interceptor.TransactionAttribute ) ; } return org.springframework.transaction.interceptor.TransactionAttribute ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return new MethodClassKey ( java.lang.reflect.Method , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.interceptor.TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( boolean ( ) && ! java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { return null ; } java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . getUserClass ( java.lang.Class<> ) ; java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getMostSpecificMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; java.lang.reflect.Method = BridgeMethodResolver . findBridgedMethod ( java.lang.reflect.Method ) ; TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = org.springframework.transaction.interceptor.TransactionAttribute ( java.lang.reflect.Method ) ; if ( org.springframework.transaction.interceptor.TransactionAttribute != null ) { return org.springframework.transaction.interceptor.TransactionAttribute ; } org.springframework.transaction.interceptor.TransactionAttribute = org.springframework.transaction.interceptor.TransactionAttribute ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; if ( org.springframework.transaction.interceptor.TransactionAttribute != null && ClassUtils . isUserLevelMethod ( java.lang.reflect.Method ) ) { return org.springframework.transaction.interceptor.TransactionAttribute ; } if ( java.lang.reflect.Method != java.lang.reflect.Method ) { org.springframework.transaction.interceptor.TransactionAttribute = org.springframework.transaction.interceptor.TransactionAttribute ( java.lang.reflect.Method ) ; if ( org.springframework.transaction.interceptor.TransactionAttribute != null ) { return org.springframework.transaction.interceptor.TransactionAttribute ; } org.springframework.transaction.interceptor.TransactionAttribute = org.springframework.transaction.interceptor.TransactionAttribute ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; if ( org.springframework.transaction.interceptor.TransactionAttribute != null && ClassUtils . isUserLevelMethod ( java.lang.reflect.Method ) ) { return org.springframework.transaction.interceptor.TransactionAttribute ; } } return null ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.transaction.interceptor.TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute ( java.lang.reflect.Method java.lang.reflect.Method );  <METHOD_END>
<METHOD_START> protected abstract org.springframework.transaction.interceptor.TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute ( java.lang.Class<?> < ? > java.lang.Class<?> );  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
