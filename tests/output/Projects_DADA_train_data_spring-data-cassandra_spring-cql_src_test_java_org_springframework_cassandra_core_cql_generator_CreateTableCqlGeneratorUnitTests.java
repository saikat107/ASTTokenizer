<METHOD_START> public static void void ( CqlIdentifier org.springframework.cassandra.core.cql.generator.CqlIdentifier , java.lang.String java.lang.String ) { assertThat ( java.lang.String . boolean ( STRING + org.springframework.cassandra.core.cql.generator.CqlIdentifier + STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { assertThat ( java.lang.String . boolean ( STRING + java.lang.String + STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { assertThat ( java.lang.String . boolean ( STRING + java.lang.String + STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { org.springframework.cassandra.core.cql.generator.Logger . info ( java.lang.String + STRING + java.lang.String ) ; assertThat ( java.lang.String . boolean ( java.lang.String + STRING + java.lang.String + STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String , java.lang.Double java.lang.Double , java.lang.String java.lang.String ) { org.springframework.cassandra.core.cql.generator.Logger . info ( java.lang.String + STRING + java.lang.Double ) ; assertThat ( java.lang.String . boolean ( java.lang.String + STRING + java.lang.Double ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String , java.lang.Long java.lang.Long , java.lang.String java.lang.String ) { org.springframework.cassandra.core.cql.generator.Logger . info ( java.lang.String + STRING + java.lang.Long ) ; assertThat ( java.lang.String . boolean ( java.lang.String + STRING + java.lang.Long ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { org.springframework.cassandra.core.cql.generator.Logger . info ( java.lang.String ) ; assertThat ( java.lang.String . boolean ( STRING + java.lang.String + STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.cql.generator.CreateTableCqlGenerator org.springframework.cassandra.core.cql.generator.CreateTableCqlGenerator ( ) { return new CreateTableCqlGenerator ( specification ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.cql.generator.CreateTableSpecification org.springframework.cassandra.core.cql.generator.CreateTableSpecification ( ) { return CreateTableSpecification . createTable ( ) . name ( org.springframework.cassandra.core.cql.generator.CqlIdentifier ) . partitionKeyColumn ( org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType ) . column ( java.lang.String , org.springframework.cassandra.core.cql.generator.DataType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { prepare ( ) ; void ( org.springframework.cassandra.core.cql.generator.CqlIdentifier , cql ) ; void ( java.lang.String . java.lang.String ( STRING , org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType , java.lang.String , org.springframework.cassandra.core.cql.generator.DataType ) , cql ) ; void ( org.springframework.cassandra.core.cql.generator.CqlIdentifier . toCql ( ) , cql ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.cql.generator.CreateTableSpecification org.springframework.cassandra.core.cql.generator.CreateTableSpecification ( ) { return CreateTableSpecification . createTable ( ) . name ( org.springframework.cassandra.core.cql.generator.CqlIdentifier ) . partitionKeyColumn ( org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType ) . partitionKeyColumn ( org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType ) . column ( org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { prepare ( ) ; void ( org.springframework.cassandra.core.cql.generator.CqlIdentifier , cql ) ; void ( java.lang.String . java.lang.String ( STRING , org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType , org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType , org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType ) , cql ) ; void ( java.lang.String . java.lang.String ( STRING , org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.CqlIdentifier ) , cql ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.cql.generator.CreateTableSpecification org.springframework.cassandra.core.cql.generator.CreateTableSpecification ( ) { return CreateTableSpecification . createTable ( ) . name ( org.springframework.cassandra.core.cql.generator.CqlIdentifier ) . partitionKeyColumn ( org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType ) . partitionKeyColumn ( org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType ) . column ( org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType ) . with ( TableOption . READ_REPAIR_CHANCE , java.lang.Double ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { prepare ( ) ; void ( org.springframework.cassandra.core.cql.generator.CqlIdentifier , cql ) ; void ( java.lang.String . java.lang.String ( STRING , org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType , org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType , org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType ) , cql ) ; void ( java.lang.String . java.lang.String ( STRING , org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.CqlIdentifier ) , cql ) ; void ( TableOption . READ_REPAIR_CHANCE . getName ( ) , java.lang.Double , cql ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.cql.generator.CreateTableSpecification org.springframework.cassandra.core.cql.generator.CreateTableSpecification ( ) { java.util.Map<org.springframework.cassandra.core.cql.generator.Option,java.lang.Object> . put ( CompactionOption . CLASS , STRING ) ; java.util.Map<org.springframework.cassandra.core.cql.generator.Option,java.lang.Object> . put ( CompactionOption . MIN_THRESHOLD , STRING ) ; java.util.Map<org.springframework.cassandra.core.cql.generator.Option,java.lang.Object> . put ( CompressionOption . SSTABLE_COMPRESSION , STRING ) ; java.util.Map<org.springframework.cassandra.core.cql.generator.Option,java.lang.Object> . put ( CompressionOption . CHUNK_LENGTH_KB , NUMBER ) ; java.util.Map<org.springframework.cassandra.core.cql.generator.Option,java.lang.Object> . put ( CompressionOption . CRC_CHECK_CHANCE , NUMBER ) ; java.util.Map<org.springframework.cassandra.core.cql.generator.Option,java.lang.Object> . put ( CachingOption . KEYS , KeyCachingOption . ALL ) ; java.util.Map<org.springframework.cassandra.core.cql.generator.Option,java.lang.Object> . put ( CachingOption . ROWS_PER_PARTITION , STRING ) ; return CreateTableSpecification . createTable ( ) . name ( org.springframework.cassandra.core.cql.generator.CqlIdentifier ) . partitionKeyColumn ( org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType ) . partitionKeyColumn ( org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType ) . column ( org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType ) . with ( TableOption . COMPACT_STORAGE ) . with ( TableOption . READ_REPAIR_CHANCE , java.lang.Double ) . with ( TableOption . COMPACTION , java.util.Map<org.springframework.cassandra.core.cql.generator.Option,java.lang.Object> ) . with ( TableOption . COMPRESSION , java.util.Map<org.springframework.cassandra.core.cql.generator.Option,java.lang.Object> ) . with ( TableOption . BLOOM_FILTER_FP_CHANCE , java.lang.Double ) . with ( TableOption . CACHING , java.util.Map<org.springframework.cassandra.core.cql.generator.Option,java.lang.Object> ) . with ( TableOption . COMMENT , java.lang.String ) . with ( TableOption . DCLOCAL_READ_REPAIR_CHANCE , java.lang.Double ) . with ( TableOption . GC_GRACE_SECONDS , java.lang.Long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { prepare ( ) ; org.springframework.cassandra.core.cql.generator.Logger . info ( cql ) ; void ( org.springframework.cassandra.core.cql.generator.CqlIdentifier , cql ) ; void ( java.lang.String . java.lang.String ( STRING , org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType , org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType , org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.DataType ) , cql ) ; void ( java.lang.String . java.lang.String ( STRING , org.springframework.cassandra.core.cql.generator.CqlIdentifier , org.springframework.cassandra.core.cql.generator.CqlIdentifier ) , cql ) ; void ( TableOption . COMPACT_STORAGE . getName ( ) , cql ) ; void ( TableOption . READ_REPAIR_CHANCE . getName ( ) , java.lang.Double , cql ) ; void ( TableOption . DCLOCAL_READ_REPAIR_CHANCE . getName ( ) , java.lang.Double , cql ) ; void ( TableOption . BLOOM_FILTER_FP_CHANCE . getName ( ) , java.lang.Double , cql ) ; void ( TableOption . COMMENT . getName ( ) , java.lang.String , cql ) ; void ( TableOption . GC_GRACE_SECONDS . getName ( ) , java.lang.Long , cql ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { new org.springframework.cassandra.core.cql.generator.CreateTableCqlGeneratorUnitTests.TableNameTest ( java.lang.String ) . void ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.cql.generator.CreateTableSpecification org.springframework.cassandra.core.cql.generator.CreateTableSpecification ( ) { return CreateTableSpecification . createTable ( ) . name ( java.lang.String ) . partitionKeyColumn ( cqlId ( STRING ) , DataType . text ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { prepare ( ) ; void ( cqlId ( java.lang.String ) , cql ) ; }  <METHOD_END>
