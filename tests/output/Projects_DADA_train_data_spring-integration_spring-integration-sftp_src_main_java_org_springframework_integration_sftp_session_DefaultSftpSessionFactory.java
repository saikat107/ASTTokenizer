<METHOD_START> public void ( ) { this( false ); }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this( new JSch ( ) , boolean ); }  <METHOD_END>
<METHOD_START> public void ( JSch org.springframework.integration.sftp.session.JSch , boolean boolean ) { this . org.springframework.integration.sftp.session.JSch = org.springframework.integration.sftp.session.JSch ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Resource org.springframework.integration.sftp.session.Resource ) { this . org.springframework.integration.sftp.session.Resource = org.springframework.integration.sftp.session.Resource ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> public void void ( Proxy org.springframework.integration.sftp.session.Proxy ) { this . org.springframework.integration.sftp.session.Proxy = org.springframework.integration.sftp.session.Proxy ; }  <METHOD_END>
<METHOD_START> public void void ( SocketFactory org.springframework.integration.sftp.session.SocketFactory ) { this . org.springframework.integration.sftp.session.SocketFactory = org.springframework.integration.sftp.session.SocketFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( UserInfo org.springframework.integration.sftp.session.UserInfo ) { this . org.springframework.integration.sftp.session.UserInfo = org.springframework.integration.sftp.session.UserInfo ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.sftp.session.SftpSession org.springframework.integration.sftp.session.SftpSession ( ) { Assert . hasText ( this . java.lang.String , STRING ) ; Assert . hasText ( this . java.lang.String , STRING ) ; Assert . isTrue ( StringUtils . hasText ( this . org.springframework.integration.sftp.session.UserInfo . getPassword ( ) ) || this . org.springframework.integration.sftp.session.Resource != null , STRING ) ; try { JSchSessionWrapper org.springframework.integration.sftp.session.JSchSessionWrapper ; if ( this . boolean ) { this . java.util.concurrent.locks.ReadWriteLock . java.util.concurrent.locks.Lock ( ) . void ( ) ; try { if ( this . org.springframework.integration.sftp.session.JSchSessionWrapper == null || ! this . org.springframework.integration.sftp.session.JSchSessionWrapper . isConnected ( ) ) { this . java.util.concurrent.locks.ReadWriteLock . java.util.concurrent.locks.Lock ( ) . void ( ) ; this . java.util.concurrent.locks.ReadWriteLock . java.util.concurrent.locks.Lock ( ) . void ( ) ; try { if ( this . org.springframework.integration.sftp.session.JSchSessionWrapper == null || ! this . org.springframework.integration.sftp.session.JSchSessionWrapper . isConnected ( ) ) { this . org.springframework.integration.sftp.session.JSchSessionWrapper = new JSchSessionWrapper ( com.jcraft.jsch.Session ( ) ) ; try { this . org.springframework.integration.sftp.session.JSchSessionWrapper . getSession ( ) . connect ( ) ; } catch ( JSchException org.springframework.integration.sftp.session.JSchException ) { throw new java.lang.IllegalStateException ( STRING , org.springframework.integration.sftp.session.JSchException ) ; } } } finally { this . java.util.concurrent.locks.ReadWriteLock . java.util.concurrent.locks.Lock ( ) . void ( ) ; this . java.util.concurrent.locks.ReadWriteLock . java.util.concurrent.locks.Lock ( ) . void ( ) ; } } } finally { this . java.util.concurrent.locks.ReadWriteLock . java.util.concurrent.locks.Lock ( ) . void ( ) ; } org.springframework.integration.sftp.session.JSchSessionWrapper = this . org.springframework.integration.sftp.session.JSchSessionWrapper ; } else { org.springframework.integration.sftp.session.JSchSessionWrapper = new JSchSessionWrapper ( com.jcraft.jsch.Session ( ) ) ; } SftpSession org.springframework.integration.sftp.session.SftpSession = new SftpSession ( org.springframework.integration.sftp.session.JSchSessionWrapper ) ; org.springframework.integration.sftp.session.SftpSession . connect ( ) ; org.springframework.integration.sftp.session.JSchSessionWrapper . addChannel ( ) ; return org.springframework.integration.sftp.session.SftpSession ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private com . com.jcraft . com.jcraft . com.jcraft.jsch.Session com.jcraft.jsch.Session ( ) java.lang.Exception { if ( this . int <= NUMBER ) { this . int = NUMBER ; } if ( StringUtils . hasText ( this . java.lang.String ) ) { this . org.springframework.integration.sftp.session.JSch . setKnownHosts ( this . java.lang.String ) ; } if ( this . org.springframework.integration.sftp.session.Resource != null ) { byte [] byte[] = StreamUtils . copyToByteArray ( this . org.springframework.integration.sftp.session.Resource . getInputStream ( ) ) ; java.lang.String java.lang.String = this . org.springframework.integration.sftp.session.UserInfo . getPassphrase ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { this . org.springframework.integration.sftp.session.JSch . addIdentity ( this . java.lang.String , byte[] , null , java.lang.String . byte[] ( ) ) ; } else { this . org.springframework.integration.sftp.session.JSch . addIdentity ( this . java.lang.String , byte[] , null , null ) ; } } com . com.jcraft . com.jcraft . com.jcraft com.jcraft.jsch.Session = this . org.springframework.integration.sftp.session.JSch . getSession ( this . java.lang.String , this . java.lang.String , this . int ) ; if ( this . java.util.Properties != null ) { com.jcraft.jsch.Session . setConfig ( this . java.util.Properties ) ; } java.lang.String java.lang.String = this . org.springframework.integration.sftp.session.UserInfo . getPassword ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { com.jcraft.jsch.Session . setPassword ( java.lang.String ) ; } com.jcraft.jsch.Session . setUserInfo ( this . org.springframework.integration.sftp.session.UserInfo ) ; try { if ( this . org.springframework.integration.sftp.session.Proxy != null ) { com.jcraft.jsch.Session . setProxy ( this . org.springframework.integration.sftp.session.Proxy ) ; } if ( this . org.springframework.integration.sftp.session.SocketFactory != null ) { com.jcraft.jsch.Session . setSocketFactory ( this . org.springframework.integration.sftp.session.SocketFactory ) ; } if ( this . java.lang.Integer != null ) { com.jcraft.jsch.Session . setTimeout ( this . java.lang.Integer ) ; } if ( StringUtils . hasText ( this . java.lang.String ) ) { com.jcraft.jsch.Session . setClientVersion ( this . java.lang.String ) ; } if ( StringUtils . hasText ( this . java.lang.String ) ) { com.jcraft.jsch.Session . setHostKeyAlias ( this . java.lang.String ) ; } if ( this . java.lang.Integer != null ) { com.jcraft.jsch.Session . setServerAliveInterval ( this . java.lang.Integer ) ; } if ( this . java.lang.Integer != null ) { com.jcraft.jsch.Session . setServerAliveCountMax ( this . java.lang.Integer ) ; } if ( this . java.lang.Boolean != null ) { com.jcraft.jsch.Session . setDaemonThread ( this . java.lang.Boolean ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanCreationException ( STRING + STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } return com.jcraft.jsch.Session ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Assert . state ( this . boolean , STRING ) ; this . org.springframework.integration.sftp.session.JSchSessionWrapper = null ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return org.springframework.integration.sftp.session.UserInfo ( ) != null ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.sftp.session.UserInfo org.springframework.integration.sftp.session.UserInfo ( ) { return org.springframework.integration.sftp.session.DefaultSftpSessionFactory .this . org.springframework.integration.sftp.session.UserInfo ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { if ( boolean ( ) ) { Assert . state ( ! StringUtils . hasText ( org.springframework.integration.sftp.session.DefaultSftpSessionFactory .this . java.lang.String ) , STRING ) ; return org.springframework.integration.sftp.session.UserInfo ( ) . getPassphrase ( ) ; } else { return org.springframework.integration.sftp.session.DefaultSftpSessionFactory .this . java.lang.String ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { if ( boolean ( ) ) { Assert . state ( ! StringUtils . hasText ( org.springframework.integration.sftp.session.DefaultSftpSessionFactory .this . java.lang.String ) , STRING ) ; return org.springframework.integration.sftp.session.UserInfo ( ) . getPassword ( ) ; } else { return org.springframework.integration.sftp.session.DefaultSftpSessionFactory .this . java.lang.String ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { if ( boolean ( ) ) { return org.springframework.integration.sftp.session.UserInfo ( ) . promptPassword ( java.lang.String ) ; } else { if ( org.springframework.integration.sftp.session.Log . isDebugEnabled ( ) ) { org.springframework.integration.sftp.session.Log . debug ( STRING + java.lang.String + STRING ) ; } return true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { if ( boolean ( ) ) { return org.springframework.integration.sftp.session.UserInfo ( ) . promptPassphrase ( java.lang.String ) ; } else { if ( org.springframework.integration.sftp.session.Log . isDebugEnabled ( ) ) { org.springframework.integration.sftp.session.Log . debug ( STRING + java.lang.String + STRING ) ; } return true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { org.springframework.integration.sftp.session.Log . info ( java.lang.String ) ; if ( boolean ( ) ) { return org.springframework.integration.sftp.session.UserInfo ( ) . promptYesNo ( java.lang.String ) ; } else { if ( org.springframework.integration.sftp.session.Log . isDebugEnabled ( ) ) { org.springframework.integration.sftp.session.Log . debug ( STRING + java.lang.String + STRING + org.springframework.integration.sftp.session.DefaultSftpSessionFactory .this . boolean ) ; } return org.springframework.integration.sftp.session.DefaultSftpSessionFactory .this . boolean ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { if ( boolean ( ) ) { org.springframework.integration.sftp.session.UserInfo ( ) . showMessage ( java.lang.String ) ; } else { org.springframework.integration.sftp.session.Log . debug ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String [] java.lang.String[] , boolean [] boolean[] ) { if ( boolean ( ) && org.springframework.integration.sftp.session.UserInfo ( ) instanceof UIKeyboardInteractive ) { return ( ( UIKeyboardInteractive ) org.springframework.integration.sftp.session.UserInfo ( ) ) . promptKeyboardInteractive ( java.lang.String , java.lang.String , java.lang.String , java.lang.String[] , boolean[] ) ; } else { if ( org.springframework.integration.sftp.session.Log . isDebugEnabled ( ) ) { org.springframework.integration.sftp.session.Log . debug ( STRING + java.lang.String + STRING + java.lang.String + STRING + java.lang.String + STRING + java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) + STRING + java.util.Arrays . java.util.List<boolean[]> ( boolean[] ) ) ; } return null ; } }  <METHOD_END>
