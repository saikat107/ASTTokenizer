<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . getState ( ) . getIds ( ) , contains ( States . S0 , States . S1 , States . S11 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S0 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S1 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S11 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . A ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . getState ( ) . getIds ( ) , contains ( States . S0 , States . S1 , States . S11 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . B ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . getState ( ) . getIds ( ) , contains ( States . S0 , States . S1 , States . S11 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . C ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . H ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . C ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . A ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . getState ( ) . getIds ( ) , contains ( States . S0 , States . S1 , States . S11 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S1 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S11 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S11 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S1 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . C ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . getState ( ) . getIds ( ) , contains ( States . S0 , States . S2 , States . S21 , States . S211 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S2 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S21 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S211 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . C ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . getState ( ) . getIds ( ) , contains ( States . S0 , States . S2 , States . S21 , States . S211 ) ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . C ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . getState ( ) . getIds ( ) , contains ( States . S0 , States . S1 , States . S11 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S1 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S11 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . D ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . getState ( ) . getIds ( ) , contains ( States . S0 , States . S1 , States . S11 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S0 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S1 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S11 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . C ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . D ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . getState ( ) . getIds ( ) , contains ( States . S0 , States . S2 , States . S21 , States . S211 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S21 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S211 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . I ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . getState ( ) . getIds ( ) , contains ( States . S0 , States . S1 , States . S12 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S12 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getId ( ) , is ( States . S11 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . I ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . getState ( ) . getIds ( ) , contains ( States . S0 , States . S1 , States . S12 ) ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . I ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . getState ( ) . getIds ( ) , contains ( States . S0 , States . S2 , States . S21 , States . S212 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . H ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.Transition<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getSource ( ) . getId ( ) , is ( States . S1 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . C ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . H ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.Transition<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getSource ( ) . getId ( ) , is ( States . S0 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . A ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . C ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . H ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.Transition<demo.showcase.States,demo.showcase.Events>> . get ( NUMBER ) . getSource ( ) . getId ( ) , is ( States . S0 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . E ) ; demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . getState ( ) . getIds ( ) , contains ( States . S0 , States . S2 , States . S21 , States . S211 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . F ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . getState ( ) . getIds ( ) , contains ( States . S0 , States . S2 , States . S21 , States . S211 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; demo.showcase.ShowcaseTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . sendEvent ( Events . G ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . getState ( ) . getIds ( ) , contains ( States . S0 , States . S2 , States . S21 , States . S211 ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.showcase.ShowcaseTests.TestListener . java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public demo.showcase.StateMachineListener<demo.showcase.States,demo.showcase.Events> < States , Events > demo.showcase.StateMachineListener<demo.showcase.States,demo.showcase.Events> ( ) { demo.showcase.ShowcaseTests.TestListener demo.showcase.ShowcaseTests.TestListener = new demo.showcase.ShowcaseTests.TestListener ( ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . addStateListener ( demo.showcase.ShowcaseTests.TestListener ) ; return demo.showcase.ShowcaseTests.TestListener ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < States , Events > demo.showcase.State<demo.showcase.States,demo.showcase.Events> , State < States , Events > demo.showcase.State<demo.showcase.States,demo.showcase.Events> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < States , Events > demo.showcase.State<demo.showcase.States,demo.showcase.Events> ) { java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . add ( demo.showcase.State<demo.showcase.States,demo.showcase.Events> ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < States , Events > demo.showcase.State<demo.showcase.States,demo.showcase.Events> ) { java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . add ( demo.showcase.State<demo.showcase.States,demo.showcase.Events> ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < States , Events > demo.showcase.Transition<demo.showcase.States,demo.showcase.Events> ) { java.util.List<demo.showcase.Transition<demo.showcase.States,demo.showcase.Events>> . add ( demo.showcase.Transition<demo.showcase.States,demo.showcase.Events> ) ; java.util.concurrent.CountDownLatch . void ( ) ; int ++ ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int , int int ) { void ( int , int , int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int , int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . clear ( ) ; java.util.List<demo.showcase.State<demo.showcase.States,demo.showcase.Events>> . clear ( ) ; int = NUMBER ; java.util.List<demo.showcase.Transition<demo.showcase.States,demo.showcase.Events>> . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Before public void void ( ) { demo.showcase.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; demo.showcase.AnnotationConfigApplicationContext . register ( CommonConfiguration .class , Application .class , demo.showcase.ShowcaseTests.Config .class ) ; demo.showcase.AnnotationConfigApplicationContext . refresh ( ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> = demo.showcase.AnnotationConfigApplicationContext . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; demo.showcase.ShowcaseTests.TestListener = demo.showcase.AnnotationConfigApplicationContext . getBean ( demo.showcase.ShowcaseTests.TestListener .class ) ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . start ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> . stop ( ) ; demo.showcase.AnnotationConfigApplicationContext . close ( ) ; demo.showcase.AnnotationConfigApplicationContext = null ; demo.showcase.StateMachine<demo.showcase.States,demo.showcase.Events> = null ; }  <METHOD_END>
