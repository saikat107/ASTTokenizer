<METHOD_START> @ Before public void void ( ) { DateFormatterRegistrar org.springframework.format.datetime.DateFormatterRegistrar = new DateFormatterRegistrar ( ) ; void ( org.springframework.format.datetime.DateFormatterRegistrar ) ; }  <METHOD_END>
<METHOD_START> private void void ( DateFormatterRegistrar org.springframework.format.datetime.DateFormatterRegistrar ) { DefaultConversionService . addDefaultConverters ( org.springframework.format.datetime.FormattingConversionService ) ; org.springframework.format.datetime.DateFormatterRegistrar . registerFormatters ( org.springframework.format.datetime.FormattingConversionService ) ; org.springframework.format.datetime.DateFormattingTests.SimpleDateBean org.springframework.format.datetime.DateFormattingTests.SimpleDateBean = new org.springframework.format.datetime.DateFormattingTests.SimpleDateBean ( ) ; org.springframework.format.datetime.DateFormattingTests.SimpleDateBean . java.util.List<org.springframework.format.datetime.DateFormattingTests.SimpleDateBean> ( ) . boolean ( new org.springframework.format.datetime.DateFormattingTests.SimpleDateBean ( ) ) ; org.springframework.format.datetime.DataBinder = new DataBinder ( org.springframework.format.datetime.DateFormattingTests.SimpleDateBean ) ; org.springframework.format.datetime.DataBinder . setConversionService ( org.springframework.format.datetime.FormattingConversionService ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { LocaleContextHolder . setLocale ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.DataBinder . bind ( org.springframework.format.datetime.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.DataBinder . bind ( org.springframework.format.datetime.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.DataBinder . bind ( org.springframework.format.datetime.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.DataBinder . bind ( org.springframework.format.datetime.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.MutablePropertyValues . add ( STRING , new java.lang.String [] { STRING } ) ; org.springframework.format.datetime.DataBinder . bind ( org.springframework.format.datetime.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.DataBinder . bind ( org.springframework.format.datetime.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { MutablePropertyValues org.springframework.format.datetime.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.DataBinder . bind ( org.springframework.format.datetime.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.DataBinder . bind ( org.springframework.format.datetime.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.DataBinder . bind ( org.springframework.format.datetime.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.DataBinder . bind ( org.springframework.format.datetime.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.DataBinder . bind ( org.springframework.format.datetime.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.DataBinder . bind ( org.springframework.format.datetime.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.DataBinder . bind ( org.springframework.format.datetime.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Date java.util.Date = new java.util.Date ( ) ; java.lang.Object java.lang.Object = this . org.springframework.format.datetime.FormattingConversionService . convert ( java.util.Date , TypeDescriptor . valueOf ( java.util.Date .class ) , TypeDescriptor . valueOf ( java.lang.String .class ) ) ; java.lang.String java.lang.String = java.util.Date . java.lang.String ( ) ; assertEquals ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateFormatterRegistrar org.springframework.format.datetime.DateFormatterRegistrar = new DateFormatterRegistrar ( ) ; org.springframework.format.datetime.DateFormatterRegistrar . setFormatter ( new DateFormatter ( ) ) ; void ( org.springframework.format.datetime.DateFormatterRegistrar ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; java.lang.Object java.lang.Object = this . org.springframework.format.datetime.FormattingConversionService . convert ( java.util.Date , TypeDescriptor . valueOf ( java.util.Date .class ) , TypeDescriptor . valueOf ( java.lang.String .class ) ) ; java.lang.String java.lang.String = new DateFormatter ( ) . print ( java.util.Date , java.util.Locale . java.util.Locale ) ; assertEquals ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.util.Date java.util.Date = this . org.springframework.format.datetime.FormattingConversionService . convert ( java.lang.String , java.util.Date .class ) ; assertThat ( java.util.Date , equalTo ( new java.util.Date ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateFormatterRegistrar org.springframework.format.datetime.DateFormatterRegistrar = new DateFormatterRegistrar ( ) ; DateFormatter org.springframework.format.datetime.DateFormatter = new DateFormatter ( ) ; org.springframework.format.datetime.DateFormatter . setIso ( ISO . DATE_TIME ) ; org.springframework.format.datetime.DateFormatterRegistrar . setFormatter ( org.springframework.format.datetime.DateFormatter ) ; void ( org.springframework.format.datetime.DateFormatterRegistrar ) ; java.lang.String java.lang.String = STRING ; java.util.Date java.util.Date = this . org.springframework.format.datetime.FormattingConversionService . convert ( java.lang.String , java.util.Date .class ) ; assertNotNull ( java.util.Date ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> @ DateTimeFormat ( style = STRING ) public java.lang.Long java.lang.Long ( ) { return java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( @ DateTimeFormat ( style = STRING ) java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public java.util.Calendar java.util.Calendar ( ) { return java.util.Calendar ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Calendar java.util.Calendar ) { this . java.util.Calendar = java.util.Calendar ; }  <METHOD_END>
<METHOD_START> public java.util.Date java.util.Date ( ) { return java.util.Date ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Date java.util.Date ) { this . java.util.Date = java.util.Date ; }  <METHOD_END>
<METHOD_START> public java.util.Date java.util.Date ( ) { return java.util.Date ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Date java.util.Date ) { this . java.util.Date = java.util.Date ; }  <METHOD_END>
<METHOD_START> public java.util.Date java.util.Date ( ) { return java.util.Date ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Date java.util.Date ) { this . java.util.Date = java.util.Date ; }  <METHOD_END>
<METHOD_START> public java.util.Date java.util.Date ( ) { return java.util.Date ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Date java.util.Date ) { this . java.util.Date = java.util.Date ; }  <METHOD_END>
<METHOD_START> public java.util.Date java.util.Date ( ) { return java.util.Date ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Date java.util.Date ) { this . java.util.Date = java.util.Date ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.format.datetime.DateFormattingTests.SimpleDateBean> < org.springframework.format.datetime.DateFormattingTests.SimpleDateBean > java.util.List<org.springframework.format.datetime.DateFormattingTests.SimpleDateBean> ( ) { return java.util.List<org.springframework.format.datetime.DateFormattingTests.SimpleDateBean> ; }  <METHOD_END>
