<METHOD_START> public void ( int int , SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl ) { super( int , org.springframework.expression.spel.ast.SpelNodeImpl ); this . exitTypeDescriptor = STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.BooleanTypedValue org.springframework.expression.spel.ast.BooleanTypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { try { java.lang.Boolean java.lang.Boolean = this . children [ NUMBER ] . getValue ( org.springframework.expression.spel.ast.ExpressionState , java.lang.Boolean .class ) ; if ( java.lang.Boolean == null ) { throw new SpelEvaluationException ( SpelMessage . TYPE_CONVERSION_ERROR , STRING , STRING ) ; } return BooleanTypedValue . forValue ( ! java.lang.Boolean ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.ast.SpelEvaluationException ) { org.springframework.expression.spel.ast.SpelEvaluationException . setPosition ( getChild ( NUMBER ) . getStartPosition ( ) ) ; throw org.springframework.expression.spel.ast.SpelEvaluationException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + getChild ( NUMBER ) . toStringAST ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = this . children [ NUMBER ] ; return ( org.springframework.expression.spel.ast.SpelNodeImpl . isCompilable ( ) && CodeFlow . isBooleanCompatible ( child . exitTypeDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow ) { this . children [ NUMBER ] . generateCode ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow ) ; org.springframework.expression.spel.ast.CodeFlow . unboxBooleanIfNecessary ( org.springframework.expression.spel.ast.MethodVisitor ) ; Label org.springframework.expression.spel.ast.Label = new Label ( ) ; Label org.springframework.expression.spel.ast.Label = new Label ( ) ; org.springframework.expression.spel.ast.MethodVisitor . visitJumpInsn ( IFNE , org.springframework.expression.spel.ast.Label ) ; org.springframework.expression.spel.ast.MethodVisitor . visitInsn ( ICONST_1 ) ; org.springframework.expression.spel.ast.MethodVisitor . visitJumpInsn ( GOTO , org.springframework.expression.spel.ast.Label ) ; org.springframework.expression.spel.ast.MethodVisitor . visitLabel ( org.springframework.expression.spel.ast.Label ) ; org.springframework.expression.spel.ast.MethodVisitor . visitInsn ( ICONST_0 ) ; org.springframework.expression.spel.ast.MethodVisitor . visitLabel ( org.springframework.expression.spel.ast.Label ) ; org.springframework.expression.spel.ast.CodeFlow . pushDescriptor ( this . exitTypeDescriptor ) ; }  <METHOD_END>
