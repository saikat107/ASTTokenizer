<METHOD_START> @ java.lang.Override public org.springframework.integration.config.xml.BeanDefinition org.springframework.integration.config.xml.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.config.xml.ParserContext ) { void ( org.springframework.integration.config.xml.ParserContext ) ; BeanDefinitionParserDelegate org.springframework.integration.config.xml.BeanDefinitionParserDelegate = org.springframework.integration.config.xml.ParserContext . getDelegate ( ) ; org.w3c.dom.NodeList org.w3c.dom.NodeList = org.w3c.dom.Element . org.w3c.dom.NodeList ( ) ; for ( int int = NUMBER ; int < org.w3c.dom.NodeList . int ( ) ; int ++ ) { org.w3c.dom.Node org.w3c.dom.Node = org.w3c.dom.NodeList . org.w3c.dom.Node ( int ) ; java.lang.String java.lang.String ; java.lang.Object java.lang.Object ; if ( org.w3c.dom.Node instanceof org.w3c.dom.Element && ! org.springframework.integration.config.xml.BeanDefinitionParserDelegate . nodeNameEquals ( org.w3c.dom.Node , BeanDefinitionParserDelegate . DESCRIPTION_ELEMENT ) ) { org.w3c.dom.Element org.w3c.dom.Element = ( org.w3c.dom.Element ) org.w3c.dom.Node ; if ( org.springframework.integration.config.xml.BeanDefinitionParserDelegate . nodeNameEquals ( org.w3c.dom.Element , BeanDefinitionParserDelegate . BEAN_ELEMENT ) ) { java.lang.String = org.w3c.dom.Element . java.lang.String ( BeanDefinitionParserDelegate . ID_ATTRIBUTE ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; return null ; } java.lang.Object = org.springframework.integration.config.xml.BeanDefinitionParserDelegate . parseBeanDefinitionElement ( org.w3c.dom.Element ) ; } else if ( org.springframework.integration.config.xml.BeanDefinitionParserDelegate . nodeNameEquals ( org.w3c.dom.Element , BeanDefinitionParserDelegate . REF_ELEMENT ) ) { BeanReference org.springframework.integration.config.xml.BeanReference = ( BeanReference ) org.springframework.integration.config.xml.BeanDefinitionParserDelegate . parsePropertySubElement ( org.w3c.dom.Element , null ) ; java.lang.String = org.springframework.integration.config.xml.BeanReference . getBeanName ( ) ; java.lang.Object = org.springframework.integration.config.xml.BeanReference ; } else { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; return null ; } this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private synchronized void void ( ParserContext org.springframework.integration.config.xml.ParserContext ) { if ( ! org.springframework.integration.config.xml.ParserContext . getRegistry ( ) . containsBeanDefinition ( IntegrationContextUtils . SPEL_PROPERTY_ACCESSOR_REGISTRAR_BEAN_NAME ) ) { BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( SpelPropertyAccessorRegistrar .class ) . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) . addConstructorArgValue ( this . java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.integration.config.xml.ParserContext . getRegistry ( ) . registerBeanDefinition ( IntegrationContextUtils . SPEL_PROPERTY_ACCESSOR_REGISTRAR_BEAN_NAME , org.springframework.integration.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } }  <METHOD_END>
