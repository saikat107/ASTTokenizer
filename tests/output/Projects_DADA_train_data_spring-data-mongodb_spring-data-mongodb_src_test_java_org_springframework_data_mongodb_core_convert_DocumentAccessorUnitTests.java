<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; DocumentAccessor org.springframework.data.mongodb.core.convert.DocumentAccessor = new DocumentAccessor ( org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DocumentAccessor . put ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( STRING , new Document ( STRING , STRING ) ) ; DocumentAccessor org.springframework.data.mongodb.core.convert.DocumentAccessor = new DocumentAccessor ( org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.DocumentAccessor . get ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DocumentAccessor org.springframework.data.mongodb.core.convert.DocumentAccessor = new DocumentAccessor ( new Document ( ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DocumentAccessor . get ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DocumentAccessor ( new BsonDocument ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DocumentAccessor ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.DocumentAccessorUnitTests.TypeWithTwoNestings .class ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; DocumentAccessor org.springframework.data.mongodb.core.convert.DocumentAccessor = new DocumentAccessor ( org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DocumentAccessor . put ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getRequiredPersistentProperty ( STRING ) , STRING ) ; org.springframework.data.mongodb.core.convert.DocumentAccessor . put ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getRequiredPersistentProperty ( STRING ) , STRING ) ; org.springframework.data.mongodb.core.convert.DocumentAccessor . put ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getRequiredPersistentProperty ( STRING ) , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DocumentAccessor org.springframework.data.mongodb.core.convert.DocumentAccessor = new DocumentAccessor ( new Document ( STRING , new BasicDBObject ( STRING , STRING ) ) ) ; MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.DocumentAccessorUnitTests.ProjectingType .class ) ; assertThat ( org.springframework.data.mongodb.core.convert.DocumentAccessor . hasValue ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DocumentAccessor . hasValue ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DocumentAccessor . hasValue ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ) , is ( false ) ) ; }  <METHOD_END>
