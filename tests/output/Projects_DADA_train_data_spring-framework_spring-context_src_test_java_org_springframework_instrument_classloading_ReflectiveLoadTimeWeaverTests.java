<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new ReflectiveLoadTimeWeaver ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { new ReflectiveLoadTimeWeaver ( java.lang.Class<? extends org.springframework.instrument.classloading.ReflectiveLoadTimeWeaverTests> ( ) . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.instrument.classloading.ReflectiveLoadTimeWeaverTests.JustAddTransformerClassLoader org.springframework.instrument.classloading.ReflectiveLoadTimeWeaverTests.JustAddTransformerClassLoader = new org.springframework.instrument.classloading.ReflectiveLoadTimeWeaverTests.JustAddTransformerClassLoader ( ) ; ReflectiveLoadTimeWeaver org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver = new ReflectiveLoadTimeWeaver ( org.springframework.instrument.classloading.ReflectiveLoadTimeWeaverTests.JustAddTransformerClassLoader ) ; org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver . addTransformer ( new java.lang.instrument.ClassFileTransformer ( ) { @ java.lang.Override public byte [] byte[] ( java.lang.ClassLoader java.lang.ClassLoader , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , java.security.ProtectionDomain java.security.ProtectionDomain , byte [] byte[] ) { return STRING . byte[] ( ) ; } } ) ; assertEquals ( NUMBER , org.springframework.instrument.classloading.ReflectiveLoadTimeWeaverTests.JustAddTransformerClassLoader . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( java.lang.ClassLoader java.lang.ClassLoader , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , java.security.ProtectionDomain java.security.ProtectionDomain , byte [] byte[] ) { return STRING . byte[] ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new ReflectiveLoadTimeWeaver ( new org.springframework.instrument.classloading.ReflectiveLoadTimeWeaverTests.JustAddTransformerClassLoader ( ) ) . addTransformer ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReflectiveLoadTimeWeaver org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver = new ReflectiveLoadTimeWeaver ( new org.springframework.instrument.classloading.ReflectiveLoadTimeWeaverTests.JustAddTransformerClassLoader ( ) ) ; java.lang.ClassLoader java.lang.ClassLoader = org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver . getThrowawayClassLoader ( ) ; assertNotNull ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.instrument.classloading.ReflectiveLoadTimeWeaverTests.TotallyCompliantClassLoader org.springframework.instrument.classloading.ReflectiveLoadTimeWeaverTests.TotallyCompliantClassLoader = new org.springframework.instrument.classloading.ReflectiveLoadTimeWeaverTests.TotallyCompliantClassLoader ( ) ; ReflectiveLoadTimeWeaver org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver = new ReflectiveLoadTimeWeaver ( org.springframework.instrument.classloading.ReflectiveLoadTimeWeaverTests.TotallyCompliantClassLoader ) ; java.lang.ClassLoader java.lang.ClassLoader = org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver . getThrowawayClassLoader ( ) ; assertNotNull ( java.lang.ClassLoader ) ; assertEquals ( NUMBER , org.springframework.instrument.classloading.ReflectiveLoadTimeWeaverTests.TotallyCompliantClassLoader . int ( ) ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.instrument.ClassFileTransformer java.lang.instrument.ClassFileTransformer ) { ++ this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public java.lang.ClassLoader java.lang.ClassLoader ( ) { ++ this . int ; return java.lang.Class<? extends org.springframework.instrument.classloading.ReflectiveLoadTimeWeaverTests.TotallyCompliantClassLoader> ( ) . java.lang.ClassLoader ( ) ; }  <METHOD_END>
