<METHOD_START> @ Test public void void ( ) { assertEquals ( MockHttpServletRequest . DEFAULT_PROTOCOL , org.springframework.mock.web.MockHttpServletRequest . getProtocol ( ) ) ; assertEquals ( MockHttpServletRequest . DEFAULT_SCHEME , org.springframework.mock.web.MockHttpServletRequest . getScheme ( ) ) ; org.springframework.mock.web.MockHttpServletRequest . setProtocol ( STRING ) ; org.springframework.mock.web.MockHttpServletRequest . setScheme ( STRING ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getProtocol ( ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getScheme ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { byte [] byte[] = STRING . byte[] ( java.nio.charset.Charset . java.nio.charset.Charset ( ) ) ; org.springframework.mock.web.MockHttpServletRequest . setContent ( byte[] ) ; assertEquals ( byte[] . int , org.springframework.mock.web.MockHttpServletRequest . getContentLength ( ) ) ; assertNotNull ( org.springframework.mock.web.MockHttpServletRequest . getInputStream ( ) ) ; assertEquals ( STRING , StreamUtils . copyToString ( org.springframework.mock.web.MockHttpServletRequest . getInputStream ( ) , java.nio.charset.Charset . java.nio.charset.Charset ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { byte [] byte[] = STRING . byte[] ( ) ; org.springframework.mock.web.MockHttpServletRequest . setContent ( byte[] ) ; assertEquals ( byte[] . int , org.springframework.mock.web.MockHttpServletRequest . getContentLength ( ) ) ; assertNotNull ( org.springframework.mock.web.MockHttpServletRequest . getContentAsByteArray ( ) ) ; assertEquals ( byte[] , org.springframework.mock.web.MockHttpServletRequest . getContentAsByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { org.springframework.mock.web.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.mock.web.ExpectedException . expectMessage ( STRING ) ; org.springframework.mock.web.MockHttpServletRequest . getContentAsString ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; byte [] byte[] = java.lang.String . byte[] ( STRING ) ; org.springframework.mock.web.MockHttpServletRequest . setCharacterEncoding ( STRING ) ; org.springframework.mock.web.MockHttpServletRequest . setContent ( byte[] ) ; assertEquals ( byte[] . int , org.springframework.mock.web.MockHttpServletRequest . getContentLength ( ) ) ; assertNotNull ( org.springframework.mock.web.MockHttpServletRequest . getContentAsString ( ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletRequest . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertEquals ( - NUMBER , org.springframework.mock.web.MockHttpServletRequest . getContentLength ( ) ) ; assertNotNull ( org.springframework.mock.web.MockHttpServletRequest . getInputStream ( ) ) ; assertEquals ( - NUMBER , org.springframework.mock.web.MockHttpServletRequest . getInputStream ( ) . read ( ) ) ; assertNull ( org.springframework.mock.web.MockHttpServletRequest . getContentAsByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletRequest . setContentType ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletRequest . getContentType ( ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletRequest . getHeader ( java.lang.String ) ) ; assertNull ( org.springframework.mock.web.MockHttpServletRequest . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletRequest . setContentType ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletRequest . getContentType ( ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletRequest . getHeader ( java.lang.String ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletRequest . getContentType ( ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletRequest . getHeader ( java.lang.String ) ) ; assertNull ( org.springframework.mock.web.MockHttpServletRequest . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletRequest . getContentType ( ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletRequest . getHeader ( java.lang.String ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletRequest . getContentType ( ) ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletRequest . getHeader ( java.lang.String ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.mock.web.MockHttpServletRequest . setCharacterEncoding ( STRING ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getHeader ( java.lang.String ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletRequest . setCharacterEncoding ( STRING ) ; org.springframework.mock.web.MockHttpServletRequest . setContentType ( STRING ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getHeader ( java.lang.String ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletRequest . addHeader ( java.lang.String , STRING ) ; java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = org.springframework.mock.web.MockHttpServletRequest . getHeaderNames ( ) ; assertNotNull ( java.util.Enumeration<java.lang.String> ) ; assertEquals ( STRING , java.lang.String , java.util.Enumeration<java.lang.String> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( org.springframework.mock.web.MockHttpServletRequest . getParameter ( null ) ) ; assertNull ( org.springframework.mock.web.MockHttpServletRequest . getParameterValues ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletRequest . setParameter ( STRING , STRING ) ; org.springframework.mock.web.MockHttpServletRequest . setParameter ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.String [] { STRING , STRING } ) ; org.springframework.mock.web.MockHttpServletRequest . setParameters ( java.util.Map<java.lang.String,java.lang.Object> ) ; java.lang.String [] java.lang.String[] = org.springframework.mock.web.MockHttpServletRequest . getParameterValues ( STRING ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getParameter ( STRING ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getParameter ( STRING ) ) ; java.lang.String [] java.lang.String[] = org.springframework.mock.web.MockHttpServletRequest . getParameterValues ( STRING ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletRequest . setParameter ( STRING , STRING ) ; org.springframework.mock.web.MockHttpServletRequest . setParameter ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.String [] { STRING , STRING } ) ; org.springframework.mock.web.MockHttpServletRequest . addParameters ( java.util.Map<java.lang.String,java.lang.Object> ) ; java.lang.String [] java.lang.String[] = org.springframework.mock.web.MockHttpServletRequest . getParameterValues ( STRING ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getParameter ( STRING ) ) ; java.lang.String [] java.lang.String[] = org.springframework.mock.web.MockHttpServletRequest . getParameterValues ( STRING ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletRequest . setParameter ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.String [] { STRING , STRING } ) ; org.springframework.mock.web.MockHttpServletRequest . addParameters ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockHttpServletRequest . getParameterMap ( ) . size ( ) ) ; org.springframework.mock.web.MockHttpServletRequest . removeAllParameters ( ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockHttpServletRequest . getParameterMap ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cookie org.springframework.mock.web.Cookie = new Cookie ( STRING , STRING ) ; Cookie org.springframework.mock.web.Cookie = new Cookie ( STRING , STRING ) ; org.springframework.mock.web.MockHttpServletRequest . setCookies ( org.springframework.mock.web.Cookie , org.springframework.mock.web.Cookie ) ; Cookie [] org.springframework.mock.web.Cookie[] = org.springframework.mock.web.MockHttpServletRequest . getCookies ( ) ; assertEquals ( NUMBER , cookies . length ) ; assertEquals ( STRING , org.springframework.mock.web.Cookie[] [ NUMBER ] . getName ( ) ) ; assertEquals ( STRING , org.springframework.mock.web.Cookie[] [ NUMBER ] . getValue ( ) ) ; assertEquals ( STRING , org.springframework.mock.web.Cookie[] [ NUMBER ] . getName ( ) ) ; assertEquals ( STRING , org.springframework.mock.web.Cookie[] [ NUMBER ] . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( org.springframework.mock.web.MockHttpServletRequest . getCookies ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ( ) ; try { java.util.Locale java.util.Locale = java.util.Locale . boolean ( java.util.Locale . java.util.Locale ) ? java.util.Locale . java.util.Locale : java.util.Locale . java.util.Locale ; java.util.Locale . void ( java.util.Locale ) ; MockHttpServletRequest org.springframework.mock.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; assertFalse ( java.util.Locale . boolean ( org.springframework.mock.web.MockHttpServletRequest . getLocale ( ) ) ) ; assertEquals ( java.util.Locale . java.util.Locale , org.springframework.mock.web.MockHttpServletRequest . getLocale ( ) ) ; } finally { java.util.Locale . void ( java.util.Locale ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.mock.web.MockHttpServletRequest . setPreferredLocales ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.mock.web.MockHttpServletRequest . setPreferredLocales ( new java.util.ArrayList <> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.util.Locale> < java.util.Locale > java.util.List<java.util.Locale> = java.util.Arrays . java.util.List<java.util.Locale> ( java.util.Locale . java.util.Locale , java.util.Locale . java.util.Locale ) ; org.springframework.mock.web.MockHttpServletRequest . setPreferredLocales ( java.util.List<java.util.Locale> ) ; void ( java.util.Collections . java.util.Enumeration<java.util.Locale> ( java.util.List<java.util.Locale> ) , org.springframework.mock.web.MockHttpServletRequest . getLocales ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getServerName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletRequest . setServerName ( STRING ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getServerName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletRequest . addHeader ( java.lang.String , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletRequest . getServerName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletRequest . addHeader ( java.lang.String , java.lang.String + STRING ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletRequest . getServerName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletRequest . addHeader ( java.lang.String , java.lang.String ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getServerName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletRequest . addHeader ( java.lang.String , java.lang.String ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getServerName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , org.springframework.mock.web.MockHttpServletRequest . getServerPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletRequest . setServerPort ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockHttpServletRequest . getServerPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletRequest . addHeader ( java.lang.String , java.lang.String ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockHttpServletRequest . getServerPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; int int = NUMBER ; org.springframework.mock.web.MockHttpServletRequest . addHeader ( java.lang.String , java.lang.String + STRING + int ) ; assertEquals ( int , org.springframework.mock.web.MockHttpServletRequest . getServerPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.mock.web.MockHttpServletRequest . addHeader ( java.lang.String , java.lang.String ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockHttpServletRequest . getServerPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; int int = NUMBER ; org.springframework.mock.web.MockHttpServletRequest . addHeader ( java.lang.String , java.lang.String + STRING + int ) ; assertEquals ( int , org.springframework.mock.web.MockHttpServletRequest . getServerPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletRequest . setServerPort ( NUMBER ) ; org.springframework.mock.web.MockHttpServletRequest . setRequestURI ( STRING ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getRequestURL ( ) . toString ( ) ) ; org.springframework.mock.web.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.mock.web.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.mock.web.MockHttpServletRequest . setServerPort ( NUMBER ) ; assertEquals ( STRING , org.springframework.mock.web.MockHttpServletRequest . getRequestURL ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.StringBuffer java.lang.StringBuffer = org.springframework.mock.web.MockHttpServletRequest . getRequestURL ( ) ; assertEquals ( STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletRequest . setRequestURI ( null ) ; java.lang.StringBuffer java.lang.StringBuffer = org.springframework.mock.web.MockHttpServletRequest . getRequestURL ( ) ; assertEquals ( STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.mock.web.MockHttpServletRequest . setServerPort ( NUMBER ) ; java.lang.StringBuffer java.lang.StringBuffer = org.springframework.mock.web.MockHttpServletRequest . getRequestURL ( ) ; assertEquals ( STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockHttpServletRequest . setServerPort ( - NUMBER ) ; java.lang.StringBuffer java.lang.StringBuffer = org.springframework.mock.web.MockHttpServletRequest . getRequestURL ( ) ; assertEquals ( STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.mock.web.MockHttpServletRequest . isSecure ( ) ) ; org.springframework.mock.web.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.mock.web.MockHttpServletRequest . setSecure ( false ) ; assertFalse ( org.springframework.mock.web.MockHttpServletRequest . isSecure ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.mock.web.MockHttpServletRequest . isSecure ( ) ) ; org.springframework.mock.web.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.mock.web.MockHttpServletRequest . setSecure ( true ) ; assertTrue ( org.springframework.mock.web.MockHttpServletRequest . isSecure ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.mock.web.MockHttpServletRequest . isSecure ( ) ) ; org.springframework.mock.web.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.mock.web.MockHttpServletRequest . setSecure ( false ) ; assertTrue ( org.springframework.mock.web.MockHttpServletRequest . isSecure ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.mock.web.MockHttpServletRequest . isSecure ( ) ) ; org.springframework.mock.web.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.mock.web.MockHttpServletRequest . setSecure ( true ) ; assertTrue ( org.springframework.mock.web.MockHttpServletRequest . isSecure ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Date java.util.Date = new java.util.Date ( ) ; org.springframework.mock.web.MockHttpServletRequest . addHeader ( java.lang.String , java.util.Date ) ; assertEquals ( java.util.Date . long ( ) , org.springframework.mock.web.MockHttpServletRequest . getDateHeader ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = new java.util.Date ( ) . long ( ) ; org.springframework.mock.web.MockHttpServletRequest . addHeader ( java.lang.String , long ) ; assertEquals ( long , org.springframework.mock.web.MockHttpServletRequest . getDateHeader ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.mock.web.MockHttpServletRequest . addHeader ( java.lang.String , STRING ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockHttpServletRequest . getDateHeader ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.mock.web.MockHttpServletRequest . addHeader ( java.lang.String , STRING ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockHttpServletRequest . getDateHeader ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.mock.web.MockHttpServletRequest . addHeader ( java.lang.String , STRING ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockHttpServletRequest . getDateHeader ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { org.springframework.mock.web.MockHttpServletRequest . addHeader ( java.lang.String , STRING ) ; org.springframework.mock.web.MockHttpServletRequest . getDateHeader ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Enumeration<?> < ? > java.util.Enumeration<?> , java.util.Enumeration<?> < ? > java.util.Enumeration<?> ) { assertNotNull ( java.util.Enumeration<> ) ; assertNotNull ( java.util.Enumeration<> ) ; int int = NUMBER ; while ( java.util.Enumeration<> . boolean ( ) ) { assertTrue ( STRING , java.util.Enumeration<> . boolean ( ) ) ; assertEquals ( STRING + ++ int , java.util.Enumeration<> . nextElement ( ) , java.util.Enumeration<> . nextElement ( ) ) ; } }  <METHOD_END>
