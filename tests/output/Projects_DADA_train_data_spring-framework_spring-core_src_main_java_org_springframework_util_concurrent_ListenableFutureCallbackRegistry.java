<METHOD_START> public void void ( ListenableFutureCallback < ? super T > org.springframework.util.concurrent.ListenableFutureCallback<? super T> ) { Assert . notNull ( org.springframework.util.concurrent.ListenableFutureCallback<> , STRING ) ; synchronized ( this . java.lang.Object ) { switch ( this . org.springframework.util.concurrent.ListenableFutureCallbackRegistry.State ) { case org.springframework.util.concurrent.ListenableFutureCallbackRegistry.State : this . java.util.Queue<org.springframework.util.concurrent.SuccessCallback<? super T>> . add ( org.springframework.util.concurrent.ListenableFutureCallback<> ) ; this . java.util.Queue<org.springframework.util.concurrent.FailureCallback> . add ( org.springframework.util.concurrent.ListenableFutureCallback<> ) ; break; case org.springframework.util.concurrent.ListenableFutureCallbackRegistry.State : void ( org.springframework.util.concurrent.ListenableFutureCallback<> ) ; break; case org.springframework.util.concurrent.ListenableFutureCallbackRegistry.State : void ( org.springframework.util.concurrent.ListenableFutureCallback<> ) ; break; } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( SuccessCallback < ? super T > org.springframework.util.concurrent.SuccessCallback<? super T> ) { try { org.springframework.util.concurrent.SuccessCallback<> . onSuccess ( ( T ) this . java.lang.Object ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { } }  <METHOD_END>
<METHOD_START> private void void ( FailureCallback org.springframework.util.concurrent.FailureCallback ) { try { org.springframework.util.concurrent.FailureCallback . onFailure ( ( java.lang.Throwable ) this . java.lang.Object ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { } }  <METHOD_END>
<METHOD_START> public void void ( SuccessCallback < ? super T > org.springframework.util.concurrent.SuccessCallback<? super T> ) { Assert . notNull ( org.springframework.util.concurrent.SuccessCallback<> , STRING ) ; synchronized ( this . java.lang.Object ) { switch ( this . org.springframework.util.concurrent.ListenableFutureCallbackRegistry.State ) { case org.springframework.util.concurrent.ListenableFutureCallbackRegistry.State : this . java.util.Queue<org.springframework.util.concurrent.SuccessCallback<? super T>> . add ( org.springframework.util.concurrent.SuccessCallback<> ) ; break; case org.springframework.util.concurrent.ListenableFutureCallbackRegistry.State : void ( org.springframework.util.concurrent.SuccessCallback<> ) ; break; } } }  <METHOD_END>
<METHOD_START> public void void ( FailureCallback org.springframework.util.concurrent.FailureCallback ) { Assert . notNull ( org.springframework.util.concurrent.FailureCallback , STRING ) ; synchronized ( this . java.lang.Object ) { switch ( this . org.springframework.util.concurrent.ListenableFutureCallbackRegistry.State ) { case org.springframework.util.concurrent.ListenableFutureCallbackRegistry.State : this . java.util.Queue<org.springframework.util.concurrent.FailureCallback> . add ( org.springframework.util.concurrent.FailureCallback ) ; break; case org.springframework.util.concurrent.ListenableFutureCallbackRegistry.State : void ( org.springframework.util.concurrent.FailureCallback ) ; break; } } }  <METHOD_END>
<METHOD_START> public void void ( T T ) { synchronized ( this . java.lang.Object ) { this . org.springframework.util.concurrent.ListenableFutureCallbackRegistry.State = org.springframework.util.concurrent.ListenableFutureCallbackRegistry.State . org.springframework.util.concurrent.ListenableFutureCallbackRegistry.State ; this . java.lang.Object = T ; while ( ! this . java.util.Queue<org.springframework.util.concurrent.SuccessCallback<? super T>> . isEmpty ( ) ) { void ( this . java.util.Queue<org.springframework.util.concurrent.SuccessCallback<? super T>> . poll ( ) ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Throwable java.lang.Throwable ) { synchronized ( this . java.lang.Object ) { this . org.springframework.util.concurrent.ListenableFutureCallbackRegistry.State = org.springframework.util.concurrent.ListenableFutureCallbackRegistry.State . org.springframework.util.concurrent.ListenableFutureCallbackRegistry.State ; this . java.lang.Object = java.lang.Throwable ; while ( ! this . java.util.Queue<org.springframework.util.concurrent.FailureCallback> . isEmpty ( ) ) { void ( this . java.util.Queue<org.springframework.util.concurrent.FailureCallback> . poll ( ) ) ; } } }  <METHOD_END>
