<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING + java.lang.Byte . byte ; java.lang.String java.lang.String = STRING + java.lang.Short . short ; java.lang.String java.lang.String = STRING + java.lang.Integer . int ; java.lang.String java.lang.String = STRING + java.lang.Long . long ; java.lang.String java.lang.String = STRING + java.lang.Float . float ; java.lang.String java.lang.String = STRING + java.lang.Double . double ; assertEquals ( STRING , new java.lang.Byte ( java.lang.Byte . byte ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Byte .class ) ) ; assertEquals ( STRING , new java.lang.Short ( java.lang.Short . short ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Short .class ) ) ; assertEquals ( STRING , new java.lang.Integer ( java.lang.Integer . int ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Integer .class ) ) ; assertEquals ( STRING , new java.lang.Long ( java.lang.Long . long ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Long .class ) ) ; assertEquals ( STRING , new java.lang.Float ( java.lang.Float . float ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Float .class ) ) ; assertEquals ( STRING , new java.lang.Double ( java.lang.Double . double ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Double .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; java.lang.String java.lang.String = STRING + java.lang.Byte . byte ; java.lang.String java.lang.String = STRING + java.lang.Short . short ; java.lang.String java.lang.String = STRING + java.lang.Integer . int ; java.lang.String java.lang.String = STRING + java.lang.Long . long ; java.lang.String java.lang.String = STRING + java.lang.Float . float ; java.lang.String java.lang.String = STRING + java.lang.Double . double ; assertEquals ( STRING , new java.lang.Byte ( java.lang.Byte . byte ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Byte .class , java.text.NumberFormat ) ) ; assertEquals ( STRING , new java.lang.Short ( java.lang.Short . short ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Short .class , java.text.NumberFormat ) ) ; assertEquals ( STRING , new java.lang.Integer ( java.lang.Integer . int ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Integer .class , java.text.NumberFormat ) ) ; assertEquals ( STRING , new java.lang.Long ( java.lang.Long . long ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Long .class , java.text.NumberFormat ) ) ; assertEquals ( STRING , new java.lang.Float ( java.lang.Float . float ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Float .class , java.text.NumberFormat ) ) ; assertEquals ( STRING , new java.lang.Double ( java.lang.Double . double ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Double .class , java.text.NumberFormat ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING + java.lang.Byte . byte + STRING ; java.lang.String java.lang.String = STRING + java.lang.Short . short + STRING ; java.lang.String java.lang.String = STRING + java.lang.Integer . int + STRING ; java.lang.String java.lang.String = STRING + java.lang.Long . long + STRING ; java.lang.String java.lang.String = STRING + java.lang.Float . float + STRING ; java.lang.String java.lang.String = STRING + java.lang.Double . double + STRING ; assertEquals ( STRING , new java.lang.Byte ( java.lang.Byte . byte ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Byte .class ) ) ; assertEquals ( STRING , new java.lang.Short ( java.lang.Short . short ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Short .class ) ) ; assertEquals ( STRING , new java.lang.Integer ( java.lang.Integer . int ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Integer .class ) ) ; assertEquals ( STRING , new java.lang.Long ( java.lang.Long . long ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Long .class ) ) ; assertEquals ( STRING , new java.lang.Float ( java.lang.Float . float ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Float .class ) ) ; assertEquals ( STRING , new java.lang.Double ( java.lang.Double . double ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Double .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; java.lang.String java.lang.String = STRING + java.lang.Byte . byte + STRING ; java.lang.String java.lang.String = STRING + java.lang.Short . short + STRING ; java.lang.String java.lang.String = STRING + java.lang.Integer . int + STRING ; java.lang.String java.lang.String = STRING + java.lang.Long . long + STRING ; java.lang.String java.lang.String = STRING + java.lang.Float . float + STRING ; java.lang.String java.lang.String = STRING + java.lang.Double . double + STRING ; assertEquals ( STRING , new java.lang.Byte ( java.lang.Byte . byte ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Byte .class , java.text.NumberFormat ) ) ; assertEquals ( STRING , new java.lang.Short ( java.lang.Short . short ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Short .class , java.text.NumberFormat ) ) ; assertEquals ( STRING , new java.lang.Integer ( java.lang.Integer . int ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Integer .class , java.text.NumberFormat ) ) ; assertEquals ( STRING , new java.lang.Long ( java.lang.Long . long ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Long .class , java.text.NumberFormat ) ) ; assertEquals ( STRING , new java.lang.Float ( java.lang.Float . float ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Float .class , java.text.NumberFormat ) ) ; assertEquals ( STRING , new java.lang.Double ( java.lang.Double . double ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Double .class , java.text.NumberFormat ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING + java.lang.Integer . java.lang.String ( new java.lang.Byte ( java.lang.Byte . byte ) . int ( ) ) ; java.lang.String java.lang.String = STRING + java.lang.Integer . java.lang.String ( new java.lang.Short ( java.lang.Short . short ) . int ( ) ) ; java.lang.String java.lang.String = STRING + java.lang.Integer . java.lang.String ( java.lang.Integer . int ) ; java.lang.String java.lang.String = STRING + java.lang.Long . java.lang.String ( java.lang.Long . long ) ; java.lang.String java.lang.String = STRING ; void ( java.lang.String ) ; void ( java.lang.String ) ; void ( java.lang.String ) ; void ( java.lang.String ) ; assertEquals ( STRING , new java.math.BigInteger ( java.lang.String , NUMBER ) , NumberUtils . parseNumber ( STRING + java.lang.String , java.math.BigInteger .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; void ( java.lang.String ) ; void ( java.lang.String ) ; void ( java.lang.String ) ; void ( java.lang.String ) ; assertEquals ( STRING , new java.math.BigInteger ( java.lang.String , NUMBER ) . java.math.BigInteger ( ) , NumberUtils . parseNumber ( STRING + java.lang.String , java.math.BigInteger .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Double java.lang.Double = new java.lang.Double ( NUMBER ) ; assertEquals ( new java.math.BigInteger ( STRING ) , NumberUtils . convertNumberToTargetClass ( java.lang.Double , java.math.BigInteger .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal ( java.lang.String ) ; assertEquals ( new java.math.BigInteger ( java.lang.String ) , NumberUtils . convertNumberToTargetClass ( java.math.BigDecimal , java.math.BigInteger .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal ( STRING ) ; assertEquals ( new java.math.BigInteger ( STRING ) , NumberUtils . convertNumberToTargetClass ( java.math.BigDecimal , java.math.BigInteger .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.Number java.lang.Number = NumberUtils . parseNumber ( java.lang.String , java.math.BigDecimal .class ) ; assertEquals ( new java.math.BigDecimal ( java.lang.String ) , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.Number java.lang.Number = NumberUtils . parseNumber ( java.lang.String , java.math.BigDecimal .class ) ; assertEquals ( new java.math.BigDecimal ( java.lang.String ) , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.Number java.lang.Number = NumberUtils . parseNumber ( java.lang.String , java.math.BigDecimal .class ) ; assertEquals ( new java.math.BigDecimal ( java.lang.String ) , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; java.lang.Number java.lang.Number = NumberUtils . parseNumber ( java.lang.String , java.math.BigDecimal .class , java.text.NumberFormat ) ; assertEquals ( new java.math.BigDecimal ( java.lang.String ) , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; java.lang.Number java.lang.Number = NumberUtils . parseNumber ( java.lang.String , java.math.BigDecimal .class , java.text.NumberFormat ) ; assertEquals ( new java.math.BigDecimal ( java.lang.String ) , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; java.lang.Number java.lang.Number = NumberUtils . parseNumber ( java.lang.String , java.math.BigDecimal .class , java.text.NumberFormat ) ; assertEquals ( new java.math.BigDecimal ( java.lang.String ) , java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING + java.lang.Long . long ; java.lang.String java.lang.String = STRING + java.lang.Double . double ; try { NumberUtils . parseNumber ( java.lang.String , java.lang.Byte .class ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} try { NumberUtils . parseNumber ( java.lang.String , java.lang.Short .class ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} try { NumberUtils . parseNumber ( java.lang.String , java.lang.Integer .class ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} assertEquals ( new java.lang.Long ( java.lang.Long . long ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Long .class ) ) ; assertEquals ( new java.lang.Double ( java.lang.Double . double ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Double .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING + java.lang.Long . long ; java.lang.String java.lang.String = STRING + java.lang.Double . double ; try { NumberUtils . parseNumber ( java.lang.String , java.lang.Byte .class ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} try { NumberUtils . parseNumber ( java.lang.String , java.lang.Short .class ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} try { NumberUtils . parseNumber ( java.lang.String , java.lang.Integer .class ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} assertEquals ( new java.lang.Long ( java.lang.Long . long ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Long .class ) ) ; assertEquals ( new java.lang.Double ( java.lang.Double . double ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Double .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; java.lang.String java.lang.String = STRING + java.lang.Long . long ; java.lang.String java.lang.String = STRING + java.lang.Double . double ; try { NumberUtils . parseNumber ( java.lang.String , java.lang.Byte .class , java.text.NumberFormat ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} try { NumberUtils . parseNumber ( java.lang.String , java.lang.Short .class , java.text.NumberFormat ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} try { NumberUtils . parseNumber ( java.lang.String , java.lang.Integer .class , java.text.NumberFormat ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} assertEquals ( new java.lang.Long ( java.lang.Long . long ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Long .class , java.text.NumberFormat ) ) ; assertEquals ( new java.lang.Double ( java.lang.Double . double ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Double .class , java.text.NumberFormat ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; java.lang.String java.lang.String = STRING + java.lang.Long . long ; java.lang.String java.lang.String = STRING + java.lang.Double . double ; try { NumberUtils . parseNumber ( java.lang.String , java.lang.Byte .class , java.text.NumberFormat ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} try { NumberUtils . parseNumber ( java.lang.String , java.lang.Short .class , java.text.NumberFormat ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} try { NumberUtils . parseNumber ( java.lang.String , java.lang.Integer .class , java.text.NumberFormat ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} assertEquals ( new java.lang.Long ( java.lang.Long . long ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Long .class , java.text.NumberFormat ) ) ; assertEquals ( new java.lang.Double ( java.lang.Double . double ) , NumberUtils . parseNumber ( java.lang.String , java.lang.Double .class , java.text.NumberFormat ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . java.lang.Integer ( - NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.math.BigInteger . java.math.BigInteger ( - NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.math.BigInteger . java.math.BigInteger ( NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.math.BigInteger . java.math.BigInteger ( NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int ) , NumberUtils . convertNumberToTargetClass ( java.math.BigInteger . java.math.BigInteger ( java.lang.Integer . int ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int ) , NumberUtils . convertNumberToTargetClass ( java.math.BigInteger . java.math.BigInteger ( java.lang.Integer . int + NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int ) , NumberUtils . convertNumberToTargetClass ( java.math.BigInteger . java.math.BigInteger ( java.lang.Integer . int ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int ) , NumberUtils . convertNumberToTargetClass ( java.math.BigInteger . java.math.BigInteger ( java.lang.Integer . int - NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . java.lang.Integer ( - NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Long . java.lang.Long ( - NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Long . java.lang.Long ( NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Long . java.lang.Long ( NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int ) , NumberUtils . convertNumberToTargetClass ( java.lang.Long . java.lang.Long ( java.lang.Integer . int ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int ) , NumberUtils . convertNumberToTargetClass ( java.lang.Long . java.lang.Long ( java.lang.Integer . int + NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int ) , NumberUtils . convertNumberToTargetClass ( java.lang.Long . java.lang.Long ( java.lang.Integer . int ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int ) , NumberUtils . convertNumberToTargetClass ( java.lang.Long . java.lang.Long ( java.lang.Integer . int - NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . java.lang.Integer ( - NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Integer . java.lang.Integer ( - NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Integer . java.lang.Integer ( NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Integer . java.lang.Integer ( NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int ) , NumberUtils . convertNumberToTargetClass ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int ) , NumberUtils . convertNumberToTargetClass ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int + NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int ) , NumberUtils . convertNumberToTargetClass ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int ) , NumberUtils . convertNumberToTargetClass ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int - NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . java.lang.Integer ( - NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Short . java.lang.Short ( ( short ) - NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Short . java.lang.Short ( ( short ) NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Short . java.lang.Short ( ( short ) NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Short . short ) , NumberUtils . convertNumberToTargetClass ( java.lang.Short . java.lang.Short ( java.lang.Short . short ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Short . short ) , NumberUtils . convertNumberToTargetClass ( java.lang.Short . java.lang.Short ( ( short ) ( java.lang.Short . short + NUMBER ) ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Short . short ) , NumberUtils . convertNumberToTargetClass ( java.lang.Short . java.lang.Short ( java.lang.Short . short ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Short . short ) , NumberUtils . convertNumberToTargetClass ( java.lang.Short . java.lang.Short ( ( short ) ( java.lang.Short . short - NUMBER ) ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . java.lang.Integer ( - NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Byte . java.lang.Byte ( ( byte ) - NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Byte . java.lang.Byte ( ( byte ) NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Byte . java.lang.Byte ( ( byte ) NUMBER ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Byte . byte ) , NumberUtils . convertNumberToTargetClass ( java.lang.Byte . java.lang.Byte ( java.lang.Byte . byte ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Byte . byte ) , NumberUtils . convertNumberToTargetClass ( java.lang.Byte . java.lang.Byte ( ( byte ) ( java.lang.Byte . byte + NUMBER ) ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Byte . byte ) , NumberUtils . convertNumberToTargetClass ( java.lang.Byte . java.lang.Byte ( java.lang.Byte . byte ) , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.lang.Byte . byte ) , NumberUtils . convertNumberToTargetClass ( java.lang.Byte . java.lang.Byte ( ( byte ) ( java.lang.Byte . byte - NUMBER ) ) , java.lang.Integer .class ) ) ; void ( java.lang.Long . java.lang.Long ( java.lang.Long . long + NUMBER ) , java.lang.Integer .class ) ; void ( java.lang.Long . java.lang.Long ( java.lang.Long . long - NUMBER ) , java.lang.Integer .class ) ; void ( java.math.BigInteger . java.math.BigInteger ( java.lang.Integer . int ) . java.math.BigInteger ( java.math.BigInteger . java.math.BigInteger ) , java.lang.Integer .class ) ; void ( java.math.BigInteger . java.math.BigInteger ( java.lang.Integer . int ) . java.math.BigInteger ( java.math.BigInteger . java.math.BigInteger ) , java.lang.Integer .class ) ; void ( new java.math.BigDecimal ( STRING ) , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Long . java.lang.Long ( - NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.math.BigInteger . java.math.BigInteger ( - NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Long . java.lang.Long ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.math.BigInteger . java.math.BigInteger ( NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Long . java.lang.Long ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.math.BigInteger . java.math.BigInteger ( NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Long . long ) , NumberUtils . convertNumberToTargetClass ( java.math.BigInteger . java.math.BigInteger ( java.lang.Long . long ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Long . long ) , NumberUtils . convertNumberToTargetClass ( java.math.BigInteger . java.math.BigInteger ( java.lang.Long . long + NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Long . long ) , NumberUtils . convertNumberToTargetClass ( java.math.BigInteger . java.math.BigInteger ( java.lang.Long . long ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Long . long ) , NumberUtils . convertNumberToTargetClass ( java.math.BigInteger . java.math.BigInteger ( java.lang.Long . long - NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Long . java.lang.Long ( - NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Long . java.lang.Long ( - NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Long . java.lang.Long ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Long . java.lang.Long ( NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Long . java.lang.Long ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Long . java.lang.Long ( NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Long . long ) , NumberUtils . convertNumberToTargetClass ( java.lang.Long . java.lang.Long ( java.lang.Long . long ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Long . long ) , NumberUtils . convertNumberToTargetClass ( java.lang.Long . java.lang.Long ( java.lang.Long . long + NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Long . long ) , NumberUtils . convertNumberToTargetClass ( java.lang.Long . java.lang.Long ( java.lang.Long . long ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Long . long ) , NumberUtils . convertNumberToTargetClass ( java.lang.Long . java.lang.Long ( java.lang.Long . long - NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Integer . java.lang.Integer ( - NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Integer . java.lang.Integer ( - NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Integer . java.lang.Integer ( NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Integer . java.lang.Integer ( NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Integer . int ) , NumberUtils . convertNumberToTargetClass ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Integer . int ) , NumberUtils . convertNumberToTargetClass ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int + NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Integer . int ) , NumberUtils . convertNumberToTargetClass ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Integer . int ) , NumberUtils . convertNumberToTargetClass ( java.lang.Integer . java.lang.Integer ( java.lang.Integer . int - NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Integer . java.lang.Integer ( - NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Short . java.lang.Short ( ( short ) - NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Short . java.lang.Short ( ( short ) NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Short . java.lang.Short ( ( short ) NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Short . short ) , NumberUtils . convertNumberToTargetClass ( java.lang.Short . java.lang.Short ( java.lang.Short . short ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Short . short ) , NumberUtils . convertNumberToTargetClass ( java.lang.Short . java.lang.Short ( ( short ) ( java.lang.Short . short + NUMBER ) ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Short . short ) , NumberUtils . convertNumberToTargetClass ( java.lang.Short . java.lang.Short ( java.lang.Short . short ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Short . short ) , NumberUtils . convertNumberToTargetClass ( java.lang.Short . java.lang.Short ( ( short ) ( java.lang.Short . short - NUMBER ) ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Integer . java.lang.Integer ( - NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Byte . java.lang.Byte ( ( byte ) - NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Byte . java.lang.Byte ( ( byte ) NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) , NumberUtils . convertNumberToTargetClass ( java.lang.Byte . java.lang.Byte ( ( byte ) NUMBER ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Byte . byte ) , NumberUtils . convertNumberToTargetClass ( java.lang.Byte . java.lang.Byte ( java.lang.Byte . byte ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Byte . byte ) , NumberUtils . convertNumberToTargetClass ( java.lang.Byte . java.lang.Byte ( ( byte ) ( java.lang.Byte . byte + NUMBER ) ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Byte . byte ) , NumberUtils . convertNumberToTargetClass ( java.lang.Byte . java.lang.Byte ( java.lang.Byte . byte ) , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( java.lang.Byte . byte ) , NumberUtils . convertNumberToTargetClass ( java.lang.Byte . java.lang.Byte ( ( byte ) ( java.lang.Byte . byte - NUMBER ) ) , java.lang.Long .class ) ) ; void ( java.math.BigInteger . java.math.BigInteger ( java.lang.Long . long ) . java.math.BigInteger ( java.math.BigInteger . java.math.BigInteger ) , java.lang.Long .class ) ; void ( java.math.BigInteger . java.math.BigInteger ( java.lang.Long . long ) . java.math.BigInteger ( java.math.BigInteger . java.math.BigInteger ) , java.lang.Long .class ) ; void ( new java.math.BigDecimal ( STRING ) , java.lang.Long .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { assertEquals ( STRING , java.lang.Long . long , NumberUtils . parseNumber ( java.lang.String , java.lang.Long .class ) . longValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { assertEquals ( STRING , java.lang.Integer . int , NumberUtils . parseNumber ( java.lang.String , java.lang.Integer .class ) . intValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { assertEquals ( STRING , java.lang.Short . short , NumberUtils . parseNumber ( java.lang.String , java.lang.Short .class ) . shortValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { assertEquals ( STRING , java.lang.Byte . byte , NumberUtils . parseNumber ( java.lang.String , java.lang.Byte .class ) . byteValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { assertEquals ( STRING , java.lang.Long . long , NumberUtils . parseNumber ( java.lang.String , java.lang.Long .class ) . longValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { assertEquals ( STRING , java.lang.Integer . int , NumberUtils . parseNumber ( java.lang.String , java.lang.Integer .class ) . intValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { assertEquals ( STRING , java.lang.Short . short , NumberUtils . parseNumber ( java.lang.String , java.lang.Short .class ) . shortValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { assertEquals ( STRING , java.lang.Byte . byte , NumberUtils . parseNumber ( java.lang.String , java.lang.Byte .class ) . byteValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Number java.lang.Number , java.lang.Class<? extends java.lang.Number> < ? extends java.lang.Number > java.lang.Class<? extends java.lang.Number> ) { java.lang.String java.lang.String = STRING + java.lang.Number + STRING + java.lang.Class<> ; try { NumberUtils . convertNumberToTargetClass ( java.lang.Number , java.lang.Class<> ) ; fail ( java.lang.String ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertTrue ( java.lang.String + STRING + java.lang.IllegalArgumentException . java.lang.String ( ) , java.lang.IllegalArgumentException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
