<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { CollectionUtils . mergePropertiesIntoMap ( java.util.Properties , this . java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { if ( java.util.Map<java.lang.String,> != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,> ) ; } }  <METHOD_END>
<METHOD_START> public void void ( javax.management.remote.MBeanServerForwarder javax.management.remote.MBeanServerForwarder ) { this . javax.management.remote.MBeanServerForwarder = javax.management.remote.MBeanServerForwarder ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) throws javax.management.MalformedObjectNameException { this . javax.management.ObjectName = ObjectNameManager . getInstance ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) javax.management.JMException , java.io.IOException { if ( this . server == null ) { this . server = JmxUtils . locateMBeanServer ( ) ; } javax.management.remote.JMXServiceURL javax.management.remote.JMXServiceURL = new javax.management.remote.JMXServiceURL ( this . java.lang.String ) ; this . javax.management.remote.JMXConnectorServer = javax.management.remote.JMXConnectorServerFactory . javax.management.remote.JMXConnectorServer ( javax.management.remote.JMXServiceURL , this . java.util.Map<java.lang.String,java.lang.Object> , this . server ) ; if ( this . javax.management.remote.MBeanServerForwarder != null ) { this . javax.management.remote.JMXConnectorServer . void ( this . javax.management.remote.MBeanServerForwarder ) ; } if ( this . javax.management.ObjectName != null ) { doRegister ( this . javax.management.remote.JMXConnectorServer , this . javax.management.ObjectName ) ; } try { if ( this . boolean ) { java.lang.Thread java.lang.Thread = new java.lang.Thread ( ) { @ java.lang.Override public void void ( ) { try { javax.management.remote.JMXConnectorServer . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new JmxException ( STRING , java.io.IOException ) ; } } } ; java.lang.Thread . void ( STRING + this . java.lang.String + STRING ) ; java.lang.Thread . void ( this . boolean ) ; java.lang.Thread . void ( ) ; } else { this . javax.management.remote.JMXConnectorServer . void ( ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + this . javax.management.remote.JMXConnectorServer ) ; } } catch ( java.io.IOException java.io.IOException ) { unregisterBeans ( ) ; throw java.io.IOException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { javax.management.remote.JMXConnectorServer . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new JmxException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.management.remote.JMXConnectorServer javax.management.remote.JMXConnectorServer ( ) { return this . javax.management.remote.JMXConnectorServer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends javax.management.remote.JMXConnectorServer> < ? extends javax.management.remote.JMXConnectorServer > java.lang.Class<? extends javax.management.remote.JMXConnectorServer> ( ) { return ( this . javax.management.remote.JMXConnectorServer != null ? this . javax.management.remote.JMXConnectorServer . java.lang.Class<? extends javax.management.remote.JMXConnectorServer> ( ) : javax.management.remote.JMXConnectorServer .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + this . javax.management.remote.JMXConnectorServer ) ; } try { this . javax.management.remote.JMXConnectorServer . void ( ) ; } finally { unregisterBeans ( ) ; } }  <METHOD_END>
