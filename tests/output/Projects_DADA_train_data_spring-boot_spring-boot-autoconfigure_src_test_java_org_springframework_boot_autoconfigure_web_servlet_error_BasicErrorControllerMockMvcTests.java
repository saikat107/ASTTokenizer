<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.autoconfigure.web.servlet.error.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.autoconfigure.web.servlet.error.WebApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MvcResult org.springframework.boot.autoconfigure.web.servlet.error.MvcResult = this . org.springframework.boot.autoconfigure.web.servlet.error.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . is5xxServerError ( ) ) . andReturn ( ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.web.servlet.error.MvcResult . getResponse ( ) . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MvcResult org.springframework.boot.autoconfigure.web.servlet.error.MvcResult = this . org.springframework.boot.autoconfigure.web.servlet.error.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isNotFound ( ) ) . andReturn ( ) ; MvcResult org.springframework.boot.autoconfigure.web.servlet.error.MvcResult = this . org.springframework.boot.autoconfigure.web.servlet.error.MockMvc . perform ( new org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorControllerMockMvcTests.ErrorDispatcher ( org.springframework.boot.autoconfigure.web.servlet.error.MvcResult , STRING ) ) . andReturn ( ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.web.servlet.error.MvcResult . getResponse ( ) . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MvcResult org.springframework.boot.autoconfigure.web.servlet.error.MvcResult = this . org.springframework.boot.autoconfigure.web.servlet.error.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . is4xxClientError ( ) ) . andReturn ( ) ; MvcResult org.springframework.boot.autoconfigure.web.servlet.error.MvcResult = this . org.springframework.boot.autoconfigure.web.servlet.error.MockMvc . perform ( new org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorControllerMockMvcTests.ErrorDispatcher ( org.springframework.boot.autoconfigure.web.servlet.error.MvcResult , STRING ) ) . andReturn ( ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.web.servlet.error.MvcResult . getResponse ( ) . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MvcResult org.springframework.boot.autoconfigure.web.servlet.error.MvcResult = this . org.springframework.boot.autoconfigure.web.servlet.error.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_HTML ) ) . andExpect ( status ( ) . is5xxServerError ( ) ) . andReturn ( ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.web.servlet.error.MvcResult . getResponse ( ) . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) { SpringApplication . run ( org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorControllerMockMvcTests.TestConfiguration .class , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.error.View org.springframework.boot.autoconfigure.web.servlet.error.View ( ) { return new AbstractView ( ) { @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.boot.autoconfigure.web.servlet.error.HttpServletRequest , HttpServletResponse org.springframework.boot.autoconfigure.web.servlet.error.HttpServletResponse )								throws java.lang.Exception { org.springframework.boot.autoconfigure.web.servlet.error.HttpServletResponse . getWriter ( ) . write ( STRING ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.boot.autoconfigure.web.servlet.error.HttpServletRequest , HttpServletResponse org.springframework.boot.autoconfigure.web.servlet.error.HttpServletResponse )								throws java.lang.Exception { org.springframework.boot.autoconfigure.web.servlet.error.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( ) { throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( ) { throw new org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorControllerMockMvcTests.NotFoundException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( ) java.lang.Exception { BindException org.springframework.boot.autoconfigure.web.servlet.error.BindException = new BindException ( this , STRING ) ; org.springframework.boot.autoconfigure.web.servlet.error.BindException . rejectValue ( STRING , STRING ) ; throw org.springframework.boot.autoconfigure.web.servlet.error.BindException ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> void ( MvcResult org.springframework.boot.autoconfigure.web.servlet.error.MvcResult , java.lang.String java.lang.String ) { this . org.springframework.boot.autoconfigure.web.servlet.error.MvcResult = org.springframework.boot.autoconfigure.web.servlet.error.MvcResult ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.error.MockHttpServletRequest org.springframework.boot.autoconfigure.web.servlet.error.MockHttpServletRequest ( ServletContext org.springframework.boot.autoconfigure.web.servlet.error.ServletContext ) { MockHttpServletRequest org.springframework.boot.autoconfigure.web.servlet.error.MockHttpServletRequest = this . org.springframework.boot.autoconfigure.web.servlet.error.MvcResult . getRequest ( ) ; org.springframework.boot.autoconfigure.web.servlet.error.MockHttpServletRequest . setDispatcherType ( DispatcherType . ERROR ) ; org.springframework.boot.autoconfigure.web.servlet.error.MockHttpServletRequest . setRequestURI ( this . java.lang.String ) ; return org.springframework.boot.autoconfigure.web.servlet.error.MockHttpServletRequest ; }  <METHOD_END>
