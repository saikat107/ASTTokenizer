<METHOD_START> @ Before public void void ( ) { org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter<?> = new Jaxb2CollectionHttpMessageConverter < java.util.Collection<java.lang.Object> < java.lang.Object > > ( ) ; java.lang.reflect.Type = new ParameterizedTypeReference < java.util.List<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> < org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement > > ( ) {} . getType ( ) ; java.lang.reflect.Type = new ParameterizedTypeReference < java.util.Set<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> < org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement > > ( ) {} . getType ( ) ; java.lang.reflect.Type = new ParameterizedTypeReference < java.util.List<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType> < org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType > > ( ) {} . getType ( ) ; java.lang.reflect.Type = new ParameterizedTypeReference < java.util.Set<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType> < org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType > > ( ) {} . getType ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter<> . canRead ( java.lang.reflect.Type , null , null ) ) ; assertTrue ( org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter<> . canRead ( java.lang.reflect.Type , null , null ) ) ; assertTrue ( org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter<> . canRead ( java.lang.reflect.Type , null , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; java.util.List<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> < org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement > java.util.List<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> = ( java.util.List<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> < org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement > ) org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter<> . read ( java.lang.reflect.Type , null , org.springframework.http.converter.xml.MockHttpInputMessage ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> . int ( ) ) ; assertEquals ( STRING , STRING , java.util.List<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> . org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement ( NUMBER ) . org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType . java.lang.String ) ; assertEquals ( STRING , STRING , java.util.List<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> . org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement ( NUMBER ) . org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; java.util.Set<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> < org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement > java.util.Set<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> = ( java.util.Set<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> < org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement > ) org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter<> . read ( java.lang.reflect.Type , null , org.springframework.http.converter.xml.MockHttpInputMessage ) ; assertEquals ( STRING , NUMBER , java.util.Set<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> . int ( ) ) ; assertTrue ( STRING , java.util.Set<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> . boolean ( new org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement ( STRING ) ) ) ; assertTrue ( STRING , java.util.Set<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> . boolean ( new org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; java.util.List<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType> < org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType > java.util.List<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType> = ( java.util.List<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType> < org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType > ) org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter<> . read ( java.lang.reflect.Type , null , org.springframework.http.converter.xml.MockHttpInputMessage ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType> . int ( ) ) ; assertEquals ( STRING , STRING , java.util.List<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType> . org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType ( NUMBER ) . java.lang.String ) ; assertEquals ( STRING , STRING , java.util.List<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType> . org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType ( NUMBER ) . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; java.util.Set<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType> < org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType > java.util.Set<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType> = ( java.util.Set<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType> < org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType > ) org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter<> . read ( java.lang.reflect.Type , null , org.springframework.http.converter.xml.MockHttpInputMessage ) ; assertEquals ( STRING , NUMBER , java.util.Set<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType> . int ( ) ) ; assertTrue ( STRING , java.util.Set<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType> . boolean ( new org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType ( STRING ) ) ) ; assertTrue ( STRING , java.util.Set<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType> . boolean ( new org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { Resource org.springframework.http.converter.xml.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests> ( ) ) ; java.lang.String java.lang.String = STRING + STRING + STRING + org.springframework.http.converter.xml.Resource . getURI ( ) + STRING + STRING ; MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter<?> = new Jaxb2CollectionHttpMessageConverter < java.util.Collection<java.lang.Object> < java.lang.Object > > ( ) { @ java.lang.Override protected javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory ( ) { javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory = super. createXmlInputFactory ( ) ; javax.xml.stream.XMLInputFactory . void ( javax.xml.stream.XMLInputFactory . java.lang.String , true ) ; return javax.xml.stream.XMLInputFactory ; } } ; try { java.util.Collection<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> < org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement > java.util.Collection<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> = org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter<> . read ( java.lang.reflect.Type , null , org.springframework.http.converter.xml.MockHttpInputMessage ) ; assertEquals ( NUMBER , java.util.Collection<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> . int ( ) ) ; assertEquals ( STRING , java.util.Collection<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> . java.util.Iterator<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> ( ) . org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement ( ) . java.lang.String ) ; } catch ( HttpMessageNotReadableException org.springframework.http.converter.xml.HttpMessageNotReadableException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory ( ) { javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory = super. createXmlInputFactory ( ) ; javax.xml.stream.XMLInputFactory . void ( javax.xml.stream.XMLInputFactory . java.lang.String , true ) ; return javax.xml.stream.XMLInputFactory ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { Resource org.springframework.http.converter.xml.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests> ( ) ) ; java.lang.String java.lang.String = STRING + STRING + STRING + org.springframework.http.converter.xml.Resource . getURI ( ) + STRING + STRING ; MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; Jaxb2CollectionHttpMessageConverter < ? > org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter<?> = new Jaxb2CollectionHttpMessageConverter < java.util.Collection<java.lang.Object> < java.lang.Object > > ( ) { @ java.lang.Override protected javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory ( ) { javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLInputFactory ( ) ; javax.xml.stream.XMLInputFactory . void ( javax.xml.stream.XMLInputFactory . java.lang.String , true ) ; return javax.xml.stream.XMLInputFactory ; } } ; java.util.Collection<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> < org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement > java.util.Collection<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> = org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter<> . read ( java.lang.reflect.Type , null , org.springframework.http.converter.xml.MockHttpInputMessage ) ; assertEquals ( NUMBER , java.util.Collection<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> . int ( ) ) ; assertEquals ( STRING , java.util.Collection<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> . java.util.Iterator<org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement> ( ) . org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement ( ) . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory ( ) { javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLInputFactory ( ) ; javax.xml.stream.XMLInputFactory . void ( javax.xml.stream.XMLInputFactory . java.lang.String , true ) ; return javax.xml.stream.XMLInputFactory ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ; MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; this . org.springframework.http.converter.xml.ExpectedException . expect ( HttpMessageNotReadableException .class ) ; this . org.springframework.http.converter.xml.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter<> . read ( this . java.lang.reflect.Type , null , org.springframework.http.converter.xml.MockHttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType = new org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object instanceof org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement ) { org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement = ( org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement ) java.lang.Object ; return this . org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType . boolean ( org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.RootElement . org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType ) ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType . int ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object instanceof org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType ) { org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType = ( org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType ) java.lang.Object ; return this . java.lang.String . boolean ( org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverterTests.TestType . java.lang.String ) ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.String . int ( ) ; }  <METHOD_END>
