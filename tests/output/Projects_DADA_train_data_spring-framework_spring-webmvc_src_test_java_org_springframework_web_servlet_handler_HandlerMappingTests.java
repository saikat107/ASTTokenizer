<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.servlet.handler.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMapping = new org.springframework.web.servlet.handler.HandlerMappingTests.TestHandlerMapping ( ) ; this . org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MappedInterceptor org.springframework.web.servlet.handler.MappedInterceptor = new MappedInterceptor ( new java.lang.String [] { STRING } , Mockito . mock ( HandlerInterceptor .class ) ) ; HandlerInterceptor org.springframework.web.servlet.handler.HandlerInterceptor = Mockito . mock ( HandlerInterceptor .class ) ; MappedInterceptor org.springframework.web.servlet.handler.MappedInterceptor = new MappedInterceptor ( new java.lang.String [] { STRING } , Mockito . mock ( HandlerInterceptor .class ) ) ; HandlerInterceptor org.springframework.web.servlet.handler.HandlerInterceptor = Mockito . mock ( HandlerInterceptor .class ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMapping . setInterceptors ( new java.lang.Object [] { org.springframework.web.servlet.handler.MappedInterceptor , org.springframework.web.servlet.handler.HandlerInterceptor , org.springframework.web.servlet.handler.MappedInterceptor , org.springframework.web.servlet.handler.HandlerInterceptor } ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMapping . setApplicationContext ( this . org.springframework.web.servlet.handler.StaticWebApplicationContext ) ; HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain = this . org.springframework.web.servlet.handler.AbstractHandlerMapping . getHandlerExecutionChain ( new org.springframework.web.servlet.handler.HandlerMappingTests.SimpleHandler ( ) , this . org.springframework.web.servlet.handler.MockHttpServletRequest ) ; Assert . assertThat ( org.springframework.web.servlet.handler.HandlerExecutionChain . getInterceptors ( ) , Matchers . arrayContaining ( org.springframework.web.servlet.handler.MappedInterceptor . getInterceptor ( ) , org.springframework.web.servlet.handler.HandlerInterceptor , org.springframework.web.servlet.handler.MappedInterceptor . getInterceptor ( ) , org.springframework.web.servlet.handler.HandlerInterceptor ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest ) throws java.lang.Exception { return new org.springframework.web.servlet.handler.HandlerMappingTests.SimpleHandler ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( METHOD_GET ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.handler.HttpServletResponse ) throws org.springframework.web.servlet.handler.ServletException , java.io.IOException { org.springframework.web.servlet.handler.HttpServletResponse . setStatus ( HttpStatus . OK . value ( ) ) ; }  <METHOD_END>
