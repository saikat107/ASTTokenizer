<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource , java.lang.String java.lang.String ) { this . org.springframework.integration.jdbc.NamedParameterJdbcOperations = new NamedParameterJdbcTemplate ( javax.sql.DataSource ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( JdbcOperations org.springframework.integration.jdbc.JdbcOperations , java.lang.String java.lang.String ) { this . org.springframework.integration.jdbc.NamedParameterJdbcOperations = new NamedParameterJdbcTemplate ( org.springframework.integration.jdbc.JdbcOperations ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( SqlParameterSourceFactory org.springframework.integration.jdbc.SqlParameterSourceFactory ) { this . org.springframework.integration.jdbc.SqlParameterSourceFactory = org.springframework.integration.jdbc.SqlParameterSourceFactory ; }  <METHOD_END>
<METHOD_START> public void void ( MessagePreparedStatementSetter org.springframework.integration.jdbc.MessagePreparedStatementSetter ) { this . org.springframework.integration.jdbc.MessagePreparedStatementSetter = org.springframework.integration.jdbc.MessagePreparedStatementSetter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; Assert . state ( ! ( this . org.springframework.integration.jdbc.SqlParameterSourceFactory != null && this . org.springframework.integration.jdbc.MessagePreparedStatementSetter != null ) , STRING ) ; if ( this . org.springframework.integration.jdbc.SqlParameterSourceFactory == null && this . org.springframework.integration.jdbc.MessagePreparedStatementSetter == null ) { this . org.springframework.integration.jdbc.SqlParameterSourceFactory = new BeanPropertySqlParameterSourceFactory ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.jdbc.Message<?> ) throws java.lang.Exception { java.util.List<? extends java.util.Map<java.lang.String,java.lang.Object>> < ? extends java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<? extends java.util.Map<java.lang.String,java.lang.Object>> = java.util.List<? extends java.util.Map<java.lang.String,java.lang.Object>> ( org.springframework.integration.jdbc.Message<> , this . boolean ) ; if ( ! java.util.List<> . boolean ( ) && logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.util.List<> ) ; } }  <METHOD_END>
<METHOD_START> protected java.util.List<? extends java.util.Map<java.lang.String,java.lang.Object>> < ? extends java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<? extends java.util.Map<java.lang.String,java.lang.Object>> ( final Message < ? > org.springframework.integration.jdbc.Message<?> , boolean boolean ) { SqlParameterSource org.springframework.integration.jdbc.SqlParameterSource = EmptySqlParameterSource . INSTANCE ; if ( this . org.springframework.integration.jdbc.MessagePreparedStatementSetter == null ) { if ( this . org.springframework.integration.jdbc.SqlParameterSourceFactory != null ) { org.springframework.integration.jdbc.SqlParameterSource = this . org.springframework.integration.jdbc.SqlParameterSourceFactory . createParameterSource ( org.springframework.integration.jdbc.Message<> ) ; } } if ( boolean ) { if ( this . org.springframework.integration.jdbc.MessagePreparedStatementSetter != null ) { return this . org.springframework.integration.jdbc.NamedParameterJdbcOperations . getJdbcOperations ( ) . execute ( this . org.springframework.integration.jdbc.PreparedStatementCreator , ( PreparedStatementCallback < java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > > ) ps -> { JdbcMessageHandler .this . preparedStatementSetter . setValues ( ps , message ) ; ps . executeUpdate ( ) ; ResultSet keys = ps . getGeneratedKeys ( ) ; if ( keys != null ) { try { return JdbcMessageHandler .this . generatedKeysResultSetExtractor . extractData ( keys ) ; } finally { JdbcUtils . closeResultSet ( keys ) ; } } return new LinkedList < Map < String , Object > > ( ) ; } ) ; } else { KeyHolder org.springframework.integration.jdbc.KeyHolder = new GeneratedKeyHolder ( ) ; this . org.springframework.integration.jdbc.NamedParameterJdbcOperations . update ( this . java.lang.String , org.springframework.integration.jdbc.SqlParameterSource , org.springframework.integration.jdbc.KeyHolder ) ; return org.springframework.integration.jdbc.KeyHolder . getKeyList ( ) ; } } else { int int ; if ( this . org.springframework.integration.jdbc.MessagePreparedStatementSetter != null ) { int = this . org.springframework.integration.jdbc.NamedParameterJdbcOperations . getJdbcOperations ( ) . update ( this . java.lang.String , ps -> JdbcMessageHandler .this . preparedStatementSetter . setValues ( ps , message ) ) ; } else { int = this . org.springframework.integration.jdbc.NamedParameterJdbcOperations . update ( this . java.lang.String , org.springframework.integration.jdbc.SqlParameterSource ) ; } LinkedCaseInsensitiveMap < java.lang.Object > org.springframework.integration.jdbc.LinkedCaseInsensitiveMap<java.lang.Object> = new LinkedCaseInsensitiveMap < java.lang.Object > ( ) ; org.springframework.integration.jdbc.LinkedCaseInsensitiveMap<java.lang.Object> . put ( STRING , int ) ; return java.util.Collections . java.util.List ( org.springframework.integration.jdbc.LinkedCaseInsensitiveMap<java.lang.Object> ) ; } }  <METHOD_END>
