<METHOD_START> public void ( ServletContextInitializer ... org.springframework.boot.web.embedded.jetty.ServletContextInitializer[] ) { Assert . notNull ( org.springframework.boot.web.embedded.jetty.ServletContextInitializer[] , STRING ) ; this . org.springframework.boot.web.embedded.jetty.ServletContextInitializer[] = org.springframework.boot.web.embedded.jetty.ServletContextInitializer[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebAppContext org.springframework.boot.web.embedded.jetty.WebAppContext ) throws java.lang.Exception { org.springframework.boot.web.embedded.jetty.WebAppContext . addBean ( new org.springframework.boot.web.embedded.jetty.ServletContextInitializerConfiguration.Initializer ( org.springframework.boot.web.embedded.jetty.WebAppContext ) , true ) ; }  <METHOD_END>
<METHOD_START> void ( WebAppContext org.springframework.boot.web.embedded.jetty.WebAppContext ) { this . org.springframework.boot.web.embedded.jetty.WebAppContext = org.springframework.boot.web.embedded.jetty.WebAppContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; java.lang.Thread . java.lang.Thread ( ) . void ( this . org.springframework.boot.web.embedded.jetty.WebAppContext . getClassLoader ( ) ) ; try { void ( ) ; } finally { java.lang.Thread . java.lang.Thread ( ) . void ( java.lang.ClassLoader ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) org.springframework.boot.web.embedded.jetty.ServletException { try { void ( true ) ; for ( ServletContextInitializer org.springframework.boot.web.embedded.jetty.ServletContextInitializer : org.springframework.boot.web.embedded.jetty.ServletContextInitializerConfiguration .this . org.springframework.boot.web.embedded.jetty.ServletContextInitializer[] ) { org.springframework.boot.web.embedded.jetty.ServletContextInitializer . onStartup ( this . org.springframework.boot.web.embedded.jetty.WebAppContext . getServletContext ( ) ) ; } } finally { void ( false ) ; } }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { try { this . org.springframework.boot.web.embedded.jetty.WebAppContext . getServletContext ( ) . setExtendedListenerTypes ( boolean ) ; } catch ( java.lang.NoSuchMethodError java.lang.NoSuchMethodError ) { } }  <METHOD_END>
