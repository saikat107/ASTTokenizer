<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING , NUMBER ) ; assertTrue ( java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) instanceof CacheableOperation ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING , NUMBER ) ; java.util.Iterator<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Iterator<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) ; assertTrue ( java.util.Iterator<org.springframework.cache.annotation.CacheOperation> . next ( ) instanceof CacheableOperation ) ; assertTrue ( java.util.Iterator<org.springframework.cache.annotation.CacheOperation> . next ( ) instanceof CacheEvictOperation ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING , NUMBER ) ; java.util.Iterator<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Iterator<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) ; assertTrue ( java.util.Iterator<org.springframework.cache.annotation.CacheOperation> . next ( ) instanceof CacheableOperation ) ; assertTrue ( java.util.Iterator<org.springframework.cache.annotation.CacheOperation> . next ( ) instanceof CacheEvictOperation ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING , NUMBER ) ; assertTrue ( java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) instanceof CacheEvictOperation ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING , NUMBER ) ; java.util.Iterator<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Iterator<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) ; assertTrue ( java.util.Iterator<org.springframework.cache.annotation.CacheOperation> . next ( ) instanceof CacheableOperation ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Iterator<org.springframework.cache.annotation.CacheOperation> . next ( ) ; assertTrue ( org.springframework.cache.annotation.CacheOperation instanceof CacheEvictOperation ) ; assertTrue ( org.springframework.cache.annotation.CacheOperation . getCacheNames ( ) . contains ( STRING ) ) ; org.springframework.cache.annotation.CacheOperation = java.util.Iterator<org.springframework.cache.annotation.CacheOperation> . next ( ) ; assertTrue ( org.springframework.cache.annotation.CacheOperation instanceof CacheEvictOperation ) ; assertTrue ( org.springframework.cache.annotation.CacheOperation . getCacheNames ( ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING , NUMBER ) ; java.util.Iterator<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Iterator<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Iterator<org.springframework.cache.annotation.CacheOperation> . next ( ) ; assertThat ( org.springframework.cache.annotation.CacheOperation , instanceOf ( CacheableOperation .class ) ) ; assertThat ( org.springframework.cache.annotation.CacheOperation . getCacheNames ( ) , equalTo ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ) ; assertThat ( org.springframework.cache.annotation.CacheOperation . getKey ( ) , equalTo ( STRING ) ) ; org.springframework.cache.annotation.CacheOperation = java.util.Iterator<org.springframework.cache.annotation.CacheOperation> . next ( ) ; assertThat ( org.springframework.cache.annotation.CacheOperation , instanceOf ( CacheableOperation .class ) ) ; assertThat ( org.springframework.cache.annotation.CacheOperation . getCacheNames ( ) , equalTo ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ) ; assertThat ( org.springframework.cache.annotation.CacheOperation . getKey ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING , NUMBER ) ; java.util.Iterator<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Iterator<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Iterator<org.springframework.cache.annotation.CacheOperation> . next ( ) ; assertThat ( org.springframework.cache.annotation.CacheOperation , instanceOf ( CacheableOperation .class ) ) ; assertThat ( org.springframework.cache.annotation.CacheOperation . getCacheNames ( ) , equalTo ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ) ; assertThat ( org.springframework.cache.annotation.CacheOperation . getKey ( ) , equalTo ( STRING ) ) ; org.springframework.cache.annotation.CacheOperation = java.util.Iterator<org.springframework.cache.annotation.CacheOperation> . next ( ) ; assertThat ( org.springframework.cache.annotation.CacheOperation , instanceOf ( CacheableOperation .class ) ) ; assertThat ( org.springframework.cache.annotation.CacheOperation . getCacheNames ( ) , equalTo ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ) ; assertThat ( org.springframework.cache.annotation.CacheOperation . getKey ( ) , equalTo ( STRING ) ) ; org.springframework.cache.annotation.CacheOperation = java.util.Iterator<org.springframework.cache.annotation.CacheOperation> . next ( ) ; assertThat ( org.springframework.cache.annotation.CacheOperation , instanceOf ( CacheableOperation .class ) ) ; assertThat ( org.springframework.cache.annotation.CacheOperation . getCacheNames ( ) , equalTo ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ) ; assertThat ( org.springframework.cache.annotation.CacheOperation . getKey ( ) , equalTo ( STRING ) ) ; org.springframework.cache.annotation.CacheOperation = java.util.Iterator<org.springframework.cache.annotation.CacheOperation> . next ( ) ; assertThat ( org.springframework.cache.annotation.CacheOperation , instanceOf ( CacheEvictOperation .class ) ) ; assertThat ( org.springframework.cache.annotation.CacheOperation . getCacheNames ( ) , equalTo ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ) ; assertThat ( org.springframework.cache.annotation.CacheOperation . getKey ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING , NUMBER ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; assertEquals ( STRING , STRING , org.springframework.cache.annotation.CacheOperation . getKeyGenerator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING , NUMBER ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; assertEquals ( STRING , STRING , org.springframework.cache.annotation.CacheOperation . getKeyGenerator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.cache.annotation.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING , NUMBER ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; assertEquals ( STRING , STRING , org.springframework.cache.annotation.CacheOperation . getCacheManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING , NUMBER ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; assertEquals ( STRING , STRING , org.springframework.cache.annotation.CacheOperation . getCacheManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING , NUMBER ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; assertEquals ( STRING , STRING , org.springframework.cache.annotation.CacheOperation . getCacheResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING , NUMBER ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; assertEquals ( STRING , STRING , org.springframework.cache.annotation.CacheOperation . getCacheResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.cache.annotation.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClassWithFullDefault .class , STRING , NUMBER ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; void ( org.springframework.cache.annotation.CacheOperation , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClassWithFullDefault .class , STRING , NUMBER ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; void ( org.springframework.cache.annotation.CacheOperation , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClassWithFullDefault .class , STRING , NUMBER ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; void ( org.springframework.cache.annotation.CacheOperation , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClassWithFullDefault .class , STRING , NUMBER ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; void ( org.springframework.cache.annotation.CacheOperation , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClass .class , STRING ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; assertNotNull ( STRING , org.springframework.cache.annotation.CacheOperation . getCacheNames ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.cache.annotation.CacheOperation . getCacheNames ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClassWithCustomDefault .class , STRING , NUMBER ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; void ( org.springframework.cache.annotation.CacheOperation , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.MultipleCacheConfig .class , STRING ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; void ( org.springframework.cache.annotation.CacheOperation , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.InterfaceCacheConfig .class , STRING ) ) ; java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.CacheConfigIfc .class , STRING ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; void ( org.springframework.cache.annotation.CacheOperation , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.InterfaceCacheConfig .class , STRING ) ; assertSame ( NUMBER , java.util.Collection<org.springframework.cache.annotation.CacheOperation> . size ( ) ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; assertTrue ( org.springframework.cache.annotation.CacheOperation instanceof CacheableOperation ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClassWithSomeDefault .class , STRING , NUMBER ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; void ( org.springframework.cache.annotation.CacheOperation , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClassWithSomeDefault .class , STRING , NUMBER ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; void ( org.springframework.cache.annotation.CacheOperation , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.AnnotatedClassWithSomeDefault .class , STRING , NUMBER ) ; CacheOperation org.springframework.cache.annotation.CacheOperation = java.util.Collection<org.springframework.cache.annotation.CacheOperation> . iterator ( ) . next ( ) ; void ( org.springframework.cache.annotation.CacheOperation , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , int int ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( java.lang.Class<> , java.lang.String ) ; assertEquals ( STRING + java.lang.String + STRING , int , java.util.Collection<org.springframework.cache.annotation.CacheOperation> . size ( ) ) ; return java.util.Collection<org.springframework.cache.annotation.CacheOperation> ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { try { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( java.lang.String ) ; return this . org.springframework.cache.annotation.AnnotationCacheOperationSource . getCacheOperations ( java.lang.reflect.Method , java.lang.Class<> ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new java.lang.IllegalStateException ( java.lang.NoSuchMethodException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( CacheOperation org.springframework.cache.annotation.CacheOperation , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { assertEquals ( STRING , java.lang.String , org.springframework.cache.annotation.CacheOperation . getKeyGenerator ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.cache.annotation.CacheOperation . getCacheManager ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.cache.annotation.CacheOperation . getCacheResolver ( ) ) ; assertEquals ( STRING , java.lang.String[] . int , org.springframework.cache.annotation.CacheOperation . getCacheNames ( ) . size ( ) ) ; java.util.Arrays . java.util.stream.Stream<java.lang.String> ( java.lang.String[] ) . void ( java.lang.String -> assertTrue ( STRING + java.lang.String + STRING + org.springframework.cache.annotation.CacheOperation . getCacheNames ( ) , org.springframework.cache.annotation.CacheOperation . getCacheNames ( ) . contains ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Cacheable ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ CacheEvict ( STRING ) @ Cacheable ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Caching ( cacheable = @ Cacheable ( STRING ) , evict = @ CacheEvict ( STRING ) ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Caching public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheNames = STRING , keyGenerator = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheNames = STRING , cacheManager = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheNames = STRING , cacheResolver = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.EvictFoo public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.EvictFoo @ org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.CacheableFoo @ org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.EvictBar public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable ( STRING ) @ org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.ComposedCacheable ( java.lang.String[] = STRING , java.lang.String = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable ( STRING ) @ org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.ComposedCacheable ( java.lang.String[] = STRING , java.lang.String = STRING ) @ org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.CacheableFoo @ org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.ComposedCacheEvict ( java.lang.String[] = STRING , java.lang.String = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Caching ( cacheable = { @ Cacheable ( cacheNames = STRING , key = STRING ) , @ Cacheable ( cacheNames = STRING , key = STRING ) } ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.CacheableFooCustomKeyGenerator public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheNames = STRING , key = STRING , keyGenerator = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.CacheableFooCustomCacheManager public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.cache.annotation.AnnotationCacheOperationSourceTests.CacheableFooCustomCacheResolver public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheNames = STRING , cacheManager = STRING , cacheResolver = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable ( keyGenerator = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheManager = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheResolver = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheManager = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheResolver = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Cacheable void void ( )  <METHOD_END>
<METHOD_START> @ CachePut void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Cacheable public void void ( ) {		}  <METHOD_END>
