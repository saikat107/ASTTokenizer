<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws java.lang.Exception { java.lang.reflect.Field java.lang.reflect.Field = null ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; do { try { java.lang.reflect.Field = java.lang.Class<> . java.lang.reflect.Field ( java.lang.String ) ; } catch ( java.lang.Exception java.lang.Exception ) {			} java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; } while ( java.lang.reflect.Field == null && ! java.lang.Class<> . boolean ( java.lang.Object .class ) ); if ( java.lang.reflect.Field == null ) throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.lang.reflect.Field . void ( true ) ; return ( T ) java.lang.reflect.Field . java.lang.Object ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<> , java.lang.String ) ; if ( java.lang.reflect.Method == null ) throw new java.lang.IllegalArgumentException ( STRING + java.lang.reflect.Method + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.lang.reflect.Method . void ( true ) ; return ( T ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) throws java.lang.Exception { java.lang.reflect.Field java.lang.reflect.Field = null ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; do { try { java.lang.reflect.Field = java.lang.Class<> . java.lang.reflect.Field ( java.lang.String ) ; } catch ( java.lang.Exception java.lang.Exception ) {			} java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; } while ( java.lang.reflect.Field == null && ! java.lang.Class<> . boolean ( java.lang.Object .class ) ); if ( java.lang.reflect.Field == null ) throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.lang.reflect.Field . void ( true ) ; java.lang.reflect.Field . void ( java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Object [] java.lang.Object[] , java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) throws java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<> , java.lang.String , java.lang.Class<?>[] ) ; if ( java.lang.reflect.Method == null ) throw new java.lang.IllegalArgumentException ( STRING + java.lang.reflect.Method + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.lang.reflect.Method . void ( true ) ; return ( T ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.Object , java.lang.Object[] ) ; }  <METHOD_END>
