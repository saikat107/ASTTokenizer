<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; ConfigurableApplicationContext org.springframework.boot.devtools.restart.ConfigurableApplicationContext = org.springframework.boot.devtools.restart.ConfigurableApplicationContext ( ) ; org.springframework.boot.devtools.restart.ConfigurableApplicationContext . close ( ) ; org.springframework.boot.devtools.restart.ConfigurableApplicationContext = org.springframework.boot.devtools.restart.ConfigurableApplicationContext ( ) ; org.springframework.boot.devtools.restart.ConfigurableApplicationContext . close ( ) ; assertThat ( java.util.concurrent.atomic.AtomicInteger . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.concurrent.atomic.AtomicInteger . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.restart.ConfigurableApplicationContext org.springframework.boot.devtools.restart.ConfigurableApplicationContext ( ) { SpringApplication org.springframework.boot.devtools.restart.SpringApplication = new SpringApplication ( org.springframework.boot.devtools.restart.RestartScopeInitializerTests.Config .class ) ; org.springframework.boot.devtools.restart.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; return org.springframework.boot.devtools.restart.SpringApplication . run ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ RestartScope public org.springframework.boot.devtools.restart.RestartScopeInitializerTests.ScopeTestBean org.springframework.boot.devtools.restart.RestartScopeInitializerTests.ScopeTestBean ( ) { return new org.springframework.boot.devtools.restart.RestartScopeInitializerTests.ScopeTestBean ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContextRefreshedEvent org.springframework.boot.devtools.restart.ContextRefreshedEvent ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
