<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.monitor.StateMachine<S,E> , Transition < S , E > org.springframework.statemachine.monitor.Transition<S,E> , long long ) { for ( java.util.Iterator<org.springframework.statemachine.monitor.StateMachineMonitor<S,E>> < StateMachineMonitor < S , E > > java.util.Iterator<org.springframework.statemachine.monitor.StateMachineMonitor<S,E>> = getItems ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.monitor.StateMachineMonitor<S,E>> . hasNext ( ) ;) { StateMachineMonitor < S , E > org.springframework.statemachine.monitor.StateMachineMonitor<S,E> = java.util.Iterator<org.springframework.statemachine.monitor.StateMachineMonitor<S,E>> . next ( ) ; org.springframework.statemachine.monitor.StateMachineMonitor<S,E> . transition ( org.springframework.statemachine.monitor.StateMachine<S,E> , org.springframework.statemachine.monitor.Transition<S,E> , long ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.monitor.StateMachine<S,E> , Action < S , E > org.springframework.statemachine.monitor.Action<S,E> , long long ) { for ( java.util.Iterator<org.springframework.statemachine.monitor.StateMachineMonitor<S,E>> < StateMachineMonitor < S , E > > java.util.Iterator<org.springframework.statemachine.monitor.StateMachineMonitor<S,E>> = getItems ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.monitor.StateMachineMonitor<S,E>> . hasNext ( ) ;) { StateMachineMonitor < S , E > org.springframework.statemachine.monitor.StateMachineMonitor<S,E> = java.util.Iterator<org.springframework.statemachine.monitor.StateMachineMonitor<S,E>> . next ( ) ; org.springframework.statemachine.monitor.StateMachineMonitor<S,E> . action ( org.springframework.statemachine.monitor.StateMachine<S,E> , org.springframework.statemachine.monitor.Action<S,E> , long ) ; } }  <METHOD_END>
