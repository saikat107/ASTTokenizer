<METHOD_START> public void ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.reactive.socket.HttpHeaders , Mono < java.security.Principal > org.springframework.web.reactive.socket.Mono<java.security.Principal> , java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { Assert . notNull ( java.net.URI , STRING ) ; Assert . notNull ( org.springframework.web.reactive.socket.HttpHeaders , STRING ) ; Assert . notNull ( org.springframework.web.reactive.socket.Mono<java.security.Principal> , STRING ) ; Assert . notNull ( java.util.Optional<java.lang.String> , STRING ) ; this . java.net.URI = java.net.URI ; this . org.springframework.web.reactive.socket.HttpHeaders = org.springframework.web.reactive.socket.HttpHeaders ; this . org.springframework.web.reactive.socket.Mono<java.security.Principal> = org.springframework.web.reactive.socket.Mono<java.security.Principal> ; this . java.util.Optional<java.lang.String> = java.util.Optional<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.net.URI java.net.URI ( ) { return this . java.net.URI ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.socket.HttpHeaders org.springframework.web.reactive.socket.HttpHeaders ( ) { return this . org.springframework.web.reactive.socket.HttpHeaders ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.socket.Mono<java.security.Principal> < java.security.Principal > org.springframework.web.reactive.socket.Mono<java.security.Principal> ( ) { return this . org.springframework.web.reactive.socket.Mono<java.security.Principal> ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ( ) { return this . java.util.Optional<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.net.URI + STRING + this . org.springframework.web.reactive.socket.HttpHeaders + STRING ; }  <METHOD_END>
