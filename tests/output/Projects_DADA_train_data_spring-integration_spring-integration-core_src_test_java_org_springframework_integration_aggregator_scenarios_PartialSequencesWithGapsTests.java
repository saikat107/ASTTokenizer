<METHOD_START> @ Before public void void ( ) { org.springframework.integration.aggregator.scenarios.SubscribableChannel . subscribe ( message -> received . add ( message ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.aggregator.scenarios.MessageChannel . send ( org.springframework.integration.aggregator.scenarios.Message<?> ( NUMBER , NUMBER ) ) ; org.springframework.integration.aggregator.scenarios.MessageChannel . send ( org.springframework.integration.aggregator.scenarios.Message<?> ( NUMBER , NUMBER ) ) ; org.springframework.integration.aggregator.scenarios.MessageChannel . send ( org.springframework.integration.aggregator.scenarios.Message<?> ( NUMBER , NUMBER ) ) ; assertThat ( new IntegrationMessageHeaderAccessor ( java.util.Queue<org.springframework.integration.aggregator.scenarios.Message> . poll ( ) ) . getSequenceNumber ( ) , is ( NUMBER ) ) ; assertThat ( new IntegrationMessageHeaderAccessor ( java.util.Queue<org.springframework.integration.aggregator.scenarios.Message> . poll ( ) ) . getSequenceNumber ( ) , is ( NUMBER ) ) ; java.util.Queue<org.springframework.integration.aggregator.scenarios.Message> . poll ( ) ; java.util.Queue<org.springframework.integration.aggregator.scenarios.Message> . poll ( ) ; org.springframework.integration.aggregator.scenarios.MessageChannel . send ( org.springframework.integration.aggregator.scenarios.Message<?> ( NUMBER , NUMBER ) ) ; assertThat ( java.util.Queue<org.springframework.integration.aggregator.scenarios.Message> . poll ( ) , is ( nullValue ( ) ) ) ; org.springframework.integration.aggregator.scenarios.MessageChannel . send ( org.springframework.integration.aggregator.scenarios.Message<?> ( NUMBER , NUMBER ) ) ; assertThat ( java.util.Queue<org.springframework.integration.aggregator.scenarios.Message> . poll ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.aggregator.scenarios.Message<?> < ? > org.springframework.integration.aggregator.scenarios.Message<?> ( int int , int int ) { return MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( int ) . setSequenceSize ( int ) . setCorrelationId ( STRING ) . build ( ) ; }  <METHOD_END>
