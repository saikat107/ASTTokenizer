<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { org.springframework.jmx.access.JmxTestBean = new JmxTestBean ( ) ; org.springframework.jmx.access.JmxTestBean . setAge ( NUMBER ) ; org.springframework.jmx.access.JmxTestBean . setName ( STRING ) ; MBeanExporter org.springframework.jmx.access.MBeanExporter = new MBeanExporter ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , org.springframework.jmx.access.JmxTestBean ) ; org.springframework.jmx.access.MBeanExporter . setServer ( getServer ( ) ) ; org.springframework.jmx.access.MBeanExporter . setBeans ( java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.jmx.access.MBeanExporter . setAssembler ( new org.springframework.jmx.access.MBeanClientInterceptorTests.ProxyTestAssembler ( ) ) ; start ( org.springframework.jmx.access.MBeanExporter ) ; }  <METHOD_END>
<METHOD_START> protected javax.management.MBeanServerConnection javax.management.MBeanServerConnection ( ) java.lang.Exception { return getServer ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jmx.access.IJmxTestBean org.springframework.jmx.access.IJmxTestBean ( ) java.lang.Exception { MBeanProxyFactoryBean org.springframework.jmx.access.MBeanProxyFactoryBean = new MBeanProxyFactoryBean ( ) ; org.springframework.jmx.access.MBeanProxyFactoryBean . setServer ( javax.management.MBeanServerConnection ( ) ) ; org.springframework.jmx.access.MBeanProxyFactoryBean . setProxyInterface ( IJmxTestBean .class ) ; org.springframework.jmx.access.MBeanProxyFactoryBean . setObjectName ( java.lang.String ) ; org.springframework.jmx.access.MBeanProxyFactoryBean . afterPropertiesSet ( ) ; return ( IJmxTestBean ) org.springframework.jmx.access.MBeanProxyFactoryBean . getObject ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assumeTrue ( boolean ) ; IJmxTestBean org.springframework.jmx.access.IJmxTestBean = org.springframework.jmx.access.IJmxTestBean ( ) ; assertTrue ( STRING , ( org.springframework.jmx.access.IJmxTestBean . getClass ( ) != IJmxTestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assumeTrue ( boolean ) ; IJmxTestBean org.springframework.jmx.access.IJmxTestBean = org.springframework.jmx.access.IJmxTestBean ( ) ; IJmxTestBean org.springframework.jmx.access.IJmxTestBean = org.springframework.jmx.access.IJmxTestBean ( ) ; assertNotSame ( STRING , org.springframework.jmx.access.IJmxTestBean , org.springframework.jmx.access.IJmxTestBean ) ; assertSame ( STRING , org.springframework.jmx.access.IJmxTestBean . getClass ( ) , org.springframework.jmx.access.IJmxTestBean . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assumeTrue ( boolean ) ; IJmxTestBean org.springframework.jmx.access.IJmxTestBean = org.springframework.jmx.access.IJmxTestBean ( ) ; int int = org.springframework.jmx.access.IJmxTestBean . getAge ( ) ; assertEquals ( STRING , NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assumeTrue ( boolean ) ; IJmxTestBean org.springframework.jmx.access.IJmxTestBean = org.springframework.jmx.access.IJmxTestBean ( ) ; org.springframework.jmx.access.IJmxTestBean . setName ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.jmx.access.JmxTestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { assumeTrue ( boolean ) ; IJmxTestBean org.springframework.jmx.access.IJmxTestBean = org.springframework.jmx.access.IJmxTestBean ( ) ; org.springframework.jmx.access.IJmxTestBean . setName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.ClassNotFoundException .class ) public void void ( ) java.lang.Exception { assumeTrue ( boolean ) ; IJmxTestBean org.springframework.jmx.access.IJmxTestBean = org.springframework.jmx.access.IJmxTestBean ( ) ; org.springframework.jmx.access.IJmxTestBean . setName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.io.IOException .class ) public void void ( ) java.lang.Exception { assumeTrue ( boolean ) ; IJmxTestBean org.springframework.jmx.access.IJmxTestBean = org.springframework.jmx.access.IJmxTestBean ( ) ; org.springframework.jmx.access.IJmxTestBean . setName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidInvocationException .class ) public void void ( ) java.lang.Exception { assumeTrue ( boolean ) ; IJmxTestBean org.springframework.jmx.access.IJmxTestBean = org.springframework.jmx.access.IJmxTestBean ( ) ; org.springframework.jmx.access.IJmxTestBean . setAge ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assumeTrue ( boolean ) ; IJmxTestBean org.springframework.jmx.access.IJmxTestBean = org.springframework.jmx.access.IJmxTestBean ( ) ; long long = org.springframework.jmx.access.IJmxTestBean . myOperation ( ) ; assertEquals ( STRING , NUMBER , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assumeTrue ( boolean ) ; IJmxTestBean org.springframework.jmx.access.IJmxTestBean = org.springframework.jmx.access.IJmxTestBean ( ) ; int int = org.springframework.jmx.access.IJmxTestBean . add ( NUMBER , NUMBER ) ; assertEquals ( STRING , NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidInvocationException .class ) public void void ( ) java.lang.Exception { assumeTrue ( boolean ) ; IJmxTestBean org.springframework.jmx.access.IJmxTestBean = org.springframework.jmx.access.IJmxTestBean ( ) ; org.springframework.jmx.access.IJmxTestBean . dontExposeMe ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assumeTrue ( boolean ) ; Assume . group ( TestGroup . JMXMP ) ; final int int = SocketUtils . findAvailableTcpPort ( ) ; javax.management.remote.JMXServiceURL javax.management.remote.JMXServiceURL = new javax.management.remote.JMXServiceURL ( STRING + int ) ; javax.management.remote.JMXConnectorServer javax.management.remote.JMXConnectorServer = javax.management.remote.JMXConnectorServerFactory . javax.management.remote.JMXConnectorServer ( javax.management.remote.JMXServiceURL , null , getServer ( ) ) ; MBeanProxyFactoryBean org.springframework.jmx.access.MBeanProxyFactoryBean = new MBeanProxyFactoryBean ( ) ; org.springframework.jmx.access.MBeanProxyFactoryBean . setServiceUrl ( javax.management.remote.JMXServiceURL . java.lang.String ( ) ) ; org.springframework.jmx.access.MBeanProxyFactoryBean . setProxyInterface ( IJmxTestBean .class ) ; org.springframework.jmx.access.MBeanProxyFactoryBean . setObjectName ( java.lang.String ) ; org.springframework.jmx.access.MBeanProxyFactoryBean . setConnectOnStartup ( false ) ; org.springframework.jmx.access.MBeanProxyFactoryBean . setRefreshOnConnectFailure ( true ) ; org.springframework.jmx.access.MBeanProxyFactoryBean . afterPropertiesSet ( ) ; IJmxTestBean org.springframework.jmx.access.IJmxTestBean = ( IJmxTestBean ) org.springframework.jmx.access.MBeanProxyFactoryBean . getObject ( ) ; try { javax.management.remote.JMXConnectorServer . void ( ) ; } catch ( java.net.BindException java.net.BindException ) { java.lang.System . java.io.PrintStream . void ( STRING + int + STRING + java.net.BindException . java.lang.String ( ) ) ; return; } try { assertEquals ( STRING , org.springframework.jmx.access.IJmxTestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.jmx.access.IJmxTestBean . getAge ( ) ) ; } finally { javax.management.remote.JMXConnectorServer . void ( ) ; } try { org.springframework.jmx.access.IJmxTestBean . getName ( ) ; } catch ( JmxException org.springframework.jmx.access.JmxException ) { } javax.management.remote.JMXConnectorServer = javax.management.remote.JMXConnectorServerFactory . javax.management.remote.JMXConnectorServer ( javax.management.remote.JMXServiceURL , null , getServer ( ) ) ; javax.management.remote.JMXConnectorServer . void ( ) ; try { assertEquals ( STRING , org.springframework.jmx.access.IJmxTestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.jmx.access.IJmxTestBean . getAge ( ) ) ; } finally { javax.management.remote.JMXConnectorServer . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method ) { return java.lang.reflect.Method . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.String java.lang.String ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor ) { return java.beans.PropertyDescriptor . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( javax.management.Descriptor javax.management.Descriptor , java.lang.reflect.Method java.lang.reflect.Method , java.lang.reflect.Method java.lang.reflect.Method ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( javax.management.Descriptor javax.management.Descriptor , java.lang.reflect.Method java.lang.reflect.Method ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Class java.lang.Class ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected void void ( javax.management.Descriptor javax.management.Descriptor , java.lang.String java.lang.String , java.lang.Class java.lang.Class ) {		}  <METHOD_END>
