<METHOD_START> public void ( javax.management.ObjectName javax.management.ObjectName ) { Assert . notNull ( javax.management.ObjectName , STRING ) ; this . javax.management.ObjectName = javax.management.ObjectName ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; try { this . javax.management.ObjectName = ObjectNameManager . getInstance ( java.lang.String ) ; } catch ( javax.management.MalformedObjectNameException javax.management.MalformedObjectNameException ) { throw new java.lang.IllegalArgumentException ( javax.management.MalformedObjectNameException ) ; } }  <METHOD_END>
<METHOD_START> public void void ( OutboundMessageMapper < javax.management.Notification > org.springframework.integration.jmx.OutboundMessageMapper<javax.management.Notification> ) { this . org.springframework.integration.jmx.OutboundMessageMapper<javax.management.Notification> = org.springframework.integration.jmx.OutboundMessageMapper<javax.management.Notification> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) java.lang.Exception { Assert . isTrue ( this . getBeanFactory ( ) instanceof ListableBeanFactory , STRING ) ; java.util.Map<java.lang.String,org.springframework.integration.jmx.MBeanExporter> < java.lang.String , MBeanExporter > java.util.Map<java.lang.String,org.springframework.integration.jmx.MBeanExporter> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( ( ListableBeanFactory ) this . getBeanFactory ( ) , MBeanExporter .class ) ; Assert . isTrue ( java.util.Map<java.lang.String,org.springframework.integration.jmx.MBeanExporter> . size ( ) > NUMBER , STRING ) ; MBeanExporter org.springframework.integration.jmx.MBeanExporter = null ; for ( MBeanExporter org.springframework.integration.jmx.MBeanExporter : java.util.Map<java.lang.String,org.springframework.integration.jmx.MBeanExporter> . values ( ) ) { org.springframework.integration.jmx.MBeanExporter = org.springframework.integration.jmx.MBeanExporter ; if ( org.springframework.integration.jmx.MBeanExporter instanceof IntegrationMBeanExporter ) { break; } } if ( this . org.springframework.integration.jmx.OutboundMessageMapper<javax.management.Notification> == null ) { this . org.springframework.integration.jmx.OutboundMessageMapper<javax.management.Notification> = new DefaultNotificationMapper ( this . javax.management.ObjectName , this . java.lang.String ) ; } org.springframework.integration.jmx.MBeanExporter . registerManagedResource ( this . org.springframework.integration.jmx.NotificationPublishingMessageHandler.PublisherDelegate , this . javax.management.ObjectName ) ; if ( this . logger . isInfoEnabled ( ) ) { this . logger . info ( STRING + this . javax.management.ObjectName ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.jmx.Message<?> ) throws java.lang.Exception { this . org.springframework.integration.jmx.NotificationPublishingMessageHandler.PublisherDelegate . void ( this . org.springframework.integration.jmx.OutboundMessageMapper<javax.management.Notification> . fromMessage ( org.springframework.integration.jmx.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( NotificationPublisher org.springframework.integration.jmx.NotificationPublisher ) { this . org.springframework.integration.jmx.NotificationPublisher = org.springframework.integration.jmx.NotificationPublisher ; }  <METHOD_END>
<METHOD_START> private void void ( javax.management.Notification javax.management.Notification ) { Assert . state ( this . org.springframework.integration.jmx.NotificationPublisher != null , STRING ) ; this . org.springframework.integration.jmx.NotificationPublisher . sendNotification ( javax.management.Notification ) ; }  <METHOD_END>
