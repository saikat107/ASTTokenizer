<METHOD_START> public void ( ) { StringHttpMessageConverter org.springframework.web.servlet.mvc.method.annotation.StringHttpMessageConverter = new StringHttpMessageConverter ( ) ; org.springframework.web.servlet.mvc.method.annotation.StringHttpMessageConverter . setWriteAcceptCharset ( false ) ; this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList <> ( NUMBER ) ; this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new ByteArrayHttpMessageConverter ( ) ) ; this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( org.springframework.web.servlet.mvc.method.annotation.StringHttpMessageConverter ) ; this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new SourceHttpMessageConverter <> ( ) ) ; this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new AllEncompassingFormHttpMessageConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ) { this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> = java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ( ) { return this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ) { if ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> == null ) { this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite = null ; } else { this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite = new HandlerMethodArgumentResolverComposite ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite . addResolvers ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ( ) { return ( this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite != null ) ? this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite . getResolvers ( ) : null ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ) { if ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> == null ) { this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite = null ; } else { this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite = new HandlerMethodArgumentResolverComposite ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite . addResolvers ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ( ) { return ( this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite != null ) ? this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite . getResolvers ( ) : null ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ) { this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> = java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ( ) { return this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ) { if ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> == null ) { this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite = null ; } else { this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite = new HandlerMethodReturnValueHandlerComposite ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite . addHandlers ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ( ) { return this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite . getHandlers ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver> < ModelAndViewResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver> ) { this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver> = java.util.List<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver> < ModelAndViewResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver> ( ) { return java.util.List<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver> ; }  <METHOD_END>
<METHOD_START> public void void ( ContentNegotiationManager org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ) { this . org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager = org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) { this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ( ) { return this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice> < RequestBodyAdvice > java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice> ) { if ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice> != null ) { this . java.util.List<java.lang.Object> . boolean ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice> ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice<?>> < ResponseBodyAdvice < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice<?>> ) { if ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice<?>> != null ) { this . java.util.List<java.lang.Object> . boolean ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice<?>> ) ; } }  <METHOD_END>
<METHOD_START> public void void ( WebBindingInitializer org.springframework.web.servlet.mvc.method.annotation.WebBindingInitializer ) { this . org.springframework.web.servlet.mvc.method.annotation.WebBindingInitializer = org.springframework.web.servlet.mvc.method.annotation.WebBindingInitializer ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.WebBindingInitializer org.springframework.web.servlet.mvc.method.annotation.WebBindingInitializer ( ) { return this . org.springframework.web.servlet.mvc.method.annotation.WebBindingInitializer ; }  <METHOD_END>
<METHOD_START> public void void ( AsyncTaskExecutor org.springframework.web.servlet.mvc.method.annotation.AsyncTaskExecutor ) { this . org.springframework.web.servlet.mvc.method.annotation.AsyncTaskExecutor = org.springframework.web.servlet.mvc.method.annotation.AsyncTaskExecutor ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . java.lang.Long = long ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.CallableProcessingInterceptor> < CallableProcessingInterceptor > java.util.List<org.springframework.web.servlet.mvc.method.annotation.CallableProcessingInterceptor> ) { Assert . notNull ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.CallableProcessingInterceptor> , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.CallableProcessingInterceptor[] = java.util.List<org.springframework.web.servlet.mvc.method.annotation.CallableProcessingInterceptor> . toArray ( new CallableProcessingInterceptor [ java.util.List<org.springframework.web.servlet.mvc.method.annotation.CallableProcessingInterceptor> . size ( ) ] ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.DeferredResultProcessingInterceptor> < DeferredResultProcessingInterceptor > java.util.List<org.springframework.web.servlet.mvc.method.annotation.DeferredResultProcessingInterceptor> ) { Assert . notNull ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.DeferredResultProcessingInterceptor> , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.DeferredResultProcessingInterceptor[] = java.util.List<org.springframework.web.servlet.mvc.method.annotation.DeferredResultProcessingInterceptor> . toArray ( new DeferredResultProcessingInterceptor [ java.util.List<org.springframework.web.servlet.mvc.method.annotation.DeferredResultProcessingInterceptor> . size ( ) ] ) ; }  <METHOD_END>
<METHOD_START> public void void ( ReactiveAdapterRegistry org.springframework.web.servlet.mvc.method.annotation.ReactiveAdapterRegistry ) { Assert . notNull ( org.springframework.web.servlet.mvc.method.annotation.ReactiveAdapterRegistry , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.ReactiveAdapterRegistry = this . org.springframework.web.servlet.mvc.method.annotation.ReactiveAdapterRegistry ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.ReactiveAdapterRegistry org.springframework.web.servlet.mvc.method.annotation.ReactiveAdapterRegistry ( ) { return this . org.springframework.web.servlet.mvc.method.annotation.ReactiveAdapterRegistry ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( SessionAttributeStore org.springframework.web.servlet.mvc.method.annotation.SessionAttributeStore ) { this . org.springframework.web.servlet.mvc.method.annotation.SessionAttributeStore = org.springframework.web.servlet.mvc.method.annotation.SessionAttributeStore ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( ParameterNameDiscoverer org.springframework.web.servlet.mvc.method.annotation.ParameterNameDiscoverer ) { this . org.springframework.web.servlet.mvc.method.annotation.ParameterNameDiscoverer = org.springframework.web.servlet.mvc.method.annotation.ParameterNameDiscoverer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.web.servlet.mvc.method.annotation.BeanFactory ) { if ( org.springframework.web.servlet.mvc.method.annotation.BeanFactory instanceof ConfigurableBeanFactory ) { this . org.springframework.web.servlet.mvc.method.annotation.ConfigurableBeanFactory = ( ConfigurableBeanFactory ) org.springframework.web.servlet.mvc.method.annotation.BeanFactory ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ConfigurableBeanFactory org.springframework.web.servlet.mvc.method.annotation.ConfigurableBeanFactory ( ) { return this . org.springframework.web.servlet.mvc.method.annotation.ConfigurableBeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; if ( this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite == null ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> = java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite = new HandlerMethodArgumentResolverComposite ( ) . addResolvers ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ) ; } if ( this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite == null ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> = java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite = new HandlerMethodArgumentResolverComposite ( ) . addResolvers ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ) ; } if ( this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite == null ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> = java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite = new HandlerMethodReturnValueHandlerComposite ( ) . addHandlers ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( getApplicationContext ( ) == null ) { return; } if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + getApplicationContext ( ) ) ; } java.util.List<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean> < ControllerAdviceBean > java.util.List<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean> = ControllerAdviceBean . findAnnotatedBeans ( getApplicationContext ( ) ) ; AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean> ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; for ( ControllerAdviceBean org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean : java.util.List<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean> ) { java.util.Set<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Set<java.lang.reflect.Method> = MethodIntrospector . selectMethods ( org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean . getBeanType ( ) , org.springframework.web.servlet.mvc.method.annotation.MethodFilter ) ; if ( ! java.util.Set<java.lang.reflect.Method> . boolean ( ) ) { this . java.util.Map<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> . put ( org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean , java.util.Set<java.lang.reflect.Method> ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean ) ; } } java.util.Set<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Set<java.lang.reflect.Method> = MethodIntrospector . selectMethods ( org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean . getBeanType ( ) , org.springframework.web.servlet.mvc.method.annotation.MethodFilter ) ; if ( ! java.util.Set<java.lang.reflect.Method> . boolean ( ) ) { this . java.util.Map<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> . put ( org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean , java.util.Set<java.lang.reflect.Method> ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean ) ; } } if ( RequestBodyAdvice .class . boolean ( org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean . getBeanType ( ) ) ) { java.util.List<java.lang.Object> . boolean ( org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean ) ; } } if ( ResponseBodyAdvice .class . boolean ( org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean . getBeanType ( ) ) ) { java.util.List<java.lang.Object> . boolean ( org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean ) ; } } } if ( ! java.util.List<java.lang.Object> . boolean ( ) ) { this . java.util.List<java.lang.Object> . boolean ( NUMBER , java.util.List<java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ( ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new RequestParamMethodArgumentResolver ( org.springframework.web.servlet.mvc.method.annotation.ConfigurableBeanFactory ( ) , false ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new RequestParamMapMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new PathVariableMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new PathVariableMapMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new MatrixVariableMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new MatrixVariableMapMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ServletModelAttributeMethodProcessor ( false ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ( ) , this . java.util.List<java.lang.Object> ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new RequestPartMethodArgumentResolver ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ( ) , this . java.util.List<java.lang.Object> ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new RequestHeaderMethodArgumentResolver ( org.springframework.web.servlet.mvc.method.annotation.ConfigurableBeanFactory ( ) ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new RequestHeaderMapMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ServletCookieValueMethodArgumentResolver ( org.springframework.web.servlet.mvc.method.annotation.ConfigurableBeanFactory ( ) ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ExpressionValueMethodArgumentResolver ( org.springframework.web.servlet.mvc.method.annotation.ConfigurableBeanFactory ( ) ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new SessionAttributeMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new RequestAttributeMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ServletRequestMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ServletResponseMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new HttpEntityMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ( ) , this . java.util.List<java.lang.Object> ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new RedirectAttributesMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ModelMethodProcessor ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new MapMethodProcessor ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ErrorsMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new SessionStatusMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new UriComponentsBuilderMethodArgumentResolver ( ) ) ; if ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ( ) != null ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . addAll ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ( ) ) ; } java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new RequestParamMethodArgumentResolver ( org.springframework.web.servlet.mvc.method.annotation.ConfigurableBeanFactory ( ) , true ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ServletModelAttributeMethodProcessor ( true ) ) ; return java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ( ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new RequestParamMethodArgumentResolver ( org.springframework.web.servlet.mvc.method.annotation.ConfigurableBeanFactory ( ) , false ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new RequestParamMapMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new PathVariableMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new PathVariableMapMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new MatrixVariableMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new MatrixVariableMapMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ExpressionValueMethodArgumentResolver ( org.springframework.web.servlet.mvc.method.annotation.ConfigurableBeanFactory ( ) ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new SessionAttributeMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new RequestAttributeMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ServletRequestMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ServletResponseMethodArgumentResolver ( ) ) ; if ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ( ) != null ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . addAll ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ( ) ) ; } java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new RequestParamMethodArgumentResolver ( org.springframework.web.servlet.mvc.method.annotation.ConfigurableBeanFactory ( ) , true ) ) ; return java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ( ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new ModelAndViewMethodReturnValueHandler ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new ModelMethodProcessor ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new ViewMethodReturnValueHandler ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new ResponseBodyEmitterReturnValueHandler ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ( ) , this . org.springframework.web.servlet.mvc.method.annotation.ReactiveAdapterRegistry , this . org.springframework.web.servlet.mvc.method.annotation.AsyncTaskExecutor , this . org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new StreamingResponseBodyReturnValueHandler ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new HttpEntityMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ( ) , this . org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager , this . java.util.List<java.lang.Object> ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new HttpHeadersReturnValueHandler ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new CallableMethodReturnValueHandler ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new DeferredResultMethodReturnValueHandler ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new AsyncTaskMethodReturnValueHandler ( this . org.springframework.web.servlet.mvc.method.annotation.ConfigurableBeanFactory ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new ModelAttributeMethodProcessor ( false ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ( ) , this . org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager , this . java.util.List<java.lang.Object> ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new ViewNameMethodReturnValueHandler ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new MapMethodProcessor ( ) ) ; if ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ( ) != null ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . addAll ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ( ) ) ; } if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver> ( ) ) ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new ModelAndViewResolverMethodReturnValueHandler ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver> ( ) ) ) ; } else { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new ModelAttributeMethodProcessor ( true ) ) ; } return java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.mvc.method.annotation.ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView ( HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse , HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) throws java.lang.Exception { ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView ; checkRequest ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) ; if ( this . boolean ) { HttpSession org.springframework.web.servlet.mvc.method.annotation.HttpSession = org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . getSession ( false ) ; if ( org.springframework.web.servlet.mvc.method.annotation.HttpSession != null ) { java.lang.Object java.lang.Object = WebUtils . getSessionMutex ( org.springframework.web.servlet.mvc.method.annotation.HttpSession ) ; synchronized ( java.lang.Object ) { org.springframework.web.servlet.mvc.method.annotation.ModelAndView = org.springframework.web.servlet.mvc.method.annotation.ModelAndView ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; } } else { org.springframework.web.servlet.mvc.method.annotation.ModelAndView = org.springframework.web.servlet.mvc.method.annotation.ModelAndView ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; } } else { org.springframework.web.servlet.mvc.method.annotation.ModelAndView = org.springframework.web.servlet.mvc.method.annotation.ModelAndView ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; } if ( ! org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . containsHeader ( HEADER_CACHE_CONTROL ) ) { if ( org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) . hasSessionAttributes ( ) ) { applyCacheSeconds ( org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse , this . int ) ; } else { prepareResponse ( org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) ; } } return org.springframework.web.servlet.mvc.method.annotation.ModelAndView ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected long long ( HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) { return - NUMBER ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler ( HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getBeanType ( ) ; SessionAttributesHandler org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler = this . java.util.Map<java.lang.Class<?>,org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler> . get ( java.lang.Class<> ) ; if ( org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler == null ) { synchronized ( this . java.util.Map<java.lang.Class<?>,org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler> ) { org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler = this . java.util.Map<java.lang.Class<?>,org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler> . get ( java.lang.Class<> ) ; if ( org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler == null ) { org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler = new SessionAttributesHandler ( java.lang.Class<> , org.springframework.web.servlet.mvc.method.annotation.SessionAttributeStore ) ; this . java.util.Map<java.lang.Class<?>,org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler> . put ( java.lang.Class<> , org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler ) ; } } } return org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView ( HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse , HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) throws java.lang.Exception { ServletWebRequest org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) ; try { WebDataBinderFactory org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory = org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; ModelFactory org.springframework.web.servlet.mvc.method.annotation.ModelFactory = org.springframework.web.servlet.mvc.method.annotation.ModelFactory ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) ; ServletInvocableHandlerMethod org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod = org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod . setHandlerMethodArgumentResolvers ( this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite ) ; org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod . setHandlerMethodReturnValueHandlers ( this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite ) ; org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod . setDataBinderFactory ( org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) ; org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod . setParameterNameDiscoverer ( this . org.springframework.web.servlet.mvc.method.annotation.ParameterNameDiscoverer ) ; ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . addAllAttributes ( RequestContextUtils . getInputFlashMap ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) ) ; org.springframework.web.servlet.mvc.method.annotation.ModelFactory . initModel ( org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setIgnoreDefaultModelOnRedirect ( this . boolean ) ; AsyncWebRequest org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest = WebAsyncUtils . createAsyncWebRequest ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) ; org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest . setTimeout ( this . java.lang.Long ) ; WebAsyncManager org.springframework.web.servlet.mvc.method.annotation.WebAsyncManager = WebAsyncUtils . getAsyncManager ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) ; org.springframework.web.servlet.mvc.method.annotation.WebAsyncManager . setTaskExecutor ( this . org.springframework.web.servlet.mvc.method.annotation.AsyncTaskExecutor ) ; org.springframework.web.servlet.mvc.method.annotation.WebAsyncManager . setAsyncWebRequest ( org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest ) ; org.springframework.web.servlet.mvc.method.annotation.WebAsyncManager . registerCallableInterceptors ( this . org.springframework.web.servlet.mvc.method.annotation.CallableProcessingInterceptor[] ) ; org.springframework.web.servlet.mvc.method.annotation.WebAsyncManager . registerDeferredResultInterceptors ( this . org.springframework.web.servlet.mvc.method.annotation.DeferredResultProcessingInterceptor[] ) ; if ( org.springframework.web.servlet.mvc.method.annotation.WebAsyncManager . hasConcurrentResult ( ) ) { java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.WebAsyncManager . getConcurrentResult ( ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer = ( ModelAndViewContainer ) org.springframework.web.servlet.mvc.method.annotation.WebAsyncManager . getConcurrentResultContext ( ) [ NUMBER ] ; org.springframework.web.servlet.mvc.method.annotation.WebAsyncManager . clearConcurrentResult ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.Object + STRING ) ; } org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod = org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod . wrapConcurrentResult ( java.lang.Object ) ; } org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod . invokeAndHandle ( org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer ) ; if ( org.springframework.web.servlet.mvc.method.annotation.WebAsyncManager . isConcurrentHandlingStarted ( ) ) { return null ; } return org.springframework.web.servlet.mvc.method.annotation.ModelAndView ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ModelFactory , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; } finally { org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest . requestCompleted ( ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod ( HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) { return new ServletInvocableHandlerMethod ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.ModelFactory org.springframework.web.servlet.mvc.method.annotation.ModelFactory ( HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , WebDataBinderFactory org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) { SessionAttributesHandler org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler = org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getBeanType ( ) ; java.util.Set<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Set<java.lang.reflect.Method> = this . java.util.Map<java.lang.Class<?>,java.util.Set<java.lang.reflect.Method>> . java.util.Set<java.lang.reflect.Method> ( java.lang.Class<> ) ; if ( java.util.Set<java.lang.reflect.Method> == null ) { java.util.Set<java.lang.reflect.Method> = MethodIntrospector . selectMethods ( java.lang.Class<> , org.springframework.web.servlet.mvc.method.annotation.MethodFilter ) ; this . java.util.Map<java.lang.Class<?>,java.util.Set<java.lang.reflect.Method>> . java.util.Set<java.lang.reflect.Method> ( java.lang.Class<> , java.util.Set<java.lang.reflect.Method> ) ; } java.util.List<org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod> < InvocableHandlerMethod > java.util.List<org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod> <> ( ) ; for ( java.util.Map.Entry<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> < ControllerAdviceBean , java.util.Set<java.lang.reflect.Method> < java.lang.reflect.Method > > java.util.Map.Entry<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> : this . java.util.Map<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> . entrySet ( ) ) { if ( java.util.Map.Entry<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> . getKey ( ) . isApplicableToBeanType ( java.lang.Class<> ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> . getKey ( ) . resolveBean ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.Map.Entry<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> . getValue ( ) ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod> . add ( org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod ( org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory , java.lang.Object , java.lang.reflect.Method ) ) ; } } } for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method> ) { java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getBean ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod> . add ( org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod ( org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory , java.lang.Object , java.lang.reflect.Method ) ) ; } return new ModelFactory ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod> , org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory , org.springframework.web.servlet.mvc.method.annotation.SessionAttributesHandler ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod ( WebDataBinderFactory org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory , java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { InvocableHandlerMethod org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod = new InvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod . setHandlerMethodArgumentResolvers ( this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite ) ; org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod . setParameterNameDiscoverer ( this . org.springframework.web.servlet.mvc.method.annotation.ParameterNameDiscoverer ) ; org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod . setDataBinderFactory ( org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) ; return org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ( HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) throws java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getBeanType ( ) ; java.util.Set<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Set<java.lang.reflect.Method> = this . java.util.Map<java.lang.Class<?>,java.util.Set<java.lang.reflect.Method>> . java.util.Set<java.lang.reflect.Method> ( java.lang.Class<> ) ; if ( java.util.Set<java.lang.reflect.Method> == null ) { java.util.Set<java.lang.reflect.Method> = MethodIntrospector . selectMethods ( java.lang.Class<> , org.springframework.web.servlet.mvc.method.annotation.MethodFilter ) ; this . java.util.Map<java.lang.Class<?>,java.util.Set<java.lang.reflect.Method>> . java.util.Set<java.lang.reflect.Method> ( java.lang.Class<> , java.util.Set<java.lang.reflect.Method> ) ; } java.util.List<org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod> < InvocableHandlerMethod > java.util.List<org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod> <> ( ) ; for ( java.util.Map.Entry<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> < ControllerAdviceBean , java.util.Set<java.lang.reflect.Method> < java.lang.reflect.Method > > java.util.Map.Entry<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> : this . java.util.Map<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> . entrySet ( ) ) { if ( java.util.Map.Entry<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> . getKey ( ) . isApplicableToBeanType ( java.lang.Class<> ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> . getKey ( ) . resolveBean ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.Map.Entry<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> . getValue ( ) ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod> . add ( org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ) ; } } } for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method> ) { java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getBean ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod> . add ( org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ) ; } return org.springframework.web.servlet.mvc.method.annotation.InitBinderDataBinderFactory ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { InvocableHandlerMethod org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod = new InvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod . setHandlerMethodArgumentResolvers ( this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite ) ; org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod . setDataBinderFactory ( new DefaultDataBinderFactory ( this . org.springframework.web.servlet.mvc.method.annotation.WebBindingInitializer ) ) ; org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod . setParameterNameDiscoverer ( this . org.springframework.web.servlet.mvc.method.annotation.ParameterNameDiscoverer ) ; return org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.InitBinderDataBinderFactory org.springframework.web.servlet.mvc.method.annotation.InitBinderDataBinderFactory ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod> < InvocableHandlerMethod > java.util.List<org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod> )			throws java.lang.Exception { return new ServletRequestDataBinderFactory ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.InvocableHandlerMethod> , org.springframework.web.servlet.mvc.method.annotation.WebBindingInitializer ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView ( ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , ModelFactory org.springframework.web.servlet.mvc.method.annotation.ModelFactory , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) throws java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.ModelFactory . updateModel ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer ) ; if ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) { return null ; } ModelMap org.springframework.web.servlet.mvc.method.annotation.ModelMap = org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = new ModelAndView ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getViewName ( ) , org.springframework.web.servlet.mvc.method.annotation.ModelMap , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getStatus ( ) ) ; if ( ! org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isViewReference ( ) ) { org.springframework.web.servlet.mvc.method.annotation.ModelAndView . setView ( ( View ) org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getView ( ) ) ; } if ( org.springframework.web.servlet.mvc.method.annotation.ModelMap instanceof RedirectAttributes ) { java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = ( ( RedirectAttributes ) org.springframework.web.servlet.mvc.method.annotation.ModelMap ) . getFlashAttributes ( ) ; HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest = org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . getNativeRequest ( HttpServletRequest .class ) ; RequestContextUtils . getOutputFlashMap ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) . putAll ( java.util.Map<java.lang.String,> ) ; } return org.springframework.web.servlet.mvc.method.annotation.ModelAndView ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return AnnotationUtils . findAnnotation ( java.lang.reflect.Method , InitBinder .class ) != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ( ( AnnotationUtils . findAnnotation ( java.lang.reflect.Method , RequestMapping .class ) == null ) && ( AnnotationUtils . findAnnotation ( java.lang.reflect.Method , ModelAttribute .class ) != null ) ) ; }  <METHOD_END>
