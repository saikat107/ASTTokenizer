<METHOD_START> @ Bean @ ConfigurationPropertiesBinding public org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.StringOrNumberToMigrationVersionConverter org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.StringOrNumberToMigrationVersionConverter ( ) { return new org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.StringOrNumberToMigrationVersionConverter ( ) ; }  <METHOD_END>
<METHOD_START> public void ( FlywayProperties org.springframework.boot.autoconfigure.flyway.FlywayProperties , ResourceLoader org.springframework.boot.autoconfigure.flyway.ResourceLoader , ObjectProvider < javax.sql.DataSource > org.springframework.boot.autoconfigure.flyway.ObjectProvider<javax.sql.DataSource> , @ FlywayDataSource ObjectProvider < javax.sql.DataSource > org.springframework.boot.autoconfigure.flyway.ObjectProvider<javax.sql.DataSource> , ObjectProvider < FlywayMigrationStrategy > org.springframework.boot.autoconfigure.flyway.ObjectProvider<org.springframework.boot.autoconfigure.flyway.FlywayMigrationStrategy> , ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.flyway.FlywayCallback> < FlywayCallback > > org.springframework.boot.autoconfigure.flyway.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.flyway.FlywayCallback>> ) { this . org.springframework.boot.autoconfigure.flyway.FlywayProperties = org.springframework.boot.autoconfigure.flyway.FlywayProperties ; this . org.springframework.boot.autoconfigure.flyway.ResourceLoader = org.springframework.boot.autoconfigure.flyway.ResourceLoader ; this . javax.sql.DataSource = org.springframework.boot.autoconfigure.flyway.ObjectProvider<javax.sql.DataSource> . getIfUnique ( ) ; this . javax.sql.DataSource = org.springframework.boot.autoconfigure.flyway.ObjectProvider<javax.sql.DataSource> . getIfAvailable ( ) ; this . org.springframework.boot.autoconfigure.flyway.FlywayMigrationStrategy = org.springframework.boot.autoconfigure.flyway.ObjectProvider<org.springframework.boot.autoconfigure.flyway.FlywayMigrationStrategy> . getIfAvailable ( ) ; this . java.util.List<org.springframework.boot.autoconfigure.flyway.FlywayCallback> = org.springframework.boot.autoconfigure.flyway.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.flyway.FlywayCallback>> . getIfAvailable ( ( ) Collections . emptyList ( ) ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { if ( this . org.springframework.boot.autoconfigure.flyway.FlywayProperties . isCheckLocation ( ) ) { Assert . state ( ! this . org.springframework.boot.autoconfigure.flyway.FlywayProperties . getLocations ( ) . isEmpty ( ) , STRING ) ; boolean boolean = boolean ( ) ; Assert . state ( boolean , STRING + this . org.springframework.boot.autoconfigure.flyway.FlywayProperties . getLocations ( ) + STRING ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { for ( java.lang.String java.lang.String : this . org.springframework.boot.autoconfigure.flyway.FlywayProperties . getLocations ( ) ) { if ( this . org.springframework.boot.autoconfigure.flyway.ResourceLoader . getResource ( java.lang.String ) . exists ( ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConfigurationProperties ( prefix = STRING ) public org.springframework.boot.autoconfigure.flyway.Flyway org.springframework.boot.autoconfigure.flyway.Flyway ( ) { Flyway org.springframework.boot.autoconfigure.flyway.Flyway = new org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.SpringBootFlyway ( ) ; if ( this . org.springframework.boot.autoconfigure.flyway.FlywayProperties . isCreateDataSource ( ) ) { org.springframework.boot.autoconfigure.flyway.Flyway . setDataSource ( this . org.springframework.boot.autoconfigure.flyway.FlywayProperties . getUrl ( ) , this . org.springframework.boot.autoconfigure.flyway.FlywayProperties . getUser ( ) , this . org.springframework.boot.autoconfigure.flyway.FlywayProperties . getPassword ( ) , this . org.springframework.boot.autoconfigure.flyway.FlywayProperties . getInitSqls ( ) . toArray ( new java.lang.String [ NUMBER ] ) ) ; } else if ( this . javax.sql.DataSource != null ) { org.springframework.boot.autoconfigure.flyway.Flyway . setDataSource ( this . javax.sql.DataSource ) ; } else { org.springframework.boot.autoconfigure.flyway.Flyway . setDataSource ( this . javax.sql.DataSource ) ; } org.springframework.boot.autoconfigure.flyway.Flyway . setCallbacks ( this . java.util.List<org.springframework.boot.autoconfigure.flyway.FlywayCallback> . toArray ( new FlywayCallback [ this . java.util.List<org.springframework.boot.autoconfigure.flyway.FlywayCallback> . size ( ) ] ) ) ; org.springframework.boot.autoconfigure.flyway.Flyway . setLocations ( this . org.springframework.boot.autoconfigure.flyway.FlywayProperties . getLocations ( ) . toArray ( new java.lang.String [ NUMBER ] ) ) ; return org.springframework.boot.autoconfigure.flyway.Flyway ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer ( Flyway org.springframework.boot.autoconfigure.flyway.Flyway ) { return new FlywayMigrationInitializer ( org.springframework.boot.autoconfigure.flyway.Flyway , this . org.springframework.boot.autoconfigure.flyway.FlywayMigrationStrategy ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( STRING ); }  <METHOD_END>
<METHOD_START> public void ( ) { super( STRING ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String ... java.lang.String[] ) { if ( boolean ( java.lang.String[] ) ) { try { java.lang.String java.lang.String = ( java.lang.String ) JdbcUtils . extractDatabaseMetaData ( getDataSource ( ) , STRING ) ; DatabaseDriver org.springframework.boot.autoconfigure.flyway.DatabaseDriver = DatabaseDriver . fromJdbcUrl ( java.lang.String ) ; if ( org.springframework.boot.autoconfigure.flyway.DatabaseDriver != DatabaseDriver . UNKNOWN ) { for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.String[] [ int ] = java.lang.String[] [ int ] . java.lang.String ( java.lang.String , org.springframework.boot.autoconfigure.flyway.DatabaseDriver . getId ( ) ) ; } } } catch ( MetaDataAccessException org.springframework.boot.autoconfigure.flyway.MetaDataAccessException ) { throw new java.lang.IllegalStateException ( org.springframework.boot.autoconfigure.flyway.MetaDataAccessException ) ; } } super. setLocations ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.boot.autoconfigure.flyway.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.boot.autoconfigure.flyway.ConvertiblePair> ( ) { return java.util.Set<org.springframework.boot.autoconfigure.flyway.ConvertiblePair> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.boot.autoconfigure.flyway.TypeDescriptor , TypeDescriptor org.springframework.boot.autoconfigure.flyway.TypeDescriptor ) { java.lang.String java.lang.String = ObjectUtils . nullSafeToString ( java.lang.Object ) ; return MigrationVersion . fromVersion ( java.lang.String ) ; }  <METHOD_END>
