<METHOD_START> protected void ( T T , java.lang.String java.lang.String , HandshakeInfo org.springframework.web.reactive.socket.adapter.HandshakeInfo , DataBufferFactory org.springframework.web.reactive.socket.adapter.DataBufferFactory ) { Assert . notNull ( T , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.web.reactive.socket.adapter.HandshakeInfo , STRING ) ; Assert . notNull ( org.springframework.web.reactive.socket.adapter.DataBufferFactory , STRING ) ; this . T = T ; this . java.lang.String = java.lang.String ; this . org.springframework.web.reactive.socket.adapter.HandshakeInfo = org.springframework.web.reactive.socket.adapter.HandshakeInfo ; this . org.springframework.web.reactive.socket.adapter.DataBufferFactory = org.springframework.web.reactive.socket.adapter.DataBufferFactory ; }  <METHOD_END>
<METHOD_START> protected T T ( ) { return this . T ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.HandshakeInfo org.springframework.web.reactive.socket.adapter.HandshakeInfo ( ) { return this . org.springframework.web.reactive.socket.adapter.HandshakeInfo ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.Flux<org.springframework.web.reactive.socket.adapter.WebSocketMessage> < WebSocketMessage > org.springframework.web.reactive.socket.adapter.Flux<org.springframework.web.reactive.socket.adapter.WebSocketMessage> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.adapter.Mono<java.lang.Void> ( Publisher < WebSocketMessage > org.springframework.web.reactive.socket.adapter.Publisher<org.springframework.web.reactive.socket.adapter.WebSocketMessage> ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.DataBufferFactory org.springframework.web.reactive.socket.adapter.DataBufferFactory ( ) { return this . org.springframework.web.reactive.socket.adapter.DataBufferFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage ( java.lang.String java.lang.String ) { byte [] byte[] = java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; DataBuffer org.springframework.web.reactive.socket.adapter.DataBuffer = org.springframework.web.reactive.socket.adapter.DataBufferFactory ( ) . wrap ( byte[] ) ; return new WebSocketMessage ( WebSocketMessage . Type . TEXT , org.springframework.web.reactive.socket.adapter.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage ( java.util.function.Function<org.springframework.web.reactive.socket.adapter.DataBufferFactory,org.springframework.web.reactive.socket.adapter.DataBuffer> < DataBufferFactory , DataBuffer > java.util.function.Function<org.springframework.web.reactive.socket.adapter.DataBufferFactory,org.springframework.web.reactive.socket.adapter.DataBuffer> ) { DataBuffer org.springframework.web.reactive.socket.adapter.DataBuffer = java.util.function.Function<org.springframework.web.reactive.socket.adapter.DataBufferFactory,org.springframework.web.reactive.socket.adapter.DataBuffer> . apply ( org.springframework.web.reactive.socket.adapter.DataBufferFactory ( ) ) ; return new WebSocketMessage ( WebSocketMessage . Type . BINARY , org.springframework.web.reactive.socket.adapter.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage ( java.util.function.Function<org.springframework.web.reactive.socket.adapter.DataBufferFactory,org.springframework.web.reactive.socket.adapter.DataBuffer> < DataBufferFactory , DataBuffer > java.util.function.Function<org.springframework.web.reactive.socket.adapter.DataBufferFactory,org.springframework.web.reactive.socket.adapter.DataBuffer> ) { DataBuffer org.springframework.web.reactive.socket.adapter.DataBuffer = java.util.function.Function<org.springframework.web.reactive.socket.adapter.DataBufferFactory,org.springframework.web.reactive.socket.adapter.DataBuffer> . apply ( org.springframework.web.reactive.socket.adapter.DataBufferFactory ( ) ) ; return new WebSocketMessage ( WebSocketMessage . Type . PING , org.springframework.web.reactive.socket.adapter.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage ( java.util.function.Function<org.springframework.web.reactive.socket.adapter.DataBufferFactory,org.springframework.web.reactive.socket.adapter.DataBuffer> < DataBufferFactory , DataBuffer > java.util.function.Function<org.springframework.web.reactive.socket.adapter.DataBufferFactory,org.springframework.web.reactive.socket.adapter.DataBuffer> ) { DataBuffer org.springframework.web.reactive.socket.adapter.DataBuffer = java.util.function.Function<org.springframework.web.reactive.socket.adapter.DataBufferFactory,org.springframework.web.reactive.socket.adapter.DataBuffer> . apply ( org.springframework.web.reactive.socket.adapter.DataBufferFactory ( ) ) ; return new WebSocketMessage ( WebSocketMessage . Type . PONG , org.springframework.web.reactive.socket.adapter.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.web.reactive.socket.adapter.AbstractWebSocketSession> ( ) . java.lang.String ( ) + STRING + java.lang.String ( ) + STRING + org.springframework.web.reactive.socket.adapter.HandshakeInfo ( ) . getUri ( ) + STRING ; }  <METHOD_END>
