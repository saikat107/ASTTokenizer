<METHOD_START> protected void void ( final Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> , final java.lang.String ... java.lang.String[] ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCacheListeners ( ) ) ; assertEquals ( java.lang.String[] . int , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCacheListeners ( ) . length ) ; for ( CacheListener org.springframework.data.gemfire.config.xml.CacheListener : org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCacheListeners ( ) ) { assertTrue ( org.springframework.data.gemfire.config.xml.CacheListener instanceof org.springframework.data.gemfire.config.xml.TemplateClientRegionNamespaceTest.TestCacheListener ) ; assertTrue ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) . boolean ( org.springframework.data.gemfire.config.xml.CacheListener . toString ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( final Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> , final java.lang.String java.lang.String ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCacheLoader ( ) instanceof org.springframework.data.gemfire.config.xml.TemplateClientRegionNamespaceTest.TestCacheLoader ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCacheLoader ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> , final java.lang.String java.lang.String ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCacheWriter ( ) instanceof org.springframework.data.gemfire.config.xml.TemplateClientRegionNamespaceTest.TestCacheWriter ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCacheWriter ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final EvictionAttributes org.springframework.data.gemfire.config.xml.EvictionAttributes ) { assumeNotNull ( org.springframework.data.gemfire.config.xml.EvictionAttributes ) ; void ( org.springframework.data.gemfire.config.xml.EvictionAttributes , EvictionAction . NONE , EvictionAlgorithm . NONE , NUMBER , null ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final EvictionAttributes org.springframework.data.gemfire.config.xml.EvictionAttributes , final EvictionAction org.springframework.data.gemfire.config.xml.EvictionAction , final EvictionAlgorithm org.springframework.data.gemfire.config.xml.EvictionAlgorithm , final int int , final ObjectSizer org.springframework.data.gemfire.config.xml.ObjectSizer ) { assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.EvictionAttributes ) ; assertEquals ( org.springframework.data.gemfire.config.xml.EvictionAction , org.springframework.data.gemfire.config.xml.EvictionAttributes . getAction ( ) ) ; assertEquals ( org.springframework.data.gemfire.config.xml.EvictionAlgorithm , org.springframework.data.gemfire.config.xml.EvictionAttributes . getAlgorithm ( ) ) ; assertEquals ( int , org.springframework.data.gemfire.config.xml.EvictionAttributes . getMaximum ( ) ) ; assertEquals ( org.springframework.data.gemfire.config.xml.ObjectSizer , org.springframework.data.gemfire.config.xml.EvictionAttributes . getObjectSizer ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final ExpirationAttributes org.springframework.data.gemfire.config.xml.ExpirationAttributes ) { assumeNotNull ( org.springframework.data.gemfire.config.xml.ExpirationAttributes ) ; assertEquals ( ExpirationAction . INVALIDATE , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getAction ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final ExpirationAttributes org.springframework.data.gemfire.config.xml.ExpirationAttributes , final ExpirationAction org.springframework.data.gemfire.config.xml.ExpirationAction , final int int ) { assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.ExpirationAttributes ) ; assertEquals ( org.springframework.data.gemfire.config.xml.ExpirationAction , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getAction ( ) ) ; assertEquals ( int , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final Region org.springframework.data.gemfire.config.xml.Region ) { assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.Region ) ; assertNotNull ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.config.xml.Region . getFullPath ( ) ) , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getCompressor ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getCustomEntryIdleTimeout ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getCustomEntryTimeToLive ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getDiskStoreName ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getMulticastEnabled ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getRegionTimeToLive ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getRegionIdleTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> protected static void void ( final java.lang.Object [] java.lang.Object[] ) { assertTrue ( ( java.lang.Object[] == null || java.lang.Object[] . int == NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> protected static void void ( final java.lang.Iterable<?> < ? > java.lang.Iterable<?> ) { assertTrue ( java.lang.Iterable<> == null || ! java.lang.Iterable<> . java.util.Iterator<> ( ) . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> protected static void void ( final java.lang.String java.lang.String ) { assertFalse ( StringUtils . hasText ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected static void void ( final Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> , final java.lang.String java.lang.String ) { void ( org.springframework.data.gemfire.config.xml.Region<,> , java.lang.String , Region . SEPARATOR + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected static void void ( final Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> , final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { assertNotNull ( java.lang.String . java.lang.String ( STRING , java.lang.String ) , org.springframework.data.gemfire.config.xml.Region<,> ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.config.xml.Region<,> . getName ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.config.xml.Region<,> . getFullPath ( ) ) ; assertNotNull ( java.lang.String . java.lang.String ( STRING , java.lang.String ) , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> , STRING ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> . getAttributes ( ) . getCloningEnabled ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> . getAttributes ( ) . getConcurrencyChecksEnabled ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> . getAttributes ( ) . getConcurrencyLevel ( ) ) ; assertEquals ( DataPolicy . NORMAL , org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> . getAttributes ( ) . getDataPolicy ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> . getAttributes ( ) . isDiskSynchronous ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> . getAttributes ( ) . getEvictionAttributes ( ) , EvictionAction . OVERFLOW_TO_DISK , EvictionAlgorithm . LRU_ENTRY , NUMBER , null ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> . getAttributes ( ) . getInitialCapacity ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> . getAttributes ( ) . getKeyConstraint ( ) ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> . getAttributes ( ) . getLoadFactor ( ) ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> . getAttributes ( ) . getPoolName ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> . getAttributes ( ) . getStatisticsEnabled ( ) ) ; assertEquals ( java.lang.Object .class , org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> . getAttributes ( ) . getValueConstraint ( ) ) ; org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.Object> . getInterestList ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( final LoaderHelper org.springframework.data.gemfire.config.xml.LoaderHelper ) throws org.springframework.data.gemfire.config.xml.CacheLoaderException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
