<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.ensemble.StateMachine<S,E> , StateMachineContext < S , E > org.springframework.statemachine.ensemble.StateMachineContext<S,E> ) { for ( java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> < EnsembleListener < S , E > > java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> . hasNext ( ) ;) { EnsembleListener < S , E > org.springframework.statemachine.ensemble.EnsembleListener<S,E> = java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> . next ( ) ; org.springframework.statemachine.ensemble.EnsembleListener<S,E> . stateMachineJoined ( org.springframework.statemachine.ensemble.StateMachine<S,E> , org.springframework.statemachine.ensemble.StateMachineContext<S,E> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.ensemble.StateMachine<S,E> , StateMachineContext < S , E > org.springframework.statemachine.ensemble.StateMachineContext<S,E> ) { for ( java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> < EnsembleListener < S , E > > java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> . hasNext ( ) ;) { EnsembleListener < S , E > org.springframework.statemachine.ensemble.EnsembleListener<S,E> = java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> . next ( ) ; org.springframework.statemachine.ensemble.EnsembleListener<S,E> . stateMachineLeft ( org.springframework.statemachine.ensemble.StateMachine<S,E> , org.springframework.statemachine.ensemble.StateMachineContext<S,E> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineContext < S , E > org.springframework.statemachine.ensemble.StateMachineContext<S,E> ) { for ( java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> < EnsembleListener < S , E > > java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> . hasNext ( ) ;) { EnsembleListener < S , E > org.springframework.statemachine.ensemble.EnsembleListener<S,E> = java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> . next ( ) ; org.springframework.statemachine.ensemble.EnsembleListener<S,E> . stateChanged ( org.springframework.statemachine.ensemble.StateMachineContext<S,E> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineEnsembleException org.springframework.statemachine.ensemble.StateMachineEnsembleException ) { for ( java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> < EnsembleListener < S , E > > java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> . hasNext ( ) ;) { EnsembleListener < S , E > org.springframework.statemachine.ensemble.EnsembleListener<S,E> = java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> . next ( ) ; org.springframework.statemachine.ensemble.EnsembleListener<S,E> . ensembleError ( org.springframework.statemachine.ensemble.StateMachineEnsembleException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.ensemble.StateMachine<S,E> ) { for ( java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> < EnsembleListener < S , E > > java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> . hasNext ( ) ;) { EnsembleListener < S , E > org.springframework.statemachine.ensemble.EnsembleListener<S,E> = java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> . next ( ) ; org.springframework.statemachine.ensemble.EnsembleListener<S,E> . ensembleLeaderGranted ( org.springframework.statemachine.ensemble.StateMachine<S,E> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.ensemble.StateMachine<S,E> ) { for ( java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> < EnsembleListener < S , E > > java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> . hasNext ( ) ;) { EnsembleListener < S , E > org.springframework.statemachine.ensemble.EnsembleListener<S,E> = java.util.Iterator<org.springframework.statemachine.ensemble.EnsembleListener<S,E>> . next ( ) ; org.springframework.statemachine.ensemble.EnsembleListener<S,E> . ensembleLeaderRevoked ( org.springframework.statemachine.ensemble.StateMachine<S,E> ) ; } }  <METHOD_END>
