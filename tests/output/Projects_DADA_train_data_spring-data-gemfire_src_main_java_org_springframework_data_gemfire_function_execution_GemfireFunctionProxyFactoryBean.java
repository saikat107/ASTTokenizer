<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , GemfireFunctionOperations org.springframework.data.gemfire.function.execution.GemfireFunctionOperations ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . isTrue ( java.lang.Class<> . boolean ( ) , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; this . org.springframework.data.gemfire.function.execution.GemfireFunctionOperations = org.springframework.data.gemfire.function.execution.GemfireFunctionOperations ; this . org.springframework.data.gemfire.function.execution.FunctionExecutionMethodMetadata<org.springframework.data.gemfire.function.execution.MethodMetadata> = new DefaultFunctionExecutionMethodMetadata ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.function.execution.GemfireFunctionOperations org.springframework.data.gemfire.function.execution.GemfireFunctionOperations ( ) { return org.springframework.data.gemfire.function.execution.GemfireFunctionOperations ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.data.gemfire.function.execution.MethodInvocation ) throws java.lang.Throwable { if ( AopUtils . isToStringMethod ( org.springframework.data.gemfire.function.execution.MethodInvocation . getMethod ( ) ) ) { return STRING + this . java.lang.Class<> + STRING ; } if ( org.springframework.data.gemfire.function.execution.Log . isDebugEnabled ( ) ) { org.springframework.data.gemfire.function.execution.Log . debug ( STRING + org.springframework.data.gemfire.function.execution.MethodInvocation . getMethod ( ) . getName ( ) ) ; } return java.lang.Object ( org.springframework.data.gemfire.function.execution.MethodInvocation . getMethod ( ) , org.springframework.data.gemfire.function.execution.MethodInvocation . getArguments ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) { return this . org.springframework.data.gemfire.function.execution.GemfireFunctionOperations . executeAndExtract ( org.springframework.data.gemfire.function.execution.FunctionExecutionMethodMetadata<org.springframework.data.gemfire.function.execution.MethodMetadata> . getMethodMetadata ( java.lang.reflect.Method ) . getFunctionId ( ) , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { if ( java.lang.Object == null ) { void ( ) ; Assert . notNull ( java.lang.Object , STRING ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( ! boolean ) { ProxyFactory org.springframework.data.gemfire.function.execution.ProxyFactory = new ProxyFactory ( java.lang.Class<> , this ) ; java.lang.Object = org.springframework.data.gemfire.function.execution.ProxyFactory . getProxy ( java.lang.ClassLoader ) ; boolean = true ; } }  <METHOD_END>
