<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.data.web.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > ( ) ; org.springframework.data.web.config.SpringDataWebConfiguration ( STRING ) . extendMessageConverters ( java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> ) ; assertThat ( java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> , not ( hasItem ( org.springframework.data.web.config.Matcher<org.springframework.data.web.config.ProjectingJackson2HttpMessageConverter> ( ProjectingJackson2HttpMessageConverter .class ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.data.web.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > ( ) ; org.springframework.data.web.config.SpringDataWebConfiguration ( STRING ) . extendMessageConverters ( java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> ) ; assertThat ( java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> , not ( hasItem ( org.springframework.data.web.config.Matcher<org.springframework.data.web.config.ProjectingJackson2HttpMessageConverter> ( ProjectingJackson2HttpMessageConverter .class ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.data.web.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > ( ) ; org.springframework.data.web.config.SpringDataWebConfiguration ( STRING ) . extendMessageConverters ( java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> ) ; assertThat ( java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> , not ( hasItem ( org.springframework.data.web.config.Matcher<org.springframework.data.web.config.XmlBeamHttpMessageConverter> ( XmlBeamHttpMessageConverter .class ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.data.web.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > ( ) ; org.springframework.data.web.config.SpringDataWebConfiguration ( STRING ) . extendMessageConverters ( java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> ) ; assertThat ( java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> , hasItem ( org.springframework.data.web.config.Matcher<org.springframework.data.web.config.XmlBeamHttpMessageConverter> ( XmlBeamHttpMessageConverter .class ) ) ) ; assertThat ( java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> , hasItem ( org.springframework.data.web.config.Matcher<org.springframework.data.web.config.ProjectingJackson2HttpMessageConverter> ( ProjectingJackson2HttpMessageConverter .class ) ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.web.config.SpringDataWebConfiguration org.springframework.data.web.config.SpringDataWebConfiguration ( java.lang.String java.lang.String ) { AnnotationConfigApplicationContext org.springframework.data.web.config.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( SpringDataWebConfiguration .class ) ; org.springframework.data.web.config.AnnotationConfigApplicationContext . setClassLoader ( java.lang.ClassLoader ( java.lang.String ) ) ; try { return org.springframework.data.web.config.AnnotationConfigApplicationContext . getBean ( SpringDataWebConfiguration .class ) ; } finally { org.springframework.data.web.config.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> private static < T > org.springframework.data.web.config.Matcher<T> < T > org.springframework.data.web.config.Matcher<T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return hasProperty ( STRING , hasProperty ( STRING , equalTo ( java.lang.Class<T> . java.lang.String ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.ClassLoader java.lang.ClassLoader ( final java.lang.String java.lang.String ) { return new ShadowingClassLoader ( java.net.URLClassLoader . java.lang.ClassLoader ( ) ) { @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { if ( java.lang.String . boolean ( java.lang.String ) ) { throw new java.lang.ClassNotFoundException ( ) ; } return super. loadClass ( java.lang.String ) ; } @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { if ( java.lang.String . boolean ( java.lang.String ) ) { throw new java.lang.ClassNotFoundException ( ) ; } return super. findClass ( java.lang.String ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { if ( java.lang.String . boolean ( java.lang.String ) ) { throw new java.lang.ClassNotFoundException ( ) ; } return super. loadClass ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { if ( java.lang.String . boolean ( java.lang.String ) ) { throw new java.lang.ClassNotFoundException ( ) ; } return super. findClass ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.web.config.ConversionService org.springframework.data.web.config.ConversionService ( ) org.springframework.data.web.config.BeansException { return null ; }  <METHOD_END>
