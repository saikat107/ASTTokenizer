<METHOD_START> @ Test public void void ( ) { java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; assertNull ( DataAccessUtils . uniqueResult ( java.util.Collection<java.lang.String> ) ) ; try { DataAccessUtils . requiredUniqueResult ( java.util.Collection<java.lang.String> ) ; fail ( STRING ) ; } catch ( IncorrectResultSizeDataAccessException org.springframework.dao.support.IncorrectResultSizeDataAccessException ) { assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getExpectedSize ( ) ) ; assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getActualSize ( ) ) ; } try { DataAccessUtils . objectResult ( java.util.Collection<java.lang.String> , java.lang.String .class ) ; fail ( STRING ) ; } catch ( IncorrectResultSizeDataAccessException org.springframework.dao.support.IncorrectResultSizeDataAccessException ) { assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getExpectedSize ( ) ) ; assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getActualSize ( ) ) ; } try { DataAccessUtils . intResult ( java.util.Collection<java.lang.String> ) ; fail ( STRING ) ; } catch ( IncorrectResultSizeDataAccessException org.springframework.dao.support.IncorrectResultSizeDataAccessException ) { assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getExpectedSize ( ) ) ; assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getActualSize ( ) ) ; } try { DataAccessUtils . longResult ( java.util.Collection<java.lang.String> ) ; fail ( STRING ) ; } catch ( IncorrectResultSizeDataAccessException org.springframework.dao.support.IncorrectResultSizeDataAccessException ) { assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getExpectedSize ( ) ) ; assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getActualSize ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( NUMBER ) ; java.util.Collection<java.lang.String> . boolean ( STRING ) ; java.util.Collection<java.lang.String> . boolean ( STRING ) ; try { DataAccessUtils . uniqueResult ( java.util.Collection<java.lang.String> ) ; fail ( STRING ) ; } catch ( IncorrectResultSizeDataAccessException org.springframework.dao.support.IncorrectResultSizeDataAccessException ) { assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getExpectedSize ( ) ) ; assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getActualSize ( ) ) ; } try { DataAccessUtils . requiredUniqueResult ( java.util.Collection<java.lang.String> ) ; fail ( STRING ) ; } catch ( IncorrectResultSizeDataAccessException org.springframework.dao.support.IncorrectResultSizeDataAccessException ) { assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getExpectedSize ( ) ) ; assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getActualSize ( ) ) ; } try { DataAccessUtils . objectResult ( java.util.Collection<java.lang.String> , java.lang.String .class ) ; fail ( STRING ) ; } catch ( IncorrectResultSizeDataAccessException org.springframework.dao.support.IncorrectResultSizeDataAccessException ) { assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getExpectedSize ( ) ) ; assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getActualSize ( ) ) ; } try { DataAccessUtils . intResult ( java.util.Collection<java.lang.String> ) ; fail ( STRING ) ; } catch ( IncorrectResultSizeDataAccessException org.springframework.dao.support.IncorrectResultSizeDataAccessException ) { assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getExpectedSize ( ) ) ; assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getActualSize ( ) ) ; } try { DataAccessUtils . longResult ( java.util.Collection<java.lang.String> ) ; fail ( STRING ) ; } catch ( IncorrectResultSizeDataAccessException org.springframework.dao.support.IncorrectResultSizeDataAccessException ) { assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getExpectedSize ( ) ) ; assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getActualSize ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> = new java.util.HashSet<java.lang.Integer> <> ( NUMBER ) ; java.util.Collection<java.lang.Integer> . boolean ( NUMBER ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , DataAccessUtils . uniqueResult ( java.util.Collection<java.lang.Integer> ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , DataAccessUtils . requiredUniqueResult ( java.util.Collection<java.lang.Integer> ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , DataAccessUtils . objectResult ( java.util.Collection<java.lang.Integer> , java.lang.Integer .class ) ) ; assertEquals ( STRING , DataAccessUtils . objectResult ( java.util.Collection<java.lang.Integer> , java.lang.String .class ) ) ; assertEquals ( NUMBER , DataAccessUtils . intResult ( java.util.Collection<java.lang.Integer> ) ) ; assertEquals ( NUMBER , DataAccessUtils . longResult ( java.util.Collection<java.lang.Integer> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = NUMBER ; java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( NUMBER ) ; java.util.Collection<java.lang.Integer> . boolean ( java.lang.Integer ) ; java.util.Collection<java.lang.Integer> . boolean ( java.lang.Integer ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , DataAccessUtils . uniqueResult ( java.util.Collection<java.lang.Integer> ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , DataAccessUtils . requiredUniqueResult ( java.util.Collection<java.lang.Integer> ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , DataAccessUtils . objectResult ( java.util.Collection<java.lang.Integer> , java.lang.Integer .class ) ) ; assertEquals ( STRING , DataAccessUtils . objectResult ( java.util.Collection<java.lang.Integer> , java.lang.String .class ) ) ; assertEquals ( NUMBER , DataAccessUtils . intResult ( java.util.Collection<java.lang.Integer> ) ) ; assertEquals ( NUMBER , DataAccessUtils . longResult ( java.util.Collection<java.lang.Integer> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( NUMBER ) ; java.util.Collection<java.lang.Integer> . boolean ( new java.lang.Integer ( NUMBER ) ) ; java.util.Collection<java.lang.Integer> . boolean ( new java.lang.Integer ( NUMBER ) ) ; try { DataAccessUtils . uniqueResult ( java.util.Collection<java.lang.Integer> ) ; fail ( STRING ) ; } catch ( IncorrectResultSizeDataAccessException org.springframework.dao.support.IncorrectResultSizeDataAccessException ) { assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getExpectedSize ( ) ) ; assertEquals ( NUMBER , org.springframework.dao.support.IncorrectResultSizeDataAccessException . getActualSize ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<java.lang.Long> < java.lang.Long > java.util.Collection<java.lang.Long> = new java.util.HashSet<java.lang.Long> <> ( NUMBER ) ; java.util.Collection<java.lang.Long> . boolean ( NUMBER ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , DataAccessUtils . uniqueResult ( java.util.Collection<java.lang.Long> ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , DataAccessUtils . requiredUniqueResult ( java.util.Collection<java.lang.Long> ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , DataAccessUtils . objectResult ( java.util.Collection<java.lang.Long> , java.lang.Long .class ) ) ; assertEquals ( STRING , DataAccessUtils . objectResult ( java.util.Collection<java.lang.Long> , java.lang.String .class ) ) ; assertEquals ( NUMBER , DataAccessUtils . intResult ( java.util.Collection<java.lang.Long> ) ) ; assertEquals ( NUMBER , DataAccessUtils . longResult ( java.util.Collection<java.lang.Long> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( NUMBER ) ; java.util.Collection<java.lang.String> . boolean ( STRING ) ; assertEquals ( STRING , DataAccessUtils . uniqueResult ( java.util.Collection<java.lang.String> ) ) ; assertEquals ( STRING , DataAccessUtils . requiredUniqueResult ( java.util.Collection<java.lang.String> ) ) ; assertEquals ( STRING , DataAccessUtils . objectResult ( java.util.Collection<java.lang.String> , java.lang.String .class ) ) ; try { DataAccessUtils . intResult ( java.util.Collection<java.lang.String> ) ; fail ( STRING ) ; } catch ( TypeMismatchDataAccessException org.springframework.dao.support.TypeMismatchDataAccessException ) { } try { DataAccessUtils . longResult ( java.util.Collection<java.lang.String> ) ; fail ( STRING ) ; } catch ( TypeMismatchDataAccessException org.springframework.dao.support.TypeMismatchDataAccessException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Date java.util.Date = new java.util.Date ( ) ; java.util.Collection<java.util.Date> < java.util.Date > java.util.Collection<java.util.Date> = new java.util.HashSet<java.util.Date> <> ( NUMBER ) ; java.util.Collection<java.util.Date> . boolean ( java.util.Date ) ; assertEquals ( java.util.Date , DataAccessUtils . uniqueResult ( java.util.Collection<java.util.Date> ) ) ; assertEquals ( java.util.Date , DataAccessUtils . requiredUniqueResult ( java.util.Collection<java.util.Date> ) ) ; assertEquals ( java.util.Date , DataAccessUtils . objectResult ( java.util.Collection<java.util.Date> , java.util.Date .class ) ) ; assertEquals ( java.util.Date . java.lang.String ( ) , DataAccessUtils . objectResult ( java.util.Collection<java.util.Date> , java.lang.String .class ) ) ; try { DataAccessUtils . intResult ( java.util.Collection<java.util.Date> ) ; fail ( STRING ) ; } catch ( TypeMismatchDataAccessException org.springframework.dao.support.TypeMismatchDataAccessException ) { } try { DataAccessUtils . longResult ( java.util.Collection<java.util.Date> ) ; fail ( STRING ) ; } catch ( TypeMismatchDataAccessException org.springframework.dao.support.TypeMismatchDataAccessException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.dao.support.DataAccessUtilsTests.MapPersistenceExceptionTranslator org.springframework.dao.support.DataAccessUtilsTests.MapPersistenceExceptionTranslator = new org.springframework.dao.support.DataAccessUtilsTests.MapPersistenceExceptionTranslator ( ) ; java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( ) ; assertSame ( java.lang.RuntimeException , DataAccessUtils . translateIfNecessary ( java.lang.RuntimeException , org.springframework.dao.support.DataAccessUtilsTests.MapPersistenceExceptionTranslator ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.dao.support.DataAccessUtilsTests.MapPersistenceExceptionTranslator org.springframework.dao.support.DataAccessUtilsTests.MapPersistenceExceptionTranslator = new org.springframework.dao.support.DataAccessUtilsTests.MapPersistenceExceptionTranslator ( ) ; java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( STRING ) ; InvalidDataAccessApiUsageException org.springframework.dao.support.InvalidDataAccessApiUsageException = new InvalidDataAccessApiUsageException ( STRING ) ; org.springframework.dao.support.DataAccessUtilsTests.MapPersistenceExceptionTranslator . void ( java.lang.RuntimeException , org.springframework.dao.support.InvalidDataAccessApiUsageException ) ; assertSame ( org.springframework.dao.support.InvalidDataAccessApiUsageException , DataAccessUtils . translateIfNecessary ( java.lang.RuntimeException , org.springframework.dao.support.DataAccessUtilsTests.MapPersistenceExceptionTranslator ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.RuntimeException java.lang.RuntimeException , java.lang.RuntimeException java.lang.RuntimeException ) { this . java.util.Map<java.lang.RuntimeException,java.lang.RuntimeException> . java.lang.RuntimeException ( java.lang.RuntimeException , java.lang.RuntimeException ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.dao.support.DataAccessException org.springframework.dao.support.DataAccessException ( java.lang.RuntimeException java.lang.RuntimeException ) { return ( DataAccessException ) java.util.Map<java.lang.RuntimeException,java.lang.RuntimeException> . java.lang.RuntimeException ( java.lang.RuntimeException ) ; }  <METHOD_END>
