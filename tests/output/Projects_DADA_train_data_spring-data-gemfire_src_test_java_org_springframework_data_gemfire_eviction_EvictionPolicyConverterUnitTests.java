<METHOD_START> @ After public void void ( ) { org.springframework.data.gemfire.eviction.EvictionPolicyConverter . setValue ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.eviction.EvictionPolicyConverter . convert ( STRING ) ) . isEqualTo ( EvictionPolicyType . ENTRY_COUNT ) ; assertThat ( org.springframework.data.gemfire.eviction.EvictionPolicyConverter . convert ( STRING ) ) . isEqualTo ( EvictionPolicyType . HEAP_PERCENTAGE ) ; assertThat ( org.springframework.data.gemfire.eviction.EvictionPolicyConverter . convert ( STRING ) ) . isEqualTo ( EvictionPolicyType . MEMORY_SIZE ) ; assertThat ( org.springframework.data.gemfire.eviction.EvictionPolicyConverter . convert ( STRING ) ) . isEqualTo ( EvictionPolicyType . NONE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.eviction.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.eviction.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.eviction.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.eviction.EvictionPolicyConverter . convert ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.eviction.EvictionPolicyConverter . getValue ( ) ) . isNull ( ) ; org.springframework.data.gemfire.eviction.EvictionPolicyConverter . setAsText ( STRING ) ; assertThat ( org.springframework.data.gemfire.eviction.EvictionPolicyConverter . getValue ( ) ) . isEqualTo ( EvictionPolicyType . HEAP_PERCENTAGE ) ; org.springframework.data.gemfire.eviction.EvictionPolicyConverter . setAsText ( STRING ) ; assertThat ( org.springframework.data.gemfire.eviction.EvictionPolicyConverter . getValue ( ) ) . isEqualTo ( EvictionPolicyType . NONE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.gemfire.eviction.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.eviction.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.eviction.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.eviction.EvictionPolicyConverter . setAsText ( STRING ) ; } finally { assertThat ( org.springframework.data.gemfire.eviction.EvictionPolicyConverter . getValue ( ) ) . isNull ( ) ; } }  <METHOD_END>
