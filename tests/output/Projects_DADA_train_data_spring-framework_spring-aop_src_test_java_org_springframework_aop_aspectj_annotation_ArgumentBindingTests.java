<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { TestBean org.springframework.aop.aspectj.annotation.TestBean = new TestBean ( ) ; AspectJProxyFactory org.springframework.aop.aspectj.annotation.AspectJProxyFactory = new AspectJProxyFactory ( org.springframework.aop.aspectj.annotation.TestBean ) ; org.springframework.aop.aspectj.annotation.AspectJProxyFactory . addAspect ( org.springframework.aop.aspectj.annotation.NamedPointcutWithArgs .class ) ; ITestBean org.springframework.aop.aspectj.annotation.ITestBean = org.springframework.aop.aspectj.annotation.AspectJProxyFactory . getProxy ( ) ; org.springframework.aop.aspectj.annotation.ITestBean . setName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { org.springframework.aop.aspectj.annotation.ArgumentBindingTests.TransactionalBean org.springframework.aop.aspectj.annotation.ArgumentBindingTests.TransactionalBean = new org.springframework.aop.aspectj.annotation.ArgumentBindingTests.TransactionalBean ( ) ; AspectJProxyFactory org.springframework.aop.aspectj.annotation.AspectJProxyFactory = new AspectJProxyFactory ( org.springframework.aop.aspectj.annotation.ArgumentBindingTests.TransactionalBean ) ; org.springframework.aop.aspectj.annotation.AspectJProxyFactory . addAspect ( org.springframework.aop.aspectj.annotation.PointcutWithAnnotationArgument .class ) ; org.springframework.aop.aspectj.annotation.ArgumentBindingTests.ITransactionalBean org.springframework.aop.aspectj.annotation.ArgumentBindingTests.ITransactionalBean = org.springframework.aop.aspectj.annotation.AspectJProxyFactory . getProxy ( ) ; org.springframework.aop.aspectj.annotation.ArgumentBindingTests.ITransactionalBean . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AspectJAdviceParameterNameDiscoverer org.springframework.aop.aspectj.annotation.AspectJAdviceParameterNameDiscoverer = new AspectJAdviceParameterNameDiscoverer ( STRING ) ; org.springframework.aop.aspectj.annotation.AspectJAdviceParameterNameDiscoverer . setRaiseExceptions ( true ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.aop.aspectj.annotation.ArgumentBindingTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; java.lang.String [] java.lang.String[] = org.springframework.aop.aspectj.annotation.AspectJAdviceParameterNameDiscoverer . getParameterNames ( java.lang.reflect.Method ) ; assertEquals ( STRING , NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) {	}  <METHOD_END>
<METHOD_START> @ org.springframework.aop.aspectj.annotation.Transactional void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override @ org.springframework.aop.aspectj.annotation.Transactional public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Around ( value = STRING ) public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.aop.aspectj.annotation.ProceedingJoinPoint , org.springframework.aop.aspectj.annotation.Transactional org.springframework.aop.aspectj.annotation.Transactional ) throws java.lang.Throwable { java.lang.System . java.io.PrintStream . void ( STRING + org.springframework.aop.aspectj.annotation.Transactional ) ; throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
<METHOD_START> @ Pointcut ( STRING ) public void void ( java.lang.String java.lang.String ) {}  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.aop.aspectj.annotation.ProceedingJoinPoint , java.lang.String java.lang.String ) throws java.lang.Throwable { java.lang.System . java.io.PrintStream . void ( STRING + java.lang.String + STRING + org.springframework.aop.aspectj.annotation.ProceedingJoinPoint + STRING ) ; throw new java.lang.IllegalArgumentException ( java.lang.String ) ; }  <METHOD_END>
