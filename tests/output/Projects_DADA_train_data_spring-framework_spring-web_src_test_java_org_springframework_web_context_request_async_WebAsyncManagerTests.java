<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.context.request.async.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.web.context.request.async.WebAsyncManager = WebAsyncUtils . getAsyncManager ( org.springframework.web.context.request.async.MockHttpServletRequest ) ; this . org.springframework.web.context.request.async.WebAsyncManager . setTaskExecutor ( new org.springframework.web.context.request.async.WebAsyncManagerTests.SyncTaskExecutor ( ) ) ; this . org.springframework.web.context.request.async.AsyncWebRequest = mock ( AsyncWebRequest .class ) ; this . org.springframework.web.context.request.async.WebAsyncManager . setAsyncWebRequest ( this . org.springframework.web.context.request.async.AsyncWebRequest ) ; verify ( this . org.springframework.web.context.request.async.AsyncWebRequest ) . addCompletionHandler ( ( java.lang.Runnable ) notNull ( ) ) ; reset ( this . org.springframework.web.context.request.async.AsyncWebRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebAsyncManager org.springframework.web.context.request.async.WebAsyncManager = WebAsyncUtils . getAsyncManager ( new MockHttpServletRequest ( ) ) ; try { org.springframework.web.context.request.async.WebAsyncManager . startCallableProcessing ( new org.springframework.web.context.request.async.WebAsyncManagerTests.StubCallable ( NUMBER ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( java.lang.IllegalStateException . java.lang.String ( ) , STRING ) ; } try { org.springframework.web.context.request.async.WebAsyncManager . startDeferredResultProcessing ( new DeferredResult < java.lang.String > ( ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( java.lang.IllegalStateException . java.lang.String ( ) , STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( this . org.springframework.web.context.request.async.AsyncWebRequest . isAsyncStarted ( ) ) . willReturn ( false ) ; assertFalse ( this . org.springframework.web.context.request.async.WebAsyncManager . isConcurrentHandlingStarted ( ) ) ; reset ( this . org.springframework.web.context.request.async.AsyncWebRequest ) ; given ( this . org.springframework.web.context.request.async.AsyncWebRequest . isAsyncStarted ( ) ) . willReturn ( true ) ; assertTrue ( this . org.springframework.web.context.request.async.WebAsyncManager . isConcurrentHandlingStarted ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { this . org.springframework.web.context.request.async.AsyncWebRequest . startAsync ( ) ; this . org.springframework.web.context.request.async.WebAsyncManager . setAsyncWebRequest ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = NUMBER ; java.util.concurrent.Callable<java.lang.Object> < java.lang.Object > java.util.concurrent.Callable<java.lang.Object> = new org.springframework.web.context.request.async.WebAsyncManagerTests.StubCallable ( int ) ; CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor = mock ( CallableProcessingInterceptor .class ) ; void ( ) ; this . org.springframework.web.context.request.async.WebAsyncManager . registerCallableInterceptor ( STRING , org.springframework.web.context.request.async.CallableProcessingInterceptor ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startCallableProcessing ( java.util.concurrent.Callable<java.lang.Object> ) ; assertTrue ( this . org.springframework.web.context.request.async.WebAsyncManager . hasConcurrentResult ( ) ) ; assertEquals ( int , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) ) ; void ( ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . beforeConcurrentHandling ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . preProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . postProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> , new java.lang.Integer ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; java.util.concurrent.Callable<java.lang.Object> < java.lang.Object > java.util.concurrent.Callable<java.lang.Object> = new org.springframework.web.context.request.async.WebAsyncManagerTests.StubCallable ( java.lang.Exception ) ; CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor = mock ( CallableProcessingInterceptor .class ) ; void ( ) ; this . org.springframework.web.context.request.async.WebAsyncManager . registerCallableInterceptor ( STRING , org.springframework.web.context.request.async.CallableProcessingInterceptor ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startCallableProcessing ( java.util.concurrent.Callable<java.lang.Object> ) ; assertTrue ( this . org.springframework.web.context.request.async.WebAsyncManager . hasConcurrentResult ( ) ) ; assertEquals ( java.lang.Exception , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) ) ; void ( ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . beforeConcurrentHandling ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . preProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . postProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.Callable<java.lang.Object> < java.lang.Object > java.util.concurrent.Callable<java.lang.Object> = new org.springframework.web.context.request.async.WebAsyncManagerTests.StubCallable ( NUMBER ) ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor = mock ( CallableProcessingInterceptor .class ) ; willThrow ( java.lang.Exception ) . given ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . beforeConcurrentHandling ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> ) ; this . org.springframework.web.context.request.async.WebAsyncManager . registerCallableInterceptor ( STRING , org.springframework.web.context.request.async.CallableProcessingInterceptor ) ; try { this . org.springframework.web.context.request.async.WebAsyncManager . startCallableProcessing ( java.util.concurrent.Callable<java.lang.Object> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( java.lang.Exception , java.lang.Exception ) ; } assertFalse ( this . org.springframework.web.context.request.async.WebAsyncManager . hasConcurrentResult ( ) ) ; verify ( this . org.springframework.web.context.request.async.AsyncWebRequest ) . addTimeoutHandler ( ( java.lang.Runnable ) notNull ( ) ) ; verify ( this . org.springframework.web.context.request.async.AsyncWebRequest ) . addCompletionHandler ( ( java.lang.Runnable ) notNull ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.Callable<java.lang.Object> < java.lang.Object > java.util.concurrent.Callable<java.lang.Object> = new org.springframework.web.context.request.async.WebAsyncManagerTests.StubCallable ( NUMBER ) ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor = mock ( CallableProcessingInterceptor .class ) ; willThrow ( java.lang.Exception ) . given ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . preProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> ) ; void ( ) ; this . org.springframework.web.context.request.async.WebAsyncManager . registerCallableInterceptor ( STRING , org.springframework.web.context.request.async.CallableProcessingInterceptor ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startCallableProcessing ( java.util.concurrent.Callable<java.lang.Object> ) ; assertTrue ( this . org.springframework.web.context.request.async.WebAsyncManager . hasConcurrentResult ( ) ) ; assertEquals ( java.lang.Exception , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) ) ; void ( ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . beforeConcurrentHandling ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.Callable<java.lang.Object> < java.lang.Object > java.util.concurrent.Callable<java.lang.Object> = new org.springframework.web.context.request.async.WebAsyncManagerTests.StubCallable ( NUMBER ) ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor = mock ( CallableProcessingInterceptor .class ) ; willThrow ( java.lang.Exception ) . given ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . postProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> , NUMBER ) ; void ( ) ; this . org.springframework.web.context.request.async.WebAsyncManager . registerCallableInterceptor ( STRING , org.springframework.web.context.request.async.CallableProcessingInterceptor ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startCallableProcessing ( java.util.concurrent.Callable<java.lang.Object> ) ; assertTrue ( this . org.springframework.web.context.request.async.WebAsyncManager . hasConcurrentResult ( ) ) ; assertEquals ( java.lang.Exception , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) ) ; void ( ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . beforeConcurrentHandling ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . preProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.Callable<java.lang.Object> < java.lang.Object > java.util.concurrent.Callable<java.lang.Object> = new org.springframework.web.context.request.async.WebAsyncManagerTests.StubCallable ( NUMBER ) ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor = mock ( CallableProcessingInterceptor .class ) ; CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor = mock ( CallableProcessingInterceptor .class ) ; willThrow ( java.lang.Exception ) . given ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . postProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> , NUMBER ) ; void ( ) ; this . org.springframework.web.context.request.async.WebAsyncManager . registerCallableInterceptors ( org.springframework.web.context.request.async.CallableProcessingInterceptor , org.springframework.web.context.request.async.CallableProcessingInterceptor ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startCallableProcessing ( java.util.concurrent.Callable<java.lang.Object> ) ; assertTrue ( this . org.springframework.web.context.request.async.WebAsyncManager . hasConcurrentResult ( ) ) ; assertEquals ( java.lang.Exception , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) ) ; void ( ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . beforeConcurrentHandling ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . preProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . postProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> , NUMBER ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . beforeConcurrentHandling ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . preProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsyncTaskExecutor org.springframework.web.context.request.async.AsyncTaskExecutor = mock ( AsyncTaskExecutor .class ) ; given ( this . org.springframework.web.context.request.async.AsyncWebRequest . getNativeRequest ( HttpServletRequest .class ) ) . willReturn ( this . org.springframework.web.context.request.async.MockHttpServletRequest ) ; @ java.lang.SuppressWarnings ( STRING ) WebAsyncTask < java.lang.Object > org.springframework.web.context.request.async.WebAsyncTask<java.lang.Object> = new WebAsyncTask <> ( NUMBER , org.springframework.web.context.request.async.AsyncTaskExecutor , mock ( java.util.concurrent.Callable .class ) ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startCallableProcessing ( org.springframework.web.context.request.async.WebAsyncTask<java.lang.Object> ) ; verify ( org.springframework.web.context.request.async.AsyncTaskExecutor ) . submit ( ( java.lang.Runnable ) notNull ( ) ) ; verify ( this . org.springframework.web.context.request.async.AsyncWebRequest ) . setTimeout ( NUMBER ) ; verify ( this . org.springframework.web.context.request.async.AsyncWebRequest ) . addTimeoutHandler ( any ( java.lang.Runnable .class ) ) ; verify ( this . org.springframework.web.context.request.async.AsyncWebRequest ) . addCompletionHandler ( any ( java.lang.Runnable .class ) ) ; verify ( this . org.springframework.web.context.request.async.AsyncWebRequest ) . startAsync ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.web.context.request.async.WebAsyncManager . startCallableProcessing ( ( java.util.concurrent.Callable<?> < ? > ) null ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( java.lang.IllegalArgumentException . java.lang.String ( ) , STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DeferredResult < java.lang.String > org.springframework.web.context.request.async.DeferredResult<java.lang.String> = new DeferredResult <> ( NUMBER ) ; java.lang.String java.lang.String = STRING ; DeferredResultProcessingInterceptor org.springframework.web.context.request.async.DeferredResultProcessingInterceptor = mock ( DeferredResultProcessingInterceptor .class ) ; void ( ) ; this . org.springframework.web.context.request.async.WebAsyncManager . registerDeferredResultInterceptor ( STRING , org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startDeferredResultProcessing ( org.springframework.web.context.request.async.DeferredResult<java.lang.String> ) ; org.springframework.web.context.request.async.DeferredResult<java.lang.String> . setResult ( java.lang.String ) ; assertEquals ( java.lang.String , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) ) ; void ( ) ; verify ( org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) . beforeConcurrentHandling ( this . org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<java.lang.String> ) ; verify ( org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) . preProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<java.lang.String> ) ; verify ( org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) . postProcess ( org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<java.lang.String> , java.lang.String ) ; verify ( this . org.springframework.web.context.request.async.AsyncWebRequest ) . setTimeout ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DeferredResult < java.lang.Integer > org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> = new DeferredResult <> ( ) ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; DeferredResultProcessingInterceptor org.springframework.web.context.request.async.DeferredResultProcessingInterceptor = mock ( DeferredResultProcessingInterceptor .class ) ; willThrow ( java.lang.Exception ) . given ( org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) . beforeConcurrentHandling ( this . org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ; this . org.springframework.web.context.request.async.WebAsyncManager . registerDeferredResultInterceptor ( STRING , org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) ; try { this . org.springframework.web.context.request.async.WebAsyncManager . startDeferredResultProcessing ( org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( java.lang.Exception , java.lang.Exception ) ; } assertFalse ( this . org.springframework.web.context.request.async.WebAsyncManager . hasConcurrentResult ( ) ) ; verify ( this . org.springframework.web.context.request.async.AsyncWebRequest ) . addTimeoutHandler ( ( java.lang.Runnable ) notNull ( ) ) ; verify ( this . org.springframework.web.context.request.async.AsyncWebRequest ) . addCompletionHandler ( ( java.lang.Runnable ) notNull ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DeferredResult < java.lang.Integer > org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> = new DeferredResult <> ( ) ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; DeferredResultProcessingInterceptor org.springframework.web.context.request.async.DeferredResultProcessingInterceptor = mock ( DeferredResultProcessingInterceptor .class ) ; willThrow ( java.lang.Exception ) . given ( org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) . preProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ; void ( ) ; this . org.springframework.web.context.request.async.WebAsyncManager . registerDeferredResultInterceptor ( STRING , org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startDeferredResultProcessing ( org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ; org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> . setResult ( NUMBER ) ; assertEquals ( java.lang.Exception , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) ) ; void ( ) ; verify ( org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) . beforeConcurrentHandling ( this . org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DeferredResult < java.lang.Integer > org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> = new DeferredResult <> ( ) ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; DeferredResultProcessingInterceptor org.springframework.web.context.request.async.DeferredResultProcessingInterceptor = mock ( DeferredResultProcessingInterceptor .class ) ; willThrow ( java.lang.Exception ) . given ( org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) . postProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> , NUMBER ) ; ; void ( ) ; this . org.springframework.web.context.request.async.WebAsyncManager . registerDeferredResultInterceptor ( STRING , org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startDeferredResultProcessing ( org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ; org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> . setResult ( NUMBER ) ; assertEquals ( java.lang.Exception , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) ) ; void ( ) ; verify ( org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) . beforeConcurrentHandling ( this . org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ; verify ( org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) . preProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.web.context.request.async.WebAsyncManager . startDeferredResultProcessing ( ( DeferredResult < ? > ) null ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( java.lang.IllegalArgumentException . java.lang.String ( ) , STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { given ( this . org.springframework.web.context.request.async.AsyncWebRequest . getNativeRequest ( HttpServletRequest .class ) ) . willReturn ( this . org.springframework.web.context.request.async.MockHttpServletRequest ) ; given ( this . org.springframework.web.context.request.async.AsyncWebRequest . isAsyncComplete ( ) ) . willReturn ( false ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { verify ( this . org.springframework.web.context.request.async.AsyncWebRequest ) . addTimeoutHandler ( ( java.lang.Runnable ) notNull ( ) ) ; verify ( this . org.springframework.web.context.request.async.AsyncWebRequest ) . addCompletionHandler ( ( java.lang.Runnable ) notNull ( ) ) ; verify ( this . org.springframework.web.context.request.async.AsyncWebRequest ) . startAsync ( ) ; verify ( this . org.springframework.web.context.request.async.AsyncWebRequest ) . dispatch ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { if ( this . java.lang.Object instanceof java.lang.Exception ) { throw ( ( java.lang.Exception ) this . java.lang.Object ) ; } return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable , long long ) { java.lang.Runnable . void ( ) ; }  <METHOD_END>
