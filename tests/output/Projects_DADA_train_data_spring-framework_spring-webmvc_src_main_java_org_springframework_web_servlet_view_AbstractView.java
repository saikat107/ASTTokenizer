<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( java.lang.String != null ) { java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer ( java.lang.String , STRING ) ; while ( java.util.StringTokenizer . boolean ( ) ) { java.lang.String java.lang.String = java.util.StringTokenizer . java.lang.String ( ) ; int int = java.lang.String . int ( STRING ) ; if ( int == - NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } if ( int >= java.lang.String . int ( ) - NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int + NUMBER ) ; java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ; void ( java.lang.String , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { CollectionUtils . mergePropertiesIntoMap ( java.util.Properties , this . java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { if ( java.util.Map<java.lang.String,> != null ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,?> < java.lang.String , ? > java.util.Map.Entry<java.lang.String,?> : java.util.Map<java.lang.String,> . java.util.Set<java.util.Map.Entry<java.lang.String,>> ( ) ) { void ( java.util.Map.Entry<java.lang.String,> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,> . getValue ( ) ) ; } } }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( this . java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { this . java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse ) throws java.lang.Exception { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + this . java.lang.String + STRING + java.util.Map<java.lang.String,> + STRING + this . java.util.Map<java.lang.String,java.lang.Object> ) ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,> , org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; void ( org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.HttpServletRequest ( org.springframework.web.servlet.view.HttpServletRequest ) , org.springframework.web.servlet.view.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse ) { @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( this . boolean ? ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( View . PATH_VARIABLES ) : null ) ; int int = this . java.util.Map<java.lang.String,java.lang.Object> . int ( ) ; int += ( java.util.Map<java.lang.String,> != null ? java.util.Map<java.lang.String,> . int ( ) : NUMBER ) ; int += ( java.util.Map<java.lang.String,java.lang.Object> != null ? java.util.Map<java.lang.String,java.lang.Object> . int ( ) : NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( int ) ; java.util.Map<java.lang.String,java.lang.Object> . void ( this . java.util.Map<java.lang.String,java.lang.Object> ) ; if ( java.util.Map<java.lang.String,java.lang.Object> != null ) { java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,java.lang.Object> ) ; } if ( java.util.Map<java.lang.String,> != null ) { java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,> ) ; } if ( this . java.lang.String != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( this . java.lang.String , org.springframework.web.servlet.view.RequestContext ( org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse , java.util.Map<java.lang.String,java.lang.Object> ) ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.view.RequestContext org.springframework.web.servlet.view.RequestContext ( HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return new RequestContext ( org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse , getServletContext ( ) , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse ) { if ( boolean ( ) ) { org.springframework.web.servlet.view.HttpServletResponse . setHeader ( STRING , STRING ) ; org.springframework.web.servlet.view.HttpServletResponse . setHeader ( STRING , STRING ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.view.HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest ( HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest ) { if ( this . boolean || this . java.util.Set<java.lang.String> != null ) { return new ContextExposingHttpServletRequest ( org.springframework.web.servlet.view.HttpServletRequest , getWebApplicationContext ( ) , this . java.util.Set<java.lang.String> ) ; } return org.springframework.web.servlet.view.HttpServletRequest ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse ) throws java.lang.Exception ;  <METHOD_END>
<METHOD_START> protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest ) throws java.lang.Exception { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object != null ) { org.springframework.web.servlet.view.HttpServletRequest . setAttribute ( java.lang.String , java.lang.Object ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING + java.lang.String ( ) + STRING ) ; } } else { org.springframework.web.servlet.view.HttpServletRequest . removeAttribute ( java.lang.String ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + java.lang.String ( ) + STRING ) ; } } } }  <METHOD_END>
<METHOD_START> protected java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream ( ) { return new java.io.ByteArrayOutputStream ( int ) ; }  <METHOD_END>
<METHOD_START> protected void void ( HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse , java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream ) throws java.io.IOException { org.springframework.web.servlet.view.HttpServletResponse . setContentType ( java.lang.String ( ) ) ; org.springframework.web.servlet.view.HttpServletResponse . setContentLength ( java.io.ByteArrayOutputStream . int ( ) ) ; ServletOutputStream org.springframework.web.servlet.view.ServletOutputStream = org.springframework.web.servlet.view.HttpServletResponse . getOutputStream ( ) ; java.io.ByteArrayOutputStream . void ( org.springframework.web.servlet.view.ServletOutputStream ) ; org.springframework.web.servlet.view.ServletOutputStream . flush ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse ) { MediaType org.springframework.web.servlet.view.MediaType = ( MediaType ) org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( View . SELECTED_CONTENT_TYPE ) ; if ( org.springframework.web.servlet.view.MediaType != null && org.springframework.web.servlet.view.MediaType . isConcrete ( ) ) { org.springframework.web.servlet.view.HttpServletResponse . setContentType ( org.springframework.web.servlet.view.MediaType . toString ( ) ) ; } else { org.springframework.web.servlet.view.HttpServletResponse . setContentType ( java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.Class<? extends org.springframework.web.servlet.view.AbstractView> ( ) . java.lang.String ( ) ) ; if ( java.lang.String ( ) != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.String ( ) ) . java.lang.StringBuilder ( STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
