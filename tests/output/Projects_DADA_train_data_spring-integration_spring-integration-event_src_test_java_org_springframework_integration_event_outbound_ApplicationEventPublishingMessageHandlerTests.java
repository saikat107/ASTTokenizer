<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandlerTests.TestApplicationEventPublisher org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandlerTests.TestApplicationEventPublisher = new org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandlerTests.TestApplicationEventPublisher ( ) ; ApplicationEventPublishingMessageHandler org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandler = new ApplicationEventPublishingMessageHandler ( ) ; org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandler . setApplicationEventPublisher ( org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandlerTests.TestApplicationEventPublisher ) ; assertNull ( org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandlerTests.TestApplicationEventPublisher . org.springframework.integration.event.outbound.ApplicationEvent ( ) ) ; Message < ? > org.springframework.integration.event.outbound.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandler . handleMessage ( org.springframework.integration.event.outbound.Message<> ) ; ApplicationEvent org.springframework.integration.event.outbound.ApplicationEvent = org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandlerTests.TestApplicationEventPublisher . org.springframework.integration.event.outbound.ApplicationEvent ( ) ; assertEquals ( MessagingEvent .class , org.springframework.integration.event.outbound.ApplicationEvent . getClass ( ) ) ; assertEquals ( org.springframework.integration.event.outbound.Message<> , ( ( MessagingEvent ) org.springframework.integration.event.outbound.ApplicationEvent ) . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandlerTests.TestApplicationEventPublisher org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandlerTests.TestApplicationEventPublisher = new org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandlerTests.TestApplicationEventPublisher ( ) ; ApplicationEventPublishingMessageHandler org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandler = new ApplicationEventPublishingMessageHandler ( ) ; org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandler . setApplicationEventPublisher ( org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandlerTests.TestApplicationEventPublisher ) ; assertNull ( org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandlerTests.TestApplicationEventPublisher . org.springframework.integration.event.outbound.ApplicationEvent ( ) ) ; Message < ? > org.springframework.integration.event.outbound.Message<?> = new GenericMessage < org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandlerTests.TestEvent > ( new org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandlerTests.TestEvent ( STRING ) ) ; org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandler . handleMessage ( org.springframework.integration.event.outbound.Message<> ) ; ApplicationEvent org.springframework.integration.event.outbound.ApplicationEvent = org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandlerTests.TestApplicationEventPublisher . org.springframework.integration.event.outbound.ApplicationEvent ( ) ; assertEquals ( org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandlerTests.TestEvent .class , org.springframework.integration.event.outbound.ApplicationEvent . getClass ( ) ) ; assertEquals ( STRING , ( ( org.springframework.integration.event.outbound.ApplicationEventPublishingMessageHandlerTests.TestEvent ) org.springframework.integration.event.outbound.ApplicationEvent ) . getSource ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.event.outbound.ApplicationEvent org.springframework.integration.event.outbound.ApplicationEvent ( ) { return this . org.springframework.integration.event.outbound.ApplicationEvent ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.event.outbound.ApplicationEvent ) { this . org.springframework.integration.event.outbound.ApplicationEvent = org.springframework.integration.event.outbound.ApplicationEvent ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {		}  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
