<METHOD_START> @ After public void void ( ) { java.util.Optional . java.util.Optional ( this . org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ) . ifPresent ( ConfigurableApplicationContext :: close ) ; java.util.Set<org.springframework.data.gemfire.config.annotation.Region<?,?>> . clear ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Region < ? , ? > org.springframework.data.gemfire.config.annotation.Region<?,?> , java.lang.String java.lang.String ) { void ( org.springframework.data.gemfire.config.annotation.Region<,> , java.lang.String , toRegionPath ( java.lang.String ) , null , null ) ; }  <METHOD_END>
<METHOD_START> protected < K , V > void void ( Region < ? , ? > org.springframework.data.gemfire.config.annotation.Region<?,?> , java.lang.String java.lang.String , java.lang.Class<K> < K > java.lang.Class<K> , java.lang.Class<V> < V > java.lang.Class<V> ) { void ( org.springframework.data.gemfire.config.annotation.Region<,> , java.lang.String , toRegionPath ( java.lang.String ) , java.lang.Class<K> , java.lang.Class<V> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Region < ? , ? > org.springframework.data.gemfire.config.annotation.Region<?,?> , java.lang.String java.lang.String , java.lang.String java.lang.String ) { void ( org.springframework.data.gemfire.config.annotation.Region<,> , java.lang.String , java.lang.String , null , null ) ; }  <METHOD_END>
<METHOD_START> protected < K , V > void void ( Region < ? , ? > org.springframework.data.gemfire.config.annotation.Region<?,?> , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Class<K> < K > java.lang.Class<K> , java.lang.Class<V> < V > java.lang.Class<V> ) { assertThat ( org.springframework.data.gemfire.config.annotation.Region<,> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.Region<,> . getName ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.annotation.Region<,> . getFullPath ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.annotation.Region<,> . getAttributes ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.Region<,> . getAttributes ( ) . getKeyConstraint ( ) ) . isEqualTo ( java.lang.Class<K> ) ; assertThat ( org.springframework.data.gemfire.config.annotation.Region<,> . getAttributes ( ) . getValueConstraint ( ) ) . isEqualTo ( java.lang.Class<V> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( RegionAttributes < ? , ? > org.springframework.data.gemfire.config.annotation.RegionAttributes<?,?> , DataPolicy org.springframework.data.gemfire.config.annotation.DataPolicy , java.lang.String java.lang.String , java.lang.Boolean java.lang.Boolean , java.lang.Boolean java.lang.Boolean , java.lang.String java.lang.String , Scope org.springframework.data.gemfire.config.annotation.Scope ) { assertThat ( org.springframework.data.gemfire.config.annotation.RegionAttributes<,> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.RegionAttributes<,> . getDataPolicy ( ) ) . isEqualTo ( org.springframework.data.gemfire.config.annotation.DataPolicy ) ; assertThat ( org.springframework.data.gemfire.config.annotation.RegionAttributes<,> . getDiskStoreName ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.annotation.RegionAttributes<,> . isDiskSynchronous ( ) ) . isEqualTo ( java.lang.Boolean ) ; assertThat ( org.springframework.data.gemfire.config.annotation.RegionAttributes<,> . getIgnoreJTA ( ) ) . isEqualTo ( java.lang.Boolean ) ; assertThat ( org.springframework.data.gemfire.config.annotation.RegionAttributes<,> . getPoolName ( ) ) . isEqualToIgnoringCase ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.annotation.RegionAttributes<,> . getScope ( ) ) . isEqualTo ( org.springframework.data.gemfire.config.annotation.Scope ) ; }  <METHOD_END>
<METHOD_START> protected void void ( PartitionAttributes < ? , ? > org.springframework.data.gemfire.config.annotation.PartitionAttributes<?,?> , java.lang.String java.lang.String , PartitionResolver org.springframework.data.gemfire.config.annotation.PartitionResolver , java.lang.Integer java.lang.Integer ) { assertThat ( org.springframework.data.gemfire.config.annotation.PartitionAttributes<,> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.PartitionAttributes<,> . getColocatedWith ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.annotation.PartitionAttributes<,> . getPartitionResolver ( ) ) . isEqualTo ( org.springframework.data.gemfire.config.annotation.PartitionResolver ) ; assertThat ( org.springframework.data.gemfire.config.annotation.PartitionAttributes<,> . getRedundantCopies ( ) ) . isEqualTo ( java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> protected void void ( FixedPartitionAttributes org.springframework.data.gemfire.config.annotation.FixedPartitionAttributes , java.lang.String java.lang.String , boolean boolean , int int ) { assertThat ( org.springframework.data.gemfire.config.annotation.FixedPartitionAttributes ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.FixedPartitionAttributes . getPartitionName ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.annotation.FixedPartitionAttributes . isPrimary ( ) ) . isEqualTo ( boolean ) ; assertThat ( org.springframework.data.gemfire.config.annotation.FixedPartitionAttributes . getNumBuckets ( ) ) . isEqualTo ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.data.gemfire.config.annotation.FixedPartitionAttributes org.springframework.data.gemfire.config.annotation.FixedPartitionAttributes ( PartitionAttributes org.springframework.data.gemfire.config.annotation.PartitionAttributes , java.lang.String java.lang.String ) { assertThat ( org.springframework.data.gemfire.config.annotation.PartitionAttributes ) . isNotNull ( ) ; java.util.List<org.springframework.data.gemfire.config.annotation.FixedPartitionAttributes> < FixedPartitionAttributes > java.util.List<org.springframework.data.gemfire.config.annotation.FixedPartitionAttributes> = nullSafeList ( org.springframework.data.gemfire.config.annotation.PartitionAttributes . getFixedPartitionAttributes ( ) ) ; for ( FixedPartitionAttributes org.springframework.data.gemfire.config.annotation.FixedPartitionAttributes : java.util.List<org.springframework.data.gemfire.config.annotation.FixedPartitionAttributes> ) { if ( org.springframework.data.gemfire.config.annotation.FixedPartitionAttributes . getPartitionName ( ) . equals ( java.lang.String ) ) { return org.springframework.data.gemfire.config.annotation.FixedPartitionAttributes ; } } return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { ConfigurableApplicationContext org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( java.lang.Class<?>[] ) ; org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . registerShutdownHook ( ) ; return org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableEntityDefinedRegionsConfigurationUnitTests.ClientPersistentEntitiesConfiguration .class ) ; Region < java.lang.String , ClientRegionEntity > org.springframework.data.gemfire.config.annotation.Region<java.lang.String,org.springframework.data.gemfire.config.annotation.ClientRegionEntity> = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.String,org.springframework.data.gemfire.config.annotation.ClientRegionEntity> , STRING , java.lang.String .class , ClientRegionEntity .class ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.String,org.springframework.data.gemfire.config.annotation.ClientRegionEntity> . getAttributes ( ) , DataPolicy . NORMAL , null , true , false , GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME , null ) ; Region < java.lang.Long , GenericRegionEntity > org.springframework.data.gemfire.config.annotation.Region<java.lang.Long,org.springframework.data.gemfire.config.annotation.GenericRegionEntity> = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Long,org.springframework.data.gemfire.config.annotation.GenericRegionEntity> , STRING , java.lang.Long .class , GenericRegionEntity .class ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Long,org.springframework.data.gemfire.config.annotation.GenericRegionEntity> . getAttributes ( ) , DataPolicy . EMPTY , null , true , false , GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME , null ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableEntityDefinedRegionsConfigurationUnitTests.PeerPartitionRegionPersistentEntitiesConfiguration .class ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) , DataPolicy . PERSISTENT_PARTITION , null , true , false , null , Scope . DISTRIBUTED_NO_ACK ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) . getPartitionAttributes ( ) , null , null , NUMBER ) ; void ( org.springframework.data.gemfire.config.annotation.FixedPartitionAttributes ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) . getPartitionAttributes ( ) , STRING ) , STRING , true , NUMBER ) ; void ( org.springframework.data.gemfire.config.annotation.FixedPartitionAttributes ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) . getPartitionAttributes ( ) , STRING ) , STRING , false , NUMBER ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) , DataPolicy . PERSISTENT_PARTITION , STRING , false , true , null , Scope . DISTRIBUTED_NO_ACK ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) . getPartitionAttributes ( ) , STRING , org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , PartitionResolver .class ) , NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING ) ) . isInstanceOf ( DiskStore .class ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = RegionExistsException .class ) public void void ( ) { try { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableEntityDefinedRegionsConfigurationUnitTests.ExistingPartitionRegionPersistentEntitiesConfiguration .class ) ; } catch ( BeanCreationException org.springframework.data.gemfire.config.annotation.BeanCreationException ) { assertThat ( org.springframework.data.gemfire.config.annotation.BeanCreationException ) . hasCauseInstanceOf ( RegionExistsException .class ) ; assertThat ( org.springframework.data.gemfire.config.annotation.BeanCreationException . getCause ( ) ) . hasMessage ( STRING ) ; throw ( RegionExistsException ) org.springframework.data.gemfire.config.annotation.BeanCreationException . getCause ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableEntityDefinedRegionsConfigurationUnitTests.ExistingReplicateRegionPersistentEntitiesConfiguration .class ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) , DataPolicy . REPLICATE , null , true , false , null , Scope . DISTRIBUTED_NO_ACK ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableEntityDefinedRegionsConfigurationUnitTests.ServerPersistentEntitiesConfiguration .class ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) , DataPolicy . REPLICATE , null , true , false , null , Scope . DISTRIBUTED_ACK ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) , DataPolicy . PERSISTENT_PARTITION , null , true , false , null , Scope . DISTRIBUTED_NO_ACK ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) . getPartitionAttributes ( ) , null , null , NUMBER ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) , DataPolicy . NORMAL , null , true , false , null , Scope . LOCAL ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) , DataPolicy . NORMAL , null , true , false , null , Scope . DISTRIBUTED_NO_ACK ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> protected static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( STRING , java.lang.String , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> protected static < K , V > org.springframework.data.gemfire.config.annotation.Cache org.springframework.data.gemfire.config.annotation.Cache ( ) { Cache org.springframework.data.gemfire.config.annotation.Cache = mock ( Cache .class ) ; Answer < RegionFactory < K , V > > org.springframework.data.gemfire.config.annotation.Answer<org.springframework.data.gemfire.config.annotation.RegionFactory<K,V>> = invocation -> { RegionAttributes < K , V > defaultRegionAttributes = mockRegionAttributes ( null , null , true , false , null , null , null , Scope . DISTRIBUTED_NO_ACK , null ) ; RegionAttributes < K , V > regionAttributes = ( invocation . getArguments ( ) . length == NUMBER ? invocation . getArgument ( NUMBER ) : defaultRegionAttributes ) ; return mockRegionFactory ( mockCache , regionAttributes ) ; } ; when ( org.springframework.data.gemfire.config.annotation.Cache . createRegionFactory ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<org.springframework.data.gemfire.config.annotation.RegionFactory<K,V>> ) ; when ( org.springframework.data.gemfire.config.annotation.Cache . createRegionFactory ( any ( RegionAttributes .class ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<org.springframework.data.gemfire.config.annotation.RegionFactory<K,V>> ) ; return org.springframework.data.gemfire.config.annotation.Cache ; }  <METHOD_END>
<METHOD_START> protected static < K , V > org.springframework.data.gemfire.config.annotation.ClientCache org.springframework.data.gemfire.config.annotation.ClientCache ( ) { ClientCache org.springframework.data.gemfire.config.annotation.ClientCache = mock ( ClientCache .class , java.lang.String ( STRING ) ) ; Answer < ClientRegionFactory < K , V > > org.springframework.data.gemfire.config.annotation.Answer<org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V>> = new Answer < ClientRegionFactory < K , V > > ( ) { @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> < K , V > org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { return org.springframework.data.gemfire.config.annotation.ClientRegionFactory ( org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ) ; } } ; when ( org.springframework.data.gemfire.config.annotation.ClientCache . createClientRegionFactory ( any ( ClientRegionShortcut .class ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V>> ) ; return org.springframework.data.gemfire.config.annotation.ClientCache ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> < K , V > org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { return org.springframework.data.gemfire.config.annotation.ClientRegionFactory ( org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected static < K , V > org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> < K , V > org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> ( ClientRegionShortcut org.springframework.data.gemfire.config.annotation.ClientRegionShortcut ) { ClientRegionFactory < K , V > org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> = mock ( ClientRegionFactory .class , java.lang.String ( STRING ) ) ; java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference<java.lang.String> <> ( ) ; java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> = new java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> <> ( true ) ; java.util.concurrent.atomic.AtomicReference<java.lang.Class> < java.lang.Class > java.util.concurrent.atomic.AtomicReference<java.lang.Class> = new java.util.concurrent.atomic.AtomicReference<java.lang.Class> <> ( null ) ; java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference<java.lang.String> <> ( ) ; java.util.concurrent.atomic.AtomicReference<java.lang.Class> < java.lang.Class > java.util.concurrent.atomic.AtomicReference<java.lang.Class> = new java.util.concurrent.atomic.AtomicReference<java.lang.Class> <> ( null ) ; when ( org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> . setDiskStoreName ( anyString ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.String .class , java.util.concurrent.atomic.AtomicReference<java.lang.String> , org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> ) ) ; when ( org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> . setDiskSynchronous ( anyBoolean ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Boolean . java.lang.Class<java.lang.Boolean> , java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> , org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> ) ) ; when ( org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> . setKeyConstraint ( any ( java.lang.Class .class ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Class .class , java.util.concurrent.atomic.AtomicReference<java.lang.Class> , org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> ) ) ; when ( org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> . setPoolName ( anyString ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.String .class , java.util.concurrent.atomic.AtomicReference<java.lang.String> , org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> ) ) ; when ( org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> . setValueConstraint ( any ( java.lang.Class .class ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Class .class , java.util.concurrent.atomic.AtomicReference<java.lang.Class> , org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> ) ) ; RegionAttributes < K , V > org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> = mock ( RegionAttributes .class , java.lang.String ( STRING ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getDataPolicy ( ) ) . thenReturn ( ClientRegionShortcutWrapper . valueOf ( org.springframework.data.gemfire.config.annotation.ClientRegionShortcut ) . getDataPolicy ( ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getDiskStoreName ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.String> ( java.util.concurrent.atomic.AtomicReference<java.lang.String> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . isDiskSynchronous ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Boolean> ( java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getKeyConstraint ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Class> ( java.util.concurrent.atomic.AtomicReference<java.lang.Class> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getPoolName ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.String> ( java.util.concurrent.atomic.AtomicReference<java.lang.String> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getValueConstraint ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Class> ( java.util.concurrent.atomic.AtomicReference<java.lang.Class> ) ) ; when ( org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> . create ( anyString ( ) ) ) . thenAnswer ( invocation -> { String regionName = invocation . getArgument ( NUMBER ) ; cacheRegions . stream ( ) . filter ( region -> region . getName ( ) . equals ( regionName ) ) . findAny ( ) . ifPresent ( region -> { throw new RegionExistsException ( region ) ; } ) ; Region < K , V > region = mockRegion ( regionName , mockRegionAttributes ) ; cacheRegions . add ( region ) ; return region ; } ) ; return org.springframework.data.gemfire.config.annotation.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected static < K , V > org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> < K , V > org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> ( DataPolicy org.springframework.data.gemfire.config.annotation.DataPolicy , java.lang.String java.lang.String , boolean boolean , boolean boolean , java.lang.Class<K> < K > java.lang.Class<K> , PartitionAttributes < K , V > org.springframework.data.gemfire.config.annotation.PartitionAttributes<K,V> , java.lang.String java.lang.String , Scope org.springframework.data.gemfire.config.annotation.Scope , java.lang.Class<V> < V > java.lang.Class<V> ) { RegionAttributes < K , V > org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> = mock ( RegionAttributes .class , java.lang.String ( STRING ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getDataPolicy ( ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.DataPolicy ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getDiskStoreName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . isDiskSynchronous ( ) ) . thenReturn ( boolean ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getIgnoreJTA ( ) ) . thenReturn ( boolean ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getKeyConstraint ( ) ) . thenReturn ( java.lang.Class<K> ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getPartitionAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.PartitionAttributes<K,V> ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getPoolName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getScope ( ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.Scope ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getValueConstraint ( ) ) . thenReturn ( java.lang.Class<V> ) ; return org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected static < K , V > org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> < K , V > org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> ( GemFireCache org.springframework.data.gemfire.config.annotation.GemFireCache , RegionAttributes < K , V > org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> ) { RegionFactory < K , V > org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> = mock ( RegionFactory .class , java.lang.String ( STRING ) ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.DataPolicy> < DataPolicy > java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.DataPolicy> = new java.util.concurrent.atomic.AtomicReference <> ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getDataPolicy ( ) ) ; java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference <> ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getDiskStoreName ( ) ) ; java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> = new java.util.concurrent.atomic.AtomicReference <> ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . isDiskSynchronous ( ) ) ; java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> = new java.util.concurrent.atomic.AtomicReference <> ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getIgnoreJTA ( ) ) ; java.util.concurrent.atomic.AtomicReference<java.lang.Class> < java.lang.Class > java.util.concurrent.atomic.AtomicReference<java.lang.Class> = new java.util.concurrent.atomic.AtomicReference<java.lang.Class> <> ( null ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.PartitionAttributes> < PartitionAttributes > java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.PartitionAttributes> = new java.util.concurrent.atomic.AtomicReference <> ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getPartitionAttributes ( ) ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.Scope> < Scope > java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.Scope> = new java.util.concurrent.atomic.AtomicReference <> ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getScope ( ) ) ; java.util.concurrent.atomic.AtomicReference<java.lang.Class> < java.lang.Class > java.util.concurrent.atomic.AtomicReference<java.lang.Class> = new java.util.concurrent.atomic.AtomicReference<java.lang.Class> <> ( null ) ; when ( org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> . setDataPolicy ( any ( DataPolicy .class ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( DataPolicy .class , java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.DataPolicy> , org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> . setDiskStoreName ( anyString ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.String .class , java.util.concurrent.atomic.AtomicReference<java.lang.String> , org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> . setDiskSynchronous ( anyBoolean ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Boolean . java.lang.Class<java.lang.Boolean> , java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> , org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> . setIgnoreJTA ( anyBoolean ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Boolean . java.lang.Class<java.lang.Boolean> , java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> , org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> . setKeyConstraint ( any ( java.lang.Class .class ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Class .class , java.util.concurrent.atomic.AtomicReference<java.lang.Class> , org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> . setPartitionAttributes ( any ( PartitionAttributes .class ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( PartitionAttributes .class , java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.PartitionAttributes> , org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> . setScope ( any ( Scope .class ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( Scope .class , java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.Scope> , org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> . setValueConstraint ( any ( java.lang.Class .class ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Class .class , java.util.concurrent.atomic.AtomicReference<java.lang.Class> , org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> ) ) ; RegionAttributes < K , V > org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> = mock ( RegionAttributes .class , java.lang.String ( STRING ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getDataPolicy ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<org.springframework.data.gemfire.config.annotation.DataPolicy> ( java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.DataPolicy> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getDiskStoreName ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.String> ( java.util.concurrent.atomic.AtomicReference<java.lang.String> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . isDiskSynchronous ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Boolean> ( java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getIgnoreJTA ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Boolean> ( java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getKeyConstraint ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Class> ( java.util.concurrent.atomic.AtomicReference<java.lang.Class> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getPartitionAttributes ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<org.springframework.data.gemfire.config.annotation.PartitionAttributes> ( java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.PartitionAttributes> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getScope ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<org.springframework.data.gemfire.config.annotation.Scope> ( java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.Scope> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getValueConstraint ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Class> ( java.util.concurrent.atomic.AtomicReference<java.lang.Class> ) ) ; when ( org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> . create ( anyString ( ) ) ) . thenAnswer ( invocation -> { String regionName = invocation . getArgument ( NUMBER ) ; cacheRegions . stream ( ) . filter ( region -> region . getName ( ) . equals ( regionName ) ) . findAny ( ) . ifPresent ( region -> { throw new RegionExistsException ( region ) ; } ) ; Region < K , V > mockRegion = mockRegion ( regionName , mockRegionAttributes ) ; cacheRegions . add ( mockRegion ) ; when ( mockCache . getRegion ( eq ( regionName ) ) ) . thenReturn ( ( Region < Object , Object > ) mockRegion ) ; when ( mockRegion . getRegionService ( ) ) . thenReturn ( mockCache ) ; return mockRegion ; } ) ; return org.springframework.data.gemfire.config.annotation.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected static < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> ( java.lang.String java.lang.String , RegionAttributes < K , V > org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> ) { Region < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> = mock ( Region .class , java.lang.String ( java.lang.String ) ) ; when ( org.springframework.data.gemfire.config.annotation.Region<K,V> . getName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.config.annotation.Region<K,V> . getFullPath ( ) ) . thenReturn ( toRegionPath ( java.lang.String ) ) ; when ( org.springframework.data.gemfire.config.annotation.Region<K,V> . getAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> ) ; return org.springframework.data.gemfire.config.annotation.Region<K,V> ; }  <METHOD_END>
<METHOD_START> protected static < R > org.springframework.data.gemfire.config.annotation.Answer<R> < R > org.springframework.data.gemfire.config.annotation.Answer<R> ( java.util.concurrent.atomic.AtomicReference<R> < R > java.util.concurrent.atomic.AtomicReference<R> ) { return invocation -> returnValue . get ( ) ; }  <METHOD_END>
<METHOD_START> protected static < T , R > org.springframework.data.gemfire.config.annotation.Answer<R> < R > org.springframework.data.gemfire.config.annotation.Answer<R> ( java.lang.Class<T> < T > java.lang.Class<T> , java.util.concurrent.atomic.AtomicReference<T> < T > java.util.concurrent.atomic.AtomicReference<T> , R R ) { return invocation -> { argument . set ( invocation . getArgument ( NUMBER ) ) ; return returnValue ; } ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.config.annotation.ClientCache org.springframework.data.gemfire.config.annotation.ClientCache ( ) { return org.springframework.data.gemfire.config.annotation.ClientCache ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.config.annotation.Cache org.springframework.data.gemfire.config.annotation.Cache ( ) { return org.springframework.data.gemfire.config.annotation.Cache ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Lazy org.springframework.data.gemfire.config.annotation.DiskStore org.springframework.data.gemfire.config.annotation.DiskStore ( ) { return mock ( DiskStore .class , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Lazy org.springframework.data.gemfire.config.annotation.PartitionResolver org.springframework.data.gemfire.config.annotation.PartitionResolver ( ) { return mock ( PartitionResolver .class , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.SuppressWarnings ( STRING ) org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.PartitionRegionEntity> < java.lang.Long , PartitionRegionEntity > org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.PartitionRegionEntity> ( GemFireCache org.springframework.data.gemfire.config.annotation.GemFireCache ) { PartitionedRegionFactoryBean < java.lang.Long , PartitionRegionEntity > org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.PartitionRegionEntity> = new PartitionedRegionFactoryBean <> ( ) ; org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.PartitionRegionEntity> . setCache ( org.springframework.data.gemfire.config.annotation.GemFireCache ) ; org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.PartitionRegionEntity> . setClose ( false ) ; org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.PartitionRegionEntity> . setPersistent ( false ) ; org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.PartitionRegionEntity> . setRegionName ( STRING ) ; return org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.PartitionRegionEntity> ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.SuppressWarnings ( STRING ) org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.ReplicateRegionEntity> < java.lang.Long , ReplicateRegionEntity > org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.ReplicateRegionEntity> ( GemFireCache org.springframework.data.gemfire.config.annotation.GemFireCache ) { ReplicatedRegionFactoryBean < java.lang.Long , ReplicateRegionEntity > org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.ReplicateRegionEntity> = new ReplicatedRegionFactoryBean <> ( ) ; org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.ReplicateRegionEntity> . setCache ( org.springframework.data.gemfire.config.annotation.GemFireCache ) ; org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.ReplicateRegionEntity> . setClose ( false ) ; org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.ReplicateRegionEntity> . setLookupEnabled ( true ) ; org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.ReplicateRegionEntity> . setPersistent ( false ) ; org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.ReplicateRegionEntity> . setRegionName ( STRING ) ; org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.ReplicateRegionEntity> . setScope ( Scope . DISTRIBUTED_NO_ACK ) ; return org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.config.annotation.ReplicateRegionEntity> ; }  <METHOD_END>
