<METHOD_START> public void ( MethodInterceptor org.springframework.data.projection.MethodInterceptor , java.lang.Object java.lang.Object , BeanFactory org.springframework.data.projection.BeanFactory , SpelExpressionParser org.springframework.data.projection.SpelExpressionParser , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( org.springframework.data.projection.MethodInterceptor , STRING ) ; Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( org.springframework.data.projection.SpelExpressionParser , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; StandardEvaluationContext org.springframework.data.projection.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.data.projection.SpelEvaluatingMethodInterceptor.TargetWrapper ( java.lang.Object ) ) ; if ( java.lang.Object instanceof java.util.Map ) { org.springframework.data.projection.StandardEvaluationContext . addPropertyAccessor ( new MapAccessor ( ) ) ; } if ( org.springframework.data.projection.BeanFactory != null ) { org.springframework.data.projection.StandardEvaluationContext . setBeanResolver ( new BeanFactoryResolver ( org.springframework.data.projection.BeanFactory ) ) ; } this . java.util.Map<java.lang.Integer,org.springframework.data.projection.Expression> = java.util.Map<java.lang.Integer,org.springframework.data.projection.Expression> ( org.springframework.data.projection.SpelExpressionParser , java.lang.Class<> ) ; this . org.springframework.data.projection.EvaluationContext = org.springframework.data.projection.StandardEvaluationContext ; this . org.springframework.data.projection.MethodInterceptor = org.springframework.data.projection.MethodInterceptor ; }  <METHOD_END>
<METHOD_START> private static java.util.Map<java.lang.Integer,org.springframework.data.projection.Expression> < java.lang.Integer , Expression > java.util.Map<java.lang.Integer,org.springframework.data.projection.Expression> ( SpelExpressionParser org.springframework.data.projection.SpelExpressionParser , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Map<java.lang.Integer,org.springframework.data.projection.Expression> < java.lang.Integer , Expression > java.util.Map<java.lang.Integer,org.springframework.data.projection.Expression> = new java.util.HashMap<java.lang.Integer,org.springframework.data.projection.Expression> <> ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.Class<> . java.lang.reflect.Method[] ( ) ) { if ( ! java.lang.reflect.Method . boolean ( Value .class ) ) { continue; } Value org.springframework.data.projection.Value = java.lang.reflect.Method . T ( Value .class ) ; if ( ! StringUtils . hasText ( org.springframework.data.projection.Value . value ( ) ) ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.reflect.Method ) ) ; } java.util.Map<java.lang.Integer,org.springframework.data.projection.Expression> . put ( java.lang.reflect.Method . int ( ) , org.springframework.data.projection.SpelExpressionParser . parseExpression ( org.springframework.data.projection.Value . value ( ) , org.springframework.data.projection.ParserContext ) ) ; } return java.util.Collections . java.util.Map<java.lang.Integer,org.springframework.data.projection.Expression> ( java.util.Map<java.lang.Integer,org.springframework.data.projection.Expression> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.data.projection.MethodInvocation ) throws java.lang.Throwable { Expression org.springframework.data.projection.Expression = java.util.Map<java.lang.Integer,org.springframework.data.projection.Expression> . get ( org.springframework.data.projection.MethodInvocation . getMethod ( ) . hashCode ( ) ) ; if ( org.springframework.data.projection.Expression == null ) { return org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ) ; } return org.springframework.data.projection.Expression . getValue ( org.springframework.data.projection.EvaluationContext ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return java.lang.Object ; }  <METHOD_END>
