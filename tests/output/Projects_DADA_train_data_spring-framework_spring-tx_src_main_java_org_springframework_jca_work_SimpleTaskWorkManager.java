<METHOD_START> public void void ( TaskExecutor org.springframework.jca.work.TaskExecutor ) { this . org.springframework.jca.work.TaskExecutor = org.springframework.jca.work.TaskExecutor ; }  <METHOD_END>
<METHOD_START> public void void ( AsyncTaskExecutor org.springframework.jca.work.AsyncTaskExecutor ) { this . org.springframework.jca.work.AsyncTaskExecutor = org.springframework.jca.work.AsyncTaskExecutor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Work org.springframework.jca.work.Work ) throws org.springframework.jca.work.WorkException { void ( org.springframework.jca.work.Work , WorkManager . INDEFINITE , null , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Work org.springframework.jca.work.Work , long long , ExecutionContext org.springframework.jca.work.ExecutionContext , WorkListener org.springframework.jca.work.WorkListener )			throws org.springframework.jca.work.WorkException { Assert . state ( this . org.springframework.jca.work.TaskExecutor != null , STRING ) ; long ( this . org.springframework.jca.work.TaskExecutor , org.springframework.jca.work.Work , long , false , org.springframework.jca.work.ExecutionContext , org.springframework.jca.work.WorkListener ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( Work org.springframework.jca.work.Work ) throws org.springframework.jca.work.WorkException { return long ( org.springframework.jca.work.Work , WorkManager . INDEFINITE , null , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( Work org.springframework.jca.work.Work , long long , ExecutionContext org.springframework.jca.work.ExecutionContext , WorkListener org.springframework.jca.work.WorkListener )			throws org.springframework.jca.work.WorkException { Assert . state ( this . org.springframework.jca.work.AsyncTaskExecutor != null , STRING ) ; return long ( this . org.springframework.jca.work.AsyncTaskExecutor , org.springframework.jca.work.Work , long , true , org.springframework.jca.work.ExecutionContext , org.springframework.jca.work.WorkListener ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Work org.springframework.jca.work.Work ) throws org.springframework.jca.work.WorkException { void ( org.springframework.jca.work.Work , WorkManager . INDEFINITE , null , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Work org.springframework.jca.work.Work , long long , ExecutionContext org.springframework.jca.work.ExecutionContext , WorkListener org.springframework.jca.work.WorkListener )			throws org.springframework.jca.work.WorkException { Assert . state ( this . org.springframework.jca.work.AsyncTaskExecutor != null , STRING ) ; long ( this . org.springframework.jca.work.AsyncTaskExecutor , org.springframework.jca.work.Work , long , false , org.springframework.jca.work.ExecutionContext , org.springframework.jca.work.WorkListener ) ; }  <METHOD_END>
<METHOD_START> protected long long ( TaskExecutor org.springframework.jca.work.TaskExecutor , Work org.springframework.jca.work.Work , long long , boolean boolean , ExecutionContext org.springframework.jca.work.ExecutionContext , WorkListener org.springframework.jca.work.WorkListener )			throws org.springframework.jca.work.WorkException { if ( org.springframework.jca.work.ExecutionContext != null && org.springframework.jca.work.ExecutionContext . getXid ( ) != null ) { throw new WorkException ( STRING + org.springframework.jca.work.ExecutionContext . getXid ( ) ) ; } WorkListener org.springframework.jca.work.WorkListener = org.springframework.jca.work.WorkListener ; if ( org.springframework.jca.work.WorkListener == null ) { org.springframework.jca.work.WorkListener = new WorkAdapter ( ) ; } boolean boolean = ( org.springframework.jca.work.TaskExecutor instanceof AsyncTaskExecutor ) ; org.springframework.jca.work.SimpleTaskWorkManager.DelegatingWorkAdapter org.springframework.jca.work.SimpleTaskWorkManager.DelegatingWorkAdapter = new org.springframework.jca.work.SimpleTaskWorkManager.DelegatingWorkAdapter ( org.springframework.jca.work.Work , org.springframework.jca.work.WorkListener , ! boolean ) ; try { if ( boolean ) { ( ( AsyncTaskExecutor ) org.springframework.jca.work.TaskExecutor ) . execute ( org.springframework.jca.work.SimpleTaskWorkManager.DelegatingWorkAdapter , long ) ; } else { org.springframework.jca.work.TaskExecutor . execute ( org.springframework.jca.work.SimpleTaskWorkManager.DelegatingWorkAdapter ) ; } } catch ( TaskTimeoutException org.springframework.jca.work.TaskTimeoutException ) { WorkException org.springframework.jca.work.WorkException = new WorkRejectedException ( STRING + org.springframework.jca.work.Work , org.springframework.jca.work.TaskTimeoutException ) ; org.springframework.jca.work.WorkException . setErrorCode ( WorkException . START_TIMED_OUT ) ; org.springframework.jca.work.WorkListener . workRejected ( new WorkEvent ( this , WorkEvent . WORK_REJECTED , org.springframework.jca.work.Work , org.springframework.jca.work.WorkException ) ) ; throw org.springframework.jca.work.WorkException ; } catch ( TaskRejectedException org.springframework.jca.work.TaskRejectedException ) { WorkException org.springframework.jca.work.WorkException = new WorkRejectedException ( STRING + org.springframework.jca.work.Work , org.springframework.jca.work.TaskRejectedException ) ; org.springframework.jca.work.WorkException . setErrorCode ( WorkException . INTERNAL ) ; org.springframework.jca.work.WorkListener . workRejected ( new WorkEvent ( this , WorkEvent . WORK_REJECTED , org.springframework.jca.work.Work , org.springframework.jca.work.WorkException ) ) ; throw org.springframework.jca.work.WorkException ; } catch ( java.lang.Throwable java.lang.Throwable ) { WorkException org.springframework.jca.work.WorkException = new WorkException ( STRING + org.springframework.jca.work.Work , java.lang.Throwable ) ; org.springframework.jca.work.WorkException . setErrorCode ( WorkException . INTERNAL ) ; throw org.springframework.jca.work.WorkException ; } if ( boolean ) { org.springframework.jca.work.WorkListener . workAccepted ( new WorkEvent ( this , WorkEvent . WORK_ACCEPTED , org.springframework.jca.work.Work , null ) ) ; } if ( boolean ) { long long = java.lang.System . long ( ) ; synchronized ( org.springframework.jca.work.SimpleTaskWorkManager.DelegatingWorkAdapter . java.lang.Object ) { try { while ( ! org.springframework.jca.work.SimpleTaskWorkManager.DelegatingWorkAdapter . boolean ) { org.springframework.jca.work.SimpleTaskWorkManager.DelegatingWorkAdapter . java.lang.Object . void ( ) ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } } return ( java.lang.System . long ( ) - long ) ; } else { return WorkManager . UNKNOWN ; } }  <METHOD_END>
<METHOD_START> public void ( Work org.springframework.jca.work.Work , WorkListener org.springframework.jca.work.WorkListener , boolean boolean ) { this . org.springframework.jca.work.Work = org.springframework.jca.work.Work ; this . org.springframework.jca.work.WorkListener = org.springframework.jca.work.WorkListener ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) { this . org.springframework.jca.work.WorkListener . workAccepted ( new WorkEvent ( this , WorkEvent . WORK_ACCEPTED , org.springframework.jca.work.Work , null ) ) ; } synchronized ( this . java.lang.Object ) { this . boolean = true ; this . java.lang.Object . void ( ) ; } this . org.springframework.jca.work.WorkListener . workStarted ( new WorkEvent ( this , WorkEvent . WORK_STARTED , this . org.springframework.jca.work.Work , null ) ) ; try { this . org.springframework.jca.work.Work . run ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { this . org.springframework.jca.work.WorkListener . workCompleted ( new WorkEvent ( this , WorkEvent . WORK_COMPLETED , this . org.springframework.jca.work.Work , new WorkCompletedException ( java.lang.RuntimeException ) ) ) ; throw java.lang.RuntimeException ; } catch ( java.lang.Error java.lang.Error ) { this . org.springframework.jca.work.WorkListener . workCompleted ( new WorkEvent ( this , WorkEvent . WORK_COMPLETED , this . org.springframework.jca.work.Work , new WorkCompletedException ( java.lang.Error ) ) ) ; throw java.lang.Error ; } this . org.springframework.jca.work.WorkListener . workCompleted ( new WorkEvent ( this , WorkEvent . WORK_COMPLETED , this . org.springframework.jca.work.Work , null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.jca.work.Work . release ( ) ; }  <METHOD_END>
