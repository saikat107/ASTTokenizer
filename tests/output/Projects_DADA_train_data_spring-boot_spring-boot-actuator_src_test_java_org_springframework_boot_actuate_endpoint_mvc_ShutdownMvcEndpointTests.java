<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( post ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . string ( STRING , STRING ) ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext . getBean ( java.util.concurrent.CountDownLatch .class ) . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( post ( STRING ) . header ( HttpHeaders . ACCEPT , MediaType . APPLICATION_JSON_VALUE ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . string ( STRING , MediaType . APPLICATION_JSON_UTF8_VALUE ) ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext . getBean ( java.util.concurrent.CountDownLatch .class ) . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpointTests.TestShutdownEndpoint org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpointTests.TestShutdownEndpoint ( ) { return new org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpointTests.TestShutdownEndpoint ( java.util.concurrent.CountDownLatch ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( ) { return new java.util.concurrent.CountDownLatch ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> void ( java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { this . java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.boot.actuate.endpoint.mvc.ApplicationContext )				throws org.springframework.boot.actuate.endpoint.mvc.BeansException { ConfigurableApplicationContext org.springframework.boot.actuate.endpoint.mvc.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class ) ; willAnswer ( new Answer < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( InvocationOnMock org.springframework.boot.actuate.endpoint.mvc.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpointTests.TestShutdownEndpoint .this . java.util.concurrent.CountDownLatch . void ( ) ; return null ; } } ) . given ( org.springframework.boot.actuate.endpoint.mvc.ConfigurableApplicationContext ) . close ( ) ; super. setApplicationContext ( org.springframework.boot.actuate.endpoint.mvc.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( InvocationOnMock org.springframework.boot.actuate.endpoint.mvc.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpointTests.TestShutdownEndpoint .this . java.util.concurrent.CountDownLatch . void ( ) ; return null ; }  <METHOD_END>
