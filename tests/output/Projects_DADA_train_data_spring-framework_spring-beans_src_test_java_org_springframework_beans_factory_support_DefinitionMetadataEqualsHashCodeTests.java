<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( java.lang.String .class ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) {		} ; void ( org.springframework.beans.factory.support.RootBeanDefinition ) ; void ( org.springframework.beans.factory.support.RootBeanDefinition ) ; void ( org.springframework.beans.factory.support.RootBeanDefinition ) ; void ( org.springframework.beans.factory.support.RootBeanDefinition ) ; void ( org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; void ( org.springframework.beans.factory.support.RootBeanDefinition ) ; void ( org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.RootBeanDefinition . getMethodOverrides ( ) . getOverrides ( ) . iterator ( ) . next ( ) . setOverloaded ( false ) ; assertEquals ( STRING , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.RootBeanDefinition ) ; assertEquals ( STRING , org.springframework.beans.factory.support.RootBeanDefinition . hashCode ( ) , org.springframework.beans.factory.support.RootBeanDefinition . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ChildBeanDefinition org.springframework.beans.factory.support.ChildBeanDefinition = new ChildBeanDefinition ( STRING ) ; ChildBeanDefinition org.springframework.beans.factory.support.ChildBeanDefinition = new ChildBeanDefinition ( STRING ) ; ChildBeanDefinition org.springframework.beans.factory.support.ChildBeanDefinition = new ChildBeanDefinition ( STRING ) ; ChildBeanDefinition org.springframework.beans.factory.support.ChildBeanDefinition = new ChildBeanDefinition ( STRING ) {		} ; void ( org.springframework.beans.factory.support.ChildBeanDefinition ) ; void ( org.springframework.beans.factory.support.ChildBeanDefinition ) ; void ( org.springframework.beans.factory.support.ChildBeanDefinition ) ; void ( org.springframework.beans.factory.support.ChildBeanDefinition ) ; void ( org.springframework.beans.factory.support.ChildBeanDefinition , org.springframework.beans.factory.support.ChildBeanDefinition , org.springframework.beans.factory.support.ChildBeanDefinition , org.springframework.beans.factory.support.ChildBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RuntimeBeanReference org.springframework.beans.factory.support.RuntimeBeanReference = new RuntimeBeanReference ( STRING ) ; RuntimeBeanReference org.springframework.beans.factory.support.RuntimeBeanReference = new RuntimeBeanReference ( STRING ) ; RuntimeBeanReference org.springframework.beans.factory.support.RuntimeBeanReference = new RuntimeBeanReference ( STRING ) ; RuntimeBeanReference org.springframework.beans.factory.support.RuntimeBeanReference = new RuntimeBeanReference ( STRING ) {		} ; void ( org.springframework.beans.factory.support.RuntimeBeanReference , org.springframework.beans.factory.support.RuntimeBeanReference , org.springframework.beans.factory.support.RuntimeBeanReference , org.springframework.beans.factory.support.RuntimeBeanReference ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractBeanDefinition org.springframework.beans.factory.support.AbstractBeanDefinition ) { org.springframework.beans.factory.support.AbstractBeanDefinition . setAbstract ( true ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setAttribute ( STRING , STRING ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setAutowireCandidate ( false ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setAutowireMode ( AbstractBeanDefinition . AUTOWIRE_BY_TYPE ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setDependencyCheck ( AbstractBeanDefinition . DEPENDENCY_CHECK_OBJECTS ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setDependsOn ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setDestroyMethodName ( STRING ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setEnforceDestroyMethod ( false ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setEnforceInitMethod ( true ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setFactoryBeanName ( STRING ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setInitMethodName ( STRING ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setLazyInit ( true ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . getMethodOverrides ( ) . addOverride ( new LookupOverride ( STRING , STRING ) ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . getMethodOverrides ( ) . addOverride ( new ReplaceOverride ( STRING , STRING ) ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setResourceDescription ( STRING ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setRole ( BeanDefinition . ROLE_APPLICATION ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setSource ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { assertEquals ( STRING , java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.Object . int ( ) , java.lang.Object . int ( ) ) ; assertNotEquals ( STRING , java.lang.Object , java.lang.Object ) ; assertNotEquals ( STRING , java.lang.Object . int ( ) , java.lang.Object . int ( ) ) ; assertEquals ( STRING , java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.Object . int ( ) , java.lang.Object . int ( ) ) ; }  <METHOD_END>
