<METHOD_START> @ java.lang.Override public void void ( ASTNode [] org.springframework.boot.cli.compiler.ASTNode[] , SourceUnit org.springframework.boot.cli.compiler.SourceUnit ) { for ( ASTNode org.springframework.boot.cli.compiler.ASTNode : org.springframework.boot.cli.compiler.ASTNode[] ) { if ( org.springframework.boot.cli.compiler.ASTNode instanceof ModuleNode ) { void ( ( ModuleNode ) org.springframework.boot.cli.compiler.ASTNode , java.lang.String ( ) ) ; } } }  <METHOD_END>
<METHOD_START> protected abstract java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> private void void ( ModuleNode org.springframework.boot.cli.compiler.ModuleNode , java.lang.String java.lang.String ) { void ( org.springframework.boot.cli.compiler.ModuleNode , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( ModuleNode org.springframework.boot.cli.compiler.ModuleNode , java.lang.String java.lang.String ) { AnnotatedNode org.springframework.boot.cli.compiler.AnnotatedNode = org.springframework.boot.cli.compiler.AnnotatedNode ( org.springframework.boot.cli.compiler.ModuleNode ) ; if ( org.springframework.boot.cli.compiler.AnnotatedNode != null ) { AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode = org.springframework.boot.cli.compiler.AnnotationNode ( org.springframework.boot.cli.compiler.AnnotatedNode ) ; java.util.List<org.springframework.boot.cli.compiler.Expression> < Expression > java.util.List<org.springframework.boot.cli.compiler.Expression> = new java.util.ArrayList <> ( java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> ( org.springframework.boot.cli.compiler.AnnotationNode . getMember ( STRING ) ) ) ; java.util.List<org.springframework.boot.cli.compiler.Expression> . add ( new ConstantExpression ( java.lang.String ) ) ; org.springframework.boot.cli.compiler.AnnotationNode . setMember ( STRING , new ListExpression ( java.util.List<org.springframework.boot.cli.compiler.Expression> ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode ( AnnotatedNode org.springframework.boot.cli.compiler.AnnotatedNode ) { java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> < AnnotationNode > java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> = org.springframework.boot.cli.compiler.AnnotatedNode . getAnnotations ( org.springframework.boot.cli.compiler.ClassNode ) ; if ( ! java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> . isEmpty ( ) ) { return java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> . get ( NUMBER ) ; } AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode = new AnnotationNode ( org.springframework.boot.cli.compiler.ClassNode ) ; org.springframework.boot.cli.compiler.AnnotatedNode . addAnnotation ( org.springframework.boot.cli.compiler.AnnotationNode ) ; return org.springframework.boot.cli.compiler.AnnotationNode ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.AnnotatedNode org.springframework.boot.cli.compiler.AnnotatedNode ( ModuleNode org.springframework.boot.cli.compiler.ModuleNode ) { PackageNode org.springframework.boot.cli.compiler.PackageNode = org.springframework.boot.cli.compiler.ModuleNode . getPackage ( ) ; if ( org.springframework.boot.cli.compiler.PackageNode != null && ! org.springframework.boot.cli.compiler.PackageNode . getAnnotations ( org.springframework.boot.cli.compiler.ClassNode ) . isEmpty ( ) ) { return org.springframework.boot.cli.compiler.PackageNode ; } if ( ! org.springframework.boot.cli.compiler.ModuleNode . getClasses ( ) . isEmpty ( ) ) { return org.springframework.boot.cli.compiler.ModuleNode . getClasses ( ) . get ( NUMBER ) ; } return org.springframework.boot.cli.compiler.PackageNode ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> < ConstantExpression > java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> ( Expression org.springframework.boot.cli.compiler.Expression ) { if ( org.springframework.boot.cli.compiler.Expression instanceof ListExpression ) { return java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> ( ( ListExpression ) org.springframework.boot.cli.compiler.Expression ) ; } if ( org.springframework.boot.cli.compiler.Expression instanceof ConstantExpression && ( ( ConstantExpression ) org.springframework.boot.cli.compiler.Expression ) . getValue ( ) instanceof java.lang.String ) { return java.util.Arrays . java.util.List<T> ( ( ConstantExpression ) org.springframework.boot.cli.compiler.Expression ) ; } return java.util.Collections . java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> < ConstantExpression > java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> ( ListExpression org.springframework.boot.cli.compiler.ListExpression ) { java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> < ConstantExpression > java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> = new java.util.ArrayList<org.springframework.boot.cli.compiler.ConstantExpression> <> ( ) ; for ( Expression org.springframework.boot.cli.compiler.Expression : org.springframework.boot.cli.compiler.ListExpression . getExpressions ( ) ) { if ( org.springframework.boot.cli.compiler.Expression instanceof ConstantExpression && ( ( ConstantExpression ) org.springframework.boot.cli.compiler.Expression ) . getValue ( ) instanceof java.lang.String ) { java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> . add ( ( ConstantExpression ) org.springframework.boot.cli.compiler.Expression ) ; } } return java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> ; }  <METHOD_END>
