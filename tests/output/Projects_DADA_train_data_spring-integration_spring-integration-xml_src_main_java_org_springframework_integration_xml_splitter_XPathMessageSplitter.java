<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this( XPathExpressionFactory . createXPathExpression ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> ) ); javax.xml.xpath.XPath javax.xml.xpath.XPath = javax.xml.xpath.XPathFactory . javax.xml.xpath.XPathFactory ( ) . javax.xml.xpath.XPath ( ) ; SimpleNamespaceContext org.springframework.integration.xml.splitter.SimpleNamespaceContext = new SimpleNamespaceContext ( ) ; org.springframework.integration.xml.splitter.SimpleNamespaceContext . setBindings ( java.util.Map<java.lang.String,java.lang.String> ) ; javax.xml.xpath.XPath . void ( org.springframework.integration.xml.splitter.SimpleNamespaceContext ) ; try { this . javax.xml.xpath.XPathExpression = javax.xml.xpath.XPath . javax.xml.xpath.XPathExpression ( java.lang.String ) ; } catch ( javax.xml.xpath.XPathExpressionException javax.xml.xpath.XPathExpressionException ) { throw new org . springframework . org.springframework.xml . org.springframework.xml . org.springframework.xml ( STRING + java.lang.String + STRING + javax.xml.xpath.XPathExpressionException . java.lang.String ( ) , javax.xml.xpath.XPathExpressionException ) ; } }  <METHOD_END>
<METHOD_START> public void ( XPathExpression org.springframework.integration.xml.splitter.XPathExpression ) { Assert . notNull ( org.springframework.integration.xml.splitter.XPathExpression , STRING ) ; this . org.springframework.integration.xml.splitter.XPathExpression = org.springframework.integration.xml.splitter.XPathExpression ; this . javax.xml.parsers.DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) ; this . javax.xml.parsers.DocumentBuilderFactory . void ( true ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public void void ( javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory ) { Assert . notNull ( javax.xml.parsers.DocumentBuilderFactory , STRING ) ; this . javax.xml.parsers.DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory ; }  <METHOD_END>
<METHOD_START> public void void ( XmlPayloadConverter org.springframework.integration.xml.splitter.XmlPayloadConverter ) { Assert . notNull ( org.springframework.integration.xml.splitter.XmlPayloadConverter , STRING ) ; this . org.springframework.integration.xml.splitter.XmlPayloadConverter = org.springframework.integration.xml.splitter.XmlPayloadConverter ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. doInit ( ) ; if ( this . boolean && this . javax.xml.xpath.XPathExpression == null ) { logger . info ( STRING ) ; this . boolean = false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.xml.splitter.Message<?> ) { try { java.lang.Object java.lang.Object = org.springframework.integration.xml.splitter.Message<> . getPayload ( ) ; java.lang.Object java.lang.Object = null ; if ( java.lang.Object instanceof org.w3c.dom.Node ) { java.lang.Object = java.lang.Object ( ( org.w3c.dom.Node ) java.lang.Object ) ; } else { org.w3c.dom.Document org.w3c.dom.Document = this . org.springframework.integration.xml.splitter.XmlPayloadConverter . convertToDocument ( java.lang.Object ) ; Assert . notNull ( org.w3c.dom.Document , STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING ) ; java.lang.Object = java.lang.Object ( org.w3c.dom.Document ) ; } return java.lang.Object ; } catch ( javax.xml.parsers.ParserConfigurationException javax.xml.parsers.ParserConfigurationException ) { throw new MessageConversionException ( org.springframework.integration.xml.splitter.Message<> , STRING , javax.xml.parsers.ParserConfigurationException ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessageHandlingException ( org.springframework.integration.xml.splitter.Message<> , STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.Object java.lang.Object ( org.w3c.dom.Document org.w3c.dom.Document ) throws java.lang.Exception { java.lang.Object java.lang.Object = java.lang.Object ( org.w3c.dom.Document ) ; final javax.xml.transform.Transformer javax.xml.transform.Transformer ; synchronized ( this . javax.xml.transform.TransformerFactory ) { javax.xml.transform.Transformer = this . javax.xml.transform.TransformerFactory . javax.xml.transform.Transformer ( ) ; } if ( this . java.util.Properties != null ) { javax.xml.transform.Transformer . void ( this . java.util.Properties ) ; } if ( java.lang.Object instanceof java.util.List ) { java.util.List<org.w3c.dom.Node> < org.w3c.dom.Node > java.util.List<org.w3c.dom.Node> = ( java.util.List<org.w3c.dom.Node> < org.w3c.dom.Node > ) java.lang.Object ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( java.util.List<org.w3c.dom.Node> . int ( ) ) ; for ( org.w3c.dom.Node org.w3c.dom.Node : java.util.List<org.w3c.dom.Node> ) { StringResult org.springframework.integration.xml.splitter.StringResult = new StringResult ( ) ; javax.xml.transform.Transformer . void ( new javax.xml.transform.dom.DOMSource ( org.w3c.dom.Node ) , org.springframework.integration.xml.splitter.StringResult ) ; java.util.List<java.lang.String> . boolean ( org.springframework.integration.xml.splitter.StringResult . toString ( ) ) ; } return java.util.List<java.lang.String> ; } else { return new FunctionIterator <> ( ( java.util.Iterator<org.w3c.dom.Node> < org.w3c.dom.Node > ) java.lang.Object , node -> { StringResult result = new StringResult ( ) ; try { transformer . transform ( new DOMSource ( node ) , result ) ; } catch ( TransformerException e ) { throw new IllegalStateException ( STRING , e ) ; } return result . toString ( ) ; } ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( org.w3c.dom.Node org.w3c.dom.Node ) throws javax.xml.parsers.ParserConfigurationException { if ( this . boolean ) { try { org.w3c.dom.NodeList org.w3c.dom.NodeList = ( org.w3c.dom.NodeList ) this . javax.xml.xpath.XPathExpression . java.lang.Object ( org.w3c.dom.Node , javax.xml.xpath.XPathConstants . javax.xml.namespace.QName ) ; return new org.springframework.integration.xml.splitter.XPathMessageSplitter.NodeListIterator ( org.w3c.dom.NodeList ) ; } catch ( javax.xml.xpath.XPathExpressionException javax.xml.xpath.XPathExpressionException ) { throw new XPathException ( STRING + javax.xml.xpath.XPathExpressionException . java.lang.String ( ) , javax.xml.xpath.XPathExpressionException ) ; } } else { java.util.List<org.w3c.dom.Node> < org.w3c.dom.Node > java.util.List<org.w3c.dom.Node> = this . org.springframework.integration.xml.splitter.XPathExpression . evaluateAsNodeList ( org.w3c.dom.Node ) ; if ( this . boolean ) { return java.util.List<org.w3c.dom.Node> ( java.util.List<org.w3c.dom.Node> ) ; } return java.util.List<org.w3c.dom.Node> ; } }  <METHOD_END>
<METHOD_START> private java.util.List<org.w3c.dom.Node> < org.w3c.dom.Node > java.util.List<org.w3c.dom.Node> ( java.util.List<org.w3c.dom.Node> < org.w3c.dom.Node > java.util.List<org.w3c.dom.Node> ) throws javax.xml.parsers.ParserConfigurationException { javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder = javax.xml.parsers.DocumentBuilder ( ) ; java.util.List<org.w3c.dom.Node> < org.w3c.dom.Node > java.util.List<org.w3c.dom.Node> = new java.util.ArrayList<org.w3c.dom.Node> < org.w3c.dom.Node > ( java.util.List<org.w3c.dom.Node> . int ( ) ) ; for ( org.w3c.dom.Node org.w3c.dom.Node : java.util.List<org.w3c.dom.Node> ) { org.w3c.dom.Document org.w3c.dom.Document = org.w3c.dom.Document ( javax.xml.parsers.DocumentBuilder , org.w3c.dom.Node ) ; java.util.List<org.w3c.dom.Node> . boolean ( org.w3c.dom.Document ) ; } return java.util.List<org.w3c.dom.Node> ; }  <METHOD_END>
<METHOD_START> private org.w3c.dom.Document org.w3c.dom.Document ( javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder , org.w3c.dom.Node org.w3c.dom.Node ) { org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( ) ; org.w3c.dom.Document . org.w3c.dom.Node ( org.w3c.dom.Document . org.w3c.dom.Node ( org.w3c.dom.Node , true ) ) ; return org.w3c.dom.Document ; }  <METHOD_END>
<METHOD_START> private javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder ( ) javax.xml.parsers.ParserConfigurationException { synchronized ( this . java.lang.Object ) { return this . javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilder ( ) ; } }  <METHOD_END>
<METHOD_START> void ( org.w3c.dom.NodeList org.w3c.dom.NodeList ) throws javax.xml.parsers.ParserConfigurationException { this . org.w3c.dom.NodeList = org.w3c.dom.NodeList ; if ( org.springframework.integration.xml.splitter.XPathMessageSplitter .this . boolean ) { this . javax.xml.parsers.DocumentBuilder = javax.xml.parsers.DocumentBuilder ( ) ; } else { this . javax.xml.parsers.DocumentBuilder = null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . int < this . org.w3c.dom.NodeList . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.w3c.dom.Node org.w3c.dom.Node ( ) { if ( ! boolean ( ) ) { return null ; } org.w3c.dom.Node org.w3c.dom.Node = this . org.w3c.dom.NodeList . org.w3c.dom.Node ( this . int ++ ) ; if ( this . javax.xml.parsers.DocumentBuilder != null ) { org.w3c.dom.Node = org.w3c.dom.Document ( this . javax.xml.parsers.DocumentBuilder , org.w3c.dom.Node ) ; } return org.w3c.dom.Node ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
