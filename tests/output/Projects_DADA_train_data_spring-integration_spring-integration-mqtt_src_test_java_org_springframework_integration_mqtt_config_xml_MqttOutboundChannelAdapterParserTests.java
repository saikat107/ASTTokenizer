<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MessageHandler , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MessageHandler , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MessageHandler , STRING ) ) ; GenericMessage < java.lang.String > org.springframework.integration.mqtt.config.xml.GenericMessage<java.lang.String> = new GenericMessage <> ( STRING ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MessageHandler , STRING , MessageProcessor .class ) . processMessage ( org.springframework.integration.mqtt.config.xml.GenericMessage<java.lang.String> ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MessageHandler , STRING , MessageProcessor .class ) . processMessage ( org.springframework.integration.mqtt.config.xml.GenericMessage<java.lang.String> ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MessageHandler , STRING , MessageProcessor .class ) . processMessage ( org.springframework.integration.mqtt.config.xml.GenericMessage<java.lang.String> ) ) ; assertSame ( org.springframework.integration.mqtt.config.xml.MqttMessageConverter , TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MessageHandler , STRING ) ) ; assertSame ( org.springframework.integration.mqtt.config.xml.DefaultMqttPahoClientFactory , TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MessageHandler , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MessageHandler , STRING , java.lang.Boolean .class ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MessageHandler , STRING , java.lang.Boolean .class ) ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( this . org.springframework.integration.mqtt.config.xml.EventDrivenConsumer , STRING ) ; assertTrue ( AopUtils . isAopProxy ( java.lang.Object ) ) ; assertSame ( ( ( Advised ) java.lang.Object ) . getTargetSource ( ) . getTarget ( ) , this . org.springframework.integration.mqtt.config.xml.MessageHandler ) ; assertThat ( TestUtils . getPropertyValue ( java.lang.Object , STRING ) , Matchers . instanceOf ( RequestHandlerRetryAdvice .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericMessage < java.lang.String > org.springframework.integration.mqtt.config.xml.GenericMessage<java.lang.String> = new GenericMessage <> ( STRING ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MqttPahoMessageHandler , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MqttPahoMessageHandler , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MqttPahoMessageHandler , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MqttPahoMessageHandler , STRING ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MqttPahoMessageHandler , STRING , java.lang.Boolean .class ) ) ; DefaultPahoMessageConverter org.springframework.integration.mqtt.config.xml.DefaultPahoMessageConverter = TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MqttPahoMessageHandler , STRING , DefaultPahoMessageConverter .class ) ; assertEquals ( NUMBER , org.springframework.integration.mqtt.config.xml.DefaultPahoMessageConverter . fromMessage ( org.springframework.integration.mqtt.config.xml.GenericMessage<java.lang.String> , null ) . getQos ( ) ) ; assertTrue ( org.springframework.integration.mqtt.config.xml.DefaultPahoMessageConverter . fromMessage ( org.springframework.integration.mqtt.config.xml.GenericMessage<java.lang.String> , null ) . isRetained ( ) ) ; assertSame ( org.springframework.integration.mqtt.config.xml.DefaultMqttPahoClientFactory , TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MqttPahoMessageHandler , STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MqttPahoMessageHandler , STRING , java.lang.Boolean .class ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.mqtt.config.xml.MqttPahoMessageHandler , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
