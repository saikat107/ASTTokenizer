<METHOD_START> @ Before public void void ( ) { this . org.springframework.messaging.simp.user.SimpUserRegistry = mock ( SimpUserRegistry .class ) ; this . org.springframework.messaging.simp.user.SubscribableChannel = mock ( SubscribableChannel .class ) ; UserDestinationResolver org.springframework.messaging.simp.user.UserDestinationResolver = new DefaultUserDestinationResolver ( this . org.springframework.messaging.simp.user.SimpUserRegistry ) ; this . org.springframework.messaging.simp.user.UserDestinationMessageHandler = new UserDestinationMessageHandler ( new StubMessageChannel ( ) , this . org.springframework.messaging.simp.user.SubscribableChannel , org.springframework.messaging.simp.user.UserDestinationResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( this . org.springframework.messaging.simp.user.SubscribableChannel . send ( Mockito . any ( Message .class ) ) ) . willReturn ( true ) ; this . org.springframework.messaging.simp.user.UserDestinationMessageHandler . handleMessage ( org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . SUBSCRIBE , STRING , java.lang.String , STRING ) ) ; ArgumentCaptor < Message > org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> = ArgumentCaptor . forClass ( Message .class ) ; Mockito . verify ( this . org.springframework.messaging.simp.user.SubscribableChannel ) . send ( org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> . capture ( ) ) ; Message org.springframework.messaging.simp.user.Message = org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> . getValue ( ) ; assertEquals ( STRING , SimpMessageHeaderAccessor . getDestination ( org.springframework.messaging.simp.user.Message . getHeaders ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( this . org.springframework.messaging.simp.user.SubscribableChannel . send ( Mockito . any ( Message .class ) ) ) . willReturn ( true ) ; this . org.springframework.messaging.simp.user.UserDestinationMessageHandler . handleMessage ( org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . UNSUBSCRIBE , STRING , STRING , STRING ) ) ; ArgumentCaptor < Message > org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> = ArgumentCaptor . forClass ( Message .class ) ; Mockito . verify ( this . org.springframework.messaging.simp.user.SubscribableChannel ) . send ( org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> . capture ( ) ) ; Message org.springframework.messaging.simp.user.Message = org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> . getValue ( ) ; assertEquals ( STRING , SimpMessageHeaderAccessor . getDestination ( org.springframework.messaging.simp.user.Message . getHeaders ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( new TestSimpSession ( STRING ) ) ; when ( this . org.springframework.messaging.simp.user.SimpUserRegistry . getUser ( STRING ) ) . thenReturn ( org.springframework.messaging.simp.user.TestSimpUser ) ; given ( this . org.springframework.messaging.simp.user.SubscribableChannel . send ( Mockito . any ( Message .class ) ) ) . willReturn ( true ) ; this . org.springframework.messaging.simp.user.UserDestinationMessageHandler . handleMessage ( org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . MESSAGE , STRING , STRING , STRING ) ) ; ArgumentCaptor < Message > org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> = ArgumentCaptor . forClass ( Message .class ) ; Mockito . verify ( this . org.springframework.messaging.simp.user.SubscribableChannel ) . send ( org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> . capture ( ) ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.user.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . wrap ( org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> . getValue ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . getDestination ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . getFirstNativeHeader ( ORIGINAL_DESTINATION ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.user.UserDestinationMessageHandler . setBroadcastDestination ( STRING ) ; given ( this . org.springframework.messaging.simp.user.SubscribableChannel . send ( Mockito . any ( Message .class ) ) ) . willReturn ( true ) ; this . org.springframework.messaging.simp.user.UserDestinationMessageHandler . handleMessage ( org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . MESSAGE , STRING , STRING , STRING ) ) ; ArgumentCaptor < Message > org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> = ArgumentCaptor . forClass ( Message .class ) ; Mockito . verify ( this . org.springframework.messaging.simp.user.SubscribableChannel ) . send ( org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> . capture ( ) ) ; Message org.springframework.messaging.simp.user.Message = org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> . getValue ( ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.user.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . wrap ( org.springframework.messaging.simp.user.Message ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . getDestination ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . getFirstNativeHeader ( ORIGINAL_DESTINATION ) ) ; this . org.springframework.messaging.simp.user.UserDestinationMessageHandler . handleMessage ( org.springframework.messaging.simp.user.Message ) ; Mockito . verifyNoMoreInteractions ( this . org.springframework.messaging.simp.user.SubscribableChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( new TestSimpSession ( STRING ) ) ; when ( this . org.springframework.messaging.simp.user.SimpUserRegistry . getUser ( STRING ) ) . thenReturn ( org.springframework.messaging.simp.user.TestSimpUser ) ; this . org.springframework.messaging.simp.user.UserDestinationMessageHandler . setBroadcastDestination ( STRING ) ; given ( this . org.springframework.messaging.simp.user.SubscribableChannel . send ( Mockito . any ( Message .class ) ) ) . willReturn ( true ) ; StompHeaderAccessor org.springframework.messaging.simp.user.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . MESSAGE ) ; org.springframework.messaging.simp.user.StompHeaderAccessor . setSessionId ( STRING ) ; org.springframework.messaging.simp.user.StompHeaderAccessor . setDestination ( STRING ) ; org.springframework.messaging.simp.user.StompHeaderAccessor . setNativeHeader ( ORIGINAL_DESTINATION , STRING ) ; org.springframework.messaging.simp.user.StompHeaderAccessor . setNativeHeader ( STRING , STRING ) ; org.springframework.messaging.simp.user.StompHeaderAccessor . setLeaveMutable ( true ) ; byte [] byte[] = STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; this . org.springframework.messaging.simp.user.UserDestinationMessageHandler . handleMessage ( MessageBuilder . createMessage ( byte[] , org.springframework.messaging.simp.user.StompHeaderAccessor . getMessageHeaders ( ) ) ) ; ArgumentCaptor < Message > org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> = ArgumentCaptor . forClass ( Message .class ) ; Mockito . verify ( this . org.springframework.messaging.simp.user.SubscribableChannel ) . send ( org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> . capture ( ) ) ; assertNotNull ( org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> . getValue ( ) ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.user.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . wrap ( org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> . getValue ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . getDestination ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . getFirstNativeHeader ( ORIGINAL_DESTINATION ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . getFirstNativeHeader ( STRING ) ) ; assertArrayEquals ( byte[] , ( byte [] ) org.springframework.messaging.simp.user.ArgumentCaptor<org.springframework.messaging.simp.user.Message> . getValue ( ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.user.UserDestinationMessageHandler . setBroadcastDestination ( STRING ) ; given ( this . org.springframework.messaging.simp.user.SubscribableChannel . send ( Mockito . any ( Message .class ) ) ) . willReturn ( true ) ; StompHeaderAccessor org.springframework.messaging.simp.user.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . MESSAGE ) ; org.springframework.messaging.simp.user.StompHeaderAccessor . setSessionId ( STRING ) ; org.springframework.messaging.simp.user.StompHeaderAccessor . setDestination ( STRING ) ; org.springframework.messaging.simp.user.StompHeaderAccessor . setNativeHeader ( ORIGINAL_DESTINATION , STRING ) ; org.springframework.messaging.simp.user.StompHeaderAccessor . setLeaveMutable ( true ) ; byte [] byte[] = STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; this . org.springframework.messaging.simp.user.UserDestinationMessageHandler . handleMessage ( MessageBuilder . createMessage ( byte[] , org.springframework.messaging.simp.user.StompHeaderAccessor . getMessageHeaders ( ) ) ) ; verifyNoMoreInteractions ( this . org.springframework.messaging.simp.user.SubscribableChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.user.UserDestinationMessageHandler . handleMessage ( org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . MESSAGE , STRING , STRING , null ) ) ; Mockito . verifyZeroInteractions ( this . org.springframework.messaging.simp.user.SubscribableChannel ) ; this . org.springframework.messaging.simp.user.UserDestinationMessageHandler . handleMessage ( org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . MESSAGE , STRING , STRING , STRING ) ) ; Mockito . verifyZeroInteractions ( this . org.springframework.messaging.simp.user.SubscribableChannel ) ; this . org.springframework.messaging.simp.user.UserDestinationMessageHandler . handleMessage ( org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . SUBSCRIBE , STRING , STRING , STRING ) ) ; Mockito . verifyZeroInteractions ( this . org.springframework.messaging.simp.user.SubscribableChannel ) ; this . org.springframework.messaging.simp.user.UserDestinationMessageHandler . handleMessage ( org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . CONNECT , STRING , STRING , STRING ) ) ; Mockito . verifyZeroInteractions ( this . org.springframework.messaging.simp.user.SubscribableChannel ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.user.Message<?> < ? > org.springframework.messaging.simp.user.Message<?> ( SimpMessageType org.springframework.messaging.simp.user.SimpMessageType , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.user.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( org.springframework.messaging.simp.user.SimpMessageType ) ; if ( java.lang.String != null ) { org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . setDestination ( java.lang.String ) ; } if ( java.lang.String != null ) { org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . setUser ( new TestPrincipal ( java.lang.String ) ) ; } if ( java.lang.String != null ) { org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . setSessionId ( java.lang.String ) ; } return MessageBuilder . withPayload ( new byte [ NUMBER ] ) . setHeaders ( org.springframework.messaging.simp.user.SimpMessageHeaderAccessor ) . build ( ) ; }  <METHOD_END>
