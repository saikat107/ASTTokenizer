<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.integration.config.annotation.SubscribableChannel , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.config.annotation.SubscribableChannel . send ( MessageBuilder . withPayload ( new java.util.concurrent.atomic.AtomicInteger ( NUMBER ) ) . build ( ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.PollableChannel . receive ( NUMBER ) ; assertEquals ( NUMBER , ( ( java.lang.Integer ) org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( Message < ? > org.springframework.integration.config.annotation.Message<?> ) { ( ( java.util.concurrent.atomic.AtomicInteger ) org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) . int ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger ) { java.util.concurrent.atomic.AtomicInteger . int ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator ( inputChannel = STRING , outputChannel = STRING ) public int int ( java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger ) { return java.util.concurrent.atomic.AtomicInteger . int ( NUMBER ) ; }  <METHOD_END>
