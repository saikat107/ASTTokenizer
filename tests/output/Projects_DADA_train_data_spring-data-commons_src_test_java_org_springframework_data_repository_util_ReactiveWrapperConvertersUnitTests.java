<METHOD_START> @ Test public void void ( ) { assertThat ( ReactiveWrapperConverters . supports ( Mono .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrapperConverters . supports ( Flux .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrapperConverters . supports ( Publisher .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrapperConverters . supports ( java.lang.Object .class ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ReactiveWrapperConverters . supports ( Single .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrapperConverters . supports ( Observable .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrapperConverters . supports ( Completable .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ReactiveWrapperConverters . supports ( io . io . io .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrapperConverters . supports ( io . io . io .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrapperConverters . supports ( io . io . io .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrapperConverters . supports ( io . io . io .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrapperConverters . supports ( io . io . io .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mono < java.lang.String > org.springframework.data.repository.util.Mono<java.lang.String> = Mono . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( org.springframework.data.repository.util.Mono<java.lang.String> , Mono .class ) ) . isSameAs ( org.springframework.data.repository.util.Mono<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mono < java.lang.String > org.springframework.data.repository.util.Mono<java.lang.String> = Mono . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( org.springframework.data.repository.util.Mono<java.lang.String> , Single .class ) ) . isInstanceOf ( Single .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mono < java.lang.String > org.springframework.data.repository.util.Mono<java.lang.String> = Mono . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( org.springframework.data.repository.util.Mono<java.lang.String> , io . io . io .class ) ) . isInstanceOf ( io . io . io .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Single . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( foo , Mono .class ) ) . isInstanceOf ( Mono .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Single . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( foo , Publisher .class ) ) . isInstanceOf ( Publisher .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Maybe . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( foo , Mono .class ) ) . isInstanceOf ( Mono .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Maybe . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( foo , Flux .class ) ) . isInstanceOf ( Flux .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Maybe . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( foo , Publisher .class ) ) . isInstanceOf ( Publisher .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Flowable . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( foo , Mono .class ) ) . isInstanceOf ( Mono .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Flowable . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( foo , Flux .class ) ) . isInstanceOf ( Flux .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Flowable . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( foo , Publisher .class ) ) . isSameAs ( foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Observable . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( foo , Mono .class ) ) . isInstanceOf ( Mono .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Observable . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( foo , Flux .class ) ) . isInstanceOf ( Flux .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Observable . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( foo , io . io . io .class ) ) . isInstanceOf ( io . io . io .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Observable . empty ( ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( foo , Maybe .class ) ) . isInstanceOf ( Maybe .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Observable . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( foo , Publisher .class ) ) . isInstanceOf ( Publisher .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Flux < java.lang.String > org.springframework.data.repository.util.Flux<java.lang.String> = Flux . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( org.springframework.data.repository.util.Flux<java.lang.String> , io . io . io .class ) ) . isInstanceOf ( io . io . io .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Flux < java.lang.String > org.springframework.data.repository.util.Flux<java.lang.String> = Flux . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( org.springframework.data.repository.util.Flux<java.lang.String> , io . io . io .class ) ) . isInstanceOf ( io . io . io .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mono < java.lang.String > org.springframework.data.repository.util.Mono<java.lang.String> = Mono . just ( STRING ) ; assertThat ( ReactiveWrapperConverters . toWrapper ( org.springframework.data.repository.util.Mono<java.lang.String> , Flux .class ) ) . isInstanceOf ( Flux .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mono < java.lang.String > org.springframework.data.repository.util.Mono<java.lang.String> = Mono . just ( STRING ) ; Mono < java.lang.Long > org.springframework.data.repository.util.Mono<java.lang.Long> = ReactiveWrapperConverters . map ( org.springframework.data.repository.util.Mono<java.lang.String> , source -> NUMBER ) ; assertThat ( org.springframework.data.repository.util.Mono<java.lang.Long> . block ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Flux < java.lang.String > org.springframework.data.repository.util.Flux<java.lang.String> = Flux . just ( STRING ) ; Flux < java.lang.Long > org.springframework.data.repository.util.Flux<java.lang.Long> = ReactiveWrapperConverters . map ( org.springframework.data.repository.util.Flux<java.lang.String> , source -> NUMBER ) ; assertThat ( org.springframework.data.repository.util.Flux<java.lang.Long> . next ( ) . block ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Single < java.lang.String > org.springframework.data.repository.util.Single<java.lang.String> = Single . just ( STRING ) ; Single < java.lang.Long > org.springframework.data.repository.util.Single<java.lang.Long> = ReactiveWrapperConverters . map ( org.springframework.data.repository.util.Single<java.lang.String> , source -> NUMBER ) ; assertThat ( org.springframework.data.repository.util.Single<java.lang.Long> . toBlocking ( ) . value ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Observable < java.lang.String > org.springframework.data.repository.util.Observable<java.lang.String> = Observable . just ( STRING ) ; Observable < java.lang.Long > org.springframework.data.repository.util.Observable<java.lang.Long> = ReactiveWrapperConverters . map ( org.springframework.data.repository.util.Observable<java.lang.String> , source -> NUMBER ) ; assertThat ( org.springframework.data.repository.util.Observable<java.lang.Long> . toBlocking ( ) . first ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Single . just ( STRING ) ; io . io . io < java.lang.Long > map = ReactiveWrapperConverters . map ( foo , source -> NUMBER ) ; assertThat ( map . blockingGet ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Maybe . just ( STRING ) ; io . io . io < java.lang.Long > map = ReactiveWrapperConverters . map ( foo , source -> NUMBER ) ; assertThat ( map . toSingle ( ) . blockingGet ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Observable . just ( STRING ) ; io . io . io < java.lang.Long > map = ReactiveWrapperConverters . map ( foo , source -> NUMBER ) ; assertThat ( map . blockingFirst ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { io . io . io < java.lang.String > foo = io . reactivex . Flowable . just ( STRING ) ; io . io . io < java.lang.Long > map = ReactiveWrapperConverters . map ( foo , source -> NUMBER ) ; assertThat ( map . blockingFirst ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
