<METHOD_START> public void ( java.lang.Object java.lang.Object ) { void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected void ( ) { void ( this ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; this . java.lang.Object = java.lang.Object ; implementInterfacesOnObject ( java.lang.Object ) ; suppressInterface ( IntroductionInterceptor .class ) ; suppressInterface ( DynamicIntroductionAdvice .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.support.MethodInvocation ) throws java.lang.Throwable { if ( isMethodOnIntroducedInterface ( org.springframework.aop.support.MethodInvocation ) ) { java.lang.Object java.lang.Object = AopUtils . invokeJoinpointUsingReflection ( this . java.lang.Object , org.springframework.aop.support.MethodInvocation . getMethod ( ) , org.springframework.aop.support.MethodInvocation . getArguments ( ) ) ; if ( java.lang.Object == this . java.lang.Object && org.springframework.aop.support.MethodInvocation instanceof ProxyMethodInvocation ) { java.lang.Object java.lang.Object = ( ( ProxyMethodInvocation ) org.springframework.aop.support.MethodInvocation ) . getProxy ( ) ; if ( org.springframework.aop.support.MethodInvocation . getMethod ( ) . getReturnType ( ) . isInstance ( java.lang.Object ) ) { java.lang.Object = java.lang.Object ; } } return java.lang.Object ; } return java.lang.Object ( org.springframework.aop.support.MethodInvocation ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.support.MethodInvocation ) throws java.lang.Throwable { return org.springframework.aop.support.MethodInvocation . proceed ( ) ; }  <METHOD_END>
