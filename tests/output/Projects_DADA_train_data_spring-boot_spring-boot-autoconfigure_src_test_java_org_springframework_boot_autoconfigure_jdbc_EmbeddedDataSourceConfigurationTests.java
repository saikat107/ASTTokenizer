<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext ( STRING ) ; AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext ( STRING ) ; try { javax.sql.DataSource javax.sql.DataSource = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ; javax.sql.DataSource javax.sql.DataSource = org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ; assertThat ( java.lang.String ( javax.sql.DataSource ) ) . isNotEqualTo ( java.lang.String ( javax.sql.DataSource ) ) ; } finally { org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( javax.sql.DataSource javax.sql.DataSource ) throws java.sql.SQLException { java.sql.Connection java.sql.Connection = javax.sql.DataSource . java.sql.Connection ( ) ; try { java.sql.ResultSet java.sql.ResultSet = java.sql.Connection . java.sql.DatabaseMetaData ( ) . java.sql.ResultSet ( ) ; if ( java.sql.ResultSet . boolean ( ) ) { return java.sql.ResultSet . java.lang.String ( NUMBER ) ; } else { throw new java.lang.IllegalStateException ( STRING ) ; } } finally { java.sql.Connection . void ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext ( java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class ) ; org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext ; }  <METHOD_END>
