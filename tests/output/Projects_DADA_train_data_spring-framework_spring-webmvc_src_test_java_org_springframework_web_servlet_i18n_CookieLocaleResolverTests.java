<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; Cookie org.springframework.web.servlet.i18n.Cookie = new Cookie ( STRING , STRING ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setCookieName ( STRING ) ; java.util.Locale java.util.Locale = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocale ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( java.util.Locale . java.lang.String ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; Cookie org.springframework.web.servlet.i18n.Cookie = new Cookie ( STRING , STRING ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setCookieName ( STRING ) ; LocaleContext org.springframework.web.servlet.i18n.LocaleContext = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( STRING , org.springframework.web.servlet.i18n.LocaleContext . getLocale ( ) . getLanguage ( ) ) ; assertTrue ( org.springframework.web.servlet.i18n.LocaleContext instanceof TimeZoneAwareLocaleContext ) ; assertNull ( ( ( TimeZoneAwareLocaleContext ) org.springframework.web.servlet.i18n.LocaleContext ) . getTimeZone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; Cookie org.springframework.web.servlet.i18n.Cookie = new Cookie ( STRING , STRING ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setCookieName ( STRING ) ; LocaleContext org.springframework.web.servlet.i18n.LocaleContext = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( STRING , org.springframework.web.servlet.i18n.LocaleContext . getLocale ( ) . getLanguage ( ) ) ; assertTrue ( org.springframework.web.servlet.i18n.LocaleContext instanceof TimeZoneAwareLocaleContext ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , ( ( TimeZoneAwareLocaleContext ) org.springframework.web.servlet.i18n.LocaleContext ) . getTimeZone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; Cookie org.springframework.web.servlet.i18n.Cookie = new Cookie ( STRING , STRING ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setCookieName ( STRING ) ; try { org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setAttribute ( WebUtils . ERROR_EXCEPTION_ATTRIBUTE , new ServletException ( ) ) ; Cookie org.springframework.web.servlet.i18n.Cookie = new Cookie ( STRING , STRING ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setDefaultTimeZone ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setCookieName ( STRING ) ; LocaleContext org.springframework.web.servlet.i18n.LocaleContext = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( java.util.Locale . java.util.Locale , org.springframework.web.servlet.i18n.LocaleContext . getLocale ( ) ) ; assertTrue ( org.springframework.web.servlet.i18n.LocaleContext instanceof TimeZoneAwareLocaleContext ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , ( ( TimeZoneAwareLocaleContext ) org.springframework.web.servlet.i18n.LocaleContext ) . getTimeZone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; Cookie org.springframework.web.servlet.i18n.Cookie = new Cookie ( STRING , STRING ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setCookieName ( STRING ) ; try { org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setAttribute ( WebUtils . ERROR_EXCEPTION_ATTRIBUTE , new ServletException ( ) ) ; Cookie org.springframework.web.servlet.i18n.Cookie = new Cookie ( STRING , STRING ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setDefaultTimeZone ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setCookieName ( STRING ) ; LocaleContext org.springframework.web.servlet.i18n.LocaleContext = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( STRING , org.springframework.web.servlet.i18n.LocaleContext . getLocale ( ) . getLanguage ( ) ) ; assertTrue ( org.springframework.web.servlet.i18n.LocaleContext instanceof TimeZoneAwareLocaleContext ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , ( ( TimeZoneAwareLocaleContext ) org.springframework.web.servlet.i18n.LocaleContext ) . getTimeZone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.i18n.MockHttpServletResponse = new MockHttpServletResponse ( ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setLocale ( org.springframework.web.servlet.i18n.MockHttpServletRequest , org.springframework.web.servlet.i18n.MockHttpServletResponse , new java.util.Locale ( STRING , STRING ) ) ; Cookie org.springframework.web.servlet.i18n.Cookie = org.springframework.web.servlet.i18n.MockHttpServletResponse . getCookie ( CookieLocaleResolver . DEFAULT_COOKIE_NAME ) ; assertNotNull ( org.springframework.web.servlet.i18n.Cookie ) ; assertEquals ( CookieLocaleResolver . DEFAULT_COOKIE_NAME , org.springframework.web.servlet.i18n.Cookie . getName ( ) ) ; assertEquals ( null , org.springframework.web.servlet.i18n.Cookie . getDomain ( ) ) ; assertEquals ( CookieLocaleResolver . DEFAULT_COOKIE_PATH , org.springframework.web.servlet.i18n.Cookie . getPath ( ) ) ; assertFalse ( org.springframework.web.servlet.i18n.Cookie . getSecure ( ) ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; java.util.Locale java.util.Locale = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocale ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( STRING , java.util.Locale . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.i18n.MockHttpServletResponse = new MockHttpServletResponse ( ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest , org.springframework.web.servlet.i18n.MockHttpServletResponse , new SimpleLocaleContext ( new java.util.Locale ( STRING , STRING ) ) ) ; Cookie org.springframework.web.servlet.i18n.Cookie = org.springframework.web.servlet.i18n.MockHttpServletResponse . getCookie ( CookieLocaleResolver . DEFAULT_COOKIE_NAME ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; LocaleContext org.springframework.web.servlet.i18n.LocaleContext = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( STRING , org.springframework.web.servlet.i18n.LocaleContext . getLocale ( ) . getLanguage ( ) ) ; assertTrue ( org.springframework.web.servlet.i18n.LocaleContext instanceof TimeZoneAwareLocaleContext ) ; assertNull ( ( ( TimeZoneAwareLocaleContext ) org.springframework.web.servlet.i18n.LocaleContext ) . getTimeZone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.i18n.MockHttpServletResponse = new MockHttpServletResponse ( ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest , org.springframework.web.servlet.i18n.MockHttpServletResponse , new SimpleTimeZoneAwareLocaleContext ( new java.util.Locale ( STRING , STRING ) , java.util.TimeZone . java.util.TimeZone ( STRING ) ) ) ; Cookie org.springframework.web.servlet.i18n.Cookie = org.springframework.web.servlet.i18n.MockHttpServletResponse . getCookie ( CookieLocaleResolver . DEFAULT_COOKIE_NAME ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; LocaleContext org.springframework.web.servlet.i18n.LocaleContext = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( STRING , org.springframework.web.servlet.i18n.LocaleContext . getLocale ( ) . getLanguage ( ) ) ; assertTrue ( org.springframework.web.servlet.i18n.LocaleContext instanceof TimeZoneAwareLocaleContext ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , ( ( TimeZoneAwareLocaleContext ) org.springframework.web.servlet.i18n.LocaleContext ) . getTimeZone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.i18n.MockHttpServletResponse = new MockHttpServletResponse ( ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest , org.springframework.web.servlet.i18n.MockHttpServletResponse , new SimpleTimeZoneAwareLocaleContext ( null , java.util.TimeZone . java.util.TimeZone ( STRING ) ) ) ; Cookie org.springframework.web.servlet.i18n.Cookie = org.springframework.web.servlet.i18n.MockHttpServletResponse . getCookie ( CookieLocaleResolver . DEFAULT_COOKIE_NAME ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; LocaleContext org.springframework.web.servlet.i18n.LocaleContext = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( java.util.Locale . java.util.Locale , org.springframework.web.servlet.i18n.LocaleContext . getLocale ( ) ) ; assertTrue ( org.springframework.web.servlet.i18n.LocaleContext instanceof TimeZoneAwareLocaleContext ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , ( ( TimeZoneAwareLocaleContext ) org.springframework.web.servlet.i18n.LocaleContext ) . getTimeZone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.i18n.MockHttpServletResponse = new MockHttpServletResponse ( ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setLocale ( org.springframework.web.servlet.i18n.MockHttpServletRequest , org.springframework.web.servlet.i18n.MockHttpServletResponse , new java.util.Locale ( STRING , STRING ) ) ; Cookie org.springframework.web.servlet.i18n.Cookie = org.springframework.web.servlet.i18n.MockHttpServletResponse . getCookie ( CookieLocaleResolver . DEFAULT_COOKIE_NAME ) ; assertNotNull ( org.springframework.web.servlet.i18n.Cookie ) ; assertEquals ( CookieLocaleResolver . DEFAULT_COOKIE_NAME , org.springframework.web.servlet.i18n.Cookie . getName ( ) ) ; assertEquals ( null , org.springframework.web.servlet.i18n.Cookie . getDomain ( ) ) ; assertEquals ( CookieLocaleResolver . DEFAULT_COOKIE_PATH , org.springframework.web.servlet.i18n.Cookie . getPath ( ) ) ; assertFalse ( org.springframework.web.servlet.i18n.Cookie . getSecure ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.i18n.Cookie . getValue ( ) ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; java.util.Locale java.util.Locale = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocale ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( STRING , java.util.Locale . java.lang.String ( ) ) ; assertEquals ( STRING , java.util.Locale . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.i18n.MockHttpServletResponse = new MockHttpServletResponse ( ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setLanguageTagCompliant ( true ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setLocale ( org.springframework.web.servlet.i18n.MockHttpServletRequest , org.springframework.web.servlet.i18n.MockHttpServletResponse , new java.util.Locale ( STRING , STRING ) ) ; Cookie org.springframework.web.servlet.i18n.Cookie = org.springframework.web.servlet.i18n.MockHttpServletResponse . getCookie ( CookieLocaleResolver . DEFAULT_COOKIE_NAME ) ; assertNotNull ( org.springframework.web.servlet.i18n.Cookie ) ; assertEquals ( CookieLocaleResolver . DEFAULT_COOKIE_NAME , org.springframework.web.servlet.i18n.Cookie . getName ( ) ) ; assertEquals ( null , org.springframework.web.servlet.i18n.Cookie . getDomain ( ) ) ; assertEquals ( CookieLocaleResolver . DEFAULT_COOKIE_PATH , org.springframework.web.servlet.i18n.Cookie . getPath ( ) ) ; assertFalse ( org.springframework.web.servlet.i18n.Cookie . getSecure ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.i18n.Cookie . getValue ( ) ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setLanguageTagCompliant ( true ) ; java.util.Locale java.util.Locale = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocale ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( STRING , java.util.Locale . java.lang.String ( ) ) ; assertEquals ( STRING , java.util.Locale . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.i18n.MockHttpServletResponse = new MockHttpServletResponse ( ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setCookieName ( STRING ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setCookieDomain ( STRING ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setCookiePath ( STRING ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setCookieMaxAge ( NUMBER ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setCookieSecure ( true ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setLocale ( org.springframework.web.servlet.i18n.MockHttpServletRequest , org.springframework.web.servlet.i18n.MockHttpServletResponse , new java.util.Locale ( STRING , STRING ) ) ; Cookie org.springframework.web.servlet.i18n.Cookie = org.springframework.web.servlet.i18n.MockHttpServletResponse . getCookie ( STRING ) ; assertNotNull ( org.springframework.web.servlet.i18n.Cookie ) ; assertEquals ( STRING , org.springframework.web.servlet.i18n.Cookie . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.i18n.Cookie . getDomain ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.i18n.Cookie . getPath ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.i18n.Cookie . getMaxAge ( ) ) ; assertTrue ( org.springframework.web.servlet.i18n.Cookie . getSecure ( ) ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setCookieName ( STRING ) ; java.util.Locale java.util.Locale = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocale ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( STRING , java.util.Locale . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; java.util.Locale java.util.Locale = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocale ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( org.springframework.web.servlet.i18n.MockHttpServletRequest . getLocale ( ) , java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; LocaleContext org.springframework.web.servlet.i18n.LocaleContext = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( org.springframework.web.servlet.i18n.MockHttpServletRequest . getLocale ( ) , org.springframework.web.servlet.i18n.LocaleContext . getLocale ( ) ) ; assertTrue ( org.springframework.web.servlet.i18n.LocaleContext instanceof TimeZoneAwareLocaleContext ) ; assertNull ( ( ( TimeZoneAwareLocaleContext ) org.springframework.web.servlet.i18n.LocaleContext ) . getTimeZone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setDefaultLocale ( java.util.Locale . java.util.Locale ) ; java.util.Locale java.util.Locale = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocale ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( java.util.Locale . java.util.Locale , java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setDefaultLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setDefaultTimeZone ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; LocaleContext org.springframework.web.servlet.i18n.LocaleContext = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( java.util.Locale . java.util.Locale , org.springframework.web.servlet.i18n.LocaleContext . getLocale ( ) ) ; assertTrue ( org.springframework.web.servlet.i18n.LocaleContext instanceof TimeZoneAwareLocaleContext ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , ( ( TimeZoneAwareLocaleContext ) org.springframework.web.servlet.i18n.LocaleContext ) . getTimeZone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; Cookie org.springframework.web.servlet.i18n.Cookie = new Cookie ( CookieLocaleResolver . DEFAULT_COOKIE_NAME , STRING ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; java.util.Locale java.util.Locale = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocale ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( org.springframework.web.servlet.i18n.MockHttpServletRequest . getLocale ( ) , java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; Cookie org.springframework.web.servlet.i18n.Cookie = new Cookie ( CookieLocaleResolver . DEFAULT_COOKIE_NAME , STRING ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; LocaleContext org.springframework.web.servlet.i18n.LocaleContext = org.springframework.web.servlet.i18n.CookieLocaleResolver . resolveLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest ) ; assertEquals ( org.springframework.web.servlet.i18n.MockHttpServletRequest . getLocale ( ) , org.springframework.web.servlet.i18n.LocaleContext . getLocale ( ) ) ; assertTrue ( org.springframework.web.servlet.i18n.LocaleContext instanceof TimeZoneAwareLocaleContext ) ; assertNull ( ( ( TimeZoneAwareLocaleContext ) org.springframework.web.servlet.i18n.LocaleContext ) . getTimeZone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; Cookie org.springframework.web.servlet.i18n.Cookie = new Cookie ( CookieLocaleResolver . DEFAULT_COOKIE_NAME , java.util.Locale . java.util.Locale . java.lang.String ( ) ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; MockHttpServletResponse org.springframework.web.servlet.i18n.MockHttpServletResponse = new MockHttpServletResponse ( ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setLocale ( org.springframework.web.servlet.i18n.MockHttpServletRequest , org.springframework.web.servlet.i18n.MockHttpServletResponse , null ) ; java.util.Locale java.util.Locale = ( java.util.Locale ) org.springframework.web.servlet.i18n.MockHttpServletRequest . getAttribute ( CookieLocaleResolver . LOCALE_REQUEST_ATTRIBUTE_NAME ) ; assertEquals ( java.util.Locale . java.util.Locale , java.util.Locale ) ; Cookie [] org.springframework.web.servlet.i18n.Cookie[] = org.springframework.web.servlet.i18n.MockHttpServletResponse . getCookies ( ) ; assertEquals ( NUMBER , cookies . length ) ; Cookie org.springframework.web.servlet.i18n.Cookie = org.springframework.web.servlet.i18n.Cookie[] [ NUMBER ] ; assertEquals ( CookieLocaleResolver . DEFAULT_COOKIE_NAME , org.springframework.web.servlet.i18n.Cookie . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.i18n.Cookie . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; Cookie org.springframework.web.servlet.i18n.Cookie = new Cookie ( CookieLocaleResolver . DEFAULT_COOKIE_NAME , java.util.Locale . java.util.Locale . java.lang.String ( ) ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; MockHttpServletResponse org.springframework.web.servlet.i18n.MockHttpServletResponse = new MockHttpServletResponse ( ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest , org.springframework.web.servlet.i18n.MockHttpServletResponse , null ) ; java.util.Locale java.util.Locale = ( java.util.Locale ) org.springframework.web.servlet.i18n.MockHttpServletRequest . getAttribute ( CookieLocaleResolver . LOCALE_REQUEST_ATTRIBUTE_NAME ) ; assertEquals ( java.util.Locale . java.util.Locale , java.util.Locale ) ; java.util.TimeZone java.util.TimeZone = ( java.util.TimeZone ) org.springframework.web.servlet.i18n.MockHttpServletRequest . getAttribute ( CookieLocaleResolver . TIME_ZONE_REQUEST_ATTRIBUTE_NAME ) ; assertNull ( java.util.TimeZone ) ; Cookie [] org.springframework.web.servlet.i18n.Cookie[] = org.springframework.web.servlet.i18n.MockHttpServletResponse . getCookies ( ) ; assertEquals ( NUMBER , cookies . length ) ; Cookie org.springframework.web.servlet.i18n.Cookie = org.springframework.web.servlet.i18n.Cookie[] [ NUMBER ] ; assertEquals ( CookieLocaleResolver . DEFAULT_COOKIE_NAME , org.springframework.web.servlet.i18n.Cookie . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.i18n.Cookie . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; Cookie org.springframework.web.servlet.i18n.Cookie = new Cookie ( CookieLocaleResolver . DEFAULT_COOKIE_NAME , java.util.Locale . java.util.Locale . java.lang.String ( ) ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; MockHttpServletResponse org.springframework.web.servlet.i18n.MockHttpServletResponse = new MockHttpServletResponse ( ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setDefaultLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setLocale ( org.springframework.web.servlet.i18n.MockHttpServletRequest , org.springframework.web.servlet.i18n.MockHttpServletResponse , null ) ; java.util.Locale java.util.Locale = ( java.util.Locale ) org.springframework.web.servlet.i18n.MockHttpServletRequest . getAttribute ( CookieLocaleResolver . LOCALE_REQUEST_ATTRIBUTE_NAME ) ; assertEquals ( java.util.Locale . java.util.Locale , java.util.Locale ) ; Cookie [] org.springframework.web.servlet.i18n.Cookie[] = org.springframework.web.servlet.i18n.MockHttpServletResponse . getCookies ( ) ; assertEquals ( NUMBER , cookies . length ) ; Cookie org.springframework.web.servlet.i18n.Cookie = org.springframework.web.servlet.i18n.Cookie[] [ NUMBER ] ; assertEquals ( CookieLocaleResolver . DEFAULT_COOKIE_NAME , org.springframework.web.servlet.i18n.Cookie . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.i18n.Cookie . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.i18n.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; Cookie org.springframework.web.servlet.i18n.Cookie = new Cookie ( CookieLocaleResolver . DEFAULT_COOKIE_NAME , java.util.Locale . java.util.Locale . java.lang.String ( ) ) ; org.springframework.web.servlet.i18n.MockHttpServletRequest . setCookies ( org.springframework.web.servlet.i18n.Cookie ) ; MockHttpServletResponse org.springframework.web.servlet.i18n.MockHttpServletResponse = new MockHttpServletResponse ( ) ; CookieLocaleResolver org.springframework.web.servlet.i18n.CookieLocaleResolver = new CookieLocaleResolver ( ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setDefaultLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setDefaultTimeZone ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; org.springframework.web.servlet.i18n.CookieLocaleResolver . setLocaleContext ( org.springframework.web.servlet.i18n.MockHttpServletRequest , org.springframework.web.servlet.i18n.MockHttpServletResponse , null ) ; java.util.Locale java.util.Locale = ( java.util.Locale ) org.springframework.web.servlet.i18n.MockHttpServletRequest . getAttribute ( CookieLocaleResolver . LOCALE_REQUEST_ATTRIBUTE_NAME ) ; assertEquals ( java.util.Locale . java.util.Locale , java.util.Locale ) ; java.util.TimeZone java.util.TimeZone = ( java.util.TimeZone ) org.springframework.web.servlet.i18n.MockHttpServletRequest . getAttribute ( CookieLocaleResolver . TIME_ZONE_REQUEST_ATTRIBUTE_NAME ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , java.util.TimeZone ) ; Cookie [] org.springframework.web.servlet.i18n.Cookie[] = org.springframework.web.servlet.i18n.MockHttpServletResponse . getCookies ( ) ; assertEquals ( NUMBER , cookies . length ) ; Cookie org.springframework.web.servlet.i18n.Cookie = org.springframework.web.servlet.i18n.Cookie[] [ NUMBER ] ; assertEquals ( CookieLocaleResolver . DEFAULT_COOKIE_NAME , org.springframework.web.servlet.i18n.Cookie . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.i18n.Cookie . getValue ( ) ) ; }  <METHOD_END>
