<METHOD_START> public void ( ) { this( java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) ); }  <METHOD_END>
<METHOD_START> protected void ( long long ) { super( STRING , STRING , true ); this . long = long ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET , produces = MediaType . APPLICATION_OCTET_STREAM_VALUE ) public void void ( @ RequestParam ( defaultValue = STRING ) boolean boolean , HttpServletRequest org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , HttpServletResponse org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse )					throws java.io.IOException , org.springframework.boot.actuate.endpoint.mvc.ServletException { if ( ! isEnabled ( ) ) { org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse . setStatus ( HttpStatus . NOT_FOUND . value ( ) ) ; return; } try { if ( this . java.util.concurrent.locks.Lock . boolean ( this . long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) { try { void ( boolean , org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse ) ; return; } finally { this . java.util.concurrent.locks.Lock . void ( ) ; } } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse . setStatus ( HttpStatus . TOO_MANY_REQUESTS . value ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean , HttpServletRequest org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , HttpServletResponse org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse )					throws java.io.IOException , org.springframework.boot.actuate.endpoint.mvc.ServletException , java.lang.InterruptedException { if ( this . org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.HeapDumper == null ) { this . org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.HeapDumper = org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.HeapDumper ( ) ; } java.io.File java.io.File = java.io.File ( boolean ) ; try { this . org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.HeapDumper . void ( java.io.File , boolean ) ; void ( java.io.File , org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse ) ; } finally { java.io.File . boolean ( ) ; } }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( boolean boolean ) throws java.io.IOException { java.lang.String java.lang.String = new java.text.SimpleDateFormat ( STRING ) . java.lang.String ( new java.util.Date ( ) ) ; java.io.File java.io.File = java.io.File . java.io.File ( STRING + java.lang.String + ( boolean ? STRING : STRING ) , STRING ) ; java.io.File . boolean ( ) ; return java.io.File ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.HeapDumper org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.HeapDumper ( ) org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.HeapDumperUnavailableException { return new org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.HotSpotDiagnosticMXBeanHeapDumper ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.io.File java.io.File , HttpServletRequest org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , HttpServletResponse org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse ) throws org.springframework.boot.actuate.endpoint.mvc.ServletException , java.io.IOException { org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse . setContentType ( STRING ) ; org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse . setHeader ( STRING , STRING + ( java.io.File . java.lang.String ( ) + STRING ) + STRING ) ; try { java.io.InputStream java.io.InputStream = new java.io.FileInputStream ( java.io.File ) ; try { java.util.zip.GZIPOutputStream java.util.zip.GZIPOutputStream = new java.util.zip.GZIPOutputStream ( org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse . getOutputStream ( ) ) ; StreamUtils . copy ( java.io.InputStream , java.util.zip.GZIPOutputStream ) ; java.util.zip.GZIPOutputStream . void ( ) ; } catch ( java.lang.NullPointerException java.lang.NullPointerException ) {			} finally { try { java.io.InputStream . void ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) {				} } } catch ( java.io.FileNotFoundException java.io.FileNotFoundException ) {		} }  <METHOD_END>
<METHOD_START> void void ( java.io.File java.io.File , boolean boolean ) throws java.io.IOException , java.lang.InterruptedException ;  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void ( ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . resolveClassName ( STRING , null ) ; this . java.lang.Object = java.lang.management.ManagementFactory . java.lang.management.PlatformManagedObject ( ( java.lang.Class<java.lang.management.PlatformManagedObject> < java.lang.management.PlatformManagedObject > ) java.lang.Class<> ) ; this . java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<> , STRING , java.lang.String .class , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.HeapDumperUnavailableException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.File java.io.File , boolean boolean ) { ReflectionUtils . invokeMethod ( this . java.lang.reflect.Method , this . java.lang.Object , java.io.File . java.lang.String ( ) , boolean ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { super( java.lang.String , java.lang.Throwable ); }  <METHOD_END>
