<METHOD_START> public void ( Encoder < T > org.springframework.http.codec.Encoder<T> ) { Assert . notNull ( org.springframework.http.codec.Encoder<T> , STRING ) ; this . org.springframework.http.codec.Encoder<T> = org.springframework.http.codec.Encoder<T> ; this . java.util.List<org.springframework.http.codec.MediaType> = MediaType . asMediaTypes ( org.springframework.http.codec.Encoder<T> . getEncodableMimeTypes ( ) ) ; this . org.springframework.http.codec.MediaType = org.springframework.http.codec.MediaType ( this . java.util.List<org.springframework.http.codec.MediaType> ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.http.codec.MediaType org.springframework.http.codec.MediaType ( java.util.List<org.springframework.http.codec.MediaType> < MediaType > java.util.List<org.springframework.http.codec.MediaType> ) { return java.util.List<org.springframework.http.codec.MediaType> . stream ( ) . filter ( MediaType :: isConcrete ) . findFirst ( ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.codec.Encoder<T> < T > org.springframework.http.codec.Encoder<T> ( ) { return this . org.springframework.http.codec.Encoder<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.http.codec.MediaType> < MediaType > java.util.List<org.springframework.http.codec.MediaType> ( ) { return this . java.util.List<org.springframework.http.codec.MediaType> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ResolvableType org.springframework.http.codec.ResolvableType , MediaType org.springframework.http.codec.MediaType ) { return this . org.springframework.http.codec.Encoder<T> . canEncode ( org.springframework.http.codec.ResolvableType , org.springframework.http.codec.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.codec.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.codec.Mono<java.lang.Void> ( Publisher < ? extends T > org.springframework.http.codec.Publisher<? extends T> , ResolvableType org.springframework.http.codec.ResolvableType , MediaType org.springframework.http.codec.MediaType , ReactiveHttpOutputMessage org.springframework.http.codec.ReactiveHttpOutputMessage , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { MediaType org.springframework.http.codec.MediaType = org.springframework.http.codec.MediaType ( org.springframework.http.codec.ReactiveHttpOutputMessage , org.springframework.http.codec.MediaType ) ; Flux < DataBuffer > org.springframework.http.codec.Flux<org.springframework.http.codec.DataBuffer> = this . org.springframework.http.codec.Encoder<T> . encode ( org.springframework.http.codec.Publisher<> , org.springframework.http.codec.ReactiveHttpOutputMessage . bufferFactory ( ) , org.springframework.http.codec.ResolvableType , org.springframework.http.codec.MediaType , java.util.Map<java.lang.String,java.lang.Object> ) . mapError ( this :: java.lang.Throwable ) ; return boolean ( org.springframework.http.codec.MediaType ) ? org.springframework.http.codec.ReactiveHttpOutputMessage . writeAndFlushWith ( org.springframework.http.codec.Flux<org.springframework.http.codec.DataBuffer> . map ( Flux :: just ) ) : org.springframework.http.codec.ReactiveHttpOutputMessage . writeWith ( org.springframework.http.codec.Flux<org.springframework.http.codec.DataBuffer> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.http.codec.MediaType org.springframework.http.codec.MediaType ( ReactiveHttpOutputMessage org.springframework.http.codec.ReactiveHttpOutputMessage , MediaType org.springframework.http.codec.MediaType ) { MediaType org.springframework.http.codec.MediaType = org.springframework.http.codec.ReactiveHttpOutputMessage . getHeaders ( ) . getContentType ( ) ; if ( org.springframework.http.codec.MediaType != null ) { return org.springframework.http.codec.MediaType ; } MediaType org.springframework.http.codec.MediaType = this . org.springframework.http.codec.MediaType ; org.springframework.http.codec.MediaType = boolean ( org.springframework.http.codec.MediaType , org.springframework.http.codec.MediaType ) ? org.springframework.http.codec.MediaType : org.springframework.http.codec.MediaType ; if ( org.springframework.http.codec.MediaType != null ) { org.springframework.http.codec.MediaType = org.springframework.http.codec.MediaType ( org.springframework.http.codec.MediaType , org.springframework.http.codec.MediaType ) ; org.springframework.http.codec.ReactiveHttpOutputMessage . getHeaders ( ) . setContentType ( org.springframework.http.codec.MediaType ) ; } return org.springframework.http.codec.MediaType ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( MediaType org.springframework.http.codec.MediaType , MediaType org.springframework.http.codec.MediaType ) { return org.springframework.http.codec.MediaType == null || ! org.springframework.http.codec.MediaType . isConcrete ( ) || org.springframework.http.codec.MediaType . equals ( MediaType . APPLICATION_OCTET_STREAM ) && org.springframework.http.codec.MediaType != null ; }  <METHOD_END>
<METHOD_START> private static org.springframework.http.codec.MediaType org.springframework.http.codec.MediaType ( MediaType org.springframework.http.codec.MediaType , MediaType org.springframework.http.codec.MediaType ) { if ( org.springframework.http.codec.MediaType . getCharset ( ) == null && org.springframework.http.codec.MediaType != null && org.springframework.http.codec.MediaType . getCharset ( ) != null ) { return new MediaType ( org.springframework.http.codec.MediaType , org.springframework.http.codec.MediaType . getCharset ( ) ) ; } return org.springframework.http.codec.MediaType ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( MediaType org.springframework.http.codec.MediaType ) { return this . org.springframework.http.codec.Encoder<T> instanceof HttpMessageEncoder && ( ( HttpMessageEncoder < ? > ) this . org.springframework.http.codec.Encoder<T> ) . getStreamingMediaTypes ( ) . stream ( ) . anyMatch ( org.springframework.http.codec.MediaType :: isCompatibleWith ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Throwable java.lang.Throwable ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof ResponseStatusException ) { return java.lang.Throwable ; } return new ResponseStatusException ( HttpStatus . INTERNAL_SERVER_ERROR , STRING , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.codec.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.codec.Mono<java.lang.Void> ( Publisher < ? extends T > org.springframework.http.codec.Publisher<? extends T> , ResolvableType org.springframework.http.codec.ResolvableType , ResolvableType org.springframework.http.codec.ResolvableType , MediaType org.springframework.http.codec.MediaType , ServerHttpRequest org.springframework.http.codec.ServerHttpRequest , ServerHttpResponse org.springframework.http.codec.ServerHttpResponse , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.http.codec.ResolvableType , org.springframework.http.codec.ResolvableType , org.springframework.http.codec.MediaType , org.springframework.http.codec.ServerHttpRequest , org.springframework.http.codec.ServerHttpResponse ) ) ; java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,java.lang.Object> ) ; return org.springframework.http.codec.Mono<java.lang.Void> ( org.springframework.http.codec.Publisher<> , org.springframework.http.codec.ResolvableType , org.springframework.http.codec.MediaType , org.springframework.http.codec.ServerHttpResponse , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ResolvableType org.springframework.http.codec.ResolvableType , ResolvableType org.springframework.http.codec.ResolvableType , MediaType org.springframework.http.codec.MediaType , ServerHttpRequest org.springframework.http.codec.ServerHttpRequest , ServerHttpResponse org.springframework.http.codec.ServerHttpResponse ) { if ( this . org.springframework.http.codec.Encoder<T> instanceof HttpMessageEncoder ) { HttpMessageEncoder < ? > org.springframework.http.codec.HttpMessageEncoder<?> = ( HttpMessageEncoder < ? > ) this . org.springframework.http.codec.Encoder<T> ; return org.springframework.http.codec.HttpMessageEncoder<> . getEncodeHints ( org.springframework.http.codec.ResolvableType , org.springframework.http.codec.ResolvableType , org.springframework.http.codec.MediaType , org.springframework.http.codec.ServerHttpRequest , org.springframework.http.codec.ServerHttpResponse ) ; } return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; }  <METHOD_END>
