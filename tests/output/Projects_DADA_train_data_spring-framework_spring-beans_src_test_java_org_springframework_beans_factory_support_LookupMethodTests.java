<METHOD_START> @ Before public void void ( ) { org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.support.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.support.DefaultListableBeanFactory ) ; org.springframework.beans.factory.support.XmlBeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.beans.factory.support.LookupMethodTests> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.support.LookupMethodTests.AbstractBean org.springframework.beans.factory.support.LookupMethodTests.AbstractBean = ( org.springframework.beans.factory.support.LookupMethodTests.AbstractBean ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.support.LookupMethodTests.AbstractBean ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.support.LookupMethodTests.AbstractBean . org.springframework.beans.factory.support.TestBean ( ) ; assertEquals ( TestBean .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.support.LookupMethodTests.AbstractBean org.springframework.beans.factory.support.LookupMethodTests.AbstractBean = ( org.springframework.beans.factory.support.LookupMethodTests.AbstractBean ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.support.LookupMethodTests.AbstractBean ) ; TestBean org.springframework.beans.factory.support.TestBean = org.springframework.beans.factory.support.LookupMethodTests.AbstractBean . org.springframework.beans.factory.support.TestBean ( STRING ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.support.TestBean . getClass ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.support.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.support.LookupMethodTests.AbstractBean org.springframework.beans.factory.support.LookupMethodTests.AbstractBean = ( org.springframework.beans.factory.support.LookupMethodTests.AbstractBean ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.support.LookupMethodTests.AbstractBean ) ; TestBean org.springframework.beans.factory.support.TestBean = org.springframework.beans.factory.support.LookupMethodTests.AbstractBean . org.springframework.beans.factory.support.TestBean ( STRING ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.support.TestBean . getClass ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.support.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.support.LookupMethodTests.AbstractBean org.springframework.beans.factory.support.LookupMethodTests.AbstractBean = ( org.springframework.beans.factory.support.LookupMethodTests.AbstractBean ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.support.LookupMethodTests.AbstractBean ) ; TestBean org.springframework.beans.factory.support.TestBean = org.springframework.beans.factory.support.LookupMethodTests.AbstractBean . org.springframework.beans.factory.support.TestBean ( STRING , NUMBER ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.support.TestBean . getClass ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.support.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.support.LookupMethodTests.AbstractBean org.springframework.beans.factory.support.LookupMethodTests.AbstractBean = ( org.springframework.beans.factory.support.LookupMethodTests.AbstractBean ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.support.LookupMethodTests.AbstractBean ) ; try { org.springframework.beans.factory.support.LookupMethodTests.AbstractBean . org.springframework.beans.factory.support.TestBean ( STRING , NUMBER , NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.AbstractMethodError java.lang.AbstractMethodError ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.support.LookupMethodTests.AbstractBean org.springframework.beans.factory.support.LookupMethodTests.AbstractBean = ( org.springframework.beans.factory.support.LookupMethodTests.AbstractBean ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.support.LookupMethodTests.AbstractBean ) ; TestBean org.springframework.beans.factory.support.TestBean = org.springframework.beans.factory.support.LookupMethodTests.AbstractBean . org.springframework.beans.factory.support.TestBean ( STRING ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.support.TestBean . getClass ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.support.TestBean . getName ( ) ) ; assertTrue ( org.springframework.beans.factory.support.TestBean . isJedi ( ) ) ; }  <METHOD_END>
<METHOD_START> public abstract org.springframework.beans.factory.support.TestBean org.springframework.beans.factory.support.TestBean ( )  <METHOD_END>
<METHOD_START> public abstract org.springframework.beans.factory.support.TestBean org.springframework.beans.factory.support.TestBean ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public abstract org.springframework.beans.factory.support.TestBean org.springframework.beans.factory.support.TestBean ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public abstract org.springframework.beans.factory.support.TestBean org.springframework.beans.factory.support.TestBean ( java.lang.String java.lang.String , int int );  <METHOD_END>
<METHOD_START> public abstract org.springframework.beans.factory.support.TestBean org.springframework.beans.factory.support.TestBean ( java.lang.String java.lang.String , int int , int int );  <METHOD_END>
