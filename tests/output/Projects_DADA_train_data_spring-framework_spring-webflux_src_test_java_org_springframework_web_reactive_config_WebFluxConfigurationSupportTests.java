<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.reactive.config.ApplicationContext = org.springframework.web.reactive.config.ApplicationContext ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.WebFluxConfig .class ) ; java.lang.String java.lang.String = STRING ; RequestMappingHandlerMapping org.springframework.web.reactive.config.RequestMappingHandlerMapping = org.springframework.web.reactive.config.ApplicationContext . getBean ( java.lang.String , RequestMappingHandlerMapping .class ) ; assertNotNull ( org.springframework.web.reactive.config.RequestMappingHandlerMapping ) ; assertEquals ( NUMBER , org.springframework.web.reactive.config.RequestMappingHandlerMapping . getOrder ( ) ) ; assertTrue ( org.springframework.web.reactive.config.RequestMappingHandlerMapping . useSuffixPatternMatch ( ) ) ; assertTrue ( org.springframework.web.reactive.config.RequestMappingHandlerMapping . useTrailingSlashMatch ( ) ) ; assertTrue ( org.springframework.web.reactive.config.RequestMappingHandlerMapping . useRegisteredSuffixPatternMatch ( ) ) ; java.lang.String = STRING ; RequestedContentTypeResolver org.springframework.web.reactive.config.RequestedContentTypeResolver = org.springframework.web.reactive.config.ApplicationContext . getBean ( java.lang.String , RequestedContentTypeResolver .class ) ; assertSame ( org.springframework.web.reactive.config.RequestedContentTypeResolver , org.springframework.web.reactive.config.RequestMappingHandlerMapping . getContentTypeResolver ( ) ) ; ServerWebExchange org.springframework.web.reactive.config.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; java.util.List<org.springframework.web.reactive.config.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.config.MediaType> = java.util.Collections . java.util.List ( MediaType . APPLICATION_JSON ) ; assertEquals ( java.util.List<org.springframework.web.reactive.config.MediaType> , org.springframework.web.reactive.config.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.config.ServerWebExchange ) ) ; org.springframework.web.reactive.config.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.Object> ( ) , org.springframework.web.reactive.config.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.config.ServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.reactive.config.ApplicationContext = org.springframework.web.reactive.config.ApplicationContext ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.CustomPatchMatchConfig .class ) ; java.lang.String java.lang.String = STRING ; RequestMappingHandlerMapping org.springframework.web.reactive.config.RequestMappingHandlerMapping = org.springframework.web.reactive.config.ApplicationContext . getBean ( java.lang.String , RequestMappingHandlerMapping .class ) ; assertNotNull ( org.springframework.web.reactive.config.RequestMappingHandlerMapping ) ; assertFalse ( org.springframework.web.reactive.config.RequestMappingHandlerMapping . useSuffixPatternMatch ( ) ) ; assertFalse ( org.springframework.web.reactive.config.RequestMappingHandlerMapping . useTrailingSlashMatch ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.reactive.config.ApplicationContext = org.springframework.web.reactive.config.ApplicationContext ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.WebFluxConfig .class ) ; java.lang.String java.lang.String = STRING ; RequestMappingHandlerAdapter org.springframework.web.reactive.config.RequestMappingHandlerAdapter = org.springframework.web.reactive.config.ApplicationContext . getBean ( java.lang.String , RequestMappingHandlerAdapter .class ) ; assertNotNull ( org.springframework.web.reactive.config.RequestMappingHandlerAdapter ) ; java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> = org.springframework.web.reactive.config.RequestMappingHandlerAdapter . getMessageCodecConfigurer ( ) . getReaders ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> . size ( ) ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> , forClass ( byte [] .class ) , APPLICATION_OCTET_STREAM ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> , forClass ( java.nio.ByteBuffer .class ) , APPLICATION_OCTET_STREAM ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> , forClass ( java.lang.String .class ) , TEXT_PLAIN ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> , forClass ( Resource .class ) , IMAGE_PNG ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> , forClassWithGenerics ( MultiValueMap .class , java.lang.String .class , java.lang.String .class ) , APPLICATION_FORM_URLENCODED ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> , forClass ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.TestBean .class ) , APPLICATION_XML ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> , forClass ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.TestBean .class ) , APPLICATION_JSON ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> , forClass ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.TestBean .class ) , null ) ; WebBindingInitializer org.springframework.web.reactive.config.WebBindingInitializer = org.springframework.web.reactive.config.RequestMappingHandlerAdapter . getWebBindingInitializer ( ) ; assertNotNull ( org.springframework.web.reactive.config.WebBindingInitializer ) ; WebExchangeDataBinder org.springframework.web.reactive.config.WebExchangeDataBinder = new WebExchangeDataBinder ( new java.lang.Object ( ) ) ; org.springframework.web.reactive.config.WebBindingInitializer . initBinder ( org.springframework.web.reactive.config.WebExchangeDataBinder ) ; java.lang.String = STRING ; ConversionService org.springframework.web.reactive.config.ConversionService = org.springframework.web.reactive.config.ApplicationContext . getBean ( java.lang.String , ConversionService .class ) ; assertSame ( org.springframework.web.reactive.config.ConversionService , org.springframework.web.reactive.config.WebExchangeDataBinder . getConversionService ( ) ) ; java.lang.String = STRING ; Validator org.springframework.web.reactive.config.Validator = org.springframework.web.reactive.config.ApplicationContext . getBean ( java.lang.String , Validator .class ) ; assertSame ( org.springframework.web.reactive.config.Validator , org.springframework.web.reactive.config.WebExchangeDataBinder . getValidator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.reactive.config.ApplicationContext = org.springframework.web.reactive.config.ApplicationContext ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.CustomMessageConverterConfig .class ) ; java.lang.String java.lang.String = STRING ; RequestMappingHandlerAdapter org.springframework.web.reactive.config.RequestMappingHandlerAdapter = org.springframework.web.reactive.config.ApplicationContext . getBean ( java.lang.String , RequestMappingHandlerAdapter .class ) ; assertNotNull ( org.springframework.web.reactive.config.RequestMappingHandlerAdapter ) ; java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> = org.springframework.web.reactive.config.RequestMappingHandlerAdapter . getMessageCodecConfigurer ( ) . getReaders ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> . size ( ) ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> , forClass ( java.lang.String .class ) , TEXT_PLAIN ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> , forClass ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.TestBean .class ) , APPLICATION_XML ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.reactive.config.ApplicationContext = org.springframework.web.reactive.config.ApplicationContext ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.WebFluxConfig .class ) ; java.lang.String java.lang.String = STRING ; ResponseEntityResultHandler org.springframework.web.reactive.config.ResponseEntityResultHandler = org.springframework.web.reactive.config.ApplicationContext . getBean ( java.lang.String , ResponseEntityResultHandler .class ) ; assertNotNull ( org.springframework.web.reactive.config.ResponseEntityResultHandler ) ; assertEquals ( NUMBER , org.springframework.web.reactive.config.ResponseEntityResultHandler . getOrder ( ) ) ; java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> = org.springframework.web.reactive.config.ResponseEntityResultHandler . getMessageWriters ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> . size ( ) ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> , forClass ( byte [] .class ) , APPLICATION_OCTET_STREAM ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> , forClass ( java.nio.ByteBuffer .class ) , APPLICATION_OCTET_STREAM ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> , forClass ( java.lang.String .class ) , TEXT_PLAIN ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> , forClass ( Resource .class ) , IMAGE_PNG ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> , forClass ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.TestBean .class ) , APPLICATION_XML ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> , forClass ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.TestBean .class ) , APPLICATION_JSON ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> , forClass ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.TestBean .class ) , MediaType . parseMediaType ( STRING ) ) ; java.lang.String = STRING ; RequestedContentTypeResolver org.springframework.web.reactive.config.RequestedContentTypeResolver = org.springframework.web.reactive.config.ApplicationContext . getBean ( java.lang.String , RequestedContentTypeResolver .class ) ; assertSame ( org.springframework.web.reactive.config.RequestedContentTypeResolver , org.springframework.web.reactive.config.ResponseEntityResultHandler . getContentTypeResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.reactive.config.ApplicationContext = org.springframework.web.reactive.config.ApplicationContext ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.WebFluxConfig .class ) ; java.lang.String java.lang.String = STRING ; ResponseBodyResultHandler org.springframework.web.reactive.config.ResponseBodyResultHandler = org.springframework.web.reactive.config.ApplicationContext . getBean ( java.lang.String , ResponseBodyResultHandler .class ) ; assertNotNull ( org.springframework.web.reactive.config.ResponseBodyResultHandler ) ; assertEquals ( NUMBER , org.springframework.web.reactive.config.ResponseBodyResultHandler . getOrder ( ) ) ; java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> = org.springframework.web.reactive.config.ResponseBodyResultHandler . getMessageWriters ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> . size ( ) ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> , forClass ( byte [] .class ) , APPLICATION_OCTET_STREAM ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> , forClass ( java.nio.ByteBuffer .class ) , APPLICATION_OCTET_STREAM ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> , forClass ( java.lang.String .class ) , TEXT_PLAIN ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> , forClass ( Resource .class ) , IMAGE_PNG ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> , forClass ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.TestBean .class ) , APPLICATION_XML ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> , forClass ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.TestBean .class ) , APPLICATION_JSON ) ; void ( java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> , forClass ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.TestBean .class ) , null ) ; java.lang.String = STRING ; RequestedContentTypeResolver org.springframework.web.reactive.config.RequestedContentTypeResolver = org.springframework.web.reactive.config.ApplicationContext . getBean ( java.lang.String , RequestedContentTypeResolver .class ) ; assertSame ( org.springframework.web.reactive.config.RequestedContentTypeResolver , org.springframework.web.reactive.config.ResponseBodyResultHandler . getContentTypeResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.reactive.config.ApplicationContext = org.springframework.web.reactive.config.ApplicationContext ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.CustomViewResolverConfig .class ) ; java.lang.String java.lang.String = STRING ; ViewResolutionResultHandler org.springframework.web.reactive.config.ViewResolutionResultHandler = org.springframework.web.reactive.config.ApplicationContext . getBean ( java.lang.String , ViewResolutionResultHandler .class ) ; assertNotNull ( org.springframework.web.reactive.config.ViewResolutionResultHandler ) ; assertEquals ( Ordered . LOWEST_PRECEDENCE , org.springframework.web.reactive.config.ViewResolutionResultHandler . getOrder ( ) ) ; java.util.List<org.springframework.web.reactive.config.ViewResolver> < ViewResolver > java.util.List<org.springframework.web.reactive.config.ViewResolver> = org.springframework.web.reactive.config.ViewResolutionResultHandler . getViewResolvers ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.reactive.config.ViewResolver> . size ( ) ) ; assertEquals ( FreeMarkerViewResolver .class , java.util.List<org.springframework.web.reactive.config.ViewResolver> . get ( NUMBER ) . getClass ( ) ) ; java.util.List<org.springframework.web.reactive.config.View> < View > java.util.List<org.springframework.web.reactive.config.View> = org.springframework.web.reactive.config.ViewResolutionResultHandler . getDefaultViews ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.reactive.config.View> . size ( ) ) ; MimeType org.springframework.web.reactive.config.MimeType = MimeTypeUtils . parseMimeType ( STRING ) ; assertEquals ( org.springframework.web.reactive.config.MimeType , java.util.List<org.springframework.web.reactive.config.View> . get ( NUMBER ) . getSupportedMediaTypes ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.reactive.config.ApplicationContext = org.springframework.web.reactive.config.ApplicationContext ( org.springframework.web.reactive.config.WebFluxConfigurationSupportTests.CustomResourceHandlingConfig .class ) ; java.lang.String java.lang.String = STRING ; AbstractHandlerMapping org.springframework.web.reactive.config.AbstractHandlerMapping = org.springframework.web.reactive.config.ApplicationContext . getBean ( java.lang.String , AbstractHandlerMapping .class ) ; assertNotNull ( org.springframework.web.reactive.config.AbstractHandlerMapping ) ; assertEquals ( Ordered . LOWEST_PRECEDENCE - NUMBER , org.springframework.web.reactive.config.AbstractHandlerMapping . getOrder ( ) ) ; assertNotNull ( org.springframework.web.reactive.config.AbstractHandlerMapping . getPathHelper ( ) ) ; assertNotNull ( org.springframework.web.reactive.config.AbstractHandlerMapping . getPathMatcher ( ) ) ; SimpleUrlHandlerMapping org.springframework.web.reactive.config.SimpleUrlHandlerMapping = ( SimpleUrlHandlerMapping ) org.springframework.web.reactive.config.AbstractHandlerMapping ; WebHandler org.springframework.web.reactive.config.WebHandler = ( WebHandler ) org.springframework.web.reactive.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertNotNull ( org.springframework.web.reactive.config.WebHandler ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> , ResolvableType org.springframework.web.reactive.config.ResolvableType , MediaType org.springframework.web.reactive.config.MediaType ) { assertTrue ( java.util.List<org.springframework.web.reactive.config.HttpMessageReader<?>> . stream ( ) . anyMatch ( c -> mediaType == null || c . canRead ( type , mediaType ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> , ResolvableType org.springframework.web.reactive.config.ResolvableType , MediaType org.springframework.web.reactive.config.MediaType ) { assertTrue ( java.util.List<org.springframework.web.reactive.config.HttpMessageWriter<?>> . stream ( ) . anyMatch ( c -> mediaType == null || c . canWrite ( type , mediaType ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.config.ApplicationContext org.springframework.web.reactive.config.ApplicationContext ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { AnnotationConfigApplicationContext org.springframework.web.reactive.config.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.reactive.config.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; org.springframework.web.reactive.config.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.web.reactive.config.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PathMatchConfigurer org.springframework.web.reactive.config.PathMatchConfigurer ) { org.springframework.web.reactive.config.PathMatchConfigurer . setUseSuffixPatternMatch ( false ) ; org.springframework.web.reactive.config.PathMatchConfigurer . setUseTrailingSlashMatch ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ServerCodecConfigurer org.springframework.web.reactive.config.ServerCodecConfigurer ) { org.springframework.web.reactive.config.ServerCodecConfigurer . registerDefaults ( false ) ; org.springframework.web.reactive.config.ServerCodecConfigurer . customCodec ( ) . decoder ( StringDecoder . textPlainOnly ( true ) ) ; org.springframework.web.reactive.config.ServerCodecConfigurer . customCodec ( ) . decoder ( new Jaxb2XmlDecoder ( ) ) ; org.springframework.web.reactive.config.ServerCodecConfigurer . customCodec ( ) . encoder ( CharSequenceEncoder . textPlainOnly ( ) ) ; org.springframework.web.reactive.config.ServerCodecConfigurer . customCodec ( ) . encoder ( new Jaxb2XmlEncoder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ViewResolverRegistry org.springframework.web.reactive.config.ViewResolverRegistry ) { org.springframework.web.reactive.config.ViewResolverRegistry . freeMarker ( ) ; org.springframework.web.reactive.config.ViewResolverRegistry . defaultViews ( new HttpMessageWriterView ( new Jackson2JsonEncoder ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.config.FreeMarkerConfigurer org.springframework.web.reactive.config.FreeMarkerConfigurer ( ) { return new FreeMarkerConfigurer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ResourceHandlerRegistry org.springframework.web.reactive.config.ResourceHandlerRegistry ) { org.springframework.web.reactive.config.ResourceHandlerRegistry . addResourceHandler ( STRING ) . addResourceLocations ( STRING ) ; }  <METHOD_END>
