<METHOD_START> void ( ) {}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Field org.springframework.data.solr.core.query.Field ( ) { if ( this . org.springframework.data.solr.core.query.Node instanceof Criteria ) { return ( ( Criteria ) this . org.springframework.data.solr.core.query.Node ) . getField ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.Object java.lang.Object ) { org.springframework.data.solr.core.query.Node . is ( java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( float float ) { org.springframework.data.solr.core.query.Node . boost ( float ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( ) { org.springframework.data.solr.core.query.Node . not ( ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( ) { if ( this . isRoot ( ) ) { this . setNegating ( true ) ; } else { super. notOperator ( ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.String java.lang.String ) { org.springframework.data.solr.core.query.Node . endsWith ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.String java.lang.String ) { org.springframework.data.solr.core.query.Node . startsWith ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.String java.lang.String ) { org.springframework.data.solr.core.query.Node . contains ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.Object ... java.lang.Object[] ) { org.springframework.data.solr.core.query.Node . is ( java.lang.Object[] ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.Iterable<?> < ? > java.lang.Iterable<?> ) { org.springframework.data.solr.core.query.Node . is ( java.lang.Iterable<> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( ) { org.springframework.data.solr.core.query.Node . isNull ( ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( ) { org.springframework.data.solr.core.query.Node . isNotNull ( ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.String ... java.lang.String[] ) { org.springframework.data.solr.core.query.Node . contains ( java.lang.String[] ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> ) { org.springframework.data.solr.core.query.Node . contains ( java.lang.Iterable<java.lang.String> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.String ... java.lang.String[] ) { org.springframework.data.solr.core.query.Node . startsWith ( java.lang.String[] ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> ) { org.springframework.data.solr.core.query.Node . startsWith ( java.lang.Iterable<java.lang.String> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.String ... java.lang.String[] ) { org.springframework.data.solr.core.query.Node . endsWith ( java.lang.String[] ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> ) { org.springframework.data.solr.core.query.Node . endsWith ( java.lang.Iterable<java.lang.String> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.String java.lang.String ) { org.springframework.data.solr.core.query.Node . fuzzy ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.String java.lang.String , float float ) { org.springframework.data.solr.core.query.Node . fuzzy ( java.lang.String , float ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.String java.lang.String , int int ) { org.springframework.data.solr.core.query.Node . sloppy ( java.lang.String , int ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.String java.lang.String ) { org.springframework.data.solr.core.query.Node . expression ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { org.springframework.data.solr.core.query.Node . between ( java.lang.Object , java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , boolean boolean , boolean boolean ) { org.springframework.data.solr.core.query.Node . between ( java.lang.Object , java.lang.Object , boolean , boolean ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.Object java.lang.Object ) { org.springframework.data.solr.core.query.Node . lessThan ( java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.Object java.lang.Object ) { org.springframework.data.solr.core.query.Node . lessThanEqual ( java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.Object java.lang.Object ) { org.springframework.data.solr.core.query.Node . greaterThan ( java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.Object java.lang.Object ) { org.springframework.data.solr.core.query.Node . greaterThanEqual ( java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.Object ... java.lang.Object[] ) { org.springframework.data.solr.core.query.Node . in ( java.lang.Object[] ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.Iterable<?> < ? > java.lang.Iterable<?> ) { org.springframework.data.solr.core.query.Node . in ( java.lang.Iterable<> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( Point org.springframework.data.solr.core.query.Point , Distance org.springframework.data.solr.core.query.Distance ) { org.springframework.data.solr.core.query.Node . within ( org.springframework.data.solr.core.query.Point , org.springframework.data.solr.core.query.Distance ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( Box org.springframework.data.solr.core.query.Box ) { org.springframework.data.solr.core.query.Node . near ( org.springframework.data.solr.core.query.Box ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( Point org.springframework.data.solr.core.query.Point , Distance org.springframework.data.solr.core.query.Distance ) { org.springframework.data.solr.core.query.Node . near ( org.springframework.data.solr.core.query.Point , org.springframework.data.solr.core.query.Distance ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( Function org.springframework.data.solr.core.query.Function ) { org.springframework.data.solr.core.query.Node . function ( org.springframework.data.solr.core.query.Function ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( this . isOr ( ) ? STRING : STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '(' ) ; boolean boolean = true ; for ( Node org.springframework.data.solr.core.query.Node : this . java.util.List<org.springframework.data.solr.core.query.Criteria> ) { java.lang.String java.lang.String = org.springframework.data.solr.core.query.Node . toString ( ) ; if ( boolean ) { java.lang.String = java.lang.String . java.lang.String ( STRING , STRING ) . java.lang.String ( STRING , STRING ) ; boolean = false ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( ')' ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> void void ( Node org.springframework.data.solr.core.query.Node ) { if ( ! ( org.springframework.data.solr.core.query.Node instanceof Criteria ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } org.springframework.data.solr.core.query.Node . setParent ( this ) ; this . java.util.List<org.springframework.data.solr.core.query.Criteria> . add ( ( Criteria ) org.springframework.data.solr.core.query.Node ) ; this . org.springframework.data.solr.core.query.Node = org.springframework.data.solr.core.query.Node ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.data.solr.core.query.Criteria> < Criteria > java.util.Collection<org.springframework.data.solr.core.query.Criteria> ( ) { return java.util.Collections . java.util.Collection<org.springframework.data.solr.core.query.Criteria> ( java.util.List<org.springframework.data.solr.core.query.Criteria> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( Node org.springframework.data.solr.core.query.Node ) { void ( org.springframework.data.solr.core.query.Node ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( Node org.springframework.data.solr.core.query.Node ) { org.springframework.data.solr.core.query.Node . setPartIsOr ( true ) ; void ( org.springframework.data.solr.core.query.Node ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.String java.lang.String ) { if ( this . org.springframework.data.solr.core.query.Node instanceof org.springframework.data.solr.core.query.Crotch ) { ( ( org.springframework.data.solr.core.query.Crotch ) org.springframework.data.solr.core.query.Node ) . void ( new Criteria ( java.lang.String ) ) ; } else { org.springframework.data.solr.core.query.Crotch ( new Criteria ( java.lang.String ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.query.Crotch org.springframework.data.solr.core.query.Crotch ( java.lang.String java.lang.String ) { Criteria org.springframework.data.solr.core.query.Criteria = new Criteria ( java.lang.String ) ; org.springframework.data.solr.core.query.Criteria . setPartIsOr ( true ) ; if ( this . org.springframework.data.solr.core.query.Node instanceof org.springframework.data.solr.core.query.Crotch ) { ( ( org.springframework.data.solr.core.query.Crotch ) org.springframework.data.solr.core.query.Node ) . void ( org.springframework.data.solr.core.query.Criteria ) ; } else { org.springframework.data.solr.core.query.Crotch ( new Criteria ( java.lang.String ) ) ; } return this ; }  <METHOD_END>
