<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MetadataReader org.springframework.boot.test.autoconfigure.filter.MetadataReader , MetadataReaderFactory org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) throws java.io.IOException { if ( boolean ( ) ) { return ! ( boolean ( org.springframework.boot.test.autoconfigure.filter.MetadataReader , org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) && ! boolean ( org.springframework.boot.test.autoconfigure.filter.MetadataReader , org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) ) ; } return false ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( MetadataReader org.springframework.boot.test.autoconfigure.filter.MetadataReader , MetadataReaderFactory org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) throws java.io.IOException { if ( new FilterAnnotations ( this . java.lang.ClassLoader , org.springframework.boot.test.autoconfigure.filter.Filter[] ( org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType . org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType ) ) . anyMatches ( org.springframework.boot.test.autoconfigure.filter.MetadataReader , org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) ) { return true ; } if ( boolean ( ) && boolean ( org.springframework.boot.test.autoconfigure.filter.MetadataReader , org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) ) { return true ; } return false ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( MetadataReader org.springframework.boot.test.autoconfigure.filter.MetadataReader , MetadataReaderFactory org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) throws java.io.IOException { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.Set<java.lang.Class<?>> ( ) ) { if ( boolean ( org.springframework.boot.test.autoconfigure.filter.MetadataReader , org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory , java.lang.Class<> ) ) { return true ; } } for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.Set<java.lang.Class<?>> ( ) ) { if ( boolean ( org.springframework.boot.test.autoconfigure.filter.MetadataReader , org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory , java.lang.Class<> ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( MetadataReader org.springframework.boot.test.autoconfigure.filter.MetadataReader , MetadataReaderFactory org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) throws java.io.IOException { return new FilterAnnotations ( this . java.lang.ClassLoader , org.springframework.boot.test.autoconfigure.filter.Filter[] ( org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType . org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType ) ) . anyMatches ( org.springframework.boot.test.autoconfigure.filter.MetadataReader , org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected final boolean boolean ( MetadataReader org.springframework.boot.test.autoconfigure.filter.MetadataReader , MetadataReaderFactory org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory , java.lang.Class<?> < ? > java.lang.Class<?> )					throws java.io.IOException { AnnotationTypeFilter org.springframework.boot.test.autoconfigure.filter.AnnotationTypeFilter = new AnnotationTypeFilter ( ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ) java.lang.Class<> ) ; AssignableTypeFilter org.springframework.boot.test.autoconfigure.filter.AssignableTypeFilter = new AssignableTypeFilter ( java.lang.Class<> ) ; return org.springframework.boot.test.autoconfigure.filter.AnnotationTypeFilter . match ( org.springframework.boot.test.autoconfigure.filter.MetadataReader , org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) || org.springframework.boot.test.autoconfigure.filter.AssignableTypeFilter . match ( org.springframework.boot.test.autoconfigure.filter.MetadataReader , org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) ; }  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( )  <METHOD_END>
<METHOD_START> protected abstract org.springframework.boot.test.autoconfigure.filter.Filter [] org.springframework.boot.test.autoconfigure.filter.Filter[] ( org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType );  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( )  <METHOD_END>
<METHOD_START> protected abstract java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( )  <METHOD_END>
<METHOD_START> protected abstract java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { final int int = NUMBER ; int int = NUMBER ; int = int * int + ObjectUtils . hashCode ( boolean ( ) ) ; for ( org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType : org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType . org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType[] ( ) ) { int = int * int + ObjectUtils . nullSafeHashCode ( org.springframework.boot.test.autoconfigure.filter.Filter[] ( org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType ) ) ; } int = int * int + ObjectUtils . hashCode ( boolean ( ) ) ; int = int * int + ObjectUtils . nullSafeHashCode ( java.util.Set<java.lang.Class<?>> ( ) ) ; int = int * int + ObjectUtils . nullSafeHashCode ( java.util.Set<java.lang.Class<?>> ( ) ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Class<? extends org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter = ( org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter ) java.lang.Object ; boolean boolean = true ; boolean = boolean && boolean ( ) == org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter . boolean ( ) ; for ( org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType : org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType . org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType[] ( ) ) { boolean &= ObjectUtils . nullSafeEquals ( org.springframework.boot.test.autoconfigure.filter.Filter[] ( org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType ) , org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter . org.springframework.boot.test.autoconfigure.filter.Filter[] ( org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter.FilterType ) ) ; } boolean = boolean && boolean ( ) == org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter . boolean ( ) ; boolean = boolean && ObjectUtils . nullSafeEquals ( java.util.Set<java.lang.Class<?>> ( ) , org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter . java.util.Set<java.lang.Class<?>> ( ) ) ; boolean = boolean && ObjectUtils . nullSafeEquals ( java.util.Set<java.lang.Class<?>> ( ) , org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter . java.util.Set<java.lang.Class<?>> ( ) ) ; return boolean ; }  <METHOD_END>
