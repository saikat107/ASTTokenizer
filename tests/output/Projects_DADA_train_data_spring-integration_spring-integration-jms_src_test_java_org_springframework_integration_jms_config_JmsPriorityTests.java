<METHOD_START> @ Before public void void ( ) { ActiveMqTestUtils . prepare ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.jms.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.jms.config.MessageChannel . send ( org.springframework.integration.jms.config.Message<> ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = org.springframework.integration.jms.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.config.Message<> ) ; assertTrue ( org.springframework.integration.jms.config.Message<> . getPayload ( ) instanceof javax . javax.jms . javax.jms ) ; javax . javax.jms . javax.jms javax.jms.Message = ( javax . javax.jms . javax.jms ) org.springframework.integration.jms.config.Message<> . getPayload ( ) ; assertEquals ( NUMBER , javax.jms.Message . getJMSPriority ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.jms.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setPriority ( NUMBER ) . build ( ) ; org.springframework.integration.jms.config.MessageChannel . send ( org.springframework.integration.jms.config.Message<> ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = org.springframework.integration.jms.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.config.Message<> ) ; assertTrue ( org.springframework.integration.jms.config.Message<> . getPayload ( ) instanceof javax . javax.jms . javax.jms ) ; javax . javax.jms . javax.jms javax.jms.Message = ( javax . javax.jms . javax.jms ) org.springframework.integration.jms.config.Message<> . getPayload ( ) ; assertEquals ( NUMBER , javax.jms.Message . getJMSPriority ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.jms.config.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.jms.config.QueueChannel ) . build ( ) ; org.springframework.integration.jms.config.MessageChannel . send ( org.springframework.integration.jms.config.Message<> ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = org.springframework.integration.jms.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jms.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.jms.config.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setPriority ( NUMBER ) . setReplyChannel ( org.springframework.integration.jms.config.QueueChannel ) . build ( ) ; org.springframework.integration.jms.config.MessageChannel . send ( org.springframework.integration.jms.config.Message<> ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = org.springframework.integration.jms.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jms.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( javax . javax.jms . javax.jms javax.jms.Message , Session org.springframework.integration.jms.config.Session ) throws org.springframework.integration.jms.config.JMSException { java.lang.String java.lang.String = STRING + javax.jms.Message . getJMSPriority ( ) ; TextMessage org.springframework.integration.jms.config.TextMessage = org.springframework.integration.jms.config.Session . createTextMessage ( java.lang.String ) ; MessageProducer org.springframework.integration.jms.config.MessageProducer = org.springframework.integration.jms.config.Session . createProducer ( javax.jms.Message . getJMSReplyTo ( ) ) ; org.springframework.integration.jms.config.TextMessage . setJMSCorrelationID ( javax.jms.Message . getJMSMessageID ( ) ) ; org.springframework.integration.jms.config.MessageProducer . send ( org.springframework.integration.jms.config.TextMessage ) ; }  <METHOD_END>
