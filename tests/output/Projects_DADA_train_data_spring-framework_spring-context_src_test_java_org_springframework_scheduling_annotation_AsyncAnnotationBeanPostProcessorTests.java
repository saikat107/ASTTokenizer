<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.scheduling.annotation.ConfigurableApplicationContext = org.springframework.scheduling.annotation.ConfigurableApplicationContext ( new RootBeanDefinition ( AsyncAnnotationBeanPostProcessor .class ) ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.ConfigurableApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( java.lang.Object ) ) ; org.springframework.scheduling.annotation.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.scheduling.annotation.ConfigurableApplicationContext = org.springframework.scheduling.annotation.ConfigurableApplicationContext ( new RootBeanDefinition ( AsyncAnnotationBeanPostProcessor .class ) ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean = org.springframework.scheduling.annotation.ConfigurableApplicationContext . getBean ( STRING , org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean .class ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . void ( ) ; java.lang.Thread java.lang.Thread = java.lang.Thread . java.lang.Thread ( ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . void ( NUMBER ) ; java.lang.Thread java.lang.Thread = org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . java.lang.Thread ( ) ; assertNotSame ( java.lang.Thread , java.lang.Thread ) ; org.springframework.scheduling.annotation.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( AsyncAnnotationBeanPostProcessor .class ) ; ThreadPoolTaskExecutor org.springframework.scheduling.annotation.ThreadPoolTaskExecutor = new ThreadPoolTaskExecutor ( ) ; org.springframework.scheduling.annotation.ThreadPoolTaskExecutor . setThreadNamePrefix ( STRING ) ; org.springframework.scheduling.annotation.ThreadPoolTaskExecutor . afterPropertiesSet ( ) ; org.springframework.scheduling.annotation.BeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.scheduling.annotation.ThreadPoolTaskExecutor ) ; ConfigurableApplicationContext org.springframework.scheduling.annotation.ConfigurableApplicationContext = org.springframework.scheduling.annotation.ConfigurableApplicationContext ( org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean = org.springframework.scheduling.annotation.ConfigurableApplicationContext . getBean ( STRING , org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean .class ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . void ( ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . void ( NUMBER ) ; java.lang.Thread java.lang.Thread = org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . java.lang.Thread ( ) ; assertTrue ( java.lang.Thread . java.lang.String ( ) . boolean ( STRING ) ) ; org.springframework.scheduling.annotation.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.scheduling.annotation.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( AsyncAnnotationBeanPostProcessor .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ThreadPoolTaskExecutor .class ) ; org.springframework.scheduling.annotation.BeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests . org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.TestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING , org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean .class ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . void ( ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . void ( NUMBER ) ; java.lang.Thread java.lang.Thread = org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . java.lang.Thread ( ) ; assertTrue ( java.lang.Thread . java.lang.String ( ) . boolean ( STRING ) ) ; org.springframework.scheduling.annotation.StaticApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.scheduling.annotation.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( AsyncAnnotationBeanPostProcessor .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ThreadPoolTaskExecutor .class ) ; org.springframework.scheduling.annotation.BeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ThreadPoolTaskExecutor .class ) ; org.springframework.scheduling.annotation.BeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests . org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.TestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING , org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean .class ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . void ( ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . void ( NUMBER ) ; java.lang.Thread java.lang.Thread = org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . java.lang.Thread ( ) ; assertTrue ( java.lang.Thread . java.lang.String ( ) . boolean ( STRING ) ) ; org.springframework.scheduling.annotation.StaticApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericXmlApplicationContext org.springframework.scheduling.annotation.GenericXmlApplicationContext = new GenericXmlApplicationContext ( ) ; org.springframework.scheduling.annotation.GenericXmlApplicationContext . load ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests> ( ) ) ) ; org.springframework.scheduling.annotation.GenericXmlApplicationContext . refresh ( ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean = org.springframework.scheduling.annotation.GenericXmlApplicationContext . getBean ( STRING , org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean .class ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . void ( ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . void ( NUMBER ) ; java.lang.Thread java.lang.Thread = org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . java.lang.Thread ( ) ; assertTrue ( java.lang.Thread . java.lang.String ( ) . boolean ( STRING ) ) ; TestableAsyncUncaughtExceptionHandler org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler = org.springframework.scheduling.annotation.GenericXmlApplicationContext . getBean ( STRING , TestableAsyncUncaughtExceptionHandler .class ) ; assertFalse ( STRING , org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler . isCalled ( ) ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . void ( ) ; org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler . await ( NUMBER ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.TestBean .class , STRING ) ; org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler . assertCalledWith ( java.lang.reflect.Method , java.lang.UnsupportedOperationException .class ) ; org.springframework.scheduling.annotation.GenericXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.scheduling.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ConfigWithExceptionHandler .class ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean = org.springframework.scheduling.annotation.ConfigurableApplicationContext . getBean ( STRING , org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean .class ) ; TestableAsyncUncaughtExceptionHandler org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler = org.springframework.scheduling.annotation.ConfigurableApplicationContext . getBean ( STRING , TestableAsyncUncaughtExceptionHandler .class ) ; assertFalse ( STRING , org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler . isCalled ( ) ) ; java.util.concurrent.Future<java.lang.Object> < java.lang.Object > java.util.concurrent.Future<java.lang.Object> = org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . java.util.concurrent.Future<java.lang.Object> ( ) ; void ( java.util.concurrent.Future<java.lang.Object> , org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.scheduling.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ConfigWithExceptionHandler .class ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean = org.springframework.scheduling.annotation.ConfigurableApplicationContext . getBean ( STRING , org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean .class ) ; TestableAsyncUncaughtExceptionHandler org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler = org.springframework.scheduling.annotation.ConfigurableApplicationContext . getBean ( STRING , TestableAsyncUncaughtExceptionHandler .class ) ; assertFalse ( STRING , org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler . isCalled ( ) ) ; java.util.concurrent.Future<java.lang.Object> < java.lang.Object > java.util.concurrent.Future<java.lang.Object> = org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . org.springframework.scheduling.annotation.ListenableFuture<java.lang.Object> ( ) ; void ( java.util.concurrent.Future<java.lang.Object> , org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.concurrent.Future<java.lang.Object> < java.lang.Object > java.util.concurrent.Future<java.lang.Object> , TestableAsyncUncaughtExceptionHandler org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler ) { try { java.util.concurrent.Future<java.lang.Object> . java.lang.Object ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { fail ( STRING + java.lang.InterruptedException ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertEquals ( STRING , java.lang.UnsupportedOperationException .class , java.util.concurrent.ExecutionException . java.lang.Throwable ( ) . java.lang.Class<? extends java.lang.Throwable> ( ) ) ; } assertFalse ( STRING , org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler . isCalled ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.TestBean .class , STRING ) ; TestableAsyncUncaughtExceptionHandler org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler = new TestableAsyncUncaughtExceptionHandler ( ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( AsyncAnnotationBeanPostProcessor .class ) ; org.springframework.scheduling.annotation.BeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler ) ; ConfigurableApplicationContext org.springframework.scheduling.annotation.ConfigurableApplicationContext = org.springframework.scheduling.annotation.ConfigurableApplicationContext ( org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean = org.springframework.scheduling.annotation.ConfigurableApplicationContext . getBean ( STRING , org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean .class ) ; assertFalse ( STRING , org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler . isCalled ( ) ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . void ( ) ; org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler . await ( NUMBER ) ; org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler . assertCalledWith ( java.lang.reflect.Method , java.lang.UnsupportedOperationException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.TestBean .class , STRING ) ; TestableAsyncUncaughtExceptionHandler org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler = new TestableAsyncUncaughtExceptionHandler ( true ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( AsyncAnnotationBeanPostProcessor .class ) ; org.springframework.scheduling.annotation.BeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler ) ; org.springframework.scheduling.annotation.BeanDefinition . getPropertyValues ( ) . add ( STRING , new org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.DirectExecutor ( ) ) ; ConfigurableApplicationContext org.springframework.scheduling.annotation.ConfigurableApplicationContext = org.springframework.scheduling.annotation.ConfigurableApplicationContext ( org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean = org.springframework.scheduling.annotation.ConfigurableApplicationContext . getBean ( STRING , org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean .class ) ; assertFalse ( STRING , org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler . isCalled ( ) ) ; try { org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean . void ( ) ; org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler . assertCalledWith ( java.lang.reflect.Method , java.lang.UnsupportedOperationException .class ) ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.scheduling.annotation.ConfigurableApplicationContext org.springframework.scheduling.annotation.ConfigurableApplicationContext ( BeanDefinition org.springframework.scheduling.annotation.BeanDefinition ) { StaticApplicationContext org.springframework.scheduling.annotation.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests . org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.TestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; return org.springframework.scheduling.annotation.StaticApplicationContext ; }  <METHOD_END>
<METHOD_START> java.lang.Thread java.lang.Thread ( )  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> java.util.concurrent.Future<java.lang.Object> < java.lang.Object > java.util.concurrent.Future<java.lang.Object> ( )  <METHOD_END>
<METHOD_START> org.springframework.scheduling.annotation.ListenableFuture<java.lang.Object> < java.lang.Object > org.springframework.scheduling.annotation.ListenableFuture<java.lang.Object> ( )  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> void void ( long long );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Thread java.lang.Thread ( ) { return this . java.lang.Thread ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Async public void void ( ) { this . java.lang.Thread = java.lang.Thread . java.lang.Thread ( ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Async @ java.lang.Override public java.util.concurrent.Future<java.lang.Object> < java.lang.Object > java.util.concurrent.Future<java.lang.Object> ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Async @ java.lang.Override public org.springframework.scheduling.annotation.ListenableFuture<java.lang.Object> < java.lang.Object > org.springframework.scheduling.annotation.ListenableFuture<java.lang.Object> ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Async @ java.lang.Override public void void ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( long long ) { try { this . java.util.concurrent.CountDownLatch . boolean ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { java.lang.Runnable . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.ITestBean ( ) { return new org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessorTests.TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.scheduling.annotation.AsyncUncaughtExceptionHandler org.springframework.scheduling.annotation.AsyncUncaughtExceptionHandler ( ) { return org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler ( ) { return new TestableAsyncUncaughtExceptionHandler ( ) ; }  <METHOD_END>
