<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler = new SubProtocolWebSocketHandler ( mock ( MessageChannel .class ) , mock ( SubscribableChannel .class ) ) ; this . org.springframework.web.socket.config.annotation.TaskScheduler = mock ( TaskScheduler .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebMvcStompWebSocketEndpointRegistration org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration = new WebMvcStompWebSocketEndpointRegistration ( new java.lang.String [] { STRING } , this . org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler , this . org.springframework.web.socket.config.annotation.TaskScheduler ) ; MultiValueMap < HttpRequestHandler , java.lang.String > org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> = org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . getMappings ( ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . size ( ) ) ; java.util.Map . java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> < HttpRequestHandler , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> = org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . entrySet ( ) . iterator ( ) . next ( ) ; assertNotNull ( ( ( WebSocketHttpRequestHandler ) java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> . getKey ( ) ) . getWebSocketHandler ( ) ) ; assertEquals ( NUMBER , ( ( WebSocketHttpRequestHandler ) java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> . getKey ( ) ) . getHandshakeInterceptors ( ) . size ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) , java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebMvcStompWebSocketEndpointRegistration org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration = new WebMvcStompWebSocketEndpointRegistration ( new java.lang.String [] { STRING } , this . org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler , this . org.springframework.web.socket.config.annotation.TaskScheduler ) ; org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . setAllowedOrigins ( ) ; MultiValueMap < HttpRequestHandler , java.lang.String > org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> = org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . getMappings ( ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . size ( ) ) ; WebSocketHttpRequestHandler org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler = ( WebSocketHttpRequestHandler ) org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . entrySet ( ) . iterator ( ) . next ( ) . getKey ( ) ; assertNotNull ( org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getWebSocketHandler ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) . size ( ) ) ; assertEquals ( OriginHandshakeInterceptor .class , org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) . get ( NUMBER ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebMvcStompWebSocketEndpointRegistration org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration = new WebMvcStompWebSocketEndpointRegistration ( new java.lang.String [] { STRING } , this . org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler , this . org.springframework.web.socket.config.annotation.TaskScheduler ) ; org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . setAllowedOrigins ( ) ; MultiValueMap < HttpRequestHandler , java.lang.String > org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> = org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . getMappings ( ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . size ( ) ) ; WebSocketHttpRequestHandler org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler = ( WebSocketHttpRequestHandler ) org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . entrySet ( ) . iterator ( ) . next ( ) . getKey ( ) ; assertNotNull ( org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getWebSocketHandler ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) . size ( ) ) ; assertEquals ( OriginHandshakeInterceptor .class , org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) . get ( NUMBER ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebMvcStompWebSocketEndpointRegistration org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration = new WebMvcStompWebSocketEndpointRegistration ( new java.lang.String [] { STRING } , this . org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler , this . org.springframework.web.socket.config.annotation.TaskScheduler ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . setAllowedOrigins ( java.lang.String ) . withSockJS ( ) ; MultiValueMap < HttpRequestHandler , java.lang.String > org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> = org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . getMappings ( ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . size ( ) ) ; SockJsHttpRequestHandler org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler = ( SockJsHttpRequestHandler ) org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . entrySet ( ) . iterator ( ) . next ( ) . getKey ( ) ; assertNotNull ( org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler . getSockJsService ( ) ) ; DefaultSockJsService org.springframework.web.socket.config.annotation.DefaultSockJsService = ( DefaultSockJsService ) org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler . getSockJsService ( ) ; assertTrue ( org.springframework.web.socket.config.annotation.DefaultSockJsService . getAllowedOrigins ( ) . contains ( java.lang.String ) ) ; assertFalse ( org.springframework.web.socket.config.annotation.DefaultSockJsService . shouldSuppressCors ( ) ) ; org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration = new WebMvcStompWebSocketEndpointRegistration ( new java.lang.String [] { STRING } , this . org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler , this . org.springframework.web.socket.config.annotation.TaskScheduler ) ; org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . withSockJS ( ) . setAllowedOrigins ( java.lang.String ) ; org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> = org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . getMappings ( ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . size ( ) ) ; org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler = ( SockJsHttpRequestHandler ) org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . entrySet ( ) . iterator ( ) . next ( ) . getKey ( ) ; assertNotNull ( org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler . getSockJsService ( ) ) ; org.springframework.web.socket.config.annotation.DefaultSockJsService = ( DefaultSockJsService ) org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler . getSockJsService ( ) ; assertTrue ( org.springframework.web.socket.config.annotation.DefaultSockJsService . getAllowedOrigins ( ) . contains ( java.lang.String ) ) ; assertFalse ( org.springframework.web.socket.config.annotation.DefaultSockJsService . shouldSuppressCors ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebMvcStompWebSocketEndpointRegistration org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration = new WebMvcStompWebSocketEndpointRegistration ( new java.lang.String [] { STRING } , this . org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler , this . org.springframework.web.socket.config.annotation.TaskScheduler ) ; org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . withSockJS ( ) . setSupressCors ( true ) ; MultiValueMap < HttpRequestHandler , java.lang.String > org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> = org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . getMappings ( ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . size ( ) ) ; SockJsHttpRequestHandler org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler = ( SockJsHttpRequestHandler ) org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . entrySet ( ) . iterator ( ) . next ( ) . getKey ( ) ; assertNotNull ( org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler . getSockJsService ( ) ) ; DefaultSockJsService org.springframework.web.socket.config.annotation.DefaultSockJsService = ( DefaultSockJsService ) org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler . getSockJsService ( ) ; assertTrue ( org.springframework.web.socket.config.annotation.DefaultSockJsService . shouldSuppressCors ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebMvcStompWebSocketEndpointRegistration org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration = new WebMvcStompWebSocketEndpointRegistration ( new java.lang.String [] { STRING } , this . org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler , this . org.springframework.web.socket.config.annotation.TaskScheduler ) ; DefaultHandshakeHandler org.springframework.web.socket.config.annotation.DefaultHandshakeHandler = new DefaultHandshakeHandler ( ) ; HttpSessionHandshakeInterceptor org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor = new HttpSessionHandshakeInterceptor ( ) ; org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . setHandshakeHandler ( org.springframework.web.socket.config.annotation.DefaultHandshakeHandler ) . addInterceptors ( org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor ) ; MultiValueMap < HttpRequestHandler , java.lang.String > org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> = org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . getMappings ( ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . size ( ) ) ; java.util.Map . java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> < HttpRequestHandler , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> = org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . entrySet ( ) . iterator ( ) . next ( ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) , java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> . getValue ( ) ) ; WebSocketHttpRequestHandler org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler = ( WebSocketHttpRequestHandler ) java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> . getKey ( ) ; assertNotNull ( org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getWebSocketHandler ( ) ) ; assertSame ( org.springframework.web.socket.config.annotation.DefaultHandshakeHandler , org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getHandshakeHandler ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) . size ( ) ) ; assertEquals ( org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor , org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) . get ( NUMBER ) ) ; assertEquals ( OriginHandshakeInterceptor .class , org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) . get ( NUMBER ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebMvcStompWebSocketEndpointRegistration org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration = new WebMvcStompWebSocketEndpointRegistration ( new java.lang.String [] { STRING } , this . org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler , this . org.springframework.web.socket.config.annotation.TaskScheduler ) ; DefaultHandshakeHandler org.springframework.web.socket.config.annotation.DefaultHandshakeHandler = new DefaultHandshakeHandler ( ) ; HttpSessionHandshakeInterceptor org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor = new HttpSessionHandshakeInterceptor ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . setHandshakeHandler ( org.springframework.web.socket.config.annotation.DefaultHandshakeHandler ) . addInterceptors ( org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor ) . setAllowedOrigins ( java.lang.String ) ; MultiValueMap < HttpRequestHandler , java.lang.String > org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> = org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . getMappings ( ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . size ( ) ) ; java.util.Map . java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> < HttpRequestHandler , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> = org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . entrySet ( ) . iterator ( ) . next ( ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) , java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> . getValue ( ) ) ; WebSocketHttpRequestHandler org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler = ( WebSocketHttpRequestHandler ) java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> . getKey ( ) ; assertNotNull ( org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getWebSocketHandler ( ) ) ; assertSame ( org.springframework.web.socket.config.annotation.DefaultHandshakeHandler , org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getHandshakeHandler ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) . size ( ) ) ; assertEquals ( org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor , org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) . get ( NUMBER ) ) ; assertEquals ( OriginHandshakeInterceptor .class , org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) . get ( NUMBER ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebMvcStompWebSocketEndpointRegistration org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration = new WebMvcStompWebSocketEndpointRegistration ( new java.lang.String [] { STRING } , this . org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler , this . org.springframework.web.socket.config.annotation.TaskScheduler ) ; DefaultHandshakeHandler org.springframework.web.socket.config.annotation.DefaultHandshakeHandler = new DefaultHandshakeHandler ( ) ; HttpSessionHandshakeInterceptor org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor = new HttpSessionHandshakeInterceptor ( ) ; org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . setHandshakeHandler ( org.springframework.web.socket.config.annotation.DefaultHandshakeHandler ) . addInterceptors ( org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor ) . withSockJS ( ) ; MultiValueMap < HttpRequestHandler , java.lang.String > org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> = org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . getMappings ( ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . size ( ) ) ; java.util.Map . java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> < HttpRequestHandler , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> = org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . entrySet ( ) . iterator ( ) . next ( ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) , java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> . getValue ( ) ) ; SockJsHttpRequestHandler org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler = ( SockJsHttpRequestHandler ) java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> . getKey ( ) ; assertNotNull ( org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler . getWebSocketHandler ( ) ) ; DefaultSockJsService org.springframework.web.socket.config.annotation.DefaultSockJsService = ( DefaultSockJsService ) org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler . getSockJsService ( ) ; assertNotNull ( org.springframework.web.socket.config.annotation.DefaultSockJsService ) ; java.util.Map<org.springframework.web.socket.config.annotation.TransportType,org.springframework.web.socket.config.annotation.TransportHandler> < TransportType , TransportHandler > java.util.Map<org.springframework.web.socket.config.annotation.TransportType,org.springframework.web.socket.config.annotation.TransportHandler> = org.springframework.web.socket.config.annotation.DefaultSockJsService . getTransportHandlers ( ) ; WebSocketTransportHandler org.springframework.web.socket.config.annotation.WebSocketTransportHandler = ( WebSocketTransportHandler ) java.util.Map<org.springframework.web.socket.config.annotation.TransportType,org.springframework.web.socket.config.annotation.TransportHandler> . get ( TransportType . WEBSOCKET ) ; assertSame ( org.springframework.web.socket.config.annotation.DefaultHandshakeHandler , org.springframework.web.socket.config.annotation.WebSocketTransportHandler . getHandshakeHandler ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.DefaultSockJsService . getHandshakeInterceptors ( ) . size ( ) ) ; assertEquals ( org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor , org.springframework.web.socket.config.annotation.DefaultSockJsService . getHandshakeInterceptors ( ) . get ( NUMBER ) ) ; assertEquals ( OriginHandshakeInterceptor .class , org.springframework.web.socket.config.annotation.DefaultSockJsService . getHandshakeInterceptors ( ) . get ( NUMBER ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebMvcStompWebSocketEndpointRegistration org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration = new WebMvcStompWebSocketEndpointRegistration ( new java.lang.String [] { STRING } , this . org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler , this . org.springframework.web.socket.config.annotation.TaskScheduler ) ; DefaultHandshakeHandler org.springframework.web.socket.config.annotation.DefaultHandshakeHandler = new DefaultHandshakeHandler ( ) ; HttpSessionHandshakeInterceptor org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor = new HttpSessionHandshakeInterceptor ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . setHandshakeHandler ( org.springframework.web.socket.config.annotation.DefaultHandshakeHandler ) . addInterceptors ( org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor ) . setAllowedOrigins ( java.lang.String ) . withSockJS ( ) ; MultiValueMap < HttpRequestHandler , java.lang.String > org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> = org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . getMappings ( ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . size ( ) ) ; java.util.Map . java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> < HttpRequestHandler , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> = org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . entrySet ( ) . iterator ( ) . next ( ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) , java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> . getValue ( ) ) ; SockJsHttpRequestHandler org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler = ( SockJsHttpRequestHandler ) java.util.Map.Entry<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.util.List<java.lang.String>> . getKey ( ) ; assertNotNull ( org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler . getWebSocketHandler ( ) ) ; DefaultSockJsService org.springframework.web.socket.config.annotation.DefaultSockJsService = ( DefaultSockJsService ) org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler . getSockJsService ( ) ; assertNotNull ( org.springframework.web.socket.config.annotation.DefaultSockJsService ) ; java.util.Map<org.springframework.web.socket.config.annotation.TransportType,org.springframework.web.socket.config.annotation.TransportHandler> < TransportType , TransportHandler > java.util.Map<org.springframework.web.socket.config.annotation.TransportType,org.springframework.web.socket.config.annotation.TransportHandler> = org.springframework.web.socket.config.annotation.DefaultSockJsService . getTransportHandlers ( ) ; WebSocketTransportHandler org.springframework.web.socket.config.annotation.WebSocketTransportHandler = ( WebSocketTransportHandler ) java.util.Map<org.springframework.web.socket.config.annotation.TransportType,org.springframework.web.socket.config.annotation.TransportHandler> . get ( TransportType . WEBSOCKET ) ; assertSame ( org.springframework.web.socket.config.annotation.DefaultHandshakeHandler , org.springframework.web.socket.config.annotation.WebSocketTransportHandler . getHandshakeHandler ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.DefaultSockJsService . getHandshakeInterceptors ( ) . size ( ) ) ; assertEquals ( org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor , org.springframework.web.socket.config.annotation.DefaultSockJsService . getHandshakeInterceptors ( ) . get ( NUMBER ) ) ; assertEquals ( OriginHandshakeInterceptor .class , org.springframework.web.socket.config.annotation.DefaultSockJsService . getHandshakeInterceptors ( ) . get ( NUMBER ) . getClass ( ) ) ; assertTrue ( org.springframework.web.socket.config.annotation.DefaultSockJsService . getAllowedOrigins ( ) . contains ( java.lang.String ) ) ; }  <METHOD_END>
