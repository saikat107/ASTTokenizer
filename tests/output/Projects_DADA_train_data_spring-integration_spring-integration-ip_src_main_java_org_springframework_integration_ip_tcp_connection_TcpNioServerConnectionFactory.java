<METHOD_START> public void ( int int ) { super( int ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = super. getPort ( ) ; java.nio.channels.ServerSocketChannel java.nio.channels.ServerSocketChannel = this . java.nio.channels.ServerSocketChannel ; if ( int == NUMBER && java.nio.channels.ServerSocketChannel != null ) { try { java.net.SocketAddress java.net.SocketAddress = java.nio.channels.ServerSocketChannel . java.net.SocketAddress ( ) ; if ( java.net.SocketAddress instanceof java.net.InetSocketAddress ) { int = ( ( java.net.InetSocketAddress ) java.net.SocketAddress ) . int ( ) ; } } catch ( java.io.IOException java.io.IOException ) {			} } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.SocketAddress java.net.SocketAddress ( ) { if ( this . java.nio.channels.ServerSocketChannel != null ) { try { return this . java.nio.channels.ServerSocketChannel . java.net.SocketAddress ( ) ; } catch ( java.io.IOException java.io.IOException ) {			} } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( getListener ( ) == null ) { logger . info ( this + STRING ) ; return; } try { this . java.nio.channels.ServerSocketChannel = java.nio.channels.ServerSocketChannel . java.nio.channels.ServerSocketChannel ( ) ; int int = super. getPort ( ) ; getTcpSocketSupport ( ) . postProcessServerSocket ( this . java.nio.channels.ServerSocketChannel . java.net.ServerSocket ( ) ) ; this . java.nio.channels.ServerSocketChannel . java.nio.channels.SelectableChannel ( false ) ; if ( getLocalAddress ( ) == null ) { this . java.nio.channels.ServerSocketChannel . java.net.ServerSocket ( ) . void ( new java.net.InetSocketAddress ( int ) , java.lang.Math . int ( getBacklog ( ) ) ) ; } else { java.net.InetAddress java.net.InetAddress = java.net.InetAddress . java.net.InetAddress ( getLocalAddress ( ) ) ; this . java.nio.channels.ServerSocketChannel . java.net.ServerSocket ( ) . void ( new java.net.InetSocketAddress ( java.net.InetAddress , int ) , java.lang.Math . int ( getBacklog ( ) ) ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( this + STRING ) ; } final java.nio.channels.Selector java.nio.channels.Selector = java.nio.channels.Selector . java.nio.channels.Selector ( ) ; if ( this . java.nio.channels.ServerSocketChannel == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( this + STRING ) ; } } else { this . java.nio.channels.ServerSocketChannel . java.nio.channels.SelectionKey ( java.nio.channels.Selector , java.nio.channels.SelectionKey . int ) ; setListening ( true ) ; publishServerListeningEvent ( int ( ) ) ; this . java.nio.channels.Selector = java.nio.channels.Selector ; void ( this . java.nio.channels.ServerSocketChannel , java.nio.channels.Selector ) ; } } catch ( java.io.IOException java.io.IOException ) { if ( isActive ( ) ) { logger . error ( STRING + int ( ) , java.io.IOException ) ; publishServerExceptionEvent ( java.io.IOException ) ; } void ( ) ; } finally { setListening ( false ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.nio.channels.ServerSocketChannel java.nio.channels.ServerSocketChannel , final java.nio.channels.Selector java.nio.channels.Selector ) throws java.io.IOException { while ( isActive ( ) ) { int int = getSoTimeout ( ) ; int int = NUMBER ; try { long long = int < NUMBER ? NUMBER : int ; if ( getDelayedReads ( ) . size ( ) > NUMBER && ( long == NUMBER || getReadDelay ( ) < long ) ) { long = getReadDelay ( ) ; } if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + getDelayedReads ( ) . size ( ) + STRING + long ) ; } int = java.nio.channels.Selector . int ( long ) ; processNioSelections ( int , java.nio.channels.Selector , java.nio.channels.ServerSocketChannel , this . java.util.Map<java.nio.channels.SocketChannel,org.springframework.integration.ip.tcp.connection.TcpNioConnection> ) ; } catch ( java.nio.channels.CancelledKeyException java.nio.channels.CancelledKeyException ) { logger . debug ( STRING ) ; } catch ( java.nio.channels.ClosedSelectorException java.nio.channels.ClosedSelectorException ) { if ( isActive ( ) ) { logger . error ( STRING , java.nio.channels.ClosedSelectorException ) ; publishServerExceptionEvent ( java.nio.channels.ClosedSelectorException ) ; break; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( final java.nio.channels.Selector java.nio.channels.Selector , java.nio.channels.ServerSocketChannel java.nio.channels.ServerSocketChannel , long long ) throws java.io.IOException { logger . debug ( STRING ) ; java.nio.channels.SocketChannel java.nio.channels.SocketChannel = java.nio.channels.ServerSocketChannel . java.nio.channels.SocketChannel ( ) ; if ( isShuttingDown ( ) ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + java.nio.channels.SocketChannel . java.net.Socket ( ) . java.net.InetAddress ( ) . java.lang.String ( ) + STRING ) ; } java.nio.channels.SocketChannel . void ( ) ; } else { try { java.nio.channels.SocketChannel . java.nio.channels.SelectableChannel ( false ) ; java.net.Socket java.net.Socket = java.nio.channels.SocketChannel . java.net.Socket ( ) ; setSocketAttributes ( java.net.Socket ) ; TcpNioConnection org.springframework.integration.ip.tcp.connection.TcpNioConnection = org.springframework.integration.ip.tcp.connection.TcpNioConnection ( java.nio.channels.SocketChannel ) ; if ( org.springframework.integration.ip.tcp.connection.TcpNioConnection == null ) { return; } org.springframework.integration.ip.tcp.connection.TcpNioConnection . setTaskExecutor ( getTaskExecutor ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNioConnection . setLastRead ( long ) ; if ( getSslHandshakeTimeout ( ) != null && org.springframework.integration.ip.tcp.connection.TcpNioConnection instanceof TcpNioSSLConnection ) { ( ( TcpNioSSLConnection ) org.springframework.integration.ip.tcp.connection.TcpNioConnection ) . setHandshakeTimeout ( getSslHandshakeTimeout ( ) ) ; } this . java.util.Map<java.nio.channels.SocketChannel,org.springframework.integration.ip.tcp.connection.TcpNioConnection> . put ( java.nio.channels.SocketChannel , org.springframework.integration.ip.tcp.connection.TcpNioConnection ) ; java.nio.channels.SocketChannel . java.nio.channels.SelectionKey ( java.nio.channels.Selector , java.nio.channels.SelectionKey . int , org.springframework.integration.ip.tcp.connection.TcpNioConnection ) ; org.springframework.integration.ip.tcp.connection.TcpNioConnection . publishConnectionOpenEvent ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING , java.lang.Exception ) ; java.nio.channels.SocketChannel . void ( ) ; } } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ip.tcp.connection.TcpNioConnection org.springframework.integration.ip.tcp.connection.TcpNioConnection ( java.nio.channels.SocketChannel java.nio.channels.SocketChannel ) { try { TcpNioConnection org.springframework.integration.ip.tcp.connection.TcpNioConnection = this . org.springframework.integration.ip.tcp.connection.TcpNioConnectionSupport . createNewConnection ( java.nio.channels.SocketChannel , true , isLookupHost ( ) , getApplicationEventPublisher ( ) , getComponentName ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNioConnection . setUsingDirectBuffers ( this . boolean ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = wrapConnection ( org.springframework.integration.ip.tcp.connection.TcpNioConnection ) ; initializeConnection ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , java.nio.channels.SocketChannel . java.net.Socket ( ) ) ; return org.springframework.integration.ip.tcp.connection.TcpNioConnection ; } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING , java.lang.Exception ) ; return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { setActive ( false ) ; if ( this . java.nio.channels.Selector != null ) { try { this . java.nio.channels.Selector . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING , java.lang.Exception ) ; } } if ( this . java.nio.channels.ServerSocketChannel != null ) { try { this . java.nio.channels.ServerSocketChannel . void ( ) ; } catch ( java.io.IOException java.io.IOException ) {			} finally { this . java.nio.channels.ServerSocketChannel = null ; } } super. stop ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( TcpNioConnectionSupport org.springframework.integration.ip.tcp.connection.TcpNioConnectionSupport ) { Assert . notNull ( org.springframework.integration.ip.tcp.connection.TcpNioConnectionSupport , STRING ) ; this . org.springframework.integration.ip.tcp.connection.TcpNioConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpNioConnectionSupport ; }  <METHOD_END>
<METHOD_START> protected java.nio.channels.ServerSocketChannel java.nio.channels.ServerSocketChannel ( ) { return this . java.nio.channels.ServerSocketChannel ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.nio.channels.SocketChannel,org.springframework.integration.ip.tcp.connection.TcpNioConnection> < java.nio.channels.SocketChannel , TcpNioConnection > java.util.Map<java.nio.channels.SocketChannel,org.springframework.integration.ip.tcp.connection.TcpNioConnection> ( ) { return this . java.util.Map<java.nio.channels.SocketChannel,org.springframework.integration.ip.tcp.connection.TcpNioConnection> ; }  <METHOD_END>
