<METHOD_START> public void ( PollableChannel org.springframework.integration.endpoint.PollableChannel , MessageHandler org.springframework.integration.endpoint.MessageHandler ) { Assert . notNull ( org.springframework.integration.endpoint.PollableChannel , STRING ) ; Assert . notNull ( org.springframework.integration.endpoint.MessageHandler , STRING ) ; this . org.springframework.integration.endpoint.PollableChannel = org.springframework.integration.endpoint.PollableChannel ; this . org.springframework.integration.endpoint.MessageHandler = org.springframework.integration.endpoint.MessageHandler ; if ( this . org.springframework.integration.endpoint.PollableChannel instanceof ExecutorChannelInterceptorAware ) { this . java.util.List<org.springframework.integration.endpoint.ChannelInterceptor> = ( ( ExecutorChannelInterceptorAware ) this . org.springframework.integration.endpoint.PollableChannel ) . getChannelInterceptors ( ) ; } else { this . java.util.List<org.springframework.integration.endpoint.ChannelInterceptor> = null ; } }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.endpoint.MessageChannel org.springframework.integration.endpoint.MessageChannel ( ) { return this . org.springframework.integration.endpoint.PollableChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.endpoint.MessageChannel org.springframework.integration.endpoint.MessageChannel ( ) { if ( this . org.springframework.integration.endpoint.MessageHandler instanceof MessageProducer ) { return ( ( MessageProducer ) this . org.springframework.integration.endpoint.MessageHandler ) . getOutputChannel ( ) ; } else if ( this . org.springframework.integration.endpoint.MessageHandler instanceof MessageRouter ) { return ( ( MessageRouter ) this . org.springframework.integration.endpoint.MessageHandler ) . getDefaultOutputChannel ( ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.endpoint.MessageHandler org.springframework.integration.endpoint.MessageHandler ( ) { return this . org.springframework.integration.endpoint.MessageHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . org.springframework.integration.endpoint.MessageHandler instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.endpoint.MessageHandler ) . start ( ) ; } super. doStart ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . org.springframework.integration.endpoint.MessageHandler instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.endpoint.MessageHandler ) . stop ( ) ; } super. doStop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.endpoint.Message<?> ) { Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.Message<> ; java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> < ExecutorChannelInterceptor > java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> = null ; try { if ( this . java.util.List<org.springframework.integration.endpoint.ChannelInterceptor> != null && ( ( ExecutorChannelInterceptorAware ) this . org.springframework.integration.endpoint.PollableChannel ) . hasExecutorInterceptors ( ) ) { java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> = new java.util.ArrayDeque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> < ExecutorChannelInterceptor > ( ) ; org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.Message<?> ( org.springframework.integration.endpoint.Message<> , java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> ) ; if ( org.springframework.integration.endpoint.Message<> == null ) { return; } } this . org.springframework.integration.endpoint.MessageHandler . handleMessage ( org.springframework.integration.endpoint.Message<> ) ; if ( ! CollectionUtils . isEmpty ( java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> ) ) { void ( org.springframework.integration.endpoint.Message<> , null , java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> ) ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( ! CollectionUtils . isEmpty ( java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> ) ) { void ( org.springframework.integration.endpoint.Message<> , java.lang.Exception , java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> ) ; } if ( java.lang.Exception instanceof MessagingException ) { throw ( MessagingException ) java.lang.Exception ; } java.lang.String java.lang.String = STRING + org.springframework.integration.endpoint.Message<> + STRING + this + STRING + this . org.springframework.integration.endpoint.MessageHandler ; throw new MessageDeliveryException ( org.springframework.integration.endpoint.Message<> , java.lang.String , java.lang.Exception ) ; } catch ( java.lang.Error java.lang.Error ) { if ( ! CollectionUtils . isEmpty ( java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> ) ) { java.lang.String java.lang.String = STRING + org.springframework.integration.endpoint.Message<> + STRING + this + STRING + this . org.springframework.integration.endpoint.MessageHandler ; void ( org.springframework.integration.endpoint.Message<> , new MessageDeliveryException ( org.springframework.integration.endpoint.Message<> , java.lang.String , java.lang.Error ) , java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> ) ; } throw java.lang.Error ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.endpoint.Message<?> < ? > org.springframework.integration.endpoint.Message<?> ( Message < ? > org.springframework.integration.endpoint.Message<?> , java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> < ExecutorChannelInterceptor > java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> ) { Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.Message<> ; for ( ChannelInterceptor org.springframework.integration.endpoint.ChannelInterceptor : this . java.util.List<org.springframework.integration.endpoint.ChannelInterceptor> ) { if ( org.springframework.integration.endpoint.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { ExecutorChannelInterceptor org.springframework.integration.endpoint.ExecutorChannelInterceptor = ( ExecutorChannelInterceptor ) org.springframework.integration.endpoint.ChannelInterceptor ; org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.ExecutorChannelInterceptor . beforeHandle ( org.springframework.integration.endpoint.Message<> , this . org.springframework.integration.endpoint.PollableChannel , this . org.springframework.integration.endpoint.MessageHandler ) ; if ( org.springframework.integration.endpoint.Message<> == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( org.springframework.integration.endpoint.ExecutorChannelInterceptor . getClass ( ) . getSimpleName ( ) + STRING ) ; } void ( null , null , java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> ) ; return null ; } java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> . add ( org.springframework.integration.endpoint.ExecutorChannelInterceptor ) ; } } return org.springframework.integration.endpoint.Message<> ; }  <METHOD_END>
<METHOD_START> private void void ( Message < ? > org.springframework.integration.endpoint.Message<?> , java.lang.Exception java.lang.Exception , java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> < ExecutorChannelInterceptor > java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> ) { java.util.Iterator<org.springframework.integration.endpoint.ExecutorChannelInterceptor> < ExecutorChannelInterceptor > java.util.Iterator<org.springframework.integration.endpoint.ExecutorChannelInterceptor> = java.util.Deque<org.springframework.integration.endpoint.ExecutorChannelInterceptor> . descendingIterator ( ) ; while ( java.util.Iterator<org.springframework.integration.endpoint.ExecutorChannelInterceptor> . hasNext ( ) ) { ExecutorChannelInterceptor org.springframework.integration.endpoint.ExecutorChannelInterceptor = java.util.Iterator<org.springframework.integration.endpoint.ExecutorChannelInterceptor> . next ( ) ; try { org.springframework.integration.endpoint.ExecutorChannelInterceptor . afterMessageHandled ( org.springframework.integration.endpoint.Message<> , this . org.springframework.integration.endpoint.PollableChannel , this . org.springframework.integration.endpoint.MessageHandler , java.lang.Exception ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . error ( STRING + org.springframework.integration.endpoint.ExecutorChannelInterceptor , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.endpoint.Message<?> < ? > org.springframework.integration.endpoint.Message<?> ( ) { return ( this . long >= NUMBER ) ? this . org.springframework.integration.endpoint.PollableChannel . receive ( this . long ) : this . org.springframework.integration.endpoint.PollableChannel . receive ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { return this . org.springframework.integration.endpoint.PollableChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return IntegrationResourceHolder . INPUT_CHANNEL ; }  <METHOD_END>
