<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.web.servlet.config.BeanDefinition org.springframework.web.servlet.config.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.servlet.config.ParserContext ) { java.lang.Object java.lang.Object = org.springframework.web.servlet.config.ParserContext . extractSource ( org.w3c.dom.Element ) ; BeanDefinition org.springframework.web.servlet.config.BeanDefinition = org.springframework.web.servlet.config.BeanDefinition ( org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ; MvcNamespaceUtils . registerDefaultComponents ( org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( ParameterizableViewController .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; HttpStatus org.springframework.web.servlet.config.HttpStatus = null ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { int int = java.lang.Integer . java.lang.Integer ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.web.servlet.config.HttpStatus = HttpStatus . valueOf ( int ) ; } java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( ) ; if ( java.lang.String . boolean ( STRING ) ) { if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.springframework.web.servlet.config.HttpStatus != null ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.HttpStatus ) ; } } else if ( java.lang.String . boolean ( STRING ) ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.RootBeanDefinition ( org.w3c.dom.Element , org.springframework.web.servlet.config.HttpStatus , java.lang.Object ) ) ; } else if ( java.lang.String . boolean ( STRING ) ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.HttpStatus ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , true ) ; } else { throw new java.lang.IllegalStateException ( STRING + java.lang.String ) ; } java.util.Map<java.lang.String,org.springframework.web.servlet.config.BeanDefinition> < java.lang.String , BeanDefinition > java.util.Map<java.lang.String,org.springframework.web.servlet.config.BeanDefinition> ; if ( org.springframework.web.servlet.config.BeanDefinition . getPropertyValues ( ) . contains ( STRING ) ) { java.util.Map<java.lang.String,org.springframework.web.servlet.config.BeanDefinition> = ( java.util.Map<java.lang.String,org.springframework.web.servlet.config.BeanDefinition> < java.lang.String , BeanDefinition > ) org.springframework.web.servlet.config.BeanDefinition . getPropertyValues ( ) . getPropertyValue ( STRING ) . getValue ( ) ; } else { java.util.Map<java.lang.String,org.springframework.web.servlet.config.BeanDefinition> = new ManagedMap <> ( ) ; org.springframework.web.servlet.config.BeanDefinition . getPropertyValues ( ) . add ( STRING , java.util.Map<java.lang.String,org.springframework.web.servlet.config.BeanDefinition> ) ; } java.util.Map<java.lang.String,org.springframework.web.servlet.config.BeanDefinition> . put ( org.w3c.dom.Element . java.lang.String ( STRING ) , org.springframework.web.servlet.config.RootBeanDefinition ) ; return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.BeanDefinition org.springframework.web.servlet.config.BeanDefinition ( ParserContext org.springframework.web.servlet.config.ParserContext , java.lang.Object java.lang.Object ) { if ( org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . containsBeanDefinition ( java.lang.String ) ) { return org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . getBeanDefinition ( java.lang.String ) ; } RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( SimpleUrlHandlerMapping .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , MvcNamespaceUtils . registerPathMatcher ( null , org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , MvcNamespaceUtils . registerUrlPathHelper ( null , org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ) ; RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference = MvcNamespaceUtils . registerCorsConfigurations ( null , org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.RuntimeBeanReference ) ; return org.springframework.web.servlet.config.RootBeanDefinition ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , HttpStatus org.springframework.web.servlet.config.HttpStatus , java.lang.Object java.lang.Object ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( RedirectView .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; if ( org.springframework.web.servlet.config.HttpStatus != null ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.HttpStatus ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } else { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , true ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } return org.springframework.web.servlet.config.RootBeanDefinition ; }  <METHOD_END>
