<METHOD_START> protected org.springframework.test.context.TestContext org.springframework.test.context.TestContext ( ) { return org.springframework.test.context.TestContext ( org.springframework.test.context.TestContextManager .this . org.springframework.test.context.TestContext ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this( BootstrapUtils . resolveTestContextBootstrapper ( BootstrapUtils . createBootstrapContext ( java.lang.Class<> ) ) ); }  <METHOD_END>
<METHOD_START> public void ( TestContextBootstrapper org.springframework.test.context.TestContextBootstrapper ) { this . org.springframework.test.context.TestContext = org.springframework.test.context.TestContextBootstrapper . buildTestContext ( ) ; void ( org.springframework.test.context.TestContextBootstrapper . getTestExecutionListeners ( ) ) ; }  <METHOD_END>
<METHOD_START> public final org.springframework.test.context.TestContext org.springframework.test.context.TestContext ( ) { return this . java.lang.ThreadLocal<org.springframework.test.context.TestContext> . get ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.test.context.TestExecutionListener> < TestExecutionListener > java.util.List<org.springframework.test.context.TestExecutionListener> ) { void ( java.util.List<org.springframework.test.context.TestExecutionListener> . toArray ( new TestExecutionListener [ java.util.List<org.springframework.test.context.TestExecutionListener> . size ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( TestExecutionListener ... org.springframework.test.context.TestExecutionListener[] ) { for ( TestExecutionListener org.springframework.test.context.TestExecutionListener : org.springframework.test.context.TestExecutionListener[] ) { if ( org.springframework.test.context.Log . isTraceEnabled ( ) ) { org.springframework.test.context.Log . trace ( STRING + org.springframework.test.context.TestExecutionListener ) ; } this . java.util.List<org.springframework.test.context.TestExecutionListener> . add ( org.springframework.test.context.TestExecutionListener ) ; } }  <METHOD_END>
<METHOD_START> public final java.util.List<org.springframework.test.context.TestExecutionListener> < TestExecutionListener > java.util.List<org.springframework.test.context.TestExecutionListener> ( ) { return this . java.util.List<org.springframework.test.context.TestExecutionListener> ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.test.context.TestExecutionListener> < TestExecutionListener > java.util.List<org.springframework.test.context.TestExecutionListener> ( ) { java.util.List<org.springframework.test.context.TestExecutionListener> < TestExecutionListener > java.util.List<org.springframework.test.context.TestExecutionListener> = new java.util.ArrayList <> ( java.util.List<org.springframework.test.context.TestExecutionListener> ( ) ) ; java.util.Collections . void ( java.util.List<org.springframework.test.context.TestExecutionListener> ) ; return java.util.List<org.springframework.test.context.TestExecutionListener> ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.TestContext ( ) . getTestClass ( ) ; if ( org.springframework.test.context.Log . isTraceEnabled ( ) ) { org.springframework.test.context.Log . trace ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } org.springframework.test.context.TestContext ( ) . updateState ( null , null , null ) ; for ( TestExecutionListener org.springframework.test.context.TestExecutionListener : java.util.List<org.springframework.test.context.TestExecutionListener> ( ) ) { try { org.springframework.test.context.TestExecutionListener . beforeTestClass ( org.springframework.test.context.TestContext ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable , STRING , org.springframework.test.context.TestExecutionListener , java.lang.Class<> ) ; ReflectionUtils . rethrowException ( java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) throws java.lang.Exception { Assert . notNull ( java.lang.Object , STRING ) ; if ( org.springframework.test.context.Log . isTraceEnabled ( ) ) { org.springframework.test.context.Log . trace ( STRING + java.lang.Object + STRING ) ; } org.springframework.test.context.TestContext ( ) . updateState ( java.lang.Object , null , null ) ; for ( TestExecutionListener org.springframework.test.context.TestExecutionListener : java.util.List<org.springframework.test.context.TestExecutionListener> ( ) ) { try { org.springframework.test.context.TestExecutionListener . prepareTestInstance ( org.springframework.test.context.TestContext ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.test.context.Log . isErrorEnabled ( ) ) { org.springframework.test.context.Log . error ( STRING + org.springframework.test.context.TestExecutionListener + STRING + java.lang.Object + STRING , java.lang.Throwable ) ; } ReflectionUtils . rethrowException ( java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.Exception { java.lang.String java.lang.String = STRING ; void ( java.lang.String , java.lang.Object , java.lang.reflect.Method ) ; for ( TestExecutionListener org.springframework.test.context.TestExecutionListener : java.util.List<org.springframework.test.context.TestExecutionListener> ( ) ) { try { org.springframework.test.context.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.TestContext ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable , java.lang.String , org.springframework.test.context.TestExecutionListener , java.lang.Object , java.lang.reflect.Method ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.Exception { java.lang.String java.lang.String = STRING ; void ( java.lang.String , java.lang.Object , java.lang.reflect.Method ) ; for ( TestExecutionListener org.springframework.test.context.TestExecutionListener : java.util.List<org.springframework.test.context.TestExecutionListener> ( ) ) { try { org.springframework.test.context.TestExecutionListener . beforeTestExecution ( org.springframework.test.context.TestContext ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable , java.lang.String , org.springframework.test.context.TestExecutionListener , java.lang.Object , java.lang.reflect.Method ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Throwable java.lang.Throwable ) throws java.lang.Exception { java.lang.String java.lang.String = STRING ; void ( java.lang.String , java.lang.Object , java.lang.reflect.Method , java.lang.Throwable ) ; java.lang.Throwable java.lang.Throwable = null ; for ( TestExecutionListener org.springframework.test.context.TestExecutionListener : java.util.List<org.springframework.test.context.TestExecutionListener> ( ) ) { try { org.springframework.test.context.TestExecutionListener . afterTestExecution ( org.springframework.test.context.TestContext ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable , java.lang.String , org.springframework.test.context.TestExecutionListener , java.lang.Object , java.lang.reflect.Method ) ; if ( java.lang.Throwable == null ) { java.lang.Throwable = java.lang.Throwable ; } else { java.lang.Throwable . void ( java.lang.Throwable ) ; } } } if ( java.lang.Throwable != null ) { ReflectionUtils . rethrowException ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Throwable java.lang.Throwable ) throws java.lang.Exception { java.lang.String java.lang.String = STRING ; void ( java.lang.String , java.lang.Object , java.lang.reflect.Method , java.lang.Throwable ) ; java.lang.Throwable java.lang.Throwable = null ; for ( TestExecutionListener org.springframework.test.context.TestExecutionListener : java.util.List<org.springframework.test.context.TestExecutionListener> ( ) ) { try { org.springframework.test.context.TestExecutionListener . afterTestMethod ( org.springframework.test.context.TestContext ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable , java.lang.String , org.springframework.test.context.TestExecutionListener , java.lang.Object , java.lang.reflect.Method ) ; if ( java.lang.Throwable == null ) { java.lang.Throwable = java.lang.Throwable ; } else { java.lang.Throwable . void ( java.lang.Throwable ) ; } } } if ( java.lang.Throwable != null ) { ReflectionUtils . rethrowException ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.TestContext ( ) . getTestClass ( ) ; if ( org.springframework.test.context.Log . isTraceEnabled ( ) ) { org.springframework.test.context.Log . trace ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } org.springframework.test.context.TestContext ( ) . updateState ( null , null , null ) ; java.lang.Throwable java.lang.Throwable = null ; for ( TestExecutionListener org.springframework.test.context.TestExecutionListener : java.util.List<org.springframework.test.context.TestExecutionListener> ( ) ) { try { org.springframework.test.context.TestExecutionListener . afterTestClass ( org.springframework.test.context.TestContext ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable , STRING , org.springframework.test.context.TestExecutionListener , java.lang.Class<> ) ; if ( java.lang.Throwable == null ) { java.lang.Throwable = java.lang.Throwable ; } else { java.lang.Throwable . void ( java.lang.Throwable ) ; } } } this . java.lang.ThreadLocal<org.springframework.test.context.TestContext> . remove ( ) ; if ( java.lang.Throwable != null ) { ReflectionUtils . rethrowException ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { Assert . notNull ( java.lang.Object , STRING ) ; if ( org.springframework.test.context.Log . isTraceEnabled ( ) ) { org.springframework.test.context.Log . trace ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.Object , java.lang.reflect.Method ) ) ; } org.springframework.test.context.TestContext ( ) . updateState ( java.lang.Object , java.lang.reflect.Method , null ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Throwable java.lang.Throwable ) { Assert . notNull ( java.lang.Object , STRING ) ; if ( org.springframework.test.context.Log . isTraceEnabled ( ) ) { org.springframework.test.context.Log . trace ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.Object , java.lang.reflect.Method , java.lang.Throwable ) ) ; } org.springframework.test.context.TestContext ( ) . updateState ( java.lang.Object , java.lang.reflect.Method , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Throwable java.lang.Throwable , java.lang.String java.lang.String , TestExecutionListener org.springframework.test.context.TestExecutionListener , java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.Exception { void ( java.lang.Throwable , java.lang.String , org.springframework.test.context.TestExecutionListener , java.lang.Object , java.lang.reflect.Method ) ; ReflectionUtils . rethrowException ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Throwable java.lang.Throwable , java.lang.String java.lang.String , TestExecutionListener org.springframework.test.context.TestExecutionListener , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( org.springframework.test.context.Log . isWarnEnabled ( ) ) { org.springframework.test.context.Log . warn ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.String , org.springframework.test.context.TestExecutionListener , java.lang.Class<> ) , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Throwable java.lang.Throwable , java.lang.String java.lang.String , TestExecutionListener org.springframework.test.context.TestExecutionListener , java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { if ( org.springframework.test.context.Log . isWarnEnabled ( ) ) { org.springframework.test.context.Log . warn ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.String , org.springframework.test.context.TestExecutionListener , java.lang.reflect.Method , java.lang.Object ) , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private static org.springframework.test.context.TestContext org.springframework.test.context.TestContext ( TestContext org.springframework.test.context.TestContext ) { java.lang.reflect.Constructor<? extends org.springframework.test.context.TestContext> < ? extends TestContext > java.lang.reflect.Constructor<? extends org.springframework.test.context.TestContext> = ClassUtils . getConstructorIfAvailable ( org.springframework.test.context.TestContext . getClass ( ) , org.springframework.test.context.TestContext . getClass ( ) ) ; if ( java.lang.reflect.Constructor<> != null ) { try { ReflectionUtils . makeAccessible ( java.lang.reflect.Constructor<> ) ; return java.lang.reflect.Constructor<> . newInstance ( org.springframework.test.context.TestContext ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.test.context.Log . isInfoEnabled ( ) ) { org.springframework.test.context.Log . info ( java.lang.String . java.lang.String ( STRING + STRING , org.springframework.test.context.TestContext ) , java.lang.Exception ) ; } } } return org.springframework.test.context.TestContext ; }  <METHOD_END>
