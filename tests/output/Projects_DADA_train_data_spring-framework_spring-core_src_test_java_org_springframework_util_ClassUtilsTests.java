<METHOD_START> @ Before public void void ( ) { org.springframework.util.ClassUtilsTests.InnerClass . boolean = false ; org.springframework.util.ClassUtilsTests.InnerClass . boolean = false ; org.springframework.util.ClassUtilsTests.InnerClass . boolean = false ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( ClassUtils . isPresent ( STRING , java.lang.ClassLoader ) ) ; assertFalse ( ClassUtils . isPresent ( STRING , java.lang.ClassLoader ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.ClassNotFoundException { assertEquals ( java.lang.String .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( java.lang.String [] .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( java.lang.String [] .class , ClassUtils . forName ( java.lang.String [] .class . java.lang.String ( ) , java.lang.ClassLoader ) ) ; assertEquals ( java.lang.String [] [] .class , ClassUtils . forName ( java.lang.String [] [] .class . java.lang.String ( ) , java.lang.ClassLoader ) ) ; assertEquals ( java.lang.String [] [] [] .class , ClassUtils . forName ( java.lang.String [] [] [] .class . java.lang.String ( ) , java.lang.ClassLoader ) ) ; assertEquals ( TestObject .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( TestObject [] .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( TestObject [] .class , ClassUtils . forName ( TestObject [] .class . java.lang.String ( ) , java.lang.ClassLoader ) ) ; assertEquals ( TestObject [] [] .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( TestObject [] [] .class , ClassUtils . forName ( TestObject [] [] .class . java.lang.String ( ) , java.lang.ClassLoader ) ) ; assertEquals ( short [] [] [] .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.ClassNotFoundException { assertEquals ( boolean .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( byte .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( char .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( short .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( int .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( long .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( float .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( double .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( void .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.ClassNotFoundException { assertEquals ( boolean [] .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( byte [] .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( char [] .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( short [] .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( int [] .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( long [] .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( float [] .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; assertEquals ( double [] .class , ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.ClassNotFoundException { assertEquals ( boolean [] .class , ClassUtils . forName ( boolean [] .class . java.lang.String ( ) , java.lang.ClassLoader ) ) ; assertEquals ( byte [] .class , ClassUtils . forName ( byte [] .class . java.lang.String ( ) , java.lang.ClassLoader ) ) ; assertEquals ( char [] .class , ClassUtils . forName ( char [] .class . java.lang.String ( ) , java.lang.ClassLoader ) ) ; assertEquals ( short [] .class , ClassUtils . forName ( short [] .class . java.lang.String ( ) , java.lang.ClassLoader ) ) ; assertEquals ( int [] .class , ClassUtils . forName ( int [] .class . java.lang.String ( ) , java.lang.ClassLoader ) ) ; assertEquals ( long [] .class , ClassUtils . forName ( long [] .class . java.lang.String ( ) , java.lang.ClassLoader ) ) ; assertEquals ( float [] .class , ClassUtils . forName ( float [] .class . java.lang.String ( ) , java.lang.ClassLoader ) ) ; assertEquals ( double [] .class , ClassUtils . forName ( double [] .class . java.lang.String ( ) , java.lang.ClassLoader ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = ClassUtils . getShortName ( java.lang.Class<? extends org.springframework.util.ClassUtilsTests> ( ) ) ; assertEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = ClassUtils . getShortName ( java.lang.Object [] .class ) ; assertEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = ClassUtils . getShortName ( java.lang.Object [] [] .class ) ; assertEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = ClassUtils . getShortName ( byte [] .class ) ; assertEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = ClassUtils . getShortName ( byte [] [] [] .class ) ; assertEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = ClassUtils . getShortName ( org.springframework.util.ClassUtilsTests.InnerClass .class ) ; assertEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = ClassUtils . getShortNameAsProperty ( this . java.lang.Class<? extends org.springframework.util.ClassUtilsTests> ( ) ) ; assertEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , ClassUtils . getClassFileName ( java.lang.String .class ) ) ; assertEquals ( STRING , ClassUtils . getClassFileName ( java.lang.Class<? extends org.springframework.util.ClassUtilsTests> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , ClassUtils . getPackageName ( java.lang.String .class ) ) ; assertEquals ( java.lang.Class<? extends org.springframework.util.ClassUtilsTests> ( ) . java.lang.Package ( ) . java.lang.String ( ) , ClassUtils . getPackageName ( java.lang.Class<? extends org.springframework.util.ClassUtilsTests> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = ClassUtils . getQualifiedName ( java.lang.Class<? extends org.springframework.util.ClassUtilsTests> ( ) ) ; assertEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = ClassUtils . getQualifiedName ( java.lang.Object [] .class ) ; assertEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = ClassUtils . getQualifiedName ( java.lang.Object [] [] .class ) ; assertEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = ClassUtils . getQualifiedName ( byte [] .class ) ; assertEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = ClassUtils . getQualifiedName ( byte [] [] .class ) ; assertEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( ClassUtils . hasMethod ( java.util.Collection .class , STRING ) ) ; assertTrue ( ClassUtils . hasMethod ( java.util.Collection .class , STRING , java.lang.Object .class ) ) ; assertFalse ( ClassUtils . hasMethod ( java.util.Collection .class , STRING ) ) ; assertFalse ( ClassUtils . hasMethod ( java.util.Collection .class , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getMethodIfAvailable ( java.util.Collection .class , STRING ) ; assertNotNull ( java.lang.reflect.Method ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; java.lang.reflect.Method = ClassUtils . getMethodIfAvailable ( java.util.Collection .class , STRING , new java.lang.Class [] { java.lang.Object .class } ) ; assertNotNull ( java.lang.reflect.Method ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertNull ( ClassUtils . getMethodIfAvailable ( java.util.Collection .class , STRING ) ) ; assertNull ( ClassUtils . getMethodIfAvailable ( java.util.Collection .class , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , NUMBER , ClassUtils . getMethodCountForName ( org.springframework.util.ClassUtilsTests.OverloadedMethodsClass .class , STRING ) ) ; assertEquals ( STRING , NUMBER , ClassUtils . getMethodCountForName ( org.springframework.util.ClassUtilsTests.SubOverloadedMethodsClass .class , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( ClassUtils . hasAtLeastOneMethodWithName ( TestObject .class , STRING ) ) ; assertTrue ( ClassUtils . hasAtLeastOneMethodWithName ( TestObject .class , STRING ) ) ; assertTrue ( ClassUtils . hasAtLeastOneMethodWithName ( TestObject .class , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.IllegalAccessException , java.lang.reflect.InvocationTargetException { java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getStaticMethod ( org.springframework.util.ClassUtilsTests.InnerClass .class , STRING , ( java.lang.Class [] ) null ) ; java.lang.reflect.Method . java.lang.Object ( null , ( java.lang.Object [] ) null ) ; assertTrue ( STRING , org.springframework.util.ClassUtilsTests.InnerClass . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.IllegalAccessException , java.lang.reflect.InvocationTargetException { java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getStaticMethod ( org.springframework.util.ClassUtilsTests.InnerClass .class , STRING , new java.lang.Class [] { java.lang.String .class } ) ; java.lang.reflect.Method . java.lang.Object ( null , new java.lang.Object [] { STRING } ) ; assertTrue ( STRING , org.springframework.util.ClassUtilsTests.InnerClass . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.IllegalAccessException , java.lang.reflect.InvocationTargetException { java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getStaticMethod ( org.springframework.util.ClassUtilsTests.InnerClass .class , STRING , new java.lang.Class [] { java.lang.String .class } ) ; java.lang.reflect.Method . java.lang.Object ( null , new java.lang.Object [] { STRING } ) ; assertTrue ( STRING , org.springframework.util.ClassUtilsTests.InnerClass . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isAssignable ( java.lang.Object .class , java.lang.Object .class ) ) ; assertTrue ( ClassUtils . isAssignable ( java.lang.String .class , java.lang.String .class ) ) ; assertTrue ( ClassUtils . isAssignable ( java.lang.Object .class , java.lang.String .class ) ) ; assertTrue ( ClassUtils . isAssignable ( java.lang.Object .class , java.lang.Integer .class ) ) ; assertTrue ( ClassUtils . isAssignable ( java.lang.Number .class , java.lang.Integer .class ) ) ; assertTrue ( ClassUtils . isAssignable ( java.lang.Number .class , int .class ) ) ; assertTrue ( ClassUtils . isAssignable ( java.lang.Integer .class , int .class ) ) ; assertTrue ( ClassUtils . isAssignable ( int .class , java.lang.Integer .class ) ) ; assertFalse ( ClassUtils . isAssignable ( java.lang.String .class , java.lang.Object .class ) ) ; assertFalse ( ClassUtils . isAssignable ( java.lang.Integer .class , java.lang.Number .class ) ) ; assertFalse ( ClassUtils . isAssignable ( java.lang.Integer .class , double .class ) ) ; assertFalse ( ClassUtils . isAssignable ( double .class , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = ClassUtils . classPackageAsResourcePath ( java.lang.reflect.Proxy .class ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String , ClassUtils . addResourcePathToPackagePath ( java.lang.reflect.Proxy .class , STRING ) ) ; assertEquals ( java.lang.String , ClassUtils . addResourcePathToPackagePath ( java.lang.reflect.Proxy .class , STRING ) ) ; assertEquals ( STRING , ClassUtils . addResourcePathToPackagePath ( java.lang.reflect.Proxy .class , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DerivedTestObject org.springframework.util.DerivedTestObject = new DerivedTestObject ( ) ; java.util.List java.util.List = java.util.Arrays . java.util.List ( ClassUtils . getAllInterfaces ( org.springframework.util.DerivedTestObject ) ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; assertTrue ( STRING , java.util.List . boolean ( java.io.Serializable .class ) ) ; assertTrue ( STRING , java.util.List . boolean ( ITestObject .class ) ) ; assertTrue ( STRING , java.util.List . boolean ( ITestInterface .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List java.util.List = new java.util.LinkedList ( ) ; java.util.List . boolean ( java.io.Serializable .class ) ; java.util.List . boolean ( java.lang.Runnable .class ) ; assertEquals ( STRING , java.util.List . java.lang.String ( ) ) ; assertEquals ( STRING , ClassUtils . classNamesToString ( java.util.List ) ) ; java.util.List java.util.List = new java.util.LinkedList ( ) ; java.util.List . boolean ( java.util.LinkedList .class ) ; java.util.List . boolean ( java.lang.Integer .class ) ; assertEquals ( STRING , java.util.List . java.lang.String ( ) ) ; assertEquals ( STRING , ClassUtils . classNamesToString ( java.util.List ) ) ; assertEquals ( STRING , java.util.Collections . java.util.List<java.lang.Class<java.util.List>> ( java.util.List .class ) . java.lang.String ( ) ) ; assertEquals ( STRING , ClassUtils . classNamesToString ( java.util.List .class ) ) ; assertEquals ( STRING , java.util.Collections . java.util.List . java.lang.String ( ) ) ; assertEquals ( STRING , ClassUtils . classNamesToString ( java.util.Collections . java.util.List ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Number .class , ClassUtils . determineCommonAncestor ( java.lang.Integer .class , java.lang.Number .class ) ) ; assertEquals ( java.lang.Number .class , ClassUtils . determineCommonAncestor ( java.lang.Number .class , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Number .class , ClassUtils . determineCommonAncestor ( java.lang.Number .class , null ) ) ; assertEquals ( java.lang.Integer .class , ClassUtils . determineCommonAncestor ( null , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Integer .class , ClassUtils . determineCommonAncestor ( java.lang.Integer .class , java.lang.Integer .class ) ) ; assertEquals ( java.lang.Number .class , ClassUtils . determineCommonAncestor ( java.lang.Integer .class , java.lang.Float .class ) ) ; assertEquals ( java.lang.Number .class , ClassUtils . determineCommonAncestor ( java.lang.Float .class , java.lang.Integer .class ) ) ; assertNull ( ClassUtils . determineCommonAncestor ( java.lang.Integer .class , java.lang.String .class ) ) ; assertNull ( ClassUtils . determineCommonAncestor ( java.lang.String .class , java.lang.Integer .class ) ) ; assertEquals ( java.util.Collection .class , ClassUtils . determineCommonAncestor ( java.util.List .class , java.util.Collection .class ) ) ; assertEquals ( java.util.Collection .class , ClassUtils . determineCommonAncestor ( java.util.Collection .class , java.util.List .class ) ) ; assertEquals ( java.util.Collection .class , ClassUtils . determineCommonAncestor ( java.util.Collection .class , null ) ) ; assertEquals ( java.util.List .class , ClassUtils . determineCommonAncestor ( null , java.util.List .class ) ) ; assertEquals ( java.util.List .class , ClassUtils . determineCommonAncestor ( java.util.List .class , java.util.List .class ) ) ; assertNull ( ClassUtils . determineCommonAncestor ( java.util.List .class , java.util.Set .class ) ) ; assertNull ( ClassUtils . determineCommonAncestor ( java.util.Set .class , java.util.List .class ) ) ; assertNull ( ClassUtils . determineCommonAncestor ( java.util.List .class , java.lang.Runnable .class ) ) ; assertNull ( ClassUtils . determineCommonAncestor ( java.lang.Runnable .class , java.util.List .class ) ) ; assertEquals ( java.util.List .class , ClassUtils . determineCommonAncestor ( java.util.List .class , java.util.ArrayList .class ) ) ; assertEquals ( java.util.List .class , ClassUtils . determineCommonAncestor ( java.util.ArrayList .class , java.util.List .class ) ) ; assertNull ( ClassUtils . determineCommonAncestor ( java.util.List .class , java.lang.String .class ) ) ; assertNull ( ClassUtils . determineCommonAncestor ( java.lang.String .class , java.util.List .class ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( ) { boolean = true ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String ) { boolean = true ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String ) { boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String [] java.lang.String[] ) { }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String , java.lang.String [] java.lang.String[] , java.lang.String java.lang.String ) { }  <METHOD_END>
