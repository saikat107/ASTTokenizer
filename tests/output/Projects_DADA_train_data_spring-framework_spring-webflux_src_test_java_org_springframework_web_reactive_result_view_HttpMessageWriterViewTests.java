<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( java.util.Arrays . java.util.List ( MediaType . parseMediaType ( STRING ) , MediaType . parseMediaType ( STRING ) ) , this . org.springframework.web.reactive.result.view.HttpMessageWriterView . getSupportedMediaTypes ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.view.HttpMessageWriterView . setModelKeys ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ; this . org.springframework.web.reactive.result.view.ModelMap . addAttribute ( STRING , STRING ) ; this . org.springframework.web.reactive.result.view.ModelMap . addAttribute ( STRING , STRING ) ; this . org.springframework.web.reactive.result.view.ModelMap . addAttribute ( STRING , STRING ) ; assertEquals ( STRING , java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.view.HttpMessageWriterView . setModelKeys ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ; this . org.springframework.web.reactive.result.view.ModelMap . addAttribute ( STRING , STRING ) ; assertEquals ( STRING , java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.view.HttpMessageWriterView = new HttpMessageWriterView ( new Jaxb2XmlEncoder ( ) ) ; this . org.springframework.web.reactive.result.view.HttpMessageWriterView . setModelKeys ( new java.util.HashSet <> ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ) ; this . org.springframework.web.reactive.result.view.ModelMap . addAttribute ( STRING , STRING ) ; assertEquals ( STRING , java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.view.HttpMessageWriterView . setModelKeys ( new java.util.HashSet <> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ; this . org.springframework.web.reactive.result.view.ModelMap . addAttribute ( STRING , STRING ) ; this . org.springframework.web.reactive.result.view.ModelMap . addAttribute ( STRING , STRING ) ; this . org.springframework.web.reactive.result.view.ModelMap . addAttribute ( STRING , STRING ) ; assertEquals ( STRING , java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.view.HttpMessageWriterView = new HttpMessageWriterView ( CharSequenceEncoder . allMimeTypes ( ) ) ; this . org.springframework.web.reactive.result.view.HttpMessageWriterView . setModelKeys ( new java.util.HashSet <> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ; this . org.springframework.web.reactive.result.view.ModelMap . addAttribute ( STRING , STRING ) ; this . org.springframework.web.reactive.result.view.ModelMap . addAttribute ( STRING , STRING ) ; try { java.lang.String ( ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { java.lang.String java.lang.String = java.lang.IllegalStateException . java.lang.String ( ) ; assertTrue ( java.lang.String , java.lang.String . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; this . org.springframework.web.reactive.result.view.ModelMap . addAttribute ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; this . org.springframework.web.reactive.result.view.HttpMessageWriterView . setModelKeys ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ; this . org.springframework.web.reactive.result.view.HttpMessageWriterView . render ( this . org.springframework.web.reactive.result.view.ModelMap , MediaType . APPLICATION_JSON , org.springframework.web.reactive.result.view.MockServerWebExchange ) . block ( java.time.Duration . java.time.Duration ) ; StepVerifier . create ( this . org.springframework.web.reactive.result.view.MockServerWebExchange . getResponse ( ) . getBody ( ) ) . consumeNextWith ( buf -> assertEquals ( STRING , dumpString ( buf ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( DataBuffer org.springframework.web.reactive.result.view.DataBuffer ) { return DataBufferTestUtils . dumpString ( org.springframework.web.reactive.result.view.DataBuffer , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { this . org.springframework.web.reactive.result.view.HttpMessageWriterView . render ( this . org.springframework.web.reactive.result.view.ModelMap , MediaType . APPLICATION_JSON , this . org.springframework.web.reactive.result.view.MockServerWebExchange ) . block ( java.time.Duration . java.time.Duration ) ; return this . org.springframework.web.reactive.result.view.MockServerWebExchange . getResponse ( ) . getBodyAsString ( ) . block ( java.time.Duration . java.time.Duration ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
