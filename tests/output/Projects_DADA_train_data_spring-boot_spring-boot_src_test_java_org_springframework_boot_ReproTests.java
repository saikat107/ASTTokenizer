<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.ConfigurableApplicationContext != null ) { this . org.springframework.boot.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.ReproTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext . getEnvironment ( ) . acceptsProfiles ( STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext . getEnvironment ( ) . acceptsProfiles ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.ReproTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; java.lang.String java.lang.String = STRING ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( java.lang.String , STRING ) ; void ( this . org.springframework.boot.ConfigurableApplicationContext , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.ReproTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; java.lang.String java.lang.String = STRING ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( java.lang.String ) ; void ( this . org.springframework.boot.ConfigurableApplicationContext , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.ReproTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; java.lang.String java.lang.String = STRING ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( java.lang.String ) ; void ( this . org.springframework.boot.ConfigurableApplicationContext , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.ReproTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; java.lang.String java.lang.String = STRING ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( java.lang.String , STRING ) ; void ( this . org.springframework.boot.ConfigurableApplicationContext , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.ReproTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; java.lang.String java.lang.String = STRING ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( java.lang.String , STRING ) ; void ( this . org.springframework.boot.ConfigurableApplicationContext , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.ReproTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; java.lang.String java.lang.String = STRING ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( java.lang.String , STRING ) ; void ( this . org.springframework.boot.ConfigurableApplicationContext , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.ReproTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; java.lang.String java.lang.String = STRING ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( java.lang.String , STRING ) ; void ( this . org.springframework.boot.ConfigurableApplicationContext , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.ReproTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; java.lang.String java.lang.String = STRING ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( java.lang.String ) ; void ( this . org.springframework.boot.ConfigurableApplicationContext , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.ReproTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; java.lang.String java.lang.String = STRING ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( java.lang.String , STRING ) ; void ( this . org.springframework.boot.ConfigurableApplicationContext , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.ReproTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; java.lang.String java.lang.String = STRING ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( java.lang.String , STRING ) ; void ( this . org.springframework.boot.ConfigurableApplicationContext , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.ReproTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; java.lang.String java.lang.String = STRING ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( java.lang.String , STRING ) ; void ( this . org.springframework.boot.ConfigurableApplicationContext , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext , java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { assertThat ( org.springframework.boot.ConfigurableApplicationContext . getEnvironment ( ) . getActiveProfiles ( ) ) . isEqualTo ( java.lang.String[] ) ; assertThat ( org.springframework.boot.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ) . as ( STRING ) . isEqualTo ( java.lang.String ) ; org.springframework.boot.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
