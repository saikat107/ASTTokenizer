<METHOD_START> @ Before public void void ( ) { StaticWebApplicationContext org.springframework.web.reactive.config.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.reactive.config.StaticWebApplicationContext . registerSingleton ( STRING , FreeMarkerConfigurer .class ) ; this . org.springframework.web.reactive.config.ViewResolverRegistry = new ViewResolverRegistry ( org.springframework.web.reactive.config.StaticWebApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( Ordered . LOWEST_PRECEDENCE , this . org.springframework.web.reactive.config.ViewResolverRegistry . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( this . org.springframework.web.reactive.config.ViewResolverRegistry . hasRegistrations ( ) ) ; this . org.springframework.web.reactive.config.ViewResolverRegistry . freeMarker ( ) ; assertTrue ( this . org.springframework.web.reactive.config.ViewResolverRegistry . hasRegistrations ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( this . org.springframework.web.reactive.config.ViewResolverRegistry . getViewResolvers ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.reactive.config.ViewResolverRegistry . getViewResolvers ( ) . size ( ) ) ; assertFalse ( this . org.springframework.web.reactive.config.ViewResolverRegistry . hasRegistrations ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UrlBasedViewResolver org.springframework.web.reactive.config.UrlBasedViewResolver = new UrlBasedViewResolver ( ) ; this . org.springframework.web.reactive.config.ViewResolverRegistry . viewResolver ( org.springframework.web.reactive.config.UrlBasedViewResolver ) ; assertSame ( org.springframework.web.reactive.config.UrlBasedViewResolver , this . org.springframework.web.reactive.config.ViewResolverRegistry . getViewResolvers ( ) . get ( NUMBER ) ) ; assertEquals ( NUMBER , this . org.springframework.web.reactive.config.ViewResolverRegistry . getViewResolvers ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { View org.springframework.web.reactive.config.View = new HttpMessageWriterView ( new Jackson2JsonEncoder ( ) ) ; this . org.springframework.web.reactive.config.ViewResolverRegistry . defaultViews ( org.springframework.web.reactive.config.View ) ; assertEquals ( NUMBER , this . org.springframework.web.reactive.config.ViewResolverRegistry . getDefaultViews ( ) . size ( ) ) ; assertSame ( org.springframework.web.reactive.config.View , this . org.springframework.web.reactive.config.ViewResolverRegistry . getDefaultViews ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
