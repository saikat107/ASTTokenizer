<METHOD_START> public void ( ) { this . java.util.concurrent.Executor = null ; }  <METHOD_END>
<METHOD_START> public void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { this . java.util.concurrent.Executor = java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( LoadBalancingStrategy org.springframework.integration.dispatcher.LoadBalancingStrategy ) { this . org.springframework.integration.dispatcher.LoadBalancingStrategy = org.springframework.integration.dispatcher.LoadBalancingStrategy ; }  <METHOD_END>
<METHOD_START> public void void ( MessageHandlingTaskDecorator org.springframework.integration.dispatcher.MessageHandlingTaskDecorator ) { Assert . notNull ( org.springframework.integration.dispatcher.MessageHandlingTaskDecorator , STRING ) ; this . org.springframework.integration.dispatcher.MessageHandlingTaskDecorator = org.springframework.integration.dispatcher.MessageHandlingTaskDecorator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final boolean boolean ( final Message < ? > org.springframework.integration.dispatcher.Message<?> ) { if ( this . java.util.concurrent.Executor != null ) { java.lang.Runnable java.lang.Runnable = java.lang.Runnable ( org.springframework.integration.dispatcher.Message<> ) ; this . java.util.concurrent.Executor . void ( java.lang.Runnable ) ; return true ; } return this . boolean ( org.springframework.integration.dispatcher.Message<> ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Runnable java.lang.Runnable ( final Message < ? > org.springframework.integration.dispatcher.Message<?> ) { MessageHandlingRunnable org.springframework.integration.dispatcher.MessageHandlingRunnable = new MessageHandlingRunnable ( ) { @ java.lang.Override public void void ( ) { boolean ( org.springframework.integration.dispatcher.Message<> ) ; } @ java.lang.Override public org.springframework.integration.dispatcher.Message<?> < ? > org.springframework.integration.dispatcher.Message<?> ( ) { return org.springframework.integration.dispatcher.Message<> ; } @ java.lang.Override public org.springframework.integration.dispatcher.MessageHandler org.springframework.integration.dispatcher.MessageHandler ( ) { return org.springframework.integration.dispatcher.UnicastingDispatcher .this . org.springframework.integration.dispatcher.MessageHandler ; } } ; return this . org.springframework.integration.dispatcher.MessageHandlingTaskDecorator . decorate ( org.springframework.integration.dispatcher.MessageHandlingRunnable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { boolean ( org.springframework.integration.dispatcher.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.dispatcher.Message<?> < ? > org.springframework.integration.dispatcher.Message<?> ( ) { return org.springframework.integration.dispatcher.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.dispatcher.MessageHandler org.springframework.integration.dispatcher.MessageHandler ( ) { return org.springframework.integration.dispatcher.UnicastingDispatcher .this . org.springframework.integration.dispatcher.MessageHandler ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Message < ? > org.springframework.integration.dispatcher.Message<?> ) { if ( tryOptimizedDispatch ( org.springframework.integration.dispatcher.Message<> ) ) { return true ; } boolean boolean = false ; java.util.Iterator<org.springframework.integration.dispatcher.MessageHandler> < MessageHandler > java.util.Iterator<org.springframework.integration.dispatcher.MessageHandler> = this . java.util.Iterator<org.springframework.integration.dispatcher.MessageHandler> ( org.springframework.integration.dispatcher.Message<> ) ; if ( ! java.util.Iterator<org.springframework.integration.dispatcher.MessageHandler> . hasNext ( ) ) { throw new MessageDispatchingException ( org.springframework.integration.dispatcher.Message<> , STRING ) ; } java.util.List<java.lang.RuntimeException> < java.lang.RuntimeException > java.util.List<java.lang.RuntimeException> = new java.util.ArrayList<java.lang.RuntimeException> < java.lang.RuntimeException > ( ) ; while ( ! boolean && java.util.Iterator<org.springframework.integration.dispatcher.MessageHandler> . hasNext ( ) ) { MessageHandler org.springframework.integration.dispatcher.MessageHandler = java.util.Iterator<org.springframework.integration.dispatcher.MessageHandler> . next ( ) ; try { org.springframework.integration.dispatcher.MessageHandler . handleMessage ( org.springframework.integration.dispatcher.Message<> ) ; boolean = true ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.RuntimeException java.lang.RuntimeException = this . wrapExceptionIfNecessary ( org.springframework.integration.dispatcher.Message<> , java.lang.Exception ) ; java.util.List<java.lang.RuntimeException> . boolean ( java.lang.RuntimeException ) ; this . void ( java.util.List<java.lang.RuntimeException> , org.springframework.integration.dispatcher.Message<> , ! java.util.Iterator<org.springframework.integration.dispatcher.MessageHandler> . hasNext ( ) ) ; } } return boolean ; }  <METHOD_END>
<METHOD_START> private java.util.Iterator<org.springframework.integration.dispatcher.MessageHandler> < MessageHandler > java.util.Iterator<org.springframework.integration.dispatcher.MessageHandler> ( Message < ? > org.springframework.integration.dispatcher.Message<?> ) { if ( this . org.springframework.integration.dispatcher.LoadBalancingStrategy != null ) { return this . org.springframework.integration.dispatcher.LoadBalancingStrategy . getHandlerIterator ( org.springframework.integration.dispatcher.Message<> , this . getHandlers ( ) ) ; } return this . getHandlers ( ) . iterator ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.lang.RuntimeException> < java.lang.RuntimeException > java.util.List<java.lang.RuntimeException> , Message < ? > org.springframework.integration.dispatcher.Message<?> , boolean boolean ) { if ( boolean || ! this . boolean ) { if ( java.util.List<java.lang.RuntimeException> != null && java.util.List<java.lang.RuntimeException> . int ( ) == NUMBER ) { throw java.util.List<java.lang.RuntimeException> . java.lang.RuntimeException ( NUMBER ) ; } throw new AggregateMessageDeliveryException ( org.springframework.integration.dispatcher.Message<> , STRING , java.util.List<java.lang.RuntimeException> ) ; } }  <METHOD_END>
