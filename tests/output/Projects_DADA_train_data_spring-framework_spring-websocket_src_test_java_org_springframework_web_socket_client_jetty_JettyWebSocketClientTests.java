<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.socket.client.jetty.JettyWebSocketClientTests.TestJettyWebSocketServer = new org.springframework.web.socket.client.jetty.JettyWebSocketClientTests.TestJettyWebSocketServer ( new TextWebSocketHandler ( ) ) ; this . org.springframework.web.socket.client.jetty.JettyWebSocketClientTests.TestJettyWebSocketServer . void ( ) ; this . org.springframework.web.socket.client.jetty.JettyWebSocketClient = new JettyWebSocketClient ( ) ; this . org.springframework.web.socket.client.jetty.JettyWebSocketClient . start ( ) ; this . java.lang.String = STRING + this . org.springframework.web.socket.client.jetty.JettyWebSocketClientTests.TestJettyWebSocketServer . int ( ) + STRING ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { this . org.springframework.web.socket.client.jetty.WebSocketSession . close ( ) ; this . org.springframework.web.socket.client.jetty.JettyWebSocketClient . stop ( ) ; this . org.springframework.web.socket.client.jetty.JettyWebSocketClientTests.TestJettyWebSocketServer . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebSocketHttpHeaders org.springframework.web.socket.client.jetty.WebSocketHttpHeaders = new WebSocketHttpHeaders ( ) ; org.springframework.web.socket.client.jetty.WebSocketHttpHeaders . setSecWebSocketProtocol ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; this . org.springframework.web.socket.client.jetty.WebSocketSession = this . org.springframework.web.socket.client.jetty.JettyWebSocketClient . doHandshake ( new TextWebSocketHandler ( ) , org.springframework.web.socket.client.jetty.WebSocketHttpHeaders , new java.net.URI ( this . java.lang.String ) ) . get ( ) ; assertEquals ( this . java.lang.String , this . org.springframework.web.socket.client.jetty.WebSocketSession . getUri ( ) . toString ( ) ) ; assertEquals ( STRING , this . org.springframework.web.socket.client.jetty.WebSocketSession . getAcceptedProtocol ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebSocketHttpHeaders org.springframework.web.socket.client.jetty.WebSocketHttpHeaders = new WebSocketHttpHeaders ( ) ; org.springframework.web.socket.client.jetty.WebSocketHttpHeaders . setSecWebSocketProtocol ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; this . org.springframework.web.socket.client.jetty.JettyWebSocketClient . setTaskExecutor ( new SimpleAsyncTaskExecutor ( ) ) ; this . org.springframework.web.socket.client.jetty.WebSocketSession = this . org.springframework.web.socket.client.jetty.JettyWebSocketClient . doHandshake ( new TextWebSocketHandler ( ) , org.springframework.web.socket.client.jetty.WebSocketHttpHeaders , new java.net.URI ( this . java.lang.String ) ) . get ( ) ; assertEquals ( this . java.lang.String , this . org.springframework.web.socket.client.jetty.WebSocketSession . getUri ( ) . toString ( ) ) ; assertEquals ( STRING , this . org.springframework.web.socket.client.jetty.WebSocketSession . getAcceptedProtocol ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( final WebSocketHandler org.springframework.web.socket.client.jetty.WebSocketHandler ) { this . org.springframework.web.socket.client.jetty.Server = new Server ( ) ; ServerConnector org.springframework.web.socket.client.jetty.ServerConnector = new ServerConnector ( this . org.springframework.web.socket.client.jetty.Server ) ; org.springframework.web.socket.client.jetty.ServerConnector . setPort ( NUMBER ) ; this . org.springframework.web.socket.client.jetty.Server . addConnector ( org.springframework.web.socket.client.jetty.ServerConnector ) ; this . org.springframework.web.socket.client.jetty.Server . setHandler ( new org . org.eclipse . org.eclipse . org.eclipse . org.eclipse . org.eclipse ( ) { @ java.lang.Override public void void ( WebSocketServletFactory org.springframework.web.socket.client.jetty.WebSocketServletFactory ) { org.springframework.web.socket.client.jetty.WebSocketServletFactory . setCreator ( new WebSocketCreator ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ServletUpgradeRequest org.springframework.web.socket.client.jetty.ServletUpgradeRequest , ServletUpgradeResponse org.springframework.web.socket.client.jetty.ServletUpgradeResponse ) { if ( ! CollectionUtils . isEmpty ( org.springframework.web.socket.client.jetty.ServletUpgradeRequest . getSubProtocols ( ) ) ) { org.springframework.web.socket.client.jetty.ServletUpgradeResponse . setAcceptedSubProtocol ( org.springframework.web.socket.client.jetty.ServletUpgradeRequest . getSubProtocols ( ) . get ( NUMBER ) ) ; } JettyWebSocketSession org.springframework.web.socket.client.jetty.JettyWebSocketSession = new JettyWebSocketSession ( null , null ) ; return new JettyWebSocketHandlerAdapter ( org.springframework.web.socket.client.jetty.WebSocketHandler , org.springframework.web.socket.client.jetty.JettyWebSocketSession ) ; } } ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketServletFactory org.springframework.web.socket.client.jetty.WebSocketServletFactory ) { org.springframework.web.socket.client.jetty.WebSocketServletFactory . setCreator ( new WebSocketCreator ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ServletUpgradeRequest org.springframework.web.socket.client.jetty.ServletUpgradeRequest , ServletUpgradeResponse org.springframework.web.socket.client.jetty.ServletUpgradeResponse ) { if ( ! CollectionUtils . isEmpty ( org.springframework.web.socket.client.jetty.ServletUpgradeRequest . getSubProtocols ( ) ) ) { org.springframework.web.socket.client.jetty.ServletUpgradeResponse . setAcceptedSubProtocol ( org.springframework.web.socket.client.jetty.ServletUpgradeRequest . getSubProtocols ( ) . get ( NUMBER ) ) ; } JettyWebSocketSession org.springframework.web.socket.client.jetty.JettyWebSocketSession = new JettyWebSocketSession ( null , null ) ; return new JettyWebSocketHandlerAdapter ( org.springframework.web.socket.client.jetty.WebSocketHandler , org.springframework.web.socket.client.jetty.JettyWebSocketSession ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ServletUpgradeRequest org.springframework.web.socket.client.jetty.ServletUpgradeRequest , ServletUpgradeResponse org.springframework.web.socket.client.jetty.ServletUpgradeResponse ) { if ( ! CollectionUtils . isEmpty ( org.springframework.web.socket.client.jetty.ServletUpgradeRequest . getSubProtocols ( ) ) ) { org.springframework.web.socket.client.jetty.ServletUpgradeResponse . setAcceptedSubProtocol ( org.springframework.web.socket.client.jetty.ServletUpgradeRequest . getSubProtocols ( ) . get ( NUMBER ) ) ; } JettyWebSocketSession org.springframework.web.socket.client.jetty.JettyWebSocketSession = new JettyWebSocketSession ( null , null ) ; return new JettyWebSocketHandlerAdapter ( org.springframework.web.socket.client.jetty.WebSocketHandler , org.springframework.web.socket.client.jetty.JettyWebSocketSession ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Exception { this . org.springframework.web.socket.client.jetty.Server . start ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Exception { this . org.springframework.web.socket.client.jetty.Server . stop ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return ( ( ServerConnector ) this . org.springframework.web.socket.client.jetty.Server . getConnectors ( ) [ NUMBER ] ) . getLocalPort ( ) ; }  <METHOD_END>
