<METHOD_START> public void ( Undertow . Undertow Undertow.Builder , boolean boolean ) { this . Undertow.Builder = Undertow.Builder ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.boot.web.embedded.undertow.WebServerException { synchronized ( this . java.lang.Object ) { if ( this . boolean ) { return; } try { if ( ! this . boolean ) { return; } if ( this . org.springframework.boot.web.embedded.undertow.Undertow == null ) { this . org.springframework.boot.web.embedded.undertow.Undertow = this . Undertow.Builder . build ( ) ; } this . org.springframework.boot.web.embedded.undertow.Undertow . start ( ) ; this . boolean = true ; org.springframework.boot.web.embedded.undertow.UndertowWebServer . org.springframework.boot.web.embedded.undertow.Log . info ( STRING + java.lang.String ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.net.BindException ( java.lang.Exception ) != null ) { java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> < org.springframework.boot.web.embedded.undertow.UndertowWebServer . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port > java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> = java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> ( ) ; java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> < org.springframework.boot.web.embedded.undertow.UndertowWebServer . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port > java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> = java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> ( ) ; java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> . boolean ( java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> ) ; if ( java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> . int ( ) == NUMBER ) { throw new PortInUseException ( java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> . java.util.Iterator<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> ( ) . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port ( ) . int ( ) ) ; } } throw new WebServerException ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private java.net.BindException java.net.BindException ( java.lang.Exception java.lang.Exception ) { java.lang.Throwable java.lang.Throwable = java.lang.Exception ; while ( java.lang.Throwable != null ) { if ( java.lang.Throwable instanceof java.net.BindException ) { return ( java.net.BindException ) java.lang.Throwable ; } java.lang.Throwable = java.lang.Throwable . java.lang.Throwable ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> < org.springframework.boot.web.embedded.undertow.UndertowWebServer . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port > java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> = java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> ( ) ; if ( ! java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> . boolean ( ) ) { return StringUtils . collectionToDelimitedString ( java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> , STRING ) ; } return STRING ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> < org.springframework.boot.web.embedded.undertow.UndertowWebServer . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port > java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> ( ) { java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> < org.springframework.boot.web.embedded.undertow.UndertowWebServer . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port > java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> = new java.util.ArrayList<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> <> ( ) ; try { if ( ! this . boolean ) { java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> . boolean ( new org.springframework.boot.web.embedded.undertow.UndertowWebServer . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port ( - NUMBER , STRING ) ) ; } else { for ( BoundChannel org.springframework.boot.web.embedded.undertow.BoundChannel : java.util.List<org.springframework.boot.web.embedded.undertow.BoundChannel> ( ) ) { java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> . boolean ( org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port ( org.springframework.boot.web.embedded.undertow.BoundChannel ) ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { } return java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<org.springframework.boot.web.embedded.undertow.BoundChannel> < BoundChannel > java.util.List<org.springframework.boot.web.embedded.undertow.BoundChannel> ( ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( Undertow .class , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; return ( java.util.List<org.springframework.boot.web.embedded.undertow.BoundChannel> < BoundChannel > ) ReflectionUtils . getField ( java.lang.reflect.Field , this . org.springframework.boot.web.embedded.undertow.Undertow ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.undertow.UndertowWebServer . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port ( BoundChannel org.springframework.boot.web.embedded.undertow.BoundChannel ) { java.net.SocketAddress java.net.SocketAddress = org.springframework.boot.web.embedded.undertow.BoundChannel . getLocalAddress ( ) ; if ( java.net.SocketAddress instanceof java.net.InetSocketAddress ) { java.lang.String java.lang.String = ReflectionUtils . findField ( org.springframework.boot.web.embedded.undertow.BoundChannel . getClass ( ) , STRING ) != null ? STRING : STRING ; return new org.springframework.boot.web.embedded.undertow.UndertowWebServer . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port ( ( ( java.net.InetSocketAddress ) java.net.SocketAddress ) . int ( ) , java.lang.String ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> < org.springframework.boot.web.embedded.undertow.UndertowWebServer . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port > java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> ( ) { java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> < org.springframework.boot.web.embedded.undertow.UndertowWebServer . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port > java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> = new java.util.ArrayList<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> <> ( ) ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ( ) ) { try { java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> . boolean ( org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port ( java.lang.Object ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } return java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( Undertow .class , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; return ( java.util.List<java.lang.Object> < java.lang.Object > ) ReflectionUtils . getField ( java.lang.reflect.Field , this . org.springframework.boot.web.embedded.undertow.Undertow ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.undertow.UndertowWebServer . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port ( java.lang.Object java.lang.Object ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; java.lang.String java.lang.String = ReflectionUtils . getField ( java.lang.reflect.Field , java.lang.Object ) . toString ( ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; int int = ( java.lang.Integer ) ReflectionUtils . getField ( java.lang.reflect.Field , java.lang.Object ) ; return new org.springframework.boot.web.embedded.undertow.UndertowWebServer . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port ( int , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.boot.web.embedded.undertow.WebServerException { synchronized ( this . java.lang.Object ) { if ( ! this . boolean ) { return; } this . boolean = false ; try { this . org.springframework.boot.web.embedded.undertow.Undertow . stop ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new WebServerException ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> < org.springframework.boot.web.embedded.undertow.UndertowWebServer . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port > java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> = java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> ( ) ; if ( java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> . boolean ( ) ) { return NUMBER ; } return java.util.List<org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port ( NUMBER ) . int ( ) ; }  <METHOD_END>
<METHOD_START> private void ( int int , java.lang.String java.lang.String ) { this . int = int ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . int + STRING + this . java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( java.lang.Class<? extends org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.boot.web.embedded.undertow.UndertowWebServer . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port = ( org.springframework.boot.web.embedded.undertow.UndertowWebServer . org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port ) java.lang.Object ; if ( this . int != org.springframework.boot.web.embedded.undertow.UndertowWebServer.Port . int ) { return false ; } return true ; }  <METHOD_END>
