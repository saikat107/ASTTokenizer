<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.info.GitProperties> < java.lang.String , GitProperties > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.info.GitProperties> = this . org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext . getBeansOfType ( GitProperties .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.info.GitProperties> ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; GitProperties org.springframework.boot.autoconfigure.info.GitProperties = this . org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext . getBean ( GitProperties .class ) ; assertThat ( org.springframework.boot.autoconfigure.info.GitProperties . getBranch ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.info.GitProperties . getCommitId ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.info.GitProperties . getCommitTime ( ) . getTime ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; GitProperties org.springframework.boot.autoconfigure.info.GitProperties = this . org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext . getBean ( GitProperties .class ) ; assertThat ( org.springframework.boot.autoconfigure.info.GitProperties . getBranch ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.info.GitProperties . getCommitId ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.info.GitProperties . getCommitTime ( ) . getTime ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; GitProperties org.springframework.boot.autoconfigure.info.GitProperties = this . org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext . getBean ( GitProperties .class ) ; assertThat ( org.springframework.boot.autoconfigure.info.GitProperties . getBranch ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfigurationTests.CustomInfoPropertiesConfiguration .class , STRING ) ; GitProperties org.springframework.boot.autoconfigure.info.GitProperties = this . org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext . getBean ( GitProperties .class ) ; assertThat ( org.springframework.boot.autoconfigure.info.GitProperties ) . isSameAs ( this . org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; BuildProperties org.springframework.boot.autoconfigure.info.BuildProperties = this . org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext . getBean ( BuildProperties .class ) ; assertThat ( org.springframework.boot.autoconfigure.info.BuildProperties . getGroup ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.info.BuildProperties . getArtifact ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.info.BuildProperties . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.info.BuildProperties . getVersion ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.info.BuildProperties . getTime ( ) . getTime ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; BuildProperties org.springframework.boot.autoconfigure.info.BuildProperties = this . org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext . getBean ( BuildProperties .class ) ; assertThat ( org.springframework.boot.autoconfigure.info.BuildProperties . getGroup ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.info.BuildProperties . getArtifact ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.info.BuildProperties . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.info.BuildProperties . getVersion ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.info.BuildProperties . getTime ( ) . getTime ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.info.BuildProperties> < java.lang.String , BuildProperties > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.info.BuildProperties> = this . org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext . getBeansOfType ( BuildProperties .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.info.BuildProperties> ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfigurationTests.CustomInfoPropertiesConfiguration .class ) ; BuildProperties org.springframework.boot.autoconfigure.info.BuildProperties = this . org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext . getBean ( BuildProperties .class ) ; assertThat ( org.springframework.boot.autoconfigure.info.BuildProperties ) . isSameAs ( this . org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { void ( null , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; if ( java.lang.Class<> != null ) { org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; } org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext . register ( PropertyPlaceholderAutoConfiguration .class , ProjectInfoAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.info.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.info.GitProperties org.springframework.boot.autoconfigure.info.GitProperties ( ) { return new GitProperties ( new java.util.Properties ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.info.BuildProperties org.springframework.boot.autoconfigure.info.BuildProperties ( ) { return new BuildProperties ( new java.util.Properties ( ) ) ; }  <METHOD_END>
