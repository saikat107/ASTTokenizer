<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { super. setup ( ) ; this . org.springframework.web.server.session.RestTemplate = new RestTemplate ( ) ; }  <METHOD_END>
<METHOD_START> private java.net.URI java.net.URI ( java.lang.String java.lang.String ) throws java.net.URISyntaxException { boolean boolean = ! StringUtils . hasText ( java.lang.String ) || ! java.lang.String . boolean ( STRING ) ; java.lang.String = ( boolean ? STRING + java.lang.String : java.lang.String ) ; return new java.net.URI ( STRING + port + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.server.session.HttpHandler org.springframework.web.server.session.HttpHandler ( ) { this . org.springframework.web.server.session.DefaultWebSessionManager = new DefaultWebSessionManager ( ) ; this . org.springframework.web.server.session.WebSessionIntegrationTests.TestWebHandler = new org.springframework.web.server.session.WebSessionIntegrationTests.TestWebHandler ( ) ; return WebHttpHandlerBuilder . webHandler ( this . org.springframework.web.server.session.WebSessionIntegrationTests.TestWebHandler ) . sessionManager ( this . org.springframework.web.server.session.DefaultWebSessionManager ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestEntity < java.lang.Void > org.springframework.web.server.session.RequestEntity<java.lang.Void> = RequestEntity . get ( java.net.URI ( STRING ) ) . build ( ) ; ResponseEntity < java.lang.Void > org.springframework.web.server.session.ResponseEntity<java.lang.Void> = this . org.springframework.web.server.session.RestTemplate . exchange ( org.springframework.web.server.session.RequestEntity<java.lang.Void> , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.server.session.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.web.server.session.ResponseEntity<java.lang.Void> . getHeaders ( ) ) ; assertNotNull ( java.lang.String ) ; assertEquals ( NUMBER , this . org.springframework.web.server.session.WebSessionIntegrationTests.TestWebHandler . int ( ) ) ; org.springframework.web.server.session.RequestEntity<java.lang.Void> = RequestEntity . get ( java.net.URI ( STRING ) ) . header ( STRING , STRING + java.lang.String ) . build ( ) ; org.springframework.web.server.session.ResponseEntity<java.lang.Void> = this . org.springframework.web.server.session.RestTemplate . exchange ( org.springframework.web.server.session.RequestEntity<java.lang.Void> , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.server.session.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertNull ( org.springframework.web.server.session.ResponseEntity<java.lang.Void> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.web.server.session.WebSessionIntegrationTests.TestWebHandler . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestEntity < java.lang.Void > org.springframework.web.server.session.RequestEntity<java.lang.Void> = RequestEntity . get ( java.net.URI ( STRING ) ) . build ( ) ; ResponseEntity < java.lang.Void > org.springframework.web.server.session.ResponseEntity<java.lang.Void> = this . org.springframework.web.server.session.RestTemplate . exchange ( org.springframework.web.server.session.RequestEntity<java.lang.Void> , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.server.session.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.web.server.session.ResponseEntity<java.lang.Void> . getHeaders ( ) ) ; assertNotNull ( java.lang.String ) ; assertEquals ( NUMBER , this . org.springframework.web.server.session.WebSessionIntegrationTests.TestWebHandler . int ( ) ) ; org.springframework.web.server.session.RequestEntity<java.lang.Void> = RequestEntity . get ( java.net.URI ( STRING ) ) . header ( STRING , STRING + java.lang.String ) . build ( ) ; org.springframework.web.server.session.ResponseEntity<java.lang.Void> = this . org.springframework.web.server.session.RestTemplate . exchange ( org.springframework.web.server.session.RequestEntity<java.lang.Void> , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.server.session.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertNull ( org.springframework.web.server.session.ResponseEntity<java.lang.Void> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.web.server.session.WebSessionIntegrationTests.TestWebHandler . int ( ) ) ; WebSession org.springframework.web.server.session.WebSession = this . org.springframework.web.server.session.DefaultWebSessionManager . getSessionStore ( ) . retrieveSession ( java.lang.String ) . block ( ) ; ( ( DefaultWebSession ) org.springframework.web.server.session.WebSession ) . setLastAccessTime ( java.time.Clock . java.time.Clock ( this . org.springframework.web.server.session.DefaultWebSessionManager . getClock ( ) , java.time.Duration . java.time.Duration ( - NUMBER ) ) . instant ( ) ) ; org.springframework.web.server.session.RequestEntity<java.lang.Void> = RequestEntity . get ( java.net.URI ( STRING ) ) . header ( STRING , STRING + java.lang.String ) . build ( ) ; org.springframework.web.server.session.ResponseEntity<java.lang.Void> = this . org.springframework.web.server.session.RestTemplate . exchange ( org.springframework.web.server.session.RequestEntity<java.lang.Void> , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.server.session.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; java.lang.String = java.lang.String ( org.springframework.web.server.session.ResponseEntity<java.lang.Void> . getHeaders ( ) ) ; assertNotNull ( STRING , java.lang.String ) ; assertEquals ( STRING , NUMBER , this . org.springframework.web.server.session.WebSessionIntegrationTests.TestWebHandler . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( HttpHeaders org.springframework.web.server.session.HttpHeaders ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.web.server.session.HttpHeaders . get ( STRING ) ; assertNotNull ( java.util.List<java.lang.String> ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> . java.lang.String ( NUMBER ) . java.lang.String[] ( STRING ) ) { if ( java.lang.String . boolean ( STRING ) ) { return java.lang.String . java.lang.String ( STRING . int ( ) ) ; } } return null ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.session.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.session.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.session.ServerWebExchange ) { return org.springframework.web.server.session.ServerWebExchange . getSession ( ) . map ( session -> { Map < String , Object > map = session . getAttributes ( ) ; int value = ( map . get ( STRING ) != null ? ( int ) map . get ( STRING ) : NUMBER ) ; value ++ ; map . put ( STRING , value ) ; this . currentValue . set ( value ) ; return session ; } ) . then ( ) ; }  <METHOD_END>
