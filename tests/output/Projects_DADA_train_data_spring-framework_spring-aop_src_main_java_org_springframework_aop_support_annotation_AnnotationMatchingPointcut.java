<METHOD_START> public void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { this . org.springframework.aop.support.annotation.ClassFilter = new AnnotationClassFilter ( java.lang.Class<> ) ; this . org.springframework.aop.support.annotation.MethodMatcher = MethodMatcher . TRUE ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , boolean boolean ) { this . org.springframework.aop.support.annotation.ClassFilter = new AnnotationClassFilter ( java.lang.Class<> , boolean ) ; this . org.springframework.aop.support.annotation.MethodMatcher = MethodMatcher . TRUE ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . isTrue ( ( java.lang.Class<> != null || java.lang.Class<> != null ) , STRING ) ; if ( java.lang.Class<> != null ) { this . org.springframework.aop.support.annotation.ClassFilter = new AnnotationClassFilter ( java.lang.Class<> ) ; } else { this . org.springframework.aop.support.annotation.ClassFilter = ClassFilter . TRUE ; } if ( java.lang.Class<> != null ) { this . org.springframework.aop.support.annotation.MethodMatcher = new AnnotationMethodMatcher ( java.lang.Class<> ) ; } else { this . org.springframework.aop.support.annotation.MethodMatcher = MethodMatcher . TRUE ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.support.annotation.ClassFilter org.springframework.aop.support.annotation.ClassFilter ( ) { return this . org.springframework.aop.support.annotation.ClassFilter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.support.annotation.MethodMatcher org.springframework.aop.support.annotation.MethodMatcher ( ) { return this . org.springframework.aop.support.annotation.MethodMatcher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.aop.support.annotation.AnnotationMatchingPointcut ) ) { return false ; } org.springframework.aop.support.annotation.AnnotationMatchingPointcut org.springframework.aop.support.annotation.AnnotationMatchingPointcut = ( org.springframework.aop.support.annotation.AnnotationMatchingPointcut ) java.lang.Object ; return ObjectUtils . nullSafeEquals ( org.springframework.aop.support.annotation.AnnotationMatchingPointcut . org.springframework.aop.support.annotation.ClassFilter , this . org.springframework.aop.support.annotation.ClassFilter ) && ObjectUtils . nullSafeEquals ( org.springframework.aop.support.annotation.AnnotationMatchingPointcut . org.springframework.aop.support.annotation.MethodMatcher , this . org.springframework.aop.support.annotation.MethodMatcher ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = NUMBER ; if ( this . org.springframework.aop.support.annotation.ClassFilter != null ) { int = NUMBER * int + this . org.springframework.aop.support.annotation.ClassFilter . hashCode ( ) ; } if ( this . org.springframework.aop.support.annotation.MethodMatcher != null ) { int = NUMBER * int + this . org.springframework.aop.support.annotation.MethodMatcher . hashCode ( ) ; } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . org.springframework.aop.support.annotation.ClassFilter + STRING + this . org.springframework.aop.support.annotation.MethodMatcher ; }  <METHOD_END>
<METHOD_START> public static org.springframework.aop.support.annotation.AnnotationMatchingPointcut org.springframework.aop.support.annotation.AnnotationMatchingPointcut ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return new org.springframework.aop.support.annotation.AnnotationMatchingPointcut ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.aop.support.annotation.AnnotationMatchingPointcut org.springframework.aop.support.annotation.AnnotationMatchingPointcut ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return new org.springframework.aop.support.annotation.AnnotationMatchingPointcut ( null , java.lang.Class<> ) ; }  <METHOD_END>
