<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.http.server.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.http.server.ServletServerHttpRequest = new ServletServerHttpRequest ( org.springframework.http.server.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.http.server.MockHttpServletRequest . setMethod ( STRING ) ; assertEquals ( STRING , HttpMethod . POST , org.springframework.http.server.ServletServerHttpRequest . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; org.springframework.http.server.MockHttpServletRequest . setServerName ( java.net.URI . java.lang.String ( ) ) ; org.springframework.http.server.MockHttpServletRequest . setServerPort ( java.net.URI . int ( ) ) ; org.springframework.http.server.MockHttpServletRequest . setRequestURI ( java.net.URI . java.lang.String ( ) ) ; org.springframework.http.server.MockHttpServletRequest . setQueryString ( java.net.URI . java.lang.String ( ) ) ; assertEquals ( STRING , java.net.URI , org.springframework.http.server.ServletServerHttpRequest . getURI ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING + STRING ) ; org.springframework.http.server.MockHttpServletRequest . setScheme ( java.net.URI . java.lang.String ( ) ) ; org.springframework.http.server.MockHttpServletRequest . setServerName ( java.net.URI . java.lang.String ( ) ) ; org.springframework.http.server.MockHttpServletRequest . setServerPort ( java.net.URI . int ( ) ) ; org.springframework.http.server.MockHttpServletRequest . setRequestURI ( java.net.URI . java.lang.String ( ) ) ; org.springframework.http.server.MockHttpServletRequest . setQueryString ( java.net.URI . java.lang.String ( ) ) ; assertEquals ( STRING , java.net.URI , org.springframework.http.server.ServletServerHttpRequest . getURI ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.http.server.MockHttpServletRequest . addHeader ( java.lang.String , java.lang.String ) ; org.springframework.http.server.MockHttpServletRequest . addHeader ( java.lang.String , java.lang.String ) ; org.springframework.http.server.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.http.server.MockHttpServletRequest . setCharacterEncoding ( STRING ) ; HttpHeaders org.springframework.http.server.HttpHeaders = org.springframework.http.server.ServletServerHttpRequest . getHeaders ( ) ; assertNotNull ( STRING , org.springframework.http.server.HttpHeaders ) ; assertTrue ( STRING , org.springframework.http.server.HttpHeaders . containsKey ( java.lang.String ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.http.server.HttpHeaders . get ( java.lang.String ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( STRING , java.util.List<java.lang.String> . boolean ( java.lang.String ) ) ; assertTrue ( STRING , java.util.List<java.lang.String> . boolean ( java.lang.String ) ) ; assertEquals ( STRING , new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , org.springframework.http.server.HttpHeaders . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.http.server.MockHttpServletRequest . addHeader ( java.lang.String , java.lang.String ) ; org.springframework.http.server.MockHttpServletRequest . addHeader ( java.lang.String , java.lang.String ) ; org.springframework.http.server.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.http.server.MockHttpServletRequest . setCharacterEncoding ( STRING ) ; HttpHeaders org.springframework.http.server.HttpHeaders = org.springframework.http.server.ServletServerHttpRequest . getHeaders ( ) ; assertNotNull ( STRING , org.springframework.http.server.HttpHeaders ) ; assertTrue ( STRING , org.springframework.http.server.HttpHeaders . containsKey ( java.lang.String ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.http.server.HttpHeaders . get ( java.lang.String ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( STRING , java.util.List<java.lang.String> . boolean ( java.lang.String ) ) ; assertTrue ( STRING , java.util.List<java.lang.String> . boolean ( java.lang.String ) ) ; assertNull ( org.springframework.http.server.HttpHeaders . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { byte [] byte[] = STRING . byte[] ( STRING ) ; org.springframework.http.server.MockHttpServletRequest . setContent ( byte[] ) ; byte [] byte[] = FileCopyUtils . copyToByteArray ( org.springframework.http.server.ServletServerHttpRequest . getBody ( ) ) ; assertArrayEquals ( STRING , byte[] , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.http.server.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.http.server.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.http.server.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.http.server.MockHttpServletRequest . addParameter ( STRING , new java.lang.String [] { STRING , STRING } ) ; org.springframework.http.server.MockHttpServletRequest . addParameter ( STRING , ( java.lang.String ) null ) ; byte [] byte[] = FileCopyUtils . copyToByteArray ( org.springframework.http.server.ServletServerHttpRequest . getBody ( ) ) ; byte [] byte[] = STRING . byte[] ( STRING ) ; assertArrayEquals ( STRING , byte[] , byte[] ) ; }  <METHOD_END>
