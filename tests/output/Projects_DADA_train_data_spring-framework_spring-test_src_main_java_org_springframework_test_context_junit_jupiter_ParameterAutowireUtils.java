<METHOD_START> private void ( ) { }  <METHOD_END>
<METHOD_START> static boolean boolean ( java.lang.reflect.Parameter java.lang.reflect.Parameter ) { return ApplicationContext .class . boolean ( java.lang.reflect.Parameter . java.lang.Class<?> ( ) ) || AnnotatedElementUtils . hasAnnotation ( java.lang.reflect.Parameter , Autowired .class ) || AnnotatedElementUtils . hasAnnotation ( java.lang.reflect.Parameter , Qualifier .class ) || AnnotatedElementUtils . hasAnnotation ( java.lang.reflect.Parameter , Value .class ) ; }  <METHOD_END>
<METHOD_START> static java.lang.Object java.lang.Object ( java.lang.reflect.Parameter java.lang.reflect.Parameter , java.lang.Class<?> < ? > java.lang.Class<?> , ApplicationContext org.springframework.test.context.junit.jupiter.ApplicationContext ) { boolean boolean = java.util.Optional<A> ( java.lang.reflect.Parameter , Autowired .class ) . map ( Autowired :: required ) . orElse ( true ) ; MethodParameter org.springframework.test.context.junit.jupiter.MethodParameter = SynthesizingMethodParameter . forParameter ( java.lang.reflect.Parameter ) ; DependencyDescriptor org.springframework.test.context.junit.jupiter.DependencyDescriptor = new DependencyDescriptor ( org.springframework.test.context.junit.jupiter.MethodParameter , boolean ) ; org.springframework.test.context.junit.jupiter.DependencyDescriptor . setContainingClass ( java.lang.Class<> ) ; return org.springframework.test.context.junit.jupiter.ApplicationContext . getAutowireCapableBeanFactory ( ) . resolveDependency ( org.springframework.test.context.junit.jupiter.DependencyDescriptor , null ) ; }  <METHOD_END>
<METHOD_START> private static < A extends java.lang.annotation.Annotation > java.util.Optional<A> < A > java.util.Optional<A> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> ) { return java.util.Optional . java.util.Optional ( AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> ) ) ; }  <METHOD_END>
