<METHOD_START> protected void ( T T ) { Assert . notNull ( T , STRING ) ; this . T = T ; }  <METHOD_END>
<METHOD_START> public void void ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> , java.util.Optional<? extends java.lang.Object> < ? extends java.lang.Object > java.util.Optional<? extends java.lang.Object> ) { Assert . notNull ( org.springframework.data.mapping.model.PersistentProperty<> , STRING ) ; try { if ( ! org.springframework.data.mapping.model.PersistentProperty<> . usePropertyAccess ( ) ) { java.lang.reflect.Field java.lang.reflect.Field = org.springframework.data.mapping.model.PersistentProperty<> . getField ( ) . get ( ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; ReflectionUtils . setField ( java.lang.reflect.Field , T , java.util.Optional<> . orElse ( null ) ) ; return; } java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> = org.springframework.data.mapping.model.PersistentProperty<> . getSetter ( ) ; java.util.Optional<java.lang.reflect.Method> . void ( java.lang.reflect.Method -> { ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; ReflectionUtils . invokeMethod ( java.lang.reflect.Method , T , java.util.Optional<> . orElse ( null ) ) ; } ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { throw new MappingException ( STRING , java.lang.IllegalStateException ) ; } }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> ) { return java.util.Optional ( org.springframework.data.mapping.model.PersistentProperty<> , org.springframework.data.mapping.model.PersistentProperty<> . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < S > java.util.Optional<S> < S > java.util.Optional<S> ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> , java.lang.Class<? extends S> < ? extends S > java.lang.Class<? extends S> ) { Assert . notNull ( org.springframework.data.mapping.model.PersistentProperty<> , STRING ) ; try { if ( ! org.springframework.data.mapping.model.PersistentProperty<> . usePropertyAccess ( ) ) { java.lang.reflect.Field java.lang.reflect.Field = org.springframework.data.mapping.model.PersistentProperty<> . getField ( ) . get ( ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; return java.util.Optional . java.util.Optional<S> ( ( S ) ReflectionUtils . getField ( java.lang.reflect.Field , T ) ) ; } java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> = org.springframework.data.mapping.model.PersistentProperty<> . getGetter ( ) ; return java.util.Optional<java.lang.reflect.Method> . java.util.Optional<S> ( java.lang.reflect.Method -> { ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; return ( S ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , T ) ; } ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { throw new MappingException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mapping.model.PersistentProperty<> . toString ( ) , T . java.lang.String ( ) ) , java.lang.IllegalStateException ) ; } }  <METHOD_END>
<METHOD_START> public T T ( ) { return T ; }  <METHOD_END>
