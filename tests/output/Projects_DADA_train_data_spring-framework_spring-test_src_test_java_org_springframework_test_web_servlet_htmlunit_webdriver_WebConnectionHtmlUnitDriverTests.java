<METHOD_START> @ Before public void void ( ) java.lang.Exception { when ( this . org.springframework.test.web.servlet.htmlunit.webdriver.WebConnection . getResponse ( any ( WebRequest .class ) ) ) . thenThrow ( new java.io.IOException ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver . getWebConnection ( ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.htmlunit.webdriver.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver . setWebConnection ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver . setWebConnection ( this . org.springframework.test.web.servlet.htmlunit.webdriver.WebConnection ) ; assertThat ( this . org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver . getWebConnection ( ) , equalTo ( this . org.springframework.test.web.servlet.htmlunit.webdriver.WebConnection ) ) ; this . org.springframework.test.web.servlet.htmlunit.webdriver.ExpectedException . expect ( WebDriverException .class ) ; this . org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver . get ( STRING ) ; }  <METHOD_END>
