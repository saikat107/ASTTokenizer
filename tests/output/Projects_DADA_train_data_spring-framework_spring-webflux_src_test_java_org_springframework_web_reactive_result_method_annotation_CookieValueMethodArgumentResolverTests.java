<METHOD_START> @ Before public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . refresh ( ) ; ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry = new ReactiveAdapterRegistry ( ) ; this . org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolver = new CookieValueMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . getBeanFactory ( ) , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ; this . org.springframework.web.reactive.result.method.annotation.BindingContext = new BindingContext ( ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<? extends org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolverTests> ( ) , STRING , ( java.lang.Class<?> < ? > [] ) null ) ; this . org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( this . org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; try { this . org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( STRING + java.lang.IllegalStateException . java.lang.String ( ) , java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpCookie org.springframework.web.reactive.result.method.annotation.HttpCookie = new HttpCookie ( STRING , STRING ) ; ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . cookie ( org.springframework.web.reactive.result.method.annotation.HttpCookie . getName ( ) , org.springframework.web.reactive.result.method.annotation.HttpCookie ) . toExchange ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; assertEquals ( org.springframework.web.reactive.result.method.annotation.HttpCookie , org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpCookie org.springframework.web.reactive.result.method.annotation.HttpCookie = new HttpCookie ( STRING , STRING ) ; ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . cookie ( org.springframework.web.reactive.result.method.annotation.HttpCookie . getName ( ) , org.springframework.web.reactive.result.method.annotation.HttpCookie ) . toExchange ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.HttpCookie . getValue ( ) , org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; java.lang.Object java.lang.Object = this . org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) . block ( ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; StepVerifier . create ( org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> ) . expectNextCount ( NUMBER ) . expectError ( ServerWebInputException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( @ CookieValue ( STRING ) HttpCookie org.springframework.web.reactive.result.method.annotation.HttpCookie , @ CookieValue ( name = STRING , defaultValue = STRING ) java.lang.String java.lang.String , java.lang.String java.lang.String , @ CookieValue Mono < java.lang.String > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.String> ) {	}  <METHOD_END>
