<METHOD_START> @ java.lang.Override public org.springframework.data.domain.AbstractPageRequest org.springframework.data.domain.AbstractPageRequest ( int int , int int ) { return PageRequest . of ( int , int ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.domain.AbstractPageRequest org.springframework.data.domain.AbstractPageRequest ( int int , int int , Sort org.springframework.data.domain.Sort ) { return PageRequest . of ( int , int , org.springframework.data.domain.Sort ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Sort org.springframework.data.domain.Sort = Sort . by ( Direction . DESC , STRING ) ; AbstractPageRequest org.springframework.data.domain.AbstractPageRequest = PageRequest . of ( NUMBER , NUMBER , org.springframework.data.domain.Sort ) ; assertEqualsAndHashcode ( org.springframework.data.domain.AbstractPageRequest , org.springframework.data.domain.AbstractPageRequest ) ; assertEqualsAndHashcode ( org.springframework.data.domain.AbstractPageRequest , PageRequest . of ( NUMBER , NUMBER , org.springframework.data.domain.Sort ) ) ; assertEqualsAndHashcode ( PageRequest . of ( NUMBER , NUMBER ) , PageRequest . of ( NUMBER , NUMBER ) ) ; assertNotEqualsAndHashcode ( org.springframework.data.domain.AbstractPageRequest , PageRequest . of ( NUMBER , NUMBER ) ) ; assertNotEqualsAndHashcode ( org.springframework.data.domain.AbstractPageRequest , PageRequest . of ( NUMBER , NUMBER , Direction . ASC , STRING ) ) ; }  <METHOD_END>
