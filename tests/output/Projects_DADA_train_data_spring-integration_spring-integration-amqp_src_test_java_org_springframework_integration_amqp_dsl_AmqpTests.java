<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.integration.amqp.dsl.BrokerRunning . removeTestQueues ( STRING , STRING , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = this . org.springframework.integration.amqp.dsl.AmqpTemplate . convertSendAndReceive ( this . org.springframework.integration.amqp.dsl.Queue . getName ( ) , STRING ) ; assertEquals ( STRING , java.lang.Object ) ; this . org.springframework.integration.amqp.dsl.AmqpInboundGateway . stop ( ) ; this . org.springframework.integration.amqp.dsl.AmqpInboundGateway . start ( ) ; this . org.springframework.integration.amqp.dsl.AmqpTemplate . convertAndSend ( this . org.springframework.integration.amqp.dsl.Queue . getName ( ) , STRING ) ; ( ( RabbitTemplate ) this . org.springframework.integration.amqp.dsl.AmqpTemplate ) . setReceiveTimeout ( NUMBER ) ; java.lang.Object = this . org.springframework.integration.amqp.dsl.AmqpTemplate . receiveAndConvert ( STRING ) ; assertEquals ( STRING , java.lang.Object ) ; assertSame ( this . org.springframework.integration.amqp.dsl.AmqpTemplate , TestUtils . getPropertyValue ( this . org.springframework.integration.amqp.dsl.AmqpInboundGateway , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.amqp.dsl.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; Message < ? > org.springframework.integration.amqp.dsl.Message<?> = null ; int int = NUMBER ; do { org.springframework.integration.amqp.dsl.Message<?> = this . org.springframework.integration.amqp.dsl.PollableChannel . receive ( ) ; if ( org.springframework.integration.amqp.dsl.Message<> != null ) { break; } java.lang.Thread . void ( NUMBER ) ; int ++ ; } while ( int < NUMBER ); assertNotNull ( org.springframework.integration.amqp.dsl.Message<> ) ; assertEquals ( STRING , org.springframework.integration.amqp.dsl.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IntegrationFlowBuilder org.springframework.integration.amqp.dsl.IntegrationFlowBuilder = IntegrationFlows . from ( Amqp . channel ( STRING , this . org.springframework.integration.amqp.dsl.ConnectionFactory ) . autoStartup ( false ) . templateChannelTransacted ( true ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.dsl.IntegrationFlowBuilder , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.amqp.dsl.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.amqp.dsl.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.amqp.dsl.QueueChannel ) . build ( ) ) ; Message < ? > org.springframework.integration.amqp.dsl.Message<?> = org.springframework.integration.amqp.dsl.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.amqp.dsl.Message<> ) ; assertEquals ( STRING , org.springframework.integration.amqp.dsl.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( MessageDeliveryMode . NON_PERSISTENT , TestUtils . getPropertyValue ( this . org.springframework.integration.amqp.dsl.AbstractAmqpChannel , STRING ) ) ; assertSame ( this . org.springframework.integration.amqp.dsl.AmqpHeaderMapper , TestUtils . getPropertyValue ( this . org.springframework.integration.amqp.dsl.AbstractAmqpChannel , STRING ) ) ; assertSame ( this . org.springframework.integration.amqp.dsl.AmqpHeaderMapper , TestUtils . getPropertyValue ( this . org.springframework.integration.amqp.dsl.AbstractAmqpChannel , STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( this . org.springframework.integration.amqp.dsl.AbstractAmqpChannel , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.amqp.dsl.ConnectionFactory org.springframework.integration.amqp.dsl.ConnectionFactory ( ) { return new CachingConnectionFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.amqp.dsl.RabbitTemplate org.springframework.integration.amqp.dsl.RabbitTemplate ( ) { return new RabbitTemplate ( org.springframework.integration.amqp.dsl.ConnectionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.amqp.dsl.RabbitAdmin org.springframework.integration.amqp.dsl.RabbitAdmin ( ) { return new RabbitAdmin ( org.springframework.integration.amqp.dsl.ConnectionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.amqp.dsl.Queue org.springframework.integration.amqp.dsl.Queue ( ) { return new AnonymousQueue ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.amqp.dsl.Queue org.springframework.integration.amqp.dsl.Queue ( ) { return new Queue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.amqp.dsl.IntegrationFlow org.springframework.integration.amqp.dsl.IntegrationFlow ( ConnectionFactory org.springframework.integration.amqp.dsl.ConnectionFactory , AmqpTemplate org.springframework.integration.amqp.dsl.AmqpTemplate ) { return IntegrationFlows . from ( Amqp . inboundGateway ( org.springframework.integration.amqp.dsl.ConnectionFactory , org.springframework.integration.amqp.dsl.AmqpTemplate , org.springframework.integration.amqp.dsl.Queue ( ) ) . id ( STRING ) . defaultReplyTo ( org.springframework.integration.amqp.dsl.Queue ( ) . getName ( ) ) ) . transform ( STRING :: java.lang.String ) . transform ( java.lang.String .class , java.lang.String :: toUpperCase ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.amqp.dsl.IntegrationFlow org.springframework.integration.amqp.dsl.IntegrationFlow ( ConnectionFactory org.springframework.integration.amqp.dsl.ConnectionFactory , AmqpTemplate org.springframework.integration.amqp.dsl.AmqpTemplate ) { return IntegrationFlows . from ( Amqp . channel ( STRING , org.springframework.integration.amqp.dsl.ConnectionFactory ) ) . handle ( Amqp . outboundAdapter ( org.springframework.integration.amqp.dsl.AmqpTemplate ) . routingKeyExpression ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.amqp.dsl.Queue org.springframework.integration.amqp.dsl.Queue ( ) { return new Queue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.amqp.dsl.Queue org.springframework.integration.amqp.dsl.Queue ( ) { return new Queue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.amqp.dsl.IntegrationFlow org.springframework.integration.amqp.dsl.IntegrationFlow ( ConnectionFactory org.springframework.integration.amqp.dsl.ConnectionFactory ) { return IntegrationFlows . from ( Amqp . inboundAdapter ( org.springframework.integration.amqp.dsl.ConnectionFactory , org.springframework.integration.amqp.dsl.Queue ( ) ) ) . transform ( java.lang.String .class , java.lang.String :: toUpperCase ) . channel ( Amqp . pollableChannel ( org.springframework.integration.amqp.dsl.ConnectionFactory ) . queueName ( STRING ) . channelTransacted ( true ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.amqp.dsl.Queue org.springframework.integration.amqp.dsl.Queue ( ) { return new Queue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.amqp.dsl.AsyncRabbitTemplate org.springframework.integration.amqp.dsl.AsyncRabbitTemplate ( ConnectionFactory org.springframework.integration.amqp.dsl.ConnectionFactory ) { return new AsyncRabbitTemplate ( org.springframework.integration.amqp.dsl.ConnectionFactory , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.amqp.dsl.IntegrationFlow org.springframework.integration.amqp.dsl.IntegrationFlow ( AsyncRabbitTemplate org.springframework.integration.amqp.dsl.AsyncRabbitTemplate ) { return f -> f . handle ( Amqp . asyncOutboundGateway ( asyncRabbitTemplate ) . routingKeyFunction ( m -> queue ( ) . getName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.amqp.dsl.AbstractAmqpChannel org.springframework.integration.amqp.dsl.AbstractAmqpChannel ( ConnectionFactory org.springframework.integration.amqp.dsl.ConnectionFactory ) { return Amqp . pollableChannel ( org.springframework.integration.amqp.dsl.ConnectionFactory ) . queueName ( STRING ) . channelTransacted ( true ) . extractPayload ( true ) . inboundHeaderMapper ( org.springframework.integration.amqp.dsl.AmqpHeaderMapper ( ) ) . outboundHeaderMapper ( org.springframework.integration.amqp.dsl.AmqpHeaderMapper ( ) ) . defaultDeliveryMode ( MessageDeliveryMode . NON_PERSISTENT ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.amqp.dsl.AmqpHeaderMapper org.springframework.integration.amqp.dsl.AmqpHeaderMapper ( ) { return DefaultAmqpHeaderMapper . inboundMapper ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.amqp.dsl.AmqpHeaderMapper org.springframework.integration.amqp.dsl.AmqpHeaderMapper ( ) { return DefaultAmqpHeaderMapper . outboundMapper ( ) ; }  <METHOD_END>
