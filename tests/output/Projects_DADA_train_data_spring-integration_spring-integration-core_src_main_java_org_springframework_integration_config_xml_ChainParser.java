<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.xml.BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.config.xml.ParserContext ) { BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( MessageHandlerChain .class ) ; if ( ! StringUtils . hasText ( org.w3c.dom.Element . java.lang.String ( ID_ATTRIBUTE ) ) ) { this . org.springframework.integration.config.xml.Log . info ( STRING + STRING ) ; } java.lang.String java.lang.String = this . java.lang.String ( org.w3c.dom.Element , org.springframework.integration.config.xml.BeanDefinitionBuilder . getRawBeanDefinition ( ) , org.springframework.integration.config.xml.ParserContext ) ; java.util.List<org.springframework.integration.config.xml.BeanMetadataElement> < BeanMetadataElement > java.util.List<org.springframework.integration.config.xml.BeanMetadataElement> = new ManagedList < BeanMetadataElement > ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; org.w3c.dom.NodeList org.w3c.dom.NodeList = org.w3c.dom.Element . org.w3c.dom.NodeList ( ) ; int int = NUMBER ; for ( int int = NUMBER ; int < org.w3c.dom.NodeList . int ( ) ; int ++ ) { org.w3c.dom.Node org.w3c.dom.Node = org.w3c.dom.NodeList . org.w3c.dom.Node ( int ) ; if ( org.w3c.dom.Node . short ( ) == org.w3c.dom.Node . short && ! STRING . boolean ( org.w3c.dom.Node . java.lang.String ( ) ) ) { BeanMetadataElement org.springframework.integration.config.xml.BeanMetadataElement = this . org.springframework.integration.config.xml.BeanMetadataElement ( java.lang.String , ( org.w3c.dom.Element ) org.w3c.dom.Node , int ++ , org.springframework.integration.config.xml.ParserContext , org.springframework.integration.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; if ( org.springframework.integration.config.xml.BeanMetadataElement instanceof RuntimeBeanReference ) { java.lang.String java.lang.String = ( ( RuntimeBeanReference ) org.springframework.integration.config.xml.BeanMetadataElement ) . getBeanName ( ) ; if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING + STRING + java.lang.String + STRING , org.w3c.dom.Element ) ; return null ; } } if ( STRING . boolean ( org.w3c.dom.Node . java.lang.String ( ) ) ) { BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( IntegrationConfigUtils . BASE_PACKAGE + STRING ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.integration.config.xml.BeanMetadataElement ) ; java.util.List<org.springframework.integration.config.xml.BeanMetadataElement> . add ( org.springframework.integration.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } else { java.util.List<org.springframework.integration.config.xml.BeanMetadataElement> . add ( org.springframework.integration.config.xml.BeanMetadataElement ) ; } } } org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.List<org.springframework.integration.config.xml.BeanMetadataElement> ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; return org.springframework.integration.config.xml.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( org.w3c.dom.Element org.w3c.dom.Element , AbstractBeanDefinition org.springframework.integration.config.xml.AbstractBeanDefinition , ParserContext org.springframework.integration.config.xml.ParserContext ) throws org.springframework.integration.config.xml.BeanDefinitionStoreException { java.lang.String java.lang.String = super. resolveId ( org.w3c.dom.Element , org.springframework.integration.config.xml.AbstractBeanDefinition , org.springframework.integration.config.xml.ParserContext ) ; BeanDefinition org.springframework.integration.config.xml.BeanDefinition = org.springframework.integration.config.xml.ParserContext . getContainingBeanDefinition ( ) ; if ( org.springframework.integration.config.xml.BeanDefinition != null ) { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.config.xml.BeanDefinition . getAttribute ( java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.String = java.lang.String + STRING + java.lang.String ; } } org.springframework.integration.config.xml.AbstractBeanDefinition . setAttribute ( java.lang.String , java.lang.String ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.config.xml.BeanMetadataElement org.springframework.integration.config.xml.BeanMetadataElement ( java.lang.String java.lang.String , org.w3c.dom.Element org.w3c.dom.Element , int int , ParserContext org.springframework.integration.config.xml.ParserContext , BeanDefinition org.springframework.integration.config.xml.BeanDefinition ) { BeanDefinitionHolder org.springframework.integration.config.xml.BeanDefinitionHolder = null ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( ID_ATTRIBUTE ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; java.lang.String java.lang.String = java.lang.String + STRING + ( boolean ? STRING + java.lang.String : STRING + int ) ; if ( STRING . boolean ( org.w3c.dom.Element . java.lang.String ( ) ) ) { org.springframework.integration.config.xml.BeanDefinitionHolder = org.springframework.integration.config.xml.ParserContext . getDelegate ( ) . parseBeanDefinitionElement ( org.w3c.dom.Element , org.springframework.integration.config.xml.BeanDefinition ) ; } else { this . void ( org.w3c.dom.Element , org.springframework.integration.config.xml.ParserContext ) ; BeanDefinition org.springframework.integration.config.xml.BeanDefinition = org.springframework.integration.config.xml.ParserContext . getDelegate ( ) . parseCustomElement ( org.w3c.dom.Element , org.springframework.integration.config.xml.BeanDefinition ) ; if ( org.springframework.integration.config.xml.BeanDefinition == null ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; return null ; } else { org.springframework.integration.config.xml.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.integration.config.xml.BeanDefinition , java.lang.String + IntegrationConfigUtils . HANDLER_ALIAS_SUFFIX ) ; } } org.springframework.integration.config.xml.BeanDefinitionHolder . getBeanDefinition ( ) . getPropertyValues ( ) . add ( STRING , java.lang.String ) ; if ( boolean ) { BeanDefinitionReaderUtils . registerBeanDefinition ( org.springframework.integration.config.xml.BeanDefinitionHolder , org.springframework.integration.config.xml.ParserContext . getRegistry ( ) ) ; return new RuntimeBeanReference ( org.springframework.integration.config.xml.BeanDefinitionHolder . getBeanName ( ) ) ; } return org.springframework.integration.config.xml.BeanDefinitionHolder ; }  <METHOD_END>
<METHOD_START> private void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.config.xml.ParserContext ) { final java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ParserContext . extractSource ( org.w3c.dom.Element ) ; final java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( IntegrationNamespaceUtils . ORDER ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( IntegrationNamespaceUtils . createElementDescription ( org.w3c.dom.Element ) + STRING + STRING , java.lang.Object ) ; } final java.util.List<org.w3c.dom.Element> < org.w3c.dom.Element > java.util.List<org.w3c.dom.Element> = DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING ) ; if ( ! java.util.List<org.w3c.dom.Element> . boolean ( ) ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( IntegrationNamespaceUtils . createElementDescription ( org.w3c.dom.Element ) + STRING + STRING , java.lang.Object ) ; } }  <METHOD_END>
