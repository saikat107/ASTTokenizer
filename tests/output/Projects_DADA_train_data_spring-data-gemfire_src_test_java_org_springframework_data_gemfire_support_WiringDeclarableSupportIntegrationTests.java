<METHOD_START> private void void ( Region < ? , ? > org.springframework.data.gemfire.support.Region<?,?> , java.lang.String java.lang.String , DataPolicy org.springframework.data.gemfire.support.DataPolicy ) { assertThat ( org.springframework.data.gemfire.support.Region<,> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.support.Region<,> . getName ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.support.Region<,> . getFullPath ( ) ) . isEqualTo ( java.lang.String . java.lang.String ( STRING , Region . SEPARATOR , java.lang.String ) ) ; assertThat ( org.springframework.data.gemfire.support.Region<,> . getAttributes ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.support.Region<,> . getAttributes ( ) . getDataPolicy ( ) ) . isEqualTo ( org.springframework.data.gemfire.support.DataPolicy ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.gemfire.support.BeanFactory . containsBean ( STRING ) ) . isTrue ( ) ; void ( org.springframework.data.gemfire.support.Region<java.lang.String,java.lang.String> , STRING , DataPolicy . NORMAL ) ; CacheLoader org.springframework.data.gemfire.support.CacheLoader = org.springframework.data.gemfire.support.Region<java.lang.String,java.lang.String> . getAttributes ( ) . getCacheLoader ( ) ; assertThat ( org.springframework.data.gemfire.support.CacheLoader ) . isInstanceOf ( org.springframework.data.gemfire.support.WiringDeclarableSupportIntegrationTests.TestCacheLoader .class ) ; assertThat ( ( ( org.springframework.data.gemfire.support.WiringDeclarableSupportIntegrationTests.TestCacheLoader ) org.springframework.data.gemfire.support.CacheLoader ) . getBeanFactory ( ) ) . isSameAs ( org.springframework.data.gemfire.support.BeanFactory ) ; assertThat ( ( ( org.springframework.data.gemfire.support.WiringDeclarableSupportIntegrationTests.TestCacheLoader ) org.springframework.data.gemfire.support.CacheLoader ) . getPropertyOne ( ) ) . isEqualTo ( org.springframework.data.gemfire.support.BeanFactory . getBean ( STRING ) ) ; assertThat ( ( ( org.springframework.data.gemfire.support.WiringDeclarableSupportIntegrationTests.TestCacheLoader ) org.springframework.data.gemfire.support.CacheLoader ) . getPropertyTwo ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( LoaderHelper < java.lang.String , java.lang.String > org.springframework.data.gemfire.support.LoaderHelper<java.lang.String,java.lang.String> ) throws org.springframework.data.gemfire.support.CacheLoaderException { return org.springframework.data.gemfire.support.LoaderHelper<java.lang.String,java.lang.String> . getKey ( ) ; }  <METHOD_END>
