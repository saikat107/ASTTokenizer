<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { GenericWebApplicationContext org.springframework.web.method.annotation.GenericWebApplicationContext = new GenericWebApplicationContext ( ) ; org.springframework.web.method.annotation.GenericWebApplicationContext . refresh ( ) ; org.springframework.web.method.annotation.ExpressionValueMethodArgumentResolver = new ExpressionValueMethodArgumentResolver ( org.springframework.web.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.web.method.annotation.ExpressionValueMethodArgumentResolverTests> ( ) . java.lang.reflect.Method ( STRING , int .class , java.lang.String .class , java.lang.String .class ) ; org.springframework.web.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.method.annotation.NativeWebRequest = new ServletWebRequest ( new MockHttpServletRequest ( ) , new MockHttpServletResponse ( ) ) ; RequestContextHolder . setRequestAttributes ( org.springframework.web.method.annotation.NativeWebRequest ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { RequestContextHolder . resetRequestAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.web.method.annotation.ExpressionValueMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; assertTrue ( org.springframework.web.method.annotation.ExpressionValueMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; assertFalse ( org.springframework.web.method.annotation.ExpressionValueMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.ExpressionValueMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; java.lang.System . java.lang.String ( STRING ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.method.annotation.NativeWebRequest . getNativeRequest ( MockHttpServletRequest .class ) . setContextPath ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.ExpressionValueMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void void ( @ Value ( STRING ) int int , @ Value ( STRING ) java.lang.String java.lang.String , java.lang.String java.lang.String ) {	}  <METHOD_END>
