<METHOD_START> public void ( ContentNegotiationStrategy ... org.springframework.web.accept.ContentNegotiationStrategy[] ) { this( java.util.Arrays . java.util.List ( org.springframework.web.accept.ContentNegotiationStrategy[] ) ); }  <METHOD_END>
<METHOD_START> public void ( java.util.Collection<org.springframework.web.accept.ContentNegotiationStrategy> < ContentNegotiationStrategy > java.util.Collection<org.springframework.web.accept.ContentNegotiationStrategy> ) { Assert . notEmpty ( java.util.Collection<org.springframework.web.accept.ContentNegotiationStrategy> , STRING ) ; this . java.util.List<org.springframework.web.accept.ContentNegotiationStrategy> . addAll ( java.util.Collection<org.springframework.web.accept.ContentNegotiationStrategy> ) ; for ( ContentNegotiationStrategy org.springframework.web.accept.ContentNegotiationStrategy : this . java.util.List<org.springframework.web.accept.ContentNegotiationStrategy> ) { if ( org.springframework.web.accept.ContentNegotiationStrategy instanceof MediaTypeFileExtensionResolver ) { this . java.util.Set<org.springframework.web.accept.MediaTypeFileExtensionResolver> . add ( ( MediaTypeFileExtensionResolver ) org.springframework.web.accept.ContentNegotiationStrategy ) ; } } }  <METHOD_END>
<METHOD_START> public void ( ) { this( new HeaderContentNegotiationStrategy ( ) ); }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.accept.ContentNegotiationStrategy> < ContentNegotiationStrategy > java.util.List<org.springframework.web.accept.ContentNegotiationStrategy> ( ) { return this . java.util.List<org.springframework.web.accept.ContentNegotiationStrategy> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T extends org.springframework.web.accept.ContentNegotiationStrategy > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { for ( ContentNegotiationStrategy org.springframework.web.accept.ContentNegotiationStrategy : java.util.List<org.springframework.web.accept.ContentNegotiationStrategy> ( ) ) { if ( java.lang.Class<T> . boolean ( org.springframework.web.accept.ContentNegotiationStrategy ) ) { return ( T ) org.springframework.web.accept.ContentNegotiationStrategy ; } } return null ; }  <METHOD_END>
<METHOD_START> public void void ( MediaTypeFileExtensionResolver ... org.springframework.web.accept.MediaTypeFileExtensionResolver[] ) { this . java.util.Set<org.springframework.web.accept.MediaTypeFileExtensionResolver> . addAll ( java.util.Arrays . java.util.List ( org.springframework.web.accept.MediaTypeFileExtensionResolver[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.accept.MediaType> < MediaType > java.util.List<org.springframework.web.accept.MediaType> ( NativeWebRequest org.springframework.web.accept.NativeWebRequest ) throws org.springframework.web.accept.HttpMediaTypeNotAcceptableException { for ( ContentNegotiationStrategy org.springframework.web.accept.ContentNegotiationStrategy : this . java.util.List<org.springframework.web.accept.ContentNegotiationStrategy> ) { java.util.List<org.springframework.web.accept.MediaType> < MediaType > java.util.List<org.springframework.web.accept.MediaType> = org.springframework.web.accept.ContentNegotiationStrategy . resolveMediaTypes ( org.springframework.web.accept.NativeWebRequest ) ; if ( java.util.List<org.springframework.web.accept.MediaType> . isEmpty ( ) || java.util.List<org.springframework.web.accept.MediaType> . equals ( java.util.List<org.springframework.web.accept.MediaType> ) ) { continue; } return java.util.List<org.springframework.web.accept.MediaType> ; } return java.util.Collections . java.util.List<org.springframework.web.accept.MediaType> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( MediaType org.springframework.web.accept.MediaType ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; for ( MediaTypeFileExtensionResolver org.springframework.web.accept.MediaTypeFileExtensionResolver : this . java.util.Set<org.springframework.web.accept.MediaTypeFileExtensionResolver> ) { java.util.Set<java.lang.String> . boolean ( org.springframework.web.accept.MediaTypeFileExtensionResolver . resolveFileExtensions ( org.springframework.web.accept.MediaType ) ) ; } return new java.util.ArrayList<java.lang.String> <> ( java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; for ( MediaTypeFileExtensionResolver org.springframework.web.accept.MediaTypeFileExtensionResolver : this . java.util.Set<org.springframework.web.accept.MediaTypeFileExtensionResolver> ) { java.util.Set<java.lang.String> . boolean ( org.springframework.web.accept.MediaTypeFileExtensionResolver . getAllFileExtensions ( ) ) ; } return new java.util.ArrayList<java.lang.String> <> ( java.util.Set<java.lang.String> ) ; }  <METHOD_END>
