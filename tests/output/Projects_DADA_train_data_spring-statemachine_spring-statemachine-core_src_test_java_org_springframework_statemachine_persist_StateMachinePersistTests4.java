<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.persist.AnnotationConfigApplicationContext org.springframework.statemachine.persist.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests4.Config1 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachineFactory < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = context . getBean ( StateMachineFactory .class ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist = new org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ( ) ; StateMachinePersister < TestStates , TestEvents , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , is ( STRING ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S4 ) ) ; org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , nullValue ( ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , nullValue ( ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , nullValue ( ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S4 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests4.Config1 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachineFactory < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = context . getBean ( StateMachineFactory .class ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist = new org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ( ) ; StateMachinePersister < TestStates , TestEvents , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . start ( ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S4 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests4.Config1 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachineFactory < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = context . getBean ( StateMachineFactory .class ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist = new org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ( ) ; StateMachinePersister < TestStates , TestEvents , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . start ( ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S4 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S4 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests4.Config1 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachineFactory < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = context . getBean ( StateMachineFactory .class ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist = new org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ( ) ; StateMachinePersister < TestStates , TestEvents , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . start ( ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S4 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests4.Config1 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachineFactory < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = context . getBean ( StateMachineFactory .class ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist = new org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ( ) ; StateMachinePersister < TestStates , TestEvents , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . start ( ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S4 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S4 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests4.Config2 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachineFactory < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = context . getBean ( StateMachineFactory .class ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist = new org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ( ) ; StateMachinePersister < TestStates , TestEvents , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . start ( ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S4 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests4.Config2 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachineFactory < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = context . getBean ( StateMachineFactory .class ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist = new org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ( ) ; StateMachinePersister < TestStates , TestEvents , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . start ( ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S4 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S4 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests4.Config2 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachineFactory < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = context . getBean ( StateMachineFactory .class ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist = new org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ( ) ; StateMachinePersister < TestStates , TestEvents , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . start ( ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S4 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests4.Config2 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachineFactory < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = context . getBean ( StateMachineFactory .class ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist = new org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ( ) ; StateMachinePersister < TestStates , TestEvents , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . start ( ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S4 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getId ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S4 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests4.Config3 .class ) ; context . refresh ( ) ; StateMachineFactory < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = context . getBean ( StateMachineFactory .class ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( STRING ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist = new org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ( ) ; StateMachinePersister < TestStates , TestEvents , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener = new org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener ( ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . addStateListener ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . void ( NUMBER ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . void ( NUMBER ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . void ( NUMBER ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . void ( NUMBER ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . addStateListener ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . void ( NUMBER ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . void ( NUMBER ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests4.Config3 .class ) ; context . refresh ( ) ; StateMachineFactory < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = context . getBean ( StateMachineFactory .class ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( STRING ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist = new org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ( ) ; StateMachinePersister < TestStates , TestEvents , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests4.InMemoryStateMachinePersist ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener = new org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener ( ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . addStateListener ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . void ( NUMBER ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . start ( ) ; void ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . void ( NUMBER ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . void ( NUMBER ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; void ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . void ( NUMBER ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; void ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . void ( NUMBER ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachineFactory<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getStateMachine ( STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . addStateListener ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . void ( NUMBER ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachinePersistTests4.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; void ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) throws java.lang.Exception { java.util.Collection<org.springframework.statemachine.persist.State<?,?>> < State < ? , ? > > java.util.Collection<org.springframework.statemachine.persist.State<?,?>> = TestUtils . readField ( STRING , java.lang.Object ) ; for ( State < ? , ? > org.springframework.statemachine.persist.State<?,?> : java.util.Collection<org.springframework.statemachine.persist.State<?,?>> ) { PseudoState < ? , ? > org.springframework.statemachine.persist.PseudoState<?,?> = org.springframework.statemachine.persist.State<,> . getPseudoState ( ) ; if ( org.springframework.statemachine.persist.PseudoState<,> != null ) { CompositePseudoStateListener < ? , ? > org.springframework.statemachine.persist.CompositePseudoStateListener<?,?> = TestUtils . readField ( STRING , org.springframework.statemachine.persist.PseudoState<,> ) ; OrderedComposite < ? > org.springframework.statemachine.persist.OrderedComposite<?> = TestUtils . readField ( STRING , org.springframework.statemachine.persist.CompositePseudoStateListener<,> ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . readField ( STRING , org.springframework.statemachine.persist.OrderedComposite<> ) ; assertThat ( java.util.List<> . int ( ) , is ( NUMBER ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineStateConfigurer<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineStateConfigurer<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . state ( TestStates . SI ) . fork ( TestStates . S1 ) . state ( TestStates . S2 ) . end ( TestStates . SF ) . join ( TestStates . S3 ) . state ( TestStates . S4 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . state ( TestStates . S20 ) . state ( TestStates . S21 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S30 ) . state ( TestStates . S30 ) . state ( TestStates . S31 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineTransitionConfigurer<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineTransitionConfigurer<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S20 ) . target ( TestStates . S21 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S30 ) . target ( TestStates . S31 ) . event ( TestEvents . E3 ) . and ( ) . withFork ( ) . source ( TestStates . S1 ) . target ( TestStates . S20 ) . target ( TestStates . S30 ) . and ( ) . withJoin ( ) . source ( TestStates . S21 ) . source ( TestStates . S31 ) . target ( TestStates . S3 ) . and ( ) . withExternal ( ) . source ( TestStates . S3 ) . target ( TestStates . S4 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineStateConfigurer<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineStateConfigurer<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . state ( TestStates . SI ) . fork ( TestStates . S1 ) . state ( TestStates . S2 ) . end ( TestStates . SF ) . join ( TestStates . S3 ) . end ( TestStates . S4 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . state ( TestStates . S20 ) . end ( TestStates . S21 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S30 ) . state ( TestStates . S30 ) . end ( TestStates . S31 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineTransitionConfigurer<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineTransitionConfigurer<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S20 ) . target ( TestStates . S21 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S30 ) . target ( TestStates . S31 ) . event ( TestEvents . E3 ) . and ( ) . withFork ( ) . source ( TestStates . S1 ) . target ( TestStates . S20 ) . target ( TestStates . S30 ) . and ( ) . withJoin ( ) . source ( TestStates . S21 ) . source ( TestStates . S31 ) . target ( TestStates . S3 ) . and ( ) . withExternal ( ) . source ( TestStates . S3 ) . target ( TestStates . S4 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineStateConfigurer<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineStateConfigurer<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . state ( TestStates . S2 ) . join ( TestStates . S3 ) . state ( TestStates . S4 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . end ( TestStates . S21 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S30 ) . end ( TestStates . S31 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineTransitionConfigurer<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineTransitionConfigurer<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S20 ) . target ( TestStates . S21 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S30 ) . target ( TestStates . S31 ) . event ( TestEvents . E3 ) . and ( ) . withJoin ( ) . source ( TestStates . S2 ) . target ( TestStates . S3 ) . and ( ) . withExternal ( ) . source ( TestStates . S3 ) . target ( TestStates . S4 ) . and ( ) . withExternal ( ) . source ( TestStates . S4 ) . target ( TestStates . SI ) . event ( TestEvents . E4 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.persist.State<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , State < TestStates , TestEvents > org.springframework.statemachine.persist.State<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) { java.util.List<org.springframework.statemachine.persist.State<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents>> . add ( org.springframework.statemachine.persist.State<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) ; int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < TestStates , TestEvents > org.springframework.statemachine.persist.Transition<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) { java.util.List<org.springframework.statemachine.persist.Transition<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents>> . add ( org.springframework.statemachine.persist.Transition<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { void ( int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; java.util.List<org.springframework.statemachine.persist.Transition<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents>> . clear ( ) ; java.util.List<org.springframework.statemachine.persist.State<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents>> . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineContext < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineContext<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , java.lang.String java.lang.String ) throws java.lang.Exception { java.util.HashMap<java.lang.String,org.springframework.statemachine.persist.StateMachineContext<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents>> . put ( java.lang.String , org.springframework.statemachine.persist.StateMachineContext<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.persist.StateMachineContext<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineContext<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ( java.lang.String java.lang.String ) throws java.lang.Exception { return java.util.HashMap<java.lang.String,org.springframework.statemachine.persist.StateMachineContext<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents>> . get ( java.lang.String ) ; }  <METHOD_END>
