<METHOD_START> @ Test public void void ( ) { PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING ) ; assertEquals ( STRING , org.springframework.web.reactive.result.condition.PatternsRequestCondition . getPatterns ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.web.reactive.result.condition.PatternsRequestCondition . getPatterns ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( ) ; assertEquals ( new PatternsRequestCondition ( STRING ) , org.springframework.web.reactive.result.condition.PatternsRequestCondition . combine ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING , STRING ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( ) ; assertEquals ( new PatternsRequestCondition ( STRING , STRING ) , org.springframework.web.reactive.result.condition.PatternsRequestCondition . combine ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ) ; org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( ) ; org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING , STRING ) ; assertEquals ( new PatternsRequestCondition ( STRING , STRING ) , org.springframework.web.reactive.result.condition.PatternsRequestCondition . combine ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING , STRING ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING , STRING ) ; assertEquals ( new PatternsRequestCondition ( STRING , STRING , STRING , STRING ) , org.springframework.web.reactive.result.condition.PatternsRequestCondition . combine ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = org.springframework.web.reactive.result.condition.PatternsRequestCondition . getMatchingCondition ( get ( STRING ) . toExchange ( ) ) ; assertNotNull ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = org.springframework.web.reactive.result.condition.PatternsRequestCondition . getMatchingCondition ( get ( STRING ) . toExchange ( ) ) ; assertNotNull ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING STRING , STRING , STRING ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = org.springframework.web.reactive.result.condition.PatternsRequestCondition . getMatchingCondition ( get ( STRING ) . toExchange ( ) ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING , STRING , STRING STRING ) ; assertEquals ( org.springframework.web.reactive.result.condition.PatternsRequestCondition , org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = get ( STRING ) . toExchange ( ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = org.springframework.web.reactive.result.condition.PatternsRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ; assertEquals ( STRING , org.springframework.web.reactive.result.condition.PatternsRequestCondition . getPatterns ( ) . iterator ( ) . next ( ) ) ; org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( new java.lang.String [] { STRING } , null , null , false , false , null ) ; org.springframework.web.reactive.result.condition.PatternsRequestCondition = org.springframework.web.reactive.result.condition.PatternsRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ; assertEquals ( STRING , org.springframework.web.reactive.result.condition.PatternsRequestCondition . getPatterns ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING } ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( java.lang.String[] , null , null , true , false , java.util.Set<java.lang.String> ) ; MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = get ( STRING ) . toExchange ( ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = org.springframework.web.reactive.result.condition.PatternsRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ; assertEquals ( STRING , org.springframework.web.reactive.result.condition.PatternsRequestCondition . getPatterns ( ) . iterator ( ) . next ( ) ) ; org.springframework.web.reactive.result.condition.MockServerWebExchange = get ( STRING ) . toExchange ( ) ; org.springframework.web.reactive.result.condition.PatternsRequestCondition = org.springframework.web.reactive.result.condition.PatternsRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ; assertEquals ( STRING , org.springframework.web.reactive.result.condition.PatternsRequestCondition . getPatterns ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( new java.lang.String [] { STRING } , null , null , true , false , java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( new java.lang.String [] { STRING } , null , null , true , false , null ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = org.springframework.web.reactive.result.condition.PatternsRequestCondition . combine ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ; MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = get ( STRING ) . toExchange ( ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = org.springframework.web.reactive.result.condition.PatternsRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = get ( STRING ) . toExchange ( ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = org.springframework.web.reactive.result.condition.PatternsRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ; assertEquals ( STRING , STRING , org.springframework.web.reactive.result.condition.PatternsRequestCondition . getPatterns ( ) . iterator ( ) . next ( ) ) ; org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( new java.lang.String [] { STRING } , null , null , false , true , null ) ; org.springframework.web.reactive.result.condition.PatternsRequestCondition = org.springframework.web.reactive.result.condition.PatternsRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ; assertEquals ( STRING , STRING , org.springframework.web.reactive.result.condition.PatternsRequestCondition . getPatterns ( ) . iterator ( ) . next ( ) ) ; org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( new java.lang.String [] { STRING } , null , null , false , false , null ) ; org.springframework.web.reactive.result.condition.PatternsRequestCondition = org.springframework.web.reactive.result.condition.PatternsRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertNull ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = org.springframework.web.reactive.result.condition.PatternsRequestCondition . getMatchingCondition ( get ( STRING ) . toExchange ( ) ) ; assertNull ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.condition.PatternsRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.PatternsRequestCondition , get ( STRING ) . toExchange ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.condition.PatternsRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.PatternsRequestCondition , get ( STRING ) . toExchange ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = get ( STRING ) . toExchange ( ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING , STRING ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = new PatternsRequestCondition ( STRING , STRING ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = org.springframework.web.reactive.result.condition.PatternsRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; PatternsRequestCondition org.springframework.web.reactive.result.condition.PatternsRequestCondition = org.springframework.web.reactive.result.condition.PatternsRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.condition.PatternsRequestCondition ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.condition.PatternsRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.PatternsRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) ) ; }  <METHOD_END>
