<METHOD_START> @ Test public void void ( ) { PropertyMatches org.springframework.beans.PropertyMatches = PropertyMatches . forProperty ( STRING , org.springframework.beans.PropertyMatchesTests.SampleBeanProperties .class ) ; assertThat ( org.springframework.beans.PropertyMatches . getPossibleMatches ( ) , hasItemInArray ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyMatches org.springframework.beans.PropertyMatches = PropertyMatches . forProperty ( STRING , org.springframework.beans.PropertyMatchesTests.SampleBeanProperties .class ) ; assertThat ( org.springframework.beans.PropertyMatches . getPossibleMatches ( ) , emptyArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyMatches org.springframework.beans.PropertyMatches = PropertyMatches . forProperty ( STRING , org.springframework.beans.PropertyMatchesTests.SampleBeanProperties .class ) ; assertThat ( org.springframework.beans.PropertyMatches . getPossibleMatches ( ) , emptyArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyMatches org.springframework.beans.PropertyMatches = PropertyMatches . forProperty ( STRING , org.springframework.beans.PropertyMatchesTests.SampleBeanProperties .class ) ; assertThat ( org.springframework.beans.PropertyMatches . getPossibleMatches ( ) , hasItemInArray ( STRING ) ) ; assertThat ( org.springframework.beans.PropertyMatches . getPossibleMatches ( ) , hasItemInArray ( STRING ) ) ; assertThat ( org.springframework.beans.PropertyMatches . getPossibleMatches ( ) , hasItemInArray ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyMatches org.springframework.beans.PropertyMatches = PropertyMatches . forProperty ( STRING , org.springframework.beans.PropertyMatchesTests.SampleBeanProperties .class ) ; java.lang.String java.lang.String = org.springframework.beans.PropertyMatches . buildErrorMessage ( ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , not ( containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyMatches org.springframework.beans.PropertyMatches = PropertyMatches . forProperty ( STRING , org.springframework.beans.PropertyMatchesTests.SampleBeanProperties .class ) ; java.lang.String java.lang.String = org.springframework.beans.PropertyMatches . buildErrorMessage ( ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyMatches org.springframework.beans.PropertyMatches = PropertyMatches . forField ( STRING , org.springframework.beans.PropertyMatchesTests.SampleFieldProperties .class ) ; assertThat ( org.springframework.beans.PropertyMatches . getPossibleMatches ( ) , hasItemInArray ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyMatches org.springframework.beans.PropertyMatches = PropertyMatches . forField ( STRING , org.springframework.beans.PropertyMatchesTests.SampleFieldProperties .class ) ; assertThat ( org.springframework.beans.PropertyMatches . getPossibleMatches ( ) , emptyArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyMatches org.springframework.beans.PropertyMatches = PropertyMatches . forField ( STRING , org.springframework.beans.PropertyMatchesTests.SampleFieldProperties .class ) ; assertThat ( org.springframework.beans.PropertyMatches . getPossibleMatches ( ) , emptyArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyMatches org.springframework.beans.PropertyMatches = PropertyMatches . forField ( STRING , org.springframework.beans.PropertyMatchesTests.SampleFieldProperties .class ) ; assertThat ( org.springframework.beans.PropertyMatches . getPossibleMatches ( ) , hasItemInArray ( STRING ) ) ; assertThat ( org.springframework.beans.PropertyMatches . getPossibleMatches ( ) , hasItemInArray ( STRING ) ) ; assertThat ( org.springframework.beans.PropertyMatches . getPossibleMatches ( ) , hasItemInArray ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyMatches org.springframework.beans.PropertyMatches = PropertyMatches . forField ( STRING , org.springframework.beans.PropertyMatchesTests.SampleFieldProperties .class ) ; java.lang.String java.lang.String = org.springframework.beans.PropertyMatches . buildErrorMessage ( ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , not ( containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyMatches org.springframework.beans.PropertyMatches = PropertyMatches . forField ( STRING , org.springframework.beans.PropertyMatchesTests.SampleFieldProperties .class ) ; java.lang.String java.lang.String = org.springframework.beans.PropertyMatches . buildErrorMessage ( ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
