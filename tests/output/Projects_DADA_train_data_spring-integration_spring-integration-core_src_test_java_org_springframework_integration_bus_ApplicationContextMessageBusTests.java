<METHOD_START> @ Test public void void ( ) { TestApplicationContext org.springframework.integration.bus.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; QueueChannel org.springframework.integration.bus.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.bus.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.bus.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.bus.QueueChannel ) ; org.springframework.integration.bus.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.bus.QueueChannel ) ; Message < java.lang.String > org.springframework.integration.bus.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannelName ( STRING ) . build ( ) ; org.springframework.integration.bus.QueueChannel . send ( org.springframework.integration.bus.Message<java.lang.String> ) ; AbstractReplyProducingMessageHandler org.springframework.integration.bus.AbstractReplyProducingMessageHandler = new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.bus.Message<?> ) { return org.springframework.integration.bus.Message<> ; } } ; org.springframework.integration.bus.AbstractReplyProducingMessageHandler . setBeanFactory ( org.springframework.integration.bus.TestApplicationContext ) ; org.springframework.integration.bus.AbstractReplyProducingMessageHandler . afterPropertiesSet ( ) ; PollingConsumer org.springframework.integration.bus.PollingConsumer = new PollingConsumer ( org.springframework.integration.bus.QueueChannel , org.springframework.integration.bus.AbstractReplyProducingMessageHandler ) ; org.springframework.integration.bus.PollingConsumer . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.bus.TestApplicationContext . registerEndpoint ( STRING , org.springframework.integration.bus.PollingConsumer ) ; org.springframework.integration.bus.TestApplicationContext . refresh ( ) ; Message < ? > org.springframework.integration.bus.Message<?> = org.springframework.integration.bus.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.bus.Message<> . getPayload ( ) ) ; org.springframework.integration.bus.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.bus.Message<?> ) { return org.springframework.integration.bus.Message<> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestApplicationContext org.springframework.integration.bus.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; QueueChannel org.springframework.integration.bus.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.bus.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.bus.QueueChannel ) ; org.springframework.integration.bus.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; QueueChannel org.springframework.integration.bus.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.bus.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.bus.QueueChannel ) ; org.springframework.integration.bus.TestApplicationContext . refresh ( ) ; Message < ? > org.springframework.integration.bus.Message<?> = org.springframework.integration.bus.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.bus.Message<> ) ; org.springframework.integration.bus.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.bus.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.bus.ApplicationContextMessageBusTests> ( ) ) ; org.springframework.integration.bus.ClassPathXmlApplicationContext . start ( ) ; PollableChannel org.springframework.integration.bus.PollableChannel = ( PollableChannel ) org.springframework.integration.bus.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.integration.bus.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; PollableChannel org.springframework.integration.bus.PollableChannel = ( PollableChannel ) org.springframework.integration.bus.ClassPathXmlApplicationContext . getBean ( STRING ) ; Message < ? > org.springframework.integration.bus.Message<?> = org.springframework.integration.bus.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.bus.Message<> . getPayload ( ) ) ; org.springframework.integration.bus.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestApplicationContext org.springframework.integration.bus.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; QueueChannel org.springframework.integration.bus.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.bus.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.bus.QueueChannel = new QueueChannel ( ) ; AbstractReplyProducingMessageHandler org.springframework.integration.bus.AbstractReplyProducingMessageHandler = new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.bus.Message<?> ) { return org.springframework.integration.bus.Message<> ; } } ; AbstractReplyProducingMessageHandler org.springframework.integration.bus.AbstractReplyProducingMessageHandler = new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.bus.Message<?> ) { return org.springframework.integration.bus.Message<> ; } } ; org.springframework.integration.bus.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.bus.QueueChannel ) ; org.springframework.integration.bus.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.bus.QueueChannel ) ; org.springframework.integration.bus.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.bus.QueueChannel ) ; org.springframework.integration.bus.AbstractReplyProducingMessageHandler . setOutputChannel ( org.springframework.integration.bus.QueueChannel ) ; org.springframework.integration.bus.AbstractReplyProducingMessageHandler . setOutputChannel ( org.springframework.integration.bus.QueueChannel ) ; PollingConsumer org.springframework.integration.bus.PollingConsumer = new PollingConsumer ( org.springframework.integration.bus.QueueChannel , org.springframework.integration.bus.AbstractReplyProducingMessageHandler ) ; org.springframework.integration.bus.PollingConsumer . setBeanFactory ( mock ( BeanFactory .class ) ) ; PollingConsumer org.springframework.integration.bus.PollingConsumer = new PollingConsumer ( org.springframework.integration.bus.QueueChannel , org.springframework.integration.bus.AbstractReplyProducingMessageHandler ) ; org.springframework.integration.bus.PollingConsumer . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.bus.TestApplicationContext . registerEndpoint ( STRING , org.springframework.integration.bus.PollingConsumer ) ; org.springframework.integration.bus.TestApplicationContext . registerEndpoint ( STRING , org.springframework.integration.bus.PollingConsumer ) ; org.springframework.integration.bus.TestApplicationContext . refresh ( ) ; org.springframework.integration.bus.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.bus.Message<?> = org.springframework.integration.bus.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.bus.Message<?> = org.springframework.integration.bus.QueueChannel . receive ( NUMBER ) ; org.springframework.integration.bus.TestApplicationContext . stop ( ) ; assertTrue ( STRING , org.springframework.integration.bus.Message<> == null ^ org.springframework.integration.bus.Message<> == null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.bus.Message<?> ) { return org.springframework.integration.bus.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.bus.Message<?> ) { return org.springframework.integration.bus.Message<> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { TestApplicationContext org.springframework.integration.bus.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; PublishSubscribeChannel org.springframework.integration.bus.PublishSubscribeChannel = new PublishSubscribeChannel ( ) ; QueueChannel org.springframework.integration.bus.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.bus.QueueChannel = new QueueChannel ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; AbstractReplyProducingMessageHandler org.springframework.integration.bus.AbstractReplyProducingMessageHandler = new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.bus.Message<?> ) { java.util.concurrent.CountDownLatch . void ( ) ; return org.springframework.integration.bus.Message<> ; } } ; AbstractReplyProducingMessageHandler org.springframework.integration.bus.AbstractReplyProducingMessageHandler = new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.bus.Message<?> ) { java.util.concurrent.CountDownLatch . void ( ) ; return org.springframework.integration.bus.Message<> ; } } ; org.springframework.integration.bus.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.bus.PublishSubscribeChannel ) ; org.springframework.integration.bus.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.bus.QueueChannel ) ; org.springframework.integration.bus.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.bus.QueueChannel ) ; org.springframework.integration.bus.AbstractReplyProducingMessageHandler . setOutputChannel ( org.springframework.integration.bus.QueueChannel ) ; org.springframework.integration.bus.AbstractReplyProducingMessageHandler . setOutputChannel ( org.springframework.integration.bus.QueueChannel ) ; EventDrivenConsumer org.springframework.integration.bus.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.bus.PublishSubscribeChannel , org.springframework.integration.bus.AbstractReplyProducingMessageHandler ) ; EventDrivenConsumer org.springframework.integration.bus.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.bus.PublishSubscribeChannel , org.springframework.integration.bus.AbstractReplyProducingMessageHandler ) ; org.springframework.integration.bus.TestApplicationContext . registerEndpoint ( STRING , org.springframework.integration.bus.EventDrivenConsumer ) ; org.springframework.integration.bus.TestApplicationContext . registerEndpoint ( STRING , org.springframework.integration.bus.EventDrivenConsumer ) ; org.springframework.integration.bus.TestApplicationContext . refresh ( ) ; org.springframework.integration.bus.PublishSubscribeChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( STRING , NUMBER , java.util.concurrent.CountDownLatch . long ( ) ) ; Message < ? > org.springframework.integration.bus.Message<?> = org.springframework.integration.bus.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.bus.Message<?> = org.springframework.integration.bus.QueueChannel . receive ( NUMBER ) ; org.springframework.integration.bus.TestApplicationContext . stop ( ) ; assertNotNull ( STRING , org.springframework.integration.bus.Message<> ) ; assertNotNull ( STRING , org.springframework.integration.bus.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.bus.Message<?> ) { java.util.concurrent.CountDownLatch . void ( ) ; return org.springframework.integration.bus.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.bus.Message<?> ) { java.util.concurrent.CountDownLatch . void ( ) ; return org.springframework.integration.bus.Message<> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { TestApplicationContext org.springframework.integration.bus.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; QueueChannel org.springframework.integration.bus.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.bus.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.bus.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.bus.QueueChannel ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; SourcePollingChannelAdapter org.springframework.integration.bus.SourcePollingChannelAdapter = new SourcePollingChannelAdapter ( ) ; org.springframework.integration.bus.SourcePollingChannelAdapter . setSource ( new org.springframework.integration.bus.ApplicationContextMessageBusTests.FailingSource ( java.util.concurrent.CountDownLatch ) ) ; PollerMetadata org.springframework.integration.bus.PollerMetadata = new PollerMetadata ( ) ; org.springframework.integration.bus.PollerMetadata . setTrigger ( new PeriodicTrigger ( NUMBER ) ) ; org.springframework.integration.bus.SourcePollingChannelAdapter . setOutputChannel ( org.springframework.integration.bus.QueueChannel ) ; org.springframework.integration.bus.TestApplicationContext . registerEndpoint ( STRING , org.springframework.integration.bus.SourcePollingChannelAdapter ) ; org.springframework.integration.bus.TestApplicationContext . refresh ( ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; Message < ? > org.springframework.integration.bus.Message<?> = org.springframework.integration.bus.QueueChannel . receive ( NUMBER ) ; org.springframework.integration.bus.TestApplicationContext . stop ( ) ; assertNull ( org.springframework.integration.bus.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( STRING , org.springframework.integration.bus.Message<> ) ; assertTrue ( org.springframework.integration.bus.Message<> instanceof ErrorMessage ) ; java.lang.Throwable java.lang.Throwable = ( ( ErrorMessage ) org.springframework.integration.bus.Message<> ) . getPayload ( ) ; assertEquals ( STRING , java.lang.Throwable . java.lang.Throwable ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { TestApplicationContext org.springframework.integration.bus.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; QueueChannel org.springframework.integration.bus.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.bus.TestApplicationContext . registerChannel ( IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME , org.springframework.integration.bus.QueueChannel ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; AbstractReplyProducingMessageHandler org.springframework.integration.bus.AbstractReplyProducingMessageHandler = new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.bus.Message<?> ) { java.util.concurrent.CountDownLatch . void ( ) ; return null ; } } ; PollingConsumer org.springframework.integration.bus.PollingConsumer = new PollingConsumer ( org.springframework.integration.bus.QueueChannel , org.springframework.integration.bus.AbstractReplyProducingMessageHandler ) ; org.springframework.integration.bus.PollingConsumer . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.bus.TestApplicationContext . registerEndpoint ( STRING , org.springframework.integration.bus.PollingConsumer ) ; org.springframework.integration.bus.TestApplicationContext . refresh ( ) ; org.springframework.integration.bus.QueueChannel . send ( new ErrorMessage ( new java.lang.RuntimeException ( STRING ) ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( STRING , NUMBER , java.util.concurrent.CountDownLatch . long ( ) ) ; org.springframework.integration.bus.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.bus.Message<?> ) { java.util.concurrent.CountDownLatch . void ( ) ; return null ; }  <METHOD_END>
<METHOD_START> void ( java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { this . java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.bus.Message<java.lang.Object> < java.lang.Object > org.springframework.integration.bus.Message<java.lang.Object> ( ) { java.util.concurrent.CountDownLatch . void ( ) ; throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
