<METHOD_START> @ BeforeClass public static void void ( ) { org.springframework.integration.jdbc.EmbeddedDatabase = new EmbeddedDatabaseBuilder ( ) . setType ( EmbeddedDatabaseType . H2 ) . addScript ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.integration.jdbc.EmbeddedDatabase . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { this . org.springframework.integration.jdbc.JdbcTemplate = new JdbcTemplate ( org.springframework.integration.jdbc.EmbeddedDatabase ) ; this . org.springframework.integration.jdbc.JdbcMessageStore = new JdbcMessageStore ( org.springframework.integration.jdbc.EmbeddedDatabase ) ; org.springframework.integration.jdbc.JdbcMessageStore . setRegion ( STRING ) ; this . org.springframework.integration.jdbc.JdbcMessageStore = new JdbcMessageStore ( org.springframework.integration.jdbc.EmbeddedDatabase ) ; this . org.springframework.integration.jdbc.JdbcMessageStore . setRegion ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.integration.jdbc.JdbcTemplate . execute ( STRING ) ; this . org.springframework.integration.jdbc.JdbcTemplate . execute ( STRING ) ; this . org.springframework.integration.jdbc.JdbcTemplate . execute ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStore . getMessageCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStore . getMessageCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.integration.jdbc.JdbcMessageStore . setRegion ( null ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { Assert . assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } Assert . fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.JdbcMessageStore . addMessageToGroup ( STRING , MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessageToGroup ( STRING , MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessageToGroup ( STRING , MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessageToGroup ( STRING , MessageBuilder . withPayload ( STRING ) . build ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( STRING ) . getMessages ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( STRING ) . getMessages ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( STRING ) . getMessages ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( STRING ) . getMessages ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStore . getMessageCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStore . getMessageCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.JdbcMessageStore . addMessageToGroup ( STRING , MessageBuilder . withPayload ( STRING ) . build ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.integration.jdbc.JdbcTemplate . query ( STRING , ( RowMapper < java.lang.String > ) ( rs , rowNum ) -> rs . getString ( STRING ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessageToGroup ( STRING , MessageBuilder . withPayload ( STRING ) . build ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.integration.jdbc.JdbcTemplate . query ( STRING , ( RowMapper < java.lang.String > ) ( rs , rowNum ) -> rs . getString ( STRING ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.JdbcMessageStore . addMessageToGroup ( STRING , MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessageToGroup ( STRING , MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessageToGroup ( STRING , MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessageToGroup ( STRING , MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.jdbc.JdbcMessageStore . removeMessageGroup ( STRING ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroupCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroupCount ( ) ) ; }  <METHOD_END>
