<METHOD_START> public void ( java.util.List<T> < T > java.util.List<T> , Pageable org.springframework.data.domain.Pageable , long long ) { super( java.util.List<T> , org.springframework.data.domain.Pageable ); this . org.springframework.data.domain.Pageable = org.springframework.data.domain.Pageable ; this . long = org.springframework.data.domain.Pageable . toOptional ( ) . filter ( it -> ! content . isEmpty ( ) ) . filter ( it -> it . getOffset ( ) + it . getPageSize ( ) > total ) . map ( it -> it . getOffset ( ) + content . size ( ) ) . orElse ( long ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<T> < T > java.util.List<T> ) { this( java.util.List<T> , Pageable . unpaged ( ) , null == java.util.List<T> ? NUMBER : java.util.List<T> . int ( ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return getSize ( ) == NUMBER ? NUMBER : ( int ) java.lang.Math . double ( ( double ) long / ( double ) getSize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return getNumber ( ) + NUMBER < int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < U > org.springframework.data.domain.Page<U> < U > org.springframework.data.domain.Page<U> ( java.util.function.Function<? super T,? extends U> < ? super T , ? extends U > java.util.function.Function<? super T,? extends U> ) { return new org.springframework.data.domain.PageImpl <> ( getConvertedContent ( java.util.function.Function<,> ) , org.springframework.data.domain.Pageable , long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = STRING ; java.util.List<T> < T > java.util.List<T> = getContent ( ) ; if ( java.util.List<T> . int ( ) > NUMBER ) { java.lang.String = java.util.List<T> . T ( NUMBER ) . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ; } return java.lang.String . java.lang.String ( STRING , getNumber ( ) + NUMBER , int ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.data.domain.PageImpl<?> < ? > ) ) { return false ; } org.springframework.data.domain.PageImpl<?> < ? > org.springframework.data.domain.PageImpl<?> = ( org.springframework.data.domain.PageImpl<?> < ? > ) java.lang.Object ; return this . long == org.springframework.data.domain.PageImpl<> . long && super. boolean ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = NUMBER ; int += NUMBER * ( int ) ( long ^ long >>> NUMBER ) ; int += NUMBER * super. int ( ) ; return int ; }  <METHOD_END>
