<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method , RepositoryMetadata org.springframework.data.cassandra.repository.query.RepositoryMetadata , ProjectionFactory org.springframework.data.cassandra.repository.query.ProjectionFactory , CassandraMappingContext org.springframework.data.cassandra.repository.query.CassandraMappingContext ) { super( java.lang.reflect.Method , org.springframework.data.cassandra.repository.query.RepositoryMetadata , org.springframework.data.cassandra.repository.query.ProjectionFactory , org.springframework.data.cassandra.repository.query.CassandraMappingContext ); this . java.lang.reflect.Method = java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! ( isPageQuery ( ) || isSliceQuery ( ) ) && ReactiveWrappers . isMultiValueType ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { for ( CassandraParameter org.springframework.data.cassandra.repository.query.CassandraParameter : getParameters ( ) ) { if ( ReactiveWrapperConverters . supports ( org.springframework.data.cassandra.repository.query.CassandraParameter . getType ( ) ) ) { return true ; } } return false ; }  <METHOD_END>
