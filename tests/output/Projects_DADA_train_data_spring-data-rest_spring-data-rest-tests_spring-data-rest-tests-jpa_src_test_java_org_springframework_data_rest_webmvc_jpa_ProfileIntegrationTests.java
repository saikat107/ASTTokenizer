<METHOD_START> @ java.lang.Override public void void ( RepositoryRestConfiguration org.springframework.data.rest.webmvc.jpa.RepositoryRestConfiguration ) { org.springframework.data.rest.webmvc.jpa.RepositoryRestConfiguration . setBasePath ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { MockMvc org.springframework.data.rest.webmvc.jpa.MockMvc = MockMvcBuilders . webAppContextSetup ( org.springframework.data.rest.webmvc.jpa.WebApplicationContext ) . build ( ) ; this . org.springframework.data.rest.webmvc.jpa.TestMvcClient = new TestMvcClient ( org.springframework.data.rest.webmvc.jpa.MockMvc , this . org.springframework.data.rest.webmvc.jpa.LinkDiscoverers ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.jpa.TestMvcClient . follow ( java.lang.String ) . andExpect ( status ( ) . is2xxSuccessful ( ) ) . andExpect ( jsonPath ( STRING , endsWith ( ProfileController . PROFILE_ROOT_MAPPING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = org.springframework.data.rest.webmvc.jpa.TestMvcClient . discoverUnique ( new Link ( java.lang.String ) , ProfileResourceProcessor . PROFILE_REL ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.TestMvcClient . discoverUnique ( org.springframework.data.rest.webmvc.jpa.Link , STRING , MediaType . ALL ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.TestMvcClient . discoverUnique ( org.springframework.data.rest.webmvc.jpa.Link , STRING , MediaType . ALL ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.TestMvcClient . discoverUnique ( org.springframework.data.rest.webmvc.jpa.Link , STRING , MediaType . ALL ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.TestMvcClient . discoverUnique ( org.springframework.data.rest.webmvc.jpa.Link , STRING , MediaType . ALL ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.TestMvcClient . discoverUnique ( org.springframework.data.rest.webmvc.jpa.Link , STRING , MediaType . ALL ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.TestMvcClient . discoverUnique ( org.springframework.data.rest.webmvc.jpa.Link , STRING , MediaType . ALL ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.TestMvcClient . discoverUnique ( org.springframework.data.rest.webmvc.jpa.Link , STRING , MediaType . ALL ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.TestMvcClient . discoverUnique ( org.springframework.data.rest.webmvc.jpa.Link , STRING , MediaType . ALL ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = org.springframework.data.rest.webmvc.jpa.TestMvcClient . discoverUnique ( new Link ( java.lang.String ) , STRING ) ; Link org.springframework.data.rest.webmvc.jpa.Link = org.springframework.data.rest.webmvc.jpa.TestMvcClient . discoverUnique ( org.springframework.data.rest.webmvc.jpa.Link , ProfileResourceProcessor . PROFILE_REL ) ; org.springframework.data.rest.webmvc.jpa.TestMvcClient . follow ( org.springframework.data.rest.webmvc.jpa.Link , RestMediaTypes . ALPS_JSON ) . andExpect ( status ( ) . is2xxSuccessful ( ) ) . andExpect ( content ( ) . contentTypeCompatibleWith ( RestMediaTypes . ALPS_JSON ) ) ; org.springframework.data.rest.webmvc.jpa.TestMvcClient . follow ( org.springframework.data.rest.webmvc.jpa.Link , RestMediaTypes . SCHEMA_JSON ) . andExpect ( status ( ) . is2xxSuccessful ( ) ) . andExpect ( content ( ) . contentTypeCompatibleWith ( RestMediaTypes . SCHEMA_JSON ) ) ; }  <METHOD_END>
