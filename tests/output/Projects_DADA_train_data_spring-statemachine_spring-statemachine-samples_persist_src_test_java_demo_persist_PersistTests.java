<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( demo.persist.StateMachineCommands . state ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { demo.persist.PersistTests.TestListener demo.persist.PersistTests.TestListener = new demo.persist.PersistTests.TestListener ( ) ; demo.persist.StateMachine<java.lang.String,java.lang.String> . addStateListener ( demo.persist.PersistTests.TestListener ) ; demo.persist.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( demo.persist.PersistTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.persist.PersistTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; assertThat ( demo.persist.PersistTests.TestListener . java.util.List<demo.persist.State<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.persist.PersistTests.TestListener . java.util.List<demo.persist.State<java.lang.String,java.lang.String>> . get ( NUMBER ) . getId ( ) , is ( STRING ) ) ; assertThat ( demo.persist.PersistTests.TestListener . java.util.List<demo.persist.State<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( demo.persist.Persist . listDbEntries ( ) , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { demo.persist.Persist . change ( NUMBER , STRING ) ; assertThat ( demo.persist.Persist . listDbEntries ( ) , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { demo.persist.Persist . change ( NUMBER , STRING ) ; assertThat ( demo.persist.Persist . listDbEntries ( ) , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > demo.persist.State<java.lang.String,java.lang.String> , State < java.lang.String , java.lang.String > demo.persist.State<java.lang.String,java.lang.String> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > demo.persist.State<java.lang.String,java.lang.String> ) { java.util.List<demo.persist.State<java.lang.String,java.lang.String>> . add ( demo.persist.State<java.lang.String,java.lang.String> ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > demo.persist.State<java.lang.String,java.lang.String> ) { java.util.List<demo.persist.State<java.lang.String,java.lang.String>> . add ( demo.persist.State<java.lang.String,java.lang.String> ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < java.lang.String , java.lang.String > demo.persist.Transition<java.lang.String,java.lang.String> ) { java.util.List<demo.persist.Transition<java.lang.String,java.lang.String>> . add ( demo.persist.Transition<java.lang.String,java.lang.String> ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
