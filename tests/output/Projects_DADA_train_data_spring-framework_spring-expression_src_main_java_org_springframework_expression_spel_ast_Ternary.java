<METHOD_START> public void ( int int , SpelNodeImpl ... org.springframework.expression.spel.ast.SpelNodeImpl[] ) { super( int , org.springframework.expression.spel.ast.SpelNodeImpl[] ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { java.lang.Boolean java.lang.Boolean = this . children [ NUMBER ] . getValue ( org.springframework.expression.spel.ast.ExpressionState , java.lang.Boolean .class ) ; if ( java.lang.Boolean == null ) { throw new SpelEvaluationException ( getChild ( NUMBER ) . getStartPosition ( ) , SpelMessage . TYPE_CONVERSION_ERROR , STRING , STRING ) ; } TypedValue org.springframework.expression.spel.ast.TypedValue = this . children [ java.lang.Boolean ? NUMBER : NUMBER ] . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; void ( ) ; return org.springframework.expression.spel.ast.TypedValue ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return getChild ( NUMBER ) . toStringAST ( ) + STRING + getChild ( NUMBER ) . toStringAST ( ) + STRING + getChild ( NUMBER ) . toStringAST ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . exitTypeDescriptor == null && this . children [ NUMBER ] . exitTypeDescriptor != null && this . children [ NUMBER ] . exitTypeDescriptor != null ) { java.lang.String java.lang.String = this . children [ NUMBER ] . exitTypeDescriptor ; java.lang.String java.lang.String = this . children [ NUMBER ] . exitTypeDescriptor ; if ( java.lang.String . boolean ( java.lang.String ) ) { this . exitTypeDescriptor = java.lang.String ; } else { this . exitTypeDescriptor = STRING ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = this . children [ NUMBER ] ; SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = this . children [ NUMBER ] ; SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = this . children [ NUMBER ] ; return ( org.springframework.expression.spel.ast.SpelNodeImpl . isCompilable ( ) && org.springframework.expression.spel.ast.SpelNodeImpl . isCompilable ( ) && org.springframework.expression.spel.ast.SpelNodeImpl . isCompilable ( ) && CodeFlow . isBooleanCompatible ( condition . exitTypeDescriptor ) && left . exitTypeDescriptor != null && right . exitTypeDescriptor != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow ) { void ( ) ; org.springframework.expression.spel.ast.CodeFlow . enterCompilationScope ( ) ; this . children [ NUMBER ] . generateCode ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow ) ; if ( ! CodeFlow . isPrimitive ( org.springframework.expression.spel.ast.CodeFlow . lastDescriptor ( ) ) ) { CodeFlow . insertUnboxInsns ( org.springframework.expression.spel.ast.MethodVisitor , 'Z' , org.springframework.expression.spel.ast.CodeFlow . lastDescriptor ( ) ) ; } org.springframework.expression.spel.ast.CodeFlow . exitCompilationScope ( ) ; Label org.springframework.expression.spel.ast.Label = new Label ( ) ; Label org.springframework.expression.spel.ast.Label = new Label ( ) ; org.springframework.expression.spel.ast.MethodVisitor . visitJumpInsn ( IFEQ , org.springframework.expression.spel.ast.Label ) ; org.springframework.expression.spel.ast.CodeFlow . enterCompilationScope ( ) ; this . children [ NUMBER ] . generateCode ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow ) ; if ( ! CodeFlow . isPrimitive ( this . exitTypeDescriptor ) ) { CodeFlow . insertBoxIfNecessary ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow . lastDescriptor ( ) . charAt ( NUMBER ) ) ; } org.springframework.expression.spel.ast.CodeFlow . exitCompilationScope ( ) ; org.springframework.expression.spel.ast.MethodVisitor . visitJumpInsn ( GOTO , org.springframework.expression.spel.ast.Label ) ; org.springframework.expression.spel.ast.MethodVisitor . visitLabel ( org.springframework.expression.spel.ast.Label ) ; org.springframework.expression.spel.ast.CodeFlow . enterCompilationScope ( ) ; this . children [ NUMBER ] . generateCode ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow ) ; if ( ! CodeFlow . isPrimitive ( this . exitTypeDescriptor ) ) { CodeFlow . insertBoxIfNecessary ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow . lastDescriptor ( ) . charAt ( NUMBER ) ) ; } org.springframework.expression.spel.ast.CodeFlow . exitCompilationScope ( ) ; org.springframework.expression.spel.ast.MethodVisitor . visitLabel ( org.springframework.expression.spel.ast.Label ) ; org.springframework.expression.spel.ast.CodeFlow . pushDescriptor ( this . exitTypeDescriptor ) ; }  <METHOD_END>
