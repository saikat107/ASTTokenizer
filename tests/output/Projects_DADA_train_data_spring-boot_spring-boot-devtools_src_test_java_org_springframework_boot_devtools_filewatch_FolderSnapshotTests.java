<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . java.io.File = java.io.File ( ) ; this . org.springframework.boot.devtools.filewatch.FolderSnapshot = new FolderSnapshot ( this . java.io.File ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING ) ; new FolderSnapshot ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING ) ; new FolderSnapshot ( this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFile ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FolderSnapshot org.springframework.boot.devtools.filewatch.FolderSnapshot = new FolderSnapshot ( this . java.io.File ) ; assertThat ( this . org.springframework.boot.devtools.filewatch.FolderSnapshot ) . isEqualTo ( org.springframework.boot.devtools.filewatch.FolderSnapshot ) ; assertThat ( this . org.springframework.boot.devtools.filewatch.FolderSnapshot . hashCode ( ) ) . isEqualTo ( org.springframework.boot.devtools.filewatch.FolderSnapshot . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new java.io.File ( new java.io.File ( this . java.io.File , STRING ) , STRING ) . boolean ( ) ; FolderSnapshot org.springframework.boot.devtools.filewatch.FolderSnapshot = new FolderSnapshot ( this . java.io.File ) ; assertThat ( this . org.springframework.boot.devtools.filewatch.FolderSnapshot ) . isNotEqualTo ( org.springframework.boot.devtools.filewatch.FolderSnapshot ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new java.io.File ( new java.io.File ( this . java.io.File , STRING ) , STRING ) . boolean ( ) ; FolderSnapshot org.springframework.boot.devtools.filewatch.FolderSnapshot = new FolderSnapshot ( this . java.io.File ) ; assertThat ( this . org.springframework.boot.devtools.filewatch.FolderSnapshot ) . isNotEqualTo ( org.springframework.boot.devtools.filewatch.FolderSnapshot ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( new java.io.File ( this . java.io.File , STRING ) , STRING ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; FolderSnapshot org.springframework.boot.devtools.filewatch.FolderSnapshot = new FolderSnapshot ( this . java.io.File ) ; assertThat ( this . org.springframework.boot.devtools.filewatch.FolderSnapshot ) . isNotEqualTo ( org.springframework.boot.devtools.filewatch.FolderSnapshot ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.devtools.filewatch.FolderSnapshot . getChangedFiles ( null , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING + this . java.io.File + STRING ) ; this . org.springframework.boot.devtools.filewatch.FolderSnapshot . getChangedFiles ( new FolderSnapshot ( java.io.File ( ) ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FolderSnapshot org.springframework.boot.devtools.filewatch.FolderSnapshot = new FolderSnapshot ( this . java.io.File ) ; this . org.springframework.boot.devtools.filewatch.FolderSnapshot . getChangedFiles ( org.springframework.boot.devtools.filewatch.FolderSnapshot , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( this . java.io.File , STRING ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; java.io.File . boolean ( ) ; java.io.File . boolean ( ) ; FolderSnapshot org.springframework.boot.devtools.filewatch.FolderSnapshot = new FolderSnapshot ( this . java.io.File ) ; ChangedFiles org.springframework.boot.devtools.filewatch.ChangedFiles = this . org.springframework.boot.devtools.filewatch.FolderSnapshot . getChangedFiles ( org.springframework.boot.devtools.filewatch.FolderSnapshot , null ) ; assertThat ( org.springframework.boot.devtools.filewatch.ChangedFiles . getSourceFolder ( ) ) . isEqualTo ( this . java.io.File ) ; assertThat ( org.springframework.boot.devtools.filewatch.ChangedFile ( org.springframework.boot.devtools.filewatch.ChangedFiles , java.io.File ) . getType ( ) ) . isEqualTo ( Type . MODIFY ) ; assertThat ( org.springframework.boot.devtools.filewatch.ChangedFile ( org.springframework.boot.devtools.filewatch.ChangedFiles , java.io.File ) . getType ( ) ) . isEqualTo ( Type . DELETE ) ; assertThat ( org.springframework.boot.devtools.filewatch.ChangedFile ( org.springframework.boot.devtools.filewatch.ChangedFiles , java.io.File ) . getType ( ) ) . isEqualTo ( Type . ADD ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.filewatch.ChangedFile org.springframework.boot.devtools.filewatch.ChangedFile ( ChangedFiles org.springframework.boot.devtools.filewatch.ChangedFiles , java.io.File java.io.File ) { for ( ChangedFile org.springframework.boot.devtools.filewatch.ChangedFile : org.springframework.boot.devtools.filewatch.ChangedFiles ) { if ( org.springframework.boot.devtools.filewatch.ChangedFile . getFile ( ) . equals ( java.io.File ) ) { return org.springframework.boot.devtools.filewatch.ChangedFile ; } } return null ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( ) java.io.IOException { java.io.File java.io.File = this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFolder ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; java.io.File . boolean ( ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , new java.io.File ( java.io.File , STRING ) ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , new java.io.File ( java.io.File , STRING ) ) ; return java.io.File ; }  <METHOD_END>
