<METHOD_START> public void ( ) { this( new MimeType ( STRING , STRING ) , new MimeType ( STRING , STRING ) , new MimeType ( STRING , STRING ) ); }  <METHOD_END>
<METHOD_START> public void ( MimeType ... org.springframework.messaging.converter.MimeType[] ) { super( java.util.Arrays . java.util.List ( org.springframework.messaging.converter.MimeType[] ) ); }  <METHOD_END>
<METHOD_START> public void ( Marshaller org.springframework.messaging.converter.Marshaller ) { this(); Assert . notNull ( org.springframework.messaging.converter.Marshaller , STRING ) ; this . org.springframework.messaging.converter.Marshaller = org.springframework.messaging.converter.Marshaller ; if ( org.springframework.messaging.converter.Marshaller instanceof Unmarshaller ) { this . org.springframework.messaging.converter.Unmarshaller = ( Unmarshaller ) org.springframework.messaging.converter.Marshaller ; } }  <METHOD_END>
<METHOD_START> public void void ( Marshaller org.springframework.messaging.converter.Marshaller ) { this . org.springframework.messaging.converter.Marshaller = org.springframework.messaging.converter.Marshaller ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.converter.Marshaller org.springframework.messaging.converter.Marshaller ( ) { return this . org.springframework.messaging.converter.Marshaller ; }  <METHOD_END>
<METHOD_START> public void void ( Unmarshaller org.springframework.messaging.converter.Unmarshaller ) { this . org.springframework.messaging.converter.Unmarshaller = org.springframework.messaging.converter.Unmarshaller ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.converter.Unmarshaller org.springframework.messaging.converter.Unmarshaller ( ) { return this . org.springframework.messaging.converter.Unmarshaller ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.messaging.converter.Message<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( supportsMimeType ( org.springframework.messaging.converter.Message<> . getHeaders ( ) ) && this . org.springframework.messaging.converter.Unmarshaller != null && this . org.springframework.messaging.converter.Unmarshaller . supports ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Object java.lang.Object , MessageHeaders org.springframework.messaging.converter.MessageHeaders ) { return ( supportsMimeType ( org.springframework.messaging.converter.MessageHeaders ) && this . org.springframework.messaging.converter.Marshaller != null && this . org.springframework.messaging.converter.Marshaller . supports ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.messaging.converter.Message<?> , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object java.lang.Object ) { Assert . notNull ( this . org.springframework.messaging.converter.Unmarshaller , STRING ) ; try { javax.xml.transform.Source javax.xml.transform.Source = javax.xml.transform.Source ( org.springframework.messaging.converter.Message<> . getPayload ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.messaging.converter.Unmarshaller . unmarshal ( javax.xml.transform.Source ) ; if ( ! java.lang.Class<> . boolean ( java.lang.Object ) ) { throw new TypeMismatchException ( java.lang.Object , java.lang.Class<> ) ; } return java.lang.Object ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessageConversionException ( org.springframework.messaging.converter.Message<> , STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private javax.xml.transform.Source javax.xml.transform.Source ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof byte [] ) { return new javax.xml.transform.stream.StreamSource ( new java.io.ByteArrayInputStream ( ( byte [] ) java.lang.Object ) ) ; } else { return new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( ( java.lang.String ) java.lang.Object ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , MessageHeaders org.springframework.messaging.converter.MessageHeaders , java.lang.Object java.lang.Object ) { Assert . notNull ( this . org.springframework.messaging.converter.Marshaller , STRING ) ; try { if ( byte [] .class == getSerializedPayloadClass ( ) ) { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; javax.xml.transform.Result javax.xml.transform.Result = new javax.xml.transform.stream.StreamResult ( java.io.ByteArrayOutputStream ) ; this . org.springframework.messaging.converter.Marshaller . marshal ( java.lang.Object , javax.xml.transform.Result ) ; java.lang.Object = java.io.ByteArrayOutputStream . byte[] ( ) ; } else { java.io.Writer java.io.Writer = new java.io.StringWriter ( ) ; javax.xml.transform.Result javax.xml.transform.Result = new javax.xml.transform.stream.StreamResult ( java.io.Writer ) ; this . org.springframework.messaging.converter.Marshaller . marshal ( java.lang.Object , javax.xml.transform.Result ) ; java.lang.Object = java.io.Writer . java.lang.String ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new MessageConversionException ( STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } return java.lang.Object ; }  <METHOD_END>
