<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . cleanUp ( ) ; this . org.springframework.boot.logging.log4j2.Logger = LogManager . getLogger ( java.lang.Class<? extends org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.log4j2.Logger . info ( STRING ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . initialize ( null , null , null ) ; this . org.springframework.boot.logging.log4j2.Logger . info ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.log4j2.InternalOutputCapture . toString ( ) . trim ( ) ; Configuration org.springframework.boot.logging.log4j2.Configuration = this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . org.springframework.boot.logging.log4j2.Configuration ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) . doesNotContain ( STRING ) ; assertThat ( new java.io.File ( tmpDir ( ) + STRING ) . boolean ( ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.logging.log4j2.Configuration . getConfigurationSource ( ) . getFile ( ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.log4j2.Logger . info ( STRING ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . initialize ( null , null , getLogFile ( null , tmpDir ( ) ) ) ; this . org.springframework.boot.logging.log4j2.Logger . info ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.log4j2.InternalOutputCapture . toString ( ) . trim ( ) ; Configuration org.springframework.boot.logging.log4j2.Configuration = this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . org.springframework.boot.logging.log4j2.Configuration ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) . doesNotContain ( STRING ) ; assertThat ( new java.io.File ( tmpDir ( ) + STRING ) . boolean ( ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.logging.log4j2.Configuration . getConfigurationSource ( ) . getFile ( ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . initialize ( null , STRING , getLogFile ( tmpDir ( ) + STRING , null ) ) ; this . org.springframework.boot.logging.log4j2.Logger . info ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.log4j2.InternalOutputCapture . toString ( ) . trim ( ) ; Configuration org.springframework.boot.logging.log4j2.Configuration = this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . org.springframework.boot.logging.log4j2.Configuration ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) . contains ( tmpDir ( ) + STRING ) ; assertThat ( new java.io.File ( tmpDir ( ) + STRING ) . boolean ( ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.logging.log4j2.Configuration . getConfigurationSource ( ) . getFile ( ) . getAbsolutePath ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.boot.logging.log4j2.Configuration . getWatchManager ( ) . getIntervalSeconds ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . initialize ( null , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . getSupportedLogLevels ( ) ) . isEqualTo ( java.util.EnumSet . java.util.EnumSet<E> ( LogLevel .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . initialize ( null , null , null ) ; this . org.springframework.boot.logging.log4j2.Logger . debug ( STRING ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . setLogLevel ( STRING , LogLevel . DEBUG ) ; this . org.springframework.boot.logging.log4j2.Logger . debug ( STRING ) ; assertThat ( StringUtils . countOccurrencesOf ( this . org.springframework.boot.logging.log4j2.InternalOutputCapture . toString ( ) , STRING ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . initialize ( null , null , null ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . setLogLevel ( java.lang.Class<? extends org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests> ( ) . java.lang.String ( ) , LogLevel . DEBUG ) ; java.util.List<org.springframework.boot.logging.log4j2.LoggerConfiguration> < LoggerConfiguration > java.util.List<org.springframework.boot.logging.log4j2.LoggerConfiguration> = this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . getLoggerConfigurations ( ) ; assertThat ( java.util.List<org.springframework.boot.logging.log4j2.LoggerConfiguration> ) . isNotEmpty ( ) ; assertThat ( java.util.List<org.springframework.boot.logging.log4j2.LoggerConfiguration> . get ( NUMBER ) . getName ( ) ) . isEqualTo ( LoggingSystem . ROOT_LOGGER_NAME ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . initialize ( null , null , null ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . setLogLevel ( java.lang.Class<? extends org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests> ( ) . java.lang.String ( ) , LogLevel . DEBUG ) ; LoggerConfiguration org.springframework.boot.logging.log4j2.LoggerConfiguration = this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . getLoggerConfiguration ( java.lang.Class<? extends org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests> ( ) . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.logging.log4j2.LoggerConfiguration ) . isEqualTo ( new LoggerConfiguration ( java.lang.Class<? extends org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests> ( ) . java.lang.String ( ) , LogLevel . DEBUG , LogLevel . DEBUG ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . initialize ( null , null , null ) ; LogManager . getRootLogger ( ) . debug ( STRING ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . setLogLevel ( STRING , LogLevel . DEBUG ) ; LogManager . getRootLogger ( ) . debug ( STRING ) ; assertThat ( this . org.springframework.boot.logging.log4j2.InternalOutputCapture . toString ( ) ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) { this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . initialize ( null , null , null ) ; java . util . logging . java.util.logging.Logger java.util.logging.Logger = java . util . logging . java.util.logging.Logger . java.util.logging.Logger ( java.lang.Class<? extends org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests> ( ) . java.lang.String ( ) ) ; java.util.logging.Logger . void ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.log4j2.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . getStandardConfigLocations ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . void ( ObjectMapper .class . java.lang.String ( ) ) ; assertThat ( this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . getStandardConfigLocations ( ) ) . contains ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . void ( STRING ) ; assertThat ( this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . getStandardConfigLocations ( ) ) . contains ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . void ( STRING , ObjectMapper .class . java.lang.String ( ) ) ; assertThat ( this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . getStandardConfigLocations ( ) ) . contains ( STRING , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = getSpringConfigLocations ( this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem ) ; assertThat ( java.lang.String[] ) . isEqualTo ( new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . initialize ( null , null , getLogFile ( null , tmpDir ( ) ) ) ; Matcher < java.lang.String > org.springframework.boot.logging.log4j2.Matcher<java.lang.String> = containsString ( STRING ) ; this . org.springframework.boot.logging.log4j2.InternalOutputCapture . expect ( org.springframework.boot.logging.log4j2.Matcher<java.lang.String> ) ; this . org.springframework.boot.logging.log4j2.Logger . warn ( STRING , new java.lang.RuntimeException ( STRING ) ) ; java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.FileReader ( new java.io.File ( tmpDir ( ) + STRING ) ) ) ; assertThat ( java.lang.String ) . is ( Matched . by ( org.springframework.boot.logging.log4j2.Matcher<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . beforeInitialize ( ) ; assertThat ( this . org.springframework.boot.logging.log4j2.Logger . isErrorEnabled ( ) ) . isFalse ( ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . initialize ( null , null , getLogFile ( null , tmpDir ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; try { this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.log4j2.Logger . info ( STRING ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . initialize ( null , null , getLogFile ( null , tmpDir ( ) ) ) ; Matcher < java.lang.String > org.springframework.boot.logging.log4j2.Matcher<java.lang.String> = Matchers . allOf ( containsString ( STRING ) , not ( containsString ( STRING ) ) ) ; this . org.springframework.boot.logging.log4j2.InternalOutputCapture . expect ( org.springframework.boot.logging.log4j2.Matcher<java.lang.String> ) ; this . org.springframework.boot.logging.log4j2.Logger . warn ( STRING , new java.lang.RuntimeException ( STRING , new java.lang.RuntimeException ( STRING ) ) ) ; java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.FileReader ( new java.io.File ( tmpDir ( ) + STRING ) ) ) ; assertThat ( java.lang.String ) . is ( Matched . by ( org.springframework.boot.logging.log4j2.Matcher<java.lang.String> ) ) ; } finally { java.lang.System . java.lang.String ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { LoggerContext org.springframework.boot.logging.log4j2.LoggerContext = ( LoggerContext ) LogManager . getContext ( false ) ; java.beans.PropertyChangeListener java.beans.PropertyChangeListener = mock ( java.beans.PropertyChangeListener .class ) ; org.springframework.boot.logging.log4j2.LoggerContext . addPropertyChangeListener ( java.beans.PropertyChangeListener ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . initialize ( null , null , null ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . initialize ( null , null , null ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . initialize ( null , null , null ) ; verify ( java.beans.PropertyChangeListener , times ( NUMBER ) ) . propertyChange ( any ( java.beans.PropertyChangeEvent .class ) ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . cleanUp ( ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem . initialize ( null , null , null ) ; verify ( java.beans.PropertyChangeListener , times ( NUMBER ) ) . propertyChange ( any ( java.beans.PropertyChangeEvent .class ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.TestLog4J2LoggingSystem .class . java.lang.ClassLoader ( ) ); }  <METHOD_END>
<METHOD_START> public org.springframework.boot.logging.log4j2.Configuration org.springframework.boot.logging.log4j2.Configuration ( ) { return ( ( org . org.apache . org.apache . org.apache . org.apache . org.apache ) LogManager . getContext ( false ) ) . getConfiguration ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.String java.lang.String ) { return this . java.util.List<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { java.util.Collections . boolean ( this . java.util.List<java.lang.String> , java.lang.String[] ) ; }  <METHOD_END>
