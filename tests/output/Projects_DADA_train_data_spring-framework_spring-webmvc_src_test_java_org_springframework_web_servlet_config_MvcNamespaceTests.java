<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.servlet.config.MvcNamespaceTests.TestMockServletContext org.springframework.web.servlet.config.MvcNamespaceTests.TestMockServletContext = new org.springframework.web.servlet.config.MvcNamespaceTests.TestMockServletContext ( ) ; org.springframework.web.servlet.config.GenericWebApplicationContext = new GenericWebApplicationContext ( ) ; org.springframework.web.servlet.config.GenericWebApplicationContext . setServletContext ( org.springframework.web.servlet.config.MvcNamespaceTests.TestMockServletContext ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; java.lang.String java.lang.String = WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE ; org.springframework.web.servlet.config.GenericWebApplicationContext . getServletContext ( ) . setAttribute ( java.lang.String , org.springframework.web.servlet.config.GenericWebApplicationContext ) ; org.springframework.web.servlet.config.MvcNamespaceTests.TestController = new org.springframework.web.servlet.config.MvcNamespaceTests.TestController ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.config.MvcNamespaceTests.TestController .class . java.lang.reflect.Method ( STRING , java.util.Date .class , java.lang.Double .class , org.springframework.web.servlet.config.MvcNamespaceTests.TestBean .class , BindingResult .class ) ; org.springframework.web.servlet.config.HandlerMethod = new InvocableHandlerMethod ( org.springframework.web.servlet.config.MvcNamespaceTests.TestController , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; RequestMappingHandlerMapping org.springframework.web.servlet.config.RequestMappingHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.RequestMappingHandlerMapping ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.RequestMappingHandlerMapping . getOrder ( ) ) ; assertTrue ( org.springframework.web.servlet.config.RequestMappingHandlerMapping . getUrlPathHelper ( ) . shouldRemoveSemicolonContent ( ) ) ; org.springframework.web.servlet.config.RequestMappingHandlerMapping . setDefaultHandler ( org.springframework.web.servlet.config.HandlerMethod ) ; MockHttpServletRequest org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; NativeWebRequest org.springframework.web.servlet.config.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; ContentNegotiationManager org.springframework.web.servlet.config.ContentNegotiationManager = org.springframework.web.servlet.config.RequestMappingHandlerMapping . getContentNegotiationManager ( ) ; assertEquals ( java.util.Collections . java.util.List ( MediaType . APPLICATION_JSON ) , org.springframework.web.servlet.config.ContentNegotiationManager . resolveMediaTypes ( org.springframework.web.servlet.config.NativeWebRequest ) ) ; RequestMappingHandlerAdapter org.springframework.web.servlet.config.RequestMappingHandlerAdapter = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; assertNotNull ( org.springframework.web.servlet.config.RequestMappingHandlerAdapter ) ; assertEquals ( false , new DirectFieldAccessor ( org.springframework.web.servlet.config.RequestMappingHandlerAdapter ) . getPropertyValue ( STRING ) ) ; java.util.List<org.springframework.web.servlet.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.HttpMessageConverter<?>> = org.springframework.web.servlet.config.RequestMappingHandlerAdapter . getMessageConverters ( ) ; assertTrue ( java.util.List<org.springframework.web.servlet.config.HttpMessageConverter<?>> . size ( ) > NUMBER ) ; for ( HttpMessageConverter < ? > org.springframework.web.servlet.config.HttpMessageConverter<?> : java.util.List<org.springframework.web.servlet.config.HttpMessageConverter<?>> ) { if ( org.springframework.web.servlet.config.HttpMessageConverter<> instanceof AbstractJackson2HttpMessageConverter ) { ObjectMapper org.springframework.web.servlet.config.ObjectMapper = ( ( AbstractJackson2HttpMessageConverter ) org.springframework.web.servlet.config.HttpMessageConverter<> ) . getObjectMapper ( ) ; assertFalse ( org.springframework.web.servlet.config.ObjectMapper . getDeserializationConfig ( ) . isEnabled ( MapperFeature . DEFAULT_VIEW_INCLUSION ) ) ; assertFalse ( org.springframework.web.servlet.config.ObjectMapper . getSerializationConfig ( ) . isEnabled ( MapperFeature . DEFAULT_VIEW_INCLUSION ) ) ; assertFalse ( org.springframework.web.servlet.config.ObjectMapper . getDeserializationConfig ( ) . isEnabled ( DeserializationFeature . FAIL_ON_UNKNOWN_PROPERTIES ) ) ; if ( org.springframework.web.servlet.config.HttpMessageConverter<> instanceof MappingJackson2XmlHttpMessageConverter ) { assertEquals ( XmlMapper .class , org.springframework.web.servlet.config.ObjectMapper . getClass ( ) ) ; } } } assertNotNull ( org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( FormattingConversionServiceFactoryBean .class ) ) ; assertNotNull ( org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ConversionService .class ) ) ; assertNotNull ( org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( LocalValidatorFactoryBean .class ) ) ; assertNotNull ( org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( Validator .class ) ) ; org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.config.MockHttpServletResponse = new MockHttpServletResponse ( ) ; HandlerExecutionChain org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.RequestMappingHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) . length ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ConversionServiceExposingInterceptor ) ; ConversionServiceExposingInterceptor org.springframework.web.servlet.config.ConversionServiceExposingInterceptor = ( ConversionServiceExposingInterceptor ) org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] ; org.springframework.web.servlet.config.ConversionServiceExposingInterceptor . preHandle ( org.springframework.web.servlet.config.MockHttpServletRequest , org.springframework.web.servlet.config.MockHttpServletResponse , org.springframework.web.servlet.config.HandlerMethod ) ; assertSame ( org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ConversionService .class ) , org.springframework.web.servlet.config.MockHttpServletRequest . getAttribute ( ConversionService .class . java.lang.String ( ) ) ) ; org.springframework.web.servlet.config.RequestMappingHandlerAdapter . handle ( org.springframework.web.servlet.config.MockHttpServletRequest , org.springframework.web.servlet.config.MockHttpServletResponse , org.springframework.web.servlet.config.HandlerMethod ) ; assertTrue ( org.springframework.web.servlet.config.MvcNamespaceTests.TestController . boolean ) ; assertEquals ( LocalDate . parse ( STRING ) . toDate ( ) , org.springframework.web.servlet.config.MvcNamespaceTests.TestController . java.util.Date ) ; assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.web.servlet.config.MvcNamespaceTests.TestController . java.lang.Double ) ; CompositeUriComponentsContributor org.springframework.web.servlet.config.CompositeUriComponentsContributor = this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( MvcUriComponentsBuilder . MVC_URI_COMPONENTS_CONTRIBUTOR_BEAN_NAME , CompositeUriComponentsContributor .class ) ; assertNotNull ( org.springframework.web.servlet.config.CompositeUriComponentsContributor ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = TypeMismatchException .class ) public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; RequestMappingHandlerMapping org.springframework.web.servlet.config.RequestMappingHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.RequestMappingHandlerMapping ) ; org.springframework.web.servlet.config.RequestMappingHandlerMapping . setDefaultHandler ( org.springframework.web.servlet.config.HandlerMethod ) ; MockHttpServletRequest org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.config.MockHttpServletResponse = new MockHttpServletResponse ( ) ; HandlerExecutionChain org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.RequestMappingHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) . length ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ConversionServiceExposingInterceptor ) ; ConversionServiceExposingInterceptor org.springframework.web.servlet.config.ConversionServiceExposingInterceptor = ( ConversionServiceExposingInterceptor ) org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] ; org.springframework.web.servlet.config.ConversionServiceExposingInterceptor . preHandle ( org.springframework.web.servlet.config.MockHttpServletRequest , org.springframework.web.servlet.config.MockHttpServletResponse , org.springframework.web.servlet.config.MvcNamespaceTests.TestController ) ; assertSame ( org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( STRING ) , org.springframework.web.servlet.config.MockHttpServletRequest . getAttribute ( ConversionService .class . java.lang.String ( ) ) ) ; RequestMappingHandlerAdapter org.springframework.web.servlet.config.RequestMappingHandlerAdapter = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; assertNotNull ( org.springframework.web.servlet.config.RequestMappingHandlerAdapter ) ; org.springframework.web.servlet.config.RequestMappingHandlerAdapter . handle ( org.springframework.web.servlet.config.MockHttpServletRequest , org.springframework.web.servlet.config.MockHttpServletResponse , org.springframework.web.servlet.config.HandlerMethod ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { void ( java.lang.String , NUMBER ) ; RequestMappingHandlerMapping org.springframework.web.servlet.config.RequestMappingHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.RequestMappingHandlerMapping ) ; assertFalse ( org.springframework.web.servlet.config.RequestMappingHandlerMapping . getUrlPathHelper ( ) . shouldRemoveSemicolonContent ( ) ) ; RequestMappingHandlerAdapter org.springframework.web.servlet.config.RequestMappingHandlerAdapter = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; assertNotNull ( org.springframework.web.servlet.config.RequestMappingHandlerAdapter ) ; assertEquals ( true , new DirectFieldAccessor ( org.springframework.web.servlet.config.RequestMappingHandlerAdapter ) . getPropertyValue ( STRING ) ) ; MockHttpServletRequest org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.config.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.config.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.config.RequestMappingHandlerAdapter . handle ( org.springframework.web.servlet.config.MockHttpServletRequest , org.springframework.web.servlet.config.MockHttpServletResponse , org.springframework.web.servlet.config.HandlerMethod ) ; assertTrue ( org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( org.springframework.web.servlet.config.MvcNamespaceTests.TestValidator .class ) . validatorInvoked ) ; assertFalse ( org.springframework.web.servlet.config.MvcNamespaceTests.TestController . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; RequestMappingHandlerMapping org.springframework.web.servlet.config.RequestMappingHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.RequestMappingHandlerMapping ) ; org.springframework.web.servlet.config.RequestMappingHandlerMapping . setDefaultHandler ( org.springframework.web.servlet.config.HandlerMethod ) ; MockHttpServletRequest org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . addParameter ( STRING , STRING ) ; HandlerExecutionChain org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.RequestMappingHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) . length ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ConversionServiceExposingInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof LocaleChangeInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ThemeChangeInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof UserRoleAuthorizationInterceptor ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.RequestMappingHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) . length ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.RequestMappingHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) . length ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.RequestMappingHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; HttpRequestHandlerAdapter org.springframework.web.servlet.config.HttpRequestHandlerAdapter = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( HttpRequestHandlerAdapter .class ) ; assertNotNull ( org.springframework.web.servlet.config.HttpRequestHandlerAdapter ) ; RequestMappingHandlerMapping org.springframework.web.servlet.config.RequestMappingHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ; ContentNegotiationManager org.springframework.web.servlet.config.ContentNegotiationManager = org.springframework.web.servlet.config.RequestMappingHandlerMapping . getContentNegotiationManager ( ) ; ResourceHttpRequestHandler org.springframework.web.servlet.config.ResourceHttpRequestHandler = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ResourceHttpRequestHandler .class ) ; assertNotNull ( org.springframework.web.servlet.config.ResourceHttpRequestHandler ) ; assertSame ( org.springframework.web.servlet.config.ContentNegotiationManager , org.springframework.web.servlet.config.ResourceHttpRequestHandler . getContentNegotiationManager ( ) ) ; SimpleUrlHandlerMapping org.springframework.web.servlet.config.SimpleUrlHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( SimpleUrlHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.SimpleUrlHandlerMapping ) ; assertEquals ( Ordered . LOWEST_PRECEDENCE - NUMBER , org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getOrder ( ) ) ; BeanNameUrlHandlerMapping org.springframework.web.servlet.config.BeanNameUrlHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( BeanNameUrlHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.BeanNameUrlHandlerMapping ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.BeanNameUrlHandlerMapping . getOrder ( ) ) ; ResourceUrlProvider org.springframework.web.servlet.config.ResourceUrlProvider = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ResourceUrlProvider .class ) ; assertNotNull ( org.springframework.web.servlet.config.ResourceUrlProvider ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.config.MappedInterceptor> < java.lang.String , MappedInterceptor > java.util.Map<java.lang.String,org.springframework.web.servlet.config.MappedInterceptor> = org.springframework.web.servlet.config.GenericWebApplicationContext . getBeansOfType ( MappedInterceptor .class ) ; java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = java.util.Map<java.lang.String,org.springframework.web.servlet.config.MappedInterceptor> . values ( ) . stream ( ) . map ( mappedInterceptor -> mappedInterceptor . getInterceptor ( ) . getClass ( ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; assertThat ( java.util.List<java.lang.Class<?>> , containsInAnyOrder ( ConversionServiceExposingInterceptor .class , ResourceUrlProviderExposingInterceptor .class ) ) ; MockHttpServletRequest org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setMethod ( STRING ) ; HandlerExecutionChain org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.config.HandlerExecutionChain ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getHandler ( ) instanceof ResourceHttpRequestHandler ) ; MockHttpServletResponse org.springframework.web.servlet.config.MockHttpServletResponse = new MockHttpServletResponse ( ) ; for ( HandlerInterceptor org.springframework.web.servlet.config.HandlerInterceptor : org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) ) { org.springframework.web.servlet.config.HandlerInterceptor . preHandle ( org.springframework.web.servlet.config.MockHttpServletRequest , org.springframework.web.servlet.config.MockHttpServletResponse , org.springframework.web.servlet.config.HandlerExecutionChain . getHandler ( ) ) ; } ModelAndView org.springframework.web.servlet.config.ModelAndView = org.springframework.web.servlet.config.HttpRequestHandlerAdapter . handle ( org.springframework.web.servlet.config.MockHttpServletRequest , org.springframework.web.servlet.config.MockHttpServletResponse , org.springframework.web.servlet.config.HandlerExecutionChain . getHandler ( ) ) ; assertNull ( org.springframework.web.servlet.config.ModelAndView ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; SimpleUrlHandlerMapping org.springframework.web.servlet.config.SimpleUrlHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( SimpleUrlHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.SimpleUrlHandlerMapping ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getOrder ( ) ) ; assertNotNull ( org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ) ; ResourceHttpRequestHandler org.springframework.web.servlet.config.ResourceHttpRequestHandler = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ( java.lang.String ) org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) , ResourceHttpRequestHandler .class ) ; assertNotNull ( org.springframework.web.servlet.config.ResourceHttpRequestHandler ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.ResourceHttpRequestHandler . getCacheSeconds ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; SimpleUrlHandlerMapping org.springframework.web.servlet.config.SimpleUrlHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( SimpleUrlHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.SimpleUrlHandlerMapping ) ; assertNotNull ( org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ) ; ResourceHttpRequestHandler org.springframework.web.servlet.config.ResourceHttpRequestHandler = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ( java.lang.String ) org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) , ResourceHttpRequestHandler .class ) ; assertNotNull ( org.springframework.web.servlet.config.ResourceHttpRequestHandler ) ; java.util.List<org.springframework.web.servlet.config.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.servlet.config.ResourceResolver> = org.springframework.web.servlet.config.ResourceHttpRequestHandler . getResourceResolvers ( ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.ResourceResolver> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( CachingResourceResolver .class ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( VersionResourceResolver .class ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( WebJarsResourceResolver .class ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( PathResourceResolver .class ) ) ; CachingResourceResolver org.springframework.web.servlet.config.CachingResourceResolver = ( CachingResourceResolver ) java.util.List<org.springframework.web.servlet.config.ResourceResolver> . get ( NUMBER ) ; assertThat ( org.springframework.web.servlet.config.CachingResourceResolver . getCache ( ) , Matchers . instanceOf ( ConcurrentMapCache .class ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.CachingResourceResolver . getCache ( ) . getName ( ) ) ; VersionResourceResolver org.springframework.web.servlet.config.VersionResourceResolver = ( VersionResourceResolver ) java.util.List<org.springframework.web.servlet.config.ResourceResolver> . get ( NUMBER ) ; assertThat ( org.springframework.web.servlet.config.VersionResourceResolver . getStrategyMap ( ) . get ( STRING STRING ) , Matchers . instanceOf ( FixedVersionStrategy .class ) ) ; assertThat ( org.springframework.web.servlet.config.VersionResourceResolver . getStrategyMap ( ) . get ( STRING ) , Matchers . instanceOf ( ContentVersionStrategy .class ) ) ; java.util.List<org.springframework.web.servlet.config.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.servlet.config.ResourceTransformer> = org.springframework.web.servlet.config.ResourceHttpRequestHandler . getResourceTransformers ( ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.ResourceTransformer> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.ResourceTransformer> . get ( NUMBER ) , Matchers . instanceOf ( CachingResourceTransformer .class ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.ResourceTransformer> . get ( NUMBER ) , Matchers . instanceOf ( CssLinkResourceTransformer .class ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.ResourceTransformer> . get ( NUMBER ) , Matchers . instanceOf ( AppCacheManifestTransformer .class ) ) ; CachingResourceTransformer org.springframework.web.servlet.config.CachingResourceTransformer = ( CachingResourceTransformer ) java.util.List<org.springframework.web.servlet.config.ResourceTransformer> . get ( NUMBER ) ; assertThat ( org.springframework.web.servlet.config.CachingResourceTransformer . getCache ( ) , Matchers . instanceOf ( ConcurrentMapCache .class ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.CachingResourceTransformer . getCache ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; SimpleUrlHandlerMapping org.springframework.web.servlet.config.SimpleUrlHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( SimpleUrlHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.SimpleUrlHandlerMapping ) ; assertNotNull ( org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ) ; ResourceHttpRequestHandler org.springframework.web.servlet.config.ResourceHttpRequestHandler = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ( java.lang.String ) org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) , ResourceHttpRequestHandler .class ) ; assertNotNull ( org.springframework.web.servlet.config.ResourceHttpRequestHandler ) ; assertThat ( org.springframework.web.servlet.config.ResourceHttpRequestHandler . getCacheControl ( ) . getHeaderValue ( ) , Matchers . equalTo ( CacheControl . maxAge ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) . sMaxAge ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) . cachePublic ( ) . getHeaderValue ( ) ) ) ; java.util.List<org.springframework.web.servlet.config.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.servlet.config.ResourceResolver> = org.springframework.web.servlet.config.ResourceHttpRequestHandler . getResourceResolvers ( ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.ResourceResolver> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( VersionResourceResolver .class ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( GzipResourceResolver .class ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( PathResourceResolver .class ) ) ; VersionResourceResolver org.springframework.web.servlet.config.VersionResourceResolver = ( VersionResourceResolver ) java.util.List<org.springframework.web.servlet.config.ResourceResolver> . get ( NUMBER ) ; assertThat ( org.springframework.web.servlet.config.VersionResourceResolver . getStrategyMap ( ) . get ( STRING STRING ) , Matchers . instanceOf ( FixedVersionStrategy .class ) ) ; assertThat ( org.springframework.web.servlet.config.VersionResourceResolver . getStrategyMap ( ) . get ( STRING ) , Matchers . instanceOf ( ContentVersionStrategy .class ) ) ; java.util.List<org.springframework.web.servlet.config.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.servlet.config.ResourceTransformer> = org.springframework.web.servlet.config.ResourceHttpRequestHandler . getResourceTransformers ( ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.ResourceTransformer> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.ResourceTransformer> . get ( NUMBER ) , Matchers . instanceOf ( CachingResourceTransformer .class ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.ResourceTransformer> . get ( NUMBER ) , Matchers . instanceOf ( AppCacheManifestTransformer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; HttpRequestHandlerAdapter org.springframework.web.servlet.config.HttpRequestHandlerAdapter = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( HttpRequestHandlerAdapter .class ) ; assertNotNull ( org.springframework.web.servlet.config.HttpRequestHandlerAdapter ) ; DefaultServletHttpRequestHandler org.springframework.web.servlet.config.DefaultServletHttpRequestHandler = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( DefaultServletHttpRequestHandler .class ) ; assertNotNull ( org.springframework.web.servlet.config.DefaultServletHttpRequestHandler ) ; SimpleUrlHandlerMapping org.springframework.web.servlet.config.SimpleUrlHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( SimpleUrlHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.SimpleUrlHandlerMapping ) ; assertEquals ( Ordered . LOWEST_PRECEDENCE , org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getOrder ( ) ) ; MockHttpServletRequest org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setMethod ( STRING ) ; HandlerExecutionChain org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getHandler ( ) instanceof DefaultServletHttpRequestHandler ) ; MockHttpServletResponse org.springframework.web.servlet.config.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.web.servlet.config.ModelAndView = org.springframework.web.servlet.config.HttpRequestHandlerAdapter . handle ( org.springframework.web.servlet.config.MockHttpServletRequest , org.springframework.web.servlet.config.MockHttpServletResponse , org.springframework.web.servlet.config.HandlerExecutionChain . getHandler ( ) ) ; assertNull ( org.springframework.web.servlet.config.ModelAndView ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; HttpRequestHandlerAdapter org.springframework.web.servlet.config.HttpRequestHandlerAdapter = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( HttpRequestHandlerAdapter .class ) ; assertNotNull ( org.springframework.web.servlet.config.HttpRequestHandlerAdapter ) ; DefaultServletHttpRequestHandler org.springframework.web.servlet.config.DefaultServletHttpRequestHandler = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( DefaultServletHttpRequestHandler .class ) ; assertNotNull ( org.springframework.web.servlet.config.DefaultServletHttpRequestHandler ) ; SimpleUrlHandlerMapping org.springframework.web.servlet.config.SimpleUrlHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( SimpleUrlHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.SimpleUrlHandlerMapping ) ; assertEquals ( Ordered . LOWEST_PRECEDENCE , org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getOrder ( ) ) ; MockHttpServletRequest org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setMethod ( STRING ) ; HandlerExecutionChain org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getHandler ( ) instanceof DefaultServletHttpRequestHandler ) ; MockHttpServletResponse org.springframework.web.servlet.config.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.web.servlet.config.ModelAndView = org.springframework.web.servlet.config.HttpRequestHandlerAdapter . handle ( org.springframework.web.servlet.config.MockHttpServletRequest , org.springframework.web.servlet.config.MockHttpServletResponse , org.springframework.web.servlet.config.HandlerExecutionChain . getHandler ( ) ) ; assertNull ( org.springframework.web.servlet.config.ModelAndView ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; RequestMappingHandlerMapping org.springframework.web.servlet.config.RequestMappingHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.RequestMappingHandlerMapping ) ; org.springframework.web.servlet.config.RequestMappingHandlerMapping . setDefaultHandler ( org.springframework.web.servlet.config.HandlerMethod ) ; MockHttpServletRequest org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; HandlerExecutionChain org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.RequestMappingHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) . length ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ConversionServiceExposingInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof LocaleChangeInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ThemeChangeInterceptor ) ; LocaleChangeInterceptor org.springframework.web.servlet.config.LocaleChangeInterceptor = ( LocaleChangeInterceptor ) org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] ; assertEquals ( STRING , org.springframework.web.servlet.config.LocaleChangeInterceptor . getParamName ( ) ) ; ThemeChangeInterceptor org.springframework.web.servlet.config.ThemeChangeInterceptor = ( ThemeChangeInterceptor ) org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] ; assertEquals ( STRING , org.springframework.web.servlet.config.ThemeChangeInterceptor . getParamName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; RequestMappingHandlerMapping org.springframework.web.servlet.config.RequestMappingHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.RequestMappingHandlerMapping ) ; org.springframework.web.servlet.config.RequestMappingHandlerMapping . setDefaultHandler ( org.springframework.web.servlet.config.HandlerMethod ) ; BeanNameUrlHandlerMapping org.springframework.web.servlet.config.BeanNameUrlHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( BeanNameUrlHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.BeanNameUrlHandlerMapping ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.BeanNameUrlHandlerMapping . getOrder ( ) ) ; MockHttpServletRequest org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setMethod ( STRING ) ; HandlerExecutionChain org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.RequestMappingHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) . length ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ConversionServiceExposingInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof LocaleChangeInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ThemeChangeInterceptor ) ; SimpleUrlHandlerMapping org.springframework.web.servlet.config.SimpleUrlHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( SimpleUrlHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.SimpleUrlHandlerMapping ) ; SimpleControllerHandlerAdapter org.springframework.web.servlet.config.SimpleControllerHandlerAdapter = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( SimpleControllerHandlerAdapter .class ) ; assertNotNull ( org.springframework.web.servlet.config.SimpleControllerHandlerAdapter ) ; org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) . length ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ConversionServiceExposingInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof LocaleChangeInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ThemeChangeInterceptor ) ; ModelAndView org.springframework.web.servlet.config.ModelAndView = org.springframework.web.servlet.config.SimpleControllerHandlerAdapter . handle ( org.springframework.web.servlet.config.MockHttpServletRequest , new MockHttpServletResponse ( ) , org.springframework.web.servlet.config.HandlerExecutionChain . getHandler ( ) ) ; assertNull ( org.springframework.web.servlet.config.ModelAndView . getViewName ( ) ) ; org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setContextPath ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setServletPath ( STRING ) ; org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) . length ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ConversionServiceExposingInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof LocaleChangeInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ThemeChangeInterceptor ) ; org.springframework.web.servlet.config.ModelAndView = org.springframework.web.servlet.config.SimpleControllerHandlerAdapter . handle ( org.springframework.web.servlet.config.MockHttpServletRequest , new MockHttpServletResponse ( ) , org.springframework.web.servlet.config.HandlerExecutionChain . getHandler ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.ModelAndView . getViewName ( ) ) ; org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setContextPath ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setServletPath ( STRING ) ; org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) . length ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ConversionServiceExposingInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof LocaleChangeInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ThemeChangeInterceptor ) ; org.springframework.web.servlet.config.ModelAndView = org.springframework.web.servlet.config.SimpleControllerHandlerAdapter . handle ( org.springframework.web.servlet.config.MockHttpServletRequest , new MockHttpServletResponse ( ) , org.springframework.web.servlet.config.HandlerExecutionChain . getHandler ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.ModelAndView . getViewName ( ) ) ; org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setContextPath ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setServletPath ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setQueryString ( STRING ) ; org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; org.springframework.web.servlet.config.ModelAndView = org.springframework.web.servlet.config.SimpleControllerHandlerAdapter . handle ( org.springframework.web.servlet.config.MockHttpServletRequest , new MockHttpServletResponse ( ) , org.springframework.web.servlet.config.HandlerExecutionChain . getHandler ( ) ) ; assertNotNull ( org.springframework.web.servlet.config.ModelAndView . getView ( ) ) ; assertEquals ( RedirectView .class , org.springframework.web.servlet.config.ModelAndView . getView ( ) . getClass ( ) ) ; RedirectView org.springframework.web.servlet.config.RedirectView = ( RedirectView ) org.springframework.web.servlet.config.ModelAndView . getView ( ) ; MockHttpServletResponse org.springframework.web.servlet.config.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.config.RedirectView . render ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) , org.springframework.web.servlet.config.MockHttpServletRequest , org.springframework.web.servlet.config.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.config.MockHttpServletResponse . getRedirectedUrl ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.MockHttpServletResponse . getStatus ( ) ) ; org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; org.springframework.web.servlet.config.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.config.ModelAndView = org.springframework.web.servlet.config.SimpleControllerHandlerAdapter . handle ( org.springframework.web.servlet.config.MockHttpServletRequest , org.springframework.web.servlet.config.MockHttpServletResponse , org.springframework.web.servlet.config.HandlerExecutionChain . getHandler ( ) ) ; assertNull ( org.springframework.web.servlet.config.ModelAndView ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; SimpleUrlHandlerMapping org.springframework.web.servlet.config.SimpleUrlHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( SimpleUrlHandlerMapping .class ) ; SimpleControllerHandlerAdapter org.springframework.web.servlet.config.SimpleControllerHandlerAdapter = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( SimpleControllerHandlerAdapter .class ) ; MockHttpServletRequest org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setContextPath ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setServletPath ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setAttribute ( STRING , STRING ) ; HandlerExecutionChain org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) . length ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ConversionServiceExposingInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof LocaleChangeInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ThemeChangeInterceptor ) ; ModelAndView org.springframework.web.servlet.config.ModelAndView = org.springframework.web.servlet.config.SimpleControllerHandlerAdapter . handle ( org.springframework.web.servlet.config.MockHttpServletRequest , new MockHttpServletResponse ( ) , org.springframework.web.servlet.config.HandlerExecutionChain . getHandler ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.ModelAndView . getViewName ( ) ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setContextPath ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setServletPath ( STRING ) ; org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) . length ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ConversionServiceExposingInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof LocaleChangeInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ThemeChangeInterceptor ) ; ModelAndView org.springframework.web.servlet.config.ModelAndView = org.springframework.web.servlet.config.SimpleControllerHandlerAdapter . handle ( org.springframework.web.servlet.config.MockHttpServletRequest , new MockHttpServletResponse ( ) , org.springframework.web.servlet.config.HandlerExecutionChain . getHandler ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.ModelAndView . getViewName ( ) ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setContextPath ( STRING ) ; org.springframework.web.servlet.config.MockHttpServletRequest . setServletPath ( STRING ) ; org.springframework.web.servlet.config.HandlerExecutionChain = org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getHandler ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) . length ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ConversionServiceExposingInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof LocaleChangeInterceptor ) ; assertTrue ( org.springframework.web.servlet.config.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] instanceof ThemeChangeInterceptor ) ; org.springframework.web.servlet.config.ModelAndView = org.springframework.web.servlet.config.SimpleControllerHandlerAdapter . handle ( org.springframework.web.servlet.config.MockHttpServletRequest , new MockHttpServletResponse ( ) , org.springframework.web.servlet.config.HandlerExecutionChain . getHandler ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.ModelAndView . getViewName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , NUMBER ) ; SimpleUrlHandlerMapping org.springframework.web.servlet.config.SimpleUrlHandlerMapping = this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( SimpleUrlHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.SimpleUrlHandlerMapping ) ; ParameterizableViewController org.springframework.web.servlet.config.ParameterizableViewController = ( ParameterizableViewController ) org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertNotNull ( org.springframework.web.servlet.config.ParameterizableViewController ) ; assertEquals ( STRING , org.springframework.web.servlet.config.ParameterizableViewController . getViewName ( ) ) ; ParameterizableViewController org.springframework.web.servlet.config.ParameterizableViewController = ( ParameterizableViewController ) org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertNotNull ( org.springframework.web.servlet.config.ParameterizableViewController ) ; assertThat ( org.springframework.web.servlet.config.ParameterizableViewController . getView ( ) , Matchers . instanceOf ( RedirectView .class ) ) ; ParameterizableViewController org.springframework.web.servlet.config.ParameterizableViewController = ( ParameterizableViewController ) org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertNotNull ( org.springframework.web.servlet.config.ParameterizableViewController ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.ParameterizableViewController . getStatusCode ( ) . value ( ) ) ; BeanNameUrlHandlerMapping org.springframework.web.servlet.config.BeanNameUrlHandlerMapping = this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( BeanNameUrlHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.BeanNameUrlHandlerMapping ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.BeanNameUrlHandlerMapping . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; RequestMappingHandlerMapping org.springframework.web.servlet.config.RequestMappingHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ; ContentNegotiationManager org.springframework.web.servlet.config.ContentNegotiationManager = org.springframework.web.servlet.config.RequestMappingHandlerMapping . getContentNegotiationManager ( ) ; MockHttpServletRequest org.springframework.web.servlet.config.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; NativeWebRequest org.springframework.web.servlet.config.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.config.MockHttpServletRequest ) ; assertEquals ( java.util.Collections . java.util.List ( MediaType . valueOf ( STRING ) ) , org.springframework.web.servlet.config.ContentNegotiationManager . resolveMediaTypes ( org.springframework.web.servlet.config.NativeWebRequest ) ) ; ViewResolverComposite org.springframework.web.servlet.config.ViewResolverComposite = this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ViewResolverComposite .class ) ; assertNotNull ( org.springframework.web.servlet.config.ViewResolverComposite ) ; assertEquals ( STRING + org.springframework.web.servlet.config.ViewResolverComposite . getViewResolvers ( ) , NUMBER , org.springframework.web.servlet.config.ViewResolverComposite . getViewResolvers ( ) . size ( ) ) ; ViewResolver org.springframework.web.servlet.config.ViewResolver = org.springframework.web.servlet.config.ViewResolverComposite . getViewResolvers ( ) . get ( NUMBER ) ; assertEquals ( ContentNegotiatingViewResolver .class , org.springframework.web.servlet.config.ViewResolver . getClass ( ) ) ; ContentNegotiatingViewResolver org.springframework.web.servlet.config.ContentNegotiatingViewResolver = ( ContentNegotiatingViewResolver ) org.springframework.web.servlet.config.ViewResolver ; assertSame ( org.springframework.web.servlet.config.ContentNegotiationManager , org.springframework.web.servlet.config.ContentNegotiatingViewResolver . getContentNegotiationManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; RequestMappingHandlerAdapter org.springframework.web.servlet.config.RequestMappingHandlerAdapter = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; assertNotNull ( org.springframework.web.servlet.config.RequestMappingHandlerAdapter ) ; DirectFieldAccessor org.springframework.web.servlet.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.config.RequestMappingHandlerAdapter ) ; assertEquals ( ConcurrentTaskExecutor .class , org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) . getClass ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; CallableProcessingInterceptor [] org.springframework.web.servlet.config.CallableProcessingInterceptor[] = ( CallableProcessingInterceptor [] ) org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , callableInterceptors . length ) ; DeferredResultProcessingInterceptor [] org.springframework.web.servlet.config.DeferredResultProcessingInterceptor[] = ( DeferredResultProcessingInterceptor [] ) org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , deferredResultInterceptors . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; ViewResolverComposite org.springframework.web.servlet.config.ViewResolverComposite = this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ViewResolverComposite .class ) ; assertNotNull ( org.springframework.web.servlet.config.ViewResolverComposite ) ; assertEquals ( STRING + org.springframework.web.servlet.config.ViewResolverComposite . getViewResolvers ( ) , NUMBER , org.springframework.web.servlet.config.ViewResolverComposite . getViewResolvers ( ) . size ( ) ) ; assertEquals ( Ordered . LOWEST_PRECEDENCE , org.springframework.web.servlet.config.ViewResolverComposite . getOrder ( ) ) ; java.util.List<org.springframework.web.servlet.config.ViewResolver> < ViewResolver > java.util.List<org.springframework.web.servlet.config.ViewResolver> = org.springframework.web.servlet.config.ViewResolverComposite . getViewResolvers ( ) ; assertEquals ( BeanNameViewResolver .class , java.util.List<org.springframework.web.servlet.config.ViewResolver> . get ( NUMBER ) . getClass ( ) ) ; ViewResolver org.springframework.web.servlet.config.ViewResolver = java.util.List<org.springframework.web.servlet.config.ViewResolver> . get ( NUMBER ) ; assertEquals ( InternalResourceViewResolver .class , org.springframework.web.servlet.config.ViewResolver . getClass ( ) ) ; DirectFieldAccessor org.springframework.web.servlet.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.config.ViewResolver ) ; assertEquals ( InternalResourceView .class , org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( TilesViewResolver .class , java.util.List<org.springframework.web.servlet.config.ViewResolver> . get ( NUMBER ) . getClass ( ) ) ; org.springframework.web.servlet.config.ViewResolver = java.util.List<org.springframework.web.servlet.config.ViewResolver> . get ( NUMBER ) ; assertThat ( org.springframework.web.servlet.config.ViewResolver , instanceOf ( FreeMarkerViewResolver .class ) ) ; org.springframework.web.servlet.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.config.ViewResolver ) ; assertEquals ( STRING , org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , ( java.lang.String [] ) org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; org.springframework.web.servlet.config.ViewResolver = java.util.List<org.springframework.web.servlet.config.ViewResolver> . get ( NUMBER ) ; assertThat ( org.springframework.web.servlet.config.ViewResolver , instanceOf ( GroovyMarkupViewResolver .class ) ) ; org.springframework.web.servlet.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.config.ViewResolver ) ; assertEquals ( STRING , org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; org.springframework.web.servlet.config.ViewResolver = java.util.List<org.springframework.web.servlet.config.ViewResolver> . get ( NUMBER ) ; assertThat ( org.springframework.web.servlet.config.ViewResolver , instanceOf ( ScriptTemplateViewResolver .class ) ) ; org.springframework.web.servlet.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.config.ViewResolver ) ; assertEquals ( STRING , org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( InternalResourceViewResolver .class , java.util.List<org.springframework.web.servlet.config.ViewResolver> . get ( NUMBER ) . getClass ( ) ) ; assertEquals ( InternalResourceViewResolver .class , java.util.List<org.springframework.web.servlet.config.ViewResolver> . get ( NUMBER ) . getClass ( ) ) ; TilesConfigurer org.springframework.web.servlet.config.TilesConfigurer = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( TilesConfigurer .class ) ; assertNotNull ( org.springframework.web.servlet.config.TilesConfigurer ) ; java.lang.String [] java.lang.String[] = { STRING , STRING } ; org.springframework.web.servlet.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.config.TilesConfigurer ) ; assertArrayEquals ( java.lang.String[] , ( java.lang.String [] ) org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertTrue ( ( boolean ) org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( UnresolvingLocaleDefinitionsFactory .class , org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( SpringBeanPreparerFactory .class , org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; FreeMarkerConfigurer org.springframework.web.servlet.config.FreeMarkerConfigurer = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( FreeMarkerConfigurer .class ) ; assertNotNull ( org.springframework.web.servlet.config.FreeMarkerConfigurer ) ; org.springframework.web.servlet.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.config.FreeMarkerConfigurer ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , ( java.lang.String [] ) org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; GroovyMarkupConfigurer org.springframework.web.servlet.config.GroovyMarkupConfigurer = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( GroovyMarkupConfigurer .class ) ; assertNotNull ( org.springframework.web.servlet.config.GroovyMarkupConfigurer ) ; assertEquals ( STRING , org.springframework.web.servlet.config.GroovyMarkupConfigurer . getResourceLoaderPath ( ) ) ; assertTrue ( org.springframework.web.servlet.config.GroovyMarkupConfigurer . isAutoIndent ( ) ) ; assertFalse ( org.springframework.web.servlet.config.GroovyMarkupConfigurer . isCacheTemplates ( ) ) ; ScriptTemplateConfigurer org.springframework.web.servlet.config.ScriptTemplateConfigurer = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ScriptTemplateConfigurer .class ) ; assertNotNull ( org.springframework.web.servlet.config.ScriptTemplateConfigurer ) ; assertEquals ( STRING , org.springframework.web.servlet.config.ScriptTemplateConfigurer . getRenderFunction ( ) ) ; assertEquals ( MediaType . TEXT_PLAIN_VALUE , org.springframework.web.servlet.config.ScriptTemplateConfigurer . getContentType ( ) ) ; assertEquals ( java.nio.charset.StandardCharsets . java.nio.charset.Charset , org.springframework.web.servlet.config.ScriptTemplateConfigurer . getCharset ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.ScriptTemplateConfigurer . getResourceLoaderPath ( ) ) ; assertFalse ( org.springframework.web.servlet.config.ScriptTemplateConfigurer . isSharedEngine ( ) ) ; java.lang.String [] java.lang.String[] = { STRING } ; org.springframework.web.servlet.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.config.ScriptTemplateConfigurer ) ; assertArrayEquals ( java.lang.String[] , ( java.lang.String [] ) org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; ViewResolverComposite org.springframework.web.servlet.config.ViewResolverComposite = this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ViewResolverComposite .class ) ; assertNotNull ( org.springframework.web.servlet.config.ViewResolverComposite ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.ViewResolverComposite . getViewResolvers ( ) . size ( ) ) ; assertEquals ( Ordered . HIGHEST_PRECEDENCE , org.springframework.web.servlet.config.ViewResolverComposite . getOrder ( ) ) ; java.util.List<org.springframework.web.servlet.config.ViewResolver> < ViewResolver > java.util.List<org.springframework.web.servlet.config.ViewResolver> = org.springframework.web.servlet.config.ViewResolverComposite . getViewResolvers ( ) ; assertEquals ( ContentNegotiatingViewResolver .class , java.util.List<org.springframework.web.servlet.config.ViewResolver> . get ( NUMBER ) . getClass ( ) ) ; ContentNegotiatingViewResolver org.springframework.web.servlet.config.ContentNegotiatingViewResolver = ( ContentNegotiatingViewResolver ) java.util.List<org.springframework.web.servlet.config.ViewResolver> . get ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.ContentNegotiatingViewResolver . getViewResolvers ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.ContentNegotiatingViewResolver . getDefaultViews ( ) . size ( ) ) ; assertTrue ( org.springframework.web.servlet.config.ContentNegotiatingViewResolver . isUseNotAcceptableStatusCode ( ) ) ; java.lang.String java.lang.String = STRING ; DirectFieldAccessor org.springframework.web.servlet.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.config.ContentNegotiatingViewResolver ) ; ContentNegotiationManager org.springframework.web.servlet.config.ContentNegotiationManager = ( ContentNegotiationManager ) org.springframework.web.servlet.config.DirectFieldAccessor . getPropertyValue ( java.lang.String ) ; assertNotNull ( org.springframework.web.servlet.config.ContentNegotiationManager ) ; assertSame ( org.springframework.web.servlet.config.ContentNegotiationManager , this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ContentNegotiationManager .class ) ) ; assertSame ( org.springframework.web.servlet.config.ContentNegotiationManager , this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; ViewResolverComposite org.springframework.web.servlet.config.ViewResolverComposite = this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ViewResolverComposite .class ) ; assertNotNull ( org.springframework.web.servlet.config.ViewResolverComposite ) ; assertEquals ( STRING + org.springframework.web.servlet.config.ViewResolverComposite . getViewResolvers ( ) , NUMBER , org.springframework.web.servlet.config.ViewResolverComposite . getViewResolvers ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.ViewResolverComposite . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; RequestMappingHandlerMapping org.springframework.web.servlet.config.RequestMappingHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.RequestMappingHandlerMapping ) ; assertEquals ( org.springframework.web.servlet.config.MvcNamespaceTests.TestPathHelper .class , org.springframework.web.servlet.config.RequestMappingHandlerMapping . getUrlPathHelper ( ) . getClass ( ) ) ; assertEquals ( org.springframework.web.servlet.config.MvcNamespaceTests.TestPathMatcher .class , org.springframework.web.servlet.config.RequestMappingHandlerMapping . getPathMatcher ( ) . getClass ( ) ) ; SimpleUrlHandlerMapping org.springframework.web.servlet.config.SimpleUrlHandlerMapping = org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( java.lang.String , SimpleUrlHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.SimpleUrlHandlerMapping ) ; assertEquals ( org.springframework.web.servlet.config.MvcNamespaceTests.TestPathHelper .class , org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getUrlPathHelper ( ) . getClass ( ) ) ; assertEquals ( org.springframework.web.servlet.config.MvcNamespaceTests.TestPathMatcher .class , org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getPathMatcher ( ) . getClass ( ) ) ; for ( SimpleUrlHandlerMapping org.springframework.web.servlet.config.SimpleUrlHandlerMapping : org.springframework.web.servlet.config.GenericWebApplicationContext . getBeansOfType ( SimpleUrlHandlerMapping .class ) . values ( ) ) { assertNotNull ( org.springframework.web.servlet.config.SimpleUrlHandlerMapping ) ; assertEquals ( org.springframework.web.servlet.config.MvcNamespaceTests.TestPathHelper .class , org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getUrlPathHelper ( ) . getClass ( ) ) ; assertEquals ( org.springframework.web.servlet.config.MvcNamespaceTests.TestPathMatcher .class , org.springframework.web.servlet.config.SimpleUrlHandlerMapping . getPathMatcher ( ) . getClass ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; java.lang.String [] java.lang.String[] = org.springframework.web.servlet.config.GenericWebApplicationContext . getBeanNamesForType ( AbstractHandlerMapping .class ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { AbstractHandlerMapping org.springframework.web.servlet.config.AbstractHandlerMapping = ( AbstractHandlerMapping ) org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( java.lang.String ) ; assertNotNull ( org.springframework.web.servlet.config.AbstractHandlerMapping ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> < java.lang.String , CorsConfiguration > java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> = org.springframework.web.servlet.config.AbstractHandlerMapping . getCorsConfigurations ( ) ; assertNotNull ( java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> . size ( ) ) ; CorsConfiguration org.springframework.web.servlet.config.CorsConfiguration = java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> . get ( STRING ) ; assertNotNull ( org.springframework.web.servlet.config.CorsConfiguration ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.config.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING , STRING } , org.springframework.web.servlet.config.CorsConfiguration . getAllowedMethods ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.config.CorsConfiguration . getAllowedHeaders ( ) . toArray ( ) ) ; assertNull ( org.springframework.web.servlet.config.CorsConfiguration . getExposedHeaders ( ) ) ; assertTrue ( org.springframework.web.servlet.config.CorsConfiguration . getAllowCredentials ( ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.web.servlet.config.CorsConfiguration . getMaxAge ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; java.lang.String [] java.lang.String[] = org.springframework.web.servlet.config.GenericWebApplicationContext . getBeanNamesForType ( AbstractHandlerMapping .class ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { AbstractHandlerMapping org.springframework.web.servlet.config.AbstractHandlerMapping = ( AbstractHandlerMapping ) org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( java.lang.String ) ; assertNotNull ( org.springframework.web.servlet.config.AbstractHandlerMapping ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> < java.lang.String , CorsConfiguration > java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> = org.springframework.web.servlet.config.AbstractHandlerMapping . getCorsConfigurations ( ) ; assertNotNull ( java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> . size ( ) ) ; CorsConfiguration org.springframework.web.servlet.config.CorsConfiguration = java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> . get ( STRING ) ; assertNotNull ( org.springframework.web.servlet.config.CorsConfiguration ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.web.servlet.config.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.web.servlet.config.CorsConfiguration . getAllowedMethods ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING , STRING } , org.springframework.web.servlet.config.CorsConfiguration . getAllowedHeaders ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.web.servlet.config.CorsConfiguration . getExposedHeaders ( ) . toArray ( ) ) ; assertFalse ( org.springframework.web.servlet.config.CorsConfiguration . getAllowCredentials ( ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.web.servlet.config.CorsConfiguration . getMaxAge ( ) ) ; org.springframework.web.servlet.config.CorsConfiguration = java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> . get ( STRING ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.config.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING , STRING } , org.springframework.web.servlet.config.CorsConfiguration . getAllowedMethods ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.config.CorsConfiguration . getAllowedHeaders ( ) . toArray ( ) ) ; assertNull ( org.springframework.web.servlet.config.CorsConfiguration . getExposedHeaders ( ) ) ; assertTrue ( org.springframework.web.servlet.config.CorsConfiguration . getAllowCredentials ( ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.web.servlet.config.CorsConfiguration . getMaxAge ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , int int ) { XmlBeanDefinitionReader org.springframework.web.servlet.config.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.web.servlet.config.GenericWebApplicationContext ) ; ClassPathResource org.springframework.web.servlet.config.ClassPathResource = new ClassPathResource ( java.lang.String , AnnotationDrivenBeanDefinitionParserTests .class ) ; org.springframework.web.servlet.config.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.web.servlet.config.ClassPathResource ) ; java.lang.String java.lang.String = java.util.Arrays . java.lang.String ( this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBeanDefinitionNames ( ) ) ; assertEquals ( STRING + java.lang.String , int , org.springframework.web.servlet.config.GenericWebApplicationContext . getBeanDefinitionCount ( ) ) ; org.springframework.web.servlet.config.GenericWebApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping public void void ( @ RequestParam @ org.springframework.web.servlet.config.MvcNamespaceTests.IsoDate java.util.Date java.util.Date , @ RequestParam ( required = false ) @ org.springframework.web.servlet.config.MvcNamespaceTests.PercentNumber java.lang.Double java.lang.Double , @ org.springframework.web.servlet.config.MvcNamespaceTests.MyValid org.springframework.web.servlet.config.MvcNamespaceTests.TestBean org.springframework.web.servlet.config.MvcNamespaceTests.TestBean , BindingResult org.springframework.web.servlet.config.BindingResult ) { this . java.util.Date = java.util.Date ; this . java.lang.Double = java.lang.Double ; this . boolean = ( org.springframework.web.servlet.config.BindingResult . getErrorCount ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.web.servlet.config.Errors ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.config.RequestDispatcher org.springframework.web.servlet.config.RequestDispatcher ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { return new MockRequestDispatcher ( STRING ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.lang.String . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Comparator<java.lang.String> < java.lang.String > java.util.Comparator<java.lang.String> ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.config.Cache org.springframework.web.servlet.config.Cache ( java.lang.String java.lang.String ) { return new ConcurrentMapCache ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return null ; }  <METHOD_END>
