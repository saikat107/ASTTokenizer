<METHOD_START> public void ( java.lang.Iterable<? extends org.springframework.data.repository.config.TypeFilter> < ? extends TypeFilter > java.lang.Iterable<? extends org.springframework.data.repository.config.TypeFilter> ) { super( false ); void ( ) ; Assert . notNull ( java.lang.Iterable<> , STRING ) ; if ( java.lang.Iterable<> . java.util.Iterator<> ( ) . boolean ( ) ) { for ( TypeFilter org.springframework.data.repository.config.TypeFilter : java.lang.Iterable<> ) { void ( org.springframework.data.repository.config.TypeFilter ) ; } } else { super. addIncludeFilter ( new org.springframework.data.repository.config.RepositoryComponentProvider.InterfaceTypeFilter ( Repository .class ) ) ; super. addIncludeFilter ( new AnnotationTypeFilter ( RepositoryDefinition .class , true , true ) ) ; } addExcludeFilter ( new AnnotationTypeFilter ( NoRepositoryBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TypeFilter org.springframework.data.repository.config.TypeFilter ) { java.util.List<org.springframework.data.repository.config.TypeFilter> < TypeFilter > java.util.List<org.springframework.data.repository.config.TypeFilter> = new java.util.ArrayList<org.springframework.data.repository.config.TypeFilter> <> ( NUMBER ) ; java.util.List<org.springframework.data.repository.config.TypeFilter> . add ( org.springframework.data.repository.config.TypeFilter ) ; java.util.List<org.springframework.data.repository.config.TypeFilter> . add ( new org.springframework.data.repository.config.RepositoryComponentProvider.InterfaceTypeFilter ( Repository .class ) ) ; super. addIncludeFilter ( new org.springframework.data.repository.config.RepositoryComponentProvider.AllTypeFilter ( java.util.List<org.springframework.data.repository.config.TypeFilter> ) ) ; java.util.List<org.springframework.data.repository.config.TypeFilter> < TypeFilter > java.util.List<org.springframework.data.repository.config.TypeFilter> = new java.util.ArrayList<org.springframework.data.repository.config.TypeFilter> <> ( NUMBER ) ; java.util.List<org.springframework.data.repository.config.TypeFilter> . add ( org.springframework.data.repository.config.TypeFilter ) ; java.util.List<org.springframework.data.repository.config.TypeFilter> . add ( new AnnotationTypeFilter ( RepositoryDefinition .class , true , true ) ) ; super. addIncludeFilter ( new org.springframework.data.repository.config.RepositoryComponentProvider.AllTypeFilter ( java.util.List<org.springframework.data.repository.config.TypeFilter> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( AnnotatedBeanDefinition org.springframework.data.repository.config.AnnotatedBeanDefinition ) { boolean boolean = ! ClassUtils . isGenericRepositoryInterface ( org.springframework.data.repository.config.AnnotatedBeanDefinition . getBeanClassName ( ) ) ; boolean boolean = ! org.springframework.data.repository.config.AnnotatedBeanDefinition . getMetadata ( ) . hasEnclosingClass ( ) ; boolean boolean = boolean ( ) ; return boolean && ( boolean || boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.data.repository.config.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.data.repository.config.BeanDefinition> ( java.lang.String java.lang.String ) { java.util.Set<org.springframework.data.repository.config.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.data.repository.config.BeanDefinition> = super. findCandidateComponents ( java.lang.String ) ; for ( BeanDefinition org.springframework.data.repository.config.BeanDefinition : java.util.Set<org.springframework.data.repository.config.BeanDefinition> ) { if ( org.springframework.data.repository.config.BeanDefinition instanceof AnnotatedBeanDefinition ) { AnnotationConfigUtils . processCommonDefinitionAnnotations ( ( AnnotatedBeanDefinition ) org.springframework.data.repository.config.BeanDefinition ) ; } } return java.util.Set<org.springframework.data.repository.config.BeanDefinition> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> private static void void ( ) { try { AnnotationConfigUtils .class . java.lang.reflect.Method ( STRING , AnnotatedBeanDefinition .class ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( java.lang.String , AnnotationConfigUtils .class . java.security.ProtectionDomain ( ) . java.security.CodeSource ( ) . java.net.URL ( ) ) , java.lang.NoSuchMethodException ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { super( java.lang.Class<> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MetadataReader org.springframework.data.repository.config.MetadataReader , MetadataReaderFactory org.springframework.data.repository.config.MetadataReaderFactory ) throws java.io.IOException { return org.springframework.data.repository.config.MetadataReader . getClassMetadata ( ) . isInterface ( ) && super. match ( org.springframework.data.repository.config.MetadataReader , org.springframework.data.repository.config.MetadataReaderFactory ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.data.repository.config.TypeFilter> < TypeFilter > java.util.List<org.springframework.data.repository.config.TypeFilter> ) { Assert . notNull ( java.util.List<org.springframework.data.repository.config.TypeFilter> , STRING ) ; this . java.util.List<org.springframework.data.repository.config.TypeFilter> = java.util.List<org.springframework.data.repository.config.TypeFilter> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( MetadataReader org.springframework.data.repository.config.MetadataReader , MetadataReaderFactory org.springframework.data.repository.config.MetadataReaderFactory ) throws java.io.IOException { for ( TypeFilter org.springframework.data.repository.config.TypeFilter : java.util.List<org.springframework.data.repository.config.TypeFilter> ) { if ( ! org.springframework.data.repository.config.TypeFilter . match ( org.springframework.data.repository.config.MetadataReader , org.springframework.data.repository.config.MetadataReaderFactory ) ) { return false ; } } return true ; }  <METHOD_END>
