<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.RejectedExecutionHandler java.util.concurrent.RejectedExecutionHandler ) { this . java.util.concurrent.RejectedExecutionHandler = java.util.concurrent.RejectedExecutionHandler ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.scheduling.config.ThreadPoolTaskExecutor = new ThreadPoolTaskExecutor ( ) ; void ( ) ; if ( this . java.lang.Integer != null ) { this . org.springframework.scheduling.config.ThreadPoolTaskExecutor . setQueueCapacity ( this . java.lang.Integer ) ; } if ( this . java.lang.Integer != null ) { this . org.springframework.scheduling.config.ThreadPoolTaskExecutor . setKeepAliveSeconds ( this . java.lang.Integer ) ; } if ( this . java.util.concurrent.RejectedExecutionHandler != null ) { this . org.springframework.scheduling.config.ThreadPoolTaskExecutor . setRejectedExecutionHandler ( this . java.util.concurrent.RejectedExecutionHandler ) ; } if ( this . java.lang.String != null ) { this . org.springframework.scheduling.config.ThreadPoolTaskExecutor . setThreadNamePrefix ( this . java.lang.String + STRING ) ; } this . org.springframework.scheduling.config.ThreadPoolTaskExecutor . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( StringUtils . hasText ( this . java.lang.String ) ) { try { int int ; int int ; int int = this . java.lang.String . int ( '-' ) ; if ( int != - NUMBER ) { int = java.lang.Integer . java.lang.Integer ( this . java.lang.String . java.lang.String ( NUMBER , int ) ) ; int = java.lang.Integer . java.lang.Integer ( this . java.lang.String . java.lang.String ( int + NUMBER , this . java.lang.String . int ( ) ) ) ; if ( int > int ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( this . java.lang.Integer == null ) { if ( int == NUMBER ) { this . org.springframework.scheduling.config.ThreadPoolTaskExecutor . setAllowCoreThreadTimeOut ( true ) ; int = int ; } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } } } else { java.lang.Integer java.lang.Integer = java.lang.Integer . java.lang.Integer ( this . java.lang.String ) ; int = java.lang.Integer ; int = java.lang.Integer ; } this . org.springframework.scheduling.config.ThreadPoolTaskExecutor . setCorePoolSize ( int ) ; this . org.springframework.scheduling.config.ThreadPoolTaskExecutor . setMaxPoolSize ( int ) ; } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { throw new java.lang.IllegalArgumentException ( STRING + this . java.lang.String + STRING + STRING , java.lang.NumberFormatException ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.scheduling.config.TaskExecutor org.springframework.scheduling.config.TaskExecutor ( ) { return this . org.springframework.scheduling.config.ThreadPoolTaskExecutor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends org.springframework.scheduling.config.TaskExecutor> < ? extends TaskExecutor > java.lang.Class<? extends org.springframework.scheduling.config.TaskExecutor> ( ) { return ( this . org.springframework.scheduling.config.ThreadPoolTaskExecutor != null ? this . org.springframework.scheduling.config.ThreadPoolTaskExecutor . getClass ( ) : ThreadPoolTaskExecutor .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.scheduling.config.ThreadPoolTaskExecutor . destroy ( ) ; }  <METHOD_END>
