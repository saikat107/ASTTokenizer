<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; java.util.concurrent.Callable<java.lang.String> < java.lang.String > java.util.concurrent.Callable<java.lang.String> = new java.util.concurrent.Callable<java.lang.String> < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { return java.lang.String ; } } ; ListenableFutureTask < java.lang.String > org.springframework.util.concurrent.ListenableFutureTask<java.lang.String> = new ListenableFutureTask <> ( java.util.concurrent.Callable<java.lang.String> ) ; org.springframework.util.concurrent.ListenableFutureTask<java.lang.String> . addCallback ( new ListenableFutureCallback < java.lang.String > ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) { assertEquals ( java.lang.String , java.lang.String ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; } } ) ; org.springframework.util.concurrent.ListenableFutureTask<java.lang.String> . run ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; java.util.concurrent.Callable<java.lang.String> < java.lang.String > java.util.concurrent.Callable<java.lang.String> = new java.util.concurrent.Callable<java.lang.String> < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { throw new java.io.IOException ( java.lang.String ) ; } } ; ListenableFutureTask < java.lang.String > org.springframework.util.concurrent.ListenableFutureTask<java.lang.String> = new ListenableFutureTask <> ( java.util.concurrent.Callable<java.lang.String> ) ; org.springframework.util.concurrent.ListenableFutureTask<java.lang.String> . addCallback ( new ListenableFutureCallback < java.lang.String > ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) { fail ( STRING ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { assertEquals ( java.lang.String , java.lang.Throwable . java.lang.String ( ) ) ; } } ) ; org.springframework.util.concurrent.ListenableFutureTask<java.lang.String> . run ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { throw new java.io.IOException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { assertEquals ( java.lang.String , java.lang.Throwable . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; java.util.concurrent.Callable<java.lang.String> < java.lang.String > java.util.concurrent.Callable<java.lang.String> = ( ) java.lang.String ; SuccessCallback < java.lang.String > org.springframework.util.concurrent.SuccessCallback<java.lang.String> = mock ( SuccessCallback .class ) ; FailureCallback org.springframework.util.concurrent.FailureCallback = mock ( FailureCallback .class ) ; ListenableFutureTask < java.lang.String > org.springframework.util.concurrent.ListenableFutureTask<java.lang.String> = new ListenableFutureTask <> ( java.util.concurrent.Callable<java.lang.String> ) ; org.springframework.util.concurrent.ListenableFutureTask<java.lang.String> . addCallback ( org.springframework.util.concurrent.SuccessCallback<java.lang.String> , org.springframework.util.concurrent.FailureCallback ) ; org.springframework.util.concurrent.ListenableFutureTask<java.lang.String> . run ( ) ; verify ( org.springframework.util.concurrent.SuccessCallback<java.lang.String> ) . onSuccess ( java.lang.String ) ; verifyZeroInteractions ( org.springframework.util.concurrent.FailureCallback ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; java.io.IOException java.io.IOException = new java.io.IOException ( java.lang.String ) ; java.util.concurrent.Callable<java.lang.String> < java.lang.String > java.util.concurrent.Callable<java.lang.String> = ( ) { throw java.io.IOException ; } ; SuccessCallback < java.lang.String > org.springframework.util.concurrent.SuccessCallback<java.lang.String> = mock ( SuccessCallback .class ) ; FailureCallback org.springframework.util.concurrent.FailureCallback = mock ( FailureCallback .class ) ; ListenableFutureTask < java.lang.String > org.springframework.util.concurrent.ListenableFutureTask<java.lang.String> = new ListenableFutureTask <> ( java.util.concurrent.Callable<java.lang.String> ) ; org.springframework.util.concurrent.ListenableFutureTask<java.lang.String> . addCallback ( org.springframework.util.concurrent.SuccessCallback<java.lang.String> , org.springframework.util.concurrent.FailureCallback ) ; org.springframework.util.concurrent.ListenableFutureTask<java.lang.String> . run ( ) ; verify ( org.springframework.util.concurrent.FailureCallback ) . onFailure ( java.io.IOException ) ; verifyZeroInteractions ( org.springframework.util.concurrent.SuccessCallback<java.lang.String> ) ; }  <METHOD_END>
