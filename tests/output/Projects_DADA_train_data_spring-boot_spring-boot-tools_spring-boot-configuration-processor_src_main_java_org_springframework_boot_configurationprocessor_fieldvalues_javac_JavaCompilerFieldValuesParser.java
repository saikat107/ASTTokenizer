<METHOD_START> public void ( javax.annotation.processing.ProcessingEnvironment javax.annotation.processing.ProcessingEnvironment ) throws java.lang.Exception { this . org.springframework.boot.configurationprocessor.fieldvalues.javac.Trees = Trees . instance ( javax.annotation.processing.ProcessingEnvironment ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( javax.lang.model.element.TypeElement javax.lang.model.element.TypeElement ) throws java.lang.Exception { Tree org.springframework.boot.configurationprocessor.fieldvalues.javac.Tree = this . org.springframework.boot.configurationprocessor.fieldvalues.javac.Trees . getTree ( javax.lang.model.element.TypeElement ) ; if ( org.springframework.boot.configurationprocessor.fieldvalues.javac.Tree != null ) { org.springframework.boot.configurationprocessor.fieldvalues.javac.JavaCompilerFieldValuesParser.FieldCollector org.springframework.boot.configurationprocessor.fieldvalues.javac.JavaCompilerFieldValuesParser.FieldCollector = new org.springframework.boot.configurationprocessor.fieldvalues.javac.JavaCompilerFieldValuesParser.FieldCollector ( ) ; org.springframework.boot.configurationprocessor.fieldvalues.javac.Tree . accept ( org.springframework.boot.configurationprocessor.fieldvalues.javac.JavaCompilerFieldValuesParser.FieldCollector ) ; return org.springframework.boot.configurationprocessor.fieldvalues.javac.JavaCompilerFieldValuesParser.FieldCollector . java.util.Map<java.lang.String,java.lang.Object> ( ) ; } return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( VariableTree org.springframework.boot.configurationprocessor.fieldvalues.javac.VariableTree ) throws java.lang.Exception { java.util.Set<javax.lang.model.element.Modifier> < javax.lang.model.element.Modifier > java.util.Set<javax.lang.model.element.Modifier> = org.springframework.boot.configurationprocessor.fieldvalues.javac.VariableTree . getModifierFlags ( ) ; if ( java.util.Set<javax.lang.model.element.Modifier> . boolean ( javax.lang.model.element.Modifier . javax.lang.model.element.Modifier ) && java.util.Set<javax.lang.model.element.Modifier> . boolean ( javax.lang.model.element.Modifier . javax.lang.model.element.Modifier ) ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.boot.configurationprocessor.fieldvalues.javac.VariableTree . getName ( ) , java.lang.Object ( org.springframework.boot.configurationprocessor.fieldvalues.javac.VariableTree ) ) ; } if ( ! java.util.Set<javax.lang.model.element.Modifier> . boolean ( javax.lang.model.element.Modifier . javax.lang.model.element.Modifier ) ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.boot.configurationprocessor.fieldvalues.javac.VariableTree . getName ( ) , java.lang.Object ( org.springframework.boot.configurationprocessor.fieldvalues.javac.VariableTree ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( VariableTree org.springframework.boot.configurationprocessor.fieldvalues.javac.VariableTree ) throws java.lang.Exception { ExpressionTree org.springframework.boot.configurationprocessor.fieldvalues.javac.ExpressionTree = org.springframework.boot.configurationprocessor.fieldvalues.javac.VariableTree . getInitializer ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.util.Map<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( org.springframework.boot.configurationprocessor.fieldvalues.javac.VariableTree . getType ( ) ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.Class<?>,java.lang.Object> . java.lang.Object ( java.lang.Class<> ) ; if ( org.springframework.boot.configurationprocessor.fieldvalues.javac.ExpressionTree != null ) { return java.lang.Object ( org.springframework.boot.configurationprocessor.fieldvalues.javac.ExpressionTree , java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( ExpressionTree org.springframework.boot.configurationprocessor.fieldvalues.javac.ExpressionTree , java.lang.Object java.lang.Object )				throws java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.boot.configurationprocessor.fieldvalues.javac.ExpressionTree . getLiteralValue ( ) ; if ( java.lang.Object != null ) { return java.lang.Object ; } java.lang.Object java.lang.Object = org.springframework.boot.configurationprocessor.fieldvalues.javac.ExpressionTree . getFactoryValue ( ) ; if ( java.lang.Object != null ) { return java.lang.Object ; } java.util.List<? extends org.springframework.boot.configurationprocessor.fieldvalues.javac.ExpressionTree> < ? extends ExpressionTree > java.util.List<? extends org.springframework.boot.configurationprocessor.fieldvalues.javac.ExpressionTree> = org.springframework.boot.configurationprocessor.fieldvalues.javac.ExpressionTree . getArrayExpression ( ) ; if ( java.util.List<> != null ) { java.lang.Object [] java.lang.Object[] = new java.lang.Object [ java.util.List<> . int ( ) ] ; for ( int int = NUMBER ; int < java.util.List<> . int ( ) ; int ++ ) { java.lang.Object java.lang.Object = java.lang.Object ( java.util.List<> . get ( int ) , null ) ; if ( java.lang.Object == null ) { return java.lang.Object ; } java.lang.Object[] [ int ] = java.lang.Object ; } return java.lang.Object[] ; } if ( org.springframework.boot.configurationprocessor.fieldvalues.javac.ExpressionTree . getKind ( ) . equals ( STRING ) ) { return this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.boot.configurationprocessor.fieldvalues.javac.ExpressionTree . toString ( ) ) ; } if ( org.springframework.boot.configurationprocessor.fieldvalues.javac.ExpressionTree . getKind ( ) . equals ( STRING ) ) { return java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.boot.configurationprocessor.fieldvalues.javac.ExpressionTree . toString ( ) ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
