<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { int = findAvailablePort ( ) ; org.springframework.data.gemfire.function.execution.ProcessWrapper = run ( FunctionCacheServerProcess .class , java.lang.String . java.lang.String ( STRING , GEMFIRE_CACHE_SERVER_PORT_PROPERTY , int ) ) ; waitForServerToStart ( DEFAULT_HOSTNAME , int ) ; java.lang.System . java.lang.String ( GEMFIRE_CACHE_SERVER_PORT_PROPERTY , java.lang.String . java.lang.String ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { java.lang.System . java.lang.String ( GEMFIRE_CACHE_SERVER_PORT_PROPERTY ) ; stop ( org.springframework.data.gemfire.function.execution.ProcessWrapper ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.function.execution.ClientCache = new ClientCacheFactory ( ) . set ( STRING , STRING ) . set ( STRING , STRING ) . setPoolSubscriptionEnabled ( true ) . addPoolServer ( STRING , int ) . create ( ) ; org.springframework.data.gemfire.function.execution.Pool = PoolManager . find ( STRING ) ; org.springframework.data.gemfire.function.execution.Region<java.lang.String,java.lang.String> = org.springframework.data.gemfire.function.execution.ClientCache .< java.lang.String , java.lang.String > createClientRegionFactory ( ClientRegionShortcut . PROXY ) . create ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( org.springframework.data.gemfire.function.execution.ClientCache != null ) { try { org.springframework.data.gemfire.function.execution.ClientCache . close ( ) ; } catch ( CacheClosedException org.springframework.data.gemfire.function.execution.CacheClosedException ) {			} } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new PoolServerFunctionExecution ( org.springframework.data.gemfire.function.execution.Pool ) ) ; void ( new RegionFunctionExecution ( org.springframework.data.gemfire.function.execution.Region<java.lang.String,java.lang.String> ) ) ; void ( new ServerFunctionExecution ( org.springframework.data.gemfire.function.execution.ClientCache ) ) ; void ( new ServersFunctionExecution ( org.springframework.data.gemfire.function.execution.ClientCache ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractFunctionExecution org.springframework.data.gemfire.function.execution.AbstractFunctionExecution ) { java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = org.springframework.data.gemfire.function.execution.AbstractFunctionExecution . setArgs ( STRING , STRING , STRING ) . setFunctionId ( STRING ) . execute ( ) ; int int = NUMBER ; for ( java.lang.String java.lang.String : java.lang.Iterable<java.lang.String> ) { assertThat ( java.lang.String ) . isEqualTo ( java.lang.String . java.lang.String ( int ++ ) ) ; } }  <METHOD_END>
