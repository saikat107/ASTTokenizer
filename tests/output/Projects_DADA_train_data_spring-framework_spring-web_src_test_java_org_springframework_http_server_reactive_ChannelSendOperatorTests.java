<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter = new org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter ( ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( Publisher < java.lang.String > org.springframework.http.server.reactive.Publisher<java.lang.String> ) { return new ChannelSendOperator <> ( org.springframework.http.server.reactive.Publisher<java.lang.String> , org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter :: org.springframework.http.server.reactive.Publisher<java.lang.Void> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.IllegalStateException java.lang.IllegalStateException = new java.lang.IllegalStateException ( STRING ) ; Mono < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> = Mono .< java.lang.String > error ( java.lang.IllegalStateException ) . as ( this :: sendOperator ) ; Signal < java.lang.Void > org.springframework.http.server.reactive.Signal<java.lang.Void> = org.springframework.http.server.reactive.Mono<java.lang.Void> . materialize ( ) . block ( ) ; assertNotNull ( org.springframework.http.server.reactive.Signal<java.lang.Void> ) ; assertSame ( STRING + org.springframework.http.server.reactive.Signal<java.lang.Void> , java.lang.IllegalStateException , org.springframework.http.server.reactive.Signal<java.lang.Void> . getThrowable ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mono < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> = Flux .< java.lang.String > empty ( ) . as ( this :: sendOperator ) ; Signal < java.lang.Void > org.springframework.http.server.reactive.Signal<java.lang.Void> = org.springframework.http.server.reactive.Mono<java.lang.Void> . materialize ( ) . block ( ) ; assertNotNull ( org.springframework.http.server.reactive.Signal<java.lang.Void> ) ; assertTrue ( STRING + org.springframework.http.server.reactive.Signal<java.lang.Void> , org.springframework.http.server.reactive.Signal<java.lang.Void> . isOnComplete ( ) ) ; assertEquals ( NUMBER , this . org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter . java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( this . org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mono < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> = Flux . just ( STRING ) . as ( this :: sendOperator ) ; Signal < java.lang.Void > org.springframework.http.server.reactive.Signal<java.lang.Void> = org.springframework.http.server.reactive.Mono<java.lang.Void> . materialize ( ) . block ( ) ; assertNotNull ( org.springframework.http.server.reactive.Signal<java.lang.Void> ) ; assertTrue ( STRING + org.springframework.http.server.reactive.Signal<java.lang.Void> , org.springframework.http.server.reactive.Signal<java.lang.Void> . isOnComplete ( ) ) ; assertEquals ( NUMBER , this . org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter . java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , this . org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter . java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertTrue ( this . org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; Mono < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> = Flux . fromIterable ( java.util.List<java.lang.String> ) . as ( this :: sendOperator ) ; Signal < java.lang.Void > org.springframework.http.server.reactive.Signal<java.lang.Void> = org.springframework.http.server.reactive.Mono<java.lang.Void> . materialize ( ) . block ( ) ; assertNotNull ( org.springframework.http.server.reactive.Signal<java.lang.Void> ) ; assertTrue ( STRING + org.springframework.http.server.reactive.Signal<java.lang.Void> , org.springframework.http.server.reactive.Signal<java.lang.Void> . isOnComplete ( ) ) ; assertEquals ( NUMBER , this . org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter . java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , this . org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter . java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , this . org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter . java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , this . org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter . java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertTrue ( this . org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.IllegalStateException java.lang.IllegalStateException = new java.lang.IllegalStateException ( STRING ) ; Flux < java.lang.String > org.springframework.http.server.reactive.Flux<java.lang.String> = Flux . generate ( ( ) NUMBER , ( idx , subscriber ) -> { int i = ++ idx ; subscriber . next ( String . valueOf ( i ) ) ; if ( i == NUMBER ) { subscriber . error ( error ) ; } return i ; } ) ; Mono < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> = org.springframework.http.server.reactive.Flux<java.lang.String> . as ( this :: sendOperator ) ; Signal < java.lang.Void > org.springframework.http.server.reactive.Signal<java.lang.Void> = org.springframework.http.server.reactive.Mono<java.lang.Void> . materialize ( ) . block ( ) ; assertNotNull ( org.springframework.http.server.reactive.Signal<java.lang.Void> ) ; assertSame ( STRING + org.springframework.http.server.reactive.Signal<java.lang.Void> , java.lang.IllegalStateException , org.springframework.http.server.reactive.Signal<java.lang.Void> . getThrowable ( ) ) ; assertEquals ( NUMBER , this . org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter . java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , this . org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter . java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , this . org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter . java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , this . org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter . java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertSame ( java.lang.IllegalStateException , this . org.springframework.http.server.reactive.ChannelSendOperatorTests.OneByOneAsyncWriter . java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.server.reactive.Publisher<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Publisher<java.lang.Void> ( Publisher < java.lang.String > org.springframework.http.server.reactive.Publisher<java.lang.String> ) { return subscriber -> { Executors . newSingleThreadScheduledExecutor ( ) . schedule ( ( ) publisher . subscribe ( new WriteSubscriber ( subscriber ) ) , NUMBER , TimeUnit . MILLISECONDS ) ; } ; }  <METHOD_END>
<METHOD_START> public void ( Subscriber < ? super java.lang.Void > org.springframework.http.server.reactive.Subscriber<? super java.lang.Void> ) { super( org.springframework.http.server.reactive.Subscriber<> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Subscription org.springframework.http.server.reactive.Subscription ) { org.springframework.http.server.reactive.Subscription . request ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; this . subscription . request ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { java.lang.Throwable = java.lang.Throwable ; this . subscriber . onError ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { boolean = true ; this . subscriber . onComplete ( ) ; }  <METHOD_END>
