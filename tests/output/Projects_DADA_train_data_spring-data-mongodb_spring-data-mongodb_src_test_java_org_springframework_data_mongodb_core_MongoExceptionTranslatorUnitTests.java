<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.core.MongoExceptionTranslator = new MongoExceptionTranslator ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.mongodb.core.MongoExceptionTranslator . translateExceptionIfPossible ( new com . com.mongodb . com.mongodb ( new BsonDocument ( ) , new ServerAddress ( ) , null ) ) , DuplicateKeyException .class , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.mongodb.core.MongoExceptionTranslator . translateExceptionIfPossible ( new MongoSocketException ( STRING , new ServerAddress ( ) ) ) , DataAccessResourceFailureException .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.UnknownHostException { void ( org.springframework.data.mongodb.core.MongoExceptionTranslator . translateExceptionIfPossible ( new MongoCursorNotFoundException ( NUMBER , new ServerAddress ( ) ) ) , DataAccessResourceFailureException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( DuplicateKeyException .class , NUMBER ) ; void ( DuplicateKeyException .class , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( DataAccessResourceFailureException .class , NUMBER ) ; void ( DataAccessResourceFailureException .class , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( InvalidDataAccessApiUsageException .class , NUMBER ) ; void ( InvalidDataAccessApiUsageException .class , NUMBER ) ; void ( InvalidDataAccessApiUsageException .class , NUMBER ) ; void ( InvalidDataAccessApiUsageException .class , NUMBER ) ; void ( InvalidDataAccessApiUsageException .class , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoException org.springframework.data.mongodb.core.MongoException = new MongoException ( NUMBER , STRING ) ; DataAccessException org.springframework.data.mongodb.core.DataAccessException = org.springframework.data.mongodb.core.MongoExceptionTranslator . translateExceptionIfPossible ( org.springframework.data.mongodb.core.MongoException ) ; void ( org.springframework.data.mongodb.core.DataAccessException , UncategorizedMongoDbException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoInternalException org.springframework.data.mongodb.core.MongoInternalException = new MongoInternalException ( STRING ) ; DataAccessException org.springframework.data.mongodb.core.DataAccessException = org.springframework.data.mongodb.core.MongoExceptionTranslator . translateExceptionIfPossible ( org.springframework.data.mongodb.core.MongoInternalException ) ; void ( org.springframework.data.mongodb.core.DataAccessException , InvalidDataAccessResourceUsageException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( ) ; assertThat ( org.springframework.data.mongodb.core.MongoExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<? extends java.lang.Exception> < ? extends java.lang.Exception > java.lang.Class<? extends java.lang.Exception> , int int ) { try { org.springframework.data.mongodb.core.MongoExceptionTranslator . translateExceptionIfPossible ( new MongoException ( int , STRING ) ) ; fail ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } catch ( NestedRuntimeException org.springframework.data.mongodb.core.NestedRuntimeException ) { java.lang.Throwable java.lang.Throwable = org.springframework.data.mongodb.core.NestedRuntimeException . getRootCause ( ) ; assertThat ( java.lang.Throwable , is ( instanceOf ( MongoException .class ) ) ) ; assertThat ( ( ( MongoException ) java.lang.Throwable ) . getCode ( ) , is ( int ) ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( NestedRuntimeException org.springframework.data.mongodb.core.NestedRuntimeException , java.lang.Class<? extends org.springframework.data.mongodb.core.NestedRuntimeException> < ? extends NestedRuntimeException > java.lang.Class<? extends org.springframework.data.mongodb.core.NestedRuntimeException> ) { void ( org.springframework.data.mongodb.core.NestedRuntimeException , java.lang.Class<> , null ) ; }  <METHOD_END>
<METHOD_START> private static void void ( NestedRuntimeException org.springframework.data.mongodb.core.NestedRuntimeException , java.lang.Class<? extends org.springframework.data.mongodb.core.NestedRuntimeException> < ? extends NestedRuntimeException > java.lang.Class<? extends org.springframework.data.mongodb.core.NestedRuntimeException> , java.lang.String java.lang.String ) { assertThat ( org.springframework.data.mongodb.core.NestedRuntimeException , is ( instanceOf ( java.lang.Class<> ) ) ) ; if ( java.lang.String != null ) { assertThat ( org.springframework.data.mongodb.core.NestedRuntimeException . getRootCause ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.NestedRuntimeException . getRootCause ( ) . getMessage ( ) , containsString ( java.lang.String ) ) ; } }  <METHOD_END>
