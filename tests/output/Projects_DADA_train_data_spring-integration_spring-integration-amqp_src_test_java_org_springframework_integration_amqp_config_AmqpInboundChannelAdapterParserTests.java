<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( DirectChannel .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( AmqpInboundChannelAdapter .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertEquals ( java.lang.Integer . int / NUMBER , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Boolean .class ) ) ; assertThat ( TestUtils . getPropertyValue ( java.lang.Object , STRING ) , instanceOf ( SimpleMessageListenerContainer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( AmqpInboundChannelAdapter .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertFalse ( TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Boolean .class ) ) ; assertThat ( TestUtils . getPropertyValue ( java.lang.Object , STRING ) , instanceOf ( DirectMessageListenerContainer .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertEquals ( AcknowledgeMode . NONE , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AmqpInboundChannelAdapter org.springframework.integration.amqp.config.AmqpInboundChannelAdapter = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , AmqpInboundChannelAdapter .class ) ; AbstractMessageListenerContainer org.springframework.integration.amqp.config.AbstractMessageListenerContainer = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpInboundChannelAdapter , STRING , AbstractMessageListenerContainer .class ) ; ChannelAwareMessageListener org.springframework.integration.amqp.config.ChannelAwareMessageListener = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AbstractMessageListenerContainer , STRING , ChannelAwareMessageListener .class ) ; MessageProperties org.springframework.integration.amqp.config.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.config.MessageProperties . setAppId ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setClusterId ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setContentEncoding ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setContentLength ( NUMBER ) ; org.springframework.integration.amqp.config.MessageProperties . setContentType ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setHeader ( STRING , STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setHeader ( STRING , STRING ) ; Message org.springframework.integration.amqp.config.Message = new Message ( STRING . byte[] ( ) , org.springframework.integration.amqp.config.MessageProperties ) ; org.springframework.integration.amqp.config.ChannelAwareMessageListener . onMessage ( org.springframework.integration.amqp.config.Message , null ) ; QueueChannel org.springframework.integration.amqp.config.QueueChannel = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , QueueChannel .class ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > siMessage = org.springframework.integration.amqp.config.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , siMessage . getHeaders ( ) . get ( STRING ) ) ; assertNull ( siMessage . getHeaders ( ) . get ( STRING ) ) ; assertNotNull ( siMessage . getHeaders ( ) . get ( AmqpHeaders . CONTENT_ENCODING ) ) ; assertNotNull ( siMessage . getHeaders ( ) . get ( AmqpHeaders . CLUSTER_ID ) ) ; assertNotNull ( siMessage . getHeaders ( ) . get ( AmqpHeaders . APP_ID ) ) ; assertNotNull ( siMessage . getHeaders ( ) . get ( AmqpHeaders . CONTENT_TYPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AmqpInboundChannelAdapter org.springframework.integration.amqp.config.AmqpInboundChannelAdapter = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , AmqpInboundChannelAdapter .class ) ; AbstractMessageListenerContainer org.springframework.integration.amqp.config.AbstractMessageListenerContainer = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpInboundChannelAdapter , STRING , AbstractMessageListenerContainer .class ) ; ChannelAwareMessageListener org.springframework.integration.amqp.config.ChannelAwareMessageListener = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AbstractMessageListenerContainer , STRING , ChannelAwareMessageListener .class ) ; MessageProperties org.springframework.integration.amqp.config.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.config.MessageProperties . setAppId ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setClusterId ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setContentEncoding ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setContentLength ( NUMBER ) ; org.springframework.integration.amqp.config.MessageProperties . setContentType ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setHeader ( STRING , STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setHeader ( STRING , STRING ) ; Message org.springframework.integration.amqp.config.Message = new Message ( STRING . byte[] ( ) , org.springframework.integration.amqp.config.MessageProperties ) ; org.springframework.integration.amqp.config.ChannelAwareMessageListener . onMessage ( org.springframework.integration.amqp.config.Message , null ) ; QueueChannel org.springframework.integration.amqp.config.QueueChannel = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , QueueChannel .class ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > siMessage = org.springframework.integration.amqp.config.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , siMessage . getHeaders ( ) . get ( STRING ) ) ; assertNull ( siMessage . getHeaders ( ) . get ( STRING ) ) ; assertNull ( siMessage . getHeaders ( ) . get ( AmqpHeaders . CONTENT_ENCODING ) ) ; assertNull ( siMessage . getHeaders ( ) . get ( AmqpHeaders . CLUSTER_ID ) ) ; assertNull ( siMessage . getHeaders ( ) . get ( AmqpHeaders . APP_ID ) ) ; assertNull ( siMessage . getHeaders ( ) . get ( AmqpHeaders . CONTENT_TYPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AmqpInboundChannelAdapter org.springframework.integration.amqp.config.AmqpInboundChannelAdapter = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , AmqpInboundChannelAdapter .class ) ; AbstractMessageListenerContainer org.springframework.integration.amqp.config.AbstractMessageListenerContainer = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpInboundChannelAdapter , STRING , AbstractMessageListenerContainer .class ) ; ChannelAwareMessageListener org.springframework.integration.amqp.config.ChannelAwareMessageListener = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AbstractMessageListenerContainer , STRING , ChannelAwareMessageListener .class ) ; MessageProperties org.springframework.integration.amqp.config.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.config.MessageProperties . setAppId ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setClusterId ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setContentEncoding ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setContentLength ( NUMBER ) ; org.springframework.integration.amqp.config.MessageProperties . setContentType ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setHeader ( STRING , STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setHeader ( STRING , STRING ) ; Message org.springframework.integration.amqp.config.Message = new Message ( STRING . byte[] ( ) , org.springframework.integration.amqp.config.MessageProperties ) ; org.springframework.integration.amqp.config.ChannelAwareMessageListener . onMessage ( org.springframework.integration.amqp.config.Message , null ) ; QueueChannel org.springframework.integration.amqp.config.QueueChannel = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , QueueChannel .class ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > siMessage = org.springframework.integration.amqp.config.QueueChannel . receive ( NUMBER ) ; assertNull ( siMessage . getHeaders ( ) . get ( STRING ) ) ; assertNull ( siMessage . getHeaders ( ) . get ( STRING ) ) ; assertNull ( siMessage . getHeaders ( ) . get ( AmqpHeaders . CONTENT_ENCODING ) ) ; assertNull ( siMessage . getHeaders ( ) . get ( AmqpHeaders . CLUSTER_ID ) ) ; assertNull ( siMessage . getHeaders ( ) . get ( AmqpHeaders . APP_ID ) ) ; assertNull ( siMessage . getHeaders ( ) . get ( AmqpHeaders . CONTENT_TYPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AmqpInboundChannelAdapter org.springframework.integration.amqp.config.AmqpInboundChannelAdapter = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , AmqpInboundChannelAdapter .class ) ; AbstractMessageListenerContainer org.springframework.integration.amqp.config.AbstractMessageListenerContainer = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpInboundChannelAdapter , STRING , AbstractMessageListenerContainer .class ) ; ChannelAwareMessageListener org.springframework.integration.amqp.config.ChannelAwareMessageListener = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AbstractMessageListenerContainer , STRING , ChannelAwareMessageListener .class ) ; MessageProperties org.springframework.integration.amqp.config.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.config.MessageProperties . setAppId ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setClusterId ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setContentEncoding ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setContentLength ( NUMBER ) ; org.springframework.integration.amqp.config.MessageProperties . setContentType ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setHeader ( STRING , STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setHeader ( STRING , STRING ) ; Message org.springframework.integration.amqp.config.Message = new Message ( STRING . byte[] ( ) , org.springframework.integration.amqp.config.MessageProperties ) ; org.springframework.integration.amqp.config.ChannelAwareMessageListener . onMessage ( org.springframework.integration.amqp.config.Message , null ) ; QueueChannel org.springframework.integration.amqp.config.QueueChannel = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , QueueChannel .class ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > siMessage = org.springframework.integration.amqp.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( siMessage . getHeaders ( ) . get ( STRING ) ) ; assertNotNull ( siMessage . getHeaders ( ) . get ( STRING ) ) ; assertNotNull ( siMessage . getHeaders ( ) . get ( AmqpHeaders . CONTENT_ENCODING ) ) ; assertNotNull ( siMessage . getHeaders ( ) . get ( AmqpHeaders . CLUSTER_ID ) ) ; assertNotNull ( siMessage . getHeaders ( ) . get ( AmqpHeaders . APP_ID ) ) ; assertNotNull ( siMessage . getHeaders ( ) . get ( AmqpHeaders . CONTENT_TYPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.amqp.config.AmqpInboundChannelAdapterParserTests> ( ) ) . close ( ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.amqp.config.BeanDefinitionParsingException ) { assertTrue ( org.springframework.integration.amqp.config.BeanDefinitionParsingException . getMessage ( ) . startsWith ( STRING + STRING ) ) ; } }  <METHOD_END>
