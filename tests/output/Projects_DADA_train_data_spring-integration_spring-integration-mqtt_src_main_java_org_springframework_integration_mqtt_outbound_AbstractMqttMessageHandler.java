<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.mqtt.outbound.Expression ) { Assert . notNull ( org.springframework.integration.mqtt.outbound.Expression , STRING ) ; this . org.springframework.integration.mqtt.outbound.MessageProcessor<java.lang.String> = new ExpressionEvaluatingMessageProcessor <> ( org.springframework.integration.mqtt.outbound.Expression ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.integration.mqtt.outbound.MessageProcessor<java.lang.String> = new ExpressionEvaluatingMessageProcessor <> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.mqtt.outbound.Expression ) { Assert . notNull ( org.springframework.integration.mqtt.outbound.Expression , STRING ) ; this . org.springframework.integration.mqtt.outbound.MessageProcessor<java.lang.Integer> = new ExpressionEvaluatingMessageProcessor <> ( org.springframework.integration.mqtt.outbound.Expression ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.integration.mqtt.outbound.MessageProcessor<java.lang.Integer> = new ExpressionEvaluatingMessageProcessor <> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.mqtt.outbound.Expression ) { Assert . notNull ( org.springframework.integration.mqtt.outbound.Expression , STRING ) ; this . org.springframework.integration.mqtt.outbound.MessageProcessor<java.lang.Boolean> = new ExpressionEvaluatingMessageProcessor <> ( org.springframework.integration.mqtt.outbound.Expression ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.integration.mqtt.outbound.MessageProcessor<java.lang.Boolean> = new ExpressionEvaluatingMessageProcessor <> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( MessageConverter org.springframework.integration.mqtt.outbound.MessageConverter ) { Assert . notNull ( org.springframework.integration.mqtt.outbound.MessageConverter , STRING ) ; this . org.springframework.integration.mqtt.outbound.MessageConverter = org.springframework.integration.mqtt.outbound.MessageConverter ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.mqtt.outbound.MessageConverter org.springframework.integration.mqtt.outbound.MessageConverter ( ) { return this . org.springframework.integration.mqtt.outbound.MessageConverter ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { this . int ++ ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; if ( this . org.springframework.integration.mqtt.outbound.MessageProcessor<java.lang.String> instanceof BeanFactoryAware && getBeanFactory ( ) != null ) { ( ( BeanFactoryAware ) this . org.springframework.integration.mqtt.outbound.MessageProcessor<java.lang.String> ) . setBeanFactory ( getBeanFactory ( ) ) ; } if ( this . org.springframework.integration.mqtt.outbound.MessageProcessor<java.lang.Integer> instanceof BeanFactoryAware && getBeanFactory ( ) != null ) { ( ( BeanFactoryAware ) this . org.springframework.integration.mqtt.outbound.MessageProcessor<java.lang.Integer> ) . setBeanFactory ( getBeanFactory ( ) ) ; } if ( this . org.springframework.integration.mqtt.outbound.MessageProcessor<java.lang.Boolean> instanceof BeanFactoryAware && getBeanFactory ( ) != null ) { ( ( BeanFactoryAware ) this . org.springframework.integration.mqtt.outbound.MessageProcessor<java.lang.Boolean> ) . setBeanFactory ( getBeanFactory ( ) ) ; } if ( this . org.springframework.integration.mqtt.outbound.MessageConverter == null ) { DefaultPahoMessageConverter org.springframework.integration.mqtt.outbound.DefaultPahoMessageConverter = new DefaultPahoMessageConverter ( this . int , this . org.springframework.integration.mqtt.outbound.MessageProcessor<java.lang.Integer> , this . boolean , this . org.springframework.integration.mqtt.outbound.MessageProcessor<java.lang.Boolean> ) ; if ( getBeanFactory ( ) != null ) { org.springframework.integration.mqtt.outbound.DefaultPahoMessageConverter . setBeanFactory ( getBeanFactory ( ) ) ; } this . org.springframework.integration.mqtt.outbound.MessageConverter = org.springframework.integration.mqtt.outbound.DefaultPahoMessageConverter ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) { if ( ! this . java.util.concurrent.atomic.AtomicBoolean . boolean ( true ) ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> protected abstract void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) { if ( this . java.util.concurrent.atomic.AtomicBoolean . boolean ( false ) ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> protected abstract void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.mqtt.outbound.Message<?> ) throws java.lang.Exception { java.lang.Object java.lang.Object = this . org.springframework.integration.mqtt.outbound.MessageConverter . fromMessage ( org.springframework.integration.mqtt.outbound.Message<> , java.lang.Object .class ) ; java.lang.String java.lang.String = this . org.springframework.integration.mqtt.outbound.MessageProcessor<java.lang.String> . processMessage ( org.springframework.integration.mqtt.outbound.Message<> ) ; if ( java.lang.String == null && this . java.lang.String == null ) { throw new MessageHandlingException ( org.springframework.integration.mqtt.outbound.Message<> , STRING ) ; } this . void ( java.lang.String == null ? this . java.lang.String : java.lang.String , java.lang.Object , org.springframework.integration.mqtt.outbound.Message<> ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.mqtt.outbound.Message<?> ) throws java.lang.Exception ;  <METHOD_END>
