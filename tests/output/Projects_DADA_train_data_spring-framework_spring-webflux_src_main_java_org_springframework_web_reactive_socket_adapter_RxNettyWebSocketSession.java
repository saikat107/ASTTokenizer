<METHOD_START> public void ( WebSocketConnection org.springframework.web.reactive.socket.adapter.WebSocketConnection , HandshakeInfo org.springframework.web.reactive.socket.adapter.HandshakeInfo , NettyDataBufferFactory org.springframework.web.reactive.socket.adapter.NettyDataBufferFactory ) { super( org.springframework.web.reactive.socket.adapter.WebSocketConnection , org.springframework.web.reactive.socket.adapter.HandshakeInfo , org.springframework.web.reactive.socket.adapter.NettyDataBufferFactory ); }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.socket.adapter.RxNettyWebSocketSession org.springframework.web.reactive.socket.adapter.RxNettyWebSocketSession ( Channel org.springframework.web.reactive.socket.adapter.Channel , java.lang.String java.lang.String ) { ChannelPipeline org.springframework.web.reactive.socket.adapter.ChannelPipeline = org.springframework.web.reactive.socket.adapter.Channel . pipeline ( ) ; if ( org.springframework.web.reactive.socket.adapter.ChannelPipeline . context ( java.lang.String ) != null ) { return this ; } ChannelHandlerContext org.springframework.web.reactive.socket.adapter.ChannelHandlerContext = org.springframework.web.reactive.socket.adapter.ChannelPipeline . context ( java.lang.String ) ; if ( org.springframework.web.reactive.socket.adapter.ChannelHandlerContext == null ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String ) ; } ChannelHandler org.springframework.web.reactive.socket.adapter.ChannelHandler = new WebSocketFrameAggregator ( DEFAULT_FRAME_MAX_SIZE ) ; org.springframework.web.reactive.socket.adapter.ChannelPipeline . addAfter ( org.springframework.web.reactive.socket.adapter.ChannelHandlerContext . name ( ) , java.lang.String , org.springframework.web.reactive.socket.adapter.ChannelHandler ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.Flux<org.springframework.web.reactive.socket.adapter.WebSocketMessage> < WebSocketMessage > org.springframework.web.reactive.socket.adapter.Flux<org.springframework.web.reactive.socket.adapter.WebSocketMessage> ( ) { Observable < WebSocketMessage > org.springframework.web.reactive.socket.adapter.Observable<org.springframework.web.reactive.socket.adapter.WebSocketMessage> = getDelegate ( ) . getInput ( ) . filter ( frame -> ! ( frame instanceof CloseWebSocketFrame ) ) . map ( super:: toMessage ) ; return Flux . from ( RxReactiveStreams . toPublisher ( org.springframework.web.reactive.socket.adapter.Observable<org.springframework.web.reactive.socket.adapter.WebSocketMessage> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.adapter.Mono<java.lang.Void> ( Publisher < WebSocketMessage > org.springframework.web.reactive.socket.adapter.Publisher<org.springframework.web.reactive.socket.adapter.WebSocketMessage> ) { Observable < WebSocketFrame > org.springframework.web.reactive.socket.adapter.Observable<org.springframework.web.reactive.socket.adapter.WebSocketFrame> = RxReactiveStreams . toObservable ( org.springframework.web.reactive.socket.adapter.Publisher<org.springframework.web.reactive.socket.adapter.WebSocketMessage> ) . map ( this :: toFrame ) ; Observable < java.lang.Void > org.springframework.web.reactive.socket.adapter.Observable<java.lang.Void> = getDelegate ( ) . writeAndFlushOnEach ( org.springframework.web.reactive.socket.adapter.Observable<org.springframework.web.reactive.socket.adapter.WebSocketFrame> ) ; return Mono . from ( RxReactiveStreams . toPublisher ( org.springframework.web.reactive.socket.adapter.Observable<java.lang.Void> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.adapter.Mono<java.lang.Void> ( CloseStatus org.springframework.web.reactive.socket.adapter.CloseStatus ) { Observable < java.lang.Void > org.springframework.web.reactive.socket.adapter.Observable<java.lang.Void> = getDelegate ( ) . close ( ) ; return Mono . from ( RxReactiveStreams . toPublisher ( org.springframework.web.reactive.socket.adapter.Observable<java.lang.Void> ) ) ; }  <METHOD_END>
