<METHOD_START> @ Test public void void ( ) { ExceptionHandlerMethodResolver org.springframework.web.method.annotation.ExceptionHandlerMethodResolver = new ExceptionHandlerMethodResolver ( org.springframework.web.method.annotation.ExceptionHandlerMethodResolverTests.ExceptionController .class ) ; java.io.IOException java.io.IOException = new java.io.IOException ( ) ; assertEquals ( STRING , org.springframework.web.method.annotation.ExceptionHandlerMethodResolver . resolveMethod ( java.io.IOException ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExceptionHandlerMethodResolver org.springframework.web.method.annotation.ExceptionHandlerMethodResolver = new ExceptionHandlerMethodResolver ( org.springframework.web.method.annotation.ExceptionHandlerMethodResolverTests.ExceptionController .class ) ; java.lang.IllegalArgumentException java.lang.IllegalArgumentException = new java.lang.IllegalArgumentException ( ) ; assertEquals ( STRING , org.springframework.web.method.annotation.ExceptionHandlerMethodResolver . resolveMethod ( java.lang.IllegalArgumentException ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExceptionHandlerMethodResolver org.springframework.web.method.annotation.ExceptionHandlerMethodResolver = new ExceptionHandlerMethodResolver ( org.springframework.web.method.annotation.ExceptionHandlerMethodResolverTests.ExceptionController .class ) ; java.io.IOException java.io.IOException = new java.io.FileNotFoundException ( ) ; assertEquals ( STRING , org.springframework.web.method.annotation.ExceptionHandlerMethodResolver . resolveMethod ( java.io.IOException ) . getName ( ) ) ; java.net.SocketException java.net.SocketException = new java.net.BindException ( ) ; assertEquals ( STRING , org.springframework.web.method.annotation.ExceptionHandlerMethodResolver . resolveMethod ( java.net.SocketException ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExceptionHandlerMethodResolver org.springframework.web.method.annotation.ExceptionHandlerMethodResolver = new ExceptionHandlerMethodResolver ( org.springframework.web.method.annotation.ExceptionHandlerMethodResolverTests.ExceptionController .class ) ; java.net.SocketException java.net.SocketException = new java.net.SocketException ( ) ; assertEquals ( STRING , org.springframework.web.method.annotation.ExceptionHandlerMethodResolver . resolveMethod ( java.net.SocketException ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExceptionHandlerMethodResolver org.springframework.web.method.annotation.ExceptionHandlerMethodResolver = new ExceptionHandlerMethodResolver ( org.springframework.web.method.annotation.ExceptionHandlerMethodResolverTests.ExceptionController .class ) ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; assertNull ( STRING , org.springframework.web.method.annotation.ExceptionHandlerMethodResolver . resolveMethod ( java.lang.Exception ) ) ; assertNull ( STRING , org.springframework.web.method.annotation.ExceptionHandlerMethodResolver . resolveMethod ( java.lang.Exception ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExceptionHandlerMethodResolver org.springframework.web.method.annotation.ExceptionHandlerMethodResolver = new ExceptionHandlerMethodResolver ( org.springframework.web.method.annotation.ExceptionHandlerMethodResolverTests.InheritedController .class ) ; java.io.IOException java.io.IOException = new java.io.IOException ( ) ; assertEquals ( STRING , org.springframework.web.method.annotation.ExceptionHandlerMethodResolver . resolveMethod ( java.io.IOException ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { new ExceptionHandlerMethodResolver ( org.springframework.web.method.annotation.ExceptionHandlerMethodResolverTests.AmbiguousController .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new ExceptionHandlerMethodResolver ( org.springframework.web.method.annotation.ExceptionHandlerMethodResolverTests.NoExceptionController .class ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) {}  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( java.io.IOException .class ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( java.net.SocketException .class ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ ExceptionHandler public void void ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) {}  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( { java.net.BindException .class , java.lang.IllegalArgumentException .class } ) public java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception , HttpServletRequest org.springframework.web.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.method.annotation.HttpServletResponse )				throws java.io.IOException { return ClassUtils . getShortName ( java.lang.Exception . java.lang.Class<? extends java.lang.Exception> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler public java.lang.String java.lang.String ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { return ClassUtils . getShortName ( java.lang.IllegalArgumentException . java.lang.Class<? extends java.lang.IllegalArgumentException> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler public void void ( ) {		}  <METHOD_END>
