<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.context.request.async.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.web.context.request.async.MockHttpServletRequest . setAsyncSupported ( true ) ; this . org.springframework.web.context.request.async.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest = new StandardServletAsyncWebRequest ( this . org.springframework.web.context.request.async.MockHttpServletRequest , this . org.springframework.web.context.request.async.MockHttpServletResponse ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . setTimeout ( NUMBER * NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertFalse ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . isAsyncStarted ( ) ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . startAsync ( ) ; assertTrue ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . isAsyncStarted ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . startAsync ( ) ; MockAsyncContext org.springframework.web.context.request.async.MockAsyncContext = ( MockAsyncContext ) this . org.springframework.web.context.request.async.MockHttpServletRequest . getAsyncContext ( ) ; assertNotNull ( org.springframework.web.context.request.async.MockAsyncContext ) ; assertEquals ( STRING , NUMBER * NUMBER , org.springframework.web.context.request.async.MockAsyncContext . getTimeout ( ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.async.MockAsyncContext . getListeners ( ) . size ( ) ) ; assertSame ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest , org.springframework.web.context.request.async.MockAsyncContext . getListeners ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . startAsync ( ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . startAsync ( ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . startAsync ( ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . startAsync ( ) ; MockAsyncContext org.springframework.web.context.request.async.MockAsyncContext = ( MockAsyncContext ) this . org.springframework.web.context.request.async.MockHttpServletRequest . getAsyncContext ( ) ; assertNotNull ( org.springframework.web.context.request.async.MockAsyncContext ) ; assertEquals ( NUMBER , org.springframework.web.context.request.async.MockAsyncContext . getListeners ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.context.request.async.MockHttpServletRequest . setAsyncSupported ( false ) ; try { this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . startAsync ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertThat ( java.lang.IllegalStateException . java.lang.String ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . onComplete ( new AsyncEvent ( new MockAsyncContext ( this . org.springframework.web.context.request.async.MockHttpServletRequest , this . org.springframework.web.context.request.async.MockHttpServletResponse ) ) ) ; try { this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . startAsync ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( STRING , java.lang.IllegalStateException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . onTimeout ( new AsyncEvent ( new MockAsyncContext ( this . org.springframework.web.context.request.async.MockHttpServletRequest , this . org.springframework.web.context.request.async.MockHttpServletResponse ) ) ) ; assertEquals ( NUMBER , this . org.springframework.web.context.request.async.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Runnable java.lang.Runnable = mock ( java.lang.Runnable .class ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . addTimeoutHandler ( java.lang.Runnable ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . onTimeout ( new AsyncEvent ( new MockAsyncContext ( this . org.springframework.web.context.request.async.MockHttpServletRequest , this . org.springframework.web.context.request.async.MockHttpServletResponse ) ) ) ; verify ( java.lang.Runnable ) . run ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . startAsync ( ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . setTimeout ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Runnable java.lang.Runnable = mock ( java.lang.Runnable .class ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . addCompletionHandler ( java.lang.Runnable ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . startAsync ( ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . onComplete ( new AsyncEvent ( this . org.springframework.web.context.request.async.MockHttpServletRequest . getAsyncContext ( ) ) ) ; verify ( java.lang.Runnable ) . run ( ) ; assertTrue ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . isAsyncComplete ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Runnable java.lang.Runnable = mock ( java.lang.Runnable .class ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . addCompletionHandler ( java.lang.Runnable ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . startAsync ( ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . onError ( new AsyncEvent ( this . org.springframework.web.context.request.async.MockHttpServletRequest . getAsyncContext ( ) ) ) ; verify ( java.lang.Runnable ) . run ( ) ; assertTrue ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . isAsyncComplete ( ) ) ; }  <METHOD_END>
