<METHOD_START> protected org.springframework.data.gemfire.RegionFactory<?,?> < ? , ? > org.springframework.data.gemfire.RegionFactory<?,?> ( ) { return mock ( RegionFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.PartitionedRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , ( java.lang.String ) null ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PARTITION ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.PartitionedRegionFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.PartitionedRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , false , ( java.lang.String ) null ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PARTITION ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.PartitionedRegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.PartitionedRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , ( java.lang.String ) null ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_PARTITION ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.PartitionedRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . NORMAL ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PRELOADED ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.PartitionedRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . NORMAL ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PRELOADED ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.PartitionedRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PARTITION ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_PARTITION ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.PartitionedRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . REPLICATE ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PARTITION ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_PARTITION ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.PartitionedRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , STRING ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PARTITION ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.PartitionedRegionFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.PartitionedRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , false , STRING ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PARTITION ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.PartitionedRegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.PartitionedRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PARTITION ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_PARTITION ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.PartitionedRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , STRING ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_PARTITION ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.PartitionedRegionFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.PartitionedRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , false , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PARTITION ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_PARTITION ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.PartitionedRegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.PartitionedRegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , STRING ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_PARTITION ) ) ; }  <METHOD_END>
