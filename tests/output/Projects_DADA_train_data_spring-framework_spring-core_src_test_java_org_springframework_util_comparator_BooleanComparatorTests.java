<METHOD_START> @ Test public void void ( ) { java.util.Comparator<java.lang.Boolean> < java.lang.Boolean > java.util.Comparator<java.lang.Boolean> = new BooleanComparator ( true ) ; assertThat ( java.util.Comparator<java.lang.Boolean> . int ( new java.lang.Boolean ( true ) , new java.lang.Boolean ( false ) ) , is ( - NUMBER ) ) ; assertThat ( java.util.Comparator<java.lang.Boolean> . int ( java.lang.Boolean . java.lang.Boolean , java.lang.Boolean . java.lang.Boolean ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Comparator<java.lang.Boolean> < java.lang.Boolean > java.util.Comparator<java.lang.Boolean> = new BooleanComparator ( false ) ; assertThat ( java.util.Comparator<java.lang.Boolean> . int ( new java.lang.Boolean ( true ) , new java.lang.Boolean ( false ) ) , is ( NUMBER ) ) ; assertThat ( java.util.Comparator<java.lang.Boolean> . int ( java.lang.Boolean . java.lang.Boolean , java.lang.Boolean . java.lang.Boolean ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Comparator<java.lang.Boolean> < java.lang.Boolean > java.util.Comparator<java.lang.Boolean> = BooleanComparator . TRUE_LOW ; assertThat ( java.util.Comparator<java.lang.Boolean> . int ( true , false ) , is ( - NUMBER ) ) ; assertThat ( java.util.Comparator<java.lang.Boolean> . int ( java.lang.Boolean . java.lang.Boolean , java.lang.Boolean . java.lang.Boolean ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Comparator<java.lang.Boolean> < java.lang.Boolean > java.util.Comparator<java.lang.Boolean> = BooleanComparator . TRUE_HIGH ; assertThat ( java.util.Comparator<java.lang.Boolean> . int ( true , false ) , is ( NUMBER ) ) ; assertThat ( java.util.Comparator<java.lang.Boolean> . int ( java.lang.Boolean . java.lang.Boolean , java.lang.Boolean . java.lang.Boolean ) , is ( NUMBER ) ) ; }  <METHOD_END>
