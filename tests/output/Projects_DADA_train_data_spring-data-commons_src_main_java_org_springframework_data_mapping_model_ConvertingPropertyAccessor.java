<METHOD_START> public void ( PersistentPropertyAccessor org.springframework.data.mapping.model.PersistentPropertyAccessor , ConversionService org.springframework.data.mapping.model.ConversionService ) { Assert . notNull ( org.springframework.data.mapping.model.PersistentPropertyAccessor , STRING ) ; Assert . notNull ( org.springframework.data.mapping.model.ConversionService , STRING ) ; this . org.springframework.data.mapping.model.PersistentPropertyAccessor = org.springframework.data.mapping.model.PersistentPropertyAccessor ; this . org.springframework.data.mapping.model.ConversionService = org.springframework.data.mapping.model.ConversionService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> , java.util.Optional<? extends java.lang.Object> < ? extends java.lang.Object > java.util.Optional<? extends java.lang.Object> ) { org.springframework.data.mapping.model.PersistentPropertyAccessor . setProperty ( org.springframework.data.mapping.model.PersistentProperty<> , java.util.Optional ( java.util.Optional<> , org.springframework.data.mapping.model.PersistentProperty<> . getType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> ) { return org.springframework.data.mapping.model.PersistentPropertyAccessor . getProperty ( org.springframework.data.mapping.model.PersistentProperty<> ) ; }  <METHOD_END>
<METHOD_START> public < T > java.util.Optional<T> < T > java.util.Optional<T> ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( org.springframework.data.mapping.model.PersistentProperty<> , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; return java.util.Optional ( java.util.Optional<java.lang.Object> ( org.springframework.data.mapping.model.PersistentProperty<> ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.data.mapping.model.PersistentPropertyAccessor . getBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > java.util.Optional<T> < T > java.util.Optional<T> ( java.util.Optional<? extends java.lang.Object> < ? extends java.lang.Object > java.util.Optional<? extends java.lang.Object> , java.lang.Class<T> < T > java.lang.Class<T> ) { return java.util.Optional<> . java.util.Optional<T> ( it -> java.lang.Class<T> . boolean ( it . java.lang.Class<? extends java.lang.Object> ( ) ) ? ( T ) it : org.springframework.data.mapping.model.ConversionService . convert ( it , java.lang.Class<T> ) ) ; }  <METHOD_END>
