<METHOD_START> @ Test public void void ( ) java.lang.Exception { SubscribableChannel org.springframework.web.socket.sockjs.transport.handler.SubscribableChannel = mock ( SubscribableChannel .class ) ; SubProtocolWebSocketHandler org.springframework.web.socket.sockjs.transport.handler.SubProtocolWebSocketHandler = new SubProtocolWebSocketHandler ( org.springframework.web.socket.sockjs.transport.handler.SubscribableChannel , org.springframework.web.socket.sockjs.transport.handler.SubscribableChannel ) ; StompSubProtocolHandler org.springframework.web.socket.sockjs.transport.handler.StompSubProtocolHandler = new StompSubProtocolHandler ( ) ; org.springframework.web.socket.sockjs.transport.handler.SubProtocolWebSocketHandler . addProtocolHandler ( org.springframework.web.socket.sockjs.transport.handler.StompSubProtocolHandler ) ; TaskScheduler org.springframework.web.socket.sockjs.transport.handler.TaskScheduler = mock ( TaskScheduler .class ) ; DefaultSockJsService org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService = new DefaultSockJsService ( org.springframework.web.socket.sockjs.transport.handler.TaskScheduler ) ; WebSocketServerSockJsSession org.springframework.web.socket.sockjs.transport.handler.WebSocketServerSockJsSession = new WebSocketServerSockJsSession ( STRING , org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService , org.springframework.web.socket.sockjs.transport.handler.SubProtocolWebSocketHandler , null ) ; SockJsWebSocketHandler org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler = new SockJsWebSocketHandler ( org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService , org.springframework.web.socket.sockjs.transport.handler.SubProtocolWebSocketHandler , org.springframework.web.socket.sockjs.transport.handler.WebSocketServerSockJsSession ) ; assertEquals ( org.springframework.web.socket.sockjs.transport.handler.StompSubProtocolHandler . getSupportedProtocols ( ) , org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler . getSubProtocols ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebSocketHandler org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler = new TextWebSocketHandler ( ) ; TaskScheduler org.springframework.web.socket.sockjs.transport.handler.TaskScheduler = mock ( TaskScheduler .class ) ; DefaultSockJsService org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService = new DefaultSockJsService ( org.springframework.web.socket.sockjs.transport.handler.TaskScheduler ) ; WebSocketServerSockJsSession org.springframework.web.socket.sockjs.transport.handler.WebSocketServerSockJsSession = new WebSocketServerSockJsSession ( STRING , org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , null ) ; SockJsWebSocketHandler org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler = new SockJsWebSocketHandler ( org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , org.springframework.web.socket.sockjs.transport.handler.WebSocketServerSockJsSession ) ; assertNull ( org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler . getSubProtocols ( ) ) ; }  <METHOD_END>
