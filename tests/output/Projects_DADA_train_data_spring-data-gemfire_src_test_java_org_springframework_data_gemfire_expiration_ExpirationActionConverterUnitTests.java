<METHOD_START> @ After public void void ( ) { org.springframework.data.gemfire.expiration.ExpirationActionConverter . setValue ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.expiration.ExpirationActionConverter . convert ( STRING ) ) . isEqualTo ( ExpirationAction . DESTROY ) ; assertThat ( org.springframework.data.gemfire.expiration.ExpirationActionConverter . convert ( STRING ) ) . isEqualTo ( ExpirationAction . INVALIDATE ) ; assertThat ( org.springframework.data.gemfire.expiration.ExpirationActionConverter . convert ( STRING ) ) . isEqualTo ( ExpirationAction . LOCAL_DESTROY ) ; assertThat ( org.springframework.data.gemfire.expiration.ExpirationActionConverter . convert ( STRING ) ) . isEqualTo ( ExpirationAction . LOCAL_INVALIDATE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.expiration.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.expiration.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.expiration.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.expiration.ExpirationActionConverter . convert ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.expiration.ExpirationActionConverter . getValue ( ) ) . isNull ( ) ; org.springframework.data.gemfire.expiration.ExpirationActionConverter . setAsText ( STRING ) ; assertThat ( org.springframework.data.gemfire.expiration.ExpirationActionConverter . getValue ( ) ) . isEqualTo ( ExpirationAction . INVALIDATE ) ; org.springframework.data.gemfire.expiration.ExpirationActionConverter . setAsText ( STRING ) ; assertThat ( org.springframework.data.gemfire.expiration.ExpirationActionConverter . getValue ( ) ) . isEqualTo ( ExpirationAction . LOCAL_DESTROY ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.gemfire.expiration.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.expiration.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.expiration.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.expiration.ExpirationActionConverter . setAsText ( STRING ) ; } finally { assertThat ( org.springframework.data.gemfire.expiration.ExpirationActionConverter . getValue ( ) ) . isNull ( ) ; } }  <METHOD_END>
