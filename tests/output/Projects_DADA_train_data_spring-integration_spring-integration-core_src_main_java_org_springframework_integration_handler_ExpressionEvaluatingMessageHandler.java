<METHOD_START> public void ( Expression org.springframework.integration.handler.Expression ) { Assert . notNull ( org.springframework.integration.handler.Expression , STRING ) ; this . org.springframework.integration.handler.ExpressionEvaluatingMessageProcessor<java.lang.Void> = new ExpressionEvaluatingMessageProcessor < java.lang.Void > ( org.springframework.integration.handler.Expression , java.lang.Void .class ) ; setPrimaryExpression ( org.springframework.integration.handler.Expression ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { this . org.springframework.integration.handler.ExpressionEvaluatingMessageProcessor<java.lang.Void> . setBeanFactory ( getBeanFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.handler.Message<?> ) throws java.lang.Exception { this . org.springframework.integration.handler.ExpressionEvaluatingMessageProcessor<java.lang.Void> . processMessage ( org.springframework.integration.handler.Message<> ) ; }  <METHOD_END>
