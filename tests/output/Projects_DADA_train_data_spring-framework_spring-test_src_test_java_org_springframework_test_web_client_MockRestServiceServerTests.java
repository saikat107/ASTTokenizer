<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockRestServiceServerBuilder org.springframework.test.web.client.MockRestServiceServerBuilder = MockRestServiceServer . bindTo ( this . org.springframework.test.web.client.RestTemplate ) ; MockRestServiceServer org.springframework.test.web.client.MockRestServiceServer = org.springframework.test.web.client.MockRestServiceServerBuilder . build ( ) ; org.springframework.test.web.client.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( ) ) ; this . org.springframework.test.web.client.RestTemplate . getForObject ( STRING , java.lang.Void .class ) ; org.springframework.test.web.client.MockRestServiceServer . verify ( ) ; org.springframework.test.web.client.MockRestServiceServer = org.springframework.test.web.client.MockRestServiceServerBuilder . ignoreExpectOrder ( true ) . build ( ) ; org.springframework.test.web.client.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( ) ) ; org.springframework.test.web.client.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( ) ) ; this . org.springframework.test.web.client.RestTemplate . getForObject ( STRING , java.lang.Void .class ) ; this . org.springframework.test.web.client.RestTemplate . getForObject ( STRING , java.lang.Void .class ) ; org.springframework.test.web.client.MockRestServiceServer . verify ( ) ; org.springframework.test.web.client.MockRestServiceServer = org.springframework.test.web.client.MockRestServiceServerBuilder . build ( ) ; org.springframework.test.web.client.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( ) ) ; this . org.springframework.test.web.client.RestTemplate . getForObject ( STRING , java.lang.Void .class ) ; org.springframework.test.web.client.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { MockRestServiceServer org.springframework.test.web.client.MockRestServiceServer = MockRestServiceServer . bindTo ( this . org.springframework.test.web.client.RestTemplate ) . ignoreExpectOrder ( false ) . build ( ) ; org.springframework.test.web.client.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( ) ) ; org.springframework.test.web.client.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( ) ) ; this . org.springframework.test.web.client.RestTemplate . getForObject ( STRING , java.lang.Void .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockRestServiceServer org.springframework.test.web.client.MockRestServiceServer = MockRestServiceServer . bindTo ( this . org.springframework.test.web.client.RestTemplate ) . ignoreExpectOrder ( true ) . build ( ) ; org.springframework.test.web.client.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( ) ) ; org.springframework.test.web.client.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( ) ) ; this . org.springframework.test.web.client.RestTemplate . getForObject ( STRING , java.lang.Void .class ) ; this . org.springframework.test.web.client.RestTemplate . getForObject ( STRING , java.lang.Void .class ) ; org.springframework.test.web.client.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockRestServiceServer org.springframework.test.web.client.MockRestServiceServer = MockRestServiceServer . bindTo ( this . org.springframework.test.web.client.RestTemplate ) . build ( ) ; org.springframework.test.web.client.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( ) ) ; this . org.springframework.test.web.client.RestTemplate . getForObject ( STRING , java.lang.Void .class ) ; org.springframework.test.web.client.MockRestServiceServer . verify ( ) ; org.springframework.test.web.client.MockRestServiceServer . reset ( ) ; org.springframework.test.web.client.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( ) ) ; this . org.springframework.test.web.client.RestTemplate . getForObject ( STRING , java.lang.Void .class ) ; org.springframework.test.web.client.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockRestServiceServer org.springframework.test.web.client.MockRestServiceServer = MockRestServiceServer . bindTo ( this . org.springframework.test.web.client.RestTemplate ) . ignoreExpectOrder ( true ) . build ( ) ; org.springframework.test.web.client.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( ) ) ; this . org.springframework.test.web.client.RestTemplate . getForObject ( STRING , java.lang.Void .class ) ; org.springframework.test.web.client.MockRestServiceServer . verify ( ) ; org.springframework.test.web.client.MockRestServiceServer . reset ( ) ; org.springframework.test.web.client.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( ) ) ; org.springframework.test.web.client.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( ) ) ; this . org.springframework.test.web.client.RestTemplate . getForObject ( STRING , java.lang.Void .class ) ; this . org.springframework.test.web.client.RestTemplate . getForObject ( STRING , java.lang.Void .class ) ; org.springframework.test.web.client.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
