<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { super(); setBeanClass ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public < T > void ( java.lang.Class<T> < T > java.lang.Class<T> , java.util.function.Supplier<T> < T > java.util.function.Supplier<T> ) { super(); setBeanClass ( java.lang.Class<T> ) ; setInstanceSupplier ( java.util.function.Supplier<T> ) ; }  <METHOD_END>
<METHOD_START> public < T > void ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String , java.util.function.Supplier<T> < T > java.util.function.Supplier<T> ) { super(); setBeanClass ( java.lang.Class<T> ) ; setScope ( java.lang.String ) ; setInstanceSupplier ( java.util.function.Supplier<T> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , int int , boolean boolean ) { super(); setBeanClass ( java.lang.Class<> ) ; setAutowireMode ( int ) ; if ( boolean && getResolvedAutowireMode ( ) != AUTOWIRE_CONSTRUCTOR ) { setDependencyCheck ( DEPENDENCY_CHECK_OBJECTS ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues , MutablePropertyValues org.springframework.beans.factory.support.MutablePropertyValues ) { super( org.springframework.beans.factory.support.ConstructorArgumentValues , org.springframework.beans.factory.support.MutablePropertyValues ); setBeanClass ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { setBeanClassName ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues , MutablePropertyValues org.springframework.beans.factory.support.MutablePropertyValues ) { super( org.springframework.beans.factory.support.ConstructorArgumentValues , org.springframework.beans.factory.support.MutablePropertyValues ); setBeanClassName ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.beans.factory.support.RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { super( org.springframework.beans.factory.support.RootBeanDefinition ); this . org.springframework.beans.factory.support.BeanDefinitionHolder = org.springframework.beans.factory.support.RootBeanDefinition . org.springframework.beans.factory.support.BeanDefinitionHolder ; this . java.lang.reflect.AnnotatedElement = org.springframework.beans.factory.support.RootBeanDefinition . java.lang.reflect.AnnotatedElement ; this . boolean = org.springframework.beans.factory.support.RootBeanDefinition . boolean ; this . boolean = org.springframework.beans.factory.support.RootBeanDefinition . boolean ; this . org.springframework.beans.factory.support.ResolvableType = org.springframework.beans.factory.support.RootBeanDefinition . org.springframework.beans.factory.support.ResolvableType ; }  <METHOD_END>
<METHOD_START> void ( BeanDefinition org.springframework.beans.factory.support.BeanDefinition ) { super( org.springframework.beans.factory.support.BeanDefinition ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { if ( java.lang.String != null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> public void void ( BeanDefinitionHolder org.springframework.beans.factory.support.BeanDefinitionHolder ) { this . org.springframework.beans.factory.support.BeanDefinitionHolder = org.springframework.beans.factory.support.BeanDefinitionHolder ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.support.BeanDefinitionHolder org.springframework.beans.factory.support.BeanDefinitionHolder ( ) { return this . org.springframework.beans.factory.support.BeanDefinitionHolder ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ) { this . java.lang.reflect.AnnotatedElement = java.lang.reflect.AnnotatedElement ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ( ) { return this . java.lang.reflect.AnnotatedElement ; }  <METHOD_END>
<METHOD_START> public void void ( ResolvableType org.springframework.beans.factory.support.ResolvableType ) { this . org.springframework.beans.factory.support.ResolvableType = org.springframework.beans.factory.support.ResolvableType ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . org.springframework.beans.factory.support.ResolvableType = ( java.lang.Class<> != null ? ResolvableType . forClass ( java.lang.Class<> ) : null ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { if ( this . java.lang.Class<> != null ) { return this . java.lang.Class<> ; } return ( this . org.springframework.beans.factory.support.ResolvableType != null ? this . org.springframework.beans.factory.support.ResolvableType . resolve ( ) : null ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; setFactoryMethodName ( java.lang.String ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ( java.lang.reflect.Method != null && java.lang.reflect.Method . java.lang.String ( ) . boolean ( getFactoryMethodName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Method java.lang.reflect.Method ( ) { synchronized ( this . java.lang.Object ) { java.lang.reflect.Executable java.lang.reflect.Executable = this . java.lang.reflect.Executable ; return ( java.lang.reflect.Executable instanceof java.lang.reflect.Method ? ( java.lang.reflect.Method ) java.lang.reflect.Executable : null ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.reflect.Member java.lang.reflect.Member ) { synchronized ( this . java.lang.Object ) { if ( this . java.util.Set<java.lang.reflect.Member> == null ) { this . java.util.Set<java.lang.reflect.Member> = new java.util.HashSet<java.lang.reflect.Member> <> ( NUMBER ) ; } this . java.util.Set<java.lang.reflect.Member> . boolean ( java.lang.reflect.Member ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.reflect.Member java.lang.reflect.Member ) { synchronized ( this . java.lang.Object ) { return ( this . java.util.Set<java.lang.reflect.Member> != null && this . java.util.Set<java.lang.reflect.Member> . boolean ( java.lang.reflect.Member ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { synchronized ( this . java.lang.Object ) { if ( this . java.util.Set<java.lang.String> == null ) { this . java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( NUMBER ) ; } this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { synchronized ( this . java.lang.Object ) { return ( this . java.util.Set<java.lang.String> != null && this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { synchronized ( this . java.lang.Object ) { if ( this . java.util.Set<java.lang.String> == null ) { this . java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( NUMBER ) ; } this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { synchronized ( this . java.lang.Object ) { return ( this . java.util.Set<java.lang.String> != null && this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.support.RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ( ) { return new org.springframework.beans.factory.support.RootBeanDefinition ( this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( this == java.lang.Object || ( java.lang.Object instanceof org.springframework.beans.factory.support.RootBeanDefinition && super. boolean ( java.lang.Object ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + super. java.lang.String ( ) ; }  <METHOD_END>
