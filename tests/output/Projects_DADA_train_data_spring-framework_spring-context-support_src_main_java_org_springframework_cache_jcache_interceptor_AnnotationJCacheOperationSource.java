<METHOD_START> @ java.lang.Override protected org.springframework.cache.jcache.interceptor.JCacheOperation<?> < ? > org.springframework.cache.jcache.interceptor.JCacheOperation<?> ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { CacheResult org.springframework.cache.jcache.interceptor.CacheResult = java.lang.reflect.Method . T ( CacheResult .class ) ; CachePut org.springframework.cache.jcache.interceptor.CachePut = java.lang.reflect.Method . T ( CachePut .class ) ; CacheRemove org.springframework.cache.jcache.interceptor.CacheRemove = java.lang.reflect.Method . T ( CacheRemove .class ) ; CacheRemoveAll org.springframework.cache.jcache.interceptor.CacheRemoveAll = java.lang.reflect.Method . T ( CacheRemoveAll .class ) ; int int = int ( org.springframework.cache.jcache.interceptor.CacheResult , org.springframework.cache.jcache.interceptor.CachePut , org.springframework.cache.jcache.interceptor.CacheRemove , org.springframework.cache.jcache.interceptor.CacheRemoveAll ) ; if ( int == NUMBER ) { return null ; } if ( int > NUMBER ) { throw new java.lang.IllegalStateException ( STRING + java.lang.reflect.Method + STRING ) ; } CacheDefaults org.springframework.cache.jcache.interceptor.CacheDefaults = org.springframework.cache.jcache.interceptor.CacheDefaults ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( org.springframework.cache.jcache.interceptor.CacheResult != null ) { return org.springframework.cache.jcache.interceptor.CacheResultOperation ( java.lang.reflect.Method , org.springframework.cache.jcache.interceptor.CacheDefaults , org.springframework.cache.jcache.interceptor.CacheResult ) ; } else if ( org.springframework.cache.jcache.interceptor.CachePut != null ) { return org.springframework.cache.jcache.interceptor.CachePutOperation ( java.lang.reflect.Method , org.springframework.cache.jcache.interceptor.CacheDefaults , org.springframework.cache.jcache.interceptor.CachePut ) ; } else if ( org.springframework.cache.jcache.interceptor.CacheRemove != null ) { return org.springframework.cache.jcache.interceptor.CacheRemoveOperation ( java.lang.reflect.Method , org.springframework.cache.jcache.interceptor.CacheDefaults , org.springframework.cache.jcache.interceptor.CacheRemove ) ; } else { return org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation ( java.lang.reflect.Method , org.springframework.cache.jcache.interceptor.CacheDefaults , org.springframework.cache.jcache.interceptor.CacheRemoveAll ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.interceptor.CacheDefaults org.springframework.cache.jcache.interceptor.CacheDefaults ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { CacheDefaults org.springframework.cache.jcache.interceptor.CacheDefaults = java.lang.reflect.Method . java.lang.Class<?> ( ) . A ( CacheDefaults .class ) ; if ( org.springframework.cache.jcache.interceptor.CacheDefaults != null ) { return org.springframework.cache.jcache.interceptor.CacheDefaults ; } return java.lang.Class<> . A ( CacheDefaults .class ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.interceptor.CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation ( java.lang.reflect.Method java.lang.reflect.Method , CacheDefaults org.springframework.cache.jcache.interceptor.CacheDefaults , CacheResult org.springframework.cache.jcache.interceptor.CacheResult ) { java.lang.String java.lang.String = java.lang.String ( java.lang.reflect.Method , org.springframework.cache.jcache.interceptor.CacheDefaults , org.springframework.cache.jcache.interceptor.CacheResult . cacheName ( ) ) ; CacheResolverFactory org.springframework.cache.jcache.interceptor.CacheResolverFactory = org.springframework.cache.jcache.interceptor.CacheResolverFactory ( org.springframework.cache.jcache.interceptor.CacheDefaults , org.springframework.cache.jcache.interceptor.CacheResult . cacheResolverFactory ( ) ) ; KeyGenerator org.springframework.cache.jcache.interceptor.KeyGenerator = org.springframework.cache.jcache.interceptor.KeyGenerator ( org.springframework.cache.jcache.interceptor.CacheDefaults , org.springframework.cache.jcache.interceptor.CacheResult . cacheKeyGenerator ( ) ) ; CacheMethodDetails < CacheResult > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> = org.springframework.cache.jcache.interceptor.CacheMethodDetails ( java.lang.reflect.Method , org.springframework.cache.jcache.interceptor.CacheResult , java.lang.String ) ; CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver = org.springframework.cache.jcache.interceptor.CacheResolver ( org.springframework.cache.jcache.interceptor.CacheResolverFactory , org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> ) ; CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver = null ; final java.lang.String java.lang.String = org.springframework.cache.jcache.interceptor.CacheResult . exceptionCacheName ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.cache.jcache.interceptor.CacheResolver = org.springframework.cache.jcache.interceptor.CacheResolver ( org.springframework.cache.jcache.interceptor.CacheResolverFactory , org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> ) ; } return new CacheResultOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> , org.springframework.cache.jcache.interceptor.CacheResolver , org.springframework.cache.jcache.interceptor.KeyGenerator , org.springframework.cache.jcache.interceptor.CacheResolver ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.interceptor.CachePutOperation org.springframework.cache.jcache.interceptor.CachePutOperation ( java.lang.reflect.Method java.lang.reflect.Method , CacheDefaults org.springframework.cache.jcache.interceptor.CacheDefaults , CachePut org.springframework.cache.jcache.interceptor.CachePut ) { java.lang.String java.lang.String = java.lang.String ( java.lang.reflect.Method , org.springframework.cache.jcache.interceptor.CacheDefaults , org.springframework.cache.jcache.interceptor.CachePut . cacheName ( ) ) ; CacheResolverFactory org.springframework.cache.jcache.interceptor.CacheResolverFactory = org.springframework.cache.jcache.interceptor.CacheResolverFactory ( org.springframework.cache.jcache.interceptor.CacheDefaults , org.springframework.cache.jcache.interceptor.CachePut . cacheResolverFactory ( ) ) ; KeyGenerator org.springframework.cache.jcache.interceptor.KeyGenerator = org.springframework.cache.jcache.interceptor.KeyGenerator ( org.springframework.cache.jcache.interceptor.CacheDefaults , org.springframework.cache.jcache.interceptor.CachePut . cacheKeyGenerator ( ) ) ; CacheMethodDetails < CachePut > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> = org.springframework.cache.jcache.interceptor.CacheMethodDetails ( java.lang.reflect.Method , org.springframework.cache.jcache.interceptor.CachePut , java.lang.String ) ; CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver = org.springframework.cache.jcache.interceptor.CacheResolver ( org.springframework.cache.jcache.interceptor.CacheResolverFactory , org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> ) ; return new CachePutOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> , org.springframework.cache.jcache.interceptor.CacheResolver , org.springframework.cache.jcache.interceptor.KeyGenerator ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.interceptor.CacheRemoveOperation org.springframework.cache.jcache.interceptor.CacheRemoveOperation ( java.lang.reflect.Method java.lang.reflect.Method , CacheDefaults org.springframework.cache.jcache.interceptor.CacheDefaults , CacheRemove org.springframework.cache.jcache.interceptor.CacheRemove ) { java.lang.String java.lang.String = java.lang.String ( java.lang.reflect.Method , org.springframework.cache.jcache.interceptor.CacheDefaults , org.springframework.cache.jcache.interceptor.CacheRemove . cacheName ( ) ) ; CacheResolverFactory org.springframework.cache.jcache.interceptor.CacheResolverFactory = org.springframework.cache.jcache.interceptor.CacheResolverFactory ( org.springframework.cache.jcache.interceptor.CacheDefaults , org.springframework.cache.jcache.interceptor.CacheRemove . cacheResolverFactory ( ) ) ; KeyGenerator org.springframework.cache.jcache.interceptor.KeyGenerator = org.springframework.cache.jcache.interceptor.KeyGenerator ( org.springframework.cache.jcache.interceptor.CacheDefaults , org.springframework.cache.jcache.interceptor.CacheRemove . cacheKeyGenerator ( ) ) ; CacheMethodDetails < CacheRemove > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheRemove> = org.springframework.cache.jcache.interceptor.CacheMethodDetails ( java.lang.reflect.Method , org.springframework.cache.jcache.interceptor.CacheRemove , java.lang.String ) ; CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver = org.springframework.cache.jcache.interceptor.CacheResolver ( org.springframework.cache.jcache.interceptor.CacheResolverFactory , org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheRemove> ) ; return new CacheRemoveOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheRemove> , org.springframework.cache.jcache.interceptor.CacheResolver , org.springframework.cache.jcache.interceptor.KeyGenerator ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation ( java.lang.reflect.Method java.lang.reflect.Method , CacheDefaults org.springframework.cache.jcache.interceptor.CacheDefaults , CacheRemoveAll org.springframework.cache.jcache.interceptor.CacheRemoveAll ) { java.lang.String java.lang.String = java.lang.String ( java.lang.reflect.Method , org.springframework.cache.jcache.interceptor.CacheDefaults , org.springframework.cache.jcache.interceptor.CacheRemoveAll . cacheName ( ) ) ; CacheResolverFactory org.springframework.cache.jcache.interceptor.CacheResolverFactory = org.springframework.cache.jcache.interceptor.CacheResolverFactory ( org.springframework.cache.jcache.interceptor.CacheDefaults , org.springframework.cache.jcache.interceptor.CacheRemoveAll . cacheResolverFactory ( ) ) ; CacheMethodDetails < CacheRemoveAll > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheRemoveAll> = org.springframework.cache.jcache.interceptor.CacheMethodDetails ( java.lang.reflect.Method , org.springframework.cache.jcache.interceptor.CacheRemoveAll , java.lang.String ) ; CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver = org.springframework.cache.jcache.interceptor.CacheResolver ( org.springframework.cache.jcache.interceptor.CacheResolverFactory , org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheRemoveAll> ) ; return new CacheRemoveAllOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheRemoveAll> , org.springframework.cache.jcache.interceptor.CacheResolver ) ; }  <METHOD_END>
<METHOD_START> private < A extends java.lang.annotation.Annotation > org.springframework.cache.jcache.interceptor.CacheMethodDetails<A> < A > org.springframework.cache.jcache.interceptor.CacheMethodDetails<A> ( java.lang.reflect.Method java.lang.reflect.Method , A A , java.lang.String java.lang.String ) { return new DefaultCacheMethodDetails <> ( java.lang.reflect.Method , A , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.interceptor.CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver ( CacheResolverFactory org.springframework.cache.jcache.interceptor.CacheResolverFactory , CacheMethodDetails < ? > org.springframework.cache.jcache.interceptor.CacheMethodDetails<?> ) { if ( org.springframework.cache.jcache.interceptor.CacheResolverFactory != null ) { javax . javax.cache . javax.cache . javax.cache javax.cache.annotation.CacheResolver = org.springframework.cache.jcache.interceptor.CacheResolverFactory . getCacheResolver ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<> ) ; return new CacheResolverAdapter ( javax.cache.annotation.CacheResolver ) ; } else { return org.springframework.cache.jcache.interceptor.CacheResolver ( ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.interceptor.CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver ( CacheResolverFactory org.springframework.cache.jcache.interceptor.CacheResolverFactory , CacheMethodDetails < CacheResult > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> ) { if ( org.springframework.cache.jcache.interceptor.CacheResolverFactory != null ) { javax . javax.cache . javax.cache . javax.cache javax.cache.annotation.CacheResolver = org.springframework.cache.jcache.interceptor.CacheResolverFactory . getExceptionCacheResolver ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> ) ; return new CacheResolverAdapter ( javax.cache.annotation.CacheResolver ) ; } else { return org.springframework.cache.jcache.interceptor.CacheResolver ( ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.interceptor.CacheResolverFactory org.springframework.cache.jcache.interceptor.CacheResolverFactory ( CacheDefaults org.springframework.cache.jcache.interceptor.CacheDefaults , java.lang.Class<? extends org.springframework.cache.jcache.interceptor.CacheResolverFactory> < ? extends CacheResolverFactory > java.lang.Class<? extends org.springframework.cache.jcache.interceptor.CacheResolverFactory> ) { if ( CacheResolverFactory .class != java.lang.Class<> ) { return getBean ( java.lang.Class<> ) ; } else if ( org.springframework.cache.jcache.interceptor.CacheDefaults != null && CacheResolverFactory .class != org.springframework.cache.jcache.interceptor.CacheDefaults . cacheResolverFactory ( ) ) { return java.lang.Object ( org.springframework.cache.jcache.interceptor.CacheDefaults . cacheResolverFactory ( ) ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.interceptor.KeyGenerator org.springframework.cache.jcache.interceptor.KeyGenerator ( CacheDefaults org.springframework.cache.jcache.interceptor.CacheDefaults , java.lang.Class<? extends org.springframework.cache.jcache.interceptor.CacheKeyGenerator> < ? extends CacheKeyGenerator > java.lang.Class<? extends org.springframework.cache.jcache.interceptor.CacheKeyGenerator> ) { if ( CacheKeyGenerator .class != java.lang.Class<> ) { return new KeyGeneratorAdapter ( this , getBean ( java.lang.Class<> ) ) ; } else if ( org.springframework.cache.jcache.interceptor.CacheDefaults != null && CacheKeyGenerator .class != org.springframework.cache.jcache.interceptor.CacheDefaults . cacheKeyGenerator ( ) ) { return new KeyGeneratorAdapter ( this , java.lang.Object ( org.springframework.cache.jcache.interceptor.CacheDefaults . cacheKeyGenerator ( ) ) ) ; } else { return org.springframework.cache.jcache.interceptor.KeyGenerator ( ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method , CacheDefaults org.springframework.cache.jcache.interceptor.CacheDefaults , java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) ) { return java.lang.String ; } if ( org.springframework.cache.jcache.interceptor.CacheDefaults != null && StringUtils . hasText ( org.springframework.cache.jcache.interceptor.CacheDefaults . cacheName ( ) ) ) { return org.springframework.cache.jcache.interceptor.CacheDefaults . cacheName ( ) ; } return java.lang.String ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( java.lang.Class<?>[] . int ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { java.util.List<java.lang.String> . boolean ( java.lang.Class<> . java.lang.String ( ) ) ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.reflect.Method . java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( StringUtils . collectionToCommaDelimitedString ( java.util.List<java.lang.String> ) ) . append ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.Object ... java.lang.Object[] ) { int int = NUMBER ; for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { if ( java.lang.Object != null ) { int += NUMBER ; } } return int ; }  <METHOD_END>
<METHOD_START> protected abstract < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> );  <METHOD_END>
<METHOD_START> protected abstract org.springframework.cache.jcache.interceptor.CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver ( )  <METHOD_END>
<METHOD_START> protected abstract org.springframework.cache.jcache.interceptor.CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver ( )  <METHOD_END>
<METHOD_START> protected abstract org.springframework.cache.jcache.interceptor.KeyGenerator org.springframework.cache.jcache.interceptor.KeyGenerator ( )  <METHOD_END>
