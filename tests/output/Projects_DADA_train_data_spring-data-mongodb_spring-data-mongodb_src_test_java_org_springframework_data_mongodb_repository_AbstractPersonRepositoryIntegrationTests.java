<METHOD_START> @ Before public void void ( ) java.lang.InterruptedException { org.springframework.data.mongodb.repository.PersonRepository . deleteAll ( ) ; org.springframework.data.mongodb.repository.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setSkills ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.data.mongodb.repository.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setSkills ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING , STRING , STRING ) ) ; org.springframework.data.mongodb.repository.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.Person = new Person ( STRING , STRING , NUMBER , Sex . FEMALE ) ; org.springframework.data.mongodb.repository.QPerson = new QPerson ( STRING ) ; java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.mongodb.repository.PersonRepository . findOne ( org.springframework.data.mongodb.repository.Person . getId ( ) . toString ( ) ) , is ( java.util.Optional . java.util.Optional ( org.springframework.data.mongodb.repository.Person ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findAll ( ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . containsAll ( java.util.List<org.springframework.data.mongodb.repository.Person> ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Iterable<org.springframework.data.mongodb.repository.Person> < Person > java.lang.Iterable<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findAll ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.repository.Person . id , org.springframework.data.mongodb.repository.Person . id ) ) ; assertThat ( java.lang.Iterable<org.springframework.data.mongodb.repository.Person> , hasItems ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.lang.Iterable<org.springframework.data.mongodb.repository.Person> , not ( hasItems ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.repository.PersonRepository . delete ( org.springframework.data.mongodb.repository.Person ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findAll ( ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) - NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , not ( hasItem ( org.springframework.data.mongodb.repository.Person ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.PersonRepository . delete ( org.springframework.data.mongodb.repository.Person . getId ( ) . toString ( ) ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findAll ( ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) - NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , not ( hasItem ( org.springframework.data.mongodb.repository.Person ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLastname ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByThePersonsFirstname ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) . getAge ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByFirstnameLike ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.mongodb.repository.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mongodb.repository.PersonRepository . findByFirstnameLike ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Page < Person > org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findAll ( new PageRequest ( NUMBER , NUMBER , Direction . ASC , STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . isFirst ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . isLast ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> , hasItems ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Page < Person > org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLastnameLike ( STRING , new PageRequest ( NUMBER , NUMBER , Direction . ASC , STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . isFirst ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . isLast ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getNumberOfElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> , hasItems ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Page < Person > org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLastnameLikeWithPageable ( STRING , new PageRequest ( NUMBER , NUMBER , Direction . ASC , STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . isFirst ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . isLast ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getNumberOfElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> , hasItems ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByAgeBetween ( NUMBER , NUMBER ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItems ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Address org.springframework.data.mongodb.repository.Address = new Address ( STRING , STRING , STRING ) ; org.springframework.data.mongodb.repository.Person . setShippingAddresses ( new java.util.HashSet<org.springframework.data.mongodb.repository.Address> < Address > ( java.util.List ( org.springframework.data.mongodb.repository.Address ) ) ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; assertThat ( org.springframework.data.mongodb.repository.PersonRepository . findByShippingAddresses ( org.springframework.data.mongodb.repository.Address ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Address org.springframework.data.mongodb.repository.Address = new Address ( STRING , STRING , STRING ) ; org.springframework.data.mongodb.repository.Person . setAddress ( org.springframework.data.mongodb.repository.Address ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByAddress ( org.springframework.data.mongodb.repository.Address ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Address org.springframework.data.mongodb.repository.Address = new Address ( STRING , STRING , STRING ) ; org.springframework.data.mongodb.repository.Person . setAddress ( org.springframework.data.mongodb.repository.Address ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByAddressZipCode ( org.springframework.data.mongodb.repository.Address . getZipCode ( ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Iterable<org.springframework.data.mongodb.repository.Person> < Person > java.lang.Iterable<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findAll ( org.springframework.data.mongodb.repository.QPerson . lastname . eq ( STRING ) ) ; assertThat ( java.lang.Iterable<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.lang.Iterable<org.springframework.data.mongodb.repository.Person> , not ( hasItems ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Address org.springframework.data.mongodb.repository.Address = new Address ( STRING , STRING , STRING ) ; org.springframework.data.mongodb.repository.Person . setAddress ( org.springframework.data.mongodb.repository.Address ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; java.lang.Iterable<org.springframework.data.mongodb.repository.Person> < Person > java.lang.Iterable<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findAll ( org.springframework.data.mongodb.repository.QPerson . address . zipCode . eq ( STRING ) ) ; assertThat ( java.lang.Iterable<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.lang.Iterable<org.springframework.data.mongodb.repository.Person> , not ( hasItems ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLocationNear ( org.springframework.data.mongodb.repository.Point ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GeoJsonPoint org.springframework.data.mongodb.repository.GeoJsonPoint = new GeoJsonPoint ( - NUMBER , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.GeoJsonPoint ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLocationNear ( org.springframework.data.mongodb.repository.GeoJsonPoint ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLocationWithin ( new Circle ( - NUMBER , NUMBER , NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; Box org.springframework.data.mongodb.repository.Box = new Box ( new Point ( - NUMBER , NUMBER ) , new Point ( - NUMBER , NUMBER ) ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLocationWithin ( org.springframework.data.mongodb.repository.Box ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLocationWithin ( new Polygon ( org.springframework.data.mongodb.repository.Point , org.springframework.data.mongodb.repository.Point , org.springframework.data.mongodb.repository.Point , org.springframework.data.mongodb.repository.Point ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Page < Person > org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findAll ( org.springframework.data.mongodb.repository.QPerson . lastname . contains ( STRING ) , new PageRequest ( NUMBER , NUMBER , Direction . ASC , STRING ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . isFirst ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . isLast ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getNumberOfElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getTotalElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> , hasItems ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findBySex ( Sex . FEMALE ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findBySex ( Sex . MALE , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByNamedQuery ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.repository.PersonRepository . exists ( org.springframework.data.mongodb.repository.Person . getId ( ) ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = DuplicateKeyException .class ) public void void ( ) { assertThat ( org.springframework.data.mongodb.repository.Person . getEmail ( ) , is ( STRING ) ) ; Person org.springframework.data.mongodb.repository.Person = new Person ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.repository.Person . getEmail ( ) , is ( STRING ) ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLastnameOrderByFirstnameAsc ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByFirstnameLikeOrderByLastnameAsc ( STRING , new Sort ( STRING ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; GeoResults < Person > org.springframework.data.mongodb.repository.GeoResults<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLocationNear ( new Point ( - NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . KILOMETERS ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoResults<org.springframework.data.mongodb.repository.Person> . getContent ( ) . isEmpty ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; GeoPage < Person > org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLocationNear ( new Point ( - NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . KILOMETERS ) , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . getContent ( ) . isEmpty ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . getAverageDistance ( ) . getMetric ( ) , is ( ( Metric ) Metrics . KILOMETERS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByAgeLessThan ( NUMBER , new Sort ( STRING ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.MongoOperations . remove ( new org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core ( ) , User .class ) ; User org.springframework.data.mongodb.repository.User = new User ( ) ; user . username = STRING ; org.springframework.data.mongodb.repository.MongoOperations . save ( org.springframework.data.mongodb.repository.User ) ; org.springframework.data.mongodb.repository.Person . creator = org.springframework.data.mongodb.repository.User ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByCreator ( org.springframework.data.mongodb.repository.User ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByCreatedAtLessThan ( org.springframework.data.mongodb.repository.Person . createdAt ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItems ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByCreatedAtGreaterThan ( org.springframework.data.mongodb.repository.Person . createdAt ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItems ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByCreatedAtBefore ( org.springframework.data.mongodb.repository.Person . createdAt ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItems ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByCreatedAtAfter ( org.springframework.data.mongodb.repository.Person . createdAt ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItems ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByCreatedAtLessThanManually ( org.springframework.data.mongodb.repository.Person . createdAt ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . isEmpty ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLastnameNot ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , not ( hasItem ( org.springframework.data.mongodb.repository.Person ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByFirstnameAndLastname ( STRING , STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByFirstnameAndLastname ( STRING , STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UsernameAndPassword org.springframework.data.mongodb.repository.UsernameAndPassword = new UsernameAndPassword ( ) ; usernameAndPassword . username = STRING ; usernameAndPassword . password = STRING ; org.springframework.data.mongodb.repository.Person . credentials = org.springframework.data.mongodb.repository.UsernameAndPassword ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByCredentials ( org.springframework.data.mongodb.repository.UsernameAndPassword ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.repository.PersonRepository . countByLastname ( STRING ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.repository.PersonRepository . countByFirstname ( STRING ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.repository.PersonRepository . someCountQuery ( STRING ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.repository.PersonRepository . existsByFirstname ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.PersonRepository . existsByFirstname ( STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.repository.PersonRepository . someExistQuery ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLastnameStartsWith ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItems ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLastnameEndsWith ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItems ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; GeoPage < Person > org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLocationNear ( new Point ( - NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . KILOMETERS ) , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . getContent ( ) . isEmpty ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . getNumberOfElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . isFirst ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . isLast ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . getAverageDistance ( ) . getMetric ( ) , is ( ( Metric ) Metrics . KILOMETERS ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . getAverageDistance ( ) . getNormalizedValue ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; GeoPage < Person > org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLocationNear ( new Point ( - NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . KILOMETERS ) , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . getContent ( ) . isEmpty ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . getNumberOfElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . isFirst ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . isLast ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . getAverageDistance ( ) . getMetric ( ) , is ( ( Metric ) Metrics . KILOMETERS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; GeoPage < Person > org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLocationNear ( new Point ( - NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . KILOMETERS ) , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . getContent ( ) . isEmpty ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . getNumberOfElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . isFirst ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . isLast ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . getAverageDistance ( ) . getMetric ( ) , is ( ( Metric ) Metrics . KILOMETERS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.Person . setLocation ( new Point ( - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; GeoPage < Person > org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLocationNear ( new Point ( - NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . KILOMETERS ) , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . getContent ( ) . isEmpty ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . getNumberOfElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . isFirst ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . isLast ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.GeoPage<org.springframework.data.mongodb.repository.Person> . getAverageDistance ( ) . getMetric ( ) , is ( ( Metric ) Metrics . KILOMETERS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.mongodb.repository.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mongodb.repository.PersonRepository . findByFirstnameIgnoreCase ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByFirstnameIgnoreCase ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByFirstnameNotIgnoreCase ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , not ( hasItem ( org.springframework.data.mongodb.repository.Person ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByFirstnameStartingWithIgnoreCase ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByFirstnameEndingWithIgnoreCase ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByFirstnameContainingIgnoreCase ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Slice < Person > org.springframework.data.mongodb.repository.Slice<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByAgeGreaterThan ( NUMBER , new PageRequest ( NUMBER , NUMBER , Direction . DESC , STRING ) ) ; assertThat ( org.springframework.data.mongodb.repository.Slice<org.springframework.data.mongodb.repository.Person> . hasNext ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person [] org.springframework.data.mongodb.repository.Person[] = org.springframework.data.mongodb.repository.PersonRepository . findByThePersonsFirstnameAsArray ( STRING ) ; assertThat ( org.springframework.data.mongodb.repository.Person[] , is ( arrayWithSize ( NUMBER ) ) ) ; assertThat ( org.springframework.data.mongodb.repository.Person[] , is ( arrayContaining ( org.springframework.data.mongodb.repository.Person ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.MongoOperations . remove ( new org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core ( ) , User .class ) ; User org.springframework.data.mongodb.repository.User = new User ( ) ; user . username = STRING ; org.springframework.data.mongodb.repository.MongoOperations . save ( org.springframework.data.mongodb.repository.User ) ; org.springframework.data.mongodb.repository.Person . creator = org.springframework.data.mongodb.repository.User ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; Page < Person > org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByHavingCreator ( new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getNumberOfElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getContent ( ) . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . deleteByLastname ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.PersonRepository . deleteByLastname ( STRING ) ; assertThat ( org.springframework.data.mongodb.repository.MongoOperations . count ( new BasicQuery ( STRING ) , Person .class ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.repository.PersonRepository . deletePersonByLastname ( STRING ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.repository.PersonRepository . deletePersonByLastname ( STRING ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.repository.PersonRepository . deleteByLastname ( STRING ) , empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . removeByLastnameUsingAnnotatedQuery ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.PersonRepository . removeByLastnameUsingAnnotatedQuery ( STRING ) ; assertThat ( org.springframework.data.mongodb.repository.MongoOperations . count ( new BasicQuery ( STRING ) , Person .class ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.repository.PersonRepository . removePersonByLastnameUsingAnnotatedQuery ( STRING ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.repository.Person = new Person ( STRING , STRING ) ; Address org.springframework.data.mongodb.repository.Address = new Address ( STRING , STRING , STRING ) ; org.springframework.data.mongodb.repository.Person . setAddress ( org.springframework.data.mongodb.repository.Address ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; Page < Person > org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByAddressIn ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.repository.Address ) , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getContent ( ) , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.PersonRepository . save ( new Person ( STRING , STRING ) ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( new Person ( STRING , STRING ) ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( new Person ( STRING , STRING ) ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( new Person ( STRING , STRING ) ) ; Page < Person > org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByCustomQueryFirstnamesAndLastname ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , STRING , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getContent ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getTotalPages ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getTotalElements ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.PersonRepository . save ( new Person ( STRING , STRING ) . withAddress ( new Address ( STRING , STRING , STRING ) ) ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( new Person ( STRING , STRING ) . withAddress ( new Address ( STRING , STRING , STRING ) ) ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( new Person ( STRING , STRING ) . withAddress ( new Address ( STRING , STRING , STRING ) ) ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( new Person ( STRING , STRING ) ) ; Page < Person > org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByCustomQueryLastnameAndAddressStreetInList ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getContent ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getTotalPages ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getTotalElements ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.PersonRepository . save ( java.util.Arrays . java.util.List ( new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) ) ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findTop3ByLastnameStartingWith ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.PersonRepository . save ( java.util.Arrays . java.util.List ( new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) ) ) ; Page < Person > org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findTop3ByLastnameStartingWith ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getContent ( ) . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getTotalElements ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.PersonRepository . save ( java.util.Arrays . java.util.List ( new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) ) ) ; Page < Person > org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findTop3ByLastnameStartingWith ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getContent ( ) . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.PersonRepository . save ( java.util.Arrays . java.util.List ( new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) ) ) ; Page < Person > org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findTop3ByLastnameStartingWith ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getContent ( ) . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getTotalElements ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Page < Person > org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByLastnameLike ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getContent ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . hasPrevious ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . hasNext ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getTotalElements ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.MongoOperations . remove ( new org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core ( ) , User .class ) ; User org.springframework.data.mongodb.repository.User = new User ( ) ; org.springframework.data.mongodb.repository.User . setUsername ( STRING ) ; org.springframework.data.mongodb.repository.MongoOperations . save ( org.springframework.data.mongodb.repository.User ) ; org.springframework.data.mongodb.repository.Person . setCreator ( org.springframework.data.mongodb.repository.User ) ; org.springframework.data.mongodb.repository.MongoOperations . save ( org.springframework.data.mongodb.repository.Person ) ; assertThat ( org.springframework.data.mongodb.repository.PersonRepository . findOne ( QPerson . person . creator . eq ( org.springframework.data.mongodb.repository.User ) ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.repository.PersonRepository . findAll ( org.springframework.data.mongodb.repository.QPerson . id . in ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.repository.Person . id , org.springframework.data.mongodb.repository.Person . id ) ) ) , containsInAnyOrder ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonSummary org.springframework.data.mongodb.repository.PersonSummary = org.springframework.data.mongodb.repository.PersonRepository . findSummaryByLastname ( STRING ) ; assertThat ( org.springframework.data.mongodb.repository.PersonSummary , is ( notNullValue ( ) ) ) ; assertThat ( result . firstname , is ( STRING ) ) ; assertThat ( result . lastname , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.PersonRepository . deleteAll ( ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = new java.util.ArrayList<org.springframework.data.mongodb.repository.Person> < Person > ( NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<org.springframework.data.mongodb.repository.Person> . add ( new Person ( java.lang.String . java.lang.String ( STRING , int ) , STRING + NUMBER , NUMBER ) ) ; } org.springframework.data.mongodb.repository.PersonRepository . save ( java.util.List<org.springframework.data.mongodb.repository.Person> ) ; Slice < Person > org.springframework.data.mongodb.repository.Slice<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByAgeGreaterThan ( NUMBER , new PageRequest ( NUMBER , NUMBER , Direction . ASC , STRING ) ) ; assertThat ( org.springframework.data.mongodb.repository.Slice<org.springframework.data.mongodb.repository.Person> , contains ( java.util.List<org.springframework.data.mongodb.repository.Person> . subList ( NUMBER , NUMBER ) . toArray ( ) ) ) ; org.springframework.data.mongodb.repository.Slice<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByAgeGreaterThan ( NUMBER , org.springframework.data.mongodb.repository.Slice<org.springframework.data.mongodb.repository.Person> . nextPageable ( ) ) ; assertThat ( org.springframework.data.mongodb.repository.Slice<org.springframework.data.mongodb.repository.Person> , contains ( java.util.List<org.springframework.data.mongodb.repository.Person> . subList ( NUMBER , NUMBER ) . toArray ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByKeyValue ( STRING , org.springframework.data.mongodb.repository.Person . getFirstname ( ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Iterable<org.springframework.data.mongodb.repository.Person> < Person > java.lang.Iterable<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findAll ( org.springframework.data.mongodb.repository.QPerson . firstname . asc ( ) ) ; assertThat ( java.lang.Iterable<org.springframework.data.mongodb.repository.Person> , contains ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.PersonRepository . deleteAll ( ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = new java.util.ArrayList<org.springframework.data.mongodb.repository.Person> < Person > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Person org.springframework.data.mongodb.repository.Person = new Person ( java.lang.String . java.lang.String ( STRING , int ) , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setAddress ( new Address ( java.lang.String . java.lang.String ( STRING , int ) , STRING , STRING ) ) ; java.util.List<org.springframework.data.mongodb.repository.Person> . add ( org.springframework.data.mongodb.repository.Person ) ; } org.springframework.data.mongodb.repository.PersonRepository . save ( java.util.List<org.springframework.data.mongodb.repository.Person> ) ; QPerson org.springframework.data.mongodb.repository.QPerson = QPerson . person ; java.lang.Iterable<org.springframework.data.mongodb.repository.Person> < Person > java.lang.Iterable<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findAll ( person . firstname . isNotNull ( ) , person . address . street . desc ( ) ) ; assertThat ( java.lang.Iterable<org.springframework.data.mongodb.repository.Person> , is ( Matchers .< Person > iterableWithSize ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) ) ) ) ; assertThat ( java.lang.Iterable<org.springframework.data.mongodb.repository.Person> . iterator ( ) . next ( ) . getFirstname ( ) , is ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) . getFirstname ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.repository.PersonRepository . deleteAll ( ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = new java.util.ArrayList<org.springframework.data.mongodb.repository.Person> < Person > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Person org.springframework.data.mongodb.repository.Person = new Person ( java.lang.String . java.lang.String ( STRING , int ) , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setAddress ( new Address ( java.lang.String . java.lang.String ( STRING , int ) , STRING , STRING ) ) ; java.util.List<org.springframework.data.mongodb.repository.Person> . add ( org.springframework.data.mongodb.repository.Person ) ; } org.springframework.data.mongodb.repository.PersonRepository . save ( java.util.List<org.springframework.data.mongodb.repository.Person> ) ; PageRequest org.springframework.data.mongodb.repository.PageRequest = new PageRequest ( NUMBER , NUMBER , new QSort ( org.springframework.data.mongodb.repository.QPerson . address . street . desc ( ) ) ) ; java.lang.Iterable<org.springframework.data.mongodb.repository.Person> < Person > java.lang.Iterable<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findAll ( org.springframework.data.mongodb.repository.PageRequest ) ; assertThat ( java.lang.Iterable<org.springframework.data.mongodb.repository.Person> , is ( Matchers .< Person > iterableWithSize ( NUMBER ) ) ) ; assertThat ( java.lang.Iterable<org.springframework.data.mongodb.repository.Person> . iterator ( ) . next ( ) . getFirstname ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.repository.PersonRepository . deleteAll ( ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = new java.util.ArrayList<org.springframework.data.mongodb.repository.Person> < Person > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Person org.springframework.data.mongodb.repository.Person = new Person ( java.lang.String . java.lang.String ( STRING , int ) , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setAddress ( new Address ( java.lang.String . java.lang.String ( STRING , int ) , STRING , STRING ) ) ; java.util.List<org.springframework.data.mongodb.repository.Person> . add ( org.springframework.data.mongodb.repository.Person ) ; } org.springframework.data.mongodb.repository.PersonRepository . save ( java.util.List<org.springframework.data.mongodb.repository.Person> ) ; java.lang.Iterable<org.springframework.data.mongodb.repository.Person> < Person > java.lang.Iterable<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findAll ( new QSort ( org.springframework.data.mongodb.repository.QPerson . address . street . desc ( ) ) ) ; assertThat ( java.lang.Iterable<org.springframework.data.mongodb.repository.Person> , is ( Matchers .< Person > iterableWithSize ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) ) ) ) ; assertThat ( java.lang.Iterable<org.springframework.data.mongodb.repository.Person> . iterator ( ) . next ( ) . getFirstname ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.stream.Stream<org.springframework.data.mongodb.repository.Person> < Person > java.util.stream.Stream<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByCustomQueryWithStreamingCursorByFirstnames ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; try { assertThat ( java.util.stream.Stream<org.springframework.data.mongodb.repository.Person> . collect ( java.util.stream.Collectors .< Person > java.util.stream.Collector<org.springframework.data.mongodb.repository.Person,?,java.util.List<org.springframework.data.mongodb.repository.Person>> ( ) ) , hasItems ( org.springframework.data.mongodb.repository.Person ) ) ; } finally { java.util.stream.Stream<org.springframework.data.mongodb.repository.Person> . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; Range < Distance > org.springframework.data.mongodb.repository.Range<org.springframework.data.mongodb.repository.Distance> = Distance . between ( new Distance ( NUMBER , KILOMETERS ) , new Distance ( NUMBER , KILOMETERS ) ) ; GeoResults < Person > org.springframework.data.mongodb.repository.GeoResults<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findPersonByLocationNear ( new Point ( - NUMBER , NUMBER ) , org.springframework.data.mongodb.repository.Range<org.springframework.data.mongodb.repository.Distance> ) ; assertThat ( org.springframework.data.mongodb.repository.GeoResults<org.springframework.data.mongodb.repository.Person> . getContent ( ) . isEmpty ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findWithSpelByFirstnameForSpELExpressionWithParameterIndexOnly ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SampleSecurityContextHolder . getCurrent ( ) . setPrincipal ( org.springframework.data.mongodb.repository.Person ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findWithSpelByFirstnameAndCurrentUserWithCustomQuery ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findWithSpelByFirstnameForSpELExpressionWithParameterVariableOnly ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . get ( NUMBER ) , is ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.repository.Person = new Person ( ) ; org.springframework.data.mongodb.repository.Person . setLastname ( STRING ) ; ReflectionTestUtils . setField ( org.springframework.data.mongodb.repository.Person , STRING , null ) ; ReflectionTestUtils . setField ( org.springframework.data.mongodb.repository.Person , STRING , null ) ; ReflectionTestUtils . setField ( org.springframework.data.mongodb.repository.Person , STRING , null ) ; Page < Person > org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findAll ( Example . of ( org.springframework.data.mongodb.repository.Person ) , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.Page<org.springframework.data.mongodb.repository.Person> . getNumberOfElements ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.repository.Person = new Person ( ) ; org.springframework.data.mongodb.repository.Person . setLastname ( STRING ) ; ReflectionTestUtils . setField ( org.springframework.data.mongodb.repository.Person , STRING , null ) ; ReflectionTestUtils . setField ( org.springframework.data.mongodb.repository.Person , STRING , null ) ; ReflectionTestUtils . setField ( org.springframework.data.mongodb.repository.Person , STRING , null ) ; java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findAll ( Example . of ( org.springframework.data.mongodb.repository.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByFirstnameNotContains ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( ( int ) ( org.springframework.data.mongodb.repository.PersonRepository . count ( ) - NUMBER ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , not ( hasItem ( org.springframework.data.mongodb.repository.Person ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findBySkillsContains ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , hasItem ( org.springframework.data.mongodb.repository.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findBySkillsNotContains ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( ( int ) ( org.springframework.data.mongodb.repository.PersonRepository . count ( ) - NUMBER ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , not ( hasItem ( org.springframework.data.mongodb.repository.Person ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.mongodb.repository.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.Person> = org.springframework.data.mongodb.repository.PersonRepository . findByFirstnameNotLike ( STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> . size ( ) , is ( ( int ) ( org.springframework.data.mongodb.repository.PersonRepository . count ( ) - NUMBER ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.Person> , not ( hasItem ( org.springframework.data.mongodb.repository.Person ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.repository.PersonRepository . countByThePersonsFirstname ( STRING ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.PersonRepository . deleteByThePersonsFirstname ( STRING ) ; assertThat ( org.springframework.data.mongodb.repository.PersonRepository . countByThePersonsFirstname ( STRING ) , is ( NUMBER ) ) ; }  <METHOD_END>
