<METHOD_START> protected void ( javax.sql.DataSource javax.sql.DataSource , ResourceLoader org.springframework.boot.autoconfigure.ResourceLoader ) { Assert . notNull ( javax.sql.DataSource , STRING ) ; Assert . notNull ( org.springframework.boot.autoconfigure.ResourceLoader , STRING ) ; this . javax.sql.DataSource = javax.sql.DataSource ; this . org.springframework.boot.autoconfigure.ResourceLoader = org.springframework.boot.autoconfigure.ResourceLoader ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct protected void void ( ) { if ( ! boolean ( ) ) { return; } ResourceDatabasePopulator org.springframework.boot.autoconfigure.ResourceDatabasePopulator = new ResourceDatabasePopulator ( ) ; java.lang.String java.lang.String = java.lang.String ( ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = java.lang.String ( ) ; java.lang.String = java.lang.String . java.lang.String ( java.lang.String , java.lang.String ) ; } org.springframework.boot.autoconfigure.ResourceDatabasePopulator . addScript ( this . org.springframework.boot.autoconfigure.ResourceLoader . getResource ( java.lang.String ) ) ; org.springframework.boot.autoconfigure.ResourceDatabasePopulator . setContinueOnError ( true ) ; DatabasePopulatorUtils . execute ( org.springframework.boot.autoconfigure.ResourceDatabasePopulator , this . javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( )  <METHOD_END>
<METHOD_START> protected abstract java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { try { java.lang.String java.lang.String = JdbcUtils . commonDatabaseName ( JdbcUtils . extractDatabaseMetaData ( this . javax.sql.DataSource , STRING ) . toString ( ) ) ; DatabaseDriver org.springframework.boot.autoconfigure.DatabaseDriver = DatabaseDriver . fromProductName ( java.lang.String ) ; if ( org.springframework.boot.autoconfigure.DatabaseDriver == DatabaseDriver . UNKNOWN ) { throw new java.lang.IllegalStateException ( STRING ) ; } return org.springframework.boot.autoconfigure.DatabaseDriver . getId ( ) ; } catch ( MetaDataAccessException org.springframework.boot.autoconfigure.MetaDataAccessException ) { throw new java.lang.IllegalStateException ( STRING , org.springframework.boot.autoconfigure.MetaDataAccessException ) ; } }  <METHOD_END>
