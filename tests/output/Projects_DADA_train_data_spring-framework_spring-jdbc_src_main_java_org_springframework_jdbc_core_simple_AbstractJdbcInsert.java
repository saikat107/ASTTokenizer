<METHOD_START> protected void ( javax.sql.DataSource javax.sql.DataSource ) { this . org.springframework.jdbc.core.simple.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> protected void ( JdbcTemplate org.springframework.jdbc.core.simple.JdbcTemplate ) { Assert . notNull ( org.springframework.jdbc.core.simple.JdbcTemplate , STRING ) ; this . org.springframework.jdbc.core.simple.JdbcTemplate = org.springframework.jdbc.core.simple.JdbcTemplate ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.core.simple.JdbcTemplate org.springframework.jdbc.core.simple.JdbcTemplate ( ) { return this . org.springframework.jdbc.core.simple.JdbcTemplate ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( ) ; this . org.springframework.jdbc.core.simple.TableMetaDataContext . setTableName ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . org.springframework.jdbc.core.simple.TableMetaDataContext . getTableName ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( ) ; this . org.springframework.jdbc.core.simple.TableMetaDataContext . setSchemaName ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . org.springframework.jdbc.core.simple.TableMetaDataContext . getSchemaName ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( ) ; this . org.springframework.jdbc.core.simple.TableMetaDataContext . setCatalogName ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . org.springframework.jdbc.core.simple.TableMetaDataContext . getCatalogName ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { void ( ) ; this . java.util.List<java.lang.String> . void ( ) ; this . java.util.List<java.lang.String> . boolean ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.Collections . java.util.List<java.lang.String> ( this . java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( ) ; this . java.lang.String[] = new java.lang.String [] { java.lang.String } ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { void ( ) ; this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return this . java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.jdbc.core.simple.TableMetaDataContext . setAccessTableColumnMetaData ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.jdbc.core.simple.TableMetaDataContext . setOverrideIncludeSynonymsDefault ( boolean ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public int [] int[] ( ) { return this . int[] ; }  <METHOD_END>
<METHOD_START> public synchronized final void void ( ) org.springframework.jdbc.core.simple.InvalidDataAccessApiUsageException { if ( ! boolean ( ) ) { if ( java.lang.String ( ) == null ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } try { this . org.springframework.jdbc.core.simple.JdbcTemplate . afterPropertiesSet ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { throw new InvalidDataAccessApiUsageException ( java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } void ( ) ; this . boolean = true ; if ( org.springframework.jdbc.core.simple.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.simple.Log . debug ( STRING + java.lang.String ( ) + STRING ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( ) { this . org.springframework.jdbc.core.simple.TableMetaDataContext . processMetaData ( org.springframework.jdbc.core.simple.JdbcTemplate ( ) . getDataSource ( ) , java.util.List<java.lang.String> ( ) , java.lang.String[] ( ) ) ; this . java.lang.String = this . org.springframework.jdbc.core.simple.TableMetaDataContext . createInsertString ( java.lang.String[] ( ) ) ; this . int[] = this . org.springframework.jdbc.core.simple.TableMetaDataContext . createInsertTypes ( ) ; if ( org.springframework.jdbc.core.simple.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.simple.Log . debug ( STRING + java.lang.String ( ) + STRING ) ; } void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) {	}  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( ! boolean ( ) ) { org.springframework.jdbc.core.simple.Log . debug ( STRING ) ; void ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( boolean ( ) ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> protected int int ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { void ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.List<java.lang.Object> ( java.util.Map<java.lang.String,> ) ; return int ( java.util.List<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> protected int int ( SqlParameterSource org.springframework.jdbc.core.simple.SqlParameterSource ) { void ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.List<java.lang.Object> ( org.springframework.jdbc.core.simple.SqlParameterSource ) ; return int ( java.util.List<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.util.List<?> < ? > java.util.List<?> ) { if ( org.springframework.jdbc.core.simple.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.simple.Log . debug ( STRING + java.lang.String ( ) + STRING + java.util.List<> ) ; } return org.springframework.jdbc.core.simple.JdbcTemplate ( ) . update ( java.lang.String ( ) , java.util.List<> . java.lang.Object[] ( ) , int[] ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Number java.lang.Number ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { void ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.List<java.lang.Object> ( java.util.Map<java.lang.String,> ) ; return java.lang.Number ( java.util.List<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Number java.lang.Number ( SqlParameterSource org.springframework.jdbc.core.simple.SqlParameterSource ) { void ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.List<java.lang.Object> ( org.springframework.jdbc.core.simple.SqlParameterSource ) ; return java.lang.Number ( java.util.List<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jdbc.core.simple.KeyHolder org.springframework.jdbc.core.simple.KeyHolder ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { void ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.List<java.lang.Object> ( java.util.Map<java.lang.String,> ) ; return org.springframework.jdbc.core.simple.KeyHolder ( java.util.List<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jdbc.core.simple.KeyHolder org.springframework.jdbc.core.simple.KeyHolder ( SqlParameterSource org.springframework.jdbc.core.simple.SqlParameterSource ) { void ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.List<java.lang.Object> ( org.springframework.jdbc.core.simple.SqlParameterSource ) ; return org.springframework.jdbc.core.simple.KeyHolder ( java.util.List<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Number java.lang.Number ( final java.util.List<?> < ? > java.util.List<?> ) { KeyHolder org.springframework.jdbc.core.simple.KeyHolder = org.springframework.jdbc.core.simple.KeyHolder ( java.util.List<> ) ; if ( org.springframework.jdbc.core.simple.KeyHolder != null && org.springframework.jdbc.core.simple.KeyHolder . getKey ( ) != null ) { return org.springframework.jdbc.core.simple.KeyHolder . getKey ( ) ; } else { throw new DataIntegrityViolationException ( STRING + java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.jdbc.core.simple.KeyHolder org.springframework.jdbc.core.simple.KeyHolder ( final java.util.List<?> < ? > java.util.List<?> ) { if ( org.springframework.jdbc.core.simple.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.simple.Log . debug ( STRING + java.lang.String ( ) + STRING + java.util.List<> ) ; } final KeyHolder org.springframework.jdbc.core.simple.KeyHolder = new GeneratedKeyHolder ( ) ; if ( this . org.springframework.jdbc.core.simple.TableMetaDataContext . isGetGeneratedKeysSupported ( ) ) { org.springframework.jdbc.core.simple.JdbcTemplate ( ) . update ( new PreparedStatementCreator ( ) { @ java.lang.Override public java.sql.PreparedStatement java.sql.PreparedStatement ( java.sql.Connection java.sql.Connection ) throws java.sql.SQLException { java.sql.PreparedStatement java.sql.PreparedStatement = java.sql.PreparedStatement ( java.sql.Connection ) ; void ( java.sql.PreparedStatement , java.util.List<> , int[] ( ) ) ; return java.sql.PreparedStatement ; } } , org.springframework.jdbc.core.simple.KeyHolder ) ; } else { if ( ! this . org.springframework.jdbc.core.simple.TableMetaDataContext . isGetGeneratedKeysSimulated ( ) ) { throw new InvalidDataAccessResourceUsageException ( STRING ) ; } if ( java.lang.String[] ( ) . int < NUMBER ) { throw new InvalidDataAccessApiUsageException ( STRING + STRING ) ; } if ( java.lang.String[] ( ) . int > NUMBER ) { throw new InvalidDataAccessApiUsageException ( STRING + java.lang.String[] ( ) . int + STRING + java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ( ) ) ) ; } final java.lang.String java.lang.String = this . org.springframework.jdbc.core.simple.TableMetaDataContext . getSimulationQueryForGetGeneratedKey ( this . org.springframework.jdbc.core.simple.TableMetaDataContext . getTableName ( ) , java.lang.String[] ( ) [ NUMBER ] ) ; Assert . notNull ( java.lang.String , STRING ) ; if ( java.lang.String . java.lang.String ( ) . boolean ( STRING ) ) { java.lang.Long java.lang.Long = org.springframework.jdbc.core.simple.JdbcTemplate ( ) . queryForObject ( java.lang.String ( ) + STRING + java.lang.String , java.util.List<> . java.lang.Object[] ( new java.lang.Object [ java.util.List<> . int ( ) ] ) , java.lang.Long .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String[] ( ) [ NUMBER ] , java.lang.Long ) ; org.springframework.jdbc.core.simple.KeyHolder . getKeyList ( ) . add ( java.util.Map<java.lang.String,java.lang.Object> ) ; } else { org.springframework.jdbc.core.simple.JdbcTemplate ( ) . execute ( new ConnectionCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.Connection java.sql.Connection ) throws java.sql.SQLException , org.springframework.jdbc.core.simple.DataAccessException { java.sql.PreparedStatement java.sql.PreparedStatement = null ; try { java.sql.PreparedStatement = java.sql.Connection . java.sql.PreparedStatement ( java.lang.String ( ) ) ; void ( java.sql.PreparedStatement , java.util.List<> , int[] ( ) ) ; java.sql.PreparedStatement . int ( ) ; } finally { JdbcUtils . closeStatement ( java.sql.PreparedStatement ) ; } java.sql.Statement java.sql.Statement = null ; java.sql.ResultSet java.sql.ResultSet = null ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( NUMBER ) ; try { java.sql.Statement = java.sql.Connection . java.sql.Statement ( ) ; java.sql.ResultSet = java.sql.Statement . java.sql.ResultSet ( java.lang.String ) ; if ( java.sql.ResultSet . boolean ( ) ) { long long = java.sql.ResultSet . long ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String[] ( ) [ NUMBER ] , long ) ; org.springframework.jdbc.core.simple.KeyHolder . getKeyList ( ) . add ( java.util.Map<java.lang.String,java.lang.Object> ) ; } } finally { JdbcUtils . closeResultSet ( java.sql.ResultSet ) ; JdbcUtils . closeStatement ( java.sql.Statement ) ; } return null ; } } ) ; } return org.springframework.jdbc.core.simple.KeyHolder ; } return org.springframework.jdbc.core.simple.KeyHolder ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.PreparedStatement java.sql.PreparedStatement ( java.sql.Connection java.sql.Connection ) throws java.sql.SQLException { java.sql.PreparedStatement java.sql.PreparedStatement = java.sql.PreparedStatement ( java.sql.Connection ) ; void ( java.sql.PreparedStatement , java.util.List<> , int[] ( ) ) ; return java.sql.PreparedStatement ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.Connection java.sql.Connection ) throws java.sql.SQLException , org.springframework.jdbc.core.simple.DataAccessException { java.sql.PreparedStatement java.sql.PreparedStatement = null ; try { java.sql.PreparedStatement = java.sql.Connection . java.sql.PreparedStatement ( java.lang.String ( ) ) ; void ( java.sql.PreparedStatement , java.util.List<> , int[] ( ) ) ; java.sql.PreparedStatement . int ( ) ; } finally { JdbcUtils . closeStatement ( java.sql.PreparedStatement ) ; } java.sql.Statement java.sql.Statement = null ; java.sql.ResultSet java.sql.ResultSet = null ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( NUMBER ) ; try { java.sql.Statement = java.sql.Connection . java.sql.Statement ( ) ; java.sql.ResultSet = java.sql.Statement . java.sql.ResultSet ( java.lang.String ) ; if ( java.sql.ResultSet . boolean ( ) ) { long long = java.sql.ResultSet . long ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String[] ( ) [ NUMBER ] , long ) ; org.springframework.jdbc.core.simple.KeyHolder . getKeyList ( ) . add ( java.util.Map<java.lang.String,java.lang.Object> ) ; } } finally { JdbcUtils . closeResultSet ( java.sql.ResultSet ) ; JdbcUtils . closeStatement ( java.sql.Statement ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.sql.PreparedStatement java.sql.PreparedStatement ( java.sql.Connection java.sql.Connection ) throws java.sql.SQLException { if ( java.lang.String[] ( ) . int < NUMBER ) { throw new InvalidDataAccessApiUsageException ( STRING + STRING ) ; } java.sql.PreparedStatement java.sql.PreparedStatement ; if ( this . org.springframework.jdbc.core.simple.TableMetaDataContext . isGeneratedKeysColumnNameArraySupported ( ) ) { if ( org.springframework.jdbc.core.simple.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.simple.Log . debug ( STRING ) ; } java.sql.PreparedStatement = java.sql.Connection . java.sql.PreparedStatement ( java.lang.String ( ) , java.lang.String[] ( ) ) ; } else { if ( org.springframework.jdbc.core.simple.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.simple.Log . debug ( STRING ) ; } java.sql.PreparedStatement = java.sql.Connection . java.sql.PreparedStatement ( java.lang.String ( ) , java.sql.Statement . int ) ; } return java.sql.PreparedStatement ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected int [] int[] ( java.util.Map<java.lang.String,?> < java.lang.String , ? > ... java.util.Map<java.lang.String,?>[] ) { void ( ) ; java.util.List<java.util.List<java.lang.Object>> < java.util.List<java.lang.Object> < java.lang.Object > > java.util.List<java.util.List<java.lang.Object>> = new java.util.ArrayList<java.util.List<java.lang.Object>> <> ( java.util.Map<java.lang.String,?>[] . int ) ; for ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> : java.util.Map<java.lang.String,?>[] ) { java.util.List<java.util.List<java.lang.Object>> . boolean ( java.util.List<java.lang.Object> ( java.util.Map<java.lang.String,> ) ) ; } return int[] ( java.util.List<java.util.List<java.lang.Object>> ) ; }  <METHOD_END>
<METHOD_START> protected int [] int[] ( SqlParameterSource ... org.springframework.jdbc.core.simple.SqlParameterSource[] ) { void ( ) ; java.util.List<java.util.List<java.lang.Object>> < java.util.List<java.lang.Object> < java.lang.Object > > java.util.List<java.util.List<java.lang.Object>> = new java.util.ArrayList <> ( batch . length ) ; for ( SqlParameterSource org.springframework.jdbc.core.simple.SqlParameterSource : org.springframework.jdbc.core.simple.SqlParameterSource[] ) { java.util.List<java.util.List<java.lang.Object>> . boolean ( java.util.List<java.lang.Object> ( org.springframework.jdbc.core.simple.SqlParameterSource ) ) ; } return int[] ( java.util.List<java.util.List<java.lang.Object>> ) ; }  <METHOD_END>
<METHOD_START> private int [] int[] ( final java.util.List<java.util.List<java.lang.Object>> < java.util.List<java.lang.Object> < java.lang.Object > > java.util.List<java.util.List<java.lang.Object>> ) { if ( org.springframework.jdbc.core.simple.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.simple.Log . debug ( STRING + java.lang.String ( ) + STRING + java.util.List<java.util.List<java.lang.Object>> . int ( ) ) ; } return org.springframework.jdbc.core.simple.JdbcTemplate ( ) . batchUpdate ( java.lang.String ( ) , new BatchPreparedStatementSetter ( ) { @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int ) throws java.sql.SQLException { void ( java.sql.PreparedStatement , java.util.List<java.util.List<java.lang.Object>> . java.util.List<java.lang.Object> ( int ) , int[] ( ) ) ; } @ java.lang.Override public int int ( ) { return java.util.List<java.util.List<java.lang.Object>> . int ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int ) throws java.sql.SQLException { void ( java.sql.PreparedStatement , java.util.List<java.util.List<java.lang.Object>> . java.util.List<java.lang.Object> ( int ) , int[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.util.List<java.util.List<java.lang.Object>> . int ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.sql.PreparedStatement java.sql.PreparedStatement , java.util.List<?> < ? > java.util.List<?> , int ... int[] )			throws java.sql.SQLException { int int = NUMBER ; for ( java.lang.Object java.lang.Object : java.util.List<> ) { int ++ ; if ( int[] == null || int > int[] . int ) { StatementCreatorUtils . setParameterValue ( java.sql.PreparedStatement , int , SqlTypeValue . TYPE_UNKNOWN , java.lang.Object ) ; } else { StatementCreatorUtils . setParameterValue ( java.sql.PreparedStatement , int , int[] [ int - NUMBER ] , java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( SqlParameterSource org.springframework.jdbc.core.simple.SqlParameterSource ) { return this . org.springframework.jdbc.core.simple.TableMetaDataContext . matchInParameterValuesWithInsertColumns ( org.springframework.jdbc.core.simple.SqlParameterSource ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { return this . org.springframework.jdbc.core.simple.TableMetaDataContext . matchInParameterValuesWithInsertColumns ( java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
