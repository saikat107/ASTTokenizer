<METHOD_START> public void ( ) { setFallbackTranslator ( new SQLStateSQLExceptionTranslator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.support.DataAccessException org.springframework.jdbc.support.DataAccessException ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.sql.SQLException java.sql.SQLException ) { if ( java.sql.SQLException instanceof java.sql.SQLTransientException ) { if ( java.sql.SQLException instanceof java.sql.SQLTransientConnectionException ) { return new TransientDataAccessResourceException ( buildMessage ( java.lang.String , java.lang.String , java.sql.SQLException ) , java.sql.SQLException ) ; } else if ( java.sql.SQLException instanceof java.sql.SQLTransactionRollbackException ) { return new ConcurrencyFailureException ( buildMessage ( java.lang.String , java.lang.String , java.sql.SQLException ) , java.sql.SQLException ) ; } else if ( java.sql.SQLException instanceof java.sql.SQLTimeoutException ) { return new QueryTimeoutException ( buildMessage ( java.lang.String , java.lang.String , java.sql.SQLException ) , java.sql.SQLException ) ; } } else if ( java.sql.SQLException instanceof java.sql.SQLNonTransientException ) { if ( java.sql.SQLException instanceof java.sql.SQLNonTransientConnectionException ) { return new DataAccessResourceFailureException ( buildMessage ( java.lang.String , java.lang.String , java.sql.SQLException ) , java.sql.SQLException ) ; } else if ( java.sql.SQLException instanceof java.sql.SQLDataException ) { return new DataIntegrityViolationException ( buildMessage ( java.lang.String , java.lang.String , java.sql.SQLException ) , java.sql.SQLException ) ; } else if ( java.sql.SQLException instanceof java.sql.SQLIntegrityConstraintViolationException ) { return new DataIntegrityViolationException ( buildMessage ( java.lang.String , java.lang.String , java.sql.SQLException ) , java.sql.SQLException ) ; } else if ( java.sql.SQLException instanceof java.sql.SQLInvalidAuthorizationSpecException ) { return new PermissionDeniedDataAccessException ( buildMessage ( java.lang.String , java.lang.String , java.sql.SQLException ) , java.sql.SQLException ) ; } else if ( java.sql.SQLException instanceof java.sql.SQLSyntaxErrorException ) { return new BadSqlGrammarException ( java.lang.String , java.lang.String , java.sql.SQLException ) ; } else if ( java.sql.SQLException instanceof java.sql.SQLFeatureNotSupportedException ) { return new InvalidDataAccessApiUsageException ( buildMessage ( java.lang.String , java.lang.String , java.sql.SQLException ) , java.sql.SQLException ) ; } } else if ( java.sql.SQLException instanceof java.sql.SQLRecoverableException ) { return new RecoverableDataAccessException ( buildMessage ( java.lang.String , java.lang.String , java.sql.SQLException ) , java.sql.SQLException ) ; } return null ; }  <METHOD_END>
