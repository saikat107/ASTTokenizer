<METHOD_START> @ Before public void void ( ) { org.springframework.cache.ehcache.CacheManager = new CacheManager ( new Configuration ( ) . name ( STRING ) . defaultCache ( new CacheConfiguration ( STRING , NUMBER ) ) ) ; void ( CACHE_NAME ) ; org.springframework.cache.ehcache.EhCacheCacheManager = new EhCacheCacheManager ( org.springframework.cache.ehcache.CacheManager ) ; org.springframework.cache.ehcache.EhCacheCacheManager . setTransactionAware ( false ) ; org.springframework.cache.ehcache.EhCacheCacheManager . afterPropertiesSet ( ) ; org.springframework.cache.ehcache.EhCacheCacheManager = new EhCacheCacheManager ( org.springframework.cache.ehcache.CacheManager ) ; org.springframework.cache.ehcache.EhCacheCacheManager . setTransactionAware ( true ) ; org.springframework.cache.ehcache.EhCacheCacheManager . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.cache.ehcache.CacheManager . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cache.ehcache.EhCacheCacheManager org.springframework.cache.ehcache.EhCacheCacheManager ( boolean boolean ) { if ( boolean ) { return org.springframework.cache.ehcache.EhCacheCacheManager ; } else { return org.springframework.cache.ehcache.EhCacheCacheManager ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<? extends org.springframework.cache.Cache> < ? extends org . springframework . cache . org.springframework.cache.Cache > java.lang.Class<? extends org.springframework.cache.Cache> ( ) { return EhCacheCache .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { org.springframework.cache.ehcache.CacheManager . addCache ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { org.springframework.cache.ehcache.CacheManager . removeCache ( java.lang.String ) ; }  <METHOD_END>
