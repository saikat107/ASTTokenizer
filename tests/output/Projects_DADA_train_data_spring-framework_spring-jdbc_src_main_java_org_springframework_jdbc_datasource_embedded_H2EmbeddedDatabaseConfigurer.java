<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static synchronized org.springframework.jdbc.datasource.embedded.H2EmbeddedDatabaseConfigurer org.springframework.jdbc.datasource.embedded.H2EmbeddedDatabaseConfigurer ( ) java.lang.ClassNotFoundException { if ( org.springframework.jdbc.datasource.embedded.H2EmbeddedDatabaseConfigurer == null ) { org.springframework.jdbc.datasource.embedded.H2EmbeddedDatabaseConfigurer = new org.springframework.jdbc.datasource.embedded.H2EmbeddedDatabaseConfigurer ( ( java.lang.Class<? extends java.sql.Driver> < ? extends java.sql.Driver > ) ClassUtils . forName ( STRING , org.springframework.jdbc.datasource.embedded.H2EmbeddedDatabaseConfigurer .class . java.lang.ClassLoader ( ) ) ) ; } return org.springframework.jdbc.datasource.embedded.H2EmbeddedDatabaseConfigurer ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Class<? extends java.sql.Driver> < ? extends java.sql.Driver > java.lang.Class<? extends java.sql.Driver> ) { this . java.lang.Class<? extends java.sql.Driver> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConnectionProperties org.springframework.jdbc.datasource.embedded.ConnectionProperties , java.lang.String java.lang.String ) { org.springframework.jdbc.datasource.embedded.ConnectionProperties . setDriverClass ( this . java.lang.Class<> ) ; org.springframework.jdbc.datasource.embedded.ConnectionProperties . setUrl ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; org.springframework.jdbc.datasource.embedded.ConnectionProperties . setUsername ( STRING ) ; org.springframework.jdbc.datasource.embedded.ConnectionProperties . setPassword ( STRING ) ; }  <METHOD_END>
