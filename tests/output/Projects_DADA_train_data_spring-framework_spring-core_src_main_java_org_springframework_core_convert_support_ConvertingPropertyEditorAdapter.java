<METHOD_START> public void ( ConversionService org.springframework.core.convert.support.ConversionService , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { Assert . notNull ( org.springframework.core.convert.support.ConversionService , STRING ) ; Assert . notNull ( org.springframework.core.convert.support.TypeDescriptor , STRING ) ; this . org.springframework.core.convert.support.ConversionService = org.springframework.core.convert.support.ConversionService ; this . org.springframework.core.convert.support.TypeDescriptor = org.springframework.core.convert.support.TypeDescriptor ; this . boolean = org.springframework.core.convert.support.ConversionService . canConvert ( this . org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor . valueOf ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( this . org.springframework.core.convert.support.ConversionService . convert ( java.lang.String , TypeDescriptor . valueOf ( java.lang.String .class ) , this . org.springframework.core.convert.support.TypeDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { if ( this . boolean ) { return ( java.lang.String ) this . org.springframework.core.convert.support.ConversionService . convert ( java.lang.Object ( ) , this . org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor . valueOf ( java.lang.String .class ) ) ; } else { return null ; } }  <METHOD_END>
