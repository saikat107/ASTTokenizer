<METHOD_START> public void ( ) { super( org.springframework.boot.actuate.endpoint.EnvironmentEndpointTests.Config .class , EnvironmentEndpoint .class , STRING , true , STRING ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ After public void void ( ) { java.lang.System . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( getEndpointBean ( ) . invoke ( ) ) . isNotEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { EnvironmentEndpoint org.springframework.boot.actuate.endpoint.EnvironmentEndpoint = getEndpointBean ( ) ; CompositePropertySource org.springframework.boot.actuate.endpoint.CompositePropertySource = new CompositePropertySource ( STRING ) ; org.springframework.boot.actuate.endpoint.CompositePropertySource . addPropertySource ( new MapPropertySource ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , ( java.lang.Object ) STRING ) ) ) ; org.springframework.boot.actuate.endpoint.CompositePropertySource . addPropertySource ( new MapPropertySource ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , ( java.lang.Object ) STRING ) ) ) ; this . context . getEnvironment ( ) . getPropertySources ( ) . addFirst ( org.springframework.boot.actuate.endpoint.CompositePropertySource ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.EnvironmentEndpoint . invoke ( ) ; assertThat ( ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; EnvironmentEndpoint org.springframework.boot.actuate.endpoint.EnvironmentEndpoint = getEndpointBean ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.EnvironmentEndpoint . invoke ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; EnvironmentEndpoint org.springframework.boot.actuate.endpoint.EnvironmentEndpoint = getEndpointBean ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.EnvironmentEndpoint . invoke ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; EnvironmentEndpoint org.springframework.boot.actuate.endpoint.EnvironmentEndpoint = getEndpointBean ( ) ; org.springframework.boot.actuate.endpoint.EnvironmentEndpoint . setKeysToSanitize ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.EnvironmentEndpoint . invoke ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; EnvironmentEndpoint org.springframework.boot.actuate.endpoint.EnvironmentEndpoint = getEndpointBean ( ) ; org.springframework.boot.actuate.endpoint.EnvironmentEndpoint . setKeysToSanitize ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.EnvironmentEndpoint . invoke ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { this . context = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . context , STRING ) ; this . context . register ( org.springframework.boot.actuate.endpoint.EnvironmentEndpointTests.Config .class ) ; this . context . refresh ( ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; EnvironmentEndpoint org.springframework.boot.actuate.endpoint.EnvironmentEndpoint = getEndpointBean ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.EnvironmentEndpoint . invoke ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { this . context = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . context , STRING ) ; this . context . register ( org.springframework.boot.actuate.endpoint.EnvironmentEndpointTests.Config .class ) ; this . context . refresh ( ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; EnvironmentEndpoint org.springframework.boot.actuate.endpoint.EnvironmentEndpoint = getEndpointBean ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.EnvironmentEndpoint . invoke ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { this . context = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . context , STRING ) ; this . context . register ( org.springframework.boot.actuate.endpoint.EnvironmentEndpointTests.Config .class ) ; this . context . refresh ( ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; EnvironmentEndpoint org.springframework.boot.actuate.endpoint.EnvironmentEndpoint = getEndpointBean ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.EnvironmentEndpoint . invoke ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { this . context = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . context , STRING , STRING ) ; this . context . register ( org.springframework.boot.actuate.endpoint.EnvironmentEndpointTests.Config .class ) ; this . context . refresh ( ) ; EnvironmentEndpoint org.springframework.boot.actuate.endpoint.EnvironmentEndpoint = getEndpointBean ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.EnvironmentEndpoint . invoke ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { this . context = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . context , STRING ) ; this . context . register ( org.springframework.boot.actuate.endpoint.EnvironmentEndpointTests.Config .class ) ; this . context . refresh ( ) ; EnvironmentEndpoint org.springframework.boot.actuate.endpoint.EnvironmentEndpoint = getEndpointBean ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.EnvironmentEndpoint . invoke ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { this . context = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . context , STRING , STRING ) ; this . context . register ( org.springframework.boot.actuate.endpoint.EnvironmentEndpointTests.Config .class ) ; this . context . refresh ( ) ; EnvironmentEndpoint org.springframework.boot.actuate.endpoint.EnvironmentEndpoint = getEndpointBean ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.EnvironmentEndpoint . invoke ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { this . context = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . context , STRING ) ; this . context . register ( org.springframework.boot.actuate.endpoint.EnvironmentEndpointTests.Config .class ) ; this . context . refresh ( ) ; EnvironmentEndpoint org.springframework.boot.actuate.endpoint.EnvironmentEndpoint = getEndpointBean ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.EnvironmentEndpoint . invoke ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.EnvironmentEndpoint org.springframework.boot.actuate.endpoint.EnvironmentEndpoint ( ) { return new EnvironmentEndpoint ( ) ; }  <METHOD_END>
