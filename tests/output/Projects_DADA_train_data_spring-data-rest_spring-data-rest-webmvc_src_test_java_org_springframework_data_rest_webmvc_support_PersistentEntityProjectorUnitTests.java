<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.rest.webmvc.support.ProjectionDefinitionConfiguration = new ProjectionDefinitionConfiguration ( ) ; this . org.springframework.data.rest.webmvc.support.ProjectionFactory = new SpelAwareProxyProjectionFactory ( ) ; this . org.springframework.data.rest.webmvc.support.Projector = new PersistentEntityProjector ( org.springframework.data.rest.webmvc.support.ProjectionDefinitionConfiguration , org.springframework.data.rest.webmvc.support.ProjectionFactory , STRING , org.springframework.data.rest.webmvc.support.ResourceMappings ) ; ResourceMetadata org.springframework.data.rest.webmvc.support.ResourceMetadata = mock ( ResourceMetadata .class ) ; doReturn ( org.springframework.data.rest.webmvc.support.ResourceMetadata ) . when ( org.springframework.data.rest.webmvc.support.ResourceMappings ) . getMetadataFor ( java.lang.Object .class ) ; doReturn ( org.springframework.data.rest.webmvc.support.PersistentEntityProjectorUnitTests.Excerpt .class ) . when ( org.springframework.data.rest.webmvc.support.ResourceMetadata ) . getExcerptProjection ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.Projector . project ( java.lang.Object ) ) . isEqualTo ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.rest.webmvc.support.ProjectionDefinitionConfiguration . addProjection ( org.springframework.data.rest.webmvc.support.PersistentEntityProjectorUnitTests.Sample .class , java.lang.Object .class ) ; assertThat ( org.springframework.data.rest.webmvc.support.Projector . project ( new java.lang.Object ( ) ) ) . isInstanceOf ( org.springframework.data.rest.webmvc.support.PersistentEntityProjectorUnitTests.Sample .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.rest.webmvc.support.ProjectionDefinitionConfiguration . addProjection ( org.springframework.data.rest.webmvc.support.PersistentEntityProjectorUnitTests.Sample .class , java.lang.Object .class ) ; assertThat ( org.springframework.data.rest.webmvc.support.Projector . projectExcerpt ( new java.lang.Object ( ) ) ) . isInstanceOf ( org.springframework.data.rest.webmvc.support.PersistentEntityProjectorUnitTests.Sample .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.rest.webmvc.support.Projector . projectExcerpt ( new java.lang.Object ( ) ) ) . isInstanceOf ( org.springframework.data.rest.webmvc.support.PersistentEntityProjectorUnitTests.Excerpt .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.rest.webmvc.support.ProjectionDefinitionConfiguration . addProjection ( org.springframework.data.rest.webmvc.support.PersistentEntityProjectorUnitTests.Sample .class , java.lang.Object .class ) ; PersistentEntityProjector org.springframework.data.rest.webmvc.support.PersistentEntityProjector = new PersistentEntityProjector ( org.springframework.data.rest.webmvc.support.ProjectionDefinitionConfiguration , org.springframework.data.rest.webmvc.support.ProjectionFactory , null , org.springframework.data.rest.webmvc.support.ResourceMappings ) ; assertThat ( org.springframework.data.rest.webmvc.support.PersistentEntityProjector . projectExcerpt ( new java.lang.Object ( ) ) ) . isInstanceOf ( org.springframework.data.rest.webmvc.support.PersistentEntityProjectorUnitTests.Excerpt .class ) ; }  <METHOD_END>
