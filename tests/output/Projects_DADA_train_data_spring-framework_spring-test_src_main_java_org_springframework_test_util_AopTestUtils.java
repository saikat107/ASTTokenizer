<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; try { if ( AopUtils . isAopProxy ( java.lang.Object ) && java.lang.Object instanceof Advised ) { return ( T ) ( ( Advised ) java.lang.Object ) . getTargetSource ( ) . getTarget ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; try { if ( AopUtils . isAopProxy ( java.lang.Object ) && java.lang.Object instanceof Advised ) { return ( T ) java.lang.Object ( ( ( Advised ) java.lang.Object ) . getTargetSource ( ) . getTarget ( ) ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } return ( T ) java.lang.Object ; }  <METHOD_END>
