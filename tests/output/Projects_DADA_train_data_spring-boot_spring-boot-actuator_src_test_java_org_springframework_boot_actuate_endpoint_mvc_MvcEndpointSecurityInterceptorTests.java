<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ; this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor = new MvcEndpointSecurityInterceptor ( true , this . java.util.List<java.lang.String> ) ; this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptorTests.TestEndpoint = new org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptorTests.TestEndpoint ( STRING ) ; this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptorTests.TestMvcEndpoint = new org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptorTests.TestMvcEndpoint ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptorTests.TestEndpoint ) ; this . org.springframework.boot.actuate.endpoint.mvc.HandlerMethod = new HandlerMethod ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptorTests.TestMvcEndpoint , STRING ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockServletContext = new MockServletContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest = new MockHttpServletRequest ( this . org.springframework.boot.actuate.endpoint.mvc.MockServletContext ) ; this . org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse = mock ( HttpServletResponse .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor = new MvcEndpointSecurityInterceptor ( false , this . java.util.List<java.lang.String> ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor . preHandle ( this . org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest , this . org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse , this . org.springframework.boot.actuate.endpoint.mvc.HandlerMethod ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptorTests.TestEndpoint . setSensitive ( false ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor . preHandle ( this . org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest , this . org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse , this . org.springframework.boot.actuate.endpoint.mvc.HandlerMethod ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockServletContext . declareRoles ( STRING ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor . preHandle ( this . org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest , this . org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse , this . org.springframework.boot.actuate.endpoint.mvc.HandlerMethod ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor . preHandle ( this . org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest , this . org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse , this . org.springframework.boot.actuate.endpoint.mvc.HandlerMethod ) ) . isFalse ( ) ; verify ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse ) . sendError ( HttpStatus . UNAUTHORIZED . value ( ) , STRING ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor . preHandle ( this . org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest , this . org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse , this . org.springframework.boot.actuate.endpoint.mvc.HandlerMethod ) ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.OutputCapture . toString ( ) ) . containsOnlyOnce ( STRING + STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.security.Principal java.security.Principal = mock ( java.security.Principal .class ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest . setUserPrincipal ( java.security.Principal ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockServletContext . declareRoles ( STRING ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor . preHandle ( this . org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest , this . org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse , this . org.springframework.boot.actuate.endpoint.mvc.HandlerMethod ) ) . isFalse ( ) ; verify ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse ) . sendError ( HttpStatus . FORBIDDEN . value ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.security.Principal java.security.Principal = mock ( java.security.Principal .class ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest . setUserPrincipal ( java.security.Principal ) ; Authentication org.springframework.boot.actuate.endpoint.mvc.Authentication = mock ( Authentication .class ) ; java.util.Set<org.springframework.boot.actuate.endpoint.mvc.SimpleGrantedAuthority> < SimpleGrantedAuthority > java.util.Set<org.springframework.boot.actuate.endpoint.mvc.SimpleGrantedAuthority> = java.util.Collections . java.util.Set ( new SimpleGrantedAuthority ( STRING ) ) ; doReturn ( java.util.Set<org.springframework.boot.actuate.endpoint.mvc.SimpleGrantedAuthority> ) . when ( org.springframework.boot.actuate.endpoint.mvc.Authentication ) . getAuthorities ( ) ; SecurityContextHolder . getContext ( ) . setAuthentication ( org.springframework.boot.actuate.endpoint.mvc.Authentication ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor . preHandle ( this . org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest , this . org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse , this . org.springframework.boot.actuate.endpoint.mvc.HandlerMethod ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.security.Principal java.security.Principal = mock ( java.security.Principal .class ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest . setUserPrincipal ( java.security.Principal ) ; Authentication org.springframework.boot.actuate.endpoint.mvc.Authentication = mock ( Authentication .class ) ; java.util.Set<org.springframework.boot.actuate.endpoint.mvc.SimpleGrantedAuthority> < SimpleGrantedAuthority > java.util.Set<org.springframework.boot.actuate.endpoint.mvc.SimpleGrantedAuthority> = java.util.Collections . java.util.Set ( new SimpleGrantedAuthority ( STRING ) ) ; doReturn ( java.util.Set<org.springframework.boot.actuate.endpoint.mvc.SimpleGrantedAuthority> ) . when ( org.springframework.boot.actuate.endpoint.mvc.Authentication ) . getAuthorities ( ) ; SecurityContextHolder . getContext ( ) . setAuthentication ( org.springframework.boot.actuate.endpoint.mvc.Authentication ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor . preHandle ( this . org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest , this . org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse , this . org.springframework.boot.actuate.endpoint.mvc.HandlerMethod ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> void ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptorTests.TestEndpoint org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptorTests.TestEndpoint ) { super( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptorTests.TestEndpoint ); }  <METHOD_END>
