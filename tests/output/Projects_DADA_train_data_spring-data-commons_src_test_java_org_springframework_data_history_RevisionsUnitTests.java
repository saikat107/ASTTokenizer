<METHOD_START> @ Before public void void ( ) { when ( org.springframework.data.history.RevisionMetadata<java.lang.Integer> . getRevisionNumber ( ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.Integer> ( NUMBER ) ) ; when ( org.springframework.data.history.RevisionMetadata . getRevisionNumber ( ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.Integer> ( NUMBER ) ) ; org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object> = Revision . of ( org.springframework.data.history.RevisionMetadata<java.lang.Integer> , new java.lang.Object ( ) ) ; org.springframework.data.history.Revision = Revision . of ( org.springframework.data.history.RevisionMetadata , new java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( Revisions . of ( java.util.Arrays . java.util.List ( org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object> , org.springframework.data.history.Revision ) ) . getLatestRevision ( ) ) . isEqualTo ( org.springframework.data.history.Revision ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Revisions < java.lang.Integer , java.lang.Object > org.springframework.data.history.Revisions<java.lang.Integer,java.lang.Object> = Revisions . of ( java.util.Arrays . java.util.List ( org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object> , org.springframework.data.history.Revision ) ) ; java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> < Revision < java.lang.Integer , java.lang.Object > > java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> = org.springframework.data.history.Revisions<java.lang.Integer,java.lang.Object> . iterator ( ) ; assertThat ( java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> . hasNext ( ) ) . isTrue ( ) ; assertThat ( java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> . next ( ) ) . isEqualTo ( org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object> ) ; assertThat ( java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> . hasNext ( ) ) . isTrue ( ) ; assertThat ( java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> . next ( ) ) . isEqualTo ( org.springframework.data.history.Revision ) ; assertThat ( java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> . hasNext ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( Revisions . of ( java.util.Arrays . java.util.List ( org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object> , org.springframework.data.history.Revision ) ) . reverse ( ) . getLatestRevision ( ) ) . isEqualTo ( org.springframework.data.history.Revision ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Revisions < java.lang.Integer , java.lang.Object > org.springframework.data.history.Revisions<java.lang.Integer,java.lang.Object> = Revisions . of ( java.util.Arrays . java.util.List ( org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object> , org.springframework.data.history.Revision ) ) ; java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> < Revision < java.lang.Integer , java.lang.Object > > java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> = org.springframework.data.history.Revisions<java.lang.Integer,java.lang.Object> . reverse ( ) . iterator ( ) ; assertThat ( java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> . hasNext ( ) ) . isTrue ( ) ; assertThat ( java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> . next ( ) ) . isEqualTo ( org.springframework.data.history.Revision ) ; assertThat ( java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> . hasNext ( ) ) . isTrue ( ) ; assertThat ( java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> . next ( ) ) . isEqualTo ( org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object> ) ; assertThat ( java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> . hasNext ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Revisions < java.lang.Integer , java.lang.Object > org.springframework.data.history.Revisions<java.lang.Integer,java.lang.Object> = Revisions . of ( java.util.Arrays . java.util.List ( org.springframework.data.history.Revision , org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object> ) ) ; java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> < Revision < java.lang.Integer , java.lang.Object > > java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> = org.springframework.data.history.Revisions<java.lang.Integer,java.lang.Object> . iterator ( ) ; assertThat ( java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> . hasNext ( ) ) . isTrue ( ) ; assertThat ( java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> . next ( ) ) . isEqualTo ( org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object> ) ; assertThat ( java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> . hasNext ( ) ) . isTrue ( ) ; assertThat ( java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> . next ( ) ) . isEqualTo ( org.springframework.data.history.Revision ) ; assertThat ( java.util.Iterator<org.springframework.data.history.Revision<java.lang.Integer,java.lang.Object>> . hasNext ( ) ) . isFalse ( ) ; }  <METHOD_END>
