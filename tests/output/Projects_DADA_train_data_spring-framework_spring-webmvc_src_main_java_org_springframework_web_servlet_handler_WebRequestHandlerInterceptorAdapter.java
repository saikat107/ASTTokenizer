<METHOD_START> public void ( WebRequestInterceptor org.springframework.web.servlet.handler.WebRequestInterceptor ) { Assert . notNull ( org.springframework.web.servlet.handler.WebRequestInterceptor , STRING ) ; this . org.springframework.web.servlet.handler.WebRequestInterceptor = org.springframework.web.servlet.handler.WebRequestInterceptor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.handler.HttpServletResponse , java.lang.Object java.lang.Object )			throws java.lang.Exception { this . org.springframework.web.servlet.handler.WebRequestInterceptor . preHandle ( new DispatcherServletWebRequest ( org.springframework.web.servlet.handler.HttpServletRequest , org.springframework.web.servlet.handler.HttpServletResponse ) ) ; return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.handler.HttpServletResponse , java.lang.Object java.lang.Object , ModelAndView org.springframework.web.servlet.handler.ModelAndView )			throws java.lang.Exception { this . org.springframework.web.servlet.handler.WebRequestInterceptor . postHandle ( new DispatcherServletWebRequest ( org.springframework.web.servlet.handler.HttpServletRequest , org.springframework.web.servlet.handler.HttpServletResponse ) , ( org.springframework.web.servlet.handler.ModelAndView != null && ! org.springframework.web.servlet.handler.ModelAndView . wasCleared ( ) ? org.springframework.web.servlet.handler.ModelAndView . getModelMap ( ) : null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.handler.HttpServletResponse , java.lang.Object java.lang.Object , java.lang.Exception java.lang.Exception )			throws java.lang.Exception { this . org.springframework.web.servlet.handler.WebRequestInterceptor . afterCompletion ( new DispatcherServletWebRequest ( org.springframework.web.servlet.handler.HttpServletRequest , org.springframework.web.servlet.handler.HttpServletResponse ) , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.handler.HttpServletResponse , java.lang.Object java.lang.Object ) { if ( this . org.springframework.web.servlet.handler.WebRequestInterceptor instanceof AsyncWebRequestInterceptor ) { AsyncWebRequestInterceptor org.springframework.web.servlet.handler.AsyncWebRequestInterceptor = ( AsyncWebRequestInterceptor ) this . org.springframework.web.servlet.handler.WebRequestInterceptor ; DispatcherServletWebRequest org.springframework.web.servlet.handler.DispatcherServletWebRequest = new DispatcherServletWebRequest ( org.springframework.web.servlet.handler.HttpServletRequest , org.springframework.web.servlet.handler.HttpServletResponse ) ; org.springframework.web.servlet.handler.AsyncWebRequestInterceptor . afterConcurrentHandlingStarted ( org.springframework.web.servlet.handler.DispatcherServletWebRequest ) ; } }  <METHOD_END>
