<METHOD_START> protected void ( MockMvc org.springframework.test.web.servlet.htmlunit.MockMvc ) { Assert . notNull ( org.springframework.test.web.servlet.htmlunit.MockMvc , STRING ) ; this . org.springframework.test.web.servlet.htmlunit.MockMvc = org.springframework.test.web.servlet.htmlunit.MockMvc ; this . java.util.List<org.springframework.test.web.servlet.htmlunit.WebRequestMatcher> . add ( new HostRequestMatcher ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> protected void ( WebApplicationContext org.springframework.test.web.servlet.htmlunit.WebApplicationContext ) { this( MockMvcBuilders . webAppContextSetup ( org.springframework.test.web.servlet.htmlunit.WebApplicationContext ) . build ( ) ); }  <METHOD_END>
<METHOD_START> protected void ( WebApplicationContext org.springframework.test.web.servlet.htmlunit.WebApplicationContext , MockMvcConfigurer org.springframework.test.web.servlet.htmlunit.MockMvcConfigurer ) { this( MockMvcBuilders . webAppContextSetup ( org.springframework.test.web.servlet.htmlunit.WebApplicationContext ) . apply ( org.springframework.test.web.servlet.htmlunit.MockMvcConfigurer ) . build ( ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public T T ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return ( T ) this ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public T T ( ) { this . boolean = true ; return ( T ) this ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public T T ( WebRequestMatcher ... org.springframework.test.web.servlet.htmlunit.WebRequestMatcher[] ) { for ( WebRequestMatcher org.springframework.test.web.servlet.htmlunit.WebRequestMatcher : org.springframework.test.web.servlet.htmlunit.WebRequestMatcher[] ) { this . java.util.List<org.springframework.test.web.servlet.htmlunit.WebRequestMatcher> . add ( org.springframework.test.web.servlet.htmlunit.WebRequestMatcher ) ; } return ( T ) this ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public T T ( java.lang.String ... java.lang.String[] ) { this . java.util.List<org.springframework.test.web.servlet.htmlunit.WebRequestMatcher> . add ( new HostRequestMatcher ( java.lang.String[] ) ) ; return ( T ) this ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.test.web.servlet.htmlunit.WebConnection org.springframework.test.web.servlet.htmlunit.WebConnection ( WebClient org.springframework.test.web.servlet.htmlunit.WebClient ) { Assert . notNull ( org.springframework.test.web.servlet.htmlunit.WebClient , STRING ) ; return org.springframework.test.web.servlet.htmlunit.WebConnection ( org.springframework.test.web.servlet.htmlunit.WebClient , org.springframework.test.web.servlet.htmlunit.WebClient . getWebConnection ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.servlet.htmlunit.WebConnection org.springframework.test.web.servlet.htmlunit.WebConnection ( WebClient org.springframework.test.web.servlet.htmlunit.WebClient , WebConnection org.springframework.test.web.servlet.htmlunit.WebConnection ) { WebConnection org.springframework.test.web.servlet.htmlunit.WebConnection = new MockMvcWebConnection ( this . org.springframework.test.web.servlet.htmlunit.MockMvc , org.springframework.test.web.servlet.htmlunit.WebClient , this . java.lang.String ) ; if ( this . boolean ) { return org.springframework.test.web.servlet.htmlunit.WebConnection ; } java.util.List<org.springframework.test.web.servlet.htmlunit.DelegateWebConnection> < DelegateWebConnection > java.util.List<org.springframework.test.web.servlet.htmlunit.DelegateWebConnection> = new java.util.ArrayList <> ( this . java.util.List<org.springframework.test.web.servlet.htmlunit.WebRequestMatcher> . size ( ) ) ; for ( WebRequestMatcher org.springframework.test.web.servlet.htmlunit.WebRequestMatcher : this . java.util.List<org.springframework.test.web.servlet.htmlunit.WebRequestMatcher> ) { java.util.List<org.springframework.test.web.servlet.htmlunit.DelegateWebConnection> . add ( new DelegateWebConnection ( org.springframework.test.web.servlet.htmlunit.WebRequestMatcher , org.springframework.test.web.servlet.htmlunit.WebConnection ) ) ; } return new DelegatingWebConnection ( org.springframework.test.web.servlet.htmlunit.WebConnection , java.util.List<org.springframework.test.web.servlet.htmlunit.DelegateWebConnection> ) ; }  <METHOD_END>
