<METHOD_START> @ Before public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . refresh ( ) ; ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry = new ReactiveAdapterRegistry ( ) ; this . org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver = new SessionAttributeMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . getBeanFactory ( ) , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ; this . org.springframework.web.reactive.result.method.annotation.WebSession = mock ( WebSession .class ) ; WebSessionManager org.springframework.web.reactive.result.method.annotation.WebSessionManager = new MockWebSessionManager ( this . org.springframework.web.reactive.result.method.annotation.WebSession ) ; ServerHttpRequest org.springframework.web.reactive.result.method.annotation.ServerHttpRequest = MockServerHttpRequest . get ( STRING ) . build ( ) ; this . org.springframework.web.reactive.result.method.annotation.ServerWebExchange = new DefaultServerWebExchange ( org.springframework.web.reactive.result.method.annotation.ServerHttpRequest , new MockServerHttpResponse ( ) , org.springframework.web.reactive.result.method.annotation.WebSessionManager ) ; this . java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<? extends org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests> ( ) , STRING , ( java.lang.Class<?> < ? > [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( this . org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver . supportsParameter ( new MethodParameter ( this . java.lang.reflect.Method , NUMBER ) ) ) ; assertFalse ( this . org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver . supportsParameter ( new MethodParameter ( this . java.lang.reflect.Method , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = org.springframework.web.reactive.result.method.annotation.MethodParameter ( NUMBER ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , new BindingContext ( ) , this . org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; StepVerifier . create ( org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> ) . expectError ( ServerWebInputException .class ) . verify ( ) ; org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo = new org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo ( ) ; when ( this . org.springframework.web.reactive.result.method.annotation.WebSession . getAttribute ( STRING ) ) . thenReturn ( java.util.Optional . java.util.Optional<org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo> ( org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo ) ) ; org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , new BindingContext ( ) , this . org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; assertSame ( org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo , org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = org.springframework.web.reactive.result.method.annotation.MethodParameter ( NUMBER ) ; org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo = new org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo ( ) ; when ( this . org.springframework.web.reactive.result.method.annotation.WebSession . getAttribute ( STRING ) ) . thenReturn ( java.util.Optional . java.util.Optional<org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo> ( org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo ) ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , new BindingContext ( ) , this . org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; assertSame ( org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo , org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = org.springframework.web.reactive.result.method.annotation.MethodParameter ( NUMBER ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , new BindingContext ( ) , this . org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; assertNull ( org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ) ; org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo = new org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo ( ) ; when ( this . org.springframework.web.reactive.result.method.annotation.WebSession . getAttribute ( STRING ) ) . thenReturn ( java.util.Optional . java.util.Optional<org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo> ( org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo ) ) ; org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , new BindingContext ( ) , this . org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; assertSame ( org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo , org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = org.springframework.web.reactive.result.method.annotation.MethodParameter ( NUMBER ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , new BindingContext ( ) , this . org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ) ; assertEquals ( java.util.Optional .class , org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) . getClass ( ) ) ; assertFalse ( ( ( java.util.Optional<?> < ? > ) org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ) . boolean ( ) ) ; ConfigurableWebBindingInitializer org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer = new ConfigurableWebBindingInitializer ( ) ; org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer . setConversionService ( new DefaultFormattingConversionService ( ) ) ; BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = new BindingContext ( org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer ) ; org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo = new org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo ( ) ; when ( this . org.springframework.web.reactive.result.method.annotation.WebSession . getAttribute ( STRING ) ) . thenReturn ( java.util.Optional . java.util.Optional<org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo> ( org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo ) ) ; org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , org.springframework.web.reactive.result.method.annotation.BindingContext , this . org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ) ; assertEquals ( java.util.Optional .class , org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) . getClass ( ) ) ; java.util.Optional<?> < ? > java.util.Optional<?> = ( java.util.Optional<?> < ? > ) org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ; assertTrue ( java.util.Optional<> . boolean ( ) ) ; assertSame ( org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo , java.util.Optional<> . get ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ( int int ) { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( this . java.lang.reflect.Method , int ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter . initParameterNameDiscovery ( new DefaultParameterNameDiscoverer ( ) ) ; GenericTypeResolver . resolveParameterType ( org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver . getClass ( ) ) ; return org.springframework.web.reactive.result.method.annotation.MethodParameter ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private void void ( @ SessionAttribute org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo , @ SessionAttribute ( STRING ) org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo , @ SessionAttribute ( name = STRING , required = false ) org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo , @ SessionAttribute ( name = STRING ) java.util.Optional<org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo> < org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo > java.util.Optional<org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolverTests.Foo> , java.lang.String java.lang.String ) {	}  <METHOD_END>
