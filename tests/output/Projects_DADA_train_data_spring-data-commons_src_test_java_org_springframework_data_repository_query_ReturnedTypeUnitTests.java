<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReturnedType org.springframework.data.repository.query.ReturnedType = org.springframework.data.repository.query.ReturnedType ( STRING ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . getTypeToRead ( ) ) . isEqualTo ( org.springframework.data.repository.query.ReturnedTypeUnitTests.Sample .class ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . getInputProperties ( ) ) . isEmpty ( ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . isProjecting ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . needsCustomConstruction ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReturnedType org.springframework.data.repository.query.ReturnedType = org.springframework.data.repository.query.ReturnedType ( STRING ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . getTypeToRead ( ) ) . isEqualTo ( org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleDto .class ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . getInputProperties ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . isInstance ( new org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleDto ( STRING ) ) ) . isTrue ( ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . isProjecting ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . needsCustomConstruction ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReturnedType org.springframework.data.repository.query.ReturnedType = org.springframework.data.repository.query.ReturnedType ( STRING ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . getTypeToRead ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . getInputProperties ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReturnedType org.springframework.data.repository.query.ReturnedType = org.springframework.data.repository.query.ReturnedType ( STRING ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . getDomainType ( ) ) . isEqualTo ( org.springframework.data.repository.query.ReturnedTypeUnitTests.Sample .class ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . getReturnedType ( ) ) . isEqualTo ( void .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReturnedType org.springframework.data.repository.query.ReturnedType = org.springframework.data.repository.query.ReturnedType ( STRING ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . getReturnedType ( ) ) . isEqualTo ( org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleProjection .class ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . isProjecting ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . needsCustomConstruction ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReturnedType org.springframework.data.repository.query.ReturnedType = org.springframework.data.repository.query.ReturnedType ( STRING ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . getReturnedType ( ) ) . isEqualTo ( org.springframework.data.repository.query.ReturnedTypeUnitTests.OpenProjection .class ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . isProjecting ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . needsCustomConstruction ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . getTypeToRead ( ) ) . isEqualTo ( org.springframework.data.repository.query.ReturnedTypeUnitTests.Sample .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReturnedType org.springframework.data.repository.query.ReturnedType = org.springframework.data.repository.query.ReturnedType ( STRING ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . isProjecting ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . needsCustomConstruction ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . getTypeToRead ( ) ) . isEqualTo ( java.math.BigInteger .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReturnedType org.springframework.data.repository.query.ReturnedType = org.springframework.data.repository.query.ReturnedType ( STRING ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . getInputProperties ( ) ) . isEmpty ( ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . needsCustomConstruction ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReturnedType org.springframework.data.repository.query.ReturnedType = org.springframework.data.repository.query.ReturnedType ( STRING ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . needsCustomConstruction ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . isProjecting ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReturnedType org.springframework.data.repository.query.ReturnedType = org.springframework.data.repository.query.ReturnedType ( STRING ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . needsCustomConstruction ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . isProjecting ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReturnedType org.springframework.data.repository.query.ReturnedType = org.springframework.data.repository.query.ReturnedType ( STRING ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . needsCustomConstruction ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.repository.query.ReturnedType . isProjecting ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReturnedType org.springframework.data.repository.query.ReturnedType = ReturnedType . of ( org.springframework.data.repository.query.ReturnedTypeUnitTests.Child .class , java.lang.Object .class , new SpelAwareProxyProjectionFactory ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.data.repository.query.ReturnedType . getInputProperties ( ) ; assertThat ( java.util.List<java.lang.String> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<java.lang.String> ) . containsExactly ( STRING ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.repository.query.ReturnedType org.springframework.data.repository.query.ReturnedType ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.Exception { return org.springframework.data.repository.query.QueryMethod ( java.lang.String , java.lang.Class<?>[] ) . getResultProcessor ( ) . getReturnedType ( ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.repository.query.QueryMethod org.springframework.data.repository.query.QueryMethod ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleRepository .class . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; return new QueryMethod ( java.lang.reflect.Method , new DefaultRepositoryMetadata ( org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleRepository .class ) , new SpelAwareProxyProjectionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.repository.query.ReturnedTypeUnitTests.Sample> < org.springframework.data.repository.query.ReturnedTypeUnitTests.Sample > java.util.List<org.springframework.data.repository.query.ReturnedTypeUnitTests.Sample> ( )  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleDto> < org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleDto > java.util.List<org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleDto> ( )  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleProjection> < org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleProjection > java.util.List<org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleProjection> ( )  <METHOD_END>
<METHOD_START> org.springframework.data.repository.query.ReturnedTypeUnitTests.Sample org.springframework.data.repository.query.ReturnedTypeUnitTests.Sample ( )  <METHOD_END>
<METHOD_START> org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleDto org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleDto ( )  <METHOD_END>
<METHOD_START> org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleProjection org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleProjection ( )  <METHOD_END>
<METHOD_START> org.springframework.data.repository.query.ReturnedTypeUnitTests.OpenProjection org.springframework.data.repository.query.ReturnedTypeUnitTests.OpenProjection ( )  <METHOD_END>
<METHOD_START> org.springframework.data.repository.query.Page<org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleProjection> < org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleProjection > org.springframework.data.repository.query.Page<org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleProjection> ( Pageable org.springframework.data.repository.query.Pageable );  <METHOD_END>
<METHOD_START> java.math.BigInteger java.math.BigInteger ( )  <METHOD_END>
<METHOD_START> org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleDtoWithMultipleConstructors org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleDtoWithMultipleConstructors ( )  <METHOD_END>
<METHOD_START> org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleRepository.MyEnum org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleRepository.MyEnum ( )  <METHOD_END>
<METHOD_START> java.time.LocalDateTime java.time.LocalDateTime ( )  <METHOD_END>
<METHOD_START> org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleInterface org.springframework.data.repository.query.ReturnedTypeUnitTests.SampleInterface ( )  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) {}  <METHOD_END>
<METHOD_START> void ( int int ) {}  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> @ Value ( STRING ) java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
