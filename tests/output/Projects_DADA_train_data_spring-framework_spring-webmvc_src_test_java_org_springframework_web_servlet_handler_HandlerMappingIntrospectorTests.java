<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticWebApplicationContext org.springframework.web.servlet.handler.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.handler.StaticWebApplicationContext . registerSingleton ( STRING , SimpleUrlHandlerMapping .class ) ; org.springframework.web.servlet.handler.StaticWebApplicationContext . registerSingleton ( STRING , SimpleUrlHandlerMapping .class ) ; org.springframework.web.servlet.handler.StaticWebApplicationContext . registerSingleton ( STRING , SimpleUrlHandlerMapping .class ) ; org.springframework.web.servlet.handler.StaticWebApplicationContext . refresh ( ) ; java.util.List<?> < ? > java.util.List<?> = java.util.Arrays . java.util.List ( org.springframework.web.servlet.handler.StaticWebApplicationContext . getBean ( STRING ) , org.springframework.web.servlet.handler.StaticWebApplicationContext . getBean ( STRING ) , org.springframework.web.servlet.handler.StaticWebApplicationContext . getBean ( STRING ) ) ; java.util.List<org.springframework.web.servlet.handler.HandlerMapping> < HandlerMapping > java.util.List<org.springframework.web.servlet.handler.HandlerMapping> = new HandlerMappingIntrospector ( org.springframework.web.servlet.handler.StaticWebApplicationContext ) . getHandlerMappings ( ) ; assertEquals ( java.util.List<> , java.util.List<org.springframework.web.servlet.handler.HandlerMapping> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticWebApplicationContext org.springframework.web.servlet.handler.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; MutablePropertyValues org.springframework.web.servlet.handler.MutablePropertyValues = new MutablePropertyValues ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.web.servlet.handler.StaticWebApplicationContext . registerSingleton ( STRING , SimpleUrlHandlerMapping .class , org.springframework.web.servlet.handler.MutablePropertyValues ) ; org.springframework.web.servlet.handler.MutablePropertyValues = new MutablePropertyValues ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.web.servlet.handler.StaticWebApplicationContext . registerSingleton ( STRING , SimpleUrlHandlerMapping .class , org.springframework.web.servlet.handler.MutablePropertyValues ) ; org.springframework.web.servlet.handler.MutablePropertyValues = new MutablePropertyValues ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.web.servlet.handler.StaticWebApplicationContext . registerSingleton ( STRING , SimpleUrlHandlerMapping .class , org.springframework.web.servlet.handler.MutablePropertyValues ) ; org.springframework.web.servlet.handler.StaticWebApplicationContext . refresh ( ) ; java.util.List<?> < ? > java.util.List<?> = java.util.Arrays . java.util.List ( org.springframework.web.servlet.handler.StaticWebApplicationContext . getBean ( STRING ) , org.springframework.web.servlet.handler.StaticWebApplicationContext . getBean ( STRING ) , org.springframework.web.servlet.handler.StaticWebApplicationContext . getBean ( STRING ) ) ; java.util.List<org.springframework.web.servlet.handler.HandlerMapping> < HandlerMapping > java.util.List<org.springframework.web.servlet.handler.HandlerMapping> = new HandlerMappingIntrospector ( org.springframework.web.servlet.handler.StaticWebApplicationContext ) . getHandlerMappings ( ) ; assertEquals ( java.util.List<> , java.util.List<org.springframework.web.servlet.handler.HandlerMapping> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { StaticWebApplicationContext org.springframework.web.servlet.handler.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.handler.StaticWebApplicationContext . refresh ( ) ; java.util.List<org.springframework.web.servlet.handler.HandlerMapping> < HandlerMapping > java.util.List<org.springframework.web.servlet.handler.HandlerMapping> = new HandlerMappingIntrospector ( org.springframework.web.servlet.handler.StaticWebApplicationContext ) . getHandlerMappings ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.handler.HandlerMapping> . size ( ) ) ; assertEquals ( BeanNameUrlHandlerMapping .class , java.util.List<org.springframework.web.servlet.handler.HandlerMapping> . get ( NUMBER ) . getClass ( ) ) ; assertEquals ( RequestMappingHandlerMapping .class , java.util.List<org.springframework.web.servlet.handler.HandlerMapping> . get ( NUMBER ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MutablePropertyValues org.springframework.web.servlet.handler.MutablePropertyValues = new MutablePropertyValues ( java.util.Collections . java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , new java.lang.Object ( ) ) ) ) ; StaticWebApplicationContext org.springframework.web.servlet.handler.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.handler.StaticWebApplicationContext . registerSingleton ( STRING , SimpleUrlHandlerMapping .class , org.springframework.web.servlet.handler.MutablePropertyValues ) ; org.springframework.web.servlet.handler.StaticWebApplicationContext . refresh ( ) ; MockHttpServletRequest org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MatchableHandlerMapping org.springframework.web.servlet.handler.MatchableHandlerMapping = new HandlerMappingIntrospector ( org.springframework.web.servlet.handler.StaticWebApplicationContext ) . getMatchableHandlerMapping ( org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertEquals ( org.springframework.web.servlet.handler.StaticWebApplicationContext . getBean ( STRING ) , org.springframework.web.servlet.handler.MatchableHandlerMapping ) ; assertNull ( STRING , org.springframework.web.servlet.handler.MockHttpServletRequest . getAttribute ( BEST_MATCHING_PATTERN_ATTRIBUTE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { StaticWebApplicationContext org.springframework.web.servlet.handler.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.handler.StaticWebApplicationContext . registerSingleton ( STRING , org.springframework.web.servlet.handler.HandlerMappingIntrospectorTests.TestHandlerMapping .class ) ; org.springframework.web.servlet.handler.StaticWebApplicationContext . refresh ( ) ; MockHttpServletRequest org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( ) ; new HandlerMappingIntrospector ( org.springframework.web.servlet.handler.StaticWebApplicationContext ) . getMatchableHandlerMapping ( org.springframework.web.servlet.handler.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigWebApplicationContext org.springframework.web.servlet.handler.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.web.servlet.handler.AnnotationConfigWebApplicationContext . register ( org.springframework.web.servlet.handler.HandlerMappingIntrospectorTests.TestConfig .class ) ; org.springframework.web.servlet.handler.AnnotationConfigWebApplicationContext . refresh ( ) ; MockHttpServletRequest org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.handler.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.handler.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration = new HandlerMappingIntrospector ( org.springframework.web.servlet.handler.AnnotationConfigWebApplicationContext ) . getCorsConfiguration ( org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.handler.CorsConfiguration ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.web.servlet.handler.CorsConfiguration . getAllowedOrigins ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.web.servlet.handler.CorsConfiguration . getAllowedMethods ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigWebApplicationContext org.springframework.web.servlet.handler.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.web.servlet.handler.AnnotationConfigWebApplicationContext . register ( org.springframework.web.servlet.handler.HandlerMappingIntrospectorTests.TestConfig .class ) ; org.springframework.web.servlet.handler.AnnotationConfigWebApplicationContext . refresh ( ) ; MockHttpServletRequest org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.handler.MockHttpServletRequest . addHeader ( STRING , STRING ) ; CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration = new HandlerMappingIntrospector ( org.springframework.web.servlet.handler.AnnotationConfigWebApplicationContext ) . getCorsConfiguration ( org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.handler.CorsConfiguration ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.web.servlet.handler.CorsConfiguration . getAllowedOrigins ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.web.servlet.handler.CorsConfiguration . getAllowedMethods ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.handler.HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest ) throws java.lang.Exception { return new HandlerExecutionChain ( new java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.handler.RequestMappingHandlerMapping org.springframework.web.servlet.handler.RequestMappingHandlerMapping ( ) { return new RequestMappingHandlerMapping ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.handler.HandlerMappingIntrospectorTests.TestController org.springframework.web.servlet.handler.HandlerMappingIntrospectorTests.TestController ( ) { return new org.springframework.web.servlet.handler.HandlerMappingIntrospectorTests.TestController ( ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public void void ( ) {		}  <METHOD_END>
