<METHOD_START> @ java.lang.Override public int int ( ) { return getMetrics ( ) . getReceiveCount ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return getMetrics ( ) . getReceiveCountLong ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return getMetrics ( ) . getReceiveErrorCount ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return getMetrics ( ) . getReceiveErrorCountLong ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.integration.channel.Message<?> < ? > org.springframework.integration.channel.Message<?> ( ) { return org.springframework.integration.channel.Message<?> ( - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.integration.channel.Message<?> < ? > org.springframework.integration.channel.Message<?> ( long long ) { ChannelInterceptorList org.springframework.integration.channel.ChannelInterceptorList = getInterceptors ( ) ; java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> < ChannelInterceptor > java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> = null ; boolean boolean = false ; boolean boolean = isCountsEnabled ( ) ; try { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + this + STRING ) ; } if ( org.springframework.integration.channel.ChannelInterceptorList . getSize ( ) > NUMBER ) { java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> = new java.util.ArrayDeque<org.springframework.integration.channel.ChannelInterceptor> < ChannelInterceptor > ( ) ; if ( ! org.springframework.integration.channel.ChannelInterceptorList . preReceive ( this , java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> ) ) { return null ; } } Message < ? > org.springframework.integration.channel.Message<?> = this . org.springframework.integration.channel.Message<?> ( long ) ; if ( boolean ) { getMetrics ( ) . afterReceive ( ) ; boolean = true ; } if ( org.springframework.integration.channel.Message<> != null && logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this + STRING + org.springframework.integration.channel.Message<> ) ; } else if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + this + STRING ) ; } if ( ! CollectionUtils . isEmpty ( java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> ) ) { org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.ChannelInterceptorList . postReceive ( org.springframework.integration.channel.Message<> , this ) ; org.springframework.integration.channel.ChannelInterceptorList . afterReceiveCompletion ( org.springframework.integration.channel.Message<> , this , null , java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> ) ; } return org.springframework.integration.channel.Message<> ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( boolean && ! boolean ) { getMetrics ( ) . afterError ( ) ; } if ( ! CollectionUtils . isEmpty ( java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> ) ) { org.springframework.integration.channel.ChannelInterceptorList . afterReceiveCompletion ( null , this , java.lang.RuntimeException , java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> ) ; } throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.integration.channel.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.channel.ChannelInterceptor> ) { super. setInterceptors ( java.util.List<org.springframework.integration.channel.ChannelInterceptor> ) ; for ( ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor : java.util.List<org.springframework.integration.channel.ChannelInterceptor> ) { if ( org.springframework.integration.channel.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { this . int ++ ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor ) { super. addInterceptor ( org.springframework.integration.channel.ChannelInterceptor ) ; if ( org.springframework.integration.channel.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { this . int ++ ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int , ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor ) { super. addInterceptor ( int , org.springframework.integration.channel.ChannelInterceptor ) ; if ( org.springframework.integration.channel.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { this . int ++ ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor ) { boolean boolean = super. removeInterceptor ( org.springframework.integration.channel.ChannelInterceptor ) ; if ( boolean && org.springframework.integration.channel.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { this . int -- ; } return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor ( int int ) { ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor = super. removeInterceptor ( int ) ; if ( org.springframework.integration.channel.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { this . int -- ; } return org.springframework.integration.channel.ChannelInterceptor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . int > NUMBER ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.integration.channel.Message<?> < ? > org.springframework.integration.channel.Message<?> ( long long );  <METHOD_END>
