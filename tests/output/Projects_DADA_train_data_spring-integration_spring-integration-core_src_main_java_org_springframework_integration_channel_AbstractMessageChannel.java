<METHOD_START> public void ( ) { this . org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList = new org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList ( logger ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; if ( ! boolean ) { this . boolean = false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { if ( boolean ) { this . boolean = true ; } this . boolean = boolean ; this . org.springframework.integration.channel.AbstractMessageChannelMetrics . setFullStatsEnabled ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.channel.AbstractMessageChannelMetrics org.springframework.integration.channel.AbstractMessageChannelMetrics ( ) { return this . org.springframework.integration.channel.AbstractMessageChannelMetrics ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AbstractMessageChannelMetrics org.springframework.integration.channel.AbstractMessageChannelMetrics ) { Assert . notNull ( org.springframework.integration.channel.AbstractMessageChannelMetrics , STRING ) ; this . org.springframework.integration.channel.AbstractMessageChannelMetrics = org.springframework.integration.channel.AbstractMessageChannelMetrics ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . java.lang.Class<?>[] = ( java.lang.Class<?>[] != null && java.lang.Class<?>[] . int > NUMBER ) ? java.lang.Class<?>[] : new java.lang.Class<?> < ? > [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.integration.channel.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.channel.ChannelInterceptor> ) { java.util.Collections . void ( java.util.List<org.springframework.integration.channel.ChannelInterceptor> , this . java.util.Comparator<java.lang.Object> ) ; this . org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList . boolean ( java.util.List<org.springframework.integration.channel.ChannelInterceptor> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor ) { this . org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList . boolean ( org.springframework.integration.channel.ChannelInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int , ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor ) { this . org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList . void ( int , org.springframework.integration.channel.ChannelInterceptor ) ; }  <METHOD_END>
<METHOD_START> public void void ( MessageConverter org.springframework.integration.channel.MessageConverter ) { this . org.springframework.integration.channel.MessageConverter = org.springframework.integration.channel.MessageConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.integration.channel.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.channel.ChannelInterceptor> ( ) { return this . org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList . java.util.List<org.springframework.integration.channel.ChannelInterceptor> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor ) { return this . org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList . boolean ( org.springframework.integration.channel.ChannelInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor ( int int ) { return this . org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList . org.springframework.integration.channel.ChannelInterceptor ( int ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList ( ) { return this . org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.integration.channel.AbstractMessageChannelMetrics . reset ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.integration.channel.AbstractMessageChannelMetrics . getSendCount ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return this . org.springframework.integration.channel.AbstractMessageChannelMetrics . getSendCountLong ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.integration.channel.AbstractMessageChannelMetrics . getSendErrorCount ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return this . org.springframework.integration.channel.AbstractMessageChannelMetrics . getSendErrorCountLong ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return this . org.springframework.integration.channel.AbstractMessageChannelMetrics . getTimeSinceLastSend ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return this . org.springframework.integration.channel.AbstractMessageChannelMetrics . getMeanSendRate ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return this . org.springframework.integration.channel.AbstractMessageChannelMetrics . getMeanErrorRate ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return this . org.springframework.integration.channel.AbstractMessageChannelMetrics . getMeanErrorRatio ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return this . org.springframework.integration.channel.AbstractMessageChannelMetrics . getMeanSendDuration ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return this . org.springframework.integration.channel.AbstractMessageChannelMetrics . getMinSendDuration ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return this . org.springframework.integration.channel.AbstractMessageChannelMetrics . getMaxSendDuration ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return this . org.springframework.integration.channel.AbstractMessageChannelMetrics . getStandardDeviationSendDuration ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.Statistics org.springframework.integration.channel.Statistics ( ) { return this . org.springframework.integration.channel.AbstractMessageChannelMetrics . getSendDuration ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.Statistics org.springframework.integration.channel.Statistics ( ) { return this . org.springframework.integration.channel.AbstractMessageChannelMetrics . getSendRate ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.Statistics org.springframework.integration.channel.Statistics ( ) { return this . org.springframework.integration.channel.AbstractMessageChannelMetrics . getErrorRate ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; if ( this . org.springframework.integration.channel.MessageConverter == null ) { if ( this . getBeanFactory ( ) != null ) { if ( this . getBeanFactory ( ) . containsBean ( IntegrationContextUtils . INTEGRATION_DATATYPE_CHANNEL_MESSAGE_CONVERTER_BEAN_NAME ) ) { this . org.springframework.integration.channel.MessageConverter = this . getBeanFactory ( ) . getBean ( IntegrationContextUtils . INTEGRATION_DATATYPE_CHANNEL_MESSAGE_CONVERTER_BEAN_NAME , MessageConverter .class ) ; } } } if ( this . boolean ) { this . org.springframework.integration.channel.AbstractMessageChannelMetrics . setFullStatsEnabled ( true ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( this . java.lang.String == null ) { java.lang.String java.lang.String = this . getApplicationContextId ( ) ; java.lang.String java.lang.String = this . getComponentName ( ) ; java.lang.String = ( StringUtils . hasText ( java.lang.String ) ? java.lang.String + STRING : STRING ) + ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : STRING ) ; this . java.lang.String = java.lang.String ; } return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final boolean boolean ( Message < ? > org.springframework.integration.channel.Message<?> ) { return this . boolean ( org.springframework.integration.channel.Message<> , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final boolean boolean ( Message < ? > org.springframework.integration.channel.Message<?> , long long ) { Assert . notNull ( org.springframework.integration.channel.Message<> , STRING ) ; Assert . notNull ( org.springframework.integration.channel.Message<> . getPayload ( ) , STRING ) ; if ( this . boolean ) { org.springframework.integration.channel.Message<?> = MessageHistory . write ( org.springframework.integration.channel.Message<> , this , this . getMessageBuilderFactory ( ) ) ; } java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> < ChannelInterceptor > java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> = null ; boolean boolean = false ; boolean boolean = false ; MetricsContext org.springframework.integration.channel.MetricsContext = null ; boolean boolean = this . boolean ; org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList = this . org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList ; AbstractMessageChannelMetrics org.springframework.integration.channel.AbstractMessageChannelMetrics = this . org.springframework.integration.channel.AbstractMessageChannelMetrics ; try { if ( this . java.lang.Class<?>[] . int > NUMBER ) { org.springframework.integration.channel.Message<?> = this . org.springframework.integration.channel.Message<?> ( org.springframework.integration.channel.Message<> ) ; } boolean boolean = this . boolean && logger . isDebugEnabled ( ) ; if ( boolean ) { logger . debug ( STRING + this + STRING + org.springframework.integration.channel.Message<> ) ; } if ( org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList . int ( ) > NUMBER ) { java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> = new java.util.ArrayDeque<org.springframework.integration.channel.ChannelInterceptor> < ChannelInterceptor > ( ) ; org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList . org.springframework.integration.channel.Message<?> ( org.springframework.integration.channel.Message<> , this , java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> ) ; if ( org.springframework.integration.channel.Message<> == null ) { return false ; } } if ( boolean ) { org.springframework.integration.channel.MetricsContext = org.springframework.integration.channel.AbstractMessageChannelMetrics . beforeSend ( ) ; } boolean = this . boolean ( org.springframework.integration.channel.Message<> , long ) ; if ( boolean ) { org.springframework.integration.channel.AbstractMessageChannelMetrics . afterSend ( org.springframework.integration.channel.MetricsContext , boolean ) ; boolean = true ; } if ( boolean ) { logger . debug ( STRING + boolean + STRING + this + STRING + org.springframework.integration.channel.Message<> ) ; } if ( java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> != null ) { org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList . void ( org.springframework.integration.channel.Message<> , this , boolean ) ; org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList . void ( org.springframework.integration.channel.Message<> , this , boolean , null , java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> ) ; } return boolean ; } catch ( java.lang.Exception java.lang.Exception ) { if ( boolean && ! boolean ) { org.springframework.integration.channel.AbstractMessageChannelMetrics . afterSend ( org.springframework.integration.channel.MetricsContext , false ) ; } if ( java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> != null ) { org.springframework.integration.channel.AbstractMessageChannel.ChannelInterceptorList . void ( org.springframework.integration.channel.Message<> , this , boolean , java.lang.Exception , java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> ) ; } if ( java.lang.Exception instanceof MessagingException ) { throw ( MessagingException ) java.lang.Exception ; } throw new MessageDeliveryException ( org.springframework.integration.channel.Message<> , STRING + this . getComponentName ( ) + STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.channel.Message<?> < ? > org.springframework.integration.channel.Message<?> ( Message < ? > org.springframework.integration.channel.Message<?> ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : this . java.lang.Class<?>[] ) { if ( java.lang.Class<> . boolean ( org.springframework.integration.channel.Message<> . getPayload ( ) . getClass ( ) ) ) { return org.springframework.integration.channel.Message<> ; } } if ( this . org.springframework.integration.channel.MessageConverter != null ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : this . java.lang.Class<?>[] ) { java.lang.Object java.lang.Object = this . org.springframework.integration.channel.MessageConverter . fromMessage ( org.springframework.integration.channel.Message<> , java.lang.Class<> ) ; if ( java.lang.Object != null ) { if ( java.lang.Object instanceof Message ) { return ( Message < ? > ) java.lang.Object ; } else { return getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . copyHeaders ( org.springframework.integration.channel.Message<> . getHeaders ( ) ) . build ( ) ; } } } } throw new MessageDeliveryException ( org.springframework.integration.channel.Message<> , STRING + this . getComponentName ( ) + STRING + StringUtils . arrayToCommaDelimitedString ( this . java.lang.Class<?>[] ) + STRING + org.springframework.integration.channel.Message<> . getPayload ( ) . getClass ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( Message < ? > org.springframework.integration.channel.Message<?> , long long );  <METHOD_END>
<METHOD_START> public void ( Log org.springframework.integration.channel.Log ) { this . org.springframework.integration.channel.Log = org.springframework.integration.channel.Log ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.util.List<org.springframework.integration.channel.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.channel.ChannelInterceptor> ) { synchronized ( this . java.util.List<org.springframework.integration.channel.ChannelInterceptor> ) { this . java.util.List<org.springframework.integration.channel.ChannelInterceptor> . clear ( ) ; this . int = java.util.List<org.springframework.integration.channel.ChannelInterceptor> . size ( ) ; return this . java.util.List<org.springframework.integration.channel.ChannelInterceptor> . addAll ( java.util.List<org.springframework.integration.channel.ChannelInterceptor> ) ; } }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor ) { this . int ++ ; return this . java.util.List<org.springframework.integration.channel.ChannelInterceptor> . add ( org.springframework.integration.channel.ChannelInterceptor ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor ) { this . int ++ ; this . java.util.List<org.springframework.integration.channel.ChannelInterceptor> . add ( int , org.springframework.integration.channel.ChannelInterceptor ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.channel.Message<?> < ? > org.springframework.integration.channel.Message<?> ( Message < ? > org.springframework.integration.channel.Message<?> , MessageChannel org.springframework.integration.channel.MessageChannel , java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> < ChannelInterceptor > java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> ) { if ( this . int > NUMBER ) { for ( ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor : this . java.util.List<org.springframework.integration.channel.ChannelInterceptor> ) { org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.ChannelInterceptor . preSend ( org.springframework.integration.channel.Message<> , org.springframework.integration.channel.MessageChannel ) ; if ( org.springframework.integration.channel.Message<> == null ) { if ( this . org.springframework.integration.channel.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.channel.Log . debug ( org.springframework.integration.channel.ChannelInterceptor . getClass ( ) . getSimpleName ( ) + STRING ) ; } void ( null , org.springframework.integration.channel.MessageChannel , false , null , java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> ) ; return null ; } java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> . add ( org.springframework.integration.channel.ChannelInterceptor ) ; } } return org.springframework.integration.channel.Message<> ; }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.integration.channel.Message<?> , MessageChannel org.springframework.integration.channel.MessageChannel , boolean boolean ) { if ( this . int > NUMBER ) { for ( ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor : this . java.util.List<org.springframework.integration.channel.ChannelInterceptor> ) { org.springframework.integration.channel.ChannelInterceptor . postSend ( org.springframework.integration.channel.Message<> , org.springframework.integration.channel.MessageChannel , boolean ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.integration.channel.Message<?> , MessageChannel org.springframework.integration.channel.MessageChannel , boolean boolean , java.lang.Exception java.lang.Exception , java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> < ChannelInterceptor > java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> ) { for ( java.util.Iterator<org.springframework.integration.channel.ChannelInterceptor> < ChannelInterceptor > java.util.Iterator<org.springframework.integration.channel.ChannelInterceptor> = java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> . descendingIterator ( ) ; java.util.Iterator<org.springframework.integration.channel.ChannelInterceptor> . hasNext ( ) ; ) { ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor = java.util.Iterator<org.springframework.integration.channel.ChannelInterceptor> . next ( ) ; try { org.springframework.integration.channel.ChannelInterceptor . afterSendCompletion ( org.springframework.integration.channel.Message<> , org.springframework.integration.channel.MessageChannel , boolean , java.lang.Exception ) ; } catch ( java.lang.Exception java.lang.Exception ) { this . org.springframework.integration.channel.Log . error ( STRING + org.springframework.integration.channel.ChannelInterceptor , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> public boolean boolean ( MessageChannel org.springframework.integration.channel.MessageChannel , java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> < ChannelInterceptor > java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> ) { if ( this . int > NUMBER ) { for ( ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor : this . java.util.List<org.springframework.integration.channel.ChannelInterceptor> ) { if ( ! org.springframework.integration.channel.ChannelInterceptor . preReceive ( org.springframework.integration.channel.MessageChannel ) ) { void ( null , org.springframework.integration.channel.MessageChannel , null , java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> ) ; return false ; } java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> . add ( org.springframework.integration.channel.ChannelInterceptor ) ; } } return true ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.channel.Message<?> < ? > org.springframework.integration.channel.Message<?> ( Message < ? > org.springframework.integration.channel.Message<?> , MessageChannel org.springframework.integration.channel.MessageChannel ) { if ( this . int > NUMBER ) { for ( ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor : this . java.util.List<org.springframework.integration.channel.ChannelInterceptor> ) { org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.ChannelInterceptor . postReceive ( org.springframework.integration.channel.Message<> , org.springframework.integration.channel.MessageChannel ) ; if ( org.springframework.integration.channel.Message<> == null ) { return null ; } } } return org.springframework.integration.channel.Message<> ; }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.integration.channel.Message<?> , MessageChannel org.springframework.integration.channel.MessageChannel , java.lang.Exception java.lang.Exception , java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> < ChannelInterceptor > java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> ) { for ( java.util.Iterator<org.springframework.integration.channel.ChannelInterceptor> < ChannelInterceptor > java.util.Iterator<org.springframework.integration.channel.ChannelInterceptor> = java.util.Deque<org.springframework.integration.channel.ChannelInterceptor> . descendingIterator ( ) ; java.util.Iterator<org.springframework.integration.channel.ChannelInterceptor> . hasNext ( ) ; ) { ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor = java.util.Iterator<org.springframework.integration.channel.ChannelInterceptor> . next ( ) ; try { org.springframework.integration.channel.ChannelInterceptor . afterReceiveCompletion ( org.springframework.integration.channel.Message<> , org.springframework.integration.channel.MessageChannel , java.lang.Exception ) ; } catch ( java.lang.Exception java.lang.Exception ) { this . org.springframework.integration.channel.Log . error ( STRING + org.springframework.integration.channel.ChannelInterceptor , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.integration.channel.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.channel.ChannelInterceptor> ( ) { return java.util.Collections . java.util.List<org.springframework.integration.channel.ChannelInterceptor> ( this . java.util.List<org.springframework.integration.channel.ChannelInterceptor> ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor ) { if ( this . java.util.List<org.springframework.integration.channel.ChannelInterceptor> . remove ( org.springframework.integration.channel.ChannelInterceptor ) ) { this . int -- ; return true ; } else { return false ; } }  <METHOD_END>
<METHOD_START> public org.springframework.integration.channel.ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor ( int int ) { ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor = this . java.util.List<org.springframework.integration.channel.ChannelInterceptor> . remove ( int ) ; if ( org.springframework.integration.channel.ChannelInterceptor != null ) { this . int -- ; } return org.springframework.integration.channel.ChannelInterceptor ; }  <METHOD_END>
