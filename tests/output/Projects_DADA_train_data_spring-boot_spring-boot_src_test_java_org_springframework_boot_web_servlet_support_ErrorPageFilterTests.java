<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockFilterChain . getRequest ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getResponse ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . getForwardedUrl ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . setStatus ( NUMBER ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; org.springframework.boot.web.servlet.support.ServletResponse . flushBuffer ( ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( ( ( HttpServletResponse ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( ( ( HttpServletResponse ) ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getResponse ( ) ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . setStatus ( NUMBER ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; org.springframework.boot.web.servlet.support.ServletResponse . flushBuffer ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ErrorPageFilter . addErrorPages ( new ErrorPage ( STRING ) ) ; this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockFilterChain . getRequest ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest ) ; HttpServletResponseWrapper org.springframework.boot.web.servlet.support.HttpServletResponseWrapper = ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ; assertThat ( org.springframework.boot.web.servlet.support.HttpServletResponseWrapper . getResponse ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.web.servlet.support.HttpServletResponseWrapper . getStatus ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . getForwardedUrl ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ErrorPageFilter . addErrorPages ( new ErrorPage ( STRING ) ) ; this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . setCommitted ( true ) ; this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockFilterChain . getRequest ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getResponse ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . getForwardedUrl ( ) ) . isNull ( ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockFilterChain . getRequest ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getResponse ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . getForwardedUrl ( ) ) . isNull ( ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; assertThat ( org.springframework.boot.web.servlet.support.ServletRequest . getAttribute ( STRING ) ) . isNotNull ( ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . init ( new MockFilterConfig ( STRING ) ) ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; assertThat ( org.springframework.boot.web.servlet.support.ServletRequest . getAttribute ( STRING ) ) . isNotNull ( ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ErrorPageFilter . addErrorPages ( new ErrorPage ( STRING ) ) ; this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_STATUS_CODE ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_MESSAGE ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_REQUEST_URI ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . getForwardedUrl ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ErrorPageFilter . addErrorPages ( new ErrorPage ( HttpStatus . BAD_REQUEST , STRING ) ) ; this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_STATUS_CODE ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_MESSAGE ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_REQUEST_URI ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . getForwardedUrl ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ErrorPageFilter . addErrorPages ( new ErrorPage ( HttpStatus . BAD_REQUEST , STRING ) ) ; this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; org.springframework.boot.web.servlet.support.ServletResponse . flushBuffer ( ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . getForwardedUrl ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; org.springframework.boot.web.servlet.support.ServletResponse . flushBuffer ( ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ErrorPageFilter . addErrorPages ( new ErrorPage ( java.lang.RuntimeException .class , STRING ) ) ; this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; throw new java.lang.RuntimeException ( STRING ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_STATUS_CODE ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_MESSAGE ) ) . isEqualTo ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( RequestDispatcher . ERROR_EXCEPTION_TYPE ) ) . isEqualTo ( java.lang.RuntimeException .class ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( RequestDispatcher . ERROR_EXCEPTION ) ) . isInstanceOf ( java.lang.RuntimeException .class ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_EXCEPTION_TYPE ) ) . isNull ( ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_EXCEPTION ) ) . isNull ( ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_REQUEST_URI ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . getForwardedUrl ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ErrorPageFilter . addErrorPages ( new ErrorPage ( java.lang.RuntimeException .class , STRING ) ) ; this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; org.springframework.boot.web.servlet.support.ServletResponse . flushBuffer ( ) ; throw new java.lang.RuntimeException ( STRING ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . getForwardedUrl ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; org.springframework.boot.web.servlet.support.ServletResponse . flushBuffer ( ) ; throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { assertThat ( ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { assertThat ( ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ErrorPageFilter . addErrorPages ( new ErrorPage ( java.lang.RuntimeException .class , STRING ) ) ; this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; throw new java.lang.IllegalStateException ( STRING ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_STATUS_CODE ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_MESSAGE ) ) . isEqualTo ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( RequestDispatcher . ERROR_EXCEPTION_TYPE ) ) . isEqualTo ( java.lang.IllegalStateException .class ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( RequestDispatcher . ERROR_EXCEPTION ) ) . isInstanceOf ( java.lang.IllegalStateException .class ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_EXCEPTION_TYPE ) ) . isNull ( ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_EXCEPTION ) ) . isNull ( ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_REQUEST_URI ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . setAsyncStarted ( true ) ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockFilterChain . getRequest ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getResponse ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ErrorPageFilter . addErrorPages ( new ErrorPage ( STRING ) ) ; this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . setAsyncStarted ( true ) ; this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; throw new java.lang.RuntimeException ( STRING ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockFilterChain . getRequest ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getResponse ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ErrorPageFilter . addErrorPages ( new ErrorPage ( STRING ) ) ; this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . setAsyncStarted ( true ) ; this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockFilterChain . getRequest ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getResponse ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockFilterChain . getRequest ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getResponse ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ErrorPageFilter . addErrorPages ( new ErrorPage ( STRING ) ) ; void ( ) ; this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; throw new java.lang.RuntimeException ( STRING ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockFilterChain . getRequest ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getResponse ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ErrorPageFilter . addErrorPages ( new ErrorPage ( STRING ) ) ; void ( ) ; this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockFilterChain . getRequest ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getResponse ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; ( ( HttpServletResponse ) org.springframework.boot.web.servlet.support.ServletResponse ) . sendError ( NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpServletResponse org.springframework.boot.web.servlet.support.HttpServletResponse = mock ( HttpServletResponse .class ) ; given ( org.springframework.boot.web.servlet.support.HttpServletResponse . isCommitted ( ) ) . willReturn ( true ) ; given ( org.springframework.boot.web.servlet.support.HttpServletResponse . getStatus ( ) ) . willReturn ( NUMBER ) ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , org.springframework.boot.web.servlet.support.HttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; verify ( org.springframework.boot.web.servlet.support.HttpServletResponse , times ( NUMBER ) ) . flushBuffer ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . setServletPath ( STRING ) ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . addErrorPages ( new ErrorPage ( STRING ) ) ; this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; throw new java.lang.RuntimeException ( ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( this . org.springframework.boot.web.servlet.support.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . setServletPath ( STRING ) ; this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . setPathInfo ( STRING ) ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . addErrorPages ( new ErrorPage ( STRING ) ) ; this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; throw new java.lang.RuntimeException ( ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( this . org.springframework.boot.web.servlet.support.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ErrorPageFilter . addErrorPages ( new ErrorPage ( java.lang.RuntimeException .class , STRING ) ) ; this . org.springframework.boot.web.servlet.support.MockFilterChain = new MockFilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; throw new NestedServletException ( STRING , new java.lang.RuntimeException ( STRING ) ) ; } } ; this . org.springframework.boot.web.servlet.support.ErrorPageFilter . doFilter ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse , this . org.springframework.boot.web.servlet.support.MockFilterChain ) ; assertThat ( ( ( HttpServletResponseWrapper ) this . org.springframework.boot.web.servlet.support.MockFilterChain . getResponse ( ) ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_STATUS_CODE ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_MESSAGE ) ) . isEqualTo ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( RequestDispatcher . ERROR_EXCEPTION_TYPE ) ) . isEqualTo ( java.lang.RuntimeException .class ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( RequestDispatcher . ERROR_EXCEPTION ) ) . isInstanceOf ( java.lang.RuntimeException .class ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_EXCEPTION_TYPE ) ) . isNull ( ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_EXCEPTION ) ) . isNull ( ) ; assertThat ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . getAttribute ( RequestDispatcher . ERROR_REQUEST_URI ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . isCommitted ( ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.web.servlet.support.MockHttpServletResponse . getForwardedUrl ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse )					throws java.io.IOException , org.springframework.boot.web.servlet.support.ServletException { super. doFilter ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; throw new NestedServletException ( STRING , new java.lang.RuntimeException ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . setAsyncSupported ( true ) ; this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . setAsyncStarted ( true ) ; DeferredResult < java.lang.String > org.springframework.boot.web.servlet.support.DeferredResult<java.lang.String> = new DeferredResult <> ( ) ; WebAsyncManager org.springframework.boot.web.servlet.support.WebAsyncManager = WebAsyncUtils . getAsyncManager ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest ) ; org.springframework.boot.web.servlet.support.WebAsyncManager . setAsyncWebRequest ( new StandardServletAsyncWebRequest ( this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest , this . org.springframework.boot.web.servlet.support.MockHttpServletResponse ) ) ; org.springframework.boot.web.servlet.support.WebAsyncManager . startDeferredResultProcessing ( org.springframework.boot.web.servlet.support.DeferredResult<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String java.lang.String ) { return this . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest.AttributeCapturingRequestDispatcher ( java.lang.String ) . java.util.Map<java.lang.String,java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> private void ( ) { super( STRING , STRING ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.web.servlet.support.RequestDispatcher org.springframework.boot.web.servlet.support.RequestDispatcher ( java.lang.String java.lang.String ) { org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest.AttributeCapturingRequestDispatcher org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest.AttributeCapturingRequestDispatcher = new org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest.AttributeCapturingRequestDispatcher ( java.lang.String ) ; this . java.util.Map<java.lang.String,org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest.AttributeCapturingRequestDispatcher> . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest.AttributeCapturingRequestDispatcher ( java.lang.String , org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest.AttributeCapturingRequestDispatcher ) ; return org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest.AttributeCapturingRequestDispatcher ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest.AttributeCapturingRequestDispatcher org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest.AttributeCapturingRequestDispatcher ( java.lang.String java.lang.String ) { return this . java.util.Map<java.lang.String,org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest.AttributeCapturingRequestDispatcher> . org.springframework.boot.web.servlet.support.ErrorPageFilterTests.DispatchRecordingMockHttpServletRequest.AttributeCapturingRequestDispatcher ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest , ServletResponse org.springframework.boot.web.servlet.support.ServletResponse ) { void ( org.springframework.boot.web.servlet.support.ServletRequest ) ; super. forward ( org.springframework.boot.web.servlet.support.ServletRequest , org.springframework.boot.web.servlet.support.ServletResponse ) ; }  <METHOD_END>
<METHOD_START> private void void ( ServletRequest org.springframework.boot.web.servlet.support.ServletRequest ) { java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = org.springframework.boot.web.servlet.support.ServletRequest . getAttributeNames ( ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , org.springframework.boot.web.servlet.support.ServletRequest . getAttribute ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
