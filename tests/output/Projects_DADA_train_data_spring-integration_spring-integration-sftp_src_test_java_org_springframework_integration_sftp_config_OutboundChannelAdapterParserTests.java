<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.sftp.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.sftp.config.OutboundChannelAdapterParserTests> ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.sftp.config.ConfigurableApplicationContext . getBean ( STRING ) ; assertTrue ( java.lang.Object instanceof EventDrivenConsumer ) ; PublishSubscribeChannel org.springframework.integration.sftp.config.PublishSubscribeChannel = org.springframework.integration.sftp.config.ConfigurableApplicationContext . getBean ( STRING , PublishSubscribeChannel .class ) ; assertEquals ( org.springframework.integration.sftp.config.PublishSubscribeChannel , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertEquals ( STRING , ( ( EventDrivenConsumer ) java.lang.Object ) . getComponentName ( ) ) ; FileTransferringMessageHandler < ? > org.springframework.integration.sftp.config.FileTransferringMessageHandler<?> = TestUtils . getPropertyValue ( java.lang.Object , STRING , FileTransferringMessageHandler .class ) ; java.lang.String java.lang.String = ( java.lang.String ) TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.FileTransferringMessageHandler<> , STRING ) ; assertNotNull ( java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.FileTransferringMessageHandler<> , STRING , java.lang.String .class ) ) ; Expression org.springframework.integration.sftp.config.Expression = ( Expression ) TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.FileTransferringMessageHandler<> , STRING ) ; assertNotNull ( org.springframework.integration.sftp.config.Expression ) ; assertTrue ( org.springframework.integration.sftp.config.Expression instanceof LiteralExpression ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.FileTransferringMessageHandler<> , STRING ) ) ; assertEquals ( org.springframework.integration.sftp.config.ConfigurableApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.FileTransferringMessageHandler<> , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.FileTransferringMessageHandler<> , STRING ) ) ; CachingSessionFactory < ? > org.springframework.integration.sftp.config.CachingSessionFactory<?> = TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.FileTransferringMessageHandler<> , STRING , CachingSessionFactory .class ) ; DefaultSftpSessionFactory org.springframework.integration.sftp.config.DefaultSftpSessionFactory = TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.CachingSessionFactory<> , STRING , DefaultSftpSessionFactory .class ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.DefaultSftpSessionFactory , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.DefaultSftpSessionFactory , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.FileTransferringMessageHandler<> , STRING ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Set<org.springframework.integration.sftp.config.MessageHandler> < MessageHandler > java.util.Set<org.springframework.integration.sftp.config.MessageHandler> = ( java.util.Set<org.springframework.integration.sftp.config.MessageHandler> < MessageHandler > ) TestUtils . getPropertyValue ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.PublishSubscribeChannel , STRING ) , STRING ) ; java.util.Iterator<org.springframework.integration.sftp.config.MessageHandler> < MessageHandler > java.util.Iterator<org.springframework.integration.sftp.config.MessageHandler> = java.util.Set<org.springframework.integration.sftp.config.MessageHandler> . iterator ( ) ; assertSame ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.ConfigurableApplicationContext . getBean ( STRING ) , STRING ) , java.util.Iterator<org.springframework.integration.sftp.config.MessageHandler> . next ( ) ) ; assertSame ( org.springframework.integration.sftp.config.FileTransferringMessageHandler<> , java.util.Iterator<org.springframework.integration.sftp.config.MessageHandler> . next ( ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.FileTransferringMessageHandler<> , STRING ) ) ; org.springframework.integration.sftp.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.sftp.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.sftp.config.OutboundChannelAdapterParserTests> ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.sftp.config.ConfigurableApplicationContext . getBean ( STRING ) ; assertTrue ( java.lang.Object instanceof EventDrivenConsumer ) ; assertEquals ( org.springframework.integration.sftp.config.ConfigurableApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertEquals ( STRING , ( ( EventDrivenConsumer ) java.lang.Object ) . getComponentName ( ) ) ; FileTransferringMessageHandler < ? > org.springframework.integration.sftp.config.FileTransferringMessageHandler<?> = TestUtils . getPropertyValue ( java.lang.Object , STRING , FileTransferringMessageHandler .class ) ; SpelExpression org.springframework.integration.sftp.config.SpelExpression = ( SpelExpression ) TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.FileTransferringMessageHandler<> , STRING ) ; assertNotNull ( org.springframework.integration.sftp.config.SpelExpression ) ; assertEquals ( STRING , org.springframework.integration.sftp.config.SpelExpression . getExpressionString ( ) ) ; FileNameGenerator org.springframework.integration.sftp.config.FileNameGenerator = ( FileNameGenerator ) TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.FileTransferringMessageHandler<> , STRING ) ; Expression org.springframework.integration.sftp.config.Expression = TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.FileNameGenerator , STRING , Expression .class ) ; assertNotNull ( org.springframework.integration.sftp.config.Expression ) ; assertEquals ( STRING , org.springframework.integration.sftp.config.Expression . getExpressionString ( ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.FileTransferringMessageHandler<> , STRING ) ) ; assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.FileTransferringMessageHandler<> , STRING ) ) ; org.springframework.integration.sftp.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.sftp.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.sftp.config.OutboundChannelAdapterParserTests> ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.sftp.config.ConfigurableApplicationContext . getBean ( STRING ) ; FileTransferringMessageHandler < ? > org.springframework.integration.sftp.config.FileTransferringMessageHandler<?> = TestUtils . getPropertyValue ( java.lang.Object , STRING , FileTransferringMessageHandler .class ) ; assertFalse ( ( java.lang.Boolean ) TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.FileTransferringMessageHandler<> , STRING ) ) ; org.springframework.integration.sftp.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.sftp.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.sftp.config.OutboundChannelAdapterParserTests> ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.sftp.config.ConfigurableApplicationContext . getBean ( STRING ) ; MessageHandler org.springframework.integration.sftp.config.MessageHandler = TestUtils . getPropertyValue ( java.lang.Object , STRING , MessageHandler .class ) ; org.springframework.integration.sftp.config.MessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , int ) ; org.springframework.integration.sftp.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.sftp.config.OutboundChannelAdapterParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeanDefinitionStoreException org.springframework.integration.sftp.config.BeanDefinitionStoreException ) { assertThat ( org.springframework.integration.sftp.config.BeanDefinitionStoreException . getMessage ( ) , Matchers . containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionStoreException .class ) public void void ( ) { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.sftp.config.OutboundChannelAdapterParserTests> ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.sftp.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.sftp.config.Message<?> ) throws java.lang.Exception { int ++ ; return null ; }  <METHOD_END>
