<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.support.converter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; MapMessageConverter org.springframework.integration.support.converter.MapMessageConverter = new MapMessageConverter ( ) ; org.springframework.integration.support.converter.MapMessageConverter . setHeaderNames ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.support.converter.MapMessageConverter . fromMessage ( org.springframework.integration.support.converter.Message<java.lang.String> , java.util.Map .class ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.support.converter.Message<?> = org.springframework.integration.support.converter.MapMessageConverter . toMessage ( java.util.Map<java.lang.String,java.lang.Object> , null ) ; assertEquals ( STRING , org.springframework.integration.support.converter.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.support.converter.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.support.converter.Message<> . getHeaders ( ) . get ( STRING ) ) ; org.springframework.integration.support.converter.MapMessageConverter . setFilterHeadersInToMessage ( true ) ; org.springframework.integration.support.converter.Message<?> = org.springframework.integration.support.converter.MapMessageConverter . toMessage ( java.util.Map<java.lang.String,java.lang.Object> , null ) ; assertEquals ( STRING , org.springframework.integration.support.converter.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.support.converter.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.support.converter.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.support.converter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; MapMessageConverter org.springframework.integration.support.converter.MapMessageConverter = new MapMessageConverter ( ) ; org.springframework.integration.support.converter.MapMessageConverter . setHeaderNames ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.support.converter.MapMessageConverter . fromMessage ( org.springframework.integration.support.converter.Message<java.lang.String> , java.util.Map .class ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; try { org.springframework.integration.support.converter.MapMessageConverter . toMessage ( java.util.Map<java.lang.String,java.lang.Object> , null ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.support.converter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; MapMessageConverter org.springframework.integration.support.converter.MapMessageConverter = new MapMessageConverter ( ) ; org.springframework.integration.support.converter.MapMessageConverter . setHeaderNames ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.support.converter.MapMessageConverter . fromMessage ( org.springframework.integration.support.converter.Message<java.lang.String> , java.util.Map .class ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; Message < ? > org.springframework.integration.support.converter.Message<?> = org.springframework.integration.support.converter.MapMessageConverter . toMessage ( java.util.Map<java.lang.String,java.lang.Object> , null ) ; assertEquals ( STRING , org.springframework.integration.support.converter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.support.converter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , null ) . build ( ) ; MapMessageConverter org.springframework.integration.support.converter.MapMessageConverter = new MapMessageConverter ( ) ; org.springframework.integration.support.converter.MapMessageConverter . setHeaderNames ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.support.converter.MapMessageConverter . fromMessage ( org.springframework.integration.support.converter.Message<java.lang.String> , java.util.Map .class ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertFalse ( java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) . boolean ( STRING ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
