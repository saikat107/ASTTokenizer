<METHOD_START> @ Test public void void ( ) java.lang.Exception { ByteArrayResource org.springframework.boot.env.ByteArrayResource = new ByteArrayResource ( STRING . byte[] ( ) ) ; PropertySource < ? > org.springframework.boot.env.PropertySource<?> = this . org.springframework.boot.env.YamlPropertySourceLoader . load ( STRING , org.springframework.boot.env.ByteArrayResource , null ) ; assertThat ( org.springframework.boot.env.PropertySource<> ) . isNotNull ( ) ; assertThat ( org.springframework.boot.env.PropertySource<> . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( char char = 'a' ; char <= 'z' ; char ++ ) { java.lang.StringBuilder . java.lang.StringBuilder ( char + STRING + char + STRING ) ; java.util.List<java.lang.String> . boolean ( java.lang.String . java.lang.String ( char ) ) ; } ByteArrayResource org.springframework.boot.env.ByteArrayResource = new ByteArrayResource ( java.lang.StringBuilder . java.lang.String ( ) . byte[] ( ) ) ; EnumerablePropertySource < ? > org.springframework.boot.env.EnumerablePropertySource<?> = ( EnumerablePropertySource < ? > ) this . org.springframework.boot.env.YamlPropertySourceLoader . load ( STRING , org.springframework.boot.env.ByteArrayResource , null ) ; assertThat ( org.springframework.boot.env.EnumerablePropertySource<> ) . isNotNull ( ) ; assertThat ( org.springframework.boot.env.EnumerablePropertySource<> . getPropertyNames ( ) ) . isEqualTo ( java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [] {} ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; ByteArrayResource org.springframework.boot.env.ByteArrayResource = new ByteArrayResource ( java.lang.StringBuilder . java.lang.String ( ) . byte[] ( ) ) ; PropertySource < ? > org.springframework.boot.env.PropertySource<?> = this . org.springframework.boot.env.YamlPropertySourceLoader . load ( STRING , org.springframework.boot.env.ByteArrayResource , null ) ; assertThat ( org.springframework.boot.env.PropertySource<> ) . isNotNull ( ) ; assertThat ( org.springframework.boot.env.PropertySource<> . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.env.PropertySource<> . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ByteArrayResource org.springframework.boot.env.ByteArrayResource = new ByteArrayResource ( STRING . byte[] ( ) ) ; PropertySource < ? > org.springframework.boot.env.PropertySource<?> = this . org.springframework.boot.env.YamlPropertySourceLoader . load ( STRING , org.springframework.boot.env.ByteArrayResource , null ) ; assertThat ( org.springframework.boot.env.PropertySource<> ) . isNotNull ( ) ; assertThat ( org.springframework.boot.env.PropertySource<> . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.boot.env.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.boot.env.YamlPropertySourceLoaderTests> ( ) ) ; PropertySource < ? > org.springframework.boot.env.PropertySource<?> = this . org.springframework.boot.env.YamlPropertySourceLoader . load ( STRING , org.springframework.boot.env.Resource , null ) ; EnumerablePropertySource < ? > org.springframework.boot.env.EnumerablePropertySource<?> = ( EnumerablePropertySource < ? > ) org.springframework.boot.env.PropertySource<> ; for ( java.lang.String java.lang.String : org.springframework.boot.env.EnumerablePropertySource<> . getPropertyNames ( ) ) { java.lang.System . java.io.PrintStream . void ( java.lang.String + STRING + org.springframework.boot.env.EnumerablePropertySource<> . getProperty ( java.lang.String ) ) ; } }  <METHOD_END>
