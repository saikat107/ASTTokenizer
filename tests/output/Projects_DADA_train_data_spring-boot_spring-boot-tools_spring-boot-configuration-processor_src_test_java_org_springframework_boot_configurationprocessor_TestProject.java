<METHOD_START> public void ( TemporaryFolder org.springframework.boot.configurationprocessor.TemporaryFolder , java.lang.Class<?> < ? > ... java.lang.Class<?>[] )			throws java.io.IOException { this . java.io.File = org.springframework.boot.configurationprocessor.TemporaryFolder . newFolder ( ) ; this . org.springframework.boot.configurationprocessor.TestCompiler = new TestCompiler ( org.springframework.boot.configurationprocessor.TemporaryFolder ) { @ java.lang.Override protected java.io.File java.io.File ( ) { return org.springframework.boot.configurationprocessor.TestProject .this . java.io.File ; } } ; java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.HashSet<java.lang.Class<?>> <> ( java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<?>[] ) ) ; java.util.Set<java.lang.Class<?>> . boolean ( java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<?>[] ) ) ; void ( java.util.Set<java.lang.Class<?>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.io.File java.io.File ( ) { return org.springframework.boot.configurationprocessor.TestProject .this . java.io.File ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ) throws java.io.IOException { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.Set<java.lang.Class<?>> ) { void ( java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.io.IOException { java.io.File java.io.File = java.io.File ( java.lang.Class<> ) ; java.io.File java.io.File = java.io.File ( java.lang.Class<> ) ; java.io.File . java.io.File ( ) . boolean ( ) ; FileCopyUtils . copy ( java.io.File , java.io.File ) ; this . java.util.Set<java.io.File> . boolean ( java.io.File ) ; }  <METHOD_END>
<METHOD_START> public java.io.File java.io.File ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new java.io.File ( this . java.io.File , TestCompiler . sourcePathFor ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.configurationprocessor.ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata ( ) { TestConfigurationMetadataAnnotationProcessor org.springframework.boot.configurationprocessor.TestConfigurationMetadataAnnotationProcessor = new TestConfigurationMetadataAnnotationProcessor ( this . org.springframework.boot.configurationprocessor.TestCompiler . getOutputLocation ( ) ) ; TestCompilationTask org.springframework.boot.configurationprocessor.TestCompilationTask = this . org.springframework.boot.configurationprocessor.TestCompiler . getTask ( this . java.util.Set<java.io.File> ) ; void ( this . org.springframework.boot.configurationprocessor.TestCompiler . getOutputLocation ( ) ) ; org.springframework.boot.configurationprocessor.TestCompilationTask . call ( org.springframework.boot.configurationprocessor.TestConfigurationMetadataAnnotationProcessor ) ; return org.springframework.boot.configurationprocessor.TestConfigurationMetadataAnnotationProcessor . getMetadata ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.configurationprocessor.ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { TestConfigurationMetadataAnnotationProcessor org.springframework.boot.configurationprocessor.TestConfigurationMetadataAnnotationProcessor = new TestConfigurationMetadataAnnotationProcessor ( this . org.springframework.boot.configurationprocessor.TestCompiler . getOutputLocation ( ) ) ; TestCompilationTask org.springframework.boot.configurationprocessor.TestCompilationTask = this . org.springframework.boot.configurationprocessor.TestCompiler . getTask ( java.lang.Class<?>[] ) ; org.springframework.boot.configurationprocessor.TestCompilationTask . call ( org.springframework.boot.configurationprocessor.TestConfigurationMetadataAnnotationProcessor ) ; return org.springframework.boot.configurationprocessor.TestConfigurationMetadataAnnotationProcessor . getMetadata ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File ) { FileSystemUtils . deleteRecursively ( java.io.File ) ; java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public java.io.File java.io.File ( java.lang.String java.lang.String ) { Assert . assertFalse ( new java.io.File ( java.lang.String ) . boolean ( ) ) ; return new java.io.File ( this . org.springframework.boot.configurationprocessor.TestCompiler . getOutputLocation ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.io.InputStream java.io.InputStream )			throws java.lang.Exception { java.io.File java.io.File = java.io.File ( java.lang.Class<> ) ; java.lang.String java.lang.String = java.lang.String ( java.io.File ) ; int int = java.lang.String . int ( '}' ) ; java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.InputStreamReader ( java.io.InputStream ) ) ; java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) + java.lang.String + java.lang.String . java.lang.String ( int ) ; void ( java.io.File , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.io.File java.io.File = java.io.File ( java.lang.Class<> ) ; java.io.File . boolean ( ) ; this . java.util.Set<java.io.File> . boolean ( java.io.File ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.io.IOException { Assert . assertTrue ( java.io.File ( java.lang.Class<> ) . boolean ( ) ) ; void ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.io.IOException { Assert . assertFalse ( java.io.File ( java.lang.Class<> ) . boolean ( ) ) ; void ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.lang.Exception { java.io.File java.io.File = java.io.File ( java.lang.Class<> ) ; java.lang.String java.lang.String = java.lang.String ( java.io.File ) ; java.lang.String = java.lang.String . java.lang.String ( java.lang.String , java.lang.String ) ; void ( java.io.File , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new java.io.File ( TestCompiler . SOURCE_FOLDER , TestCompiler . sourcePathFor ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.io.File java.io.File , java.lang.String java.lang.String )			throws java.io.FileNotFoundException , java.io.IOException , java.io.UnsupportedEncodingException { FileCopyUtils . copy ( new java.io.StringReader ( java.lang.String ) , new java.io.FileWriter ( java.io.File ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.io.File java.io.File ) throws java.lang.Exception { return FileCopyUtils . copyToString ( new java.io.FileReader ( java.io.File ) ) ; }  <METHOD_END>
