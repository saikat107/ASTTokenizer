<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.http.client.MockWebServer = new MockWebServer ( ) ; this . org.springframework.http.client.MockWebServer . setDispatcher ( new org.springframework.http.client.AbstractMockWebServerTestCase.TestDispatcher ( ) ) ; this . org.springframework.http.client.MockWebServer . start ( ) ; this . int = this . org.springframework.http.client.MockWebServer . getPort ( ) ; this . java.lang.String = STRING + this . int ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { this . org.springframework.http.client.MockWebServer . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.MockResponse org.springframework.http.client.MockResponse ( RecordedRequest org.springframework.http.client.RecordedRequest ) throws java.lang.InterruptedException { try { if ( org.springframework.http.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { MockResponse org.springframework.http.client.MockResponse = new MockResponse ( ) . setHeaders ( org.springframework.http.client.RecordedRequest . getHeaders ( ) ) . setHeader ( STRING , org.springframework.http.client.RecordedRequest . getBody ( ) . size ( ) ) . setResponseCode ( NUMBER ) . setBody ( org.springframework.http.client.RecordedRequest . getBody ( ) ) ; org.springframework.http.client.RecordedRequest . getBody ( ) . flush ( ) ; return org.springframework.http.client.MockResponse ; } else if( org.springframework.http.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { return new MockResponse ( ) ; } else if( org.springframework.http.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { return new MockResponse ( ) . setResponseCode ( NUMBER ) ; } else if( org.springframework.http.client.RecordedRequest . getPath ( ) . startsWith ( STRING ) ) { assertThat ( org.springframework.http.client.RecordedRequest . getPath ( ) , Matchers . containsString ( STRING ) ) ; assertThat ( org.springframework.http.client.RecordedRequest . getPath ( ) , Matchers . containsString ( STRING ) ) ; return new MockResponse ( ) ; } else if( org.springframework.http.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { assertThat ( org.springframework.http.client.RecordedRequest . getMethod ( ) , Matchers . is ( STRING ) ) ; java.lang.String java.lang.String = org.springframework.http.client.RecordedRequest . getHeader ( STRING ) ; if( StringUtils . hasLength ( java.lang.String ) ) { assertThat ( java.lang.String , Matchers . is ( STRING ) ) ; } else { long long = java.lang.Long . long ( org.springframework.http.client.RecordedRequest . getHeader ( STRING ) ) ; assertThat ( STRING , org.springframework.http.client.RecordedRequest . getBody ( ) . size ( ) , Matchers . is ( long ) ) ; } return new MockResponse ( ) . setResponseCode ( NUMBER ) ; } else if( org.springframework.http.client.RecordedRequest . getPath ( ) . startsWith ( STRING ) ) { java.lang.String java.lang.String = org.springframework.http.client.RecordedRequest . getPath ( ) . replace ( STRING , STRING ) . toUpperCase ( ) ; assertThat ( org.springframework.http.client.RecordedRequest . getMethod ( ) , Matchers . is ( java.lang.String ) ) ; return new MockResponse ( ) ; } return new MockResponse ( ) . setResponseCode ( NUMBER ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { return new MockResponse ( ) . setResponseCode ( NUMBER ) . setBody ( java.lang.Throwable . java.lang.String ( ) ) ; } }  <METHOD_END>
