<METHOD_START> public void ( Expression org.springframework.integration.transformer.support.Expression , java.lang.Class<T> < T > java.lang.Class<T> ) { this . org.springframework.integration.transformer.support.ExpressionEvaluatingMessageProcessor<T> = new ExpressionEvaluatingMessageProcessor < T > ( org.springframework.integration.transformer.support.Expression , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { Expression org.springframework.integration.transformer.support.Expression = org.springframework.integration.transformer.support.ExpressionParser . parseExpression ( java.lang.String ) ; this . org.springframework.integration.transformer.support.ExpressionEvaluatingMessageProcessor<T> = new ExpressionEvaluatingMessageProcessor < T > ( org.springframework.integration.transformer.support.Expression , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public void void ( BeanFactory org.springframework.integration.transformer.support.BeanFactory ) { this . org.springframework.integration.transformer.support.ExpressionEvaluatingMessageProcessor<T> . setBeanFactory ( org.springframework.integration.transformer.support.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> public T T ( Message < ? > org.springframework.integration.transformer.support.Message<?> ) { return this . org.springframework.integration.transformer.support.ExpressionEvaluatingMessageProcessor<T> . processMessage ( org.springframework.integration.transformer.support.Message<> ) ; }  <METHOD_END>
