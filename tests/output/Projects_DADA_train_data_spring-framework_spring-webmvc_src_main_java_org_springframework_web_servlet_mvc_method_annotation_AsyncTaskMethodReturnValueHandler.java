<METHOD_START> public void ( BeanFactory org.springframework.web.servlet.mvc.method.annotation.BeanFactory ) { this . org.springframework.web.servlet.mvc.method.annotation.BeanFactory = org.springframework.web.servlet.mvc.method.annotation.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { return WebAsyncTask .class . boolean ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) throws java.lang.Exception { if ( java.lang.Object == null ) { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRequestHandled ( true ) ; return; } WebAsyncTask < ? > org.springframework.web.servlet.mvc.method.annotation.WebAsyncTask<?> = ( WebAsyncTask < ? > ) java.lang.Object ; org.springframework.web.servlet.mvc.method.annotation.WebAsyncTask<> . setBeanFactory ( this . org.springframework.web.servlet.mvc.method.annotation.BeanFactory ) ; WebAsyncUtils . getAsyncManager ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) . startCallableProcessing ( org.springframework.web.servlet.mvc.method.annotation.WebAsyncTask<> , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer ) ; }  <METHOD_END>
