<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.data.projection.BeanFactory ) throws org.springframework.data.projection.BeansException { this . org.springframework.data.projection.BeanFactory = org.springframework.data.projection.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.projection.MethodInterceptor org.springframework.data.projection.MethodInterceptor ( MethodInterceptor org.springframework.data.projection.MethodInterceptor , java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( ! java.util.Map<java.lang.Class<?>,java.lang.Boolean> . boolean ( java.lang.Class<> ) ) { AnnotationDetectionMethodCallback < Value > org.springframework.data.projection.AnnotationDetectionMethodCallback<org.springframework.data.projection.Value> = new AnnotationDetectionMethodCallback <> ( Value .class ) ; ReflectionUtils . doWithMethods ( java.lang.Class<> , org.springframework.data.projection.AnnotationDetectionMethodCallback<org.springframework.data.projection.Value> ) ; java.util.Map<java.lang.Class<?>,java.lang.Boolean> . java.lang.Boolean ( java.lang.Class<> , org.springframework.data.projection.AnnotationDetectionMethodCallback<org.springframework.data.projection.Value> . hasFoundAnnotation ( ) ) ; } return java.util.Map<java.lang.Class<?>,java.lang.Boolean> . java.lang.Boolean ( java.lang.Class<> ) ? new SpelEvaluatingMethodInterceptor ( org.springframework.data.projection.MethodInterceptor , java.lang.Object , org.springframework.data.projection.BeanFactory , org.springframework.data.projection.SpelExpressionParser , java.lang.Class<> ) : org.springframework.data.projection.MethodInterceptor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.projection.ProjectionInformation org.springframework.data.projection.ProjectionInformation ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new DefaultProjectionInformation ( java.lang.Class<> ) { @ java.lang.Override protected boolean boolean ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor ) { if ( ! super. isInputProperty ( java.beans.PropertyDescriptor ) ) { return false ; } java.lang.reflect.Method java.lang.reflect.Method = java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) ; if ( java.lang.reflect.Method == null ) { return false ; } return AnnotationUtils . findAnnotation ( java.lang.reflect.Method , Value .class ) == null ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor ) { if ( ! super. isInputProperty ( java.beans.PropertyDescriptor ) ) { return false ; } java.lang.reflect.Method java.lang.reflect.Method = java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) ; if ( java.lang.reflect.Method == null ) { return false ; } return AnnotationUtils . findAnnotation ( java.lang.reflect.Method , Value .class ) == null ; }  <METHOD_END>
