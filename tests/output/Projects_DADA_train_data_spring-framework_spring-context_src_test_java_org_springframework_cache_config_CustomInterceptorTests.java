<METHOD_START> @ Before public void void ( ) { this . org.springframework.cache.config.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.cache.config.CustomInterceptorTests.EnableCachingConfig .class ) ; this . org.springframework.cache.config.CacheableService<?> = org.springframework.cache.config.ConfigurableApplicationContext . getBean ( STRING , CacheableService .class ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.cache.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.cache.config.CacheInterceptor> < java.lang.String , CacheInterceptor > java.util.Map<java.lang.String,org.springframework.cache.config.CacheInterceptor> = this . org.springframework.cache.config.ConfigurableApplicationContext . getBeansOfType ( CacheInterceptor .class ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,org.springframework.cache.config.CacheInterceptor> . size ( ) ) ; CacheInterceptor org.springframework.cache.config.CacheInterceptor = java.util.Map<java.lang.String,org.springframework.cache.config.CacheInterceptor> . values ( ) . iterator ( ) . next ( ) ; assertEquals ( STRING , org.springframework.cache.config.CustomInterceptorTests.TestCacheInterceptor .class , org.springframework.cache.config.CacheInterceptor . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = this . org.springframework.cache.config.CacheableService<> . throwUnchecked ( NUMBER ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { this . org.springframework.cache.config.CacheableService<> . throwChecked ( NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { assertNotNull ( STRING , java.lang.RuntimeException . java.lang.Throwable ( ) ) ; assertEquals ( java.io.IOException .class , java.lang.RuntimeException . java.lang.Throwable ( ) . java.lang.Class<? extends java.lang.Throwable> ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( STRING + java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.config.CacheManager org.springframework.cache.config.CacheManager ( ) { return CacheTestUtils . createSimpleCacheManager ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.config.CacheableService<?> < ? > org.springframework.cache.config.CacheableService<?> ( ) { return new DefaultCacheableService ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.config.CacheInterceptor org.springframework.cache.config.CacheInterceptor ( CacheOperationSource org.springframework.cache.config.CacheOperationSource ) { CacheInterceptor org.springframework.cache.config.CacheInterceptor = new org.springframework.cache.config.CustomInterceptorTests.TestCacheInterceptor ( ) ; org.springframework.cache.config.CacheInterceptor . setCacheManager ( org.springframework.cache.config.CacheManager ( ) ) ; org.springframework.cache.config.CacheInterceptor . setCacheOperationSources ( org.springframework.cache.config.CacheOperationSource ) ; return org.springframework.cache.config.CacheInterceptor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( CacheOperationInvoker org.springframework.cache.config.CacheOperationInvoker ) { try { return super. invokeOperation ( org.springframework.cache.config.CacheOperationInvoker ) ; } catch ( CacheOperationInvoker . CacheOperationInvoker CacheOperationInvoker.ThrowableWrapper ) { java.lang.Throwable java.lang.Throwable = CacheOperationInvoker.ThrowableWrapper . getOriginal ( ) ; if ( java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) == java.lang.UnsupportedOperationException .class ) { return NUMBER ; } else { throw new CacheOperationInvoker . CacheOperationInvoker ( new java.lang.RuntimeException ( STRING , java.lang.Throwable ) ) ; } } }  <METHOD_END>
