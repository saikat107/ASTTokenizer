<METHOD_START> @ Test public void void ( ) java.lang.Exception { PersistenceUnitReader org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader = new PersistenceUnitReader ( new PathMatchingResourcePatternResolver ( ) , new JndiDataSourceLookup ( ) ) ; java.lang.String java.lang.String = STRING ; PersistenceUnitInfo [] org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] = org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader . readPersistenceUnitInfos ( java.lang.String ) ; assertNotNull ( org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] ) ; assertEquals ( NUMBER , info . length ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getPersistenceUnitName ( ) ) ; assertEquals ( NUMBER , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getJarFileUrls ( ) . size ( ) ) ; assertEquals ( new ClassPathResource ( STRING ) . getURL ( ) , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getJarFileUrls ( ) . get ( NUMBER ) ) ; assertEquals ( new ClassPathResource ( STRING ) . getURL ( ) , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getJarFileUrls ( ) . get ( NUMBER ) ) ; assertFalse ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . excludeUnlistedClasses ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PersistenceUnitReader org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader = new PersistenceUnitReader ( new PathMatchingResourcePatternResolver ( ) , new JndiDataSourceLookup ( ) ) ; java.lang.String java.lang.String = STRING ; PersistenceUnitInfo [] org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] = org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader . readPersistenceUnitInfos ( java.lang.String ) ; assertNotNull ( org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] ) ; assertEquals ( NUMBER , info . length ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getPersistenceUnitName ( ) ) ; assertFalse ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . excludeUnlistedClasses ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PersistenceUnitReader org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader = new PersistenceUnitReader ( new PathMatchingResourcePatternResolver ( ) , new JndiDataSourceLookup ( ) ) ; java.lang.String java.lang.String = STRING ; PersistenceUnitInfo [] org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] = org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader . readPersistenceUnitInfos ( java.lang.String ) ; assertNotNull ( org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] ) ; assertEquals ( NUMBER , info . length ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getPersistenceUnitName ( ) ) ; assertEquals ( NUMBER , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getMappingFileNames ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getMappingFileNames ( ) . get ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getProperties ( ) . keySet ( ) . size ( ) ) ; assertFalse ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . excludeUnlistedClasses ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PersistenceUnitReader org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader = new PersistenceUnitReader ( new PathMatchingResourcePatternResolver ( ) , new JndiDataSourceLookup ( ) ) ; java.lang.String java.lang.String = STRING ; PersistenceUnitInfo [] org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] = org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader . readPersistenceUnitInfos ( java.lang.String ) ; assertNotNull ( org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] ) ; assertEquals ( NUMBER , info . length ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getPersistenceUnitName ( ) ) ; assertEquals ( NUMBER , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getJarFileUrls ( ) . size ( ) ) ; assertEquals ( new ClassPathResource ( STRING ) . getURL ( ) , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getJarFileUrls ( ) . get ( NUMBER ) ) ; assertEquals ( new ClassPathResource ( STRING ) . getURL ( ) , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getJarFileUrls ( ) . get ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getProperties ( ) . keySet ( ) . size ( ) ) ; assertNull ( org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getJtaDataSource ( ) ) ; assertNull ( org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getNonJtaDataSource ( ) ) ; assertFalse ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . excludeUnlistedClasses ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpleNamingContextBuilder org.springframework.orm.jpa.persistenceunit.SimpleNamingContextBuilder = SimpleNamingContextBuilder . emptyActivatedContextBuilder ( ) ; javax.sql.DataSource javax.sql.DataSource = new DriverManagerDataSource ( ) ; org.springframework.orm.jpa.persistenceunit.SimpleNamingContextBuilder . bind ( STRING , javax.sql.DataSource ) ; PersistenceUnitReader org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader = new PersistenceUnitReader ( new PathMatchingResourcePatternResolver ( ) , new JndiDataSourceLookup ( ) ) ; java.lang.String java.lang.String = STRING ; PersistenceUnitInfo [] org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] = org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader . readPersistenceUnitInfos ( java.lang.String ) ; assertNotNull ( org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] ) ; assertEquals ( NUMBER , info . length ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getPersistenceUnitName ( ) ) ; assertEquals ( NUMBER , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getMappingFileNames ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getMappingFileNames ( ) . get ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getManagedClassNames ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getManagedClassNames ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getManagedClassNames ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getManagedClassNames ( ) . get ( NUMBER ) ) ; assertTrue ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . excludeUnlistedClasses ( ) ) ; assertSame ( PersistenceUnitTransactionType . RESOURCE_LOCAL , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getTransactionType ( ) ) ; assertEquals ( NUMBER , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getProperties ( ) . keySet ( ) . size ( ) ) ; org.springframework.orm.jpa.persistenceunit.SimpleNamingContextBuilder . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PersistenceUnitReader org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader = new PersistenceUnitReader ( new PathMatchingResourcePatternResolver ( ) , new JndiDataSourceLookup ( ) ) ; java.lang.String java.lang.String = STRING ; PersistenceUnitInfo [] org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] = org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader . readPersistenceUnitInfos ( java.lang.String ) ; assertNotNull ( org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] ) ; assertEquals ( NUMBER , info . length ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getPersistenceUnitName ( ) ) ; assertEquals ( NUMBER , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getMappingFileNames ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getMappingFileNames ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getMappingFileNames ( ) . get ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getJarFileUrls ( ) . size ( ) ) ; assertEquals ( new ClassPathResource ( STRING ) . getURL ( ) , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getJarFileUrls ( ) . get ( NUMBER ) ) ; assertEquals ( new ClassPathResource ( STRING ) . getURL ( ) , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getJarFileUrls ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getPersistenceProviderClassName ( ) ) ; assertEquals ( NUMBER , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getProperties ( ) . keySet ( ) . size ( ) ) ; assertFalse ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . excludeUnlistedClasses ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.sql.DataSource javax.sql.DataSource = new DriverManagerDataSource ( ) ; java.lang.String java.lang.String = STRING ; MapDataSourceLookup org.springframework.orm.jpa.persistenceunit.MapDataSourceLookup = new MapDataSourceLookup ( ) ; java.util.Map<java.lang.String,javax.sql.DataSource> < java.lang.String , javax.sql.DataSource > java.util.Map<java.lang.String,javax.sql.DataSource> = new java.util.HashMap<java.lang.String,javax.sql.DataSource> <> ( ) ; java.util.Map<java.lang.String,javax.sql.DataSource> . javax.sql.DataSource ( STRING , javax.sql.DataSource ) ; java.util.Map<java.lang.String,javax.sql.DataSource> . javax.sql.DataSource ( STRING , javax.sql.DataSource ) ; org.springframework.orm.jpa.persistenceunit.MapDataSourceLookup . setDataSources ( java.util.Map<java.lang.String,javax.sql.DataSource> ) ; PersistenceUnitReader org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader = new PersistenceUnitReader ( new PathMatchingResourcePatternResolver ( ) , org.springframework.orm.jpa.persistenceunit.MapDataSourceLookup ) ; PersistenceUnitInfo [] org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] = org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader . readPersistenceUnitInfos ( java.lang.String ) ; assertEquals ( NUMBER , info . length ) ; PersistenceUnitInfo org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo = org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getPersistenceUnitName ( ) ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getPersistenceProviderClassName ( ) ) ; assertEquals ( NUMBER , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getMappingFileNames ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getMappingFileNames ( ) . get ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getJarFileUrls ( ) . size ( ) ) ; assertEquals ( new ClassPathResource ( STRING ) . getURL ( ) , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getJarFileUrls ( ) . get ( NUMBER ) ) ; assertFalse ( org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . excludeUnlistedClasses ( ) ) ; assertSame ( PersistenceUnitTransactionType . RESOURCE_LOCAL , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getTransactionType ( ) ) ; java.util.Properties java.util.Properties = org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getProperties ( ) ; assertEquals ( NUMBER , java.util.Properties . java.util.Set<java.lang.Object> ( ) . int ( ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertNull ( org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getNonJtaDataSource ( ) ) ; assertSame ( javax.sql.DataSource , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getJtaDataSource ( ) ) ; assertFalse ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . excludeUnlistedClasses ( ) ) ; PersistenceUnitInfo org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo = org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] ; assertSame ( PersistenceUnitTransactionType . JTA , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getTransactionType ( ) ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getPersistenceProviderClassName ( ) ) ; assertEquals ( NUMBER , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getMappingFileNames ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getMappingFileNames ( ) . get ( NUMBER ) ) ; assertTrue ( org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . excludeUnlistedClasses ( ) ) ; assertNull ( org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getJtaDataSource ( ) ) ; assertEquals ( javax.sql.DataSource , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getNonJtaDataSource ( ) ) ; assertTrue ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . excludeUnlistedClasses ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PersistenceUnitReader org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader = new PersistenceUnitReader ( new PathMatchingResourcePatternResolver ( ) , new JndiDataSourceLookup ( ) ) ; java.lang.String java.lang.String = STRING ; PersistenceUnitInfo [] org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] = org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader . readPersistenceUnitInfos ( java.lang.String ) ; assertEquals ( NUMBER , info . length ) ; assertEquals ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getPersistenceUnitName ( ) ) ; assertEquals ( NUMBER , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . getProperties ( ) . keySet ( ) . size ( ) ) ; assertFalse ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] . excludeUnlistedClasses ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Ignore @ Test public void void ( ) java.lang.Exception { PersistenceUnitReader org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader = new PersistenceUnitReader ( new PathMatchingResourcePatternResolver ( ) , new JndiDataSourceLookup ( ) ) ; java.lang.String java.lang.String = STRING ; try { org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader . readPersistenceUnitInfos ( java.lang.String ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) {		} }  <METHOD_END>
<METHOD_START> @ Ignore @ Test public void void ( ) java.lang.Exception { PersistenceUnitReader org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader = new PersistenceUnitReader ( new PathMatchingResourcePatternResolver ( ) , new JndiDataSourceLookup ( ) ) ; java.lang.String java.lang.String = STRING ; try { org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader . readPersistenceUnitInfos ( java.lang.String ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = PersistenceUnitReader . determinePersistenceUnitRootUrl ( new ClassPathResource ( STRING ) ) ; assertNull ( java.net.URL ) ; java.net.URL = PersistenceUnitReader . determinePersistenceUnitRootUrl ( new ClassPathResource ( STRING ) ) ; assertTrue ( STRING , java.net.URL . java.lang.String ( ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathResource org.springframework.orm.jpa.persistenceunit.ClassPathResource = new ClassPathResource ( STRING ) ; java.lang.String java.lang.String = STRING + org.springframework.orm.jpa.persistenceunit.ClassPathResource . getURL ( ) . toExternalForm ( ) + STRING ; Resource org.springframework.orm.jpa.persistenceunit.Resource = new UrlResource ( java.lang.String ) ; assertTrue ( org.springframework.orm.jpa.persistenceunit.Resource . exists ( ) ) ; java.net.URL java.net.URL = PersistenceUnitReader . determinePersistenceUnitRootUrl ( org.springframework.orm.jpa.persistenceunit.Resource ) ; assertTrue ( STRING , org.springframework.orm.jpa.persistenceunit.ClassPathResource . getURL ( ) . sameFile ( java.net.URL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PersistenceUnitReader org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader = new PersistenceUnitReader ( new PathMatchingResourcePatternResolver ( ) , new JndiDataSourceLookup ( ) ) ; java.lang.String java.lang.String = STRING ; PersistenceUnitInfo [] org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] = org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader . readPersistenceUnitInfos ( java.lang.String ) ; assertNotNull ( org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] ) ; assertEquals ( STRING , NUMBER , info . length ) ; PersistenceUnitInfo org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo = org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] ; assertNotNull ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo ) ; assertEquals ( STRING , STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getPersistenceUnitName ( ) ) ; assertFalse ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . excludeUnlistedClasses ( ) ) ; PersistenceUnitInfo org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo = org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] ; assertNotNull ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo ) ; assertEquals ( STRING , STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getPersistenceUnitName ( ) ) ; assertTrue ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . excludeUnlistedClasses ( ) ) ; PersistenceUnitInfo org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo = org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] ; assertNotNull ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo ) ; assertEquals ( STRING , STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getPersistenceUnitName ( ) ) ; assertTrue ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . excludeUnlistedClasses ( ) ) ; PersistenceUnitInfo org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo = org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] ; assertNotNull ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo ) ; assertEquals ( STRING , STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getPersistenceUnitName ( ) ) ; assertFalse ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . excludeUnlistedClasses ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PersistenceUnitReader org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader = new PersistenceUnitReader ( new PathMatchingResourcePatternResolver ( ) , new JndiDataSourceLookup ( ) ) ; java.lang.String java.lang.String = STRING ; PersistenceUnitInfo [] org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] = org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader . readPersistenceUnitInfos ( java.lang.String ) ; assertNotNull ( org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] ) ; assertEquals ( STRING , NUMBER , info . length ) ; PersistenceUnitInfo org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo = org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] ; assertNotNull ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo ) ; assertEquals ( STRING , STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getPersistenceUnitName ( ) ) ; assertFalse ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . excludeUnlistedClasses ( ) ) ; PersistenceUnitInfo org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo = org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] ; assertNotNull ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo ) ; assertEquals ( STRING , STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getPersistenceUnitName ( ) ) ; assertTrue ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . excludeUnlistedClasses ( ) ) ; PersistenceUnitInfo org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo = org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] ; assertNotNull ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo ) ; assertEquals ( STRING , STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getPersistenceUnitName ( ) ) ; assertTrue ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . excludeUnlistedClasses ( ) ) ; PersistenceUnitInfo org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo = org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo[] [ NUMBER ] ; assertNotNull ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo ) ; assertEquals ( STRING , STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . getPersistenceUnitName ( ) ) ; assertFalse ( STRING , org.springframework.orm.jpa.persistenceunit.PersistenceUnitInfo . excludeUnlistedClasses ( ) ) ; }  <METHOD_END>
