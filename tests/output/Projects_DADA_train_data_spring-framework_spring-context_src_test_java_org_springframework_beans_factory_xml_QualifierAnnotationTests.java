<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.beans.factory.xml.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinitionReader org.springframework.beans.factory.xml.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.StaticApplicationContext ) ; org.springframework.beans.factory.xml.BeanDefinitionReader . loadBeanDefinitions ( java.lang.String ) ; org.springframework.beans.factory.xml.StaticApplicationContext . registerSingleton ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.NonQualifiedTestBean .class ) ; try { org.springframework.beans.factory.xml.StaticApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.xml.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.beans.factory.xml.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinitionReader org.springframework.beans.factory.xml.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.StaticApplicationContext ) ; org.springframework.beans.factory.xml.BeanDefinitionReader . loadBeanDefinitions ( java.lang.String ) ; org.springframework.beans.factory.xml.StaticApplicationContext . registerSingleton ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByValueTestBean .class ) ; org.springframework.beans.factory.xml.StaticApplicationContext . refresh ( ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByValueTestBean org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByValueTestBean = ( org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByValueTestBean ) org.springframework.beans.factory.xml.StaticApplicationContext . getBean ( STRING ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person = org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByValueTestBean . org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.Person . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.beans.factory.xml.StaticApplicationContext = new StaticApplicationContext ( ) ; GenericBeanDefinition org.springframework.beans.factory.xml.GenericBeanDefinition = new GenericBeanDefinition ( ) ; org.springframework.beans.factory.xml.GenericBeanDefinition . setBeanClass ( org.springframework.beans.factory.xml.QualifierAnnotationTests.Person .class ) ; org.springframework.beans.factory.xml.GenericBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.beans.factory.xml.GenericBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( Qualifier .class , STRING ) ) ; org.springframework.beans.factory.xml.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.beans.factory.xml.GenericBeanDefinition ) ; GenericBeanDefinition org.springframework.beans.factory.xml.GenericBeanDefinition = new GenericBeanDefinition ( ) ; org.springframework.beans.factory.xml.GenericBeanDefinition . setBeanClass ( org.springframework.beans.factory.xml.QualifierAnnotationTests.Person .class ) ; org.springframework.beans.factory.xml.GenericBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.beans.factory.xml.GenericBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( Qualifier .class , STRING ) ) ; org.springframework.beans.factory.xml.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.beans.factory.xml.GenericBeanDefinition ) ; org.springframework.beans.factory.xml.StaticApplicationContext . refresh ( ) ; StaticApplicationContext org.springframework.beans.factory.xml.StaticApplicationContext = new StaticApplicationContext ( org.springframework.beans.factory.xml.StaticApplicationContext ) ; BeanDefinitionReader org.springframework.beans.factory.xml.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.StaticApplicationContext ) ; org.springframework.beans.factory.xml.BeanDefinitionReader . loadBeanDefinitions ( java.lang.String ) ; org.springframework.beans.factory.xml.StaticApplicationContext . registerSingleton ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByParentValueTestBean .class ) ; org.springframework.beans.factory.xml.StaticApplicationContext . refresh ( ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByParentValueTestBean org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByParentValueTestBean = ( org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByParentValueTestBean ) org.springframework.beans.factory.xml.StaticApplicationContext . getBean ( STRING ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person = org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByParentValueTestBean . org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.Person . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.beans.factory.xml.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinitionReader org.springframework.beans.factory.xml.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.StaticApplicationContext ) ; org.springframework.beans.factory.xml.BeanDefinitionReader . loadBeanDefinitions ( java.lang.String ) ; org.springframework.beans.factory.xml.StaticApplicationContext . registerSingleton ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByBeanNameTestBean .class ) ; org.springframework.beans.factory.xml.StaticApplicationContext . refresh ( ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByBeanNameTestBean org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByBeanNameTestBean = ( org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByBeanNameTestBean ) org.springframework.beans.factory.xml.StaticApplicationContext . getBean ( STRING ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person = org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByBeanNameTestBean . org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.Person . java.lang.String ( ) ) ; assertTrue ( org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByBeanNameTestBean . java.util.Properties != null && org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByBeanNameTestBean . java.util.Properties . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.beans.factory.xml.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinitionReader org.springframework.beans.factory.xml.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.StaticApplicationContext ) ; org.springframework.beans.factory.xml.BeanDefinitionReader . loadBeanDefinitions ( java.lang.String ) ; org.springframework.beans.factory.xml.StaticApplicationContext . registerSingleton ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByFieldNameTestBean .class ) ; org.springframework.beans.factory.xml.StaticApplicationContext . refresh ( ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByFieldNameTestBean org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByFieldNameTestBean = ( org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByFieldNameTestBean ) org.springframework.beans.factory.xml.StaticApplicationContext . getBean ( STRING ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person = org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByFieldNameTestBean . org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.Person . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.beans.factory.xml.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinitionReader org.springframework.beans.factory.xml.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.StaticApplicationContext ) ; org.springframework.beans.factory.xml.BeanDefinitionReader . loadBeanDefinitions ( java.lang.String ) ; org.springframework.beans.factory.xml.StaticApplicationContext . registerSingleton ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByParameterNameTestBean .class ) ; org.springframework.beans.factory.xml.StaticApplicationContext . refresh ( ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByParameterNameTestBean org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByParameterNameTestBean = ( org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByParameterNameTestBean ) org.springframework.beans.factory.xml.StaticApplicationContext . getBean ( STRING ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person = org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByParameterNameTestBean . org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.Person . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.beans.factory.xml.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinitionReader org.springframework.beans.factory.xml.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.StaticApplicationContext ) ; org.springframework.beans.factory.xml.BeanDefinitionReader . loadBeanDefinitions ( java.lang.String ) ; org.springframework.beans.factory.xml.StaticApplicationContext . registerSingleton ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByAliasTestBean .class ) ; org.springframework.beans.factory.xml.StaticApplicationContext . refresh ( ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByAliasTestBean org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByAliasTestBean = ( org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByAliasTestBean ) org.springframework.beans.factory.xml.StaticApplicationContext . getBean ( STRING ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person = org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByAliasTestBean . org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.Person . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.beans.factory.xml.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinitionReader org.springframework.beans.factory.xml.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.StaticApplicationContext ) ; org.springframework.beans.factory.xml.BeanDefinitionReader . loadBeanDefinitions ( java.lang.String ) ; org.springframework.beans.factory.xml.StaticApplicationContext . registerSingleton ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByAnnotationTestBean .class ) ; org.springframework.beans.factory.xml.StaticApplicationContext . refresh ( ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByAnnotationTestBean org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByAnnotationTestBean = ( org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByAnnotationTestBean ) org.springframework.beans.factory.xml.StaticApplicationContext . getBean ( STRING ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person = org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByAnnotationTestBean . org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.Person . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.beans.factory.xml.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinitionReader org.springframework.beans.factory.xml.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.StaticApplicationContext ) ; org.springframework.beans.factory.xml.BeanDefinitionReader . loadBeanDefinitions ( java.lang.String ) ; org.springframework.beans.factory.xml.StaticApplicationContext . registerSingleton ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByCustomValueTestBean .class ) ; org.springframework.beans.factory.xml.StaticApplicationContext . refresh ( ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByCustomValueTestBean org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByCustomValueTestBean = ( org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByCustomValueTestBean ) org.springframework.beans.factory.xml.StaticApplicationContext . getBean ( STRING ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person = org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByCustomValueTestBean . org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.Person . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.beans.factory.xml.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinitionReader org.springframework.beans.factory.xml.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.StaticApplicationContext ) ; org.springframework.beans.factory.xml.BeanDefinitionReader . loadBeanDefinitions ( java.lang.String ) ; org.springframework.beans.factory.xml.StaticApplicationContext . registerSingleton ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByAnnotationValueTestBean .class ) ; org.springframework.beans.factory.xml.StaticApplicationContext . refresh ( ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByAnnotationValueTestBean org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByAnnotationValueTestBean = ( org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByAnnotationValueTestBean ) org.springframework.beans.factory.xml.StaticApplicationContext . getBean ( STRING ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person = org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByAnnotationValueTestBean . org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.Person . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.beans.factory.xml.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinitionReader org.springframework.beans.factory.xml.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.StaticApplicationContext ) ; org.springframework.beans.factory.xml.BeanDefinitionReader . loadBeanDefinitions ( java.lang.String ) ; org.springframework.beans.factory.xml.StaticApplicationContext . registerSingleton ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.QualifiedByAttributesTestBean .class ) ; try { org.springframework.beans.factory.xml.StaticApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.xml.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.beans.factory.xml.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinitionReader org.springframework.beans.factory.xml.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.StaticApplicationContext ) ; org.springframework.beans.factory.xml.BeanDefinitionReader . loadBeanDefinitions ( java.lang.String ) ; QualifierAnnotationAutowireCandidateResolver org.springframework.beans.factory.xml.QualifierAnnotationAutowireCandidateResolver = ( QualifierAnnotationAutowireCandidateResolver ) org.springframework.beans.factory.xml.StaticApplicationContext . getDefaultListableBeanFactory ( ) . getAutowireCandidateResolver ( ) ; org.springframework.beans.factory.xml.QualifierAnnotationAutowireCandidateResolver . addQualifierType ( org.springframework.beans.factory.xml.QualifierAnnotationTests.MultipleAttributeQualifier .class ) ; org.springframework.beans.factory.xml.StaticApplicationContext . registerSingleton ( STRING , org.springframework.beans.factory.xml.QualifierAnnotationTests.MultiQualifierClient .class ) ; org.springframework.beans.factory.xml.StaticApplicationContext . refresh ( ) ; org.springframework.beans.factory.xml.QualifierAnnotationTests.MultiQualifierClient org.springframework.beans.factory.xml.QualifierAnnotationTests.MultiQualifierClient = ( org.springframework.beans.factory.xml.QualifierAnnotationTests.MultiQualifierClient ) org.springframework.beans.factory.xml.StaticApplicationContext . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.xml.QualifierAnnotationTests.MultiQualifierClient . org.springframework.beans.factory.xml.QualifierAnnotationTests.Theta ) ; assertNotNull ( org.springframework.beans.factory.xml.QualifierAnnotationTests.MultiQualifierClient . org.springframework.beans.factory.xml.QualifierAnnotationTests.Theta ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.beans.factory.xml.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinitionReader org.springframework.beans.factory.xml.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.StaticApplicationContext ) ; org.springframework.beans.factory.xml.BeanDefinitionReader . loadBeanDefinitions ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) { return org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) { return org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) { return org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) { return org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) { return org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ; }  <METHOD_END>
<METHOD_START> @ Autowired public void void ( org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ) { this . org.springframework.beans.factory.xml.QualifierAnnotationTests.Person = org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) { return org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) { return org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) { return org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) { return org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) { return org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) { return org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.xml.QualifierAnnotationTests.Person org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ( ) { return org.springframework.beans.factory.xml.QualifierAnnotationTests.Person ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.xml.QualifierAnnotationTests.Theta org.springframework.beans.factory.xml.QualifierAnnotationTests.Theta ( ) { return new org.springframework.beans.factory.xml.QualifierAnnotationTests.Theta ( ) {} ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<org.springframework.beans.factory.xml.QualifierAnnotationTests.Theta> < org.springframework.beans.factory.xml.QualifierAnnotationTests.Theta > java.lang.Class<org.springframework.beans.factory.xml.QualifierAnnotationTests.Theta> ( ) { return org.springframework.beans.factory.xml.QualifierAnnotationTests.Theta .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
