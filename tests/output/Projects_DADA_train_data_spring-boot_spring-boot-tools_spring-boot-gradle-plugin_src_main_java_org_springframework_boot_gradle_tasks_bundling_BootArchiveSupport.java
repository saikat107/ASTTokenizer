<METHOD_START> void ( java.lang.String java.lang.String , java.util.function.Function<org.springframework.boot.gradle.tasks.bundling.FileCopyDetails,org.springframework.boot.gradle.tasks.bundling.ZipCompression> < FileCopyDetails , ZipCompression > java.util.function.Function<org.springframework.boot.gradle.tasks.bundling.FileCopyDetails,org.springframework.boot.gradle.tasks.bundling.ZipCompression> ) { this . java.lang.String = java.lang.String ; this . java.util.function.Function<org.springframework.boot.gradle.tasks.bundling.FileCopyDetails,org.springframework.boot.gradle.tasks.bundling.ZipCompression> = java.util.function.Function<org.springframework.boot.gradle.tasks.bundling.FileCopyDetails,org.springframework.boot.gradle.tasks.bundling.ZipCompression> ; this . org.springframework.boot.gradle.tasks.bundling.PatternSet . include ( Specs . satisfyNone ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> void void ( Jar org.springframework.boot.gradle.tasks.bundling.Jar , java.lang.String java.lang.String ) { Attributes org.springframework.boot.gradle.tasks.bundling.Attributes = org.springframework.boot.gradle.tasks.bundling.Jar . getManifest ( ) . getAttributes ( ) ; org.springframework.boot.gradle.tasks.bundling.Attributes . putIfAbsent ( STRING , this . java.lang.String ) ; org.springframework.boot.gradle.tasks.bundling.Attributes . putIfAbsent ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> org.springframework.boot.gradle.tasks.bundling.CopyAction org.springframework.boot.gradle.tasks.bundling.CopyAction ( Jar org.springframework.boot.gradle.tasks.bundling.Jar ) { CopyAction org.springframework.boot.gradle.tasks.bundling.CopyAction = new BootZipCopyAction ( org.springframework.boot.gradle.tasks.bundling.Jar . getArchivePath ( ) , org.springframework.boot.gradle.tasks.bundling.Jar . isPreserveFileTimestamps ( ) , boolean ( org.springframework.boot.gradle.tasks.bundling.Jar ) , this . org.springframework.boot.gradle.tasks.bundling.PatternSet . getAsSpec ( ) , this . org.springframework.boot.gradle.tasks.bundling.PatternSet . getAsExcludeSpec ( ) , this . org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration , this . java.util.function.Function<org.springframework.boot.gradle.tasks.bundling.FileCopyDetails,org.springframework.boot.gradle.tasks.bundling.ZipCompression> ) ; if ( ! org.springframework.boot.gradle.tasks.bundling.Jar . isReproducibleFileOrder ( ) ) { return org.springframework.boot.gradle.tasks.bundling.CopyAction ; } return new org.springframework.boot.gradle.tasks.bundling.BootArchiveSupport.ReproducibleOrderingCopyAction ( org.springframework.boot.gradle.tasks.bundling.CopyAction ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Jar org.springframework.boot.gradle.tasks.bundling.Jar ) { return java.util.Set<java.lang.String> . boolean ( org.springframework.boot.gradle.tasks.bundling.Jar . getManifest ( ) . getAttributes ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration ( ) { return this . org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration ; }  <METHOD_END>
<METHOD_START> void void ( LaunchScriptConfiguration org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration ) { this . org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration = org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.gradle.tasks.bundling.PatternSet . include ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> void void ( Spec < FileTreeElement > org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> ) { this . org.springframework.boot.gradle.tasks.bundling.PatternSet . include ( org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> void void ( boolean boolean ) { this . boolean = boolean ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; if ( this . boolean ) { java.util.Set<java.lang.String> . boolean ( STRING ) ; } this . org.springframework.boot.gradle.tasks.bundling.PatternSet . setExcludes ( java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private void ( CopyAction org.springframework.boot.gradle.tasks.bundling.CopyAction ) { this . org.springframework.boot.gradle.tasks.bundling.CopyAction = org.springframework.boot.gradle.tasks.bundling.CopyAction ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.gradle.tasks.bundling.WorkResult org.springframework.boot.gradle.tasks.bundling.WorkResult ( CopyActionProcessingStream org.springframework.boot.gradle.tasks.bundling.CopyActionProcessingStream ) { return this . org.springframework.boot.gradle.tasks.bundling.CopyAction . execute ( action -> { Map < RelativePath , FileCopyDetailsInternal > detailsByPath = new TreeMap <> ( ) ; stream . process ( details -> detailsByPath . put ( details . getRelativePath ( ) , details ) ) ; detailsByPath . values ( ) . stream ( ) . forEach ( action :: processFile ) ; } ) ; }  <METHOD_END>
