<METHOD_START> java.lang.Object java.lang.Object ( Query org.springframework.data.mongodb.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.mongodb.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.repository.query.MongoOperations . find ( org.springframework.data.mongodb.repository.query.Query . with ( org.springframework.data.mongodb.repository.query.Pageable ) , java.lang.Class<> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING , STRING } ) public java.lang.Object java.lang.Object ( Query org.springframework.data.mongodb.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { int int = org.springframework.data.mongodb.repository.query.Pageable . getPageSize ( ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.Query . with ( org.springframework.data.mongodb.repository.query.Pageable ) . limit ( int + NUMBER ) ; java.util.List java.util.List = org.springframework.data.mongodb.repository.query.MongoOperations . find ( org.springframework.data.mongodb.repository.query.Query , java.lang.Class<> , java.lang.String ) ; boolean boolean = java.util.List . int ( ) > int ; return new SliceImpl < java.lang.Object > ( boolean ? java.util.List . java.util.List ( NUMBER , int ) : java.util.List , org.springframework.data.mongodb.repository.query.Pageable , boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( final Query org.springframework.data.mongodb.repository.query.Query , final java.lang.Class<?> < ? > java.lang.Class<?> , final java.lang.String java.lang.String ) { final int int = org.springframework.data.mongodb.repository.query.Query . getLimit ( ) ; org.springframework.data.mongodb.repository.query.Query . with ( org.springframework.data.mongodb.repository.query.Pageable ) ; if ( int != NUMBER && org.springframework.data.mongodb.repository.query.Pageable . getOffset ( ) + org.springframework.data.mongodb.repository.query.Pageable . getPageSize ( ) > int ) { org.springframework.data.mongodb.repository.query.Query . limit ( ( int ) ( int - org.springframework.data.mongodb.repository.query.Pageable . getOffset ( ) ) ) ; } return PageableExecutionUtils . getPage ( org.springframework.data.mongodb.repository.query.MongoOperations . find ( org.springframework.data.mongodb.repository.query.Query , java.lang.Class<> , java.lang.String ) , org.springframework.data.mongodb.repository.query.Pageable , ( ) { long count = operations . count ( query , type , collection ) ; return overallLimit != NUMBER ? Math . min ( count , overallLimit ) : count ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.mongodb.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.repository.query.MongoOperations . findOne ( org.springframework.data.mongodb.repository.query.Query , java.lang.Class<> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.mongodb.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.repository.query.MongoOperations . count ( org.springframework.data.mongodb.repository.query.Query , java.lang.Class<> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.mongodb.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.repository.query.MongoOperations . exists ( org.springframework.data.mongodb.repository.query.Query , java.lang.Class<> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.mongodb.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { GeoResults < ? > org.springframework.data.mongodb.repository.query.GeoResults<?> = org.springframework.data.mongodb.repository.query.GeoResults<java.lang.Object> ( org.springframework.data.mongodb.repository.query.Query , java.lang.Class<> , java.lang.String ) ; return boolean ( ) ? org.springframework.data.mongodb.repository.query.GeoResults<> . getContent ( ) : org.springframework.data.mongodb.repository.query.GeoResults<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.data.mongodb.repository.query.GeoResults<java.lang.Object> < java.lang.Object > org.springframework.data.mongodb.repository.query.GeoResults<java.lang.Object> ( Query org.springframework.data.mongodb.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { Point org.springframework.data.mongodb.repository.query.Point = org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getGeoNearLocation ( ) ; NearQuery org.springframework.data.mongodb.repository.query.NearQuery = NearQuery . near ( org.springframework.data.mongodb.repository.query.Point ) ; if ( org.springframework.data.mongodb.repository.query.Query != null ) { org.springframework.data.mongodb.repository.query.NearQuery . query ( org.springframework.data.mongodb.repository.query.Query ) ; } Range < Distance > org.springframework.data.mongodb.repository.query.Range<org.springframework.data.mongodb.repository.query.Distance> = org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getDistanceRange ( ) ; Distance org.springframework.data.mongodb.repository.query.Distance = org.springframework.data.mongodb.repository.query.Range<org.springframework.data.mongodb.repository.query.Distance> . getUpperBound ( ) ; if ( org.springframework.data.mongodb.repository.query.Distance != null ) { org.springframework.data.mongodb.repository.query.NearQuery . maxDistance ( org.springframework.data.mongodb.repository.query.Distance ) . in ( org.springframework.data.mongodb.repository.query.Distance . getMetric ( ) ) ; } Distance org.springframework.data.mongodb.repository.query.Distance = org.springframework.data.mongodb.repository.query.Range<org.springframework.data.mongodb.repository.query.Distance> . getLowerBound ( ) ; if ( org.springframework.data.mongodb.repository.query.Distance != null ) { org.springframework.data.mongodb.repository.query.NearQuery . minDistance ( org.springframework.data.mongodb.repository.query.Distance ) . in ( org.springframework.data.mongodb.repository.query.Distance . getMetric ( ) ) ; } Pageable org.springframework.data.mongodb.repository.query.Pageable = org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getPageable ( ) ; if ( org.springframework.data.mongodb.repository.query.Pageable != null ) { org.springframework.data.mongodb.repository.query.NearQuery . with ( org.springframework.data.mongodb.repository.query.Pageable ) ; } return ( GeoResults < java.lang.Object > ) org.springframework.data.mongodb.repository.query.MongoOperations . geoNear ( org.springframework.data.mongodb.repository.query.NearQuery , java.lang.Class<> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { if ( ! org.springframework.data.mongodb.repository.query.TypeInformation<> . getType ( ) . equals ( java.util.List .class ) ) { return false ; } java.util.Optional<org.springframework.data.mongodb.repository.query.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.mongodb.repository.query.TypeInformation<?>> = org.springframework.data.mongodb.repository.query.TypeInformation<> . getComponentType ( ) ; return java.util.Optional<org.springframework.data.mongodb.repository.query.TypeInformation<?>> . isPresent ( ) && GeoResult .class . boolean ( java.util.Optional<org.springframework.data.mongodb.repository.query.TypeInformation<?>> . get ( ) . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( MongoOperations org.springframework.data.mongodb.repository.query.MongoOperations , MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor , TypeInformation < ? > org.springframework.data.mongodb.repository.query.TypeInformation<?> , AbstractMongoQuery org.springframework.data.mongodb.repository.query.AbstractMongoQuery ) { super( org.springframework.data.mongodb.repository.query.MongoOperations , org.springframework.data.mongodb.repository.query.MongoParameterAccessor , org.springframework.data.mongodb.repository.query.TypeInformation<> ); this . org.springframework.data.mongodb.repository.query.MongoParameterAccessor = org.springframework.data.mongodb.repository.query.MongoParameterAccessor ; this . org.springframework.data.mongodb.repository.query.MongoOperations = org.springframework.data.mongodb.repository.query.MongoOperations ; this . org.springframework.data.mongodb.repository.query.AbstractMongoQuery = org.springframework.data.mongodb.repository.query.AbstractMongoQuery ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.mongodb.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> , final java.lang.String java.lang.String ) { GeoResults < java.lang.Object > org.springframework.data.mongodb.repository.query.GeoResults<java.lang.Object> = org.springframework.data.mongodb.repository.query.GeoResults<java.lang.Object> ( org.springframework.data.mongodb.repository.query.Query , java.lang.Class<> , java.lang.String ) ; Page < GeoResult < java.lang.Object > > org.springframework.data.mongodb.repository.query.Page<org.springframework.data.mongodb.repository.query.GeoResult<java.lang.Object>> = PageableExecutionUtils . getPage ( org.springframework.data.mongodb.repository.query.GeoResults<java.lang.Object> . getContent ( ) , org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getPageable ( ) , ( ) { ConvertingParameterAccessor parameterAccessor = new ConvertingParameterAccessor ( operations . getConverter ( ) , accessor ) ; Query countQuery = mongoQuery . applyQueryMetaAttributesWhenPresent ( mongoQuery . createCountQuery ( parameterAccessor ) ) ; return operations . count ( countQuery , collection ) ; } ) ; return new GeoPage < java.lang.Object > ( org.springframework.data.mongodb.repository.query.GeoResults<java.lang.Object> , org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getPageable ( ) , org.springframework.data.mongodb.repository.query.Page<org.springframework.data.mongodb.repository.query.GeoResult<java.lang.Object>> . getTotalElements ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.mongodb.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { if ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . isCollectionQuery ( ) ) { return org.springframework.data.mongodb.repository.query.MongoOperations . findAllAndRemove ( org.springframework.data.mongodb.repository.query.Query , java.lang.Class<> , java.lang.String ) ; } DeleteResult org.springframework.data.mongodb.repository.query.DeleteResult = org.springframework.data.mongodb.repository.query.MongoOperations . remove ( org.springframework.data.mongodb.repository.query.Query , java.lang.Class<> , java.lang.String ) ; return org.springframework.data.mongodb.repository.query.DeleteResult != null ? org.springframework.data.mongodb.repository.query.DeleteResult . getDeletedCount ( ) : NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( Query org.springframework.data.mongodb.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return StreamUtils . createStreamFromIterator ( ( CloseableIterator < java.lang.Object > ) org.springframework.data.mongodb.repository.query.MongoOperations . stream ( org.springframework.data.mongodb.repository.query.Query , java.lang.Class<> ) ) . map ( new java.util.function.Function<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return org.springframework.data.mongodb.repository.query.Converter<java.lang.Object,java.lang.Object> . convert ( java.lang.Object ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return org.springframework.data.mongodb.repository.query.Converter<java.lang.Object,java.lang.Object> . convert ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.mongodb.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.repository.query.Converter<java.lang.Object,java.lang.Object> . convert ( org.springframework.data.mongodb.repository.query.MongoQueryExecution . java.lang.Object ( org.springframework.data.mongodb.repository.query.Query , java.lang.Class<> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { ReturnedType org.springframework.data.mongodb.repository.query.ReturnedType = org.springframework.data.mongodb.repository.query.ResultProcessor . getReturnedType ( ) ; if ( ClassUtils . isPrimitiveOrWrapper ( org.springframework.data.mongodb.repository.query.ReturnedType . getReturnedType ( ) ) ) { return java.lang.Object ; } Converter < java.lang.Object , java.lang.Object > org.springframework.data.mongodb.repository.query.Converter<java.lang.Object,java.lang.Object> = new DtoInstantiatingConverter ( org.springframework.data.mongodb.repository.query.ReturnedType . getReturnedType ( ) , org.springframework.data.mongodb.repository.query.MongoOperations . getConverter ( ) . getMappingContext ( ) , org.springframework.data.mongodb.repository.query.EntityInstantiators ) ; return org.springframework.data.mongodb.repository.query.ResultProcessor . processResult ( java.lang.Object , org.springframework.data.mongodb.repository.query.Converter<java.lang.Object,java.lang.Object> ) ; }  <METHOD_END>
