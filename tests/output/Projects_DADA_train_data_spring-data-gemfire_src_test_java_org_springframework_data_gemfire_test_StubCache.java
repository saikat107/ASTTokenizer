<METHOD_START> public void ( ) { java.util.HashMap<java.lang.String,org.springframework.data.gemfire.test.Region> = new java.util.HashMap <> ( ) ; org.springframework.data.gemfire.test.ResourceManager = new StubResourceManager ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.DiskStoreFactory org.springframework.data.gemfire.test.DiskStoreFactory ( ) { return new StubDiskStore ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.DiskStore org.springframework.data.gemfire.test.DiskStore ( java.lang.String java.lang.String ) { return StubDiskStore . getDiskStore ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.CacheTransactionManager org.springframework.data.gemfire.test.CacheTransactionManager ( ) { if ( org.springframework.data.gemfire.test.CacheTransactionManager == null ) { org.springframework.data.gemfire.test.CacheTransactionManager = new StubCacheTransactionMananger ( ) ; } return org.springframework.data.gemfire.test.CacheTransactionManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.DistributedSystem org.springframework.data.gemfire.test.DistributedSystem ( ) { if ( org.springframework.data.gemfire.test.DistributedSystem == null ) { org.springframework.data.gemfire.test.DistributedSystem = org.springframework.data.gemfire.test.DistributedSystem ( ) ; } return org.springframework.data.gemfire.test.DistributedSystem ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.Declarable org.springframework.data.gemfire.test.Declarable ( ) { return this . org.springframework.data.gemfire.test.Declarable ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Properties java.util.Properties ( ) { return this . java.util.Properties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.naming.Context javax.naming.Context ( ) { return this . javax.naming.Context ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.LogWriter org.springframework.data.gemfire.test.LogWriter ( ) { return this . org.springframework.data.gemfire.test.LogWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( this . java.util.Properties != null ? this . java.util.Properties . java.lang.String ( STRING ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.PdxSerializer org.springframework.data.gemfire.test.PdxSerializer ( ) { return this . org.springframework.data.gemfire.test.PdxSerializer ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < K , V > org.springframework.data.gemfire.test.RegionAttributes<K,V> < K , V > org.springframework.data.gemfire.test.RegionAttributes<K,V> ( java.lang.String java.lang.String ) { return java.util.Map<java.lang.String,org.springframework.data.gemfire.test.Region> ( ) . get ( java.lang.String ) . getAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ResourceManager org.springframework.data.gemfire.test.ResourceManager ( ) { return this . org.springframework.data.gemfire.test.ResourceManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.LogWriter org.springframework.data.gemfire.test.LogWriter ( ) { return this . org.springframework.data.gemfire.test.LogWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ java.lang.Override public < K , V > java.util.Map<java.lang.String,org.springframework.data.gemfire.test.RegionAttributes<K,V>> < java.lang.String , RegionAttributes < K , V > > java.util.Map<java.lang.String,org.springframework.data.gemfire.test.RegionAttributes<K,V>> ( ) { java.util.Map<java.lang.String,org.springframework.data.gemfire.test.RegionAttributes<K,V>> < java.lang.String , RegionAttributes < K , V > > java.util.Map<java.lang.String,org.springframework.data.gemfire.test.RegionAttributes<K,V>> = new java.util.HashMap<java.lang.String,org.springframework.data.gemfire.test.RegionAttributes<K,V>> <> ( ) ; for ( java.util.Map.Entry<java.lang.String,org.springframework.data.gemfire.test.Region> < java.lang.String , Region > java.util.Map.Entry<java.lang.String,org.springframework.data.gemfire.test.Region> : java.util.Map<java.lang.String,org.springframework.data.gemfire.test.Region> ( ) . entrySet ( ) ) { java.util.Map<java.lang.String,org.springframework.data.gemfire.test.RegionAttributes<K,V>> . put ( java.util.Map.Entry<java.lang.String,org.springframework.data.gemfire.test.Region> . getKey ( ) , java.util.Map.Entry<java.lang.String,org.springframework.data.gemfire.test.Region> . getValue ( ) . getAttributes ( ) ) ; } return java.util.Map<java.lang.String,org.springframework.data.gemfire.test.RegionAttributes<K,V>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.InputStream java.io.InputStream ) throws org.springframework.data.gemfire.test.TimeoutException , org.springframework.data.gemfire.test.CacheWriterException , org.springframework.data.gemfire.test.GatewayException , org.springframework.data.gemfire.test.RegionExistsException {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < K , V > void void ( java.lang.String java.lang.String , RegionAttributes < K , V > org.springframework.data.gemfire.test.RegionAttributes<K,V> ) { RegionFactory < K , V > org.springframework.data.gemfire.test.RegionFactory<K,V> = new MockRegionFactory < K , V > ( this ) . createMockRegionFactory ( org.springframework.data.gemfire.test.RegionAttributes<K,V> ) ; org.springframework.data.gemfire.test.RegionFactory<K,V> . create ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.PdxInstance org.springframework.data.gemfire.test.PdxInstance ( java.lang.String java.lang.String , java.lang.String java.lang.String , int int ) { throw new java.lang.UnsupportedOperationException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.PdxInstanceFactory org.springframework.data.gemfire.test.PdxInstanceFactory ( java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.CancelCriterion org.springframework.data.gemfire.test.CancelCriterion ( ) { throw new java.lang.UnsupportedOperationException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.QueryService org.springframework.data.gemfire.test.QueryService ( ) { try { java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.test.QueryService> . compareAndSet ( null , org.springframework.data.gemfire.test.QueryService ( ) ) ; return java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.test.QueryService> . get ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < K , V > org.springframework.data.gemfire.test.Region<K,V> < K , V > org.springframework.data.gemfire.test.Region<K,V> ( java.lang.String java.lang.String ) { return java.util.Map<java.lang.String,org.springframework.data.gemfire.test.Region> ( ) . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.data.gemfire.test.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.test.Region<?,?>> ( ) { java.util.Set<org.springframework.data.gemfire.test.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.test.Region<?,?>> = new java.util.HashSet<org.springframework.data.gemfire.test.Region<?,?>> <> ( ) ; for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,org.springframework.data.gemfire.test.Region> ( ) . keySet ( ) ) { if ( ! java.lang.String . boolean ( STRING ) ) { java.util.Set<org.springframework.data.gemfire.test.Region<?,?>> . add ( java.util.Map<java.lang.String,org.springframework.data.gemfire.test.Region> ( ) . get ( java.lang.String ) ) ; } } return java.util.Set<org.springframework.data.gemfire.test.Region<?,?>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.CacheServer org.springframework.data.gemfire.test.CacheServer ( ) { return org.springframework.data.gemfire.test.CacheServer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public void void ( boolean boolean ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.AsyncEventQueueFactory org.springframework.data.gemfire.test.AsyncEventQueueFactory ( ) { return new StubAsyncEventQueueFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.GatewayReceiverFactory org.springframework.data.gemfire.test.GatewayReceiverFactory ( ) { return new StubGatewayReceiverFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.GatewaySenderFactory org.springframework.data.gemfire.test.GatewaySenderFactory ( ) { return new StubGatewaySenderFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public < K , V > org.springframework.data.gemfire.test.Region<K,V> < K , V > org.springframework.data.gemfire.test.Region<K,V> ( java.lang.String java.lang.String , RegionAttributes < K , V > org.springframework.data.gemfire.test.RegionAttributes<K,V> ) throws org.springframework.data.gemfire.test.RegionExistsException , org.springframework.data.gemfire.test.TimeoutException { throw new java.lang.UnsupportedOperationException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < K , V > org.springframework.data.gemfire.test.RegionFactory<K,V> < K , V > org.springframework.data.gemfire.test.RegionFactory<K,V> ( ) { return new MockRegionFactory < K , V > ( this ) . createRegionFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < K , V > org.springframework.data.gemfire.test.RegionFactory<K,V> < K , V > org.springframework.data.gemfire.test.RegionFactory<K,V> ( RegionAttributes < K , V > org.springframework.data.gemfire.test.RegionAttributes<K,V> ) { return new MockRegionFactory < K , V > ( this ) . createMockRegionFactory ( org.springframework.data.gemfire.test.RegionAttributes<K,V> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < K , V > org.springframework.data.gemfire.test.RegionFactory<K,V> < K , V > org.springframework.data.gemfire.test.RegionFactory<K,V> ( RegionShortcut org.springframework.data.gemfire.test.RegionShortcut ) { return new MockRegionFactory < K , V > ( this ) . createRegionFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < K , V > org.springframework.data.gemfire.test.RegionFactory<K,V> < K , V > org.springframework.data.gemfire.test.RegionFactory<K,V> ( java.lang.String java.lang.String ) { return new MockRegionFactory < K , V > ( this ) . createRegionFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public < K , V > org.springframework.data.gemfire.test.Region<K,V> < K , V > org.springframework.data.gemfire.test.Region<K,V> ( java.lang.String java.lang.String , RegionAttributes < K , V > org.springframework.data.gemfire.test.RegionAttributes<K,V> ) throws org.springframework.data.gemfire.test.RegionExistsException , org.springframework.data.gemfire.test.TimeoutException { throw new java.lang.UnsupportedOperationException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.data.gemfire.test.DistributedMember> < DistributedMember > java.util.Set<org.springframework.data.gemfire.test.DistributedMember> ( ) { throw new java.lang.UnsupportedOperationException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.AsyncEventQueue org.springframework.data.gemfire.test.AsyncEventQueue ( java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.data.gemfire.test.AsyncEventQueue> < AsyncEventQueue > java.util.Set<org.springframework.data.gemfire.test.AsyncEventQueue> ( ) { throw new java.lang.UnsupportedOperationException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.gemfire.test.CacheServer> < CacheServer > java.util.List<org.springframework.data.gemfire.test.CacheServer> ( ) { throw new java.lang.UnsupportedOperationException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.GatewayConflictResolver org.springframework.data.gemfire.test.GatewayConflictResolver ( ) { return this . org.springframework.data.gemfire.test.GatewayConflictResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.data.gemfire.test.GatewayReceiver> < GatewayReceiver > java.util.Set<org.springframework.data.gemfire.test.GatewayReceiver> ( ) { return this . java.util.Set<org.springframework.data.gemfire.test.GatewayReceiver> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.GatewaySender org.springframework.data.gemfire.test.GatewaySender ( java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.data.gemfire.test.GatewaySender> < GatewaySender > java.util.Set<org.springframework.data.gemfire.test.GatewaySender> ( ) { return this . java.util.Set<org.springframework.data.gemfire.test.GatewaySender> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public org.springframework.data.gemfire.test.LogWriterI18n org.springframework.data.gemfire.test.LogWriterI18n ( ) { throw new java.lang.UnsupportedOperationException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.data.gemfire.test.DistributedMember> < DistributedMember > java.util.Set<org.springframework.data.gemfire.test.DistributedMember> ( ) { throw new java.lang.UnsupportedOperationException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ java.lang.Override public java.util.Set<org.springframework.data.gemfire.test.DistributedMember> < DistributedMember > java.util.Set<org.springframework.data.gemfire.test.DistributedMember> ( Region org.springframework.data.gemfire.test.Region ) { throw new java.lang.UnsupportedOperationException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public org.springframework.data.gemfire.test.LogWriterI18n org.springframework.data.gemfire.test.LogWriterI18n ( ) { throw new java.lang.UnsupportedOperationException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.CacheSnapshotService org.springframework.data.gemfire.test.CacheSnapshotService ( ) { throw new java.lang.UnsupportedOperationException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GatewayConflictResolver org.springframework.data.gemfire.test.GatewayConflictResolver ) { this . org.springframework.data.gemfire.test.GatewayConflictResolver = org.springframework.data.gemfire.test.GatewayConflictResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.test.DistributedSystem org.springframework.data.gemfire.test.DistributedSystem ( ) { DistributedSystem org.springframework.data.gemfire.test.DistributedSystem = mock ( DistributedSystem .class ) ; when ( org.springframework.data.gemfire.test.DistributedSystem . getName ( ) ) . thenAnswer ( new Answer < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { return java.lang.String ( ) ; } } ) ; when ( org.springframework.data.gemfire.test.DistributedSystem . getProperties ( ) ) . thenReturn ( this . java.util.Properties ) ; DistributedMember org.springframework.data.gemfire.test.DistributedMember = org.springframework.data.gemfire.test.DistributedMember ( ) ; when ( org.springframework.data.gemfire.test.DistributedSystem . getDistributedMember ( ) ) . thenReturn ( org.springframework.data.gemfire.test.DistributedMember ) ; return org.springframework.data.gemfire.test.DistributedSystem ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.test.DistributedMember org.springframework.data.gemfire.test.DistributedMember ( ) { DistributedMember org.springframework.data.gemfire.test.DistributedMember = mock ( DistributedMember .class ) ; when ( org.springframework.data.gemfire.test.DistributedMember . getHost ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.test.DistributedMember . getName ( ) ) . thenReturn ( STRING ) ; return org.springframework.data.gemfire.test.DistributedMember ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.test.CacheServer org.springframework.data.gemfire.test.CacheServer ( ) { return new StubCacheServer ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.test.QueryService org.springframework.data.gemfire.test.QueryService ( ) org.springframework.data.gemfire.test.RegionNotFoundException , org.springframework.data.gemfire.test.IndexInvalidException , org.springframework.data.gemfire.test.IndexNameConflictException , org.springframework.data.gemfire.test.IndexExistsException , java.lang.UnsupportedOperationException { QueryService org.springframework.data.gemfire.test.QueryService = mock ( QueryService .class ) ; when ( org.springframework.data.gemfire.test.QueryService . getIndexes ( ) ) . thenReturn ( new java.util.ArrayList<org.springframework.data.gemfire.test.Index> < Index > ( ) ) ; when ( org.springframework.data.gemfire.test.QueryService . createIndex ( anyString ( ) , anyString ( ) , anyString ( ) ) ) . thenAnswer ( new Answer < Index > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.Index org.springframework.data.gemfire.test.Index ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; return org.springframework.data.gemfire.test.Index ( java.lang.String , org . org.apache . org.apache . org.apache . org.apache . IndexType . FUNCTIONAL , java.lang.String , java.lang.String , null ) ; } } ) ; when ( org.springframework.data.gemfire.test.QueryService . createIndex ( anyString ( ) , anyString ( ) , anyString ( ) , anyString ( ) ) ) . thenAnswer ( new Answer < Index > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.Index org.springframework.data.gemfire.test.Index ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; return org.springframework.data.gemfire.test.Index ( java.lang.String , org . org.apache . org.apache . org.apache . org.apache . IndexType . FUNCTIONAL , java.lang.String , java.lang.String , java.lang.String ) ; } } ) ; when ( org.springframework.data.gemfire.test.QueryService . createKeyIndex ( anyString ( ) , anyString ( ) , anyString ( ) ) ) . thenAnswer ( new Answer < Index > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.Index org.springframework.data.gemfire.test.Index ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; return org.springframework.data.gemfire.test.Index ( java.lang.String , org . org.apache . org.apache . org.apache . org.apache . IndexType . PRIMARY_KEY , java.lang.String , java.lang.String , null ) ; } } ) ; when ( org.springframework.data.gemfire.test.QueryService . createHashIndex ( anyString ( ) , anyString ( ) , anyString ( ) ) ) . thenAnswer ( new Answer < Index > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.Index org.springframework.data.gemfire.test.Index ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; return org.springframework.data.gemfire.test.Index ( java.lang.String , org . org.apache . org.apache . org.apache . org.apache . IndexType . HASH , java.lang.String , java.lang.String , null ) ; } } ) ; when ( org.springframework.data.gemfire.test.QueryService . createHashIndex ( anyString ( ) , anyString ( ) , anyString ( ) , anyString ( ) ) ) . thenAnswer ( new Answer < Index > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.Index org.springframework.data.gemfire.test.Index ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; return org.springframework.data.gemfire.test.Index ( java.lang.String , org . org.apache . org.apache . org.apache . org.apache . IndexType . HASH , java.lang.String , java.lang.String , java.lang.String ) ; } } ) ; return org.springframework.data.gemfire.test.QueryService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.Index org.springframework.data.gemfire.test.Index ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; return org.springframework.data.gemfire.test.Index ( java.lang.String , org . org.apache . org.apache . org.apache . org.apache . IndexType . FUNCTIONAL , java.lang.String , java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.Index org.springframework.data.gemfire.test.Index ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; return org.springframework.data.gemfire.test.Index ( java.lang.String , org . org.apache . org.apache . org.apache . org.apache . IndexType . FUNCTIONAL , java.lang.String , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.Index org.springframework.data.gemfire.test.Index ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; return org.springframework.data.gemfire.test.Index ( java.lang.String , org . org.apache . org.apache . org.apache . org.apache . IndexType . PRIMARY_KEY , java.lang.String , java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.Index org.springframework.data.gemfire.test.Index ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; return org.springframework.data.gemfire.test.Index ( java.lang.String , org . org.apache . org.apache . org.apache . org.apache . IndexType . HASH , java.lang.String , java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.Index org.springframework.data.gemfire.test.Index ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; return org.springframework.data.gemfire.test.Index ( java.lang.String , org . org.apache . org.apache . org.apache . org.apache . IndexType . HASH , java.lang.String , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING , STRING } ) org.springframework.data.gemfire.test.Index org.springframework.data.gemfire.test.Index ( java.lang.String java.lang.String , org . org.apache . org.apache . org.apache . org.apache . org.apache org.apache.geode.cache.query.IndexType , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { Index org.springframework.data.gemfire.test.Index = mock ( Index .class ) ; when ( org.springframework.data.gemfire.test.Index . getFromClause ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.test.Index . getIndexedExpression ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.test.Index . getName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.test.Index . getType ( ) ) . thenReturn ( org.apache.geode.cache.query.IndexType ) ; if ( java.lang.String != null && java.lang.String . int ( ) >= NUMBER ) { Region org.springframework.data.gemfire.test.Region = mock ( Region .class ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER ) . java.lang.String[] ( STRING ) [ NUMBER ] ; when ( org.springframework.data.gemfire.test.Region . getName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.test.Index . getRegion ( ) ) . thenReturn ( org.springframework.data.gemfire.test.Region ) ; } return org.springframework.data.gemfire.test.Index ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.Map<java.lang.String,org.springframework.data.gemfire.test.Region> < java.lang.String , Region > java.util.Map<java.lang.String,org.springframework.data.gemfire.test.Region> ( ) { return this . java.util.HashMap<java.lang.String,org.springframework.data.gemfire.test.Region> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.Cache org.springframework.data.gemfire.test.Cache ( ) { return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( final long long , final java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) throws java.lang.InterruptedException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionService org.springframework.data.gemfire.test.RegionService ( final java.util.Properties java.util.Properties ) { return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionService org.springframework.data.gemfire.test.RegionService ( final java.util.Properties java.util.Properties , final java.lang.String java.lang.String ) { return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < K , V > org.springframework.data.gemfire.test.ClientRegionFactory<K,V> < K , V > org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ( ClientRegionShortcut org.springframework.data.gemfire.test.ClientRegionShortcut ) { return new MockClientRegionFactory < K , V > ( this ) . createClientRegionFactory ( org.springframework.data.gemfire.test.ClientRegionShortcut ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < K , V > org.springframework.data.gemfire.test.ClientRegionFactory<K,V> < K , V > org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ( java.lang.String java.lang.String ) { return new MockClientRegionFactory < K , V > ( this ) . createClientRegionFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.Set<java.net.InetSocketAddress> ( ) { return java.util.Collections . java.util.Set<java.net.InetSocketAddress> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.Pool org.springframework.data.gemfire.test.Pool ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.QueryService org.springframework.data.gemfire.test.QueryService ( ) { return org.springframework.data.gemfire.test.QueryService ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.QueryService org.springframework.data.gemfire.test.QueryService ( final java.lang.String java.lang.String ) { return org.springframework.data.gemfire.test.QueryService ( ) ; }  <METHOD_END>
