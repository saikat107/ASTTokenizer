<METHOD_START> void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( Log org.springframework.boot.Log ) { Assert . notNull ( org.springframework.boot.Log , STRING ) ; if ( org.springframework.boot.Log . isInfoEnabled ( ) ) { org.springframework.boot.Log . info ( java.lang.String ( ) ) ; } if ( org.springframework.boot.Log . isDebugEnabled ( ) ) { org.springframework.boot.Log . debug ( java.lang.StringBuilder ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( Log org.springframework.boot.Log , StopWatch org.springframework.boot.StopWatch ) { if ( org.springframework.boot.Log . isInfoEnabled ( ) ) { org.springframework.boot.Log . info ( java.lang.StringBuilder ( org.springframework.boot.StopWatch ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( this . java.lang.Class<> ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( ) ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.StringBuilder java.lang.StringBuilder ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.Class<? extends org.springframework.boot.StartupInfoLogger> ( ) ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( ApplicationContext .class ) ) ; return java.lang.StringBuilder ; }  <METHOD_END>
<METHOD_START> private java.lang.StringBuilder java.lang.StringBuilder ( StopWatch org.springframework.boot.StopWatch ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.boot.StopWatch . getTotalTimeSeconds ( ) ) ; try { double double = java.lang.management.ManagementFactory . java.lang.management.RuntimeMXBean ( ) . long ( ) / NUMBER ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING + double + STRING ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { } return java.lang.StringBuilder ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return ( this . java.lang.Class<> != null ? ClassUtils . getShortName ( this . java.lang.Class<> ) : STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( final java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.String ( STRING , new java.util.concurrent.Callable<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.Class<> . java.lang.Package ( ) . java.lang.String ( ) ; } } , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.Class<> . java.lang.Package ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return java.lang.String ( STRING , new java.util.concurrent.Callable<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.net.InetAddress . java.net.InetAddress ( ) . java.lang.String ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.net.InetAddress . java.net.InetAddress ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return java.lang.String ( STRING , new java.util.concurrent.Callable<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.System . java.lang.String ( STRING ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.System . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , new java.util.concurrent.Callable<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.System . java.lang.String ( STRING ) ; } } ) ; java.lang.String java.lang.String = java.lang.String ( STRING , new java.util.concurrent.Callable<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.System . java.lang.String ( STRING ) ; } } ) ; ApplicationHome org.springframework.boot.ApplicationHome = new ApplicationHome ( this . java.lang.Class<> ) ; java.lang.String java.lang.String = ( org.springframework.boot.ApplicationHome . getSource ( ) == null ? STRING : org.springframework.boot.ApplicationHome . getSource ( ) . getAbsolutePath ( ) ) ; if ( java.lang.String == null && java.lang.String == null ) { return STRING ; } if ( StringUtils . hasLength ( java.lang.String ) && StringUtils . hasLength ( java.lang.String ) ) { java.lang.String = STRING + java.lang.String ; } if ( StringUtils . hasLength ( java.lang.String ) && StringUtils . hasLength ( java.lang.String ) ) { java.lang.String = STRING + java.lang.String ; } return STRING + java.lang.String + java.lang.String + java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.System . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.System . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.concurrent.Callable<java.lang.Object> < java.lang.Object > java.util.concurrent.Callable<java.lang.Object> ) { return java.lang.String ( java.lang.String , java.util.concurrent.Callable<java.lang.Object> , STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.concurrent.Callable<java.lang.Object> < java.lang.Object > java.util.concurrent.Callable<java.lang.Object> , java.lang.String java.lang.String ) { try { java.lang.Object java.lang.Object = java.util.concurrent.Callable<java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object != null && StringUtils . hasLength ( java.lang.Object . java.lang.String ( ) ) ) { return java.lang.String + java.lang.Object ; } } catch ( java.lang.Exception java.lang.Exception ) { } return java.lang.String ; }  <METHOD_END>
