<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.state.AnnotationConfigApplicationContext org.springframework.statemachine.state.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( BaseConfig .class , org.springframework.statemachine.state.ChoiceStateTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S30 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( BaseConfig .class , org.springframework.statemachine.state.ChoiceStateTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S31 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( BaseConfig .class , org.springframework.statemachine.state.ChoiceStateTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S32 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( BaseConfig .class , org.springframework.statemachine.state.ChoiceStateTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S33 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( BaseConfig .class , org.springframework.statemachine.state.ChoiceStateTests.Config2 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S33 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( BaseConfig .class , org.springframework.statemachine.state.ChoiceStateTests.Config3 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S21 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( BaseConfig .class , org.springframework.statemachine.state.ChoiceStateTests.Config4 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ChoiceStateTests.TestStateEntryExitListener org.springframework.statemachine.state.ChoiceStateTests.TestStateEntryExitListener = new org.springframework.statemachine.state.ChoiceStateTests.TestStateEntryExitListener ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . addStateListener ( org.springframework.statemachine.state.ChoiceStateTests.TestStateEntryExitListener ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . SI ) ) ; org.springframework.statemachine.state.ChoiceStateTests.TestStateEntryExitListener . void ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . SI ) ) ; assertThat ( org.springframework.statemachine.state.ChoiceStateTests.TestStateEntryExitListener . java.util.List<org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.state.ChoiceStateTests.TestStateEntryExitListener . java.util.List<org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . size ( ) , is ( NUMBER ) ) ; org.springframework.statemachine.state.ChoiceStateTests.TestStateEntryExitListener . void ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E2 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; assertThat ( org.springframework.statemachine.state.ChoiceStateTests.TestStateEntryExitListener . java.util.List<org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.state.ChoiceStateTests.TestStateEntryExitListener . java.util.List<org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( TestStates .class ) ) . choice ( TestStates . S3 ) . end ( TestStates . SF ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S3 ) . event ( TestEvents . E1 ) . and ( ) . withChoice ( ) . source ( TestStates . S3 ) . first ( TestStates . S30 , org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) ) . then ( TestStates . S31 , org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) ) . then ( TestStates . S32 , org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) ) . last ( TestStates . S33 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) { return new org.springframework.statemachine.state.ChoiceStateTests.ChoiceGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) { return new org.springframework.statemachine.state.ChoiceStateTests.ChoiceGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) { return new org.springframework.statemachine.state.ChoiceStateTests.ChoiceGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( TestStates .class ) ) . choice ( TestStates . S3 ) . end ( TestStates . SF ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S3 ) . event ( TestEvents . E1 ) . and ( ) . withChoice ( ) . source ( TestStates . S3 ) . last ( TestStates . S33 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) { return new org.springframework.statemachine.state.ChoiceStateTests.ChoiceGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) { return new org.springframework.statemachine.state.ChoiceStateTests.ChoiceGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) { return new org.springframework.statemachine.state.ChoiceStateTests.ChoiceGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( TestStates .class ) ) . choice ( TestStates . S3 ) . choice ( TestStates . S2 ) . end ( TestStates . SF ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S3 ) . event ( TestEvents . E1 ) . and ( ) . withChoice ( ) . source ( TestStates . S3 ) . first ( TestStates . S2 , org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) ) . last ( TestStates . S33 ) . and ( ) . withChoice ( ) . source ( TestStates . S2 ) . first ( TestStates . S20 , org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) ) . last ( TestStates . S21 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) { return new org.springframework.statemachine.state.ChoiceStateTests.ChoiceGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.state.Guard<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) { return new org.springframework.statemachine.state.ChoiceStateTests.ChoiceGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( TestStates .class ) ) . choice ( TestStates . S2 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S4 ) . event ( TestEvents . E2 ) . and ( ) . withChoice ( ) . source ( TestStates . S2 ) . last ( TestStates . SI ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) { java.util.List<org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . add ( org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) { java.util.List<org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . add ( org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.util.List<org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . clear ( ) ; java.util.List<org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . clear ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < TestStates , TestEvents > org.springframework.statemachine.state.StateContext<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) { return ObjectUtils . nullSafeEquals ( java.lang.String , org.springframework.statemachine.state.StateContext<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getMessageHeaders ( ) . get ( STRING , java.lang.String .class ) ) ; }  <METHOD_END>
