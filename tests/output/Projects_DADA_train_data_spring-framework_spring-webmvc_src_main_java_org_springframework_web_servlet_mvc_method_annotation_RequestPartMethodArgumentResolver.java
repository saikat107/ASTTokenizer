<METHOD_START> public void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) { super( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ); }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { super( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , java.util.List<java.lang.Object> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { if ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . hasParameterAnnotation ( RequestPart .class ) ) { return true ; } else { if ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . hasParameterAnnotation ( RequestParam .class ) ) { return false ; } return MultipartResolutionDelegate . isMultipartArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . nestedIfOptional ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , WebDataBinderFactory org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) throws java.lang.Exception { HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest = org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . getNativeRequest ( HttpServletRequest .class ) ; RequestPart org.springframework.web.servlet.mvc.method.annotation.RequestPart = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterAnnotation ( RequestPart .class ) ; boolean boolean = ( ( org.springframework.web.servlet.mvc.method.annotation.RequestPart == null || org.springframework.web.servlet.mvc.method.annotation.RequestPart . required ( ) ) && ! org.springframework.web.servlet.mvc.method.annotation.MethodParameter . isOptional ( ) ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.RequestPart ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . nestedIfOptional ( ) ; java.lang.Object java.lang.Object = null ; java.lang.Object java.lang.Object = MultipartResolutionDelegate . resolveMultipartArgument ( java.lang.String , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) ; if ( java.lang.Object != MultipartResolutionDelegate . UNRESOLVABLE ) { java.lang.Object = java.lang.Object ; } else { try { HttpInputMessage org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage = new RequestPartServletServerHttpRequest ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , java.lang.String ) ; java.lang.Object = readWithMessageConverters ( org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getNestedGenericParameterType ( ) ) ; WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder = org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory . createBinder ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , java.lang.Object , java.lang.String ) ; if ( java.lang.Object != null ) { validateIfApplicable ( org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; if ( org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . getBindingResult ( ) . hasErrors ( ) && isBindExceptionRequired ( org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) { throw new MethodArgumentNotValidException ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . getBindingResult ( ) ) ; } } org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . addAttribute ( BindingResult . MODEL_KEY_PREFIX + java.lang.String , org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . getBindingResult ( ) ) ; } catch ( MissingServletRequestPartException org.springframework.web.servlet.mvc.method.annotation.MissingServletRequestPartException ) { if ( boolean ) { throw org.springframework.web.servlet.mvc.method.annotation.MissingServletRequestPartException ; } } catch ( MultipartException org.springframework.web.servlet.mvc.method.annotation.MultipartException ) { if ( boolean ) { throw org.springframework.web.servlet.mvc.method.annotation.MultipartException ; } } } if ( java.lang.Object == null && boolean ) { if ( ! MultipartResolutionDelegate . isMultipartRequest ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) ) { throw new MultipartException ( STRING ) ; } else { throw new MissingServletRequestPartException ( java.lang.String ) ; } } return adaptArgumentIfNecessary ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , RequestPart org.springframework.web.servlet.mvc.method.annotation.RequestPart ) { java.lang.String java.lang.String = ( org.springframework.web.servlet.mvc.method.annotation.RequestPart != null ? org.springframework.web.servlet.mvc.method.annotation.RequestPart . name ( ) : STRING ) ; if ( java.lang.String . boolean ( ) ) { java.lang.String = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterName ( ) ; if ( java.lang.String == null ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getNestedParameterType ( ) . getName ( ) + STRING ) ; } } return java.lang.String ; }  <METHOD_END>
