<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method , AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut , AspectInstanceFactory org.springframework.aop.aspectj.AspectInstanceFactory ) { super( java.lang.reflect.Method , org.springframework.aop.aspectj.AspectJExpressionPointcut , org.springframework.aop.aspectj.AspectInstanceFactory ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { setReturningNameNoCheck ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { if ( boolean ( java.lang.reflect.Method , java.lang.Object ) ) { invokeAdviceMethod ( getJoinPointMatch ( ) , java.lang.Object , null ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object java.lang.Object ) { java.lang.Class<?> < ? > java.lang.Class<?> = getDiscoveredReturningType ( ) ; java.lang.reflect.Type java.lang.reflect.Type = getDiscoveredReturningGenericType ( ) ; return ( boolean ( java.lang.Class<> , java.lang.reflect.Method , java.lang.Object ) && ( java.lang.reflect.Type == null || java.lang.reflect.Type == java.lang.Class<> || TypeUtils . isAssignable ( java.lang.reflect.Type , java.lang.reflect.Method . java.lang.reflect.Type ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object java.lang.Object ) { if ( java.lang.Object != null ) { return ClassUtils . isAssignableValue ( java.lang.Class<> , java.lang.Object ) ; } else if ( java.lang.Object .class == java.lang.Class<> && void .class == java.lang.reflect.Method . java.lang.Class<?> ( ) ) { return true ; } else { return ClassUtils . isAssignable ( java.lang.Class<> , java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; } }  <METHOD_END>
