<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { ActiveMqTestUtils . prepare ( ) ; ConfigurableApplicationContext org.springframework.integration.jms.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.jms.config.ExceptionHandlingSiConsumerTests .class ) ; JmsTemplate org.springframework.integration.jms.config.JmsTemplate = new JmsTemplate ( org.springframework.integration.jms.config.ConfigurableApplicationContext . getBean ( STRING , ConnectionFactory .class ) ) ; Destination org.springframework.integration.jms.config.Destination = org.springframework.integration.jms.config.ConfigurableApplicationContext . getBean ( STRING , Destination .class ) ; final Destination org.springframework.integration.jms.config.Destination = org.springframework.integration.jms.config.ConfigurableApplicationContext . getBean ( STRING , Destination .class ) ; org.springframework.integration.jms.config.JmsTemplate . send ( org.springframework.integration.jms.config.Destination , ( MessageCreator ) session -> { TextMessage message = session . createTextMessage ( ) ; message . setText ( STRING ) ; message . setJMSReplyTo ( reply ) ; return message ; } ) ; Message org.springframework.integration.jms.config.Message = org.springframework.integration.jms.config.JmsTemplate . receive ( org.springframework.integration.jms.config.Destination ) ; assertNotNull ( org.springframework.integration.jms.config.Message ) ; org.springframework.integration.jms.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { ActiveMqTestUtils . prepare ( ) ; ConfigurableApplicationContext org.springframework.integration.jms.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.jms.config.ExceptionHandlingSiConsumerTests .class ) ; JmsTemplate org.springframework.integration.jms.config.JmsTemplate = new JmsTemplate ( org.springframework.integration.jms.config.ConfigurableApplicationContext . getBean ( STRING , ConnectionFactory .class ) ) ; Destination org.springframework.integration.jms.config.Destination = org.springframework.integration.jms.config.ConfigurableApplicationContext . getBean ( STRING , Destination .class ) ; final Destination org.springframework.integration.jms.config.Destination = org.springframework.integration.jms.config.ConfigurableApplicationContext . getBean ( STRING , Destination .class ) ; org.springframework.integration.jms.config.JmsTemplate . send ( org.springframework.integration.jms.config.Destination , ( MessageCreator ) session -> { TextMessage message = session . createTextMessage ( ) ; message . setText ( STRING ) ; message . setJMSReplyTo ( reply ) ; return message ; } ) ; Message org.springframework.integration.jms.config.Message = org.springframework.integration.jms.config.JmsTemplate . receive ( org.springframework.integration.jms.config.Destination ) ; assertNotNull ( org.springframework.integration.jms.config.Message ) ; assertEquals ( STRING , ( ( TextMessage ) org.springframework.integration.jms.config.Message ) . getText ( ) ) ; org.springframework.integration.jms.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ActiveMqTestUtils . prepare ( ) ; final ConfigurableApplicationContext org.springframework.integration.jms.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.jms.config.ExceptionHandlingSiConsumerTests .class ) ; org.springframework.integration.jms.config.ExceptionHandlingSiConsumerTests.SampleGateway org.springframework.integration.jms.config.ExceptionHandlingSiConsumerTests.SampleGateway = org.springframework.integration.jms.config.ConfigurableApplicationContext . getBean ( STRING , org.springframework.integration.jms.config.ExceptionHandlingSiConsumerTests.SampleGateway .class ) ; java.lang.String java.lang.String = org.springframework.integration.jms.config.ExceptionHandlingSiConsumerTests.SampleGateway . java.lang.String ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.integration.jms.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { throw new org.springframework.integration.jms.config.ExceptionHandlingSiConsumerTests.SampleException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public org . springframework . org.springframework.messaging . org.springframework.messaging < ? > transform ( java.lang.Throwable java.lang.Throwable ) throws java.lang.Exception { return MessageBuilder . withPayload ( java.lang.Throwable . java.lang.Throwable ( ) . java.lang.String ( ) ) . build ( ) ; }  <METHOD_END>
