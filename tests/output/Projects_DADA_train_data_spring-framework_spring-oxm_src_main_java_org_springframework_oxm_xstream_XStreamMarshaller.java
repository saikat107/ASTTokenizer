<METHOD_START> public void void ( ReflectionProvider org.springframework.oxm.xstream.ReflectionProvider ) { this . org.springframework.oxm.xstream.ReflectionProvider = org.springframework.oxm.xstream.ReflectionProvider ; }  <METHOD_END>
<METHOD_START> public void void ( HierarchicalStreamDriver org.springframework.oxm.xstream.HierarchicalStreamDriver ) { this . org.springframework.oxm.xstream.HierarchicalStreamDriver = org.springframework.oxm.xstream.HierarchicalStreamDriver ; this . org.springframework.oxm.xstream.HierarchicalStreamDriver = org.springframework.oxm.xstream.HierarchicalStreamDriver ; }  <METHOD_END>
<METHOD_START> private org.springframework.oxm.xstream.HierarchicalStreamDriver org.springframework.oxm.xstream.HierarchicalStreamDriver ( ) { if ( this . org.springframework.oxm.xstream.HierarchicalStreamDriver == null ) { this . org.springframework.oxm.xstream.HierarchicalStreamDriver = new XppDriver ( ) ; } return this . org.springframework.oxm.xstream.HierarchicalStreamDriver ; }  <METHOD_END>
<METHOD_START> public void void ( Mapper org.springframework.oxm.xstream.Mapper ) { this . org.springframework.oxm.xstream.Mapper = org.springframework.oxm.xstream.Mapper ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.Class<? extends org.springframework.oxm.xstream.MapperWrapper> < ? extends MapperWrapper > ... java.lang.Class<? extends org.springframework.oxm.xstream.MapperWrapper>[] ) { this . java.lang.Class<? extends org.springframework.oxm.xstream.MapperWrapper>[] = mapperWrappers ; }  <METHOD_END>
<METHOD_START> public void void ( ConverterLookup org.springframework.oxm.xstream.ConverterLookup ) { this . org.springframework.oxm.xstream.ConverterLookup = org.springframework.oxm.xstream.ConverterLookup ; if ( org.springframework.oxm.xstream.ConverterLookup instanceof ConverterRegistry ) { this . org.springframework.oxm.xstream.ConverterRegistry = ( ConverterRegistry ) org.springframework.oxm.xstream.ConverterLookup ; } }  <METHOD_END>
<METHOD_START> public void void ( ConverterRegistry org.springframework.oxm.xstream.ConverterRegistry ) { this . org.springframework.oxm.xstream.ConverterRegistry = org.springframework.oxm.xstream.ConverterRegistry ; }  <METHOD_END>
<METHOD_START> public void void ( ConverterMatcher ... org.springframework.oxm.xstream.ConverterMatcher[] ) { this . org.springframework.oxm.xstream.ConverterMatcher[] = org.springframework.oxm.xstream.ConverterMatcher[] ; }  <METHOD_END>
<METHOD_START> public void void ( MarshallingStrategy org.springframework.oxm.xstream.MarshallingStrategy ) { this . org.springframework.oxm.xstream.MarshallingStrategy = org.springframework.oxm.xstream.MarshallingStrategy ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { this . java.util.Map<java.lang.String,?> = java.util.Map<java.lang.String,> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { this . java.util.Map<java.lang.String,?> = java.util.Map<java.lang.String,> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . java.lang.Class<?>[] = java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { this . java.util.Map<?,?> = java.util.Map<,> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.Class<?>,java.lang.String> < java.lang.Class<?> < ? > , java.lang.String > java.util.Map<java.lang.Class<?>,java.lang.String> ) { this . java.util.Map<java.lang.Class<?>,java.lang.String> = java.util.Map<java.lang.Class<?>,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.Class<?>,java.lang.String> < java.lang.Class<?> < ? > , java.lang.String > java.util.Map<java.lang.Class<?>,java.lang.String> ) { this . java.util.Map<java.lang.Class<?>,java.lang.String> = java.util.Map<java.lang.Class<?>,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . java.lang.Class<?>[] = java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( NameCoder org.springframework.oxm.xstream.NameCoder ) { this . org.springframework.oxm.xstream.NameCoder = org.springframework.oxm.xstream.NameCoder ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . java.lang.Class<?>[] = java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.oxm.xstream.XStream = org.springframework.oxm.xstream.XStream ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.oxm.xstream.XStream org.springframework.oxm.xstream.XStream ( ) { XStream org.springframework.oxm.xstream.XStream = org.springframework.oxm.xstream.XStream ( ) ; void ( org.springframework.oxm.xstream.XStream ) ; void ( org.springframework.oxm.xstream.XStream ) ; return org.springframework.oxm.xstream.XStream ; }  <METHOD_END>
<METHOD_START> protected org.springframework.oxm.xstream.XStream org.springframework.oxm.xstream.XStream ( ) { return new XStream ( this . org.springframework.oxm.xstream.ReflectionProvider , org.springframework.oxm.xstream.HierarchicalStreamDriver ( ) , new ClassLoaderReference ( this . java.lang.ClassLoader ) , this . org.springframework.oxm.xstream.Mapper , this . org.springframework.oxm.xstream.ConverterLookup , this . org.springframework.oxm.xstream.ConverterRegistry ) { @ java.lang.Override protected org.springframework.oxm.xstream.MapperWrapper org.springframework.oxm.xstream.MapperWrapper ( MapperWrapper org.springframework.oxm.xstream.MapperWrapper ) { MapperWrapper org.springframework.oxm.xstream.MapperWrapper = org.springframework.oxm.xstream.MapperWrapper ; if ( java.lang.Class<? extends org.springframework.oxm.xstream.MapperWrapper>[] != null ) { for ( Class < ? extends MapperWrapper > mapperWrapper : mapperWrappers ) { Constructor < ? extends MapperWrapper > ctor ; try { ctor = mapperWrapper . getConstructor ( Mapper .class ) ; } catch ( NoSuchMethodException ex ) { try { ctor = mapperWrapper . getConstructor ( MapperWrapper .class ) ; } catch ( NoSuchMethodException ex2 ) { throw new IllegalStateException ( STRING + mapperWrapper ) ; } } try { mapperToWrap = ctor . newInstance ( mapperToWrap ) ; } catch ( Throwable ex ) { throw new IllegalStateException ( STRING + mapperWrapper ) ; } } } return mapperToWrap ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.oxm.xstream.MapperWrapper org.springframework.oxm.xstream.MapperWrapper ( MapperWrapper org.springframework.oxm.xstream.MapperWrapper ) { MapperWrapper org.springframework.oxm.xstream.MapperWrapper = org.springframework.oxm.xstream.MapperWrapper ; if ( java.lang.Class<? extends org.springframework.oxm.xstream.MapperWrapper>[] != null ) { for ( Class < ? extends MapperWrapper > mapperWrapper : mapperWrappers ) { Constructor < ? extends MapperWrapper > ctor ; try { ctor = mapperWrapper . getConstructor ( Mapper .class ) ; } catch ( NoSuchMethodException ex ) { try { ctor = mapperWrapper . getConstructor ( MapperWrapper .class ) ; } catch ( NoSuchMethodException ex2 ) { throw new IllegalStateException ( STRING + mapperWrapper ) ; } } try { mapperToWrap = ctor . newInstance ( mapperToWrap ) ; } catch ( Throwable ex ) { throw new IllegalStateException ( STRING + mapperWrapper ) ; } } } return mapperToWrap ; }  <METHOD_END>
<METHOD_START> protected void void ( XStream org.springframework.oxm.xstream.XStream ) { if ( this . org.springframework.oxm.xstream.ConverterMatcher[] != null ) { for ( int int = NUMBER ; int < this . org.springframework.oxm.xstream.ConverterMatcher[] . length ; int ++ ) { if ( this . org.springframework.oxm.xstream.ConverterMatcher[] [ int ] instanceof Converter ) { org.springframework.oxm.xstream.XStream . registerConverter ( ( Converter ) this . org.springframework.oxm.xstream.ConverterMatcher[] [ int ] , int ) ; } else if ( this . org.springframework.oxm.xstream.ConverterMatcher[] [ int ] instanceof SingleValueConverter ) { org.springframework.oxm.xstream.XStream . registerConverter ( ( SingleValueConverter ) this . org.springframework.oxm.xstream.ConverterMatcher[] [ int ] , int ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + this . org.springframework.oxm.xstream.ConverterMatcher[] [ int ] + STRING ) ; } } } if ( this . org.springframework.oxm.xstream.MarshallingStrategy != null ) { org.springframework.oxm.xstream.XStream . setMarshallingStrategy ( this . org.springframework.oxm.xstream.MarshallingStrategy ) ; } if ( this . java.lang.Integer != null ) { org.springframework.oxm.xstream.XStream . setMode ( this . java.lang.Integer ) ; } try { if ( this . java.util.Map<java.lang.String,> != null ) { java.util.Map<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > java.util.Map<java.lang.String,java.lang.Class<?>> = java.util.Map<java.lang.String,java.lang.Class<?>> ( this . java.util.Map<java.lang.String,> ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > java.util.Map.Entry<java.lang.String,java.lang.Class<?>> : java.util.Map<java.lang.String,java.lang.Class<?>> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Class<?>>> ( ) ) { org.springframework.oxm.xstream.XStream . alias ( java.util.Map.Entry<java.lang.String,java.lang.Class<?>> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( ) ) ; } } if ( this . java.util.Map<java.lang.String,> != null ) { java.util.Map<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > java.util.Map<java.lang.String,java.lang.Class<?>> = java.util.Map<java.lang.String,java.lang.Class<?>> ( this . java.util.Map<java.lang.String,> ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > java.util.Map.Entry<java.lang.String,java.lang.Class<?>> : java.util.Map<java.lang.String,java.lang.Class<?>> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Class<?>>> ( ) ) { org.springframework.oxm.xstream.XStream . aliasType ( java.util.Map.Entry<java.lang.String,java.lang.Class<?>> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( ) ) ; } } if ( this . java.util.Map<java.lang.String,java.lang.String> != null ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : this . java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ; java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ; int int = java.lang.String . int ( '.' ) ; if ( int != - NUMBER ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.String , this . java.lang.ClassLoader ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int + NUMBER ) ; org.springframework.oxm.xstream.XStream . aliasField ( java.lang.String , java.lang.Class<> , java.lang.String ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } } } } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new java.lang.IllegalStateException ( STRING , java.lang.ClassNotFoundException ) ; } if ( this . java.lang.Class<?>[] != null ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : this . java.lang.Class<?>[] ) { org.springframework.oxm.xstream.XStream . useAttributeFor ( java.lang.Class<> ) ; } } if ( this . java.util.Map<,> != null ) { for ( java.util.Map . java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> : this . java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { if ( java.util.Map.Entry<,> . getKey ( ) instanceof java.lang.String ) { if ( java.util.Map.Entry<,> . getValue ( ) instanceof java.lang.Class ) { org.springframework.oxm.xstream.XStream . useAttributeFor ( ( java.lang.String ) java.util.Map.Entry<,> . getKey ( ) , ( java.lang.Class<?> < ? > ) java.util.Map.Entry<,> . getValue ( ) ) ; } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } } else if ( java.util.Map.Entry<,> . getKey ( ) instanceof java.lang.Class ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.util.Map.Entry<,> . getKey ( ) ; if ( java.util.Map.Entry<,> . getValue ( ) instanceof java.lang.String ) { org.springframework.oxm.xstream.XStream . useAttributeFor ( java.lang.Class<> , ( java.lang.String ) java.util.Map.Entry<,> . getValue ( ) ) ; } else if ( java.util.Map.Entry<,> . getValue ( ) instanceof java.util.List ) { @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) java.util.Map.Entry<,> . getValue ( ) ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { if ( java.lang.Object instanceof java.lang.String ) { org.springframework.oxm.xstream.XStream . useAttributeFor ( java.lang.Class<> , ( java.lang.String ) java.lang.Object ) ; } } } else { throw new java.lang.IllegalArgumentException ( STRING + STRING ) ; } } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } } } if ( this . java.util.Map<java.lang.Class<?>,java.lang.String> != null ) { for ( java.util.Map . java.util.Map.Entry<java.lang.Class<?>,java.lang.String> < java.lang.Class<?> < ? > , java.lang.String > java.util.Map.Entry<java.lang.Class<?>,java.lang.String> : this . java.util.Map<java.lang.Class<?>,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.Class<?>,java.lang.String>> ( ) ) { java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( java.util.Map.Entry<java.lang.Class<?>,java.lang.String> . java.lang.String ( ) ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.oxm.xstream.XStream . addImplicitCollection ( java.util.Map.Entry<java.lang.Class<?>,java.lang.String> . java.lang.Class<?> ( ) , java.lang.String ) ; } } } if ( this . java.util.Map<java.lang.Class<?>,java.lang.String> != null ) { for ( java.util.Map . java.util.Map.Entry<java.lang.Class<?>,java.lang.String> < java.lang.Class<?> < ? > , java.lang.String > java.util.Map.Entry<java.lang.Class<?>,java.lang.String> : this . java.util.Map<java.lang.Class<?>,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.Class<?>,java.lang.String>> ( ) ) { java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( java.util.Map.Entry<java.lang.Class<?>,java.lang.String> . java.lang.String ( ) ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.oxm.xstream.XStream . omitField ( java.util.Map.Entry<java.lang.Class<?>,java.lang.String> . java.lang.Class<?> ( ) , java.lang.String ) ; } } } if ( this . java.lang.Class<?>[] != null ) { org.springframework.oxm.xstream.XStream . processAnnotations ( this . java.lang.Class<?>[] ) ; } if ( this . boolean ) { org.springframework.oxm.xstream.XStream . autodetectAnnotations ( true ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > java.util.Map<java.lang.String,java.lang.Class<?>> ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws java.lang.ClassNotFoundException { java.util.Map<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > java.util.Map<java.lang.String,java.lang.Class<?>> = new java.util.LinkedHashMap<java.lang.String,java.lang.Class<?>> <> ( java.util.Map<java.lang.String,> . int ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,?> < java.lang.String , ? > java.util.Map.Entry<java.lang.String,?> : java.util.Map<java.lang.String,> . java.util.Set<java.util.Map.Entry<java.lang.String,>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,> . java.lang.String ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,> . getValue ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> ; if ( java.lang.Object instanceof java.lang.Class ) { java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.Object ; } else if ( java.lang.Object instanceof java.lang.String ) { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; java.lang.Class<?> = ClassUtils . forName ( java.lang.String , this . java.lang.ClassLoader ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object + STRING ) ; } java.util.Map<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( java.lang.String , java.lang.Class<> ) ; } return java.util.Map<java.lang.String,java.lang.Class<?>> ; }  <METHOD_END>
<METHOD_START> protected void void ( XStream org.springframework.oxm.xstream.XStream ) {	}  <METHOD_END>
<METHOD_START> public final org.springframework.oxm.xstream.XStream org.springframework.oxm.xstream.XStream ( ) { if ( this . org.springframework.oxm.xstream.XStream == null ) { this . org.springframework.oxm.xstream.XStream = org.springframework.oxm.xstream.XStream ( ) ; } return this . org.springframework.oxm.xstream.XStream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( ObjectUtils . isEmpty ( this . java.lang.Class<?>[] ) ) { return true ; } else { for ( java.lang.Class<?> < ? > java.lang.Class<?> : this . java.lang.Class<?>[] ) { if ( java.lang.Class<> . boolean ( java.lang.Class<> ) ) { return true ; } } return false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , org.w3c.dom.Node org.w3c.dom.Node ) throws org.springframework.oxm.xstream.XmlMappingException { HierarchicalStreamWriter org.springframework.oxm.xstream.HierarchicalStreamWriter ; if ( org.w3c.dom.Node instanceof org.w3c.dom.Document ) { org.springframework.oxm.xstream.HierarchicalStreamWriter = new DomWriter ( ( org.w3c.dom.Document ) org.w3c.dom.Node , this . org.springframework.oxm.xstream.NameCoder ) ; } else if ( org.w3c.dom.Node instanceof org.w3c.dom.Element ) { org.springframework.oxm.xstream.HierarchicalStreamWriter = new DomWriter ( ( org.w3c.dom.Element ) org.w3c.dom.Node , org.w3c.dom.Node . org.w3c.dom.Document ( ) , this . org.springframework.oxm.xstream.NameCoder ) ; } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } void ( java.lang.Object , org.springframework.oxm.xstream.HierarchicalStreamWriter , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , javax.xml.stream.XMLEventWriter javax.xml.stream.XMLEventWriter ) throws org.springframework.oxm.xstream.XmlMappingException { org.xml.sax.ContentHandler org.xml.sax.ContentHandler = StaxUtils . createContentHandler ( javax.xml.stream.XMLEventWriter ) ; org.xml.sax.ext.LexicalHandler org.xml.sax.ext.LexicalHandler = null ; if ( org.xml.sax.ContentHandler instanceof org.xml.sax.ext.LexicalHandler ) { org.xml.sax.ext.LexicalHandler = ( org.xml.sax.ext.LexicalHandler ) org.xml.sax.ContentHandler ; } void ( java.lang.Object , org.xml.sax.ContentHandler , org.xml.sax.ext.LexicalHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , javax.xml.stream.XMLStreamWriter javax.xml.stream.XMLStreamWriter ) throws org.springframework.oxm.xstream.XmlMappingException { try { void ( java.lang.Object , new StaxWriter ( new QNameMap ( ) , javax.xml.stream.XMLStreamWriter , this . org.springframework.oxm.xstream.NameCoder ) , null ) ; } catch ( javax.xml.stream.XMLStreamException javax.xml.stream.XMLStreamException ) { throw org.springframework.oxm.xstream.XmlMappingException ( javax.xml.stream.XMLStreamException , true ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , org.xml.sax.ContentHandler org.xml.sax.ContentHandler , org.xml.sax.ext.LexicalHandler org.xml.sax.ext.LexicalHandler )			throws org.springframework.oxm.xstream.XmlMappingException { SaxWriter org.springframework.oxm.xstream.SaxWriter = new SaxWriter ( this . org.springframework.oxm.xstream.NameCoder ) ; org.springframework.oxm.xstream.SaxWriter . setContentHandler ( org.xml.sax.ContentHandler ) ; void ( java.lang.Object , org.springframework.oxm.xstream.SaxWriter , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.io.OutputStream java.io.OutputStream ) throws org.springframework.oxm.xstream.XmlMappingException , java.io.IOException { void ( java.lang.Object , java.io.OutputStream , null ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object , java.io.OutputStream java.io.OutputStream , DataHolder org.springframework.oxm.xstream.DataHolder )			throws org.springframework.oxm.xstream.XmlMappingException , java.io.IOException { if ( this . org.springframework.oxm.xstream.HierarchicalStreamDriver != null ) { void ( java.lang.Object , this . org.springframework.oxm.xstream.HierarchicalStreamDriver . createWriter ( java.io.OutputStream ) , org.springframework.oxm.xstream.DataHolder ) ; } else { void ( java.lang.Object , new java.io.OutputStreamWriter ( java.io.OutputStream , this . java.lang.String ) , org.springframework.oxm.xstream.DataHolder ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.io.Writer java.io.Writer ) throws org.springframework.oxm.xstream.XmlMappingException , java.io.IOException { void ( java.lang.Object , java.io.Writer , null ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object , java.io.Writer java.io.Writer , DataHolder org.springframework.oxm.xstream.DataHolder )			throws org.springframework.oxm.xstream.XmlMappingException , java.io.IOException { if ( this . org.springframework.oxm.xstream.HierarchicalStreamDriver != null ) { void ( java.lang.Object , this . org.springframework.oxm.xstream.HierarchicalStreamDriver . createWriter ( java.io.Writer ) , org.springframework.oxm.xstream.DataHolder ) ; } else { void ( java.lang.Object , new CompactWriter ( java.io.Writer ) , org.springframework.oxm.xstream.DataHolder ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , HierarchicalStreamWriter org.springframework.oxm.xstream.HierarchicalStreamWriter , DataHolder org.springframework.oxm.xstream.DataHolder ) { try { org.springframework.oxm.xstream.XStream ( ) . marshal ( java.lang.Object , org.springframework.oxm.xstream.HierarchicalStreamWriter , org.springframework.oxm.xstream.DataHolder ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw org.springframework.oxm.xstream.XmlMappingException ( java.lang.Exception , true ) ; } finally { try { org.springframework.oxm.xstream.HierarchicalStreamWriter . flush ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . debug ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( javax.xml.transform.stream.StreamSource javax.xml.transform.stream.StreamSource ) throws org.springframework.oxm.xstream.XmlMappingException , java.io.IOException { if ( javax.xml.transform.stream.StreamSource . java.io.InputStream ( ) != null ) { return java.lang.Object ( javax.xml.transform.stream.StreamSource . java.io.InputStream ( ) ) ; } else if ( javax.xml.transform.stream.StreamSource . java.io.Reader ( ) != null ) { return java.lang.Object ( javax.xml.transform.stream.StreamSource . java.io.Reader ( ) ) ; } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( org.w3c.dom.Node org.w3c.dom.Node ) throws org.springframework.oxm.xstream.XmlMappingException { HierarchicalStreamReader org.springframework.oxm.xstream.HierarchicalStreamReader ; if ( org.w3c.dom.Node instanceof org.w3c.dom.Document ) { org.springframework.oxm.xstream.HierarchicalStreamReader = new DomReader ( ( org.w3c.dom.Document ) org.w3c.dom.Node , this . org.springframework.oxm.xstream.NameCoder ) ; } else if ( org.w3c.dom.Node instanceof org.w3c.dom.Element ) { org.springframework.oxm.xstream.HierarchicalStreamReader = new DomReader ( ( org.w3c.dom.Element ) org.w3c.dom.Node , this . org.springframework.oxm.xstream.NameCoder ) ; } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } return java.lang.Object ( org.springframework.oxm.xstream.HierarchicalStreamReader , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( javax.xml.stream.XMLEventReader javax.xml.stream.XMLEventReader ) throws org.springframework.oxm.xstream.XmlMappingException { try { javax.xml.stream.XMLStreamReader javax.xml.stream.XMLStreamReader = StaxUtils . createEventStreamReader ( javax.xml.stream.XMLEventReader ) ; return java.lang.Object ( javax.xml.stream.XMLStreamReader ) ; } catch ( javax.xml.stream.XMLStreamException javax.xml.stream.XMLStreamException ) { throw org.springframework.oxm.xstream.XmlMappingException ( javax.xml.stream.XMLStreamException , false ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( javax.xml.stream.XMLStreamReader javax.xml.stream.XMLStreamReader ) throws org.springframework.oxm.xstream.XmlMappingException { return java.lang.Object ( new StaxReader ( new QNameMap ( ) , javax.xml.stream.XMLStreamReader , this . org.springframework.oxm.xstream.NameCoder ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( org.xml.sax.XMLReader org.xml.sax.XMLReader , org.xml.sax.InputSource org.xml.sax.InputSource )			throws org.springframework.oxm.xstream.XmlMappingException , java.io.IOException { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.io.InputStream java.io.InputStream ) throws org.springframework.oxm.xstream.XmlMappingException , java.io.IOException { return java.lang.Object ( java.io.InputStream , null ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.io.InputStream java.io.InputStream , DataHolder org.springframework.oxm.xstream.DataHolder ) throws org.springframework.oxm.xstream.XmlMappingException , java.io.IOException { if ( this . org.springframework.oxm.xstream.HierarchicalStreamDriver != null ) { return java.lang.Object ( this . org.springframework.oxm.xstream.HierarchicalStreamDriver . createReader ( java.io.InputStream ) , org.springframework.oxm.xstream.DataHolder ) ; } else { return java.lang.Object ( new java.io.InputStreamReader ( java.io.InputStream , this . java.lang.String ) , org.springframework.oxm.xstream.DataHolder ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.io.Reader java.io.Reader ) throws org.springframework.oxm.xstream.XmlMappingException , java.io.IOException { return java.lang.Object ( java.io.Reader , null ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.io.Reader java.io.Reader , DataHolder org.springframework.oxm.xstream.DataHolder ) throws org.springframework.oxm.xstream.XmlMappingException , java.io.IOException { return java.lang.Object ( org.springframework.oxm.xstream.HierarchicalStreamDriver ( ) . createReader ( java.io.Reader ) , org.springframework.oxm.xstream.DataHolder ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( HierarchicalStreamReader org.springframework.oxm.xstream.HierarchicalStreamReader , DataHolder org.springframework.oxm.xstream.DataHolder ) { try { return org.springframework.oxm.xstream.XStream ( ) . unmarshal ( org.springframework.oxm.xstream.HierarchicalStreamReader , null , org.springframework.oxm.xstream.DataHolder ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw org.springframework.oxm.xstream.XmlMappingException ( java.lang.Exception , false ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.oxm.xstream.XmlMappingException org.springframework.oxm.xstream.XmlMappingException ( java.lang.Exception java.lang.Exception , boolean boolean ) { if ( java.lang.Exception instanceof StreamException || java.lang.Exception instanceof CannotResolveClassException || java.lang.Exception instanceof ConversionException ) { if ( boolean ) { return new MarshallingFailureException ( STRING , java.lang.Exception ) ; } else { return new UnmarshallingFailureException ( STRING , java.lang.Exception ) ; } } else { return new UncategorizedMappingException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
