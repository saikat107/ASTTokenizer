<METHOD_START> public void ( ) { this( true , long , long ); }  <METHOD_END>
<METHOD_START> public void ( boolean boolean , long long , long long ) { Assert . isTrue ( long > NUMBER , STRING ) ; Assert . isTrue ( long > NUMBER , STRING ) ; Assert . isTrue ( long > long , STRING ) ; this . boolean = boolean ; this . long = long ; this . long = long ; }  <METHOD_END>
<METHOD_START> public void void ( FileChangeListener org.springframework.boot.devtools.filewatch.FileChangeListener ) { Assert . notNull ( org.springframework.boot.devtools.filewatch.FileChangeListener , STRING ) ; synchronized ( this . java.lang.Object ) { void ( ) ; this . java.util.List<org.springframework.boot.devtools.filewatch.FileChangeListener> . add ( org.springframework.boot.devtools.filewatch.FileChangeListener ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Iterable<java.io.File> < java.io.File > java.lang.Iterable<java.io.File> ) { Assert . notNull ( java.lang.Iterable<java.io.File> , STRING ) ; synchronized ( this . java.lang.Object ) { for ( java.io.File java.io.File : java.lang.Iterable<java.io.File> ) { void ( java.io.File ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.io.File java.io.File ) { Assert . notNull ( java.io.File , STRING ) ; Assert . isTrue ( java.io.File . boolean ( ) , STRING + java.io.File + STRING + STRING ) ; synchronized ( this . java.lang.Object ) { void ( ) ; this . java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> . put ( java.io.File , null ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.io.FileFilter java.io.FileFilter ) { synchronized ( this . java.lang.Object ) { this . java.io.FileFilter = java.io.FileFilter ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { synchronized ( this . java.lang.Object ) { Assert . state ( this . java.lang.Thread == null , STRING ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) { synchronized ( this . java.lang.Object ) { void ( ) ; if ( this . java.lang.Thread == null ) { java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> < java.io.File , FolderSnapshot > java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> = new java.util.HashMap<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> <> ( ) ; java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> . putAll ( this . java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> ) ; this . java.lang.Thread = new java.lang.Thread ( new org.springframework.boot.devtools.filewatch.FileSystemWatcher.Watcher ( this . java.util.concurrent.atomic.AtomicInteger , new java.util.ArrayList <> ( this . java.util.List<org.springframework.boot.devtools.filewatch.FileChangeListener> ) , this . java.io.FileFilter , this . long , this . long , java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> ) ) ; this . java.lang.Thread . void ( STRING ) ; this . java.lang.Thread . void ( this . boolean ) ; this . java.lang.Thread . void ( ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( java.io.File java.io.File : this . java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> . keySet ( ) ) { this . java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> . put ( java.io.File , new FolderSnapshot ( java.io.File ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> void void ( int int ) { synchronized ( this . java.lang.Object ) { java.lang.Thread java.lang.Thread = this . java.lang.Thread ; if ( java.lang.Thread != null ) { this . java.util.concurrent.atomic.AtomicInteger . void ( int ) ; if ( int <= NUMBER ) { java.lang.Thread . void ( ) ; } if ( java.lang.Thread . java.lang.Thread ( ) != java.lang.Thread ) { try { java.lang.Thread . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } } this . java.lang.Thread = null ; } } }  <METHOD_END>
<METHOD_START> private void ( java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger , java.util.List<org.springframework.boot.devtools.filewatch.FileChangeListener> < FileChangeListener > java.util.List<org.springframework.boot.devtools.filewatch.FileChangeListener> , java.io.FileFilter java.io.FileFilter , long long , long long , java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> < java.io.File , FolderSnapshot > java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> ) { this . java.util.concurrent.atomic.AtomicInteger = java.util.concurrent.atomic.AtomicInteger ; this . java.util.List<org.springframework.boot.devtools.filewatch.FileChangeListener> = java.util.List<org.springframework.boot.devtools.filewatch.FileChangeListener> ; this . java.io.FileFilter = java.io.FileFilter ; this . long = long ; this . long = long ; this . java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> = java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { int int = this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; while ( int > NUMBER || int == - NUMBER ) { try { if ( int > NUMBER ) { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; } void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } int = this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.InterruptedException { java.lang.Thread . void ( this . long - this . long ) ; java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> < java.io.File , FolderSnapshot > java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> ; java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> < java.io.File , FolderSnapshot > java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> = this . java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> ; do { java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> = java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> ; java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> = java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> ( ) ; java.lang.Thread . void ( this . long ) ; } while ( boolean ( java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> , java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> ) ); if ( boolean ( this . java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> , java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> ) ) { void ( java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> . values ( ) ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> < java.io.File , FolderSnapshot > java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> , java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> < java.io.File , FolderSnapshot > java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> ) { if ( ! java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> . keySet ( ) . equals ( java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> . keySet ( ) ) ) { return true ; } for ( java.util.Map . java.util.Map.Entry<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> < java.io.File , FolderSnapshot > java.util.Map.Entry<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> : java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> . entrySet ( ) ) { FolderSnapshot org.springframework.boot.devtools.filewatch.FolderSnapshot = java.util.Map.Entry<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> . getValue ( ) ; FolderSnapshot org.springframework.boot.devtools.filewatch.FolderSnapshot = java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> . get ( java.util.Map.Entry<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> . getKey ( ) ) ; if ( ! org.springframework.boot.devtools.filewatch.FolderSnapshot . equals ( org.springframework.boot.devtools.filewatch.FolderSnapshot , this . java.io.FileFilter ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> < java.io.File , FolderSnapshot > java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> ( ) { java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> < java.io.File , FolderSnapshot > java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> = new java.util.LinkedHashMap<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> <> ( ) ; for ( java.io.File java.io.File : this . java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> . keySet ( ) ) { java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> . put ( java.io.File , new FolderSnapshot ( java.io.File ) ) ; } return java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Collection<org.springframework.boot.devtools.filewatch.FolderSnapshot> < FolderSnapshot > java.util.Collection<org.springframework.boot.devtools.filewatch.FolderSnapshot> ) { java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> < java.io.File , FolderSnapshot > java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> = new java.util.LinkedHashMap<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> <> ( ) ; java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> = new java.util.LinkedHashSet<org.springframework.boot.devtools.filewatch.ChangedFiles> <> ( ) ; for ( FolderSnapshot org.springframework.boot.devtools.filewatch.FolderSnapshot : java.util.Collection<org.springframework.boot.devtools.filewatch.FolderSnapshot> ) { FolderSnapshot org.springframework.boot.devtools.filewatch.FolderSnapshot = this . java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> . get ( org.springframework.boot.devtools.filewatch.FolderSnapshot . getFolder ( ) ) ; java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> . put ( org.springframework.boot.devtools.filewatch.FolderSnapshot . getFolder ( ) , org.springframework.boot.devtools.filewatch.FolderSnapshot ) ; ChangedFiles org.springframework.boot.devtools.filewatch.ChangedFiles = org.springframework.boot.devtools.filewatch.FolderSnapshot . getChangedFiles ( org.springframework.boot.devtools.filewatch.FolderSnapshot , this . java.io.FileFilter ) ; if ( ! org.springframework.boot.devtools.filewatch.ChangedFiles . getFiles ( ) . isEmpty ( ) ) { java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> . add ( org.springframework.boot.devtools.filewatch.ChangedFiles ) ; } } if ( ! java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> . isEmpty ( ) ) { void ( java.util.Collections . java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ) ) ; } this . java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> = java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FolderSnapshot> ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ) { for ( FileChangeListener org.springframework.boot.devtools.filewatch.FileChangeListener : this . java.util.List<org.springframework.boot.devtools.filewatch.FileChangeListener> ) { org.springframework.boot.devtools.filewatch.FileChangeListener . onChange ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ) ; } }  <METHOD_END>
