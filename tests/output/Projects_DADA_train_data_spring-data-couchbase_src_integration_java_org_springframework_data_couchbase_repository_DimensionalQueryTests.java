<METHOD_START> @ Before public void void ( ) java.lang.Exception { RepositoryFactorySupport org.springframework.data.couchbase.repository.RepositoryFactorySupport = new CouchbaseRepositoryFactory ( org.springframework.data.couchbase.repository.RepositoryOperationsMapping , org.springframework.data.couchbase.repository.IndexManager ) ; org.springframework.data.couchbase.repository.DimensionalPartyRepository = org.springframework.data.couchbase.repository.RepositoryFactorySupport . getRepository ( DimensionalPartyRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; Polygon org.springframework.data.couchbase.repository.Polygon = new Polygon ( new Point ( NUMBER , - NUMBER ) , new Point ( NUMBER , - NUMBER ) , new Point ( NUMBER , - NUMBER ) , new Point ( NUMBER , - NUMBER ) , new Point ( NUMBER , - NUMBER ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Polygon ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; for ( Party org.springframework.data.couchbase.repository.Party : java.util.List<org.springframework.data.couchbase.repository.Party> ) { assertTrue ( java.util.Set<java.lang.String> . boolean ( org.springframework.data.couchbase.repository.Party . getKey ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationNear ( new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; for ( Party org.springframework.data.couchbase.repository.Party : java.util.List<org.springframework.data.couchbase.repository.Party> ) { assertTrue ( java.util.Set<java.lang.String> . boolean ( org.springframework.data.couchbase.repository.Party . getKey ( ) ) ) ; } java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationNear ( new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; for ( Party org.springframework.data.couchbase.repository.Party : java.util.List<org.springframework.data.couchbase.repository.Party> ) { assertTrue ( java.util.Set<java.lang.String> . boolean ( org.springframework.data.couchbase.repository.Party . getKey ( ) ) ) ; } java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationNear ( new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER ) ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; for ( Party org.springframework.data.couchbase.repository.Party : java.util.List<org.springframework.data.couchbase.repository.Party> ) { assertTrue ( java.util.Set<java.lang.String> . boolean ( org.springframework.data.couchbase.repository.Party . getKey ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; Polygon org.springframework.data.couchbase.repository.Polygon = new Polygon ( new Point ( NUMBER , - NUMBER ) , new Point ( NUMBER , - NUMBER ) , new Point ( NUMBER , - NUMBER ) , new Point ( NUMBER , - NUMBER ) , new Point ( NUMBER , - NUMBER ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithinAndAttendeesGreaterThan ( org.springframework.data.couchbase.repository.Polygon , - NUMBER ) ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Polygon ) ; assertEquals ( java.util.List<org.springframework.data.couchbase.repository.Party> . toString ( ) , NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; assertEquals ( java.util.List<org.springframework.data.couchbase.repository.Party> , java.util.List<org.springframework.data.couchbase.repository.Party> ) ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithinAndAttendeesGreaterThan ( org.springframework.data.couchbase.repository.Polygon , NUMBER ) ; for ( Party org.springframework.data.couchbase.repository.Party : java.util.List<org.springframework.data.couchbase.repository.Party> ) { java.lang.System . java.io.PrintStream . void ( org.springframework.data.couchbase.repository.Party . getKey ( ) + STRING + org.springframework.data.couchbase.repository.Party . getLocation ( ) + STRING + org.springframework.data.couchbase.repository.Party . getAttendees ( ) ) ; } assertEquals ( java.util.List<org.springframework.data.couchbase.repository.Party> . toString ( ) , NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; for ( Party org.springframework.data.couchbase.repository.Party : java.util.List<org.springframework.data.couchbase.repository.Party> ) { assertTrue ( org.springframework.data.couchbase.repository.Party . getAttendees ( ) >= NUMBER ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( org.springframework.data.couchbase.repository.Party . getKey ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Circle org.springframework.data.couchbase.repository.Circle = new Circle ( new Point ( - NUMBER , NUMBER ) , new Distance ( NUMBER ) ) ; Circle org.springframework.data.couchbase.repository.Circle = new Circle ( new Point ( - NUMBER , NUMBER ) , new Distance ( NUMBER ) ) ; Circle org.springframework.data.couchbase.repository.Circle = new Circle ( new Point ( NUMBER , - NUMBER ) , new Distance ( NUMBER ) ) ; Circle org.springframework.data.couchbase.repository.Circle = new Circle ( new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Circle ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Circle ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.couchbase.repository.Party> . get ( NUMBER ) . getKey ( ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Circle ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Circle ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Box org.springframework.data.couchbase.repository.Box = new Box ( new Point ( - NUMBER , - NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; Box org.springframework.data.couchbase.repository.Box = new Box ( new Point ( - NUMBER , - NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; Box org.springframework.data.couchbase.repository.Box = new Box ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Box ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.couchbase.repository.Party> . get ( NUMBER ) . getKey ( ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Box ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Box ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Polygon org.springframework.data.couchbase.repository.Polygon = new Polygon ( new Point ( - NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( - NUMBER , - NUMBER ) ) ; Polygon org.springframework.data.couchbase.repository.Polygon = new Polygon ( new Point ( - NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( - NUMBER , - NUMBER ) ) ; Polygon org.springframework.data.couchbase.repository.Polygon = new Polygon ( new Point ( - NUMBER , - NUMBER ) , new Point ( - NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , - NUMBER ) ) ; Polygon org.springframework.data.couchbase.repository.Polygon = new Polygon ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Polygon ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Polygon ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Polygon ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Polygon ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.couchbase.repository.Point = new Point ( - NUMBER , - NUMBER ) ; Point org.springframework.data.couchbase.repository.Point = new Point ( NUMBER , NUMBER ) ; Point org.springframework.data.couchbase.repository.Point = new Point ( - NUMBER , - NUMBER ) ; Point org.springframework.data.couchbase.repository.Point = new Point ( NUMBER , NUMBER ) ; Point org.springframework.data.couchbase.repository.Point = new Point ( NUMBER , NUMBER ) ; Point org.springframework.data.couchbase.repository.Point = new Point ( NUMBER , NUMBER ) ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Point , org.springframework.data.couchbase.repository.Point ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.couchbase.repository.Party> . get ( NUMBER ) . getKey ( ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Point , org.springframework.data.couchbase.repository.Point ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Point , org.springframework.data.couchbase.repository.Point ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; Polygon org.springframework.data.couchbase.repository.Polygon = new Polygon ( new Point ( NUMBER , - NUMBER ) , new Point ( NUMBER , - NUMBER ) , new Point ( NUMBER , - NUMBER ) , new Point ( NUMBER , - NUMBER ) , new Point ( NUMBER , - NUMBER ) ) ; Point [] org.springframework.data.couchbase.repository.Point[] = org.springframework.data.couchbase.repository.Polygon . getPoints ( ) . toArray ( new Point [ NUMBER ] ) ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Polygon ) ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Point[] ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; assertEquals ( java.util.List<org.springframework.data.couchbase.repository.Party> , java.util.List<org.springframework.data.couchbase.repository.Party> ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; for ( Party org.springframework.data.couchbase.repository.Party : java.util.List<org.springframework.data.couchbase.repository.Party> ) { java.util.Set<java.lang.String> . boolean ( org.springframework.data.couchbase.repository.Party . getKey ( ) ) ; } assertEquals ( java.util.Set<java.lang.String> , java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( new Point ( NUMBER , NUMBER ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } try { org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( new Point ( NUMBER , NUMBER ) , null ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( JsonArray . from ( NUMBER , NUMBER ) ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = CouchbaseQueryExecutionException .class ) public void void ( ) { org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( JsonArray . from ( STRING , - NUMBER ) , JsonArray . from ( NUMBER , NUMBER ) ) ; fail ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( JsonArray . from ( NUMBER , - NUMBER , NUMBER ) , JsonArray . from ( NUMBER , NUMBER , NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationIsWithin ( new Point ( NUMBER , NUMBER ) , null ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } assertEquals ( NUMBER , org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationIsWithin ( new Point ( - NUMBER , - NUMBER ) , new Point ( NUMBER , NUMBER ) ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.couchbase.repository.Point = new Point ( NUMBER , - NUMBER ) ; Point org.springframework.data.couchbase.repository.Point = new Point ( NUMBER , - NUMBER ) ; Box org.springframework.data.couchbase.repository.Box = new Box ( org.springframework.data.couchbase.repository.Point , org.springframework.data.couchbase.repository.Point ) ; Box org.springframework.data.couchbase.repository.Box = new Box ( org.springframework.data.couchbase.repository.Point , org.springframework.data.couchbase.repository.Point ) ; final java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Box ) ; final java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.DimensionalPartyRepository . findByLocationWithin ( org.springframework.data.couchbase.repository.Box ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; assertNotEquals ( java.util.List<org.springframework.data.couchbase.repository.Party> , java.util.List<org.springframework.data.couchbase.repository.Party> ) ; }  <METHOD_END>
