<METHOD_START> @ java.lang.Override public org.springframework.boot.logging.logback.FilterReply org.springframework.boot.logging.logback.FilterReply ( Marker org.springframework.boot.logging.logback.Marker , ch . ch . ch . ch . ch ch.qos.logback.classic.Logger , Level org.springframework.boot.logging.logback.Level , java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] , java.lang.Throwable java.lang.Throwable ) { return FilterReply . DENY ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.ClassLoader ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING , STRING , STRING , STRING } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { LoggerContext org.springframework.boot.logging.logback.LoggerContext = org.springframework.boot.logging.logback.LoggerContext ( ) ; if ( boolean ( org.springframework.boot.logging.logback.LoggerContext ) ) { return; } super. beforeInitialize ( ) ; org.springframework.boot.logging.logback.LoggerContext . getTurboFilterList ( ) . add ( org.springframework.boot.logging.logback.TurboFilter ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( LoggingInitializationContext org.springframework.boot.logging.logback.LoggingInitializationContext , java.lang.String java.lang.String , LogFile org.springframework.boot.logging.logback.LogFile ) { LoggerContext org.springframework.boot.logging.logback.LoggerContext = org.springframework.boot.logging.logback.LoggerContext ( ) ; if ( boolean ( org.springframework.boot.logging.logback.LoggerContext ) ) { return; } org.springframework.boot.logging.logback.LoggerContext . getTurboFilterList ( ) . remove ( org.springframework.boot.logging.logback.TurboFilter ) ; super. initialize ( org.springframework.boot.logging.logback.LoggingInitializationContext , java.lang.String , org.springframework.boot.logging.logback.LogFile ) ; void ( org.springframework.boot.logging.logback.LoggerContext ) ; if ( StringUtils . hasText ( java.lang.System . java.lang.String ( java.lang.String ) ) ) { ch.qos.logback.classic.Logger ( org.springframework.boot.logging.logback.LogbackLoggingSystem .class . java.lang.String ( ) ) . warn ( STRING + java.lang.String + STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( LoggingInitializationContext org.springframework.boot.logging.logback.LoggingInitializationContext , LogFile org.springframework.boot.logging.logback.LogFile ) { LoggerContext org.springframework.boot.logging.logback.LoggerContext = org.springframework.boot.logging.logback.LoggerContext ( ) ; void ( org.springframework.boot.logging.logback.LoggerContext ) ; LogbackConfigurator org.springframework.boot.logging.logback.LogbackConfigurator = new LogbackConfigurator ( org.springframework.boot.logging.logback.LoggerContext ) ; org.springframework.boot.logging.logback.LoggerContext . putProperty ( STRING , org.springframework.boot.logging.logback.LoggingInitializationContext . getEnvironment ( ) . resolvePlaceholders ( STRING ) ) ; new DefaultLogbackConfiguration ( org.springframework.boot.logging.logback.LoggingInitializationContext , org.springframework.boot.logging.logback.LogFile ) . apply ( org.springframework.boot.logging.logback.LogbackConfigurator ) ; org.springframework.boot.logging.logback.LoggerContext . setPackagingDataEnabled ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( LoggingInitializationContext org.springframework.boot.logging.logback.LoggingInitializationContext , java.lang.String java.lang.String , LogFile org.springframework.boot.logging.logback.LogFile ) { super. loadConfiguration ( org.springframework.boot.logging.logback.LoggingInitializationContext , java.lang.String , org.springframework.boot.logging.logback.LogFile ) ; LoggerContext org.springframework.boot.logging.logback.LoggerContext = org.springframework.boot.logging.logback.LoggerContext ( ) ; void ( org.springframework.boot.logging.logback.LoggerContext ) ; try { void ( org.springframework.boot.logging.logback.LoggingInitializationContext , org.springframework.boot.logging.logback.LoggerContext , ResourceUtils . getURL ( java.lang.String ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String , java.lang.Exception ) ; } java.util.List<org.springframework.boot.logging.logback.Status> < Status > java.util.List<org.springframework.boot.logging.logback.Status> = org.springframework.boot.logging.logback.LoggerContext . getStatusManager ( ) . getCopyOfStatusList ( ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( Status org.springframework.boot.logging.logback.Status : java.util.List<org.springframework.boot.logging.logback.Status> ) { if ( org.springframework.boot.logging.logback.Status . getLevel ( ) == Status . ERROR ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.StringBuilder . int ( ) > NUMBER ? java.lang.String . java.lang.String ( STRING ) : STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.boot.logging.logback.Status . toString ( ) ) ; } } if ( java.lang.StringBuilder . int ( ) > NUMBER ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.StringBuilder ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( LoggingInitializationContext org.springframework.boot.logging.logback.LoggingInitializationContext , LoggerContext org.springframework.boot.logging.logback.LoggerContext , java.net.URL java.net.URL ) throws org.springframework.boot.logging.logback.JoranException { if ( java.net.URL . java.lang.String ( ) . boolean ( STRING ) ) { JoranConfigurator org.springframework.boot.logging.logback.JoranConfigurator = new SpringBootJoranConfigurator ( org.springframework.boot.logging.logback.LoggingInitializationContext ) ; org.springframework.boot.logging.logback.JoranConfigurator . setContext ( org.springframework.boot.logging.logback.LoggerContext ) ; org.springframework.boot.logging.logback.JoranConfigurator . doConfigure ( java.net.URL ) ; } else { new ContextInitializer ( org.springframework.boot.logging.logback.LoggerContext ) . configureByResource ( java.net.URL ) ; } }  <METHOD_END>
<METHOD_START> private void void ( LoggerContext org.springframework.boot.logging.logback.LoggerContext ) { org.springframework.boot.logging.logback.LoggerContext . stop ( ) ; org.springframework.boot.logging.logback.LoggerContext . reset ( ) ; if ( isBridgeHandlerAvailable ( ) ) { void ( org.springframework.boot.logging.logback.LoggerContext ) ; } }  <METHOD_END>
<METHOD_START> private void void ( LoggerContext org.springframework.boot.logging.logback.LoggerContext ) { LevelChangePropagator org.springframework.boot.logging.logback.LevelChangePropagator = new LevelChangePropagator ( ) ; org.springframework.boot.logging.logback.LevelChangePropagator . setResetJUL ( true ) ; org.springframework.boot.logging.logback.LevelChangePropagator . setContext ( org.springframework.boot.logging.logback.LoggerContext ) ; org.springframework.boot.logging.logback.LoggerContext . addListener ( org.springframework.boot.logging.logback.LevelChangePropagator ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { LoggerContext org.springframework.boot.logging.logback.LoggerContext = org.springframework.boot.logging.logback.LoggerContext ( ) ; void ( org.springframework.boot.logging.logback.LoggerContext ) ; super. cleanUp ( ) ; org.springframework.boot.logging.logback.LoggerContext . getStatusManager ( ) . clear ( ) ; org.springframework.boot.logging.logback.LoggerContext . getTurboFilterList ( ) . remove ( org.springframework.boot.logging.logback.TurboFilter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( LoggingInitializationContext org.springframework.boot.logging.logback.LoggingInitializationContext ) { org.springframework.boot.logging.logback.LoggerContext ( ) . reset ( ) ; org.springframework.boot.logging.logback.LoggerContext ( ) . getStatusManager ( ) . clear ( ) ; void ( org.springframework.boot.logging.logback.LoggingInitializationContext , getSelfInitializationConfig ( ) , null ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { java.lang.System . java.lang.String ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.boot.logging.logback.LoggerConfiguration> < LoggerConfiguration > java.util.List<org.springframework.boot.logging.logback.LoggerConfiguration> ( ) { java.util.List<org.springframework.boot.logging.logback.LoggerConfiguration> < LoggerConfiguration > java.util.List<org.springframework.boot.logging.logback.LoggerConfiguration> = new java.util.ArrayList<org.springframework.boot.logging.logback.LoggerConfiguration> <> ( ) ; for ( ch . ch . ch . ch . ch ch.qos.logback.classic.Logger : org.springframework.boot.logging.logback.LoggerContext ( ) . getLoggerList ( ) ) { java.util.List<org.springframework.boot.logging.logback.LoggerConfiguration> . add ( org.springframework.boot.logging.logback.LoggerConfiguration ( ch.qos.logback.classic.Logger ) ) ; } java.util.Collections . void ( java.util.List<org.springframework.boot.logging.logback.LoggerConfiguration> , CONFIGURATION_COMPARATOR ) ; return java.util.List<org.springframework.boot.logging.logback.LoggerConfiguration> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.logging.logback.LoggerConfiguration org.springframework.boot.logging.logback.LoggerConfiguration ( java.lang.String java.lang.String ) { return org.springframework.boot.logging.logback.LoggerConfiguration ( ch.qos.logback.classic.Logger ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.logging.logback.LoggerConfiguration org.springframework.boot.logging.logback.LoggerConfiguration ( ch . ch . ch . ch . ch ch.qos.logback.classic.Logger ) { if ( ch.qos.logback.classic.Logger == null ) { return null ; } LogLevel org.springframework.boot.logging.logback.LogLevel = org.springframework.boot.logging.logback.LogLevels<org.springframework.boot.logging.logback.Level> . convertNativeToSystem ( ch.qos.logback.classic.Logger . getLevel ( ) ) ; LogLevel org.springframework.boot.logging.logback.LogLevel = org.springframework.boot.logging.logback.LogLevels<org.springframework.boot.logging.logback.Level> . convertNativeToSystem ( ch.qos.logback.classic.Logger . getEffectiveLevel ( ) ) ; java.lang.String java.lang.String = ch.qos.logback.classic.Logger . getName ( ) ; if ( ! StringUtils . hasLength ( java.lang.String ) || Logger . ROOT_LOGGER_NAME . equals ( java.lang.String ) ) { java.lang.String = ROOT_LOGGER_NAME ; } return new LoggerConfiguration ( java.lang.String , org.springframework.boot.logging.logback.LogLevel , org.springframework.boot.logging.logback.LogLevel ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.boot.logging.logback.LogLevel> < LogLevel > java.util.Set<org.springframework.boot.logging.logback.LogLevel> ( ) { return org.springframework.boot.logging.logback.LogLevels<org.springframework.boot.logging.logback.Level> . getSupported ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , LogLevel org.springframework.boot.logging.logback.LogLevel ) { ch . ch . ch . ch . ch ch.qos.logback.classic.Logger = ch.qos.logback.classic.Logger ( java.lang.String ) ; if ( ch.qos.logback.classic.Logger != null ) { ch.qos.logback.classic.Logger . setLevel ( org.springframework.boot.logging.logback.LogLevels<org.springframework.boot.logging.logback.Level> . convertSystemToNative ( org.springframework.boot.logging.logback.LogLevel ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Runnable java.lang.Runnable ( ) { return new org.springframework.boot.logging.logback.LogbackLoggingSystem.ShutdownHandler ( ) ; }  <METHOD_END>
<METHOD_START> private ch . ch . ch . ch . ch.qos.logback.classic.Logger ch.qos.logback.classic.Logger ( java.lang.String java.lang.String ) { LoggerContext org.springframework.boot.logging.logback.LoggerContext = org.springframework.boot.logging.logback.LoggerContext ( ) ; if ( StringUtils . isEmpty ( java.lang.String ) || ROOT_LOGGER_NAME . equals ( java.lang.String ) ) { java.lang.String = Logger . ROOT_LOGGER_NAME ; } return org.springframework.boot.logging.logback.LoggerContext . getLogger ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.logging.logback.LoggerContext org.springframework.boot.logging.logback.LoggerContext ( ) { ILoggerFactory org.springframework.boot.logging.logback.ILoggerFactory = StaticLoggerBinder . getSingleton ( ) . getLoggerFactory ( ) ; Assert . isInstanceOf ( LoggerContext .class , org.springframework.boot.logging.logback.ILoggerFactory , java.lang.String . java.lang.String ( STRING + STRING + STRING + STRING + STRING , org.springframework.boot.logging.logback.ILoggerFactory . getClass ( ) , java.lang.Object ( org.springframework.boot.logging.logback.ILoggerFactory ) ) ) ; return ( LoggerContext ) org.springframework.boot.logging.logback.ILoggerFactory ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( ILoggerFactory org.springframework.boot.logging.logback.ILoggerFactory ) { try { java.security.ProtectionDomain java.security.ProtectionDomain = org.springframework.boot.logging.logback.ILoggerFactory . getClass ( ) . getProtectionDomain ( ) ; java.security.CodeSource java.security.CodeSource = java.security.ProtectionDomain . java.security.CodeSource ( ) ; if ( java.security.CodeSource != null ) { return java.security.CodeSource . java.net.URL ( ) ; } } catch ( java.lang.SecurityException java.lang.SecurityException ) { } return STRING ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( LoggerContext org.springframework.boot.logging.logback.LoggerContext ) { return org.springframework.boot.logging.logback.LoggerContext . getObject ( LoggingSystem .class . java.lang.String ( ) ) != null ; }  <METHOD_END>
<METHOD_START> private void void ( LoggerContext org.springframework.boot.logging.logback.LoggerContext ) { org.springframework.boot.logging.logback.LoggerContext . putObject ( LoggingSystem .class . java.lang.String ( ) , new java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( LoggerContext org.springframework.boot.logging.logback.LoggerContext ) { org.springframework.boot.logging.logback.LoggerContext . removeObject ( LoggingSystem .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.boot.logging.logback.LoggerContext ( ) . stop ( ) ; }  <METHOD_END>
