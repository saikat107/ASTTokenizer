<METHOD_START> public void ( ListableBeanFactory org.springframework.statemachine.processor.ListableBeanFactory ) { this . org.springframework.statemachine.processor.BeanFactory = org.springframework.statemachine.processor.ListableBeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.reflect.Method java.lang.reflect.Method , T T , java.lang.annotation.Annotation java.lang.annotation.Annotation ) { StateMachineHandler < T , java.lang.Object , java.lang.Object > org.springframework.statemachine.processor.StateMachineHandler<T,java.lang.Object,java.lang.Object> = new StateMachineHandler < T , java.lang.Object , java.lang.Object > ( java.lang.Class<> , java.lang.Object , java.lang.reflect.Method , T , java.lang.annotation.Annotation ) ; java.lang.Integer java.lang.Integer = java.lang.Integer ( java.lang.Object , java.lang.reflect.Method ) ; if ( java.lang.Integer != null ) { org.springframework.statemachine.processor.StateMachineHandler<T,java.lang.Object,java.lang.Object> . setOrder ( java.lang.Integer ) ; } return org.springframework.statemachine.processor.StateMachineHandler<T,java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private static java.lang.Integer java.lang.Integer ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.Integer java.lang.Integer = OrderUtils . getOrder ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; Order org.springframework.statemachine.processor.Order = AnnotationUtils . findAnnotation ( java.lang.reflect.Method , Order .class ) ; if ( org.springframework.statemachine.processor.Order != null ) { java.lang.Integer = org.springframework.statemachine.processor.Order . value ( ) ; } return java.lang.Integer ; }  <METHOD_END>
