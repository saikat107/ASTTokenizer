<METHOD_START> org.springframework.jdbc.datasource.embedded.Resource org.springframework.jdbc.datasource.embedded.Resource ( java.lang.String java.lang.String ) { return org.springframework.jdbc.datasource.embedded.ClassRelativeResourceLoader . getResource ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EmbeddedDatabaseFactoryBean org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean = new EmbeddedDatabaseFactoryBean ( ) ; ResourceDatabasePopulator org.springframework.jdbc.datasource.embedded.ResourceDatabasePopulator = new ResourceDatabasePopulator ( org.springframework.jdbc.datasource.embedded.Resource ( STRING ) , org.springframework.jdbc.datasource.embedded.Resource ( STRING ) ) ; org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean . setDatabasePopulator ( org.springframework.jdbc.datasource.embedded.ResourceDatabasePopulator ) ; org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean . afterPropertiesSet ( ) ; javax.sql.DataSource javax.sql.DataSource = org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean . getObject ( ) ; JdbcTemplate org.springframework.jdbc.datasource.embedded.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource ) ; assertEquals ( STRING , org.springframework.jdbc.datasource.embedded.JdbcTemplate . queryForObject ( STRING , java.lang.String .class ) ) ; org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean . destroy ( ) ; }  <METHOD_END>
