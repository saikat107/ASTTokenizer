<METHOD_START> @ Test ( expected = XmlBeanDefinitionStoreException .class ) public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING ) ; } catch ( XmlBeanDefinitionStoreException org.springframework.data.gemfire.config.xml.XmlBeanDefinitionStoreException ) { assertTrue ( org.springframework.data.gemfire.config.xml.XmlBeanDefinitionStoreException . getCause ( ) instanceof org.xml.sax.SAXParseException ) ; assertTrue ( org.springframework.data.gemfire.config.xml.XmlBeanDefinitionStoreException . getCause ( ) . getMessage ( ) . contains ( STRING ) ) ; throw org.springframework.data.gemfire.config.xml.XmlBeanDefinitionStoreException ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING ) ; } catch ( BeanCreationException org.springframework.data.gemfire.config.xml.BeanCreationException ) { assertTrue ( org.springframework.data.gemfire.config.xml.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.BeanCreationException . getCause ( ) instanceof java.lang.IllegalArgumentException ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.BeanCreationException . getCause ( ) . getMessage ( ) ) ; throw org.springframework.data.gemfire.config.xml.BeanCreationException ; } }  <METHOD_END>
