<METHOD_START> void ( ByteBuf org.springframework.core.io.buffer.ByteBuf , NettyDataBufferFactory org.springframework.core.io.buffer.NettyDataBufferFactory ) { Assert . notNull ( org.springframework.core.io.buffer.ByteBuf , STRING ) ; Assert . notNull ( org.springframework.core.io.buffer.NettyDataBufferFactory , STRING ) ; this . org.springframework.core.io.buffer.ByteBuf = org.springframework.core.io.buffer.ByteBuf ; this . org.springframework.core.io.buffer.NettyDataBufferFactory = org.springframework.core.io.buffer.NettyDataBufferFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.io.buffer.ByteBuf org.springframework.core.io.buffer.ByteBuf ( ) { return this . org.springframework.core.io.buffer.ByteBuf ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.NettyDataBufferFactory org.springframework.core.io.buffer.NettyDataBufferFactory ( ) { return this . org.springframework.core.io.buffer.NettyDataBufferFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.util.function.IntPredicate java.util.function.IntPredicate , int int ) { Assert . notNull ( java.util.function.IntPredicate , STRING ) ; if ( int < NUMBER ) { int = NUMBER ; } else if ( int >= this . org.springframework.core.io.buffer.ByteBuf . writerIndex ( ) ) { return - NUMBER ; } int int = this . org.springframework.core.io.buffer.ByteBuf . writerIndex ( ) - int ; return this . org.springframework.core.io.buffer.ByteBuf . forEachByte ( int , int , java.util.function.IntPredicate . java.util.function.IntPredicate ( ) :: boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.util.function.IntPredicate java.util.function.IntPredicate , int int ) { Assert . notNull ( java.util.function.IntPredicate , STRING ) ; if ( int < NUMBER ) { return - NUMBER ; } int = java.lang.Math . int ( int , this . org.springframework.core.io.buffer.ByteBuf . writerIndex ( ) - NUMBER ) ; return this . org.springframework.core.io.buffer.ByteBuf . forEachByteDesc ( NUMBER , int + NUMBER , java.util.function.IntPredicate . java.util.function.IntPredicate ( ) :: boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.core.io.buffer.ByteBuf . readableBytes ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte byte ( ) { return this . org.springframework.core.io.buffer.ByteBuf . readByte ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.NettyDataBuffer org.springframework.core.io.buffer.NettyDataBuffer ( byte [] byte[] ) { this . org.springframework.core.io.buffer.ByteBuf . readBytes ( byte[] ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.NettyDataBuffer org.springframework.core.io.buffer.NettyDataBuffer ( byte [] byte[] , int int , int int ) { this . org.springframework.core.io.buffer.ByteBuf . readBytes ( byte[] , int , int ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.NettyDataBuffer org.springframework.core.io.buffer.NettyDataBuffer ( byte byte ) { this . org.springframework.core.io.buffer.ByteBuf . writeByte ( byte ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.NettyDataBuffer org.springframework.core.io.buffer.NettyDataBuffer ( byte [] byte[] ) { this . org.springframework.core.io.buffer.ByteBuf . writeBytes ( byte[] ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.NettyDataBuffer org.springframework.core.io.buffer.NettyDataBuffer ( byte [] byte[] , int int , int int ) { this . org.springframework.core.io.buffer.ByteBuf . writeBytes ( byte[] , int , int ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.NettyDataBuffer org.springframework.core.io.buffer.NettyDataBuffer ( DataBuffer ... org.springframework.core.io.buffer.DataBuffer[] ) { if ( ! ObjectUtils . isEmpty ( org.springframework.core.io.buffer.DataBuffer[] ) ) { if ( org.springframework.core.io.buffer.DataBuffer[] [ NUMBER ] instanceof org.springframework.core.io.buffer.NettyDataBuffer ) { ByteBuf [] org.springframework.core.io.buffer.ByteBuf[] = java.util.Arrays . java.util.stream.IntStream ( org.springframework.core.io.buffer.DataBuffer[] ) . map ( b -> ( ( NettyDataBuffer ) b ) . getNativeBuffer ( ) ) . toArray ( ByteBuf [] ::new ) ; org.springframework.core.io.buffer.NettyDataBuffer ( org.springframework.core.io.buffer.ByteBuf[] ) ; } else { java.nio.ByteBuffer [] java.nio.ByteBuffer[] = java.util.Arrays . java.util.stream.IntStream ( org.springframework.core.io.buffer.DataBuffer[] ) . map ( DataBuffer :: asByteBuffer ) . toArray ( java.nio.ByteBuffer [] ::new ) ; org.springframework.core.io.buffer.NettyDataBuffer ( java.nio.ByteBuffer[] ) ; } } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.NettyDataBuffer org.springframework.core.io.buffer.NettyDataBuffer ( java.nio.ByteBuffer ... java.nio.ByteBuffer[] ) { Assert . notNull ( java.nio.ByteBuffer[] , STRING ) ; ByteBuf [] org.springframework.core.io.buffer.ByteBuf[] = java.util.Arrays . java.util.stream.Stream<java.nio.ByteBuffer> ( java.nio.ByteBuffer[] ) . java.util.stream.Stream ( Unpooled :: wrappedBuffer ) . toArray ( ByteBuf [] ::new ) ; return org.springframework.core.io.buffer.NettyDataBuffer ( org.springframework.core.io.buffer.ByteBuf[] ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.io.buffer.NettyDataBuffer org.springframework.core.io.buffer.NettyDataBuffer ( ByteBuf ... org.springframework.core.io.buffer.ByteBuf[] ) { Assert . notNull ( org.springframework.core.io.buffer.ByteBuf[] , STRING ) ; CompositeByteBuf org.springframework.core.io.buffer.CompositeByteBuf = new CompositeByteBuf ( this . org.springframework.core.io.buffer.ByteBuf . alloc ( ) , this . org.springframework.core.io.buffer.ByteBuf . isDirect ( ) , byteBufs . length + NUMBER ) ; org.springframework.core.io.buffer.CompositeByteBuf . addComponent ( this . org.springframework.core.io.buffer.ByteBuf ) ; org.springframework.core.io.buffer.CompositeByteBuf . addComponents ( org.springframework.core.io.buffer.ByteBuf[] ) ; int int = this . org.springframework.core.io.buffer.ByteBuf . readableBytes ( ) + java.util.Arrays . java.util.stream.IntStream ( org.springframework.core.io.buffer.ByteBuf[] ) . mapToInt ( ByteBuf :: readableBytes ) . sum ( ) ; org.springframework.core.io.buffer.CompositeByteBuf . writerIndex ( int ) ; this . org.springframework.core.io.buffer.ByteBuf = org.springframework.core.io.buffer.CompositeByteBuf ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.DataBuffer org.springframework.core.io.buffer.DataBuffer ( int int , int int ) { ByteBuf org.springframework.core.io.buffer.ByteBuf = this . org.springframework.core.io.buffer.ByteBuf . slice ( int , int ) ; return new org.springframework.core.io.buffer.NettyDataBuffer ( org.springframework.core.io.buffer.ByteBuf , this . org.springframework.core.io.buffer.NettyDataBufferFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.nio.ByteBuffer java.nio.ByteBuffer ( ) { return this . org.springframework.core.io.buffer.ByteBuf . nioBuffer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) { return new ByteBufInputStream ( this . org.springframework.core.io.buffer.ByteBuf ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) { return new ByteBufOutputStream ( this . org.springframework.core.io.buffer.ByteBuf ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.PooledDataBuffer org.springframework.core.io.buffer.PooledDataBuffer ( ) { return new org.springframework.core.io.buffer.NettyDataBuffer ( this . org.springframework.core.io.buffer.ByteBuf . retain ( ) , org.springframework.core.io.buffer.NettyDataBufferFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.core.io.buffer.ByteBuf . release ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.core.io.buffer.NettyDataBuffer ) ) { return false ; } org.springframework.core.io.buffer.NettyDataBuffer org.springframework.core.io.buffer.NettyDataBuffer = ( org.springframework.core.io.buffer.NettyDataBuffer ) java.lang.Object ; return this . org.springframework.core.io.buffer.ByteBuf . equals ( org.springframework.core.io.buffer.NettyDataBuffer . org.springframework.core.io.buffer.ByteBuf ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.core.io.buffer.ByteBuf . hashCode ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.core.io.buffer.ByteBuf . toString ( ) ; }  <METHOD_END>
