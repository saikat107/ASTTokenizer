<METHOD_START> @ java.lang.Override public boolean boolean ( java.io.File java.io.File ) { return java.io.File . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.SecurityException , java.io.IOException { this . java.util.Locale = java.util.Locale . java.util.Locale ( ) ; java.util.Locale . void ( java.util.Locale . java.util.Locale ) ; this . java.util.logging.Logger = java.util.logging.Logger . java.util.logging.Logger ( java.lang.Class<? extends org.springframework.boot.logging.java.JavaLoggingSystemTests> ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { java.util.Locale . void ( this . java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . java.util.logging.Logger . void ( java.util.logging.Level . java.util.logging.Level ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.java.JavaLoggingSystem . beforeInitialize ( ) ; this . java.util.logging.Logger . void ( STRING ) ; this . org.springframework.boot.logging.java.JavaLoggingSystem . initialize ( null , null , null ) ; this . java.util.logging.Logger . void ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.java.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) . doesNotContain ( STRING ) ; assertThat ( new java.io.File ( tmpDir ( ) + STRING ) . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( tmpDir ( ) ) ; java.io.File [] java.io.File[] = java.io.File . java.io.File[] ( java.io.FileFilter ) ; for ( java.io.File java.io.File : java.io.File[] ) { java.io.File . boolean ( ) ; } this . org.springframework.boot.logging.java.JavaLoggingSystem . beforeInitialize ( ) ; this . java.util.logging.Logger . void ( STRING ) ; this . org.springframework.boot.logging.java.JavaLoggingSystem . initialize ( null , null , getLogFile ( null , tmpDir ( ) ) ) ; this . java.util.logging.Logger . void ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.java.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) . doesNotContain ( STRING ) ; assertThat ( java.io.File . java.io.File[] ( java.io.FileFilter ) . int ) . isGreaterThan ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.java.JavaLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.java.JavaLoggingSystem . initialize ( null , null , null ) ; this . java.util.logging.Logger . void ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.java.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; this . org.springframework.boot.logging.java.JavaLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.java.JavaLoggingSystem . initialize ( null , STRING + ClassUtils . addResourcePathToPackagePath ( java.lang.Class<? extends org.springframework.boot.logging.java.JavaLoggingSystemTests> ( ) , STRING ) , null ) ; this . java.util.logging.Logger . void ( STRING ) ; this . java.util.logging.Logger . void ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.java.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.java.JavaLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.java.JavaLoggingSystem . initialize ( null , STRING , null ) ; this . java.util.logging.Logger . void ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.java.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.java.JavaLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.java.JavaLoggingSystem . initialize ( null , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.logging.java.JavaLoggingSystem . getSupportedLogLevels ( ) ) . isEqualTo ( java.util.EnumSet . java.util.EnumSet ( LogLevel . TRACE , LogLevel . DEBUG , LogLevel . INFO , LogLevel . WARN , LogLevel . ERROR , LogLevel . OFF ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.java.JavaLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.java.JavaLoggingSystem . initialize ( null , null , null ) ; this . java.util.logging.Logger . void ( STRING ) ; this . org.springframework.boot.logging.java.JavaLoggingSystem . setLogLevel ( STRING , LogLevel . DEBUG ) ; this . java.util.logging.Logger . void ( STRING ) ; assertThat ( StringUtils . countOccurrencesOf ( this . org.springframework.boot.logging.java.InternalOutputCapture . toString ( ) , STRING ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.java.JavaLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.java.JavaLoggingSystem . initialize ( null , null , null ) ; this . org.springframework.boot.logging.java.JavaLoggingSystem . setLogLevel ( java.lang.Class<? extends org.springframework.boot.logging.java.JavaLoggingSystemTests> ( ) . java.lang.String ( ) , LogLevel . DEBUG ) ; java.util.List<org.springframework.boot.logging.java.LoggerConfiguration> < LoggerConfiguration > java.util.List<org.springframework.boot.logging.java.LoggerConfiguration> = this . org.springframework.boot.logging.java.JavaLoggingSystem . getLoggerConfigurations ( ) ; assertThat ( java.util.List<org.springframework.boot.logging.java.LoggerConfiguration> ) . isNotEmpty ( ) ; assertThat ( java.util.List<org.springframework.boot.logging.java.LoggerConfiguration> . get ( NUMBER ) . getName ( ) ) . isEqualTo ( LoggingSystem . ROOT_LOGGER_NAME ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.java.JavaLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.java.JavaLoggingSystem . initialize ( null , null , null ) ; this . org.springframework.boot.logging.java.JavaLoggingSystem . setLogLevel ( java.lang.Class<? extends org.springframework.boot.logging.java.JavaLoggingSystemTests> ( ) . java.lang.String ( ) , LogLevel . DEBUG ) ; LoggerConfiguration org.springframework.boot.logging.java.LoggerConfiguration = this . org.springframework.boot.logging.java.JavaLoggingSystem . getLoggerConfiguration ( java.lang.Class<? extends org.springframework.boot.logging.java.JavaLoggingSystemTests> ( ) . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.logging.java.LoggerConfiguration ) . isEqualTo ( new LoggerConfiguration ( java.lang.Class<? extends org.springframework.boot.logging.java.JavaLoggingSystemTests> ( ) . java.lang.String ( ) , LogLevel . DEBUG , LogLevel . DEBUG ) ) ; }  <METHOD_END>
