<METHOD_START> @ Before public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . refresh ( ) ; ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry = new ReactiveAdapterRegistry ( ) ; this . org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver = new RequestHeaderMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . getBeanFactory ( ) , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ; ConfigurableWebBindingInitializer org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer = new ConfigurableWebBindingInitializer ( ) ; org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer . setConversionService ( new DefaultFormattingConversionService ( ) ) ; this . org.springframework.web.reactive.result.method.annotation.BindingContext = new BindingContext ( org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<? extends org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolverTests> ( ) , STRING , ( java.lang.Class<?> < ? > [] ) null ) ; this . org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; assertTrue ( STRING , org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; assertFalse ( STRING , org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; try { this . org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( STRING + java.lang.IllegalStateException . java.lang.String ( ) , java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , java.lang.String ) . toExchange ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING , STRING ) . toExchange ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ; assertTrue ( java.lang.Object instanceof java.lang.String [] ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , ( java.lang.String [] ) java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; try { Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( STRING , java.lang.Object ) ; } finally { java.lang.System . java.lang.String ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , java.lang.String ) . toExchange ( ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; try { Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( java.lang.String , java.lang.Object ) ; } finally { java.lang.System . java.lang.String ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , java.lang.String ) . toExchange ( ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; try { Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( java.lang.String , java.lang.Object ) ; } finally { java.lang.System . java.lang.String ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) ; StepVerifier . create ( org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> ) . expectNextCount ( NUMBER ) . expectError ( ServerWebInputException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , java.lang.String ) . toExchange ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ; assertTrue ( java.lang.Object instanceof java.util.Date ) ; assertEquals ( new java.util.Date ( java.lang.String ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , java.lang.String ) . toExchange ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ; assertTrue ( java.lang.Object instanceof java.time.Instant ) ; assertEquals ( java.time.Instant . java.time.Instant ( java.time.format.DateTimeFormatter . java.time.format.DateTimeFormatter . java.time.temporal.TemporalAccessor ( java.lang.String ) ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void void ( @ RequestHeader ( name = STRING , defaultValue = STRING ) java.lang.String java.lang.String , @ RequestHeader ( STRING ) java.lang.String [] java.lang.String[] , @ RequestHeader ( name = STRING , defaultValue = STRING ) java.lang.String java.lang.String , @ RequestHeader ( STRING ) java.lang.String java.lang.String , @ RequestHeader ( STRING ) java.lang.String java.lang.String , @ RequestHeader ( STRING ) java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , @ RequestHeader ( STRING ) java.util.Date java.util.Date , @ RequestHeader ( STRING ) java.time.Instant java.time.Instant , @ RequestHeader Mono < java.lang.String > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.String> ) {	}  <METHOD_END>
