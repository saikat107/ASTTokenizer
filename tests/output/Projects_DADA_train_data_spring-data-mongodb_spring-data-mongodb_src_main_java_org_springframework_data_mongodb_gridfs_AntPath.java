<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { java.lang.String java.lang.String = java.lang.String ( this . java.lang.String ) ; return ( java.lang.String . int ( '*' ) != - NUMBER || java.lang.String . int ( '?' ) != - NUMBER ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { int int = java.lang.String . int ( java.lang.String ) ; return ( int > - NUMBER ? java.lang.String . java.lang.String ( int + NUMBER ) : java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; int int = NUMBER ; while ( java.util.regex.Matcher . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.String , int , java.util.regex.Matcher . int ( ) ) ) ; java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( ) ; if ( STRING . boolean ( java.lang.String ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( '.' ) ; } else if ( STRING . boolean ( java.lang.String ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else if ( STRING . boolean ( java.lang.String ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } int = java.util.regex.Matcher . int ( ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.String , int , java.lang.String . int ( ) ) ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String , int int , int int ) { if ( int == int ) { return STRING ; } return java.util.regex.Pattern . java.lang.String ( java.lang.String . java.lang.String ( int , int ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
