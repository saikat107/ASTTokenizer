<METHOD_START> @ java.lang.Override public void void ( ) { Connector org.springframework.web.socket.Connector = new Connector ( Http11NioProtocol .class . java.lang.String ( ) ) ; org.springframework.web.socket.Connector . setPort ( NUMBER ) ; java.io.File java.io.File = java.io.File ( STRING ) ; java.lang.String java.lang.String = java.io.File . java.lang.String ( ) ; this . org.springframework.web.socket.Tomcat = new Tomcat ( ) ; this . org.springframework.web.socket.Tomcat . setBaseDir ( java.lang.String ) ; this . org.springframework.web.socket.Tomcat . setPort ( NUMBER ) ; this . org.springframework.web.socket.Tomcat . getService ( ) . addConnector ( org.springframework.web.socket.Connector ) ; this . org.springframework.web.socket.Tomcat . setConnector ( org.springframework.web.socket.Connector ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( java.lang.String java.lang.String ) { try { java.io.File java.io.File = java.io.File . java.io.File ( java.lang.String + STRING , STRING + int ( ) ) ; java.io.File . boolean ( ) ; java.io.File . boolean ( ) ; java.io.File . void ( ) ; return java.io.File ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebApplicationContext org.springframework.web.socket.WebApplicationContext , Filter ... org.springframework.web.socket.Filter[] ) { Assert . state ( this . int != - NUMBER , STRING ) ; this . org.springframework.web.socket.Context = this . org.springframework.web.socket.Tomcat . addContext ( STRING , java.lang.System . java.lang.String ( STRING ) ) ; this . org.springframework.web.socket.Context . addApplicationListener ( WsContextListener .class . java.lang.String ( ) ) ; Tomcat . addServlet ( this . org.springframework.web.socket.Context , STRING , new DispatcherServlet ( org.springframework.web.socket.WebApplicationContext ) ) . setAsyncSupported ( true ) ; this . org.springframework.web.socket.Context . addServletMappingDecoded ( STRING , STRING ) ; for ( Filter org.springframework.web.socket.Filter : org.springframework.web.socket.Filter[] ) { FilterDef org.springframework.web.socket.FilterDef = new FilterDef ( ) ; org.springframework.web.socket.FilterDef . setFilterName ( org.springframework.web.socket.Filter . getClass ( ) . getName ( ) ) ; org.springframework.web.socket.FilterDef . setFilter ( org.springframework.web.socket.Filter ) ; org.springframework.web.socket.FilterDef . setAsyncSupported ( STRING ) ; this . org.springframework.web.socket.Context . addFilterDef ( org.springframework.web.socket.FilterDef ) ; FilterMap org.springframework.web.socket.FilterMap = new FilterMap ( ) ; org.springframework.web.socket.FilterMap . setFilterName ( org.springframework.web.socket.Filter . getClass ( ) . getName ( ) ) ; org.springframework.web.socket.FilterMap . addURLPattern ( STRING ) ; org.springframework.web.socket.FilterMap . setDispatcher ( STRING ) ; this . org.springframework.web.socket.Context . addFilterMap ( org.springframework.web.socket.FilterMap ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.web.socket.Context != null ) { this . org.springframework.web.socket.Context . removeServletMapping ( STRING ) ; this . org.springframework.web.socket.Tomcat . getHost ( ) . removeChild ( this . org.springframework.web.socket.Context ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { this . org.springframework.web.socket.Tomcat . start ( ) ; this . int = this . org.springframework.web.socket.Tomcat . getConnector ( ) . getLocalPort ( ) ; this . org.springframework.web.socket.Context . addLifecycleListener ( event -> { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + event . getType ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { this . org.springframework.web.socket.Tomcat . stop ( ) ; this . int = NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.ServletContext org.springframework.web.socket.ServletContext ( ) { return this . org.springframework.web.socket.Context . getServletContext ( ) ; }  <METHOD_END>
