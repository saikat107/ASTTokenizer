<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.cloudfoundry.ExpectedException . expect ( AuthorizationExceptionMatcher . withReason ( Reason . INVALID_TOKEN ) ) ; new Token ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.boot.actuate.cloudfoundry.ExpectedException . expect ( AuthorizationExceptionMatcher . withReason ( Reason . INVALID_TOKEN ) ) ; new Token ( Base64Utils . encodeToString ( java.lang.String . byte[] ( ) ) + STRING + Base64Utils . encodeToString ( java.lang.String . byte[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.boot.actuate.cloudfoundry.ExpectedException . expect ( AuthorizationExceptionMatcher . withReason ( Reason . INVALID_TOKEN ) ) ; new Token ( Base64Utils . encodeToString ( java.lang.String . byte[] ( ) ) + STRING + Base64Utils . encodeToString ( java.lang.String . byte[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + STRING ; this . org.springframework.boot.actuate.cloudfoundry.ExpectedException . expect ( AuthorizationExceptionMatcher . withReason ( Reason . INVALID_TOKEN ) ) ; new Token ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = Base64Utils . encodeToString ( java.lang.String . byte[] ( ) ) + STRING + Base64Utils . encodeToString ( java.lang.String . byte[] ( ) ) ; java.lang.String java.lang.String = Base64Utils . encodeToString ( STRING . byte[] ( ) ) ; Token org.springframework.boot.actuate.cloudfoundry.Token = new Token ( java.lang.String + STRING + java.lang.String ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.Token . getExpiry ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.Token . getIssuer ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.Token . getSignatureAlgorithm ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.Token . getKeyId ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.Token . getContent ( ) ) . isEqualTo ( java.lang.String . byte[] ( ) ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.Token . getSignature ( ) ) . isEqualTo ( Base64Utils . decodeFromString ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Token org.springframework.boot.actuate.cloudfoundry.Token = org.springframework.boot.actuate.cloudfoundry.Token ( java.lang.String , java.lang.String ) ; this . org.springframework.boot.actuate.cloudfoundry.ExpectedException . expect ( AuthorizationExceptionMatcher . withReason ( Reason . INVALID_TOKEN ) ) ; org.springframework.boot.actuate.cloudfoundry.Token . getSignatureAlgorithm ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Token org.springframework.boot.actuate.cloudfoundry.Token = org.springframework.boot.actuate.cloudfoundry.Token ( java.lang.String , java.lang.String ) ; this . org.springframework.boot.actuate.cloudfoundry.ExpectedException . expect ( AuthorizationExceptionMatcher . withReason ( Reason . INVALID_TOKEN ) ) ; org.springframework.boot.actuate.cloudfoundry.Token . getIssuer ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Token org.springframework.boot.actuate.cloudfoundry.Token = org.springframework.boot.actuate.cloudfoundry.Token ( java.lang.String , java.lang.String ) ; this . org.springframework.boot.actuate.cloudfoundry.ExpectedException . expect ( AuthorizationExceptionMatcher . withReason ( Reason . INVALID_TOKEN ) ) ; org.springframework.boot.actuate.cloudfoundry.Token . getKeyId ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING + STRING ; Token org.springframework.boot.actuate.cloudfoundry.Token = org.springframework.boot.actuate.cloudfoundry.Token ( java.lang.String , java.lang.String ) ; this . org.springframework.boot.actuate.cloudfoundry.ExpectedException . expect ( AuthorizationExceptionMatcher . withReason ( Reason . INVALID_TOKEN ) ) ; org.springframework.boot.actuate.cloudfoundry.Token . getExpiry ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.cloudfoundry.Token org.springframework.boot.actuate.cloudfoundry.Token ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Token org.springframework.boot.actuate.cloudfoundry.Token = new Token ( Base64Utils . encodeToString ( java.lang.String . byte[] ( ) ) + STRING + Base64Utils . encodeToString ( java.lang.String . byte[] ( ) ) + STRING + Base64Utils . encodeToString ( STRING . byte[] ( ) ) ) ; return org.springframework.boot.actuate.cloudfoundry.Token ; }  <METHOD_END>
