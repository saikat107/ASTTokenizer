<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.lang.Object = java.lang.Object ; this . org.springframework.data.history.Lazy<java.util.Optional<N>> = org.springframework.data.history.Lazy<java.util.Optional<java.lang.Object>> ( java.lang.Object , java.lang.Class<> ) ; this . org.springframework.data.history.Lazy<java.util.Optional<java.time.LocalDateTime>> = org.springframework.data.history.Lazy<java.util.Optional<java.lang.Object>> ( java.lang.Object , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<N> < N > java.util.Optional<N> ( ) { return org.springframework.data.history.Lazy<java.util.Optional<N>> . get ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.time.LocalDateTime> < java.time.LocalDateTime > java.util.Optional<java.time.LocalDateTime> ( ) { return org.springframework.data.history.Lazy<java.util.Optional<java.time.LocalDateTime>> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( ) { return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> private static < T > org.springframework.data.history.Lazy<java.util.Optional<T>> < java.util.Optional<T> < T > > org.springframework.data.history.Lazy<java.util.Optional<T>> ( java.lang.Object java.lang.Object , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { return Lazy . of ( ( ) { AnnotationDetectionFieldCallback numberCallback = new AnnotationDetectionFieldCallback ( annotationType ) ; ReflectionUtils . doWithFields ( entity . getClass ( ) , numberCallback ) ; return numberCallback . getValue ( entity ) ; } ) ; }  <METHOD_END>
