<METHOD_START> @ Before public void void ( ) { java.util.List<org.springframework.integration.aggregator.Message<?>> . add ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> . add ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> . add ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class AnnotatedAggregatorMethod { @ Aggregator public java.lang.Integer java.lang.Integer ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { int int = NUMBER ; for ( java.lang.Integer java.lang.Integer : java.util.List<java.lang.Integer> ) { int = int | java.lang.Integer ; } return int ; } public java.lang.String java.lang.String ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { return STRING ; } } MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( new AnnotatedAggregatorMethod ( ) ) ; when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertThat ( ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Aggregator public java.lang.Integer java.lang.Integer ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { int int = NUMBER ; for ( java.lang.Integer java.lang.Integer : java.util.List<java.lang.Integer> ) { int = int | java.lang.Integer ; } return int ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class SimpleAggregator { public java.lang.Integer java.lang.Integer ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { int int = NUMBER ; for ( java.lang.Integer java.lang.Integer : java.util.List<java.lang.Integer> ) { int = int | java.lang.Integer ; } return int ; } } MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( new SimpleAggregator ( ) ) ; when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertThat ( ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { int int = NUMBER ; for ( java.lang.Integer java.lang.Integer : java.util.List<java.lang.Integer> ) { int = int | java.lang.Integer ; } return int ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class SimpleAggregator { public java.lang.Integer java.lang.Integer ( java.util.List<org.springframework.integration.aggregator.Message<java.lang.Integer>> < Message < java.lang.Integer > > java.util.List<org.springframework.integration.aggregator.Message<java.lang.Integer>> ) { int int = NUMBER ; for ( Message < java.lang.Integer > org.springframework.integration.aggregator.Message<java.lang.Integer> : java.util.List<org.springframework.integration.aggregator.Message<java.lang.Integer>> ) { int = int | org.springframework.integration.aggregator.Message<java.lang.Integer> . getPayload ( ) ; } return int ; } } MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( new SimpleAggregator ( ) ) ; when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertThat ( ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( java.util.List<org.springframework.integration.aggregator.Message<java.lang.Integer>> < Message < java.lang.Integer > > java.util.List<org.springframework.integration.aggregator.Message<java.lang.Integer>> ) { int int = NUMBER ; for ( Message < java.lang.Integer > org.springframework.integration.aggregator.Message<java.lang.Integer> : java.util.List<org.springframework.integration.aggregator.Message<java.lang.Integer>> ) { int = int | org.springframework.integration.aggregator.Message<java.lang.Integer> . getPayload ( ) ; } return int ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class SimpleAggregator { public java.lang.String java.lang.String ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> , @ Header ( STRING ) java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> < java.lang.Integer > ( ) ; for ( int int : java.util.List<java.lang.Integer> ) { java.util.List<java.lang.Integer> . boolean ( int ) ; } for ( int int : java.util.List<java.lang.Integer> ) { java.util.List<java.lang.Integer> . boolean ( int ) ; } return java.util.List<java.lang.Integer> . java.lang.String ( ) ; } } MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( new SimpleAggregator ( ) ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> . add ( MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) ) . build ( ) ) ; when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertThat ( ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> , @ Header ( STRING ) java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> < java.lang.Integer > ( ) ; for ( int int : java.util.List<java.lang.Integer> ) { java.util.List<java.lang.Integer> . boolean ( int ) ; } for ( int int : java.util.List<java.lang.Integer> ) { java.util.List<java.lang.Integer> . boolean ( int ) ; } return java.util.List<java.lang.Integer> . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class SimpleAggregator { public java.lang.String java.lang.String ( @ Payloads java.util.List<?> < ? > java.util.List<?> , @ Header ( STRING ) java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = ( java.util.List<java.lang.Integer> < java.lang.Integer > ) java.util.List<> ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> < java.lang.Integer > ( ) ; for ( int int : java.util.List<java.lang.Integer> ) { java.util.List<java.lang.Integer> . boolean ( int ) ; } for ( int int : java.util.List<java.lang.Integer> ) { java.util.List<java.lang.Integer> . boolean ( int ) ; } return java.util.List<java.lang.Integer> . java.lang.String ( ) ; } } MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( new SimpleAggregator ( ) ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> . add ( MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) ) . build ( ) ) ; when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertThat ( ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( @ Payloads java.util.List<?> < ? > java.util.List<?> , @ Header ( STRING ) java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = ( java.util.List<java.lang.Integer> < java.lang.Integer > ) java.util.List<> ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> < java.lang.Integer > ( ) ; for ( int int : java.util.List<java.lang.Integer> ) { java.util.List<java.lang.Integer> . boolean ( int ) ; } for ( int int : java.util.List<java.lang.Integer> ) { java.util.List<java.lang.Integer> . boolean ( int ) ; } return java.util.List<java.lang.Integer> . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class SimpleAggregator { @ Aggregator public java.lang.String java.lang.String ( @ Payloads java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> < java.lang.Integer > ( ) ; for ( int int : java.util.List<java.lang.Integer> ) { java.util.List<java.lang.Integer> . boolean ( int ) ; } return java.util.List<java.lang.Integer> . java.lang.String ( ) ; } public java.lang.String java.lang.String ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; } } MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( new SimpleAggregator ( ) ) ; when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertThat ( ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Aggregator public java.lang.String java.lang.String ( @ Payloads java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> < java.lang.Integer > ( ) ; for ( int int : java.util.List<java.lang.Integer> ) { java.util.List<java.lang.Integer> . boolean ( int ) ; } return java.util.List<java.lang.Integer> . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class SimpleAggregator { public java.lang.Integer java.lang.Integer ( java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> ) { int int = NUMBER ; for ( java.lang.Integer java.lang.Integer : java.util.Collection<java.lang.Integer> ) { int = int | java.lang.Integer ; } return int ; } } MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( new SimpleAggregator ( ) ) ; when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertThat ( ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> ) { int int = NUMBER ; for ( java.lang.Integer java.lang.Integer : java.util.Collection<java.lang.Integer> ) { int = int | java.lang.Integer ; } return int ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class SimpleAggregator { public java.lang.Integer java.lang.Integer ( int [] int[] ) { int int = NUMBER ; for ( int int : int[] ) { int = int | int ; } return int ; } } MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( new SimpleAggregator ( ) ) ; when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertThat ( ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( int [] int[] ) { int int = NUMBER ; for ( int int : int[] ) { int = int | int ; } return int ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class SimpleAggregator { public java.lang.Integer java.lang.Integer ( java.util.Iterator<java.lang.Integer> < java.lang.Integer > java.util.Iterator<java.lang.Integer> ) { int int = NUMBER ; while ( java.util.Iterator<java.lang.Integer> . boolean ( ) ) { int = int | java.util.Iterator<java.lang.Integer> . java.lang.Integer ( ) ; } return int ; } } MethodInvokingMessageGroupProcessor org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( new SimpleAggregator ( ) ) ; GenericConversionService org.springframework.integration.aggregator.GenericConversionService = new DefaultConversionService ( ) ; org.springframework.integration.aggregator.GenericConversionService . addConverter ( new Converter < java.util.ArrayList<?> < ? > , java.util.Iterator<?> < ? > > ( ) { @ java.lang.Override public java.util.Iterator<?> < ? > java.util.Iterator<?> ( java.util.ArrayList<?> < ? > java.util.ArrayList<?> ) { return java.util.ArrayList<> . java.util.Iterator<> ( ) ; } } ) ; org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor . setConversionService ( org.springframework.integration.aggregator.GenericConversionService ) ; when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertThat ( ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( java.util.Iterator<java.lang.Integer> < java.lang.Integer > java.util.Iterator<java.lang.Integer> ) { int int = NUMBER ; while ( java.util.Iterator<java.lang.Integer> . boolean ( ) ) { int = int | java.util.Iterator<java.lang.Integer> . java.lang.Integer ( ) ; } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<?> < ? > java.util.Iterator<?> ( java.util.ArrayList<?> < ? > java.util.ArrayList<?> ) { return java.util.ArrayList<> . java.util.Iterator<> ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) class UnannotatedAggregator { public java.lang.Integer java.lang.Integer ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { int int = NUMBER ; for ( java.lang.Integer java.lang.Integer : java.util.List<java.lang.Integer> ) { int = int | java.lang.Integer ; } return int ; } public void void ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { fail ( STRING ) ; } public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { fail ( STRING ) ; return null ; } } MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( new UnannotatedAggregator ( ) ) ; when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertThat ( ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { int int = NUMBER ; for ( java.lang.Integer java.lang.Integer : java.util.List<java.lang.Integer> ) { int = int | java.lang.Integer ; } return int ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { fail ( STRING ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) class UnannotatedAggregator { public java.util.Iterator<?> < ? > java.util.Iterator<?> ( java.util.Iterator<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.Iterator<org.springframework.integration.aggregator.Message<?>> ) { return java.util.Iterator<org.springframework.integration.aggregator.Message<?>> ; } public void void ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { fail ( STRING ) ; } public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { fail ( STRING ) ; return null ; } } MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( new UnannotatedAggregator ( ) ) ; when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertTrue ( ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) instanceof java.util.Iterator<?> < ? > ) ; }  <METHOD_END>
<METHOD_START> public java.util.Iterator<?> < ? > java.util.Iterator<?> ( java.util.Iterator<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.Iterator<org.springframework.integration.aggregator.Message<?>> ) { return java.util.Iterator<org.springframework.integration.aggregator.Message<?>> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { fail ( STRING ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { class AnnotatedParametersAggregator { @ java.lang.SuppressWarnings ( STRING ) public java.lang.Integer java.lang.Integer ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { int int = NUMBER ; for ( java.lang.Integer java.lang.Integer : java.util.List<java.lang.Integer> ) { int = int | java.lang.Integer ; } return int ; } @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( @ Header java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { fail ( STRING ) ; return STRING ; } } MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( new AnnotatedParametersAggregator ( ) ) ; when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; java.lang.Object java.lang.Object = ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) ; assertTrue ( java.lang.Object instanceof java.lang.Integer ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Integer java.lang.Integer ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { int int = NUMBER ; for ( java.lang.Integer java.lang.Integer : java.util.List<java.lang.Integer> ) { int = int | java.lang.Integer ; } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( @ Header java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { fail ( STRING ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class SingleAnnotationTestBean { @ Aggregator public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; } public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; } } SingleAnnotationTestBean bean = new SingleAnnotationTestBean ( ) ; MethodInvokingMessageGroupProcessor org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( bean ) ; SimpleMessageGroup org.springframework.integration.aggregator.SimpleMessageGroup = new SimpleMessageGroup ( STRING ) ; org.springframework.integration.aggregator.SimpleMessageGroup . add ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.aggregator.SimpleMessageGroup . add ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor . aggregatePayloads ( org.springframework.integration.aggregator.SimpleMessageGroup , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Aggregator public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { class SingleAnnotationTestBean { @ Aggregator public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , @ Header ( STRING ) java.lang.String java.lang.String ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) + java.lang.String ; } } SingleAnnotationTestBean bean = new SingleAnnotationTestBean ( ) ; MethodInvokingMessageGroupProcessor org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( bean ) ; SimpleMessageGroup org.springframework.integration.aggregator.SimpleMessageGroup = new SimpleMessageGroup ( STRING ) ; org.springframework.integration.aggregator.SimpleMessageGroup . add ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; org.springframework.integration.aggregator.SimpleMessageGroup . add ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertEquals ( STRING , org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor . aggregatePayloads ( org.springframework.integration.aggregator.SimpleMessageGroup , org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor . aggregateHeaders ( org.springframework.integration.aggregator.SimpleMessageGroup ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Aggregator public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , @ Header ( STRING ) java.lang.String java.lang.String ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { class SingleAnnotationTestBean { @ Aggregator public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , @ Headers java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) + java.util.Map<java.lang.String,> . get ( STRING ) ; } } SingleAnnotationTestBean bean = new SingleAnnotationTestBean ( ) ; MethodInvokingMessageGroupProcessor org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( bean ) ; SimpleMessageGroup org.springframework.integration.aggregator.SimpleMessageGroup = new SimpleMessageGroup ( STRING ) ; org.springframework.integration.aggregator.SimpleMessageGroup . add ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; org.springframework.integration.aggregator.SimpleMessageGroup . add ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertEquals ( STRING , org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor . aggregatePayloads ( org.springframework.integration.aggregator.SimpleMessageGroup , org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor . aggregateHeaders ( org.springframework.integration.aggregator.SimpleMessageGroup ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Aggregator public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , @ Headers java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) + java.util.Map<java.lang.String,> . get ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { class MultipleAnnotationTestBean { @ Aggregator public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; } @ Aggregator public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; } } MultipleAnnotationTestBean bean = new MultipleAnnotationTestBean ( ) ; new MethodInvokingMessageGroupProcessor ( bean ) ; }  <METHOD_END>
<METHOD_START> @ Aggregator public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Aggregator public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class NoAnnotationTestBean { public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; } java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; } } NoAnnotationTestBean bean = new NoAnnotationTestBean ( ) ; MethodInvokingMessageGroupProcessor org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( bean ) ; SimpleMessageGroup org.springframework.integration.aggregator.SimpleMessageGroup = new SimpleMessageGroup ( STRING ) ; org.springframework.integration.aggregator.SimpleMessageGroup . add ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.aggregator.SimpleMessageGroup . add ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor . aggregatePayloads ( org.springframework.integration.aggregator.SimpleMessageGroup , null ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) class MultiplePublicMethodTestBean { public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; } public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; } } MultiplePublicMethodTestBean bean = new MultiplePublicMethodTestBean ( ) ; new MethodInvokingMessageGroupProcessor ( bean ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) class NoPublicMethodTestBean { java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; } } NoPublicMethodTestBean bean = new NoPublicMethodTestBean ( ) ; new MethodInvokingMessageGroupProcessor ( bean ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectChannel org.springframework.integration.aggregator.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessorTests.GreetingService org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessorTests.GreetingService = new org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessorTests.GreetingBean ( ) ; ProxyFactory org.springframework.integration.aggregator.ProxyFactory = new ProxyFactory ( org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessorTests.GreetingService ) ; org.springframework.integration.aggregator.ProxyFactory . setProxyTargetClass ( true ) ; org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessorTests.GreetingService = ( org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessorTests.GreetingService ) org.springframework.integration.aggregator.ProxyFactory . getProxy ( ) ; MethodInvokingMessageGroupProcessor org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessorTests.GreetingService ) ; AggregatingMessageHandler org.springframework.integration.aggregator.AggregatingMessageHandler = new AggregatingMessageHandler ( org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . setReleaseStrategy ( new MessageCountReleaseStrategy ( ) ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . setOutputChannel ( org.springframework.integration.aggregator.QueueChannel ) ; EventDrivenConsumer org.springframework.integration.aggregator.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.aggregator.DirectChannel , org.springframework.integration.aggregator.AggregatingMessageHandler ) ; org.springframework.integration.aggregator.EventDrivenConsumer . start ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . build ( ) ; org.springframework.integration.aggregator.DirectChannel . send ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( STRING , org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectChannel org.springframework.integration.aggregator.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessorTests.GreetingService org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessorTests.GreetingService = new org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessorTests.GreetingBean ( ) ; ProxyFactory org.springframework.integration.aggregator.ProxyFactory = new ProxyFactory ( org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessorTests.GreetingService ) ; org.springframework.integration.aggregator.ProxyFactory . setProxyTargetClass ( true ) ; org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessorTests.GreetingService = ( org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessorTests.GreetingService ) org.springframework.integration.aggregator.ProxyFactory . getProxy ( ) ; MethodInvokingMessageGroupProcessor org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessorTests.GreetingService ) ; AggregatingMessageHandler org.springframework.integration.aggregator.AggregatingMessageHandler = new AggregatingMessageHandler ( org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . setReleaseStrategy ( new MessageCountReleaseStrategy ( ) ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . setOutputChannel ( org.springframework.integration.aggregator.QueueChannel ) ; EventDrivenConsumer org.springframework.integration.aggregator.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.aggregator.DirectChannel , org.springframework.integration.aggregator.AggregatingMessageHandler ) ; org.springframework.integration.aggregator.EventDrivenConsumer . start ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . build ( ) ; org.springframework.integration.aggregator.DirectChannel . send ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( STRING , org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> );  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Aggregator public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.lang.String + STRING + java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; }  <METHOD_END>
