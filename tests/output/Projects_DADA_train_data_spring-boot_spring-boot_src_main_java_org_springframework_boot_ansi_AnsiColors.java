<METHOD_START> private void ( ) {	}  <METHOD_END>
<METHOD_START> public static org.springframework.boot.ansi.AnsiColor org.springframework.boot.ansi.AnsiColor ( java.awt.Color java.awt.Color ) { return org.springframework.boot.ansi.AnsiColor ( new org.springframework.boot.ansi.AnsiColors.LabColor ( java.awt.Color ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.boot.ansi.AnsiColor org.springframework.boot.ansi.AnsiColor ( org.springframework.boot.ansi.AnsiColors.LabColor org.springframework.boot.ansi.AnsiColors.LabColor ) { AnsiColor org.springframework.boot.ansi.AnsiColor = null ; double double = java.lang.Float . float ; for ( java.util.Map.Entry<org.springframework.boot.ansi.AnsiColor,org.springframework.boot.ansi.AnsiColors.LabColor> < AnsiColor , org.springframework.boot.ansi.AnsiColors.LabColor > java.util.Map.Entry<org.springframework.boot.ansi.AnsiColor,org.springframework.boot.ansi.AnsiColors.LabColor> : java.util.Map<org.springframework.boot.ansi.AnsiColor,org.springframework.boot.ansi.AnsiColors.LabColor> . entrySet ( ) ) { double double = org.springframework.boot.ansi.AnsiColors.LabColor . double ( java.util.Map.Entry<org.springframework.boot.ansi.AnsiColor,org.springframework.boot.ansi.AnsiColors.LabColor> . getValue ( ) ) ; if ( org.springframework.boot.ansi.AnsiColor == null || double < double ) { double = double ; org.springframework.boot.ansi.AnsiColor = java.util.Map.Entry<org.springframework.boot.ansi.AnsiColor,org.springframework.boot.ansi.AnsiColors.LabColor> . getKey ( ) ; } } return org.springframework.boot.ansi.AnsiColor ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Integer java.lang.Integer ) { this( java.lang.Integer == null ? ( java.awt.Color ) null : new java.awt.Color ( java.lang.Integer ) ); }  <METHOD_END>
<METHOD_START> void ( java.awt.Color java.awt.Color ) { Assert . notNull ( java.awt.Color , STRING ) ; float [] float[] = float[] ( java.awt.Color . float[] ( java.awt.color.ColorSpace , null ) ) ; this . double = float[] [ NUMBER ] ; this . double = float[] [ NUMBER ] ; this . double = float[] [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> private float [] float[] ( float [] float[] ) { return float[] ( float[] [ NUMBER ] , float[] [ NUMBER ] , float[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> private float [] float[] ( float float , float float , float float ) { double double = ( double ( float ) - NUMBER ) * NUMBER ; double double = ( double ( float ) - double ( float ) ) * NUMBER ; double double = ( double ( float ) - double ( float ) ) * NUMBER ; return new float [] { ( float ) double , ( float ) double , ( float ) double } ; }  <METHOD_END>
<METHOD_START> private double double ( double double ) { return ( double > ( NUMBER / NUMBER ) ? java.lang.Math . double ( double ) : ( NUMBER / NUMBER ) * java.lang.Math . double ( NUMBER / NUMBER , NUMBER ) * double + ( NUMBER / NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public double double ( org.springframework.boot.ansi.AnsiColors.LabColor org.springframework.boot.ansi.AnsiColors.LabColor ) { double double = java.lang.Math . double ( this . double * this . double + this . double * this . double ) ; double double = double - java.lang.Math . double ( org.springframework.boot.ansi.AnsiColors.LabColor . double * org.springframework.boot.ansi.AnsiColors.LabColor . double + org.springframework.boot.ansi.AnsiColors.LabColor . double * org.springframework.boot.ansi.AnsiColors.LabColor . double ) ; double double = this . double - org.springframework.boot.ansi.AnsiColors.LabColor . double ; double double = this . double - org.springframework.boot.ansi.AnsiColors.LabColor . double ; double double = java.lang.Math . double ( java.lang.Math . double ( NUMBER , double * double + double * double - double * double ) ) ; return java.lang.Math . double ( java.lang.Math . double ( NUMBER , java.lang.Math . double ( ( this . double - org.springframework.boot.ansi.AnsiColors.LabColor . double ) / ( NUMBER ) , NUMBER ) + java.lang.Math . double ( double / ( NUMBER + NUMBER * double ) , NUMBER ) + java.lang.Math . double ( double / ( NUMBER + NUMBER * double ) , NUMBER ) ) ) ; }  <METHOD_END>
