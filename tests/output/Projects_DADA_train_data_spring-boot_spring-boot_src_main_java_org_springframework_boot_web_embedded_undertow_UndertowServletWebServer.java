<METHOD_START> public void ( Builder org.springframework.boot.web.embedded.undertow.Builder , DeploymentManager org.springframework.boot.web.embedded.undertow.DeploymentManager , java.lang.String java.lang.String , boolean boolean , Compression org.springframework.boot.web.embedded.undertow.Compression ) { this( org.springframework.boot.web.embedded.undertow.Builder , org.springframework.boot.web.embedded.undertow.DeploymentManager , java.lang.String , false , boolean , org.springframework.boot.web.embedded.undertow.Compression ); }  <METHOD_END>
<METHOD_START> public void ( Builder org.springframework.boot.web.embedded.undertow.Builder , DeploymentManager org.springframework.boot.web.embedded.undertow.DeploymentManager , java.lang.String java.lang.String , boolean boolean , boolean boolean , Compression org.springframework.boot.web.embedded.undertow.Compression ) { this( org.springframework.boot.web.embedded.undertow.Builder , org.springframework.boot.web.embedded.undertow.DeploymentManager , java.lang.String , boolean , boolean , org.springframework.boot.web.embedded.undertow.Compression , null ); }  <METHOD_END>
<METHOD_START> public void ( Builder org.springframework.boot.web.embedded.undertow.Builder , DeploymentManager org.springframework.boot.web.embedded.undertow.DeploymentManager , java.lang.String java.lang.String , boolean boolean , boolean boolean , Compression org.springframework.boot.web.embedded.undertow.Compression , java.lang.String java.lang.String ) { this . org.springframework.boot.web.embedded.undertow.Builder = org.springframework.boot.web.embedded.undertow.Builder ; this . org.springframework.boot.web.embedded.undertow.DeploymentManager = org.springframework.boot.web.embedded.undertow.DeploymentManager ; this . java.lang.String = java.lang.String ; this . boolean = boolean ; this . boolean = boolean ; this . org.springframework.boot.web.embedded.undertow.Compression = org.springframework.boot.web.embedded.undertow.Compression ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.boot.web.embedded.undertow.WebServerException { synchronized ( this . java.lang.Object ) { if ( this . boolean ) { return; } try { if ( ! this . boolean ) { return; } if ( this . org.springframework.boot.web.embedded.undertow.Undertow == null ) { this . org.springframework.boot.web.embedded.undertow.Undertow = org.springframework.boot.web.embedded.undertow.Undertow ( ) ; } this . org.springframework.boot.web.embedded.undertow.Undertow . start ( ) ; this . boolean = true ; org.springframework.boot.web.embedded.undertow.UndertowServletWebServer . org.springframework.boot.web.embedded.undertow.Log . info ( STRING + java.lang.String ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.net.BindException ( java.lang.Exception ) != null ) { java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> < org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port > java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> = java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> ( ) ; java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> < org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port > java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> = java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> ( ) ; java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> . boolean ( java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> ) ; if ( java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> . int ( ) == NUMBER ) { throw new PortInUseException ( java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> . java.util.Iterator<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> ( ) . org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port ( ) . int ( ) ) ; } } throw new WebServerException ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private java.net.BindException java.net.BindException ( java.lang.Exception java.lang.Exception ) { java.lang.Throwable java.lang.Throwable = java.lang.Exception ; while ( java.lang.Throwable != null ) { if ( java.lang.Throwable instanceof java.net.BindException ) { return ( java.net.BindException ) java.lang.Throwable ; } java.lang.Throwable = java.lang.Throwable . java.lang.Throwable ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.undertow.Undertow org.springframework.boot.web.embedded.undertow.Undertow ( ) org.springframework.boot.web.embedded.undertow.ServletException { HttpHandler org.springframework.boot.web.embedded.undertow.HttpHandler = this . org.springframework.boot.web.embedded.undertow.DeploymentManager . start ( ) ; org.springframework.boot.web.embedded.undertow.HttpHandler = org.springframework.boot.web.embedded.undertow.HttpHandler ( org.springframework.boot.web.embedded.undertow.HttpHandler ) ; if ( this . boolean ) { org.springframework.boot.web.embedded.undertow.HttpHandler = Handlers . proxyPeerAddress ( org.springframework.boot.web.embedded.undertow.HttpHandler ) ; } if ( StringUtils . hasText ( this . java.lang.String ) ) { org.springframework.boot.web.embedded.undertow.HttpHandler = Handlers . header ( org.springframework.boot.web.embedded.undertow.HttpHandler , STRING , this . java.lang.String ) ; } this . org.springframework.boot.web.embedded.undertow.Builder . setHandler ( org.springframework.boot.web.embedded.undertow.HttpHandler ) ; return this . org.springframework.boot.web.embedded.undertow.Builder . build ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.undertow.HttpHandler org.springframework.boot.web.embedded.undertow.HttpHandler ( HttpHandler org.springframework.boot.web.embedded.undertow.HttpHandler ) { HttpHandler org.springframework.boot.web.embedded.undertow.HttpHandler = org.springframework.boot.web.embedded.undertow.HttpHandler ( org.springframework.boot.web.embedded.undertow.HttpHandler ) ; if ( StringUtils . isEmpty ( this . java.lang.String ) ) { return org.springframework.boot.web.embedded.undertow.HttpHandler ; } return Handlers . path ( ) . addPrefixPath ( this . java.lang.String , org.springframework.boot.web.embedded.undertow.HttpHandler ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.undertow.HttpHandler org.springframework.boot.web.embedded.undertow.HttpHandler ( HttpHandler org.springframework.boot.web.embedded.undertow.HttpHandler ) { if ( this . org.springframework.boot.web.embedded.undertow.Compression == null || ! this . org.springframework.boot.web.embedded.undertow.Compression . getEnabled ( ) ) { return org.springframework.boot.web.embedded.undertow.HttpHandler ; } ContentEncodingRepository org.springframework.boot.web.embedded.undertow.ContentEncodingRepository = new ContentEncodingRepository ( ) ; org.springframework.boot.web.embedded.undertow.ContentEncodingRepository . addEncodingHandler ( STRING , new GzipEncodingProvider ( ) , NUMBER , Predicates . and ( org.springframework.boot.web.embedded.undertow.Predicate[] ( this . org.springframework.boot.web.embedded.undertow.Compression ) ) ) ; return new EncodingHandler ( org.springframework.boot.web.embedded.undertow.ContentEncodingRepository ) . setNext ( org.springframework.boot.web.embedded.undertow.HttpHandler ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.undertow.Predicate [] org.springframework.boot.web.embedded.undertow.Predicate[] ( Compression org.springframework.boot.web.embedded.undertow.Compression ) { java.util.List<org.springframework.boot.web.embedded.undertow.Predicate> < Predicate > java.util.List<org.springframework.boot.web.embedded.undertow.Predicate> = new java.util.ArrayList<org.springframework.boot.web.embedded.undertow.Predicate> <> ( ) ; java.util.List<org.springframework.boot.web.embedded.undertow.Predicate> . add ( new org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.MaxSizePredicate ( org.springframework.boot.web.embedded.undertow.Compression . getMinResponseSize ( ) ) ) ; java.util.List<org.springframework.boot.web.embedded.undertow.Predicate> . add ( new org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.CompressibleMimeTypePredicate ( org.springframework.boot.web.embedded.undertow.Compression . getMimeTypes ( ) ) ) ; if ( org.springframework.boot.web.embedded.undertow.Compression . getExcludedUserAgents ( ) != null ) { for ( java.lang.String java.lang.String : org.springframework.boot.web.embedded.undertow.Compression . getExcludedUserAgents ( ) ) { RequestHeaderAttribute org.springframework.boot.web.embedded.undertow.RequestHeaderAttribute = new RequestHeaderAttribute ( new HttpString ( HttpHeaders . USER_AGENT ) ) ; java.util.List<org.springframework.boot.web.embedded.undertow.Predicate> . add ( Predicates . not ( Predicates . regex ( org.springframework.boot.web.embedded.undertow.RequestHeaderAttribute , java.lang.String ) ) ) ; } } return java.util.List<org.springframework.boot.web.embedded.undertow.Predicate> . toArray ( new Predicate [ java.util.List<org.springframework.boot.web.embedded.undertow.Predicate> . size ( ) ] ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> < org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port > java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> = java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> ( ) ; if ( ! java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> . boolean ( ) ) { return StringUtils . collectionToDelimitedString ( java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> , STRING ) ; } return STRING ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> < org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port > java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> ( ) { java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> < org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port > java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> = new java.util.ArrayList<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> <> ( ) ; try { if ( ! this . boolean ) { java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> . boolean ( new org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port ( - NUMBER , STRING ) ) ; } else { for ( BoundChannel org.springframework.boot.web.embedded.undertow.BoundChannel : java.util.List<org.springframework.boot.web.embedded.undertow.BoundChannel> ( ) ) { java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> . boolean ( org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port ( org.springframework.boot.web.embedded.undertow.BoundChannel ) ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { } return java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<org.springframework.boot.web.embedded.undertow.BoundChannel> < BoundChannel > java.util.List<org.springframework.boot.web.embedded.undertow.BoundChannel> ( ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( Undertow .class , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; return ( java.util.List<org.springframework.boot.web.embedded.undertow.BoundChannel> < BoundChannel > ) ReflectionUtils . getField ( java.lang.reflect.Field , this . org.springframework.boot.web.embedded.undertow.Undertow ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port ( BoundChannel org.springframework.boot.web.embedded.undertow.BoundChannel ) { java.net.SocketAddress java.net.SocketAddress = org.springframework.boot.web.embedded.undertow.BoundChannel . getLocalAddress ( ) ; if ( java.net.SocketAddress instanceof java.net.InetSocketAddress ) { java.lang.String java.lang.String = ReflectionUtils . findField ( org.springframework.boot.web.embedded.undertow.BoundChannel . getClass ( ) , STRING ) != null ? STRING : STRING ; return new org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port ( ( ( java.net.InetSocketAddress ) java.net.SocketAddress ) . int ( ) , java.lang.String ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> < org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port > java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> ( ) { java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> < org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port > java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> = new java.util.ArrayList<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> <> ( ) ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ( ) ) { try { java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> . boolean ( org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port ( java.lang.Object ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } return java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( Undertow .class , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; return ( java.util.List<java.lang.Object> < java.lang.Object > ) ReflectionUtils . getField ( java.lang.reflect.Field , this . org.springframework.boot.web.embedded.undertow.Undertow ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port ( java.lang.Object java.lang.Object ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; java.lang.String java.lang.String = ReflectionUtils . getField ( java.lang.reflect.Field , java.lang.Object ) . toString ( ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; int int = ( java.lang.Integer ) ReflectionUtils . getField ( java.lang.reflect.Field , java.lang.Object ) ; return new org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port ( int , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.boot.web.embedded.undertow.WebServerException { synchronized ( this . java.lang.Object ) { if ( ! this . boolean ) { return; } this . boolean = false ; try { this . org.springframework.boot.web.embedded.undertow.DeploymentManager . stop ( ) ; this . org.springframework.boot.web.embedded.undertow.Undertow . stop ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new WebServerException ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> < org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port > java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> = java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> ( ) ; if ( java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> . boolean ( ) ) { return NUMBER ; } return java.util.List<org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> . org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port ( NUMBER ) . int ( ) ; }  <METHOD_END>
<METHOD_START> private void ( int int , java.lang.String java.lang.String ) { this . int = int ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . int + STRING + this . java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( java.lang.Class<? extends org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port = ( org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port ) java.lang.Object ; if ( this . int != org.springframework.boot.web.embedded.undertow.UndertowServletWebServer.Port . int ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String [] java.lang.String[] ) { this . java.util.List<org.springframework.boot.web.embedded.undertow.MimeType> = new java.util.ArrayList <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { this . java.util.List<org.springframework.boot.web.embedded.undertow.MimeType> . add ( MimeTypeUtils . parseMimeType ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpServerExchange org.springframework.boot.web.embedded.undertow.HttpServerExchange ) { java.lang.String java.lang.String = org.springframework.boot.web.embedded.undertow.HttpServerExchange . getResponseHeaders ( ) . getFirst ( HttpHeaders . CONTENT_TYPE ) ; if ( java.lang.String != null ) { for ( MimeType org.springframework.boot.web.embedded.undertow.MimeType : this . java.util.List<org.springframework.boot.web.embedded.undertow.MimeType> ) { if ( org.springframework.boot.web.embedded.undertow.MimeType . isCompatibleWith ( MimeTypeUtils . parseMimeType ( java.lang.String ) ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> void ( int int ) { this . org.springframework.boot.web.embedded.undertow.Predicate = Predicates . maxContentSize ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpServerExchange org.springframework.boot.web.embedded.undertow.HttpServerExchange ) { if ( org.springframework.boot.web.embedded.undertow.HttpServerExchange . getResponseHeaders ( ) . contains ( Headers . CONTENT_LENGTH ) ) { return this . org.springframework.boot.web.embedded.undertow.Predicate . resolve ( org.springframework.boot.web.embedded.undertow.HttpServerExchange ) ; } return true ; }  <METHOD_END>
