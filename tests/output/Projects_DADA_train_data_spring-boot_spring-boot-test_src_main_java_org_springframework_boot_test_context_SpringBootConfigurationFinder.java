<METHOD_START> void ( ) { this . org.springframework.boot.test.context.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; this . org.springframework.boot.test.context.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AnnotationTypeFilter ( SpringBootConfiguration .class ) ) ; this . org.springframework.boot.test.context.ClassPathScanningCandidateComponentProvider . setResourcePattern ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return java.lang.Class<?> ( ClassUtils . getPackageName ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.util.Map<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( java.lang.String ) ; if ( java.lang.Class<> == null ) { java.lang.Class<?> = java.lang.Class<?> ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( java.lang.String , java.lang.Class<> ) ; } return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) { while ( java.lang.String . int ( ) > NUMBER ) { java.util.Set<org.springframework.boot.test.context.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.boot.test.context.BeanDefinition> = this . org.springframework.boot.test.context.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; if ( ! java.util.Set<org.springframework.boot.test.context.BeanDefinition> . isEmpty ( ) ) { Assert . state ( java.util.Set<org.springframework.boot.test.context.BeanDefinition> . size ( ) == NUMBER , STRING + java.util.Set<org.springframework.boot.test.context.BeanDefinition> ) ; return ClassUtils . resolveClassName ( java.util.Set<org.springframework.boot.test.context.BeanDefinition> . iterator ( ) . next ( ) . getBeanClassName ( ) , null ) ; } java.lang.String = java.lang.String ( java.lang.String ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { int int = java.lang.String . int ( STRING ) ; return ( int == - NUMBER ? STRING : java.lang.String . java.lang.String ( NUMBER , int ) ) ; }  <METHOD_END>
<METHOD_START> void ( int int ) { super( NUMBER , NUMBER , true ); this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > java.util.Map.Entry<java.lang.String,java.lang.Class<?>> ) { return int ( ) > this . int ; }  <METHOD_END>
