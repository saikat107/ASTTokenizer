<METHOD_START> public void ( ) { super( org.springframework.integration.http.converter.MediaType ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.io.Serializable .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.integration.http.converter.MediaType ) { return java.io.Serializable .class . boolean ( java.lang.Class<> ) && boolean ( org.springframework.integration.http.converter.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.io.Serializable java.io.Serializable ( java.lang.Class java.lang.Class , HttpInputMessage org.springframework.integration.http.converter.HttpInputMessage ) throws java.io.IOException { try { return ( java.io.Serializable ) new java.io.ObjectInputStream ( org.springframework.integration.http.converter.HttpInputMessage . getBody ( ) ) . java.lang.Object ( ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new java.lang.IllegalArgumentException ( java.lang.ClassNotFoundException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.io.Serializable java.io.Serializable , HttpOutputMessage org.springframework.integration.http.converter.HttpOutputMessage ) throws java.io.IOException { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream java.io.ObjectOutputStream = new java.io.ObjectOutputStream ( java.io.ByteArrayOutputStream ) ; java.io.ObjectOutputStream . void ( java.io.Serializable ) ; java.io.ObjectOutputStream . void ( ) ; java.io.ObjectOutputStream . void ( ) ; byte [] byte[] = java.io.ByteArrayOutputStream . byte[] ( ) ; FileCopyUtils . copy ( byte[] , org.springframework.integration.http.converter.HttpOutputMessage . getBody ( ) ) ; }  <METHOD_END>
