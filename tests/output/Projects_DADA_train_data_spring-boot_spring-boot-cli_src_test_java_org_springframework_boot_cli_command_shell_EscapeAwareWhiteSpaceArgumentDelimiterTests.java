<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . delimit ( java.lang.String , NUMBER ) . getArguments ( ) ) . containsExactly ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . parseArguments ( java.lang.String ) ) . containsExactly ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . isDelimiter ( java.lang.String , NUMBER ) ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . isDelimiter ( java.lang.String , NUMBER ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . isDelimiter ( java.lang.String , NUMBER ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . delimit ( java.lang.String , NUMBER ) . getArguments ( ) ) . containsExactly ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . parseArguments ( java.lang.String ) ) . containsExactly ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . isDelimiter ( java.lang.String , NUMBER ) ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . isDelimiter ( java.lang.String , NUMBER ) ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . isDelimiter ( java.lang.String , NUMBER ) ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . isDelimiter ( java.lang.String , NUMBER ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . delimit ( java.lang.String , NUMBER ) . getArguments ( ) ) . containsExactly ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . parseArguments ( java.lang.String ) ) . containsExactly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . delimit ( java.lang.String , NUMBER ) . getArguments ( ) ) . containsExactly ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . parseArguments ( java.lang.String ) ) . containsExactly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . delimit ( java.lang.String , NUMBER ) . getArguments ( ) ) . containsExactly ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . parseArguments ( java.lang.String ) ) . containsExactly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; ArgumentList org.springframework.boot.cli.command.shell.ArgumentList = this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . delimit ( java.lang.String , NUMBER ) ; assertThat ( org.springframework.boot.cli.command.shell.ArgumentList . getArguments ( ) ) . isEqualTo ( new java.lang.String [] { STRING , STRING } ) ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . parseArguments ( java.lang.String ) ) . containsExactly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertThat ( this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . parseArguments ( java.lang.String ) ) . containsExactly ( STRING ) ; }  <METHOD_END>
