<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.devtools.restart.classloader.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.restart.classloader.ExpectedException . expectMessage ( STRING ) ; new ClassLoaderFile ( null , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.classloader.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.restart.classloader.ExpectedException . expectMessage ( STRING ) ; new ClassLoaderFile ( Kind . ADDED , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.classloader.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.restart.classloader.ExpectedException . expectMessage ( STRING ) ; new ClassLoaderFile ( Kind . MODIFIED , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.classloader.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.restart.classloader.ExpectedException . expectMessage ( STRING ) ; new ClassLoaderFile ( Kind . DELETED , new byte [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = new ClassLoaderFile ( Kind . ADDED , byte[] ) ; assertThat ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile . getKind ( ) ) . isEqualTo ( ClassLoaderFile . Kind . ADDED ) ; assertThat ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile . getContents ( ) ) . isEqualTo ( byte[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = new ClassLoaderFile ( Kind . MODIFIED , byte[] ) ; assertThat ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile . getKind ( ) ) . isEqualTo ( ClassLoaderFile . Kind . MODIFIED ) ; assertThat ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile . getContents ( ) ) . isEqualTo ( byte[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = new ClassLoaderFile ( Kind . DELETED , null ) ; assertThat ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile . getKind ( ) ) . isEqualTo ( ClassLoaderFile . Kind . DELETED ) ; assertThat ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile . getContents ( ) ) . isNull ( ) ; }  <METHOD_END>
