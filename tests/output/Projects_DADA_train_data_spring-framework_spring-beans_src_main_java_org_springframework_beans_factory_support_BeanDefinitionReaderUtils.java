<METHOD_START> public static org.springframework.beans.factory.support.AbstractBeanDefinition org.springframework.beans.factory.support.AbstractBeanDefinition ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) throws java.lang.ClassNotFoundException { GenericBeanDefinition org.springframework.beans.factory.support.GenericBeanDefinition = new GenericBeanDefinition ( ) ; org.springframework.beans.factory.support.GenericBeanDefinition . setParentName ( java.lang.String ) ; if ( java.lang.String != null ) { if ( java.lang.ClassLoader != null ) { org.springframework.beans.factory.support.GenericBeanDefinition . setBeanClass ( ClassUtils . forName ( java.lang.String , java.lang.ClassLoader ) ) ; } else { org.springframework.beans.factory.support.GenericBeanDefinition . setBeanClassName ( java.lang.String ) ; } } return org.springframework.beans.factory.support.GenericBeanDefinition ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( BeanDefinition org.springframework.beans.factory.support.BeanDefinition , BeanDefinitionRegistry org.springframework.beans.factory.support.BeanDefinitionRegistry )			throws org.springframework.beans.factory.support.BeanDefinitionStoreException { return java.lang.String ( org.springframework.beans.factory.support.BeanDefinition , org.springframework.beans.factory.support.BeanDefinitionRegistry , false ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( BeanDefinition org.springframework.beans.factory.support.BeanDefinition , BeanDefinitionRegistry org.springframework.beans.factory.support.BeanDefinitionRegistry , boolean boolean )			throws org.springframework.beans.factory.support.BeanDefinitionStoreException { java.lang.String java.lang.String = org.springframework.beans.factory.support.BeanDefinition . getBeanClassName ( ) ; if ( java.lang.String == null ) { if ( org.springframework.beans.factory.support.BeanDefinition . getParentName ( ) != null ) { java.lang.String = org.springframework.beans.factory.support.BeanDefinition . getParentName ( ) + STRING ; } else if ( org.springframework.beans.factory.support.BeanDefinition . getFactoryBeanName ( ) != null ) { java.lang.String = org.springframework.beans.factory.support.BeanDefinition . getFactoryBeanName ( ) + STRING ; } } if ( ! StringUtils . hasText ( java.lang.String ) ) { throw new BeanDefinitionStoreException ( STRING + STRING ) ; } java.lang.String java.lang.String = java.lang.String ; if ( boolean ) { java.lang.String = java.lang.String + java.lang.String + ObjectUtils . getIdentityHexString ( org.springframework.beans.factory.support.BeanDefinition ) ; } else { int int = - NUMBER ; while ( int == - NUMBER || org.springframework.beans.factory.support.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { int ++ ; java.lang.String = java.lang.String + java.lang.String + int ; } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> public static void void ( BeanDefinitionHolder org.springframework.beans.factory.support.BeanDefinitionHolder , BeanDefinitionRegistry org.springframework.beans.factory.support.BeanDefinitionRegistry )			throws org.springframework.beans.factory.support.BeanDefinitionStoreException { java.lang.String java.lang.String = org.springframework.beans.factory.support.BeanDefinitionHolder . getBeanName ( ) ; org.springframework.beans.factory.support.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.BeanDefinitionHolder . getBeanDefinition ( ) ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.support.BeanDefinitionHolder . getAliases ( ) ; if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.beans.factory.support.BeanDefinitionRegistry . registerAlias ( java.lang.String , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( AbstractBeanDefinition org.springframework.beans.factory.support.AbstractBeanDefinition , BeanDefinitionRegistry org.springframework.beans.factory.support.BeanDefinitionRegistry )			throws org.springframework.beans.factory.support.BeanDefinitionStoreException { java.lang.String java.lang.String = java.lang.String ( org.springframework.beans.factory.support.AbstractBeanDefinition , org.springframework.beans.factory.support.BeanDefinitionRegistry , false ) ; org.springframework.beans.factory.support.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.AbstractBeanDefinition ) ; return java.lang.String ; }  <METHOD_END>
