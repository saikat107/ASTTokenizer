<METHOD_START> @ Bean public sample.integration.FileReadingMessageSource sample.integration.FileReadingMessageSource ( ) { FileReadingMessageSource sample.integration.FileReadingMessageSource = new FileReadingMessageSource ( ) ; sample.integration.FileReadingMessageSource . setDirectory ( new java.io.File ( STRING ) ) ; return sample.integration.FileReadingMessageSource ; }  <METHOD_END>
<METHOD_START> @ Bean public sample.integration.DirectChannel sample.integration.DirectChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public sample.integration.DirectChannel sample.integration.DirectChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public sample.integration.FileWritingMessageHandler sample.integration.FileWritingMessageHandler ( ) { FileWritingMessageHandler sample.integration.FileWritingMessageHandler = new FileWritingMessageHandler ( new java.io.File ( STRING ) ) ; sample.integration.FileWritingMessageHandler . setExpectReply ( false ) ; return sample.integration.FileWritingMessageHandler ; }  <METHOD_END>
<METHOD_START> @ Bean public sample.integration.IntegrationFlow sample.integration.IntegrationFlow ( SampleEndpoint sample.integration.SampleEndpoint ) { return IntegrationFlows . from ( sample.integration.FileReadingMessageSource ( ) , new sample.integration.SampleIntegrationApplication.FixedRatePoller ( ) ) . channel ( sample.integration.DirectChannel ( ) ) . handle ( sample.integration.SampleEndpoint ) . channel ( sample.integration.DirectChannel ( ) ) . handle ( sample.integration.FileWritingMessageHandler ( ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) throws java.lang.Exception { SpringApplication . run ( sample.integration.SampleIntegrationApplication .class , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( SourcePollingChannelAdapterSpec sample.integration.SourcePollingChannelAdapterSpec ) { sample.integration.SourcePollingChannelAdapterSpec . poller ( Pollers . fixedRate ( NUMBER ) ) ; }  <METHOD_END>
