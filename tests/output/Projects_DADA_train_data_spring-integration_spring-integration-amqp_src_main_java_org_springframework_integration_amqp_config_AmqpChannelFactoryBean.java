<METHOD_START> public void ( ) { this( true ); }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.integration.amqp.config.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.amqp.config.ChannelInterceptor> ) { this . java.util.List<org.springframework.integration.amqp.config.ChannelInterceptor> = java.util.List<org.springframework.integration.amqp.config.ChannelInterceptor> ; }  <METHOD_END>
<METHOD_START> public void void ( AmqpAdmin org.springframework.integration.amqp.config.AmqpAdmin ) { this . org.springframework.integration.amqp.config.AmqpAdmin = org.springframework.integration.amqp.config.AmqpAdmin ; }  <METHOD_END>
<METHOD_START> public void void ( FanoutExchange org.springframework.integration.amqp.config.FanoutExchange ) { this . org.springframework.integration.amqp.config.FanoutExchange = org.springframework.integration.amqp.config.FanoutExchange ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { if ( this . org.springframework.integration.amqp.config.AmqpTemplate instanceof RabbitTemplate ) { ( ( RabbitTemplate ) this . org.springframework.integration.amqp.config.AmqpTemplate ) . setEncoding ( java.lang.String ) ; } else if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING ) ; } }  <METHOD_END>
<METHOD_START> public void void ( MessageConverter org.springframework.integration.amqp.config.MessageConverter ) { if ( this . org.springframework.integration.amqp.config.AmqpTemplate instanceof RabbitTemplate ) { ( ( RabbitTemplate ) this . org.springframework.integration.amqp.config.AmqpTemplate ) . setMessageConverter ( org.springframework.integration.amqp.config.MessageConverter ) ; } else if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING ) ; } }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { if ( this . org.springframework.integration.amqp.config.AmqpTemplate instanceof RabbitTemplate ) { ( ( RabbitTemplate ) this . org.springframework.integration.amqp.config.AmqpTemplate ) . setChannelTransacted ( boolean ) ; } else if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING ) ; } }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( ConnectionFactory org.springframework.integration.amqp.config.ConnectionFactory ) { this . org.springframework.integration.amqp.config.ConnectionFactory = org.springframework.integration.amqp.config.ConnectionFactory ; if ( this . org.springframework.integration.amqp.config.AmqpTemplate instanceof RabbitTemplate ) { ( ( RabbitTemplate ) this . org.springframework.integration.amqp.config.AmqpTemplate ) . setConnectionFactory ( this . org.springframework.integration.amqp.config.ConnectionFactory ) ; } }  <METHOD_END>
<METHOD_START> public void void ( MessagePropertiesConverter org.springframework.integration.amqp.config.MessagePropertiesConverter ) { this . org.springframework.integration.amqp.config.MessagePropertiesConverter = org.springframework.integration.amqp.config.MessagePropertiesConverter ; if ( this . org.springframework.integration.amqp.config.AmqpTemplate instanceof RabbitTemplate ) { ( ( RabbitTemplate ) this . org.springframework.integration.amqp.config.AmqpTemplate ) . setMessagePropertiesConverter ( org.springframework.integration.amqp.config.MessagePropertiesConverter ) ; } }  <METHOD_END>
<METHOD_START> public void void ( AcknowledgeMode org.springframework.integration.amqp.config.AcknowledgeMode ) { this . org.springframework.integration.amqp.config.AcknowledgeMode = org.springframework.integration.amqp.config.AcknowledgeMode ; }  <METHOD_END>
<METHOD_START> public void void ( Advice [] org.springframework.integration.amqp.config.Advice[] ) { this . org.springframework.integration.amqp.config.Advice[] = java.util.Arrays . java.lang.Object[] ( org.springframework.integration.amqp.config.Advice[] , adviceChain . length ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( ErrorHandler org.springframework.integration.amqp.config.ErrorHandler ) { this . org.springframework.integration.amqp.config.ErrorHandler = org.springframework.integration.amqp.config.ErrorHandler ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . java.lang.Long = long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . java.lang.Long = long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . java.lang.Long = long ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { this . java.util.concurrent.Executor = java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> public void void ( TransactionAttribute org.springframework.integration.amqp.config.TransactionAttribute ) { this . org.springframework.integration.amqp.config.TransactionAttribute = org.springframework.integration.amqp.config.TransactionAttribute ; }  <METHOD_END>
<METHOD_START> public void void ( PlatformTransactionManager org.springframework.integration.amqp.config.PlatformTransactionManager ) { this . org.springframework.integration.amqp.config.PlatformTransactionManager = org.springframework.integration.amqp.config.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( MessageDeliveryMode org.springframework.integration.amqp.config.MessageDeliveryMode ) { this . org.springframework.integration.amqp.config.MessageDeliveryMode = org.springframework.integration.amqp.config.MessageDeliveryMode ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( AmqpHeaderMapper org.springframework.integration.amqp.config.AmqpHeaderMapper ) { this . org.springframework.integration.amqp.config.AmqpHeaderMapper = org.springframework.integration.amqp.config.AmqpHeaderMapper ; }  <METHOD_END>
<METHOD_START> public void void ( AmqpHeaderMapper org.springframework.integration.amqp.config.AmqpHeaderMapper ) { this . org.springframework.integration.amqp.config.AmqpHeaderMapper = org.springframework.integration.amqp.config.AmqpHeaderMapper ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return ( this . org.springframework.integration.amqp.config.AbstractAmqpChannel != null ) ? this . org.springframework.integration.amqp.config.AbstractAmqpChannel . getClass ( ) : AbstractAmqpChannel .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.amqp.config.AbstractAmqpChannel org.springframework.integration.amqp.config.AbstractAmqpChannel ( ) java.lang.Exception { if ( this . boolean ) { AbstractMessageListenerContainer org.springframework.integration.amqp.config.AbstractMessageListenerContainer = this . org.springframework.integration.amqp.config.AbstractMessageListenerContainer ( ) ; if ( this . org.springframework.integration.amqp.config.AmqpTemplate instanceof InitializingBean ) { ( ( InitializingBean ) this . org.springframework.integration.amqp.config.AmqpTemplate ) . afterPropertiesSet ( ) ; } if ( this . boolean ) { PublishSubscribeAmqpChannel org.springframework.integration.amqp.config.PublishSubscribeAmqpChannel = new PublishSubscribeAmqpChannel ( this . java.lang.String , org.springframework.integration.amqp.config.AbstractMessageListenerContainer , this . org.springframework.integration.amqp.config.AmqpTemplate , this . org.springframework.integration.amqp.config.AmqpHeaderMapper , this . org.springframework.integration.amqp.config.AmqpHeaderMapper ) ; if ( this . org.springframework.integration.amqp.config.FanoutExchange != null ) { org.springframework.integration.amqp.config.PublishSubscribeAmqpChannel . setExchange ( this . org.springframework.integration.amqp.config.FanoutExchange ) ; } if ( this . java.lang.Integer != null ) { org.springframework.integration.amqp.config.PublishSubscribeAmqpChannel . setMaxSubscribers ( this . java.lang.Integer ) ; } this . org.springframework.integration.amqp.config.AbstractAmqpChannel = org.springframework.integration.amqp.config.PublishSubscribeAmqpChannel ; } else { PointToPointSubscribableAmqpChannel org.springframework.integration.amqp.config.PointToPointSubscribableAmqpChannel = new PointToPointSubscribableAmqpChannel ( this . java.lang.String , org.springframework.integration.amqp.config.AbstractMessageListenerContainer , this . org.springframework.integration.amqp.config.AmqpTemplate , this . org.springframework.integration.amqp.config.AmqpHeaderMapper , this . org.springframework.integration.amqp.config.AmqpHeaderMapper ) ; if ( StringUtils . hasText ( this . java.lang.String ) ) { org.springframework.integration.amqp.config.PointToPointSubscribableAmqpChannel . setQueueName ( this . java.lang.String ) ; } if ( this . java.lang.Integer != null ) { org.springframework.integration.amqp.config.PointToPointSubscribableAmqpChannel . setMaxSubscribers ( this . java.lang.Integer ) ; } this . org.springframework.integration.amqp.config.AbstractAmqpChannel = org.springframework.integration.amqp.config.PointToPointSubscribableAmqpChannel ; } } else { Assert . isTrue ( ! this . boolean , STRING ) ; PollableAmqpChannel org.springframework.integration.amqp.config.PollableAmqpChannel = new PollableAmqpChannel ( this . java.lang.String , this . org.springframework.integration.amqp.config.AmqpTemplate , this . org.springframework.integration.amqp.config.AmqpHeaderMapper , this . org.springframework.integration.amqp.config.AmqpHeaderMapper ) ; if ( this . org.springframework.integration.amqp.config.AmqpAdmin != null ) { org.springframework.integration.amqp.config.PollableAmqpChannel . setAmqpAdmin ( this . org.springframework.integration.amqp.config.AmqpAdmin ) ; } if ( StringUtils . hasText ( this . java.lang.String ) ) { org.springframework.integration.amqp.config.PollableAmqpChannel . setQueueName ( this . java.lang.String ) ; } this . org.springframework.integration.amqp.config.AbstractAmqpChannel = org.springframework.integration.amqp.config.PollableAmqpChannel ; } if ( ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.integration.amqp.config.ChannelInterceptor> ) ) { this . org.springframework.integration.amqp.config.AbstractAmqpChannel . setInterceptors ( this . java.util.List<org.springframework.integration.amqp.config.ChannelInterceptor> ) ; } this . org.springframework.integration.amqp.config.AbstractAmqpChannel . setBeanName ( this . java.lang.String ) ; if ( this . getBeanFactory ( ) != null ) { this . org.springframework.integration.amqp.config.AbstractAmqpChannel . setBeanFactory ( this . getBeanFactory ( ) ) ; } if ( this . org.springframework.integration.amqp.config.MessageDeliveryMode != null ) { this . org.springframework.integration.amqp.config.AbstractAmqpChannel . setDefaultDeliveryMode ( this . org.springframework.integration.amqp.config.MessageDeliveryMode ) ; } if ( this . java.lang.Boolean != null ) { this . org.springframework.integration.amqp.config.AbstractAmqpChannel . setExtractPayload ( this . java.lang.Boolean ) ; } this . org.springframework.integration.amqp.config.AbstractAmqpChannel . setHeadersMappedLast ( this . boolean ) ; this . org.springframework.integration.amqp.config.AbstractAmqpChannel . afterPropertiesSet ( ) ; return this . org.springframework.integration.amqp.config.AbstractAmqpChannel ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.amqp.config.AbstractMessageListenerContainer org.springframework.integration.amqp.config.AbstractMessageListenerContainer ( ) java.lang.Exception { AbstractMessageListenerContainer org.springframework.integration.amqp.config.AbstractMessageListenerContainer ; if ( this . java.lang.Integer == null ) { SimpleMessageListenerContainer org.springframework.integration.amqp.config.SimpleMessageListenerContainer = new SimpleMessageListenerContainer ( ) ; if ( this . java.lang.Integer != null ) { org.springframework.integration.amqp.config.SimpleMessageListenerContainer . setConcurrentConsumers ( this . java.lang.Integer ) ; } if ( this . java.lang.Long != null ) { org.springframework.integration.amqp.config.SimpleMessageListenerContainer . setReceiveTimeout ( this . java.lang.Long ) ; } if ( this . java.lang.Integer != null ) { org.springframework.integration.amqp.config.SimpleMessageListenerContainer . setTxSize ( this . java.lang.Integer ) ; } org.springframework.integration.amqp.config.AbstractMessageListenerContainer = org.springframework.integration.amqp.config.SimpleMessageListenerContainer ; } else { DirectMessageListenerContainer org.springframework.integration.amqp.config.DirectMessageListenerContainer = new DirectMessageListenerContainer ( ) ; org.springframework.integration.amqp.config.DirectMessageListenerContainer . setConsumersPerQueue ( this . java.lang.Integer ) ; org.springframework.integration.amqp.config.AbstractMessageListenerContainer = org.springframework.integration.amqp.config.DirectMessageListenerContainer ; } if ( this . org.springframework.integration.amqp.config.AcknowledgeMode != null ) { org.springframework.integration.amqp.config.AbstractMessageListenerContainer . setAcknowledgeMode ( this . org.springframework.integration.amqp.config.AcknowledgeMode ) ; } if ( ! ObjectUtils . isEmpty ( this . org.springframework.integration.amqp.config.Advice[] ) ) { org.springframework.integration.amqp.config.AbstractMessageListenerContainer . setAdviceChain ( this . org.springframework.integration.amqp.config.Advice[] ) ; } org.springframework.integration.amqp.config.AbstractMessageListenerContainer . setAutoStartup ( this . boolean ) ; org.springframework.integration.amqp.config.AbstractMessageListenerContainer . setChannelTransacted ( this . boolean ) ; org.springframework.integration.amqp.config.AbstractMessageListenerContainer . setConnectionFactory ( this . org.springframework.integration.amqp.config.ConnectionFactory ) ; if ( this . org.springframework.integration.amqp.config.ErrorHandler != null ) { org.springframework.integration.amqp.config.AbstractMessageListenerContainer . setErrorHandler ( this . org.springframework.integration.amqp.config.ErrorHandler ) ; } if ( this . java.lang.Boolean != null ) { org.springframework.integration.amqp.config.AbstractMessageListenerContainer . setExposeListenerChannel ( this . java.lang.Boolean ) ; } if ( this . org.springframework.integration.amqp.config.MessagePropertiesConverter != null ) { org.springframework.integration.amqp.config.AbstractMessageListenerContainer . setMessagePropertiesConverter ( this . org.springframework.integration.amqp.config.MessagePropertiesConverter ) ; } if ( this . java.lang.Integer != null ) { org.springframework.integration.amqp.config.AbstractMessageListenerContainer . setPhase ( this . java.lang.Integer ) ; } if ( this . java.lang.Integer != null ) { org.springframework.integration.amqp.config.AbstractMessageListenerContainer . setPrefetchCount ( this . java.lang.Integer ) ; } if ( this . java.lang.Long != null ) { org.springframework.integration.amqp.config.AbstractMessageListenerContainer . setRecoveryInterval ( this . java.lang.Long ) ; } if ( this . java.lang.Long != null ) { org.springframework.integration.amqp.config.AbstractMessageListenerContainer . setShutdownTimeout ( this . java.lang.Long ) ; } if ( this . java.util.concurrent.Executor != null ) { org.springframework.integration.amqp.config.AbstractMessageListenerContainer . setTaskExecutor ( this . java.util.concurrent.Executor ) ; } if ( this . org.springframework.integration.amqp.config.TransactionAttribute != null ) { org.springframework.integration.amqp.config.AbstractMessageListenerContainer . setTransactionAttribute ( this . org.springframework.integration.amqp.config.TransactionAttribute ) ; } if ( this . org.springframework.integration.amqp.config.PlatformTransactionManager != null ) { org.springframework.integration.amqp.config.AbstractMessageListenerContainer . setTransactionManager ( this . org.springframework.integration.amqp.config.PlatformTransactionManager ) ; } if ( this . java.lang.Boolean != null ) { org.springframework.integration.amqp.config.AbstractMessageListenerContainer . setMissingQueuesFatal ( this . java.lang.Boolean ) ; } return org.springframework.integration.amqp.config.AbstractMessageListenerContainer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . org.springframework.integration.amqp.config.AbstractAmqpChannel instanceof SmartLifecycle ) && ( ( SmartLifecycle ) this . org.springframework.integration.amqp.config.AbstractAmqpChannel ) . isAutoStartup ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( this . org.springframework.integration.amqp.config.AbstractAmqpChannel instanceof SmartLifecycle ) ? ( ( SmartLifecycle ) this . org.springframework.integration.amqp.config.AbstractAmqpChannel ) . getPhase ( ) : NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . org.springframework.integration.amqp.config.AbstractAmqpChannel instanceof Lifecycle ) && ( ( Lifecycle ) this . org.springframework.integration.amqp.config.AbstractAmqpChannel ) . isRunning ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.amqp.config.AbstractAmqpChannel instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.amqp.config.AbstractAmqpChannel ) . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.amqp.config.AbstractAmqpChannel instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.amqp.config.AbstractAmqpChannel ) . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { if ( this . org.springframework.integration.amqp.config.AbstractAmqpChannel instanceof SmartLifecycle ) { ( ( SmartLifecycle ) this . org.springframework.integration.amqp.config.AbstractAmqpChannel ) . stop ( java.lang.Runnable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( AbstractAmqpChannel org.springframework.integration.amqp.config.AbstractAmqpChannel ) throws java.lang.Exception { if ( org.springframework.integration.amqp.config.AbstractAmqpChannel instanceof DisposableBean ) { ( ( DisposableBean ) this . org.springframework.integration.amqp.config.AbstractAmqpChannel ) . destroy ( ) ; } }  <METHOD_END>
