<METHOD_START> @ Test public void void ( ) { Part org.springframework.data.gemfire.repository.query.Part = new Part ( STRING , org.springframework.data.gemfire.repository.query.PredicatesUnitTests.Person .class ) ; java.util.Iterator<java.lang.Integer> < java.lang.Integer > java.util.Iterator<java.lang.Integer> = java.util.Collections . java.util.List<java.lang.Integer> ( NUMBER ) . java.util.Iterator<java.lang.Integer> ( ) ; Predicate org.springframework.data.gemfire.repository.query.Predicate = new AtomicPredicate ( org.springframework.data.gemfire.repository.query.Part , java.util.Iterator<java.lang.Integer> ) ; assertThat ( org.springframework.data.gemfire.repository.query.Predicate . toString ( null ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Part org.springframework.data.gemfire.repository.query.Part = new Part ( STRING , org.springframework.data.gemfire.repository.query.PredicatesUnitTests.Person .class ) ; Part org.springframework.data.gemfire.repository.query.Part = new Part ( STRING , org.springframework.data.gemfire.repository.query.PredicatesUnitTests.Person .class ) ; java.util.Iterator<java.lang.Integer> < java.lang.Integer > java.util.Iterator<java.lang.Integer> = java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) . java.util.Iterator<java.lang.Integer> ( ) ; Predicate org.springframework.data.gemfire.repository.query.Predicate = Predicates . create ( org.springframework.data.gemfire.repository.query.Part , java.util.Iterator<java.lang.Integer> ) . and ( Predicates . create ( org.springframework.data.gemfire.repository.query.Part , java.util.Iterator<java.lang.Integer> ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.Predicate , is ( notNullValue ( Predicate .class ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.Predicate . toString ( null ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Part org.springframework.data.gemfire.repository.query.Part = new Part ( STRING , org.springframework.data.gemfire.repository.query.PredicatesUnitTests.Person .class ) ; Part org.springframework.data.gemfire.repository.query.Part = new Part ( STRING , org.springframework.data.gemfire.repository.query.PredicatesUnitTests.Person .class ) ; java.util.Iterator<java.lang.Integer> < java.lang.Integer > java.util.Iterator<java.lang.Integer> = java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) . java.util.Iterator<java.lang.Integer> ( ) ; Predicate org.springframework.data.gemfire.repository.query.Predicate = Predicates . create ( org.springframework.data.gemfire.repository.query.Part , java.util.Iterator<java.lang.Integer> ) . or ( Predicates . create ( org.springframework.data.gemfire.repository.query.Part , java.util.Iterator<java.lang.Integer> ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.Predicate , is ( notNullValue ( Predicate .class ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.Predicate . toString ( null ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Part org.springframework.data.gemfire.repository.query.Part = new Part ( STRING , org.springframework.data.gemfire.repository.query.PredicatesUnitTests.User .class ) ; java.util.Iterator<java.lang.Integer> < java.lang.Integer > java.util.Iterator<java.lang.Integer> = java.util.Collections . java.util.List<java.lang.Integer> ( NUMBER ) . java.util.Iterator<java.lang.Integer> ( ) ; Predicates org.springframework.data.gemfire.repository.query.Predicates = Predicates . create ( org.springframework.data.gemfire.repository.query.Part , java.util.Iterator<java.lang.Integer> ) ; assertThat ( org.springframework.data.gemfire.repository.query.Predicates , is ( notNullValue ( Predicate .class ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.Predicates . toString ( STRING ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Part org.springframework.data.gemfire.repository.query.Part = new Part ( STRING , org.springframework.data.gemfire.repository.query.PredicatesUnitTests.Person .class ) ; Part org.springframework.data.gemfire.repository.query.Part = new Part ( STRING , org.springframework.data.gemfire.repository.query.PredicatesUnitTests.Person .class ) ; java.util.Iterator<java.lang.Integer> < java.lang.Integer > java.util.Iterator<java.lang.Integer> = java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) . java.util.Iterator<java.lang.Integer> ( ) ; Predicate org.springframework.data.gemfire.repository.query.Predicate = Predicates . create ( org.springframework.data.gemfire.repository.query.Part , java.util.Iterator<java.lang.Integer> ) . and ( Predicates . create ( org.springframework.data.gemfire.repository.query.Part , java.util.Iterator<java.lang.Integer> ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.Predicate , is ( notNullValue ( Predicate .class ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.Predicate . toString ( STRING ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
