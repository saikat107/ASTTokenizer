<METHOD_START> public void ( ProxyMethodInvocation org.springframework.aop.aspectj.ProxyMethodInvocation ) { Assert . notNull ( org.springframework.aop.aspectj.ProxyMethodInvocation , STRING ) ; this . org.springframework.aop.aspectj.ProxyMethodInvocation = org.springframework.aop.aspectj.ProxyMethodInvocation ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AroundClosure org.springframework.aop.aspectj.AroundClosure ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { return this . org.springframework.aop.aspectj.ProxyMethodInvocation . invocableClone ( ) . proceed ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { Assert . notNull ( java.lang.Object[] , STRING ) ; if ( java.lang.Object[] . int != this . org.springframework.aop.aspectj.ProxyMethodInvocation . getArguments ( ) . length ) { throw new java.lang.IllegalArgumentException ( STRING + this . org.springframework.aop.aspectj.ProxyMethodInvocation . getArguments ( ) . length + STRING + STRING + java.lang.Object[] . int + STRING ) ; } this . org.springframework.aop.aspectj.ProxyMethodInvocation . setArguments ( java.lang.Object[] ) ; return this . org.springframework.aop.aspectj.ProxyMethodInvocation . invocableClone ( java.lang.Object[] ) . proceed ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . org.springframework.aop.aspectj.ProxyMethodInvocation . getProxy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . org.springframework.aop.aspectj.ProxyMethodInvocation . getThis ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object [] java.lang.Object[] ( ) { if ( this . java.lang.Object[] == null ) { java.lang.Object [] java.lang.Object[] = this . org.springframework.aop.aspectj.ProxyMethodInvocation . getArguments ( ) ; this . java.lang.Object[] = new java.lang.Object [ java.lang.Object[] . int ] ; java.lang.System . void ( java.lang.Object[] , NUMBER , this . java.lang.Object[] , NUMBER , java.lang.Object[] . int ) ; } return this . java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.aspectj.Signature org.springframework.aop.aspectj.Signature ( ) { if ( this . org.springframework.aop.aspectj.Signature == null ) { this . org.springframework.aop.aspectj.Signature = new org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.MethodSignatureImpl ( ) ; } return org.springframework.aop.aspectj.Signature ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.aspectj.SourceLocation org.springframework.aop.aspectj.SourceLocation ( ) { if ( this . org.springframework.aop.aspectj.SourceLocation == null ) { this . org.springframework.aop.aspectj.SourceLocation = new org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.SourceLocationImpl ( ) ; } return this . org.springframework.aop.aspectj.SourceLocation ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ProceedingJoinPoint . METHOD_EXECUTION ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public JoinPoint . JoinPoint.StaticPart JoinPoint.StaticPart ( ) { return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + org.springframework.aop.aspectj.Signature ( ) . toShortString ( ) + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + org.springframework.aop.aspectj.Signature ( ) . toLongString ( ) + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + org.springframework.aop.aspectj.Signature ( ) . toString ( ) + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.aop.aspectj.ProxyMethodInvocation . getMethod ( ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return org.springframework.aop.aspectj.ProxyMethodInvocation . getMethod ( ) . getModifiers ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.aop.aspectj.ProxyMethodInvocation . getMethod ( ) . getDeclaringClass ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.aop.aspectj.ProxyMethodInvocation . getMethod ( ) . getDeclaringClass ( ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.aop.aspectj.ProxyMethodInvocation . getMethod ( ) . getReturnType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return org.springframework.aop.aspectj.ProxyMethodInvocation . getMethod ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return org.springframework.aop.aspectj.ProxyMethodInvocation . getMethod ( ) . getParameterTypes ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { if ( this . java.lang.String[] == null ) { this . java.lang.String[] = org.springframework.aop.aspectj.ParameterNameDiscoverer . getParameterNames ( java.lang.reflect.Method ( ) ) ; } return this . java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return org.springframework.aop.aspectj.ProxyMethodInvocation . getMethod ( ) . getExceptionTypes ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ( false , false , false , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ( true , true , true , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ( false , true , false , true ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( boolean boolean , boolean boolean , boolean boolean , boolean boolean ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; if ( boolean ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.reflect.Modifier . java.lang.String ( int ( ) ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } if ( boolean ) { void ( java.lang.StringBuilder , java.lang.Class<?> ( ) , boolean ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } void ( java.lang.StringBuilder , java.lang.Class<?> ( ) , boolean ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.reflect.Method ( ) . java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.Class<?>[] ( ) ; void ( java.lang.StringBuilder , java.lang.Class<?>[] , boolean , boolean ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.StringBuilder java.lang.StringBuilder , java.lang.Class<?> < ? > [] java.lang.Class<?>[] , boolean boolean , boolean boolean ) { if ( boolean ) { for ( int int = java.lang.Class<?>[] . int , int = NUMBER ; int < int ; int ++ ) { void ( java.lang.StringBuilder , java.lang.Class<?>[] [ int ] , boolean ) ; if ( int < int - NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } } else { if ( java.lang.Class<?>[] . int != NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.StringBuilder java.lang.StringBuilder , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { if ( java.lang.Class<> . boolean ( ) ) { void ( java.lang.StringBuilder , java.lang.Class<> . java.lang.Class<?> ( ) , boolean ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( boolean ? java.lang.Class<> . java.lang.String ( ) : java.lang.Class<> . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { if ( org.springframework.aop.aspectj.ProxyMethodInvocation . getThis ( ) == null ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; } return org.springframework.aop.aspectj.ProxyMethodInvocation . getThis ( ) . getClass ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public int int ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
