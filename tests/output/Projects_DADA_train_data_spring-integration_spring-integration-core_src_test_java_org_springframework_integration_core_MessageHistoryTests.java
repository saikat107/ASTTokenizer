<METHOD_START> @ Test public void void ( ) { GenericMessage < java.lang.String > org.springframework.integration.core.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; assertNull ( MessageHistory . read ( org.springframework.integration.core.GenericMessage<java.lang.String> ) ) ; Message < java.lang.String > org.springframework.integration.core.Message<java.lang.String> = MessageHistory . write ( org.springframework.integration.core.GenericMessage<java.lang.String> , new org.springframework.integration.core.MessageHistoryTests.TestComponent ( NUMBER ) ) ; MessageHistory org.springframework.integration.core.MessageHistory = MessageHistory . read ( org.springframework.integration.core.Message<java.lang.String> ) ; assertNotNull ( org.springframework.integration.core.MessageHistory ) ; assertEquals ( STRING , org.springframework.integration.core.MessageHistory . toString ( ) ) ; Message < java.lang.String > org.springframework.integration.core.Message<java.lang.String> = MessageHistory . write ( org.springframework.integration.core.Message<java.lang.String> , new org.springframework.integration.core.MessageHistoryTests.TestComponent ( NUMBER ) ) ; MessageHistory org.springframework.integration.core.MessageHistory = MessageHistory . read ( org.springframework.integration.core.Message<java.lang.String> ) ; assertNotNull ( org.springframework.integration.core.MessageHistory ) ; assertEquals ( STRING , org.springframework.integration.core.MessageHistory . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.UnsupportedOperationException .class ) public void void ( ) { Message < ? > org.springframework.integration.core.Message<?> = MessageHistory . write ( MessageBuilder . withPayload ( STRING ) . build ( ) , new org.springframework.integration.core.MessageHistoryTests.TestComponent ( NUMBER ) ) ; MessageHistory org.springframework.integration.core.MessageHistory = MessageHistory . read ( org.springframework.integration.core.Message<> ) ; org.springframework.integration.core.MessageHistory . add ( new java.util.Properties ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutableMessage < java.lang.String > org.springframework.integration.core.MutableMessage<java.lang.String> = new MutableMessage <> ( STRING ) ; assertNull ( MessageHistory . read ( org.springframework.integration.core.MutableMessage<java.lang.String> ) ) ; Message < java.lang.String > org.springframework.integration.core.Message<java.lang.String> = MessageHistory . write ( org.springframework.integration.core.MutableMessage<java.lang.String> , new org.springframework.integration.core.MessageHistoryTests.TestComponent ( NUMBER ) ) ; assertThat ( org.springframework.integration.core.Message<java.lang.String> , instanceOf ( MutableMessage .class ) ) ; assertSame ( org.springframework.integration.core.MutableMessage<java.lang.String> , org.springframework.integration.core.Message<java.lang.String> ) ; MessageHistory org.springframework.integration.core.MessageHistory = MessageHistory . read ( org.springframework.integration.core.Message<java.lang.String> ) ; assertNotNull ( org.springframework.integration.core.MessageHistory ) ; assertEquals ( STRING , org.springframework.integration.core.MessageHistory . toString ( ) ) ; Message < java.lang.String > org.springframework.integration.core.Message<java.lang.String> = MessageHistory . write ( org.springframework.integration.core.Message<java.lang.String> , new org.springframework.integration.core.MessageHistoryTests.TestComponent ( NUMBER ) ) ; assertSame ( org.springframework.integration.core.MutableMessage<java.lang.String> , org.springframework.integration.core.Message<java.lang.String> ) ; MessageHistory org.springframework.integration.core.MessageHistory = MessageHistory . read ( org.springframework.integration.core.Message<java.lang.String> ) ; assertNotNull ( org.springframework.integration.core.MessageHistory ) ; assertEquals ( STRING , org.springframework.integration.core.MessageHistory . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( ) ; ErrorMessage org.springframework.integration.core.ErrorMessage = new ErrorMessage ( java.lang.RuntimeException ) ; assertNull ( MessageHistory . read ( org.springframework.integration.core.ErrorMessage ) ) ; Message < java.lang.Throwable > org.springframework.integration.core.Message<java.lang.Throwable> = MessageHistory . write ( org.springframework.integration.core.ErrorMessage , new org.springframework.integration.core.MessageHistoryTests.TestComponent ( NUMBER ) ) ; assertThat ( org.springframework.integration.core.Message<java.lang.Throwable> , instanceOf ( ErrorMessage .class ) ) ; assertNotSame ( org.springframework.integration.core.ErrorMessage , org.springframework.integration.core.Message<java.lang.Throwable> ) ; assertSame ( org.springframework.integration.core.ErrorMessage . getPayload ( ) , org.springframework.integration.core.Message<java.lang.Throwable> . getPayload ( ) ) ; MessageHistory org.springframework.integration.core.MessageHistory = MessageHistory . read ( org.springframework.integration.core.Message<java.lang.Throwable> ) ; assertNotNull ( org.springframework.integration.core.MessageHistory ) ; assertEquals ( STRING , org.springframework.integration.core.MessageHistory . toString ( ) ) ; Message < java.lang.Throwable > org.springframework.integration.core.Message<java.lang.Throwable> = MessageHistory . write ( org.springframework.integration.core.Message<java.lang.Throwable> , new org.springframework.integration.core.MessageHistoryTests.TestComponent ( NUMBER ) ) ; assertThat ( org.springframework.integration.core.Message<java.lang.Throwable> , instanceOf ( ErrorMessage .class ) ) ; assertNotSame ( org.springframework.integration.core.ErrorMessage , org.springframework.integration.core.Message<java.lang.Throwable> ) ; assertNotSame ( org.springframework.integration.core.Message<java.lang.Throwable> , org.springframework.integration.core.Message<java.lang.Throwable> ) ; assertSame ( org.springframework.integration.core.ErrorMessage . getPayload ( ) , org.springframework.integration.core.Message<java.lang.Throwable> . getPayload ( ) ) ; MessageHistory org.springframework.integration.core.MessageHistory = MessageHistory . read ( org.springframework.integration.core.Message<java.lang.Throwable> ) ; assertNotNull ( org.springframework.integration.core.MessageHistory ) ; assertEquals ( STRING , org.springframework.integration.core.MessageHistory . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.core.Message<?> = new GenericMessage <> ( STRING ) ; AdviceMessage < java.lang.String > org.springframework.integration.core.AdviceMessage<java.lang.String> = new AdviceMessage <> ( STRING , org.springframework.integration.core.Message<> ) ; assertNull ( MessageHistory . read ( org.springframework.integration.core.AdviceMessage<java.lang.String> ) ) ; Message < java.lang.String > org.springframework.integration.core.Message<java.lang.String> = MessageHistory . write ( org.springframework.integration.core.AdviceMessage<java.lang.String> , new org.springframework.integration.core.MessageHistoryTests.TestComponent ( NUMBER ) ) ; assertThat ( org.springframework.integration.core.Message<java.lang.String> , instanceOf ( AdviceMessage .class ) ) ; assertNotSame ( org.springframework.integration.core.AdviceMessage<java.lang.String> , org.springframework.integration.core.Message<java.lang.String> ) ; assertSame ( org.springframework.integration.core.AdviceMessage<java.lang.String> . getPayload ( ) , org.springframework.integration.core.Message<java.lang.String> . getPayload ( ) ) ; assertSame ( org.springframework.integration.core.AdviceMessage<java.lang.String> . getInputMessage ( ) , ( ( AdviceMessage < ? > ) org.springframework.integration.core.Message<java.lang.String> ) . getInputMessage ( ) ) ; MessageHistory org.springframework.integration.core.MessageHistory = MessageHistory . read ( org.springframework.integration.core.Message<java.lang.String> ) ; assertNotNull ( org.springframework.integration.core.MessageHistory ) ; assertEquals ( STRING , org.springframework.integration.core.MessageHistory . toString ( ) ) ; Message < java.lang.String > org.springframework.integration.core.Message<java.lang.String> = MessageHistory . write ( org.springframework.integration.core.Message<java.lang.String> , new org.springframework.integration.core.MessageHistoryTests.TestComponent ( NUMBER ) ) ; assertThat ( org.springframework.integration.core.Message<java.lang.String> , instanceOf ( AdviceMessage .class ) ) ; assertNotSame ( org.springframework.integration.core.AdviceMessage<java.lang.String> , org.springframework.integration.core.Message<java.lang.String> ) ; assertSame ( org.springframework.integration.core.AdviceMessage<java.lang.String> . getPayload ( ) , org.springframework.integration.core.Message<java.lang.String> . getPayload ( ) ) ; assertSame ( org.springframework.integration.core.AdviceMessage<java.lang.String> . getInputMessage ( ) , ( ( AdviceMessage < ? > ) org.springframework.integration.core.Message<java.lang.String> ) . getInputMessage ( ) ) ; assertNotSame ( org.springframework.integration.core.Message<java.lang.String> , org.springframework.integration.core.Message<java.lang.String> ) ; MessageHistory org.springframework.integration.core.MessageHistory = MessageHistory . read ( org.springframework.integration.core.Message<java.lang.String> ) ; assertNotNull ( org.springframework.integration.core.MessageHistory ) ; assertEquals ( STRING , org.springframework.integration.core.MessageHistory . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . int ; }  <METHOD_END>
