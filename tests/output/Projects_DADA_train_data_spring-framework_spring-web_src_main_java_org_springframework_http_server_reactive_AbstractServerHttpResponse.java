<METHOD_START> public void ( DataBufferFactory org.springframework.http.server.reactive.DataBufferFactory ) { Assert . notNull ( org.springframework.http.server.reactive.DataBufferFactory , STRING ) ; this . org.springframework.http.server.reactive.DataBufferFactory = org.springframework.http.server.reactive.DataBufferFactory ; this . org.springframework.http.server.reactive.HttpHeaders = new HttpHeaders ( ) ; this . org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.ResponseCookie> = new LinkedMultiValueMap <> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.http.server.reactive.DataBufferFactory org.springframework.http.server.reactive.DataBufferFactory ( ) { return this . org.springframework.http.server.reactive.DataBufferFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpStatus org.springframework.http.server.reactive.HttpStatus ) { Assert . notNull ( org.springframework.http.server.reactive.HttpStatus , STRING ) ; if ( this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractServerHttpResponse.State> . org.springframework.http.server.reactive.AbstractServerHttpResponse.State ( ) == org.springframework.http.server.reactive.AbstractServerHttpResponse.State . org.springframework.http.server.reactive.AbstractServerHttpResponse.State ) { if ( org.springframework.http.server.reactive.Log . isDebugEnabled ( ) ) { org.springframework.http.server.reactive.Log . debug ( STRING + org.springframework.http.server.reactive.HttpStatus . toString ( ) + STRING ) ; } return false ; } else { this . org.springframework.http.server.reactive.HttpStatus = org.springframework.http.server.reactive.HttpStatus ; return true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.HttpStatus org.springframework.http.server.reactive.HttpStatus ( ) { return this . org.springframework.http.server.reactive.HttpStatus ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.HttpHeaders org.springframework.http.server.reactive.HttpHeaders ( ) { return ( this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractServerHttpResponse.State> . org.springframework.http.server.reactive.AbstractServerHttpResponse.State ( ) == org.springframework.http.server.reactive.AbstractServerHttpResponse.State . org.springframework.http.server.reactive.AbstractServerHttpResponse.State ? HttpHeaders . readOnlyHttpHeaders ( this . org.springframework.http.server.reactive.HttpHeaders ) : this . org.springframework.http.server.reactive.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.ResponseCookie> < java.lang.String , ResponseCookie > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.ResponseCookie> ( ) { return ( this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractServerHttpResponse.State> . org.springframework.http.server.reactive.AbstractServerHttpResponse.State ( ) == org.springframework.http.server.reactive.AbstractServerHttpResponse.State . org.springframework.http.server.reactive.AbstractServerHttpResponse.State ? CollectionUtils . unmodifiableMultiValueMap ( this . org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.ResponseCookie> ) : this . org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.ResponseCookie> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return ( this . java.util.function.Function<java.lang.String,java.lang.String> != null ? this . java.util.function.Function<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) : java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.function.Function<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.function.Function<java.lang.String,java.lang.String> ) { this . java.util.function.Function<java.lang.String,java.lang.String> = ( this . java.util.function.Function<java.lang.String,java.lang.String> != null ? this . java.util.function.Function<java.lang.String,java.lang.String> . java.util.function.Function<java.lang.String,java.lang.String> ( java.util.function.Function<java.lang.String,java.lang.String> ) : java.util.function.Function<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.function.Supplier<? extends org.springframework.http.server.reactive.Mono<java.lang.Void>> < ? extends Mono < java.lang.Void > > java.util.function.Supplier<? extends org.springframework.http.server.reactive.Mono<java.lang.Void>> ) { if ( java.util.function.Supplier<> != null ) { this . java.util.List<java.util.function.Supplier<? extends org.springframework.http.server.reactive.Mono<java.lang.Void>>> . add ( java.util.function.Supplier<> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractServerHttpResponse.State> . org.springframework.http.server.reactive.AbstractServerHttpResponse.State ( ) != org.springframework.http.server.reactive.AbstractServerHttpResponse.State . org.springframework.http.server.reactive.AbstractServerHttpResponse.State ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( Publisher < ? extends DataBuffer > org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer> ) { return new ChannelSendOperator <> ( org.springframework.http.server.reactive.Publisher<> , writePublisher -> doCommit ( ( ) writeWithInternal ( writePublisher ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( Publisher < ? extends Publisher < ? extends DataBuffer > > org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer>> ) { return new ChannelSendOperator <> ( org.springframework.http.server.reactive.Publisher<> , writePublisher -> doCommit ( ( ) writeAndFlushWithInternal ( writePublisher ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( ) { return org.springframework.http.server.reactive.Mono<java.lang.Void> ( null ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( ) { return org.springframework.http.server.reactive.Mono<java.lang.Void> ( null ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( java.util.function.Supplier<? extends org.springframework.http.server.reactive.Mono<java.lang.Void>> < ? extends Mono < java.lang.Void > > java.util.function.Supplier<? extends org.springframework.http.server.reactive.Mono<java.lang.Void>> ) { if ( ! this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractServerHttpResponse.State> . boolean ( org.springframework.http.server.reactive.AbstractServerHttpResponse.State . org.springframework.http.server.reactive.AbstractServerHttpResponse.State , org.springframework.http.server.reactive.AbstractServerHttpResponse.State . org.springframework.http.server.reactive.AbstractServerHttpResponse.State ) ) { if ( org.springframework.http.server.reactive.Log . isDebugEnabled ( ) ) { org.springframework.http.server.reactive.Log . debug ( STRING ) ; } return Mono . empty ( ) ; } this . java.util.List<java.util.function.Supplier<? extends org.springframework.http.server.reactive.Mono<java.lang.Void>>> . add ( ( ) { applyStatusCode ( ) ; applyHeaders ( ) ; applyCookies ( ) ; this . state . set ( State . COMMITTED ) ; return Mono . empty ( ) ; } ) ; if ( java.util.function.Supplier<> != null ) { this . java.util.List<java.util.function.Supplier<? extends org.springframework.http.server.reactive.Mono<java.lang.Void>>> . add ( java.util.function.Supplier<> ) ; } java.util.List<? extends org.springframework.http.server.reactive.Mono<java.lang.Void>> < ? extends Mono < java.lang.Void > > java.util.List<? extends org.springframework.http.server.reactive.Mono<java.lang.Void>> = this . java.util.List<java.util.function.Supplier<? extends org.springframework.http.server.reactive.Mono<java.lang.Void>>> . stream ( ) . map ( java.util.function.Supplier :: get ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; return Flux . concat ( java.util.List<> ) . next ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( Publisher < ? extends DataBuffer > org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer> );  <METHOD_END>
<METHOD_START> protected abstract org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( Publisher < ? extends Publisher < ? extends DataBuffer > > org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer>> );  <METHOD_END>
<METHOD_START> protected abstract void void ( )  <METHOD_END>
<METHOD_START> protected abstract void void ( )  <METHOD_END>
<METHOD_START> protected abstract void void ( )  <METHOD_END>
