<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . java.lang.reflect.Method = org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.SampleRepo .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; this . org.springframework.data.repository.query.EvaluationContextProvider = new ExtensionAwareEvaluationContextProvider ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.data.repository.query.EvaluationContextProvider = new ExtensionAwareEvaluationContextProvider ( java.util.Collections . java.util.List<T> ( new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.DummyExtension ( STRING , STRING ) ) ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.repository.query.EvaluationContextExtension> < EvaluationContextExtension > java.util.List<org.springframework.data.repository.query.EvaluationContextExtension> = new java.util.ArrayList<org.springframework.data.repository.query.EvaluationContextExtension> <> ( ) ; java.util.List<org.springframework.data.repository.query.EvaluationContextExtension> . add ( new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.DummyExtension ( STRING , STRING ) ) ; java.util.List<org.springframework.data.repository.query.EvaluationContextExtension> . add ( new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.DummyExtension ( STRING , STRING ) ) ; this . org.springframework.data.repository.query.EvaluationContextProvider = new ExtensionAwareEvaluationContextProvider ( java.util.List<org.springframework.data.repository.query.EvaluationContextExtension> ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.repository.query.EvaluationContextExtension> < EvaluationContextExtension > java.util.List<org.springframework.data.repository.query.EvaluationContextExtension> = new java.util.ArrayList<org.springframework.data.repository.query.EvaluationContextExtension> <> ( ) ; java.util.List<org.springframework.data.repository.query.EvaluationContextExtension> . add ( new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.DummyExtension ( STRING , STRING ) ) ; java.util.List<org.springframework.data.repository.query.EvaluationContextExtension> . add ( new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.DummyExtension ( STRING , STRING ) ) ; this . org.springframework.data.repository.query.EvaluationContextProvider = new ExtensionAwareEvaluationContextProvider ( java.util.List<org.springframework.data.repository.query.EvaluationContextExtension> ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.data.repository.query.EvaluationContextProvider = new ExtensionAwareEvaluationContextProvider ( java.util.Collections . java.util.List<T> ( new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.DummyExtension ( STRING , STRING ) ) ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.data.repository.query.EvaluationContextProvider = new ExtensionAwareEvaluationContextProvider ( java.util.Collections . java.util.List<T> ( new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.DummyExtension ( STRING , STRING ) ) ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . java.lang.reflect.Method = org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.SampleRepo .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; PageRequest org.springframework.data.repository.query.PageRequest = PageRequest . of ( NUMBER , NUMBER , Sort . by ( Direction . DESC , STRING ) ) ; assertThat ( java.lang.Object ( STRING , new java.lang.Object [] { STRING , org.springframework.data.repository.query.PageRequest } ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.lang.Object ( STRING , new java.lang.Object [] { STRING , org.springframework.data.repository.query.PageRequest } ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.lang.Object ( STRING , new java.lang.Object [] { STRING , org.springframework.data.repository.query.PageRequest } ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . java.lang.reflect.Method = org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.SampleRepo .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Sort .class ) ; Sort org.springframework.data.repository.query.Sort = Sort . by ( Direction . DESC , STRING ) ; assertThat ( java.lang.Object ( STRING , new java.lang.Object [] { STRING , org.springframework.data.repository.query.Sort } ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . java.lang.reflect.Method = org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.SampleRepo .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Sort .class ) ; assertThat ( java.lang.Object ( STRING , new java.lang.Object [] { STRING , null } ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.data.repository.query.EvaluationContextProvider = new ExtensionAwareEvaluationContextProvider ( java.util.Collections . java.util.List<T> ( new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.DummyExtension ( STRING , STRING ) { @ java.lang.Override public org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 ( ) { return new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 ( ) ; } } ) ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( true ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( true ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 ( ) { return new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.data.repository.query.EvaluationContextProvider = new ExtensionAwareEvaluationContextProvider ( java.util.Arrays . java.util.List<T> ( new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.DummyExtension ( STRING , STRING ) { @ java.lang.Override public org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 ( ) { return new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 ( ) ; } } , new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.DummyExtension ( STRING , STRING ) { @ java.lang.Override public org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject2 org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject2 ( ) { return new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject2 ( ) ; } } ) ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( true ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 ( ) { return new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject2 org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject2 ( ) { return new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject2 ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; this . org.springframework.data.repository.query.EvaluationContextProvider = new ExtensionAwareEvaluationContextProvider ( java.util.Collections . java.util.List<T> ( new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.DummyExtension ( STRING , STRING ) { @ java.lang.Override public org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 ( ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; return new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 ( ) ; } } ) ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( true ) ; assertThat ( java.util.concurrent.atomic.AtomicInteger . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 ( ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; return new org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.CustomExtensionRootObject1 ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap <> ( super. getProperties ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> < java.lang.String , Function > java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> ( ) { java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> < java.lang.String , Function > java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> = new java.util.HashMap <> ( super. getFunctions ( ) ) ; try { java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> . put ( STRING , new Function ( java.lang.Class<? extends org.springframework.data.repository.query.ExtensionAwareEvaluationContextProviderUnitTests.DummyExtension> ( ) . java.lang.reflect.Method ( STRING ) ) ) ; return java.util.Map<java.lang.String,org.springframework.data.repository.query.Function> ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return java.lang.Object ( java.lang.String , new java.lang.Object [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] ) { DefaultParameters org.springframework.data.repository.query.DefaultParameters = new DefaultParameters ( java.lang.reflect.Method ) ; EvaluationContext org.springframework.data.repository.query.EvaluationContext = org.springframework.data.repository.query.EvaluationContextProvider . getEvaluationContext ( org.springframework.data.repository.query.DefaultParameters , java.lang.Object[] ) ; return new SpelExpressionParser ( ) . parseExpression ( java.lang.String ) . getValue ( org.springframework.data.repository.query.EvaluationContext ) ; }  <METHOD_END>
<METHOD_START> java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( @ Param ( STRING ) java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( @ Param ( STRING ) java.lang.String java.lang.String , Pageable org.springframework.data.repository.query.Pageable );  <METHOD_END>
<METHOD_START> java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( @ Param ( STRING ) java.lang.String java.lang.String , Sort org.springframework.data.repository.query.Sort );  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
