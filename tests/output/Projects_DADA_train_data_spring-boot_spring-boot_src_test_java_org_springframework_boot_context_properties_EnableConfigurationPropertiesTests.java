<METHOD_START> @ After public void void ( ) { java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestConfiguration .class ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . containsBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class . java.lang.String ( ) ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) . name ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestConfiguration .class ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) . name ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedConfiguration .class ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedProperties .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedProperties .class ) . name ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedProperties .class ) . nested . name ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedConfiguration .class ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedProperties .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedProperties .class ) . name ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedProperties .class ) . nested . name ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedConfiguration .class ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedProperties .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedProperties .class ) . name ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedProperties .class ) . nested . name ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.StrictTestConfiguration .class ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.StrictTestProperties .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) . name ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.EmbeddedTestConfiguration .class ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.EmbeddedTestProperties .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) . name ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.EmbeddedTestConfiguration .class ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.EmbeddedTestProperties .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) . name ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.IgnoreNestedTestConfiguration .class ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.IgnoreNestedTestProperties .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) . name ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.ExceptionIfInvalidTestConfiguration .class ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.context.properties.ExpectedException . expectCause ( Matchers .< java.lang.Throwable > instanceOf ( BindException .class ) ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.IgnoredIfInvalidButNotValidatedTestConfiguration .class ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.IgnoredIfInvalidButNotValidatedTestProperties org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.IgnoredIfInvalidButNotValidatedTestProperties = this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.IgnoredIfInvalidButNotValidatedTestProperties .class ) ; assertThat ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.IgnoredIfInvalidButNotValidatedTestProperties . java.lang.String ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedConfiguration .class ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedProperties .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedProperties .class ) . name ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedProperties .class ) . nested . name ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.DerivedConfiguration .class ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.DerivedProperties .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.BaseProperties .class ) . name ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestConfiguration .class ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) . getArray ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestConfiguration .class ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING , STRING , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) . getList ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestConfiguration .class ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<java.lang.String> . boolean ( STRING + int + STRING + int ) ; } TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [] {} ) ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) . getList ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.InvalidConfiguration .class ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.context.properties.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.context.properties.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.MoreConfiguration .class ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.MoreProperties .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.MoreProperties .class ) . name ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestConfiguration .class , org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.DefaultXmlConfiguration .class ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; java.lang.String [] java.lang.String[] = this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) ; assertThat ( java.lang.String[] ) . as ( STRING ) . containsExactly ( java.lang.String[] ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) . name ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.DefaultConfiguration .class ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; java.lang.String [] java.lang.String[] = this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) ; assertThat ( java.lang.String[] ) . as ( STRING ) . containsExactly ( java.lang.String[] ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) . name ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.MoreConfiguration .class , org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestConfiguration .class ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) . length ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.MoreProperties .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.boot.context.properties.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestConfiguration .class ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING ) ; org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . setParent ( org.springframework.boot.context.properties.AnnotationConfigApplicationContext ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestConfiguration .class , org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestConsumer .class ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) . length ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) . length ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestConsumer .class ) . getName ( ) ) . isEqualTo ( STRING ) ; org.springframework.boot.context.properties.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.boot.context.properties.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING ) ; org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestConfiguration .class ) ; org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . setParent ( org.springframework.boot.context.properties.AnnotationConfigApplicationContext ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestConsumer .class ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) . length ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties .class ) . length ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestConsumer .class ) . getName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.SystemExampleConfig .class ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.SystemEnvVar .class ) . getVal ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.ExampleConfig .class ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.External .class ) . getName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.AnotherExampleConfig .class ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . containsBean ( STRING + org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.External .class . java.lang.String ( ) ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.External .class ) . getName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.FurtherExampleConfig .class ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.External .class ) . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.Another .class ) . getName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.ResourceBindingPropertiesWithMap .class ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.ResourceBindingPropertiesWithMap org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.ResourceBindingPropertiesWithMap = this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.ResourceBindingPropertiesWithMap .class ) ; assertThat ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.ResourceBindingPropertiesWithMap . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.ResourceBindingPropertiesWithMap . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestConfigurationWithAnnotatedBean .class ) ; this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.External .class ) . getName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { MutablePropertySources org.springframework.boot.context.properties.MutablePropertySources = this . org.springframework.boot.context.properties.AnnotationConfigApplicationContext . getEnvironment ( ) . getPropertySources ( ) ; org.springframework.boot.context.properties.MutablePropertySources . remove ( STRING ) ; org.springframework.boot.context.properties.MutablePropertySources . remove ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConfigurationProperties ( prefix = STRING ) public org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.External org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.External ( ) { return new org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.External ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties ( ) { org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties = new org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties ( ) ; org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties . void ( STRING ) ; return org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.External org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.External ( ) { return new org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.External ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { assertThat ( this . org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.TestProperties . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedProperties.Nested org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedProperties.Nested ( ) { return this . org.springframework.boot.context.properties.EnableConfigurationPropertiesTests.NestedProperties.Nested ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int ... int[] ) { this . int[] = int[] ; }  <METHOD_END>
<METHOD_START> public int [] int[] ( ) { return this . int[] ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ( ) { return this . java.util.List<java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return this . java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
