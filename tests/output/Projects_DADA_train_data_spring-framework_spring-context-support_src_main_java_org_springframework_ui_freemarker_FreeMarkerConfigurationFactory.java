<METHOD_START> public void void ( Resource org.springframework.ui.freemarker.Resource ) { org.springframework.ui.freemarker.Resource = org.springframework.ui.freemarker.Resource ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( TemplateLoader ... org.springframework.ui.freemarker.TemplateLoader[] ) { this . java.util.List<org.springframework.ui.freemarker.TemplateLoader> = java.util.Arrays . java.util.List ( org.springframework.ui.freemarker.TemplateLoader[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( TemplateLoader ... org.springframework.ui.freemarker.TemplateLoader[] ) { this . java.util.List<org.springframework.ui.freemarker.TemplateLoader> = java.util.Arrays . java.util.List ( org.springframework.ui.freemarker.TemplateLoader[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String[] = new java.lang.String [] { java.lang.String } ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( ResourceLoader org.springframework.ui.freemarker.ResourceLoader ) { this . org.springframework.ui.freemarker.ResourceLoader = org.springframework.ui.freemarker.ResourceLoader ; }  <METHOD_END>
<METHOD_START> protected org.springframework.ui.freemarker.ResourceLoader org.springframework.ui.freemarker.ResourceLoader ( ) { return this . org.springframework.ui.freemarker.ResourceLoader ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public org.springframework.ui.freemarker.Configuration org.springframework.ui.freemarker.Configuration ( ) java.io.IOException , org.springframework.ui.freemarker.TemplateException { Configuration org.springframework.ui.freemarker.Configuration = org.springframework.ui.freemarker.Configuration ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; if ( this . org.springframework.ui.freemarker.Resource != null ) { if ( org.springframework.ui.freemarker.Log . isInfoEnabled ( ) ) { org.springframework.ui.freemarker.Log . info ( STRING + this . org.springframework.ui.freemarker.Resource ) ; } PropertiesLoaderUtils . fillProperties ( java.util.Properties , this . org.springframework.ui.freemarker.Resource ) ; } if ( this . java.util.Properties != null ) { java.util.Properties . void ( this . java.util.Properties ) ; } if ( ! java.util.Properties . boolean ( ) ) { org.springframework.ui.freemarker.Configuration . setSettings ( java.util.Properties ) ; } if ( ! CollectionUtils . isEmpty ( this . java.util.Map<java.lang.String,java.lang.Object> ) ) { org.springframework.ui.freemarker.Configuration . setAllSharedVariables ( new SimpleHash ( this . java.util.Map<java.lang.String,java.lang.Object> , org.springframework.ui.freemarker.Configuration . getObjectWrapper ( ) ) ) ; } if ( this . java.lang.String != null ) { org.springframework.ui.freemarker.Configuration . setDefaultEncoding ( this . java.lang.String ) ; } java.util.List<org.springframework.ui.freemarker.TemplateLoader> < TemplateLoader > java.util.List<org.springframework.ui.freemarker.TemplateLoader> = new java.util.LinkedList <> ( this . java.util.List<org.springframework.ui.freemarker.TemplateLoader> ) ; if ( this . java.util.List<org.springframework.ui.freemarker.TemplateLoader> != null ) { java.util.List<org.springframework.ui.freemarker.TemplateLoader> . addAll ( this . java.util.List<org.springframework.ui.freemarker.TemplateLoader> ) ; } if ( this . java.lang.String[] != null ) { for ( java.lang.String java.lang.String : this . java.lang.String[] ) { java.util.List<org.springframework.ui.freemarker.TemplateLoader> . add ( org.springframework.ui.freemarker.TemplateLoader ( java.lang.String ) ) ; } } void ( java.util.List<org.springframework.ui.freemarker.TemplateLoader> ) ; if ( this . java.util.List<org.springframework.ui.freemarker.TemplateLoader> != null ) { java.util.List<org.springframework.ui.freemarker.TemplateLoader> . addAll ( this . java.util.List<org.springframework.ui.freemarker.TemplateLoader> ) ; } TemplateLoader org.springframework.ui.freemarker.TemplateLoader = org.springframework.ui.freemarker.TemplateLoader ( java.util.List<org.springframework.ui.freemarker.TemplateLoader> ) ; if ( org.springframework.ui.freemarker.TemplateLoader != null ) { org.springframework.ui.freemarker.Configuration . setTemplateLoader ( org.springframework.ui.freemarker.TemplateLoader ) ; } void ( org.springframework.ui.freemarker.Configuration ) ; return org.springframework.ui.freemarker.Configuration ; }  <METHOD_END>
<METHOD_START> protected org.springframework.ui.freemarker.Configuration org.springframework.ui.freemarker.Configuration ( ) java.io.IOException , org.springframework.ui.freemarker.TemplateException { return new Configuration ( Configuration . DEFAULT_INCOMPATIBLE_IMPROVEMENTS ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.ui.freemarker.TemplateLoader org.springframework.ui.freemarker.TemplateLoader ( java.lang.String java.lang.String ) { if ( boolean ( ) ) { try { Resource org.springframework.ui.freemarker.Resource = org.springframework.ui.freemarker.ResourceLoader ( ) . getResource ( java.lang.String ) ; java.io.File java.io.File = org.springframework.ui.freemarker.Resource . getFile ( ) ; if ( org.springframework.ui.freemarker.Log . isDebugEnabled ( ) ) { org.springframework.ui.freemarker.Log . debug ( STRING + org.springframework.ui.freemarker.Resource + STRING + java.io.File . java.lang.String ( ) + STRING ) ; } return new FileTemplateLoader ( java.io.File ) ; } catch ( java.io.IOException java.io.IOException ) { if ( org.springframework.ui.freemarker.Log . isDebugEnabled ( ) ) { org.springframework.ui.freemarker.Log . debug ( STRING + java.lang.String + STRING , java.io.IOException ) ; } return new SpringTemplateLoader ( org.springframework.ui.freemarker.ResourceLoader ( ) , java.lang.String ) ; } } else { org.springframework.ui.freemarker.Log . debug ( STRING ) ; return new SpringTemplateLoader ( org.springframework.ui.freemarker.ResourceLoader ( ) , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.ui.freemarker.TemplateLoader> < TemplateLoader > java.util.List<org.springframework.ui.freemarker.TemplateLoader> ) {	}  <METHOD_END>
<METHOD_START> protected org.springframework.ui.freemarker.TemplateLoader org.springframework.ui.freemarker.TemplateLoader ( java.util.List<org.springframework.ui.freemarker.TemplateLoader> < TemplateLoader > java.util.List<org.springframework.ui.freemarker.TemplateLoader> ) { int int = java.util.List<org.springframework.ui.freemarker.TemplateLoader> . size ( ) ; switch ( int ) { case NUMBER : org.springframework.ui.freemarker.Log . info ( STRING ) ; return null ; case NUMBER : return java.util.List<org.springframework.ui.freemarker.TemplateLoader> . get ( NUMBER ) ; default: TemplateLoader [] org.springframework.ui.freemarker.TemplateLoader[] = java.util.List<org.springframework.ui.freemarker.TemplateLoader> . toArray ( new TemplateLoader [ int ] ) ; return new MultiTemplateLoader ( org.springframework.ui.freemarker.TemplateLoader[] ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( Configuration org.springframework.ui.freemarker.Configuration ) throws java.io.IOException , org.springframework.ui.freemarker.TemplateException {	}  <METHOD_END>
