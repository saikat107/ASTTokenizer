<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.messaging.converter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; assertEquals ( STRING , this . org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<java.lang.String> , java.lang.String .class ) ) ; assertNull ( this . org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<java.lang.String> , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.messaging.converter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( MessageHeaders . CONTENT_TYPE , MimeTypeUtils . TEXT_PLAIN ) . build ( ) ; assertEquals ( STRING , this . org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<java.lang.String> , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.messaging.converter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( MessageHeaders . CONTENT_TYPE , MimeTypeUtils . APPLICATION_JSON ) . build ( ) ; assertNull ( this . org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<java.lang.String> , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.messaging.converter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; assertEquals ( STRING , this . org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<java.lang.String> , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.messaging.converter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( MessageHeaders . CONTENT_TYPE , MimeTypeUtils . APPLICATION_JSON ) . build ( ) ; this . org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter = new org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter ( java.util.Collections .< MimeType > java.util.List<org.springframework.messaging.converter.MimeType> ( ) ) ; assertEquals ( STRING , this . org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<java.lang.String> , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter = new org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter ( java.util.Arrays . java.util.List ( MimeTypeUtils . TEXT_PLAIN ) ) ; this . org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter . setStrictContentTypeMatch ( true ) ; Message < java.lang.String > org.springframework.messaging.converter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; assertFalse ( this . org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter . canConvertFrom ( org.springframework.messaging.converter.Message<java.lang.String> , java.lang.String .class ) ) ; org.springframework.messaging.converter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( MessageHeaders . CONTENT_TYPE , MimeTypeUtils . TEXT_PLAIN ) . build ( ) ; assertTrue ( this . org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter . canConvertFrom ( org.springframework.messaging.converter.Message<java.lang.String> , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { this . org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter = new org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter ( java.util.Collections .< MimeType > java.util.List<org.springframework.messaging.converter.MimeType> ( ) ) ; this . org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter . setStrictContentTypeMatch ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; MessageHeaders org.springframework.messaging.converter.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; Message < ? > org.springframework.messaging.converter.Message<?> = this . org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter . toMessage ( STRING , org.springframework.messaging.converter.MessageHeaders ) ; assertNotNull ( org.springframework.messaging.converter.Message<> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.messaging.converter.Message<> . getHeaders ( ) . getTimestamp ( ) ) ; assertEquals ( MimeTypeUtils . TEXT_PLAIN , org.springframework.messaging.converter.Message<> . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) ) ; assertEquals ( STRING , org.springframework.messaging.converter.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpMessageHeaderAccessor org.springframework.messaging.converter.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . MESSAGE ) ; org.springframework.messaging.converter.SimpMessageHeaderAccessor . setHeader ( STRING , STRING ) ; org.springframework.messaging.converter.SimpMessageHeaderAccessor . setNativeHeader ( STRING , STRING ) ; org.springframework.messaging.converter.SimpMessageHeaderAccessor . setLeaveMutable ( true ) ; MessageHeaders org.springframework.messaging.converter.MessageHeaders = org.springframework.messaging.converter.SimpMessageHeaderAccessor . getMessageHeaders ( ) ; Message < ? > org.springframework.messaging.converter.Message<?> = this . org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter . toMessage ( STRING , org.springframework.messaging.converter.MessageHeaders ) ; assertSame ( org.springframework.messaging.converter.MessageHeaders , org.springframework.messaging.converter.Message<> . getHeaders ( ) ) ; assertNull ( org.springframework.messaging.converter.Message<> . getHeaders ( ) . getId ( ) ) ; assertNull ( org.springframework.messaging.converter.Message<> . getHeaders ( ) . getTimestamp ( ) ) ; assertEquals ( MimeTypeUtils . TEXT_PLAIN , org.springframework.messaging.converter.Message<> . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.converter.Message<?> = this . org.springframework.messaging.converter.MessageConverterTests.TestMessageConverter . toMessage ( STRING , null ) ; assertEquals ( MimeTypeUtils . TEXT_PLAIN , org.springframework.messaging.converter.Message<> . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( MimeTypeUtils . TEXT_PLAIN ); }  <METHOD_END>
<METHOD_START> public void ( java.util.Collection<org.springframework.messaging.converter.MimeType> < MimeType > java.util.Collection<org.springframework.messaging.converter.MimeType> ) { super( java.util.Collection<org.springframework.messaging.converter.MimeType> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.String .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.messaging.converter.Message<?> , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object java.lang.Object ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , MessageHeaders org.springframework.messaging.converter.MessageHeaders , java.lang.Object java.lang.Object ) { return STRING ; }  <METHOD_END>
