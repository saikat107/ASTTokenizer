<METHOD_START> public void ( XnioWorker org.springframework.web.reactive.socket.client.XnioWorker ) { this( org.springframework.web.reactive.socket.client.XnioWorker , builder -> {} ); }  <METHOD_END>
<METHOD_START> public void ( XnioWorker org.springframework.web.reactive.socket.client.XnioWorker , java.util.function.Consumer<org.springframework.web.reactive.socket.client.ConnectionBuilder> < ConnectionBuilder > java.util.function.Consumer<org.springframework.web.reactive.socket.client.ConnectionBuilder> ) { Assert . notNull ( org.springframework.web.reactive.socket.client.XnioWorker , STRING ) ; this . org.springframework.web.reactive.socket.client.XnioWorker = org.springframework.web.reactive.socket.client.XnioWorker ; this . java.util.function.Consumer<org.springframework.web.reactive.socket.client.ConnectionBuilder> = java.util.function.Consumer<org.springframework.web.reactive.socket.client.ConnectionBuilder> ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.socket.client.XnioWorker org.springframework.web.reactive.socket.client.XnioWorker ( ) { return this . org.springframework.web.reactive.socket.client.XnioWorker ; }  <METHOD_END>
<METHOD_START> public java.util.function.Consumer<org.springframework.web.reactive.socket.client.ConnectionBuilder> < ConnectionBuilder > java.util.function.Consumer<org.springframework.web.reactive.socket.client.ConnectionBuilder> ( ) { return this . java.util.function.Consumer<org.springframework.web.reactive.socket.client.ConnectionBuilder> ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.client.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI java.net.URI , WebSocketHandler org.springframework.web.reactive.socket.client.WebSocketHandler ) { return org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI , new HttpHeaders ( ) , org.springframework.web.reactive.socket.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.client.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders , WebSocketHandler org.springframework.web.reactive.socket.client.WebSocketHandler ) { return org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI , org.springframework.web.reactive.socket.client.HttpHeaders , org.springframework.web.reactive.socket.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.client.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders , WebSocketHandler org.springframework.web.reactive.socket.client.WebSocketHandler ) { MonoProcessor < java.lang.Void > org.springframework.web.reactive.socket.client.MonoProcessor<java.lang.Void> = MonoProcessor . create ( ) ; return Mono . fromCallable ( ( ) { ConnectionBuilder builder = createConnectionBuilder ( url ) ; String [] protocols = beforeHandshake ( url , headers , handler ) ; DefaultNegotiation negotiation = new DefaultNegotiation ( protocols , headers , builder ) ; builder . setClientNegotiation ( negotiation ) ; return builder . connect ( ) . addNotifier ( new IoFuture . HandlingNotifier < WebSocketChannel , Object > ( ) { @ Override public void handleDone ( WebSocketChannel channel , Object attachment ) { handleChannel ( url , handler , completion , negotiation , channel ) ; } @ Override public void handleFailed ( IOException ex , Object attachment ) { completion . onError ( new IllegalStateException ( STRING , ex ) ) ; } } , null ) ; } ) . then ( org.springframework.web.reactive.socket.client.MonoProcessor<java.lang.Void> ) ; }  <METHOD_END>
<METHOD_START> @ Override public void handleDone ( WebSocketChannel channel , Object attachment ) { handleChannel ( url , handler , completion , negotiation , channel ) ; }  <METHOD_END>
<METHOD_START> @ Override public void handleFailed ( IOException ex , Object attachment ) { completion . onError ( new IllegalStateException ( STRING , ex ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.socket.client.ConnectionBuilder org.springframework.web.reactive.socket.client.ConnectionBuilder ( java.net.URI java.net.URI ) { ConnectionBuilder org.springframework.web.reactive.socket.client.ConnectionBuilder = io . undertow . websockets . client . WebSocketClient . connectionBuilder ( org.springframework.web.reactive.socket.client.XnioWorker ( ) , new DefaultByteBufferPool ( false , int ( ) ) , java.net.URI ) ; this . java.util.function.Consumer<org.springframework.web.reactive.socket.client.ConnectionBuilder> . accept ( org.springframework.web.reactive.socket.client.ConnectionBuilder ) ; return org.springframework.web.reactive.socket.client.ConnectionBuilder ; }  <METHOD_END>
<METHOD_START> private void void ( java.net.URI java.net.URI , WebSocketHandler org.springframework.web.reactive.socket.client.WebSocketHandler , MonoProcessor < java.lang.Void > org.springframework.web.reactive.socket.client.MonoProcessor<java.lang.Void> , org.springframework.web.reactive.socket.client.UndertowWebSocketClient.DefaultNegotiation org.springframework.web.reactive.socket.client.UndertowWebSocketClient.DefaultNegotiation , WebSocketChannel org.springframework.web.reactive.socket.client.WebSocketChannel ) { HandshakeInfo org.springframework.web.reactive.socket.client.HandshakeInfo = afterHandshake ( java.net.URI , org.springframework.web.reactive.socket.client.UndertowWebSocketClient.DefaultNegotiation . org.springframework.web.reactive.socket.client.HttpHeaders ( ) ) ; UndertowWebSocketSession org.springframework.web.reactive.socket.client.UndertowWebSocketSession = new UndertowWebSocketSession ( org.springframework.web.reactive.socket.client.WebSocketChannel , org.springframework.web.reactive.socket.client.HandshakeInfo , org.springframework.web.reactive.socket.client.DataBufferFactory , org.springframework.web.reactive.socket.client.MonoProcessor<java.lang.Void> ) ; UndertowWebSocketHandlerAdapter org.springframework.web.reactive.socket.client.UndertowWebSocketHandlerAdapter = new UndertowWebSocketHandlerAdapter ( org.springframework.web.reactive.socket.client.UndertowWebSocketSession ) ; org.springframework.web.reactive.socket.client.WebSocketChannel . getReceiveSetter ( ) . set ( org.springframework.web.reactive.socket.client.UndertowWebSocketHandlerAdapter ) ; org.springframework.web.reactive.socket.client.WebSocketChannel . resumeReceives ( ) ; org.springframework.web.reactive.socket.client.WebSocketHandler . handle ( org.springframework.web.reactive.socket.client.UndertowWebSocketSession ) . subscribe ( org.springframework.web.reactive.socket.client.UndertowWebSocketSession ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String [] java.lang.String[] , HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders , ConnectionBuilder org.springframework.web.reactive.socket.client.ConnectionBuilder ) { super( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) , java.util.Collections . java.util.List<java.lang.Object> ( ) ); this . org.springframework.web.reactive.socket.client.HttpHeaders = org.springframework.web.reactive.socket.client.HttpHeaders ; this . org.springframework.web.reactive.socket.client.WebSocketClientNegotiation = org.springframework.web.reactive.socket.client.ConnectionBuilder . getClientNegotiation ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.socket.client.HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders ( ) { return this . org.springframework.web.reactive.socket.client.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) { this . org.springframework.web.reactive.socket.client.HttpHeaders . forEach ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> :: java.util.List<java.lang.String> ) ; if ( this . org.springframework.web.reactive.socket.client.WebSocketClientNegotiation != null ) { this . org.springframework.web.reactive.socket.client.WebSocketClientNegotiation . beforeRequest ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) { java.util.Map<java.lang.String,java.util.List<java.lang.String>> . void ( this . org.springframework.web.reactive.socket.client.HttpHeaders :: put ) ; if ( this . org.springframework.web.reactive.socket.client.WebSocketClientNegotiation != null ) { this . org.springframework.web.reactive.socket.client.WebSocketClientNegotiation . afterRequest ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ; } }  <METHOD_END>
