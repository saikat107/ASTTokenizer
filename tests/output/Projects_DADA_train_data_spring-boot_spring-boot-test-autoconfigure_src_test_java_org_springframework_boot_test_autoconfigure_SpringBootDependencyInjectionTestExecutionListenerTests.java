<METHOD_START> @ Test public void void ( ) java.lang.Exception { Ordered org.springframework.boot.test.autoconfigure.Ordered = new DependencyInjectionTestExecutionListener ( ) ; assertThat ( this . org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener . getOrder ( ) ) . isEqualTo ( org.springframework.boot.test.autoconfigure.Ordered . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestContext org.springframework.boot.test.autoconfigure.TestContext = mock ( TestContext .class ) ; given ( org.springframework.boot.test.autoconfigure.TestContext . getTestInstance ( ) ) . willThrow ( new java.lang.IllegalStateException ( ) ) ; SpringApplication org.springframework.boot.test.autoconfigure.SpringApplication = new SpringApplication ( org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListenerTests.Config .class ) ; org.springframework.boot.test.autoconfigure.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; ConfigurableApplicationContext org.springframework.boot.test.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.test.autoconfigure.SpringApplication . run ( ) ; given ( org.springframework.boot.test.autoconfigure.TestContext . getApplicationContext ( ) ) . willReturn ( org.springframework.boot.test.autoconfigure.ConfigurableApplicationContext ) ; try { this . org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener . prepareTestInstance ( org.springframework.boot.test.autoconfigure.TestContext ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } this . org.springframework.boot.test.autoconfigure.OutputCapture . expect ( containsString ( STRING ) ) ; this . org.springframework.boot.test.autoconfigure.OutputCapture . expect ( containsString ( STRING ) ) ; this . org.springframework.boot.test.autoconfigure.OutputCapture . expect ( containsString ( STRING ) ) ; }  <METHOD_END>
