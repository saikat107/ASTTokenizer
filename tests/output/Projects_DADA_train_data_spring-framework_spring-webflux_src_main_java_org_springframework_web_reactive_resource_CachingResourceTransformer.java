<METHOD_START> public void ( CacheManager org.springframework.web.reactive.resource.CacheManager , java.lang.String java.lang.String ) { this( org.springframework.web.reactive.resource.CacheManager . getCache ( java.lang.String ) ); }  <METHOD_END>
<METHOD_START> public void ( Cache org.springframework.web.reactive.resource.Cache ) { Assert . notNull ( org.springframework.web.reactive.resource.Cache , STRING ) ; this . org.springframework.web.reactive.resource.Cache = org.springframework.web.reactive.resource.Cache ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.resource.Cache org.springframework.web.reactive.resource.Cache ( ) { return this . org.springframework.web.reactive.resource.Cache ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> < Resource > org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> ( ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange , Resource org.springframework.web.reactive.resource.Resource , ResourceTransformerChain org.springframework.web.reactive.resource.ResourceTransformerChain ) { Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.Cache . get ( org.springframework.web.reactive.resource.Resource , Resource .class ) ; if ( org.springframework.web.reactive.resource.Resource != null ) { if ( org.springframework.web.reactive.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.reactive.resource.Log . trace ( STRING + org.springframework.web.reactive.resource.Resource ) ; } return Mono . just ( org.springframework.web.reactive.resource.Resource ) ; } return org.springframework.web.reactive.resource.ResourceTransformerChain . transform ( org.springframework.web.reactive.resource.ServerWebExchange , org.springframework.web.reactive.resource.Resource ) . doOnNext ( transformed -> { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + transformed ) ; } this . cache . put ( resource , transformed ) ; } ) ; }  <METHOD_END>
