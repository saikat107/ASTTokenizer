<METHOD_START> public void ( ) { this( true ); }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.integration.jms.config.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.jms.config.ChannelInterceptor> ) { this . java.util.List<org.springframework.integration.jms.config.ChannelInterceptor> = java.util.List<org.springframework.integration.jms.config.ChannelInterceptor> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.integration.jms.config.JmsTemplate . setDeliveryPersistent ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.integration.jms.config.JmsTemplate . setExplicitQosEnabled ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( MessageConverter org.springframework.integration.jms.config.MessageConverter ) { this . org.springframework.integration.jms.config.JmsTemplate . setMessageConverter ( org.springframework.integration.jms.config.MessageConverter ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.integration.jms.config.JmsTemplate . setMessageIdEnabled ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.integration.jms.config.JmsTemplate . setMessageTimestampEnabled ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . org.springframework.integration.jms.config.JmsTemplate . setPriority ( int ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . org.springframework.integration.jms.config.JmsTemplate . setTimeToLive ( long ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { Assert . isTrue ( this . boolean , STRING ) ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . isTrue ( this . boolean , STRING ) ; Assert . state ( this . java.lang.Integer == null , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { Assert . isTrue ( this . boolean , STRING ) ; Assert . state ( ! StringUtils . hasText ( this . java.lang.String ) , STRING ) ; this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . isTrue ( this . boolean , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . isTrue ( this . boolean , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( this . boolean , STRING ) ; this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( ConnectionFactory org.springframework.integration.jms.config.ConnectionFactory ) { this . org.springframework.integration.jms.config.ConnectionFactory = org.springframework.integration.jms.config.ConnectionFactory ; this . org.springframework.integration.jms.config.JmsTemplate . setConnectionFactory ( this . org.springframework.integration.jms.config.ConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<? extends org.springframework.integration.jms.config.AbstractMessageListenerContainer> < ? extends AbstractMessageListenerContainer > java.lang.Class<? extends org.springframework.integration.jms.config.AbstractMessageListenerContainer> ) { Assert . isTrue ( this . boolean , STRING ) ; this . java.lang.Class<? extends org.springframework.integration.jms.config.AbstractMessageListenerContainer> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( Destination org.springframework.integration.jms.config.Destination ) { this . org.springframework.integration.jms.config.Destination = org.springframework.integration.jms.config.Destination ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( DestinationResolver org.springframework.integration.jms.config.DestinationResolver ) { this . org.springframework.integration.jms.config.DestinationResolver = org.springframework.integration.jms.config.DestinationResolver ; this . org.springframework.integration.jms.config.JmsTemplate . setDestinationResolver ( org.springframework.integration.jms.config.DestinationResolver ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . isTrue ( this . boolean , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( ErrorHandler org.springframework.integration.jms.config.ErrorHandler ) { Assert . isTrue ( this . boolean , STRING ) ; this . org.springframework.integration.jms.config.ErrorHandler = org.springframework.integration.jms.config.ErrorHandler ; }  <METHOD_END>
<METHOD_START> public void void ( ExceptionListener org.springframework.integration.jms.config.ExceptionListener ) { Assert . isTrue ( this . boolean , STRING ) ; this . org.springframework.integration.jms.config.ExceptionListener = org.springframework.integration.jms.config.ExceptionListener ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { Assert . isTrue ( this . boolean , STRING ) ; this . java.lang.Boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( this . boolean , STRING ) ; this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( this . boolean , STRING ) ; this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( this . boolean , STRING ) ; this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Boolean = boolean ; this . org.springframework.integration.jms.config.JmsTemplate . setPubSubDomain ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; this . org.springframework.integration.jms.config.JmsTemplate . setPubSubNoLocal ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . java.lang.Long = long ; this . org.springframework.integration.jms.config.JmsTemplate . setReceiveTimeout ( long ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { Assert . isTrue ( this . boolean , STRING ) ; this . java.lang.Long = long ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; this . org.springframework.integration.jms.config.JmsTemplate . setSessionAcknowledgeMode ( int ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; this . org.springframework.integration.jms.config.JmsTemplate . setSessionTransacted ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { Assert . isTrue ( this . boolean , STRING ) ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { Assert . isTrue ( this . boolean , STRING ) ; this . java.util.concurrent.Executor = java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> public void void ( PlatformTransactionManager org.springframework.integration.jms.config.PlatformTransactionManager ) { Assert . isTrue ( this . boolean , STRING ) ; this . org.springframework.integration.jms.config.PlatformTransactionManager = org.springframework.integration.jms.config.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . isTrue ( this . boolean , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( this . boolean , STRING ) ; this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( this . boolean , STRING ) ; this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return ( this . org.springframework.integration.jms.config.AbstractJmsChannel != null ) ? this . org.springframework.integration.jms.config.AbstractJmsChannel . getClass ( ) : AbstractJmsChannel .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.jms.config.AbstractJmsChannel org.springframework.integration.jms.config.AbstractJmsChannel ( ) java.lang.Exception { this . void ( ) ; if ( this . boolean ) { this . org.springframework.integration.jms.config.AbstractMessageListenerContainer = org.springframework.integration.jms.config.AbstractMessageListenerContainer ( ) ; SubscribableJmsChannel org.springframework.integration.jms.config.SubscribableJmsChannel = new SubscribableJmsChannel ( this . org.springframework.integration.jms.config.AbstractMessageListenerContainer , this . org.springframework.integration.jms.config.JmsTemplate ) ; org.springframework.integration.jms.config.SubscribableJmsChannel . setMaxSubscribers ( this . int ) ; this . org.springframework.integration.jms.config.AbstractJmsChannel = org.springframework.integration.jms.config.SubscribableJmsChannel ; } else { Assert . isTrue ( ! java.lang.Boolean . java.lang.Boolean . boolean ( this . java.lang.Boolean ) , STRING ) ; PollableJmsChannel org.springframework.integration.jms.config.PollableJmsChannel = new PollableJmsChannel ( this . org.springframework.integration.jms.config.JmsTemplate ) ; if ( this . java.lang.String != null ) { org.springframework.integration.jms.config.PollableJmsChannel . setMessageSelector ( this . java.lang.String ) ; } this . org.springframework.integration.jms.config.AbstractJmsChannel = org.springframework.integration.jms.config.PollableJmsChannel ; } if ( ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.integration.jms.config.ChannelInterceptor> ) ) { this . org.springframework.integration.jms.config.AbstractJmsChannel . setInterceptors ( this . java.util.List<org.springframework.integration.jms.config.ChannelInterceptor> ) ; } this . org.springframework.integration.jms.config.AbstractJmsChannel . setBeanName ( this . java.lang.String ) ; if ( this . getBeanFactory ( ) != null ) { this . org.springframework.integration.jms.config.AbstractJmsChannel . setBeanFactory ( this . getBeanFactory ( ) ) ; } this . org.springframework.integration.jms.config.AbstractJmsChannel . afterPropertiesSet ( ) ; return this . org.springframework.integration.jms.config.AbstractJmsChannel ; }  <METHOD_END>
<METHOD_START> private void void ( ) { Assert . isTrue ( this . org.springframework.integration.jms.config.Destination != null ^ this . java.lang.String != null , STRING ) ; if ( this . org.springframework.integration.jms.config.Destination != null ) { this . org.springframework.integration.jms.config.JmsTemplate . setDefaultDestination ( this . org.springframework.integration.jms.config.Destination ) ; } if ( this . java.lang.String != null ) { this . org.springframework.integration.jms.config.JmsTemplate . setDefaultDestinationName ( this . java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.jms.config.AbstractMessageListenerContainer org.springframework.integration.jms.config.AbstractMessageListenerContainer ( ) java.lang.Exception { if ( this . java.lang.Class<> == null ) { this . java.lang.Class<? extends org.springframework.integration.jms.config.AbstractMessageListenerContainer> = DefaultMessageListenerContainer .class ; } AbstractMessageListenerContainer org.springframework.integration.jms.config.AbstractMessageListenerContainer = this . java.lang.Class<> . newInstance ( ) ; org.springframework.integration.jms.config.AbstractMessageListenerContainer . setAcceptMessagesWhileStopping ( this . boolean ) ; org.springframework.integration.jms.config.AbstractMessageListenerContainer . setAutoStartup ( this . boolean ) ; org.springframework.integration.jms.config.AbstractMessageListenerContainer . setClientId ( this . java.lang.String ) ; org.springframework.integration.jms.config.AbstractMessageListenerContainer . setConnectionFactory ( this . org.springframework.integration.jms.config.ConnectionFactory ) ; if ( this . org.springframework.integration.jms.config.Destination != null ) { org.springframework.integration.jms.config.AbstractMessageListenerContainer . setDestination ( this . org.springframework.integration.jms.config.Destination ) ; } if ( this . java.lang.String != null ) { org.springframework.integration.jms.config.AbstractMessageListenerContainer . setDestinationName ( this . java.lang.String ) ; } if ( this . org.springframework.integration.jms.config.DestinationResolver != null ) { org.springframework.integration.jms.config.AbstractMessageListenerContainer . setDestinationResolver ( this . org.springframework.integration.jms.config.DestinationResolver ) ; } org.springframework.integration.jms.config.AbstractMessageListenerContainer . setDurableSubscriptionName ( this . java.lang.String ) ; org.springframework.integration.jms.config.AbstractMessageListenerContainer . setErrorHandler ( this . org.springframework.integration.jms.config.ErrorHandler ) ; org.springframework.integration.jms.config.AbstractMessageListenerContainer . setExceptionListener ( this . org.springframework.integration.jms.config.ExceptionListener ) ; if ( this . java.lang.Boolean != null ) { org.springframework.integration.jms.config.AbstractMessageListenerContainer . setExposeListenerSession ( this . java.lang.Boolean ) ; } org.springframework.integration.jms.config.AbstractMessageListenerContainer . setMessageSelector ( this . java.lang.String ) ; if ( this . java.lang.Integer != null ) { org.springframework.integration.jms.config.AbstractMessageListenerContainer . setPhase ( this . java.lang.Integer ) ; } if ( this . java.lang.Boolean != null ) { org.springframework.integration.jms.config.AbstractMessageListenerContainer . setPubSubDomain ( this . java.lang.Boolean ) ; } org.springframework.integration.jms.config.AbstractMessageListenerContainer . setSessionAcknowledgeMode ( this . int ) ; org.springframework.integration.jms.config.AbstractMessageListenerContainer . setSessionTransacted ( this . boolean ) ; org.springframework.integration.jms.config.AbstractMessageListenerContainer . setSubscriptionDurable ( this . boolean ) ; org.springframework.integration.jms.config.AbstractMessageListenerContainer . setSubscriptionShared ( this . boolean ) ; if ( org.springframework.integration.jms.config.AbstractMessageListenerContainer instanceof DefaultMessageListenerContainer ) { DefaultMessageListenerContainer org.springframework.integration.jms.config.DefaultMessageListenerContainer = ( DefaultMessageListenerContainer ) org.springframework.integration.jms.config.AbstractMessageListenerContainer ; if ( this . java.lang.String != null ) { org.springframework.integration.jms.config.DefaultMessageListenerContainer . setCacheLevelName ( this . java.lang.String ) ; } if ( this . java.lang.Integer != null ) { org.springframework.integration.jms.config.DefaultMessageListenerContainer . setCacheLevel ( this . java.lang.Integer ) ; } if ( StringUtils . hasText ( this . java.lang.String ) ) { org.springframework.integration.jms.config.DefaultMessageListenerContainer . setConcurrency ( this . java.lang.String ) ; } if ( this . java.lang.Integer != null ) { org.springframework.integration.jms.config.DefaultMessageListenerContainer . setConcurrentConsumers ( this . java.lang.Integer ) ; } if ( this . java.lang.Integer != null ) { org.springframework.integration.jms.config.DefaultMessageListenerContainer . setMaxConcurrentConsumers ( this . java.lang.Integer ) ; } if ( this . java.lang.Integer != null ) { org.springframework.integration.jms.config.DefaultMessageListenerContainer . setIdleTaskExecutionLimit ( this . java.lang.Integer ) ; } if ( this . java.lang.Integer != null ) { org.springframework.integration.jms.config.DefaultMessageListenerContainer . setMaxMessagesPerTask ( this . java.lang.Integer ) ; } org.springframework.integration.jms.config.DefaultMessageListenerContainer . setPubSubNoLocal ( this . boolean ) ; if ( this . java.lang.Long != null ) { org.springframework.integration.jms.config.DefaultMessageListenerContainer . setReceiveTimeout ( this . java.lang.Long ) ; } if ( this . java.lang.Long != null ) { org.springframework.integration.jms.config.DefaultMessageListenerContainer . setRecoveryInterval ( this . java.lang.Long ) ; } org.springframework.integration.jms.config.DefaultMessageListenerContainer . setTaskExecutor ( this . java.util.concurrent.Executor ) ; org.springframework.integration.jms.config.DefaultMessageListenerContainer . setTransactionManager ( this . org.springframework.integration.jms.config.PlatformTransactionManager ) ; if ( this . java.lang.String != null ) { org.springframework.integration.jms.config.DefaultMessageListenerContainer . setTransactionName ( this . java.lang.String ) ; } if ( this . java.lang.Integer != null ) { org.springframework.integration.jms.config.DefaultMessageListenerContainer . setTransactionTimeout ( this . java.lang.Integer ) ; } } else if ( org.springframework.integration.jms.config.AbstractMessageListenerContainer instanceof SimpleMessageListenerContainer ) { SimpleMessageListenerContainer org.springframework.integration.jms.config.SimpleMessageListenerContainer = ( SimpleMessageListenerContainer ) org.springframework.integration.jms.config.AbstractMessageListenerContainer ; if ( StringUtils . hasText ( this . java.lang.String ) ) { org.springframework.integration.jms.config.SimpleMessageListenerContainer . setConcurrency ( this . java.lang.String ) ; } if ( this . java.lang.Integer != null ) { org.springframework.integration.jms.config.SimpleMessageListenerContainer . setConcurrentConsumers ( this . java.lang.Integer ) ; } org.springframework.integration.jms.config.SimpleMessageListenerContainer . setPubSubNoLocal ( this . boolean ) ; org.springframework.integration.jms.config.SimpleMessageListenerContainer . setTaskExecutor ( this . java.util.concurrent.Executor ) ; } return org.springframework.integration.jms.config.AbstractMessageListenerContainer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.integration.jms.config.AbstractJmsChannel instanceof SubscribableJmsChannel && ( ( SubscribableJmsChannel ) this . org.springframework.integration.jms.config.AbstractJmsChannel ) . isAutoStartup ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( this . org.springframework.integration.jms.config.AbstractJmsChannel instanceof SubscribableJmsChannel ) ? ( ( SubscribableJmsChannel ) this . org.springframework.integration.jms.config.AbstractJmsChannel ) . getPhase ( ) : NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.integration.jms.config.AbstractJmsChannel instanceof SubscribableJmsChannel && ( ( SubscribableJmsChannel ) this . org.springframework.integration.jms.config.AbstractJmsChannel ) . isRunning ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.jms.config.AbstractJmsChannel instanceof SubscribableJmsChannel ) { ( ( SubscribableJmsChannel ) this . org.springframework.integration.jms.config.AbstractJmsChannel ) . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.jms.config.AbstractJmsChannel instanceof SubscribableJmsChannel ) { ( ( SubscribableJmsChannel ) this . org.springframework.integration.jms.config.AbstractJmsChannel ) . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { if ( this . org.springframework.integration.jms.config.AbstractJmsChannel instanceof SubscribableJmsChannel ) { ( ( SubscribableJmsChannel ) this . org.springframework.integration.jms.config.AbstractJmsChannel ) . stop ( java.lang.Runnable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( AbstractJmsChannel org.springframework.integration.jms.config.AbstractJmsChannel ) throws java.lang.Exception { if ( org.springframework.integration.jms.config.AbstractJmsChannel instanceof SubscribableJmsChannel ) { ( ( SubscribableJmsChannel ) this . org.springframework.integration.jms.config.AbstractJmsChannel ) . destroy ( ) ; } }  <METHOD_END>
