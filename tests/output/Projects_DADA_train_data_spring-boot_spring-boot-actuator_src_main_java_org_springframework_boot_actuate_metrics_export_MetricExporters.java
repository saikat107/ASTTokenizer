<METHOD_START> public void ( MetricExportProperties org.springframework.boot.actuate.metrics.export.MetricExportProperties ) { this . org.springframework.boot.actuate.metrics.export.MetricExportProperties = org.springframework.boot.actuate.metrics.export.MetricExportProperties ; }  <METHOD_END>
<METHOD_START> public void void ( MetricReader org.springframework.boot.actuate.metrics.export.MetricReader ) { this . org.springframework.boot.actuate.metrics.export.MetricReader = org.springframework.boot.actuate.metrics.export.MetricReader ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.export.GaugeWriter> < java.lang.String , GaugeWriter > java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.export.GaugeWriter> ) { this . java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.export.GaugeWriter> . putAll ( java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.export.GaugeWriter> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.export.Exporter> < java.lang.String , Exporter > java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.export.Exporter> ) { this . java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.export.Exporter> . putAll ( java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.export.Exporter> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ScheduledTaskRegistrar org.springframework.boot.actuate.metrics.export.ScheduledTaskRegistrar ) { for ( java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.metrics.export.Exporter> < java.lang.String , Exporter > java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.metrics.export.Exporter> : this . java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.export.Exporter> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.metrics.export.Exporter> . getKey ( ) ; Exporter org.springframework.boot.actuate.metrics.export.Exporter = java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.metrics.export.Exporter> . getValue ( ) ; TriggerProperties org.springframework.boot.actuate.metrics.export.TriggerProperties = this . org.springframework.boot.actuate.metrics.export.MetricExportProperties . findTrigger ( java.lang.String ) ; if ( org.springframework.boot.actuate.metrics.export.TriggerProperties != null ) { org.springframework.boot.actuate.metrics.export.MetricExporters.ExportRunner org.springframework.boot.actuate.metrics.export.MetricExporters.ExportRunner = new org.springframework.boot.actuate.metrics.export.MetricExporters.ExportRunner ( org.springframework.boot.actuate.metrics.export.Exporter ) ; IntervalTask org.springframework.boot.actuate.metrics.export.IntervalTask = new IntervalTask ( org.springframework.boot.actuate.metrics.export.MetricExporters.ExportRunner , org.springframework.boot.actuate.metrics.export.TriggerProperties . getDelayMillis ( ) , org.springframework.boot.actuate.metrics.export.TriggerProperties . getDelayMillis ( ) ) ; org.springframework.boot.actuate.metrics.export.ScheduledTaskRegistrar . addFixedDelayTask ( org.springframework.boot.actuate.metrics.export.IntervalTask ) ; } } for ( java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.metrics.export.GaugeWriter> < java.lang.String , GaugeWriter > java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.metrics.export.GaugeWriter> : this . java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.export.GaugeWriter> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.metrics.export.GaugeWriter> . getKey ( ) ; GaugeWriter org.springframework.boot.actuate.metrics.export.GaugeWriter = java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.metrics.export.GaugeWriter> . getValue ( ) ; TriggerProperties org.springframework.boot.actuate.metrics.export.TriggerProperties = this . org.springframework.boot.actuate.metrics.export.MetricExportProperties . findTrigger ( java.lang.String ) ; if ( org.springframework.boot.actuate.metrics.export.TriggerProperties != null ) { MetricCopyExporter org.springframework.boot.actuate.metrics.export.MetricCopyExporter = org.springframework.boot.actuate.metrics.export.MetricCopyExporter ( org.springframework.boot.actuate.metrics.export.GaugeWriter , org.springframework.boot.actuate.metrics.export.TriggerProperties ) ; this . java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.export.Exporter> . put ( java.lang.String , org.springframework.boot.actuate.metrics.export.MetricCopyExporter ) ; this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; org.springframework.boot.actuate.metrics.export.MetricExporters.ExportRunner org.springframework.boot.actuate.metrics.export.MetricExporters.ExportRunner = new org.springframework.boot.actuate.metrics.export.MetricExporters.ExportRunner ( org.springframework.boot.actuate.metrics.export.MetricCopyExporter ) ; IntervalTask org.springframework.boot.actuate.metrics.export.IntervalTask = new IntervalTask ( org.springframework.boot.actuate.metrics.export.MetricExporters.ExportRunner , org.springframework.boot.actuate.metrics.export.TriggerProperties . getDelayMillis ( ) , org.springframework.boot.actuate.metrics.export.TriggerProperties . getDelayMillis ( ) ) ; org.springframework.boot.actuate.metrics.export.ScheduledTaskRegistrar . addFixedDelayTask ( org.springframework.boot.actuate.metrics.export.IntervalTask ) ; } } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.metrics.export.MetricCopyExporter org.springframework.boot.actuate.metrics.export.MetricCopyExporter ( GaugeWriter org.springframework.boot.actuate.metrics.export.GaugeWriter , TriggerProperties org.springframework.boot.actuate.metrics.export.TriggerProperties ) { MetricCopyExporter org.springframework.boot.actuate.metrics.export.MetricCopyExporter = new MetricCopyExporter ( this . org.springframework.boot.actuate.metrics.export.MetricReader , org.springframework.boot.actuate.metrics.export.GaugeWriter ) ; org.springframework.boot.actuate.metrics.export.MetricCopyExporter . setIncludes ( org.springframework.boot.actuate.metrics.export.TriggerProperties . getIncludes ( ) ) ; org.springframework.boot.actuate.metrics.export.MetricCopyExporter . setExcludes ( org.springframework.boot.actuate.metrics.export.TriggerProperties . getExcludes ( ) ) ; org.springframework.boot.actuate.metrics.export.MetricCopyExporter . setSendLatest ( org.springframework.boot.actuate.metrics.export.TriggerProperties . isSendLatest ( ) ) ; return org.springframework.boot.actuate.metrics.export.MetricCopyExporter ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.export.Exporter> < java.lang.String , Exporter > java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.export.Exporter> ( ) { return this . java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.export.Exporter> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { for ( java.lang.String java.lang.String : this . java.util.Set<java.lang.String> ) { Exporter org.springframework.boot.actuate.metrics.export.Exporter = this . java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.export.Exporter> . get ( java.lang.String ) ; if ( org.springframework.boot.actuate.metrics.export.Exporter instanceof java.io.Closeable ) { ( ( java.io.Closeable ) org.springframework.boot.actuate.metrics.export.Exporter ) . void ( ) ; } } }  <METHOD_END>
<METHOD_START> void ( Exporter org.springframework.boot.actuate.metrics.export.Exporter ) { this . org.springframework.boot.actuate.metrics.export.Exporter = org.springframework.boot.actuate.metrics.export.Exporter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.boot.actuate.metrics.export.Exporter . export ( ) ; }  <METHOD_END>
