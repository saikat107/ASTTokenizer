<METHOD_START> public void ( ) { org.springframework.statemachine.event.LoggingListener.Level = org.springframework.statemachine.event.LoggingListener.Level . org.springframework.statemachine.event.LoggingListener.Level ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { try { this . org.springframework.statemachine.event.LoggingListener.Level = org.springframework.statemachine.event.LoggingListener.Level . org.springframework.statemachine.event.LoggingListener.Level ( java.lang.String . java.lang.String ( ) ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + StringUtils . arrayToCommaDelimitedString ( org.springframework.statemachine.event.LoggingListener.Level . org.springframework.statemachine.event.LoggingListener.Level[] ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineEvent org.springframework.statemachine.event.StateMachineEvent ) { switch ( this . org.springframework.statemachine.event.LoggingListener.Level ) { case org.springframework.statemachine.event.LoggingListener.Level : if ( org.springframework.statemachine.event.Log . isFatalEnabled ( ) ) { org.springframework.statemachine.event.Log . fatal ( org.springframework.statemachine.event.StateMachineEvent ) ; } break; case org.springframework.statemachine.event.LoggingListener.Level : if ( org.springframework.statemachine.event.Log . isErrorEnabled ( ) ) { org.springframework.statemachine.event.Log . error ( org.springframework.statemachine.event.StateMachineEvent ) ; } break; case org.springframework.statemachine.event.LoggingListener.Level : if ( org.springframework.statemachine.event.Log . isWarnEnabled ( ) ) { org.springframework.statemachine.event.Log . warn ( org.springframework.statemachine.event.StateMachineEvent ) ; } break; case org.springframework.statemachine.event.LoggingListener.Level : if ( org.springframework.statemachine.event.Log . isInfoEnabled ( ) ) { org.springframework.statemachine.event.Log . info ( org.springframework.statemachine.event.StateMachineEvent ) ; } break; case org.springframework.statemachine.event.LoggingListener.Level : if ( org.springframework.statemachine.event.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.event.Log . debug ( org.springframework.statemachine.event.StateMachineEvent ) ; } break; case org.springframework.statemachine.event.LoggingListener.Level : if ( org.springframework.statemachine.event.Log . isTraceEnabled ( ) ) { org.springframework.statemachine.event.Log . trace ( org.springframework.statemachine.event.StateMachineEvent ) ; } break; } }  <METHOD_END>
