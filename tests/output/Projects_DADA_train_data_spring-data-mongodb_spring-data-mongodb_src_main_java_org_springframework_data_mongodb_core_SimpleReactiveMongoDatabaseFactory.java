<METHOD_START> public void ( ConnectionString org.springframework.data.mongodb.core.ConnectionString ) throws java.net.UnknownHostException { this( MongoClients . create ( org.springframework.data.mongodb.core.ConnectionString ) , org.springframework.data.mongodb.core.ConnectionString . getDatabase ( ) , true ); }  <METHOD_END>
<METHOD_START> public void ( MongoClient org.springframework.data.mongodb.core.MongoClient , java.lang.String java.lang.String ) { this( org.springframework.data.mongodb.core.MongoClient , java.lang.String , false ); }  <METHOD_END>
<METHOD_START> private void ( MongoClient org.springframework.data.mongodb.core.MongoClient , java.lang.String java.lang.String , boolean boolean ) { Assert . notNull ( org.springframework.data.mongodb.core.MongoClient , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; Assert . isTrue ( java.lang.String . boolean ( STRING ) , STRING ) ; this . org.springframework.data.mongodb.core.MongoClient = org.springframework.data.mongodb.core.MongoClient ; this . java.lang.String = java.lang.String ; this . boolean = boolean ; this . org.springframework.data.mongodb.core.PersistenceExceptionTranslator = new MongoExceptionTranslator ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( WriteConcern org.springframework.data.mongodb.core.WriteConcern ) { this . org.springframework.data.mongodb.core.WriteConcern = org.springframework.data.mongodb.core.WriteConcern ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ( ) org.springframework.data.mongodb.core.DataAccessException { return org.springframework.data.mongodb.core.MongoDatabase ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ( java.lang.String java.lang.String ) throws org.springframework.data.mongodb.core.DataAccessException { Assert . hasText ( java.lang.String , STRING ) ; MongoDatabase org.springframework.data.mongodb.core.MongoDatabase = ReactiveMongoDbUtils . getMongoDatabase ( org.springframework.data.mongodb.core.MongoClient , java.lang.String ) ; if ( org.springframework.data.mongodb.core.WriteConcern != null ) { org.springframework.data.mongodb.core.MongoDatabase = org.springframework.data.mongodb.core.MongoDatabase . withWriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) ; } return org.springframework.data.mongodb.core.MongoDatabase ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Exception { if ( boolean ) { org.springframework.data.mongodb.core.MongoClient . close ( ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.PersistenceExceptionTranslator org.springframework.data.mongodb.core.PersistenceExceptionTranslator ( ) { return this . org.springframework.data.mongodb.core.PersistenceExceptionTranslator ; }  <METHOD_END>
