<METHOD_START> @ Test public void void ( ) { XmlWebApplicationContext org.springframework.web.context.support.XmlWebApplicationContext = new XmlWebApplicationContext ( ) ; org.springframework.web.context.support.XmlWebApplicationContext . setConfigLocation ( STRING ) ; ContextLoaderListener org.springframework.web.context.support.ContextLoaderListener = new ContextLoaderListener ( org.springframework.web.context.support.XmlWebApplicationContext ) ; MockServletContext org.springframework.web.context.support.MockServletContext = new MockServletContext ( ) ; try { org.springframework.web.context.support.ContextLoaderListener . contextInitialized ( new ServletContextEvent ( org.springframework.web.context.support.MockServletContext ) ) ; fail ( STRING ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { assertTrue ( java.lang.Throwable . java.lang.String ( ) , java.lang.Throwable . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { XmlWebApplicationContext org.springframework.web.context.support.XmlWebApplicationContext = new XmlWebApplicationContext ( ) ; org.springframework.web.context.support.XmlWebApplicationContext . setConfigLocation ( STRING ) ; ContextLoaderListener org.springframework.web.context.support.ContextLoaderListener = new ContextLoaderListener ( org.springframework.web.context.support.XmlWebApplicationContext ) ; MockServletContext org.springframework.web.context.support.MockServletContext = new MockServletContext ( ) ; org.springframework.web.context.support.MockServletContext . addInitParameter ( ContextLoader . CONFIG_LOCATION_PARAM , STRING ) ; try { org.springframework.web.context.support.ContextLoaderListener . contextInitialized ( new ServletContextEvent ( org.springframework.web.context.support.MockServletContext ) ) ; fail ( STRING ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { assertTrue ( java.lang.Throwable . java.lang.String ( ) , java.lang.Throwable . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { XmlWebApplicationContext org.springframework.web.context.support.XmlWebApplicationContext = new XmlWebApplicationContext ( ) ; ContextLoaderListener org.springframework.web.context.support.ContextLoaderListener = new ContextLoaderListener ( org.springframework.web.context.support.XmlWebApplicationContext ) ; MockServletContext org.springframework.web.context.support.MockServletContext = new MockServletContext ( ) ; org.springframework.web.context.support.MockServletContext . addInitParameter ( ContextLoader . CONFIG_LOCATION_PARAM , STRING ) ; try { org.springframework.web.context.support.ContextLoaderListener . contextInitialized ( new ServletContextEvent ( org.springframework.web.context.support.MockServletContext ) ) ; fail ( STRING ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { assertTrue ( java.lang.Throwable . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { XmlWebApplicationContext org.springframework.web.context.support.XmlWebApplicationContext = new XmlWebApplicationContext ( ) { @ java.lang.Override protected java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING } ; } } ; ContextLoaderListener org.springframework.web.context.support.ContextLoaderListener = new ContextLoaderListener ( org.springframework.web.context.support.XmlWebApplicationContext ) ; MockServletContext org.springframework.web.context.support.MockServletContext = new MockServletContext ( ) ; org.springframework.web.context.support.MockServletContext . addInitParameter ( ContextLoader . CONFIG_LOCATION_PARAM , STRING ) ; try { org.springframework.web.context.support.ContextLoaderListener . contextInitialized ( new ServletContextEvent ( org.springframework.web.context.support.MockServletContext ) ) ; fail ( STRING ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { java.lang.System . java.io.PrintStream . void ( java.lang.Throwable . java.lang.String ( ) ) ; assertTrue ( java.lang.Throwable . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { XmlWebApplicationContext org.springframework.web.context.support.XmlWebApplicationContext = new XmlWebApplicationContext ( ) ; ContextLoaderListener org.springframework.web.context.support.ContextLoaderListener = new ContextLoaderListener ( org.springframework.web.context.support.XmlWebApplicationContext ) ; MockServletContext org.springframework.web.context.support.MockServletContext = new MockServletContext ( ) ; try { org.springframework.web.context.support.ContextLoaderListener . contextInitialized ( new ServletContextEvent ( org.springframework.web.context.support.MockServletContext ) ) ; fail ( STRING ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { java.lang.System . java.io.PrintStream . void ( java.lang.Throwable . java.lang.String ( ) ) ; assertTrue ( java.lang.Throwable . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericWebApplicationContext org.springframework.web.context.support.GenericWebApplicationContext = new GenericWebApplicationContext ( ) ; ContextLoaderListener org.springframework.web.context.support.ContextLoaderListener = new ContextLoaderListener ( org.springframework.web.context.support.GenericWebApplicationContext ) ; ClassPathBeanDefinitionScanner org.springframework.web.context.support.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.web.context.support.GenericWebApplicationContext ) ; org.springframework.web.context.support.ClassPathBeanDefinitionScanner . scan ( STRING ) ; org.springframework.web.context.support.ContextLoaderListener . contextInitialized ( new ServletContextEvent ( new MockServletContext ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigWebApplicationContext org.springframework.web.context.support.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.web.context.support.AnnotationConfigWebApplicationContext . scan ( STRING ) ; ContextLoaderListener org.springframework.web.context.support.ContextLoaderListener = new ContextLoaderListener ( org.springframework.web.context.support.AnnotationConfigWebApplicationContext ) ; org.springframework.web.context.support.ContextLoaderListener . contextInitialized ( new ServletContextEvent ( new MockServletContext ( ) ) ) ; }  <METHOD_END>
