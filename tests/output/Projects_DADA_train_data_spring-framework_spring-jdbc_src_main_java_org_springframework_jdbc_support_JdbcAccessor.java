<METHOD_START> public void void ( javax.sql.DataSource javax.sql.DataSource ) { this . javax.sql.DataSource = javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> public javax.sql.DataSource javax.sql.DataSource ( ) { return this . javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.jdbc.support.SQLExceptionTranslator = new SQLErrorCodeSQLExceptionTranslator ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( SQLExceptionTranslator org.springframework.jdbc.support.SQLExceptionTranslator ) { this . org.springframework.jdbc.support.SQLExceptionTranslator = org.springframework.jdbc.support.SQLExceptionTranslator ; }  <METHOD_END>
<METHOD_START> public synchronized org.springframework.jdbc.support.SQLExceptionTranslator org.springframework.jdbc.support.SQLExceptionTranslator ( ) { if ( this . org.springframework.jdbc.support.SQLExceptionTranslator == null ) { javax.sql.DataSource javax.sql.DataSource = javax.sql.DataSource ( ) ; if ( javax.sql.DataSource != null ) { this . org.springframework.jdbc.support.SQLExceptionTranslator = new SQLErrorCodeSQLExceptionTranslator ( javax.sql.DataSource ) ; } else { this . org.springframework.jdbc.support.SQLExceptionTranslator = new SQLStateSQLExceptionTranslator ( ) ; } } return this . org.springframework.jdbc.support.SQLExceptionTranslator ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( javax.sql.DataSource ( ) == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( ! boolean ( ) ) { org.springframework.jdbc.support.SQLExceptionTranslator ( ) ; } }  <METHOD_END>
