<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.session.AnnotationConfigWebApplicationContext != null ) { this . org.springframework.boot.autoconfigure.session.AnnotationConfigWebApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> protected < T extends org.springframework.boot.autoconfigure.session.SessionRepository<?> < ? > > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { SessionRepository < ? > org.springframework.boot.autoconfigure.session.SessionRepository<?> = this . org.springframework.boot.autoconfigure.session.AnnotationConfigWebApplicationContext . getBean ( SessionRepository .class ) ; assertThat ( org.springframework.boot.autoconfigure.session.SessionRepository<> ) . as ( STRING ) . isInstanceOf ( java.lang.Class<T> ) ; return java.lang.Class<T> . T ( org.springframework.boot.autoconfigure.session.SessionRepository<> ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Integer java.lang.Integer ( SessionRepository < ? > org.springframework.boot.autoconfigure.session.SessionRepository<?> ) { return ( java.lang.Integer ) new DirectFieldAccessor ( org.springframework.boot.autoconfigure.session.SessionRepository<> ) . getPropertyValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String ... java.lang.String[] ) { void ( null , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Collection<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Collection<java.lang.Class<?>> , java.lang.String ... java.lang.String[] ) { AnnotationConfigWebApplicationContext org.springframework.boot.autoconfigure.session.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.session.AnnotationConfigWebApplicationContext , java.lang.String[] ) ; if ( java.util.Collection<java.lang.Class<?>> != null ) { org.springframework.boot.autoconfigure.session.AnnotationConfigWebApplicationContext . register ( java.util.Collection<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.Collection<java.lang.Class<?>> . int ( ) ] ) ) ; } org.springframework.boot.autoconfigure.session.AnnotationConfigWebApplicationContext . register ( ServerProperties .class , SessionAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; org.springframework.boot.autoconfigure.session.AnnotationConfigWebApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.session.AnnotationConfigWebApplicationContext = org.springframework.boot.autoconfigure.session.AnnotationConfigWebApplicationContext ; }  <METHOD_END>
