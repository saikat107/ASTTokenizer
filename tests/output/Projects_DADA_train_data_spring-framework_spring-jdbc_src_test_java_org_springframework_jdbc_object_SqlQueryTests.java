<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . java.sql.Connection = mock ( java.sql.Connection .class ) ; this . javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; this . java.sql.PreparedStatement = mock ( java.sql.PreparedStatement .class ) ; this . java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; given ( this . javax.sql.DataSource . java.sql.Connection ( ) ) . willReturn ( this . java.sql.Connection ) ; given ( this . java.sql.Connection . java.sql.PreparedStatement ( anyString ( ) ) ) . willReturn ( this . java.sql.PreparedStatement ) ; given ( java.sql.PreparedStatement . java.sql.ResultSet ( ) ) . willReturn ( java.sql.ResultSet ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; SqlQuery < java.lang.Integer > org.springframework.jdbc.object.SqlQuery<java.lang.Integer> = new MappingSqlQueryWithParameters < java.lang.Integer > ( ) { @ java.lang.Override protected java.lang.Integer java.lang.Integer ( java.sql.ResultSet java.sql.ResultSet , int int , java.lang.Object [] java.lang.Object[] , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> )					throws java.sql.SQLException { assertTrue ( STRING , java.lang.Object[] == null ) ; assertTrue ( STRING , java.util.Map<,> == null ) ; return java.sql.ResultSet . int ( NUMBER ) ; } } ; org.springframework.jdbc.object.SqlQuery<java.lang.Integer> . setDataSource ( javax.sql.DataSource ) ; org.springframework.jdbc.object.SqlQuery<java.lang.Integer> . setSql ( java.lang.String ) ; org.springframework.jdbc.object.SqlQuery<java.lang.Integer> . compile ( ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = org.springframework.jdbc.object.SqlQuery<java.lang.Integer> . execute ( ) ; assertThat ( java.util.List<java.lang.Integer> , is ( equalTo ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER ) ) ) ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Integer java.lang.Integer ( java.sql.ResultSet java.sql.ResultSet , int int , java.lang.Object [] java.lang.Object[] , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> )					throws java.sql.SQLException { assertTrue ( STRING , java.lang.Object[] == null ) ; assertTrue ( STRING , java.util.Map<,> == null ) ; return java.sql.ResultSet . int ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MappingSqlQuery < java.lang.Integer > org.springframework.jdbc.object.MappingSqlQuery<java.lang.Integer> = new MappingSqlQuery < java.lang.Integer > ( ) { @ java.lang.Override protected java.lang.Integer java.lang.Integer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { return java.sql.ResultSet . int ( NUMBER ) ; } } ; org.springframework.jdbc.object.MappingSqlQuery<java.lang.Integer> . setDataSource ( javax.sql.DataSource ) ; org.springframework.jdbc.object.MappingSqlQuery<java.lang.Integer> . setSql ( java.lang.String ) ; org.springframework.jdbc.object.MappingSqlQuery<java.lang.Integer> . declareParameter ( new SqlParameter ( java.lang.String[] [ NUMBER ] , int[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.MappingSqlQuery<java.lang.Integer> . declareParameter ( new SqlParameter ( java.lang.String[] [ NUMBER ] , int[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.MappingSqlQuery<java.lang.Integer> . compile ( ) ; org.springframework.jdbc.object.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; org.springframework.jdbc.object.MappingSqlQuery<java.lang.Integer> . execute ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Integer java.lang.Integer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { return java.sql.ResultSet . int ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MappingSqlQuery < java.lang.Integer > org.springframework.jdbc.object.MappingSqlQuery<java.lang.Integer> = new MappingSqlQuery < java.lang.Integer > ( ) { @ java.lang.Override protected java.lang.Integer java.lang.Integer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { return java.sql.ResultSet . int ( NUMBER ) ; } } ; org.springframework.jdbc.object.MappingSqlQuery<java.lang.Integer> . setDataSource ( javax.sql.DataSource ) ; org.springframework.jdbc.object.MappingSqlQuery<java.lang.Integer> . setSql ( java.lang.String ) ; org.springframework.jdbc.object.MappingSqlQuery<java.lang.Integer> . declareParameter ( new SqlParameter ( java.lang.String[] [ NUMBER ] , int[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.MappingSqlQuery<java.lang.Integer> . declareParameter ( new SqlParameter ( java.lang.String[] [ NUMBER ] , int[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.MappingSqlQuery<java.lang.Integer> . compile ( ) ; org.springframework.jdbc.object.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; org.springframework.jdbc.object.MappingSqlQuery<java.lang.Integer> . executeByNamedParam ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( java.lang.String[] [ NUMBER ] , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Integer java.lang.Integer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { return java.sql.ResultSet . int ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING } ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , true , false ) ; given ( java.sql.ResultSet . java.lang.String ( NUMBER ) ) . willReturn ( java.lang.String[] [ NUMBER ] , java.lang.String[] [ NUMBER ] , java.lang.String[] [ NUMBER ] ) ; org.springframework.jdbc.object.SqlQueryTests.StringQuery org.springframework.jdbc.object.SqlQueryTests.StringQuery = new org.springframework.jdbc.object.SqlQueryTests.StringQuery ( javax.sql.DataSource , java.lang.String ) ; org.springframework.jdbc.object.SqlQueryTests.StringQuery . setRowsExpected ( NUMBER ) ; java.lang.String [] java.lang.String[] = org.springframework.jdbc.object.SqlQueryTests.StringQuery . java.lang.String[] ( ) ; assertThat ( java.lang.String[] , is ( equalTo ( java.lang.String[] ) ) ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( false ) ; org.springframework.jdbc.object.SqlQueryTests.StringQuery org.springframework.jdbc.object.SqlQueryTests.StringQuery = new org.springframework.jdbc.object.SqlQueryTests.StringQuery ( javax.sql.DataSource , java.lang.String ) ; java.lang.String [] java.lang.String[] = org.springframework.jdbc.object.SqlQueryTests.StringQuery . java.lang.String[] ( ) ; assertThat ( java.lang.String[] , is ( equalTo ( new java.lang.String [ NUMBER ] ) ) ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING ) ; class CustomerQuery extends MappingSqlQuery < Customer > { public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; } @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; } public org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( int int , int int ) { return findObject ( int , int ) ; } } CustomerQuery query = new CustomerQuery ( javax.sql.DataSource ) ; Customer org.springframework.jdbc.object.Customer = query . org.springframework.jdbc.object.Customer ( NUMBER , NUMBER ) ; assertTrue ( STRING , org.springframework.jdbc.object.Customer . getId ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.jdbc.object.Customer . getForename ( ) . equals ( STRING ) ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( int int , int int ) { return findObject ( int , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING ) ; class CustomerQuery extends MappingSqlQuery < Customer > { public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; } @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; } public org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.lang.String java.lang.String ) { return findObject ( java.lang.String ) ; } } CustomerQuery query = new CustomerQuery ( javax.sql.DataSource ) ; Customer org.springframework.jdbc.object.Customer = query . org.springframework.jdbc.object.Customer ( STRING ) ; assertTrue ( STRING , org.springframework.jdbc.object.Customer . getId ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.jdbc.object.Customer . getForename ( ) . equals ( STRING ) ) ; verify ( java.sql.PreparedStatement ) . setString ( NUMBER , STRING ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.lang.String java.lang.String ) { return findObject ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { reset ( java.sql.Connection ) ; java.sql.PreparedStatement java.sql.PreparedStatement = mock ( java.sql.PreparedStatement .class ) ; java.sql.ResultSet java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; given ( java.sql.PreparedStatement . java.sql.ResultSet ( ) ) . willReturn ( java.sql.ResultSet ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( false ) ; given ( java.sql.Connection . java.sql.PreparedStatement ( java.lang.String ) ) . willReturn ( java.sql.PreparedStatement , java.sql.PreparedStatement ) ; class CustomerQuery extends MappingSqlQuery < Customer > { public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); declareParameter ( new SqlParameter ( java.lang.String[] [ NUMBER ] , int[] [ NUMBER ] ) ) ; declareParameter ( new SqlParameter ( java.lang.String[] [ NUMBER ] , int[] [ NUMBER ] ) ) ; compile ( ) ; } @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; } public org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( int int , java.lang.String java.lang.String ) { return findObject ( new java.lang.Object [] { int , java.lang.String } ) ; } } CustomerQuery query = new CustomerQuery ( javax.sql.DataSource ) ; Customer org.springframework.jdbc.object.Customer = query . org.springframework.jdbc.object.Customer ( NUMBER , STRING ) ; assertTrue ( STRING , org.springframework.jdbc.object.Customer != null ) ; assertTrue ( STRING , org.springframework.jdbc.object.Customer . getId ( ) == NUMBER ) ; Customer org.springframework.jdbc.object.Customer = query . org.springframework.jdbc.object.Customer ( NUMBER , STRING ) ; assertTrue ( STRING , org.springframework.jdbc.object.Customer == null ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . setString ( NUMBER , STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . setString ( NUMBER , STRING ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); declareParameter ( new SqlParameter ( java.lang.String[] [ NUMBER ] , int[] [ NUMBER ] ) ) ; declareParameter ( new SqlParameter ( java.lang.String[] [ NUMBER ] , int[] [ NUMBER ] ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( int int , java.lang.String java.lang.String ) { return findObject ( new java.lang.Object [] { int , java.lang.String } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER , NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING , STRING ) ; class CustomerQuery extends MappingSqlQuery < Customer > { public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; } @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; } public org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.lang.String java.lang.String ) { return findObject ( java.lang.String ) ; } } CustomerQuery query = new CustomerQuery ( javax.sql.DataSource ) ; org.springframework.jdbc.object.ExpectedException . expect ( IncorrectResultSizeDataAccessException .class ) ; try { query . org.springframework.jdbc.object.Customer ( STRING ) ; } finally { verify ( java.sql.PreparedStatement ) . setString ( NUMBER , STRING ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.lang.String java.lang.String ) { return findObject ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER , NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING , STRING ) ; class CustomerQuery extends MappingSqlQuery < Customer > { public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; } @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; } } CustomerQuery query = new CustomerQuery ( javax.sql.DataSource ) ; java.util.List<org.springframework.jdbc.object.Customer> < Customer > java.util.List<org.springframework.jdbc.object.Customer> = query . execute ( NUMBER , NUMBER ) ; assertTrue ( STRING , java.util.List<org.springframework.jdbc.object.Customer> . size ( ) == NUMBER ) ; assertThat ( java.util.List<org.springframework.jdbc.object.Customer> . get ( NUMBER ) . getForename ( ) , is ( STRING ) ) ; assertThat ( java.util.List<org.springframework.jdbc.object.Customer> . get ( NUMBER ) . getForename ( ) , is ( STRING ) ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER , NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING , STRING ) ; class CustomerQuery extends MappingSqlQuery < Customer > { public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; } @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; } } CustomerQuery query = new CustomerQuery ( javax.sql.DataSource ) ; java.util.List<org.springframework.jdbc.object.Customer> < Customer > java.util.List<org.springframework.jdbc.object.Customer> = query . execute ( STRING ) ; assertTrue ( STRING , java.util.List<org.springframework.jdbc.object.Customer> . size ( ) == NUMBER ) ; assertThat ( java.util.List<org.springframework.jdbc.object.Customer> . get ( NUMBER ) . getForename ( ) , is ( STRING ) ) ; assertThat ( java.util.List<org.springframework.jdbc.object.Customer> . get ( NUMBER ) . getForename ( ) , is ( STRING ) ) ; verify ( java.sql.PreparedStatement ) . setString ( NUMBER , STRING ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING ) ; given ( java.sql.Connection . java.sql.PreparedStatement ( java.lang.String , java.sql.ResultSet . int , java.sql.ResultSet . int ) ) . willReturn ( java.sql.PreparedStatement ) ; class CustomerQuery extends MappingSqlQuery < Customer > { public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); setResultSetType ( java.sql.ResultSet . int ) ; declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; } @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; } public org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( int int ) { return findObject ( int ) ; } } CustomerQuery query = new CustomerQuery ( javax.sql.DataSource ) ; Customer org.springframework.jdbc.object.Customer = query . org.springframework.jdbc.object.Customer ( NUMBER ) ; assertTrue ( STRING , org.springframework.jdbc.object.Customer . getId ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.jdbc.object.Customer . getForename ( ) . equals ( STRING ) ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); setResultSetType ( java.sql.ResultSet . int ) ; declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( int int ) { return findObject ( int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { class CustomerQuery extends MappingSqlQuery < Customer > { public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); setResultSetType ( java.sql.ResultSet . int ) ; declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; } @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; } public org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( int int ) { java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.HashMap<java.lang.String,java.lang.Integer> <> ( ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , int ) ; return executeByNamedParam ( java.util.Map<java.lang.String,java.lang.Integer> ) . get ( NUMBER ) ; } } CustomerQuery query = new CustomerQuery ( javax.sql.DataSource ) ; org.springframework.jdbc.object.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; query . org.springframework.jdbc.object.Customer ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); setResultSetType ( java.sql.ResultSet . int ) ; declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( int int ) { java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.HashMap<java.lang.String,java.lang.Integer> <> ( ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , int ) ; return executeByNamedParam ( java.util.Map<java.lang.String,java.lang.Integer> ) . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { void ( true ) ; }  <METHOD_END>
<METHOD_START> private void void ( final boolean boolean )			throws java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING ) ; given ( java.sql.Connection . java.sql.PreparedStatement ( java.lang.String , java.sql.ResultSet . int , java.sql.ResultSet . int ) ) . willReturn ( java.sql.PreparedStatement ) ; class CustomerQuery extends MappingSqlQuery < Customer > { public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); setResultSetType ( java.sql.ResultSet . int ) ; if ( boolean ) { declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; } else { declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; } compile ( ) ; } @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; } public org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( int int , java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , int ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; return executeByNamedParam ( java.util.Map<java.lang.String,java.lang.Object> ) . get ( NUMBER ) ; } } CustomerQuery query = new CustomerQuery ( javax.sql.DataSource ) ; Customer org.springframework.jdbc.object.Customer = query . org.springframework.jdbc.object.Customer ( NUMBER , STRING ) ; assertTrue ( STRING , org.springframework.jdbc.object.Customer . getId ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.jdbc.object.Customer . getForename ( ) . equals ( STRING ) ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . setString ( NUMBER , STRING ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); setResultSetType ( java.sql.ResultSet . int ) ; if ( boolean ) { declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; } else { declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; } compile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( int int , java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , int ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; return executeByNamedParam ( java.util.Map<java.lang.String,java.lang.Object> ) . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER , NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING , STRING ) ; given ( java.sql.Connection . java.sql.PreparedStatement ( java.lang.String , java.sql.ResultSet . int , java.sql.ResultSet . int ) ) . willReturn ( java.sql.PreparedStatement ) ; class CustomerQuery extends MappingSqlQuery < Customer > { public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); setResultSetType ( java.sql.ResultSet . int ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; compile ( ) ; } @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; } public java.util.List<org.springframework.jdbc.object.Customer> < Customer > java.util.List<org.springframework.jdbc.object.Customer> ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.List<java.lang.Integer> ) ; return executeByNamedParam ( java.util.Map<java.lang.String,java.lang.Object> ) ; } } CustomerQuery query = new CustomerQuery ( javax.sql.DataSource ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; java.util.List<org.springframework.jdbc.object.Customer> < Customer > java.util.List<org.springframework.jdbc.object.Customer> = query . java.util.List<org.springframework.jdbc.object.Customer> ( java.util.List<java.lang.Integer> ) ; assertEquals ( STRING , java.util.List<org.springframework.jdbc.object.Customer> . size ( ) , NUMBER ) ; assertEquals ( STRING , java.util.List<org.springframework.jdbc.object.Customer> . get ( NUMBER ) . getId ( ) , NUMBER ) ; assertEquals ( STRING , java.util.List<org.springframework.jdbc.object.Customer> . get ( NUMBER ) . getForename ( ) , STRING ) ; assertEquals ( STRING , java.util.List<org.springframework.jdbc.object.Customer> . get ( NUMBER ) . getId ( ) , NUMBER ) ; assertEquals ( STRING , java.util.List<org.springframework.jdbc.object.Customer> . get ( NUMBER ) . getForename ( ) , STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); setResultSetType ( java.sql.ResultSet . int ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.jdbc.object.Customer> < Customer > java.util.List<org.springframework.jdbc.object.Customer> ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.List<java.lang.Integer> ) ; return executeByNamedParam ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER , NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING , STRING ) ; given ( java.sql.Connection . java.sql.PreparedStatement ( java.lang.String , java.sql.ResultSet . int , java.sql.ResultSet . int ) ) . willReturn ( java.sql.PreparedStatement ) ; class CustomerQuery extends MappingSqlQuery < Customer > { public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); setResultSetType ( java.sql.ResultSet . int ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; compile ( ) ; } @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; } public java.util.List<org.springframework.jdbc.object.Customer> < Customer > java.util.List<org.springframework.jdbc.object.Customer> ( java.lang.Integer java.lang.Integer ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Integer ) ; return executeByNamedParam ( java.util.Map<java.lang.String,java.lang.Object> ) ; } } CustomerQuery query = new CustomerQuery ( javax.sql.DataSource ) ; java.util.List<org.springframework.jdbc.object.Customer> < Customer > java.util.List<org.springframework.jdbc.object.Customer> = query . java.util.List<org.springframework.jdbc.object.Customer> ( NUMBER ) ; assertEquals ( STRING , java.util.List<org.springframework.jdbc.object.Customer> . size ( ) , NUMBER ) ; assertEquals ( STRING , java.util.List<org.springframework.jdbc.object.Customer> . get ( NUMBER ) . getId ( ) , NUMBER ) ; assertEquals ( STRING , java.util.List<org.springframework.jdbc.object.Customer> . get ( NUMBER ) . getForename ( ) , STRING ) ; assertEquals ( STRING , java.util.List<org.springframework.jdbc.object.Customer> . get ( NUMBER ) . getId ( ) , NUMBER ) ; assertEquals ( STRING , java.util.List<org.springframework.jdbc.object.Customer> . get ( NUMBER ) . getForename ( ) , STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); setResultSetType ( java.sql.ResultSet . int ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.jdbc.object.Customer> < Customer > java.util.List<org.springframework.jdbc.object.Customer> ( java.lang.Integer java.lang.Integer ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Integer ) ; return executeByNamedParam ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.Connection . java.sql.PreparedStatement ( java.lang.String , java.sql.ResultSet . int , java.sql.ResultSet . int ) ) . willReturn ( java.sql.PreparedStatement ) ; class CustomerQuery extends MappingSqlQuery < Customer > { public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); setResultSetType ( java.sql.ResultSet . int ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; compile ( ) ; } @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; } public java.util.List<org.springframework.jdbc.object.Customer> < Customer > java.util.List<org.springframework.jdbc.object.Customer> ( java.lang.Integer java.lang.Integer ) { java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.HashMap<java.lang.String,java.lang.Integer> <> ( ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , java.lang.Integer ) ; return executeByNamedParam ( java.util.Map<java.lang.String,java.lang.Integer> ) ; } } CustomerQuery query = new CustomerQuery ( javax.sql.DataSource ) ; org.springframework.jdbc.object.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; query . java.util.List<org.springframework.jdbc.object.Customer> ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); setResultSetType ( java.sql.ResultSet . int ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.object.Customer = new Customer ( ) ; org.springframework.jdbc.object.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.object.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.object.Customer ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.jdbc.object.Customer> < Customer > java.util.List<org.springframework.jdbc.object.Customer> ( java.lang.Integer java.lang.Integer ) { java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.HashMap<java.lang.String,java.lang.Integer> <> ( ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , java.lang.Integer ) ; return executeByNamedParam ( java.util.Map<java.lang.String,java.lang.Integer> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER , NUMBER ) ; given ( java.sql.Connection . java.sql.PreparedStatement ( java.lang.String , java.sql.ResultSet . int , java.sql.ResultSet . int ) ) . willReturn ( java.sql.PreparedStatement ) ; class CustomerUpdateQuery extends UpdatableSqlQuery < Customer > { public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; } @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> )					throws java.sql.SQLException { java.sql.ResultSet . void ( NUMBER , STRING + java.util.Map<,> . get ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ) ; return null ; } } CustomerUpdateQuery query = new CustomerUpdateQuery ( javax.sql.DataSource ) ; java.util.Map<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > java.util.Map<java.lang.Integer,java.lang.String> = new java.util.HashMap<java.lang.Integer,java.lang.String> <> ( NUMBER ) ; java.util.Map<java.lang.Integer,java.lang.String> . java.lang.String ( NUMBER , STRING ) ; java.util.Map<java.lang.Integer,java.lang.String> . java.lang.String ( NUMBER , STRING ) ; query . execute ( NUMBER , java.util.Map<java.lang.Integer,java.lang.String> ) ; verify ( java.sql.ResultSet ) . updateString ( NUMBER , STRING ) ; verify ( java.sql.ResultSet ) . updateString ( NUMBER , STRING ) ; verify ( java.sql.ResultSet , times ( NUMBER ) ) . updateRow ( ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , java.lang.String ); declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.object.Customer org.springframework.jdbc.object.Customer ( java.sql.ResultSet java.sql.ResultSet , int int , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> )					throws java.sql.SQLException { java.sql.ResultSet . void ( NUMBER , STRING + java.util.Map<,> . get ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ) ; return null ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource , java.lang.String java.lang.String ) { super( javax.sql.DataSource , java.lang.String ); compile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { return java.sql.ResultSet . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = execute ( ) ; java.lang.String [] java.lang.String[] = java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ; return java.lang.String[] ; }  <METHOD_END>
