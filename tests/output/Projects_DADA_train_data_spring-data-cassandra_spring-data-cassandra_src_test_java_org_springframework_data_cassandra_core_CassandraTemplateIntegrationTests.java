<METHOD_START> @ Before public void void ( ) { MappingCassandraConverter org.springframework.data.cassandra.core.MappingCassandraConverter = new MappingCassandraConverter ( ) ; org.springframework.data.cassandra.core.MappingCassandraConverter . afterPropertiesSet ( ) ; org.springframework.data.cassandra.core.CassandraTemplate = new CassandraTemplate ( new CqlTemplate ( session ) , org.springframework.data.cassandra.core.MappingCassandraConverter ) ; SchemaTestUtils . potentiallyCreateTableFor ( Person .class , org.springframework.data.cassandra.core.CassandraTemplate ) ; SchemaTestUtils . potentiallyCreateTableFor ( UserToken .class , org.springframework.data.cassandra.core.CassandraTemplate ) ; SchemaTestUtils . potentiallyCreateTableFor ( BookReference .class , org.springframework.data.cassandra.core.CassandraTemplate ) ; SchemaTestUtils . truncate ( Person .class , org.springframework.data.cassandra.core.CassandraTemplate ) ; SchemaTestUtils . truncate ( UserToken .class , org.springframework.data.cassandra.core.CassandraTemplate ) ; SchemaTestUtils . truncate ( BookReference .class , org.springframework.data.cassandra.core.CassandraTemplate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; assertThat ( org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) . isNull ( ) ; Person org.springframework.data.cassandra.core.Person = org.springframework.data.cassandra.core.CassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ; assertThat ( org.springframework.data.cassandra.core.Person ) . isEqualTo ( org.springframework.data.cassandra.core.Person ) ; assertThat ( org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) . isEqualTo ( org.springframework.data.cassandra.core.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.core.CassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ; long long = org.springframework.data.cassandra.core.CassandraTemplate . count ( Person .class ) ; assertThat ( long ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.core.CassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ; org.springframework.data.cassandra.core.Person . setFirstname ( STRING ) ; Person org.springframework.data.cassandra.core.Person = org.springframework.data.cassandra.core.CassandraTemplate . update ( org.springframework.data.cassandra.core.Person ) ; assertThat ( org.springframework.data.cassandra.core.Person ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) . isEqualTo ( org.springframework.data.cassandra.core.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.core.CassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ; Person org.springframework.data.cassandra.core.Person = org.springframework.data.cassandra.core.CassandraTemplate . delete ( org.springframework.data.cassandra.core.Person ) ; assertThat ( org.springframework.data.cassandra.core.Person ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.core.CassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ; java.lang.Boolean java.lang.Boolean = org.springframework.data.cassandra.core.CassandraTemplate . deleteById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ; assertThat ( java.lang.Boolean ) . isTrue ( ) ; assertThat ( org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.core.CassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ; java.util.stream.Stream<org.springframework.data.cassandra.core.Person> < Person > java.util.stream.Stream<org.springframework.data.cassandra.core.Person> = org.springframework.data.cassandra.core.CassandraTemplate . stream ( STRING , Person .class ) ; assertThat ( java.util.stream.Stream<org.springframework.data.cassandra.core.Person> . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ) . hasSize ( NUMBER ) . contains ( org.springframework.data.cassandra.core.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.core.CassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ; org.springframework.data.cassandra.core.Person . setFirstname ( null ) ; org.springframework.data.cassandra.core.CassandraTemplate . update ( org.springframework.data.cassandra.core.Person ) ; Person org.springframework.data.cassandra.core.Person = org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ; assertThat ( org.springframework.data.cassandra.core.Person . getFirstname ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.core.Person . getId ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.core.CassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ; org.springframework.data.cassandra.core.Person . setFirstname ( null ) ; org.springframework.data.cassandra.core.CassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ; Person org.springframework.data.cassandra.core.Person = org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ; assertThat ( org.springframework.data.cassandra.core.Person . getFirstname ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.core.Person . getId ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BookReference org.springframework.data.cassandra.core.BookReference = new BookReference ( ) ; org.springframework.data.cassandra.core.BookReference . setIsbn ( STRING ) ; org.springframework.data.cassandra.core.BookReference . setBookmarks ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER , NUMBER ) ) ; org.springframework.data.cassandra.core.CassandraTemplate . insert ( org.springframework.data.cassandra.core.BookReference ) ; org.springframework.data.cassandra.core.BookReference . setBookmarks ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; org.springframework.data.cassandra.core.CassandraTemplate . update ( org.springframework.data.cassandra.core.BookReference ) ; BookReference org.springframework.data.cassandra.core.BookReference = org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.BookReference . getIsbn ( ) , BookReference .class ) ; assertThat ( org.springframework.data.cassandra.core.BookReference . getTitle ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.core.BookReference . getBookmarks ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UserToken org.springframework.data.cassandra.core.UserToken = new UserToken ( ) ; org.springframework.data.cassandra.core.UserToken . setToken ( UUIDs . startOf ( java.lang.System . long ( ) ) ) ; org.springframework.data.cassandra.core.UserToken . setUserId ( UUIDs . endOf ( java.lang.System . long ( ) ) ) ; org.springframework.data.cassandra.core.CassandraTemplate . insert ( org.springframework.data.cassandra.core.UserToken ) ; org.springframework.data.cassandra.core.UserToken . setUserComment ( STRING ) ; org.springframework.data.cassandra.core.CassandraTemplate . update ( org.springframework.data.cassandra.core.UserToken ) ; UserToken org.springframework.data.cassandra.core.UserToken = org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( BasicMapId . id ( STRING , org.springframework.data.cassandra.core.UserToken . getUserId ( ) ) . with ( STRING , org.springframework.data.cassandra.core.UserToken . getToken ( ) ) , UserToken .class ) ; assertThat ( org.springframework.data.cassandra.core.UserToken . getUserComment ( ) ) . isEqualTo ( STRING ) ; org.springframework.data.cassandra.core.CassandraTemplate . delete ( org.springframework.data.cassandra.core.UserToken ) ; UserToken org.springframework.data.cassandra.core.UserToken = org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( BasicMapId . id ( STRING , org.springframework.data.cassandra.core.UserToken . getUserId ( ) ) . with ( STRING , org.springframework.data.cassandra.core.UserToken . getToken ( ) ) , UserToken .class ) ; assertThat ( org.springframework.data.cassandra.core.UserToken ) . isNull ( ) ; }  <METHOD_END>
