<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( org.springframework.data.repository.core.support.ReactiveRepositoryInformationUnitTests.RxJava1InterfaceWithGenerics .class , STRING ) ; assertEquals ( ReactiveCrudRepository .class , java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; assertThat ( java.lang.reflect.Method . java.lang.String ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( org.springframework.data.repository.core.support.ReactiveRepositoryInformationUnitTests.RxJava1InterfaceWithGenerics .class , STRING , Observable .class ) ; assertEquals ( ReactiveCrudRepository .class , java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; assertThat ( java.lang.reflect.Method . java.lang.String ( ) , is ( STRING ) ) ; assertThat ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] , is ( equalTo ( Publisher .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( org.springframework.data.repository.core.support.ReactiveRepositoryInformationUnitTests.RxJava2InterfaceWithGenerics .class , STRING ) ; assertEquals ( ReactiveCrudRepository .class , java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; assertThat ( java.lang.reflect.Method . java.lang.String ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( org.springframework.data.repository.core.support.ReactiveRepositoryInformationUnitTests.RxJava2InterfaceWithGenerics .class , STRING , Flowable .class ) ; assertEquals ( ReactiveCrudRepository .class , java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; assertThat ( java.lang.reflect.Method . java.lang.String ( ) , is ( STRING ) ) ; assertThat ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] , is ( equalTo ( Publisher .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( ReactiveSortingRepository .class , STRING , Publisher .class ) ; assertEquals ( ReactiveCrudRepository .class , java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; assertThat ( java.lang.reflect.Method . java.lang.String ( ) , is ( STRING ) ) ; assertThat ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] , is ( equalTo ( Publisher .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( org.springframework.data.repository.core.support.ReactiveRepositoryInformationUnitTests.ReactiveJavaInterfaceWithGenerics .class , STRING , java.lang.Iterable .class ) ; assertEquals ( ReactiveCrudRepository .class , java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; assertThat ( java.lang.reflect.Method . java.lang.String ( ) , is ( STRING ) ) ; assertThat ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] , is ( equalTo ( java.lang.Iterable .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( org.springframework.data.repository.core.support.ReactiveRepositoryInformationUnitTests.ReactiveJavaInterfaceWithGenerics .class , STRING , java.lang.Object .class ) ; assertEquals ( ReactiveCrudRepository .class , java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; assertThat ( java.lang.reflect.Method . java.lang.String ( ) , is ( STRING ) ) ; assertThat ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] , is ( equalTo ( java.lang.Object .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( org.springframework.data.repository.core.support.ReactiveRepositoryInformationUnitTests.DummyRepository .class , STRING , java.lang.Iterable .class ) ; assertThat ( java.lang.reflect.Method , is ( ReactiveCrudRepository .class . java.lang.reflect.Method ( STRING , java.lang.Iterable .class ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class ... java.lang.Class[] )			throws java.lang.NoSuchMethodException { RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = new ReactiveRepositoryInformation ( new DefaultRepositoryMetadata ( java.lang.Class<> ) , java.lang.Class<org.springframework.data.repository.core.support.ReactiveRepositoryInformationUnitTests.ReactiveJavaInterfaceWithGenerics> , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; return org.springframework.data.repository.core.support.RepositoryInformation . getTargetClassMethod ( java.lang.Class<> . java.lang.reflect.Method ( java.lang.String , java.lang.Class[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override < S extends org.springframework.data.repository.core.support.ReactiveRepositoryInformationUnitTests.User > org.springframework.data.repository.core.support.Flux<S> < S > org.springframework.data.repository.core.support.Flux<S> ( java.lang.Iterable<S> < S > java.lang.Iterable<S> );  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
