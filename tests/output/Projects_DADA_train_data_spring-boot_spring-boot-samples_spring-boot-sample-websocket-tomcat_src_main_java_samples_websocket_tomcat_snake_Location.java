<METHOD_START> public void ( int int , int int ) { this . int = int ; this . int = int ; }  <METHOD_END>
<METHOD_START> public samples.websocket.tomcat.snake.Location samples.websocket.tomcat.snake.Location ( Direction samples.websocket.tomcat.snake.Direction ) { switch ( samples.websocket.tomcat.snake.Direction ) { case NORTH : return new samples.websocket.tomcat.snake.Location ( this . int , this . int - samples.websocket.tomcat.snake.Location . int ) ; case SOUTH : return new samples.websocket.tomcat.snake.Location ( this . int , this . int + samples.websocket.tomcat.snake.Location . int ) ; case EAST : return new samples.websocket.tomcat.snake.Location ( this . int + samples.websocket.tomcat.snake.Location . int , this . int ) ; case WEST : return new samples.websocket.tomcat.snake.Location ( this . int - samples.websocket.tomcat.snake.Location . int , this . int ) ; case NONE : default: return this ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null || java.lang.Class<? extends samples.websocket.tomcat.snake.Location> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } samples.websocket.tomcat.snake.Location samples.websocket.tomcat.snake.Location = ( samples.websocket.tomcat.snake.Location ) java.lang.Object ; if ( this . int != samples.websocket.tomcat.snake.Location . int ) { return false ; } if ( this . int != samples.websocket.tomcat.snake.Location . int ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = this . int ; int = NUMBER * int + this . int ; return int ; }  <METHOD_END>
