<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> public void ( ApplicationEventPublisher org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher ) { this . boolean = false ; this . org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher = org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher ; this . org.springframework.integration.ip.tcp.connection.SocketInfo = null ; }  <METHOD_END>
<METHOD_START> public void ( java.net.Socket java.net.Socket , boolean boolean , boolean boolean , ApplicationEventPublisher org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher , java.lang.String java.lang.String ) { this . org.springframework.integration.ip.tcp.connection.SocketInfo = new SocketInfo ( java.net.Socket ) ; this . boolean = boolean ; java.net.InetAddress java.net.InetAddress = java.net.Socket . java.net.InetAddress ( ) ; if ( java.net.InetAddress != null ) { this . java.lang.String = java.net.InetAddress . java.lang.String ( ) ; if ( boolean ) { this . java.lang.String = java.net.InetAddress . java.lang.String ( ) ; } else { this . java.lang.String = this . java.lang.String ; } } int int = java.net.Socket . int ( ) ; int int = java.net.Socket . int ( ) ; this . java.lang.String = this . java.lang.String + STRING + int + STRING + int + STRING + java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ; this . org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher = org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher ; if ( java.lang.String != null ) { this . java.lang.String = java.lang.String ; } if ( this . org.springframework.integration.ip.tcp.connection.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.ip.tcp.connection.Log . debug ( STRING + this . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.ip.tcp.connection.TcpSender != null ) { this . org.springframework.integration.ip.tcp.connection.TcpSender . removeDeadConnection ( this ) ; } if ( ! this . java.util.concurrent.atomic.AtomicBoolean . boolean ( true ) ) { this . void ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( boolean boolean ) { TcpListener org.springframework.integration.ip.tcp.connection.TcpListener = org.springframework.integration.ip.tcp.connection.TcpListener ( ) ; if ( ! ( org.springframework.integration.ip.tcp.connection.TcpListener instanceof TcpConnectionInterceptor ) ) { void ( ) ; } else { TcpConnectionInterceptor org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptor = ( TcpConnectionInterceptor ) org.springframework.integration.ip.tcp.connection.TcpListener ; while ( org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptor . getListener ( ) instanceof TcpConnectionInterceptor ) { org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptor = ( TcpConnectionInterceptor ) org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptor . getListener ( ) ; } org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptor . close ( ) ; if ( boolean ) { this . void ( ) ; } } }  <METHOD_END>
<METHOD_START> public org.springframework.integration.ip.tcp.connection.TcpMessageMapper org.springframework.integration.ip.tcp.connection.TcpMessageMapper ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpMessageMapper ; }  <METHOD_END>
<METHOD_START> public void void ( TcpMessageMapper org.springframework.integration.ip.tcp.connection.TcpMessageMapper ) { Assert . notNull ( org.springframework.integration.ip.tcp.connection.TcpMessageMapper , this . java.lang.Class<? extends org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> ( ) . java.lang.String ( ) + STRING ) ; this . org.springframework.integration.ip.tcp.connection.TcpMessageMapper = org.springframework.integration.ip.tcp.connection.TcpMessageMapper ; if ( this . org.springframework.integration.ip.tcp.connection.Serializer != null && ! ( this . org.springframework.integration.ip.tcp.connection.Serializer instanceof AbstractByteArraySerializer ) ) { org.springframework.integration.ip.tcp.connection.TcpMessageMapper . setStringToBytes ( false ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.Deserializer<?> < ? > org.springframework.integration.ip.tcp.connection.Deserializer<?> ( ) { return this . org.springframework.integration.ip.tcp.connection.Deserializer ; }  <METHOD_END>
<METHOD_START> public void void ( Deserializer < ? > org.springframework.integration.ip.tcp.connection.Deserializer<?> ) { this . org.springframework.integration.ip.tcp.connection.Deserializer = org.springframework.integration.ip.tcp.connection.Deserializer<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.Serializer<?> < ? > org.springframework.integration.ip.tcp.connection.Serializer<?> ( ) { return this . org.springframework.integration.ip.tcp.connection.Serializer ; }  <METHOD_END>
<METHOD_START> public void void ( Serializer < ? > org.springframework.integration.ip.tcp.connection.Serializer<?> ) { this . org.springframework.integration.ip.tcp.connection.Serializer = org.springframework.integration.ip.tcp.connection.Serializer<> ; if ( ! ( org.springframework.integration.ip.tcp.connection.Serializer<> instanceof AbstractByteArraySerializer ) ) { this . org.springframework.integration.ip.tcp.connection.TcpMessageMapper . setStringToBytes ( false ) ; } }  <METHOD_END>
<METHOD_START> public void void ( TcpListener org.springframework.integration.ip.tcp.connection.TcpListener ) { this . org.springframework.integration.ip.tcp.connection.TcpListener = org.springframework.integration.ip.tcp.connection.TcpListener ; this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . boolean = true ; this . org.springframework.integration.ip.tcp.connection.TcpListener = message -> getListener ( ) . onMessage ( message ) ; }  <METHOD_END>
<METHOD_START> public void void ( TcpSender org.springframework.integration.ip.tcp.connection.TcpSender ) { this . org.springframework.integration.ip.tcp.connection.TcpSender = org.springframework.integration.ip.tcp.connection.TcpSender ; if ( org.springframework.integration.ip.tcp.connection.TcpSender != null ) { org.springframework.integration.ip.tcp.connection.TcpSender . addNewConnection ( this ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.TcpListener org.springframework.integration.ip.tcp.connection.TcpListener ( ) { if ( this . boolean ) { if ( this . org.springframework.integration.ip.tcp.connection.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.ip.tcp.connection.Log . debug ( java.lang.String ( ) + STRING ) ; } void ( ) ; } return this . org.springframework.integration.ip.tcp.connection.TcpListener ; }  <METHOD_END>
<METHOD_START> private void void ( ) { try { Assert . state ( this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , STRING ) ; this . boolean = false ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw new MessagingException ( STRING , java.lang.InterruptedException ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.integration.ip.tcp.connection.TcpSender org.springframework.integration.ip.tcp.connection.TcpSender ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpSender ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.SocketInfo org.springframework.integration.ip.tcp.connection.SocketInfo ( ) { return this . org.springframework.integration.ip.tcp.connection.SocketInfo ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected final void void ( java.lang.Exception java.lang.Exception ) { if ( ! this . java.util.concurrent.atomic.AtomicBoolean . boolean ( true ) && this . org.springframework.integration.ip.tcp.connection.TcpListener ( ) != null ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map ( IpHeaders . CONNECTION_ID , ( java.lang.Object ) this . java.lang.String ( ) ) ; ErrorMessage org.springframework.integration.ip.tcp.connection.ErrorMessage = new ErrorMessage ( java.lang.Exception , java.util.Map<java.lang.String,java.lang.Object> ) ; this . org.springframework.integration.ip.tcp.connection.TcpListener ( ) . onMessage ( org.springframework.integration.ip.tcp.connection.ErrorMessage ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { TcpConnectionEvent org.springframework.integration.ip.tcp.connection.TcpConnectionEvent = new TcpConnectionOpenEvent ( this , this . java.lang.String ) ; void ( org.springframework.integration.ip.tcp.connection.TcpConnectionEvent ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { TcpConnectionEvent org.springframework.integration.ip.tcp.connection.TcpConnectionEvent = new TcpConnectionCloseEvent ( this , this . java.lang.String ) ; void ( org.springframework.integration.ip.tcp.connection.TcpConnectionEvent ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Throwable java.lang.Throwable ) { TcpConnectionEvent org.springframework.integration.ip.tcp.connection.TcpConnectionEvent = new TcpConnectionExceptionEvent ( this , this . java.lang.String , java.lang.Throwable ) ; void ( org.springframework.integration.ip.tcp.connection.TcpConnectionEvent ) ; }  <METHOD_END>
<METHOD_START> public void void ( TcpConnectionEvent org.springframework.integration.ip.tcp.connection.TcpConnectionEvent ) { Assert . isTrue ( org.springframework.integration.ip.tcp.connection.TcpConnectionEvent . getSource ( ) == this , STRING ) ; this . void ( org.springframework.integration.ip.tcp.connection.TcpConnectionEvent ) ; }  <METHOD_END>
<METHOD_START> private void void ( TcpConnectionEvent org.springframework.integration.ip.tcp.connection.TcpConnectionEvent ) { try { if ( this . org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher == null ) { this . org.springframework.integration.ip.tcp.connection.Log . warn ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionEvent ) ; } else { this . org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher . publishEvent ( org.springframework.integration.ip.tcp.connection.TcpConnectionEvent ) ; if ( this . org.springframework.integration.ip.tcp.connection.Log . isTraceEnabled ( ) ) { this . org.springframework.integration.ip.tcp.connection.Log . trace ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionEvent ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { if ( this . org.springframework.integration.ip.tcp.connection.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.ip.tcp.connection.Log . debug ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionEvent , java.lang.Exception ) ; } else if ( this . org.springframework.integration.ip.tcp.connection.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.ip.tcp.connection.Log . warn ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionEvent + STRING + java.lang.Exception . java.lang.String ( ) ) ; } } }  <METHOD_END>
