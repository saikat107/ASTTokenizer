<METHOD_START> public void ( MessageConverter org.springframework.messaging.handler.annotation.support.MessageConverter ) { this( org.springframework.messaging.handler.annotation.support.MessageConverter , null ); }  <METHOD_END>
<METHOD_START> public void ( MessageConverter org.springframework.messaging.handler.annotation.support.MessageConverter , Validator org.springframework.messaging.handler.annotation.support.Validator ) { this( org.springframework.messaging.handler.annotation.support.MessageConverter , org.springframework.messaging.handler.annotation.support.Validator , true ); }  <METHOD_END>
<METHOD_START> public void ( MessageConverter org.springframework.messaging.handler.annotation.support.MessageConverter , Validator org.springframework.messaging.handler.annotation.support.Validator , boolean boolean ) { Assert . notNull ( org.springframework.messaging.handler.annotation.support.MessageConverter , STRING ) ; this . org.springframework.messaging.handler.annotation.support.MessageConverter = org.springframework.messaging.handler.annotation.support.MessageConverter ; this . org.springframework.messaging.handler.annotation.support.Validator = org.springframework.messaging.handler.annotation.support.Validator ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.messaging.handler.annotation.support.MethodParameter ) { return ( org.springframework.messaging.handler.annotation.support.MethodParameter . hasParameterAnnotation ( Payload .class ) || this . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.messaging.handler.annotation.support.MethodParameter , Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> ) throws java.lang.Exception { Payload org.springframework.messaging.handler.annotation.support.Payload = org.springframework.messaging.handler.annotation.support.MethodParameter . getParameterAnnotation ( Payload .class ) ; if ( org.springframework.messaging.handler.annotation.support.Payload != null && StringUtils . hasText ( org.springframework.messaging.handler.annotation.support.Payload . expression ( ) ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } java.lang.Object java.lang.Object = org.springframework.messaging.handler.annotation.support.Message<> . getPayload ( ) ; if ( boolean ( java.lang.Object ) ) { if ( org.springframework.messaging.handler.annotation.support.Payload == null || org.springframework.messaging.handler.annotation.support.Payload . required ( ) ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.messaging.handler.annotation.support.MethodParameter ) ; BindingResult org.springframework.messaging.handler.annotation.support.BindingResult = new BeanPropertyBindingResult ( java.lang.Object , java.lang.String ) ; org.springframework.messaging.handler.annotation.support.BindingResult . addError ( new ObjectError ( java.lang.String , STRING ) ) ; throw new MethodArgumentNotValidException ( org.springframework.messaging.handler.annotation.support.Message<> , org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.BindingResult ) ; } else { return null ; } } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.messaging.handler.annotation.support.MethodParameter . getParameterType ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( ClassUtils . isAssignable ( java.lang.Class<> , java.lang.Class<> ) ) { void ( org.springframework.messaging.handler.annotation.support.Message<> , org.springframework.messaging.handler.annotation.support.MethodParameter , java.lang.Object ) ; return java.lang.Object ; } else { if ( this . org.springframework.messaging.handler.annotation.support.MessageConverter instanceof SmartMessageConverter ) { SmartMessageConverter org.springframework.messaging.handler.annotation.support.SmartMessageConverter = ( SmartMessageConverter ) this . org.springframework.messaging.handler.annotation.support.MessageConverter ; java.lang.Object = org.springframework.messaging.handler.annotation.support.SmartMessageConverter . fromMessage ( org.springframework.messaging.handler.annotation.support.Message<> , java.lang.Class<> , org.springframework.messaging.handler.annotation.support.MethodParameter ) ; } else { java.lang.Object = this . org.springframework.messaging.handler.annotation.support.MessageConverter . fromMessage ( org.springframework.messaging.handler.annotation.support.Message<> , java.lang.Class<> ) ; } if ( java.lang.Object == null ) { throw new MessageConversionException ( org.springframework.messaging.handler.annotation.support.Message<> , STRING + java.lang.Class<> . java.lang.String ( ) + STRING + java.lang.Class<> . java.lang.String ( ) + STRING + org.springframework.messaging.handler.annotation.support.Message<> ) ; } void ( org.springframework.messaging.handler.annotation.support.Message<> , org.springframework.messaging.handler.annotation.support.MethodParameter , java.lang.Object ) ; return java.lang.Object ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( MethodParameter org.springframework.messaging.handler.annotation.support.MethodParameter ) { java.lang.String java.lang.String = org.springframework.messaging.handler.annotation.support.MethodParameter . getParameterName ( ) ; return ( java.lang.String != null ? java.lang.String : STRING + org.springframework.messaging.handler.annotation.support.MethodParameter . getParameterIndex ( ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return true ; } else if ( java.lang.Object instanceof byte [] ) { return ( ( byte [] ) java.lang.Object ) . int == NUMBER ; } else if ( java.lang.Object instanceof java.lang.String ) { return ! StringUtils . hasText ( ( java.lang.String ) java.lang.Object ) ; } else { return false ; } }  <METHOD_END>
<METHOD_START> protected void void ( Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> , MethodParameter org.springframework.messaging.handler.annotation.support.MethodParameter , java.lang.Object java.lang.Object ) { if ( this . org.springframework.messaging.handler.annotation.support.Validator == null ) { return; } for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : org.springframework.messaging.handler.annotation.support.MethodParameter . getParameterAnnotations ( ) ) { Validated org.springframework.messaging.handler.annotation.support.Validated = AnnotationUtils . getAnnotation ( java.lang.annotation.Annotation , Validated .class ) ; if ( org.springframework.messaging.handler.annotation.support.Validated != null || java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) . boolean ( STRING ) ) { java.lang.Object java.lang.Object = ( org.springframework.messaging.handler.annotation.support.Validated != null ? org.springframework.messaging.handler.annotation.support.Validated . value ( ) : AnnotationUtils . getValue ( java.lang.annotation.Annotation ) ) ; java.lang.Object [] java.lang.Object[] = ( java.lang.Object instanceof java.lang.Object [] ? ( java.lang.Object [] ) java.lang.Object : new java.lang.Object [] { java.lang.Object } ) ; BeanPropertyBindingResult org.springframework.messaging.handler.annotation.support.BeanPropertyBindingResult = new BeanPropertyBindingResult ( java.lang.Object , java.lang.String ( org.springframework.messaging.handler.annotation.support.MethodParameter ) ) ; if ( ! ObjectUtils . isEmpty ( java.lang.Object[] ) && this . org.springframework.messaging.handler.annotation.support.Validator instanceof SmartValidator ) { ( ( SmartValidator ) this . org.springframework.messaging.handler.annotation.support.Validator ) . validate ( java.lang.Object , org.springframework.messaging.handler.annotation.support.BeanPropertyBindingResult , java.lang.Object[] ) ; } else { this . org.springframework.messaging.handler.annotation.support.Validator . validate ( java.lang.Object , org.springframework.messaging.handler.annotation.support.BeanPropertyBindingResult ) ; } if ( org.springframework.messaging.handler.annotation.support.BeanPropertyBindingResult . hasErrors ( ) ) { throw new MethodArgumentNotValidException ( org.springframework.messaging.handler.annotation.support.Message<> , org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.BeanPropertyBindingResult ) ; } break; } } }  <METHOD_END>
