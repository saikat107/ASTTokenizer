<METHOD_START> public void ( SockJsServiceConfig org.springframework.web.socket.sockjs.transport.handler.SockJsServiceConfig , WebSocketHandler org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , WebSocketServerSockJsSession org.springframework.web.socket.sockjs.transport.handler.WebSocketServerSockJsSession ) { Assert . notNull ( org.springframework.web.socket.sockjs.transport.handler.SockJsServiceConfig , STRING ) ; Assert . notNull ( org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , STRING ) ; Assert . notNull ( org.springframework.web.socket.sockjs.transport.handler.WebSocketServerSockJsSession , STRING ) ; this . org.springframework.web.socket.sockjs.transport.handler.SockJsServiceConfig = org.springframework.web.socket.sockjs.transport.handler.SockJsServiceConfig ; this . org.springframework.web.socket.sockjs.transport.handler.WebSocketServerSockJsSession = org.springframework.web.socket.sockjs.transport.handler.WebSocketServerSockJsSession ; org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler = WebSocketHandlerDecorator . unwrap ( org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; this . java.util.List<java.lang.String> = ( ( org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler instanceof SubProtocolCapable ) ? new java.util.ArrayList <> ( ( ( SubProtocolCapable ) org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) . getSubProtocols ( ) ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.socket.sockjs.transport.handler.SockJsServiceConfig org.springframework.web.socket.sockjs.transport.handler.SockJsServiceConfig ( ) { return this . org.springframework.web.socket.sockjs.transport.handler.SockJsServiceConfig ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.sockjs.transport.handler.WebSocketSession ) throws java.lang.Exception { Assert . isTrue ( this . java.util.concurrent.atomic.AtomicInteger . boolean ( NUMBER , NUMBER ) , STRING ) ; this . org.springframework.web.socket.sockjs.transport.handler.WebSocketServerSockJsSession . initializeDelegateSession ( org.springframework.web.socket.sockjs.transport.handler.WebSocketSession ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.sockjs.transport.handler.WebSocketSession , TextMessage org.springframework.web.socket.sockjs.transport.handler.TextMessage ) throws java.lang.Exception { this . org.springframework.web.socket.sockjs.transport.handler.WebSocketServerSockJsSession . handleMessage ( org.springframework.web.socket.sockjs.transport.handler.TextMessage , org.springframework.web.socket.sockjs.transport.handler.WebSocketSession ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.sockjs.transport.handler.WebSocketSession , CloseStatus org.springframework.web.socket.sockjs.transport.handler.CloseStatus ) throws java.lang.Exception { this . org.springframework.web.socket.sockjs.transport.handler.WebSocketServerSockJsSession . delegateConnectionClosed ( org.springframework.web.socket.sockjs.transport.handler.CloseStatus ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.sockjs.transport.handler.WebSocketSession , java.lang.Throwable java.lang.Throwable ) throws java.lang.Exception { this . org.springframework.web.socket.sockjs.transport.handler.WebSocketServerSockJsSession . delegateError ( java.lang.Throwable ) ; }  <METHOD_END>
