<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = TestScenarioCreator . getTestEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.MapAccessTests.MapAccessor ( ) ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = TestScenarioCreator . getTestEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , STRING ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.lang.Object java.lang.Object = new org.springframework.expression.spel.MapAccessTests.TestBean ( STRING , new org.springframework.expression.spel.MapAccessTests.TestBean ( STRING , null , STRING , NUMBER , java.util.Map<java.lang.String,java.lang.String> ) , STRING , NUMBER , java.util.Map<java.lang.String,java.lang.String> ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( java.util.Map<java.lang.String,java.lang.String> ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; StopWatch org.springframework.expression.spel.StopWatch = new StopWatch ( ) ; org.springframework.expression.spel.StopWatch . start ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; } org.springframework.expression.spel.StopWatch . stop ( ) ; assertThat ( org.springframework.expression.spel.StopWatch . getTotalTimeMillis ( ) , lessThan ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , org.springframework.expression.spel.MapAccessTests.TestBean org.springframework.expression.spel.MapAccessTests.TestBean , java.lang.String java.lang.String , java.lang.Integer java.lang.Integer , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . java.lang.String = java.lang.String ; this . org.springframework.expression.spel.MapAccessTests.TestBean = org.springframework.expression.spel.MapAccessTests.TestBean ; this . java.lang.String = java.lang.String ; this . java.lang.Integer = java.lang.Integer ; this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.MapAccessTests.TestBean org.springframework.expression.spel.MapAccessTests.TestBean ( ) { return org.springframework.expression.spel.MapAccessTests.TestBean ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.expression.spel.MapAccessTests.TestBean org.springframework.expression.spel.MapAccessTests.TestBean ) { this . org.springframework.expression.spel.MapAccessTests.TestBean = org.springframework.expression.spel.MapAccessTests.TestBean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return ( ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return new TypedValue ( ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . get ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.AccessException { ( ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.lang.Object ) . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class<?> < ? > [] { java.util.Map .class } ; }  <METHOD_END>
