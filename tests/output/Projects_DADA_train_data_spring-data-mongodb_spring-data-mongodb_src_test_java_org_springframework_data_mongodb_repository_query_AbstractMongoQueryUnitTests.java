<METHOD_START> @ Before public void void ( ) { doReturn ( STRING ) . when ( org.springframework.data.mongodb.repository.query.BasicMongoPersistentEntity<> ) . getCollection ( ) ; doReturn ( java.util.Optional . java.util.Optional ( org.springframework.data.mongodb.repository.query.BasicMongoPersistentEntity<> ) ) . when ( org.springframework.data.mongodb.repository.query.MongoMappingContext ) . getPersistentEntity ( Mockito . any ( java.lang.Class .class ) ) ; doReturn ( org.springframework.data.mongodb.repository.query.BasicMongoPersistentEntity<> ) . when ( org.springframework.data.mongodb.repository.query.MongoMappingContext ) . getRequiredPersistentEntity ( Mockito . any ( java.lang.Class .class ) ) ; doReturn ( Person .class ) . when ( org.springframework.data.mongodb.repository.query.BasicMongoPersistentEntity<> ) . getType ( ) ; DbRefResolver org.springframework.data.mongodb.repository.query.DbRefResolver = new DefaultDbRefResolver ( mock ( MongoDbFactory .class ) ) ; MappingMongoConverter org.springframework.data.mongodb.repository.query.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.repository.query.DbRefResolver , org.springframework.data.mongodb.repository.query.MongoMappingContext ) ; org.springframework.data.mongodb.repository.query.MappingMongoConverter . afterPropertiesSet ( ) ; doReturn ( org.springframework.data.mongodb.repository.query.MappingMongoConverter ) . when ( org.springframework.data.mongodb.repository.query.MongoOperations ) . getConverter ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( STRING , java.lang.String .class ) . org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( true ) . execute ( new java.lang.Object [] { STRING } ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations , times ( NUMBER ) ) . remove ( Matchers . any ( Query .class ) , eq ( Person .class ) , eq ( STRING ) ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations , times ( NUMBER ) ) . find ( Matchers . any ( Query .class ) , Matchers . any ( java.lang.Class .class ) , Matchers . anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( STRING , java.lang.String .class ) . org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( true ) . execute ( new java.lang.Object [] { STRING } ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations , times ( NUMBER ) ) . findAllAndRemove ( Mockito . any ( Query .class ) , eq ( Person .class ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake = org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( STRING , java.lang.String .class ) ; org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake . org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( true ) ; assertThat ( org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake . execute ( new java.lang.Object [] { STRING } ) , Is .< java.lang.Object > is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.mongodb.repository.query.DeleteResult . getDeletedCount ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.mongodb.repository.query.MongoOperations . remove ( Matchers . any ( Query .class ) , eq ( Person .class ) , eq ( STRING ) ) ) . thenReturn ( org.springframework.data.mongodb.repository.query.DeleteResult ) ; org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake = org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( STRING , java.lang.String .class ) ; org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake . org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( true ) ; assertThat ( org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake . execute ( new java.lang.Object [] { STRING } ) , is ( ( java.lang.Object ) NUMBER ) ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations , times ( NUMBER ) ) . remove ( Matchers . any ( Query .class ) , eq ( Person .class ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake = org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( STRING , java.lang.String .class ) ; org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake . execute ( new java.lang.Object [] { STRING } ) ; ArgumentCaptor < Query > org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> = ArgumentCaptor . forClass ( Query .class ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations , times ( NUMBER ) ) . find ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . capture ( ) , eq ( Person .class ) , eq ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . getValue ( ) . getMeta ( ) . getComment ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake = org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( STRING , java.lang.String .class , Pageable .class ) ; org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake . execute ( new java.lang.Object [] { STRING , new PageRequest ( NUMBER , NUMBER ) } ) ; ArgumentCaptor < Query > org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> = ArgumentCaptor . forClass ( Query .class ) ; verify ( this . org.springframework.data.mongodb.repository.query.MongoOperations , times ( NUMBER ) ) . find ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . capture ( ) , eq ( Person .class ) , eq ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . getValue ( ) . getMeta ( ) . getComment ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake = org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( STRING , java.lang.String .class , Pageable .class ) ; org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake . execute ( new java.lang.Object [] { STRING , new PageRequest ( NUMBER , NUMBER ) } ) ; ArgumentCaptor < Query > org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> = ArgumentCaptor . forClass ( Query .class ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations , times ( NUMBER ) ) . count ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . capture ( ) , eq ( Person .class ) , eq ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . getValue ( ) . getMeta ( ) . getComment ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake = org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( STRING , java.lang.String .class , Pageable .class ) ; org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake . execute ( new java.lang.Object [] { STRING , new PageRequest ( NUMBER , NUMBER ) } ) ; ArgumentCaptor < Query > org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> = ArgumentCaptor . forClass ( Query .class ) ; verify ( this . org.springframework.data.mongodb.repository.query.MongoOperations , times ( NUMBER ) ) . find ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . capture ( ) , eq ( Person .class ) , eq ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . getValue ( ) . getMeta ( ) . getComment ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake = org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( STRING , java.lang.String .class , Pageable .class ) ; Pageable org.springframework.data.mongodb.repository.query.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Pageable org.springframework.data.mongodb.repository.query.Pageable = org.springframework.data.mongodb.repository.query.Pageable . next ( ) ; org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake . execute ( new java.lang.Object [] { STRING , org.springframework.data.mongodb.repository.query.Pageable } ) ; org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake . execute ( new java.lang.Object [] { STRING , org.springframework.data.mongodb.repository.query.Pageable } ) ; ArgumentCaptor < Query > org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> = ArgumentCaptor . forClass ( Query .class ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations , times ( NUMBER ) ) . find ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . capture ( ) , eq ( Person .class ) , eq ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . getAllValues ( ) . get ( NUMBER ) . getSkip ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . getAllValues ( ) . get ( NUMBER ) . getSkip ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake = org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( STRING , java.lang.String .class , Pageable .class ) ; Pageable org.springframework.data.mongodb.repository.query.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Pageable org.springframework.data.mongodb.repository.query.Pageable = org.springframework.data.mongodb.repository.query.Pageable . next ( ) ; org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake . execute ( new java.lang.Object [] { STRING , org.springframework.data.mongodb.repository.query.Pageable } ) ; org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake . execute ( new java.lang.Object [] { STRING , org.springframework.data.mongodb.repository.query.Pageable } ) ; ArgumentCaptor < Query > org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> = ArgumentCaptor . forClass ( Query .class ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations , times ( NUMBER ) ) . find ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . capture ( ) , eq ( Person .class ) , eq ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . getAllValues ( ) . get ( NUMBER ) . getLimit ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . getAllValues ( ) . get ( NUMBER ) . getLimit ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake = org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( STRING , java.lang.String .class , Pageable .class ) ; Pageable org.springframework.data.mongodb.repository.query.Pageable = new PageRequest ( NUMBER , NUMBER , Sort . Direction . DESC , STRING ) ; Pageable org.springframework.data.mongodb.repository.query.Pageable = org.springframework.data.mongodb.repository.query.Pageable . next ( ) ; org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake . execute ( new java.lang.Object [] { STRING , org.springframework.data.mongodb.repository.query.Pageable } ) ; org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake . execute ( new java.lang.Object [] { STRING , org.springframework.data.mongodb.repository.query.Pageable } ) ; ArgumentCaptor < Query > org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> = ArgumentCaptor . forClass ( Query .class ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations , times ( NUMBER ) ) . find ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . capture ( ) , eq ( Person .class ) , eq ( STRING ) ) ; Document org.springframework.data.mongodb.repository.query.Document = new Document ( ) . append ( STRING , - NUMBER ) ; assertThat ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . getAllValues ( ) . get ( NUMBER ) . getSortObject ( ) , is ( org.springframework.data.mongodb.repository.query.Document ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.ArgumentCaptor<org.springframework.data.mongodb.repository.query.Query> . getAllValues ( ) . get ( NUMBER ) . getSortObject ( ) , is ( org.springframework.data.mongodb.repository.query.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.repository.query.Person = new Person ( ) ; when ( org.springframework.data.mongodb.repository.query.MongoOperations . findOne ( Mockito . any ( Query .class ) , eq ( Person .class ) , eq ( STRING ) ) ) . thenReturn ( org.springframework.data.mongodb.repository.query.Person ) ; AbstractMongoQuery org.springframework.data.mongodb.repository.query.AbstractMongoQuery = org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( STRING , java.lang.String .class ) ; assertThat ( org.springframework.data.mongodb.repository.query.AbstractMongoQuery . execute ( new java.lang.Object [] { STRING } ) , is ( ( java.lang.Object ) org.springframework.data.mongodb.repository.query.Person ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { try { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.Repo .class . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; ProjectionFactory org.springframework.data.mongodb.repository.query.ProjectionFactory = new SpelAwareProxyProjectionFactory ( ) ; MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = new MongoQueryMethod ( java.lang.reflect.Method , new DefaultRepositoryMetadata ( org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.Repo .class ) , org.springframework.data.mongodb.repository.query.ProjectionFactory , org.springframework.data.mongodb.repository.query.MongoMappingContext ) ; return new org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( org.springframework.data.mongodb.repository.query.MongoQueryMethod , org.springframework.data.mongodb.repository.query.MongoOperations ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new java.lang.IllegalArgumentException ( java.lang.NoSuchMethodException . java.lang.String ( ) , java.lang.NoSuchMethodException ) ; } catch ( java.lang.SecurityException java.lang.SecurityException ) { throw new java.lang.IllegalArgumentException ( java.lang.SecurityException . java.lang.String ( ) , java.lang.SecurityException ) ; } }  <METHOD_END>
<METHOD_START> public void ( MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod , MongoOperations org.springframework.data.mongodb.repository.query.MongoOperations ) { super( org.springframework.data.mongodb.repository.query.MongoQueryMethod , org.springframework.data.mongodb.repository.query.MongoOperations ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.repository.query.Query org.springframework.data.mongodb.repository.query.Query ( ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) { return new BasicQuery ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake org.springframework.data.mongodb.repository.query.AbstractMongoQueryUnitTests.MongoQueryFake ( boolean boolean ) { this . boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.Long java.lang.Long ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Meta ( comment = STRING , flags = { org . springframework . data . mongodb . core . query . Meta . CursorOption . NO_TIMEOUT } ) org.springframework.data.mongodb.repository.query.Page<org.springframework.data.mongodb.repository.query.Person> < Person > org.springframework.data.mongodb.repository.query.Page<org.springframework.data.mongodb.repository.query.Person> ( java.lang.String java.lang.String , Pageable org.springframework.data.mongodb.repository.query.Pageable );  <METHOD_END>
<METHOD_START> @ Meta ( comment = STRING ) @ org . springframework . data . mongodb . repository . org.springframework.data.mongodb.repository.Query ( STRING ) org.springframework.data.mongodb.repository.query.Page<org.springframework.data.mongodb.repository.query.Person> < Person > org.springframework.data.mongodb.repository.query.Page<org.springframework.data.mongodb.repository.query.Person> ( java.lang.String java.lang.String , Pageable org.springframework.data.mongodb.repository.query.Pageable );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.Slice<org.springframework.data.mongodb.repository.query.Person> < Person > org.springframework.data.mongodb.repository.query.Slice<org.springframework.data.mongodb.repository.query.Person> ( java.lang.String java.lang.String , Pageable org.springframework.data.mongodb.repository.query.Pageable );  <METHOD_END>
<METHOD_START> java.util.Optional<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.Optional<org.springframework.data.mongodb.repository.query.Person> ( java.lang.String java.lang.String );  <METHOD_END>
