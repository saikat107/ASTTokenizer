<METHOD_START> @ Test public void void ( ) { Metamodel org.springframework.data.jpa.infrastructure.Metamodel = org.springframework.data.jpa.infrastructure.EntityManager . getMetamodel ( ) ; ManagedType < User > org.springframework.data.jpa.infrastructure.ManagedType<org.springframework.data.jpa.infrastructure.User> = org.springframework.data.jpa.infrastructure.Metamodel . managedType ( User .class ) ; Attribute < ? super User , ? > org.springframework.data.jpa.infrastructure.Attribute<? super org.springframework.data.jpa.infrastructure.User,?> = org.springframework.data.jpa.infrastructure.ManagedType<org.springframework.data.jpa.infrastructure.User> . getSingularAttribute ( STRING ) ; assertThat ( org.springframework.data.jpa.infrastructure.Attribute<,> . isAssociation ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CriteriaBuilder org.springframework.data.jpa.infrastructure.CriteriaBuilder = org.springframework.data.jpa.infrastructure.EntityManager . getCriteriaBuilder ( ) ; CriteriaQuery < User > org.springframework.data.jpa.infrastructure.CriteriaQuery<org.springframework.data.jpa.infrastructure.User> = org.springframework.data.jpa.infrastructure.CriteriaBuilder . createQuery ( User .class ) ; Root < User > org.springframework.data.jpa.infrastructure.Root<org.springframework.data.jpa.infrastructure.User> = org.springframework.data.jpa.infrastructure.CriteriaQuery<org.springframework.data.jpa.infrastructure.User> . from ( User .class ) ; Path < java.lang.Object > org.springframework.data.jpa.infrastructure.Path<java.lang.Object> = org.springframework.data.jpa.infrastructure.Root<org.springframework.data.jpa.infrastructure.User> . get ( STRING ) ; assertThat ( org.springframework.data.jpa.infrastructure.Path<java.lang.Object> . getModel ( ) . getBindableType ( ) , is ( BindableType . ENTITY_TYPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.jpa.infrastructure.Query = org.springframework.data.jpa.infrastructure.EntityManager . createNativeQuery ( STRING ) ; assertThat ( org.springframework.data.jpa.infrastructure.Query . getParameter ( NUMBER ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { User org.springframework.data.jpa.infrastructure.User = new User ( ) ; org.springframework.data.jpa.infrastructure.User . setFirstname ( STRING ) ; org.springframework.data.jpa.infrastructure.User . setEmailAddress ( STRING ) ; org.springframework.data.jpa.infrastructure.EntityManager . persist ( org.springframework.data.jpa.infrastructure.User ) ; TypedQuery < Tuple > org.springframework.data.jpa.infrastructure.TypedQuery<org.springframework.data.jpa.infrastructure.Tuple> = org.springframework.data.jpa.infrastructure.EntityManager . createQuery ( STRING , Tuple .class ) ; java.util.List<org.springframework.data.jpa.infrastructure.Tuple> < Tuple > java.util.List<org.springframework.data.jpa.infrastructure.Tuple> = org.springframework.data.jpa.infrastructure.TypedQuery<org.springframework.data.jpa.infrastructure.Tuple> . getResultList ( ) ; java.util.List<org.springframework.data.jpa.infrastructure.TupleElement<?>> < TupleElement < ? > > java.util.List<org.springframework.data.jpa.infrastructure.TupleElement<?>> = java.util.List<org.springframework.data.jpa.infrastructure.Tuple> . get ( NUMBER ) . getElements ( ) ; assertThat ( java.util.List<org.springframework.data.jpa.infrastructure.TupleElement<?>> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.infrastructure.TupleElement<?>> . get ( NUMBER ) . getAlias ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
