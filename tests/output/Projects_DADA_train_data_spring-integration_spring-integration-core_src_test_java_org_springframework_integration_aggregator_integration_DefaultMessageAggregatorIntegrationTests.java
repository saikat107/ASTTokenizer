<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test ( timeout = NUMBER ) public void void ( ) java.lang.Exception { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( int , NUMBER , NUMBER ) ; org.springframework.integration.aggregator.integration.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( int , java.util.Map<java.lang.String,java.lang.Object> ) ) ; } java.lang.Object java.lang.Object = org.springframework.integration.aggregator.integration.PollableChannel . receive ( ) . getPayload ( ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.List .class ) ) ) ; assertTrue ( java.lang.Object + STRING , ( ( java.util.List ) java.lang.Object ) . boolean ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( int int , int int , int int ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( IntegrationMessageHeaderAccessor . SEQUENCE_NUMBER , int ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE , int ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( IntegrationMessageHeaderAccessor . CORRELATION_ID , int ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
