<METHOD_START> public void ( StateMachineModel < S , E > org.springframework.statemachine.config.StateMachineModel<S,E> , StateMachineModelFactory < S , E > org.springframework.statemachine.config.StateMachineModelFactory<S,E> ) { this . org.springframework.statemachine.config.StateMachineModelFactory<S,E> = org.springframework.statemachine.config.StateMachineModelFactory<S,E> ; this . org.springframework.statemachine.config.StateMachineModel<S,E> = org.springframework.statemachine.config.StateMachineModel<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.StateMachine<S,E> < S , E > org.springframework.statemachine.config.StateMachine<S,E> ( ) { return org.springframework.statemachine.config.StateMachine<S,E> ( null , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.StateMachine<S,E> < S , E > org.springframework.statemachine.config.StateMachine<S,E> ( java.lang.String java.lang.String ) { return org.springframework.statemachine.config.StateMachine<S,E> ( null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.StateMachine<S,E> < S , E > org.springframework.statemachine.config.StateMachine<S,E> ( java.util.UUID java.util.UUID ) { return org.springframework.statemachine.config.StateMachine<S,E> ( java.util.UUID , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.statemachine.config.StateMachine<S,E> < S , E > org.springframework.statemachine.config.StateMachine<S,E> ( java.util.UUID java.util.UUID , java.lang.String java.lang.String ) { StateMachineModel < S , E > org.springframework.statemachine.config.StateMachineModel<S,E> = org.springframework.statemachine.config.StateMachineModel<S,E> ( java.lang.String ) ; if ( org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . isVerifierEnabled ( ) ) { StateMachineModelVerifier < S , E > org.springframework.statemachine.config.StateMachineModelVerifier<S,E> = org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . getVerifier ( ) ; if ( org.springframework.statemachine.config.StateMachineModelVerifier<S,E> == null ) { org.springframework.statemachine.config.StateMachineModelVerifier<S,E> = new CompositeStateMachineModelVerifier < S , E > ( ) ; } org.springframework.statemachine.config.StateMachineModelVerifier<S,E> . verify ( org.springframework.statemachine.config.StateMachineModel<S,E> ) ; } DefaultExtendedState org.springframework.statemachine.config.DefaultExtendedState = new DefaultExtendedState ( ) ; StateMachine < S , E > org.springframework.statemachine.config.StateMachine<S,E> = null ; final java.util.Map<S,org.springframework.statemachine.config.State<S,E>> < S , State < S , E > > java.util.Map<S,org.springframework.statemachine.config.State<S,E>> = new java.util.HashMap<S,org.springframework.statemachine.config.State<S,E>> < S , State < S , E > > ( ) ; java.util.Stack<org.springframework.statemachine.config.AbstractStateMachineFactory.MachineStackItem<S,E>> < org.springframework.statemachine.config.AbstractStateMachineFactory.MachineStackItem<S,E> < S , E > > java.util.Stack<org.springframework.statemachine.config.AbstractStateMachineFactory.MachineStackItem<S,E>> = new java.util.Stack<org.springframework.statemachine.config.AbstractStateMachineFactory.MachineStackItem<S,E>> < org.springframework.statemachine.config.AbstractStateMachineFactory.MachineStackItem<S,E> < S , E > > ( ) ; java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> = new java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > ( ) ; java.util.Map<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> < java.lang.Object , StateMachine < S , E > > java.util.Map<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> = new java.util.HashMap<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> < java.lang.Object , StateMachine < S , E > > ( ) ; java.util.Map<S,org.springframework.statemachine.config.StateHolder<S,E>> < S , StateHolder < S , E > > java.util.Map<S,org.springframework.statemachine.config.StateHolder<S,E>> = new java.util.HashMap<S,org.springframework.statemachine.config.StateHolder<S,E>> < S , StateHolder < S , E > > ( ) ; java.util.Iterator<org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>>> < Node < StateData < S , E > > > java.util.Iterator<org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>>> = java.util.Iterator<org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>>> ( org.springframework.statemachine.config.StateMachineModel<S,E> ) ; while ( java.util.Iterator<org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>>> . hasNext ( ) ) { Node < StateData < S , E > > org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>> = java.util.Iterator<org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>>> . next ( ) ; StateData < S , E > org.springframework.statemachine.config.StateData<S,E> = org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>> . getData ( ) ; StateData < S , E > org.springframework.statemachine.config.StateData<S,E> = java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> . isEmpty ( ) ? null : java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> . peek ( ) ; if ( java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> . isEmpty ( ) ) { java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> . push ( org.springframework.statemachine.config.StateData<S,E> ) ; continue; } boolean boolean = false ; java.util.Iterator<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > java.util.Iterator<org.springframework.statemachine.config.StateData<S,E>> = java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> . iterator ( ) ; while ( java.util.Iterator<org.springframework.statemachine.config.StateData<S,E>> . hasNext ( ) ) { StateData < S , E > org.springframework.statemachine.config.StateData<S,E> = java.util.Iterator<org.springframework.statemachine.config.StateData<S,E>> . next ( ) ; if ( org.springframework.statemachine.config.StateData<S,E> != null && ObjectUtils . nullSafeEquals ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.StateData<S,E> . getParent ( ) ) ) { boolean = true ; break; } } if ( org.springframework.statemachine.config.StateData<S,E> != null && ! boolean ) { java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> . push ( org.springframework.statemachine.config.StateData<S,E> ) ; continue; } java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> = java.util.Collection ( java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> ) ; int int = int ( java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> ) ; java.util.Collection<java.util.Collection<org.springframework.statemachine.config.StateData<S,E>>> < java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > > java.util.Collection<java.util.Collection<org.springframework.statemachine.config.StateData<S,E>>> = java.util.Collection<java.util.Collection<org.springframework.statemachine.config.StateData<S,E>>> ( java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> ) ; java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> < TransitionData < S , E > > java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> = java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> ( java.util.Iterator<org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>>> . hasNext ( ) , java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> , org.springframework.statemachine.config.StateMachineModel<S,E> ) ; if ( int > NUMBER ) { for ( java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> : java.util.Collection<java.util.Collection<org.springframework.statemachine.config.StateData<S,E>>> ) { org.springframework.statemachine.config.StateMachine<S,E> = org.springframework.statemachine.config.StateMachine<S,E> ( java.util.Map<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> , java.util.Map<S,org.springframework.statemachine.config.State<S,E>> , java.util.Map<S,org.springframework.statemachine.config.StateHolder<S,E>> , java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> , java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> , org.springframework.statemachine.config.BeanFactory ( org.springframework.statemachine.config.StateMachineModel<S,E> ) , java.lang.Boolean , org.springframework.statemachine.config.DefaultExtendedState , org.springframework.statemachine.config.StateMachineModel<S,E> . getTransitionsData ( ) , org.springframework.statemachine.config.TaskExecutor ( org.springframework.statemachine.config.StateMachineModel<S,E> ) , org.springframework.statemachine.config.TaskScheduler ( org.springframework.statemachine.config.StateMachineModel<S,E> ) , java.lang.String , null , org.springframework.statemachine.config.StateMachineModel<S,E> ) ; java.util.Stack<org.springframework.statemachine.config.AbstractStateMachineFactory.MachineStackItem<S,E>> . org.springframework.statemachine.config.AbstractStateMachineFactory.MachineStackItem<S,E> ( new org.springframework.statemachine.config.AbstractStateMachineFactory.MachineStackItem<S,E> < S , E > ( org.springframework.statemachine.config.StateMachine<S,E> ) ) ; } java.util.Collection<org.springframework.statemachine.config.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.config.Region<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.Region<S,E>> < Region < S , E > > ( ) ; while ( ! java.util.Stack<org.springframework.statemachine.config.AbstractStateMachineFactory.MachineStackItem<S,E>> . boolean ( ) ) { org.springframework.statemachine.config.AbstractStateMachineFactory.MachineStackItem<S,E> < S , E > org.springframework.statemachine.config.AbstractStateMachineFactory.MachineStackItem<S,E> = java.util.Stack<org.springframework.statemachine.config.AbstractStateMachineFactory.MachineStackItem<S,E>> . org.springframework.statemachine.config.AbstractStateMachineFactory.MachineStackItem<S,E> ( ) ; java.util.Collection<org.springframework.statemachine.config.Region<S,E>> . add ( org.springframework.statemachine.config.AbstractStateMachineFactory.MachineStackItem<S,E> . org.springframework.statemachine.config.StateMachine<S,E> ) ; } S S = ( S ) org.springframework.statemachine.config.StateData<S,E> . getParent ( ) ; RegionState < S , E > org.springframework.statemachine.config.RegionState<S,E> = org.springframework.statemachine.config.RegionState<S,E> ( S , java.util.Collection<org.springframework.statemachine.config.Region<S,E>> , null , org.springframework.statemachine.config.StateData<S,E> != null ? org.springframework.statemachine.config.StateData<S,E> . getEntryActions ( ) : null , org.springframework.statemachine.config.StateData<S,E> != null ? org.springframework.statemachine.config.StateData<S,E> . getExitActions ( ) : null , new DefaultPseudoState < S , E > ( PseudoStateKind . INITIAL ) ) ; if ( org.springframework.statemachine.config.StateData<S,E> != null ) { java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . put ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.RegionState<S,E> ) ; } else { java.util.Collection<org.springframework.statemachine.config.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.config.State<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.State<S,E>> < State < S , E > > ( ) ; java.util.Collection<org.springframework.statemachine.config.State<S,E>> . add ( org.springframework.statemachine.config.RegionState<S,E> ) ; Transition < S , E > org.springframework.statemachine.config.Transition<S,E> = new InitialTransition < S , E > ( org.springframework.statemachine.config.RegionState<S,E> ) ; StateMachine < S , E > org.springframework.statemachine.config.StateMachine<S,E> = org.springframework.statemachine.config.StateMachine<S,E> ( java.util.Collection<org.springframework.statemachine.config.State<S,E>> , new java.util.ArrayList<org.springframework.statemachine.config.Transition<S,E>> < Transition < S , E > > ( ) , org.springframework.statemachine.config.RegionState<S,E> , org.springframework.statemachine.config.Transition<S,E> , null , org.springframework.statemachine.config.DefaultExtendedState , null , java.lang.Boolean , org.springframework.statemachine.config.BeanFactory ( org.springframework.statemachine.config.StateMachineModel<S,E> ) , org.springframework.statemachine.config.TaskExecutor ( org.springframework.statemachine.config.StateMachineModel<S,E> ) , org.springframework.statemachine.config.TaskScheduler ( org.springframework.statemachine.config.StateMachineModel<S,E> ) , java.lang.String , java.lang.String != null ? java.lang.String : org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . getMachineId ( ) , java.util.UUID , org.springframework.statemachine.config.StateMachineModel<S,E> ) ; org.springframework.statemachine.config.StateMachine<S,E> = org.springframework.statemachine.config.StateMachine<S,E> ; } } else { org.springframework.statemachine.config.StateMachine<S,E> = org.springframework.statemachine.config.StateMachine<S,E> ( java.util.Map<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> , java.util.Map<S,org.springframework.statemachine.config.State<S,E>> , java.util.Map<S,org.springframework.statemachine.config.StateHolder<S,E>> , java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> , java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> , org.springframework.statemachine.config.BeanFactory ( org.springframework.statemachine.config.StateMachineModel<S,E> ) , java.lang.Boolean , org.springframework.statemachine.config.DefaultExtendedState , org.springframework.statemachine.config.StateMachineModel<S,E> . getTransitionsData ( ) , org.springframework.statemachine.config.TaskExecutor ( org.springframework.statemachine.config.StateMachineModel<S,E> ) , org.springframework.statemachine.config.TaskScheduler ( org.springframework.statemachine.config.StateMachineModel<S,E> ) , java.lang.String , java.util.UUID , org.springframework.statemachine.config.StateMachineModel<S,E> ) ; if ( org.springframework.statemachine.config.StateData<S,E> . isInitial ( ) || ( ! org.springframework.statemachine.config.StateData<S,E> . isInitial ( ) && ! java.util.Map<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> . containsKey ( org.springframework.statemachine.config.StateData<S,E> . getParent ( ) ) ) ) { java.util.Map<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> . put ( org.springframework.statemachine.config.StateData<S,E> . getParent ( ) , org.springframework.statemachine.config.StateMachine<S,E> ) ; } } java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> . push ( org.springframework.statemachine.config.StateData<S,E> ) ; } if ( org.springframework.statemachine.config.StateMachine<S,E> instanceof LifecycleObjectSupport ) { ( ( LifecycleObjectSupport ) org.springframework.statemachine.config.StateMachine<S,E> ) . setAutoStartup ( org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . isAutoStart ( ) ) ; } final StateMachine < S , E > org.springframework.statemachine.config.StateMachine<S,E> = org.springframework.statemachine.config.StateMachine<S,E> ; org.springframework.statemachine.config.StateMachine<S,E> . getStateMachineAccessor ( ) . doWithAllRegions ( new StateMachineFunction < StateMachineAccess < S , E > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.config.StateMachineAccess<S,E> ) { org.springframework.statemachine.config.StateMachineAccess<S,E> . setRelay ( org.springframework.statemachine.config.StateMachine<S,E> ) ; } } ) ; final StateMachineMonitor < S , E > org.springframework.statemachine.config.StateMachineMonitor<S,E> = org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . getStateMachineMonitor ( ) ; if ( org.springframework.statemachine.config.StateMachineMonitor<S,E> != null || org.springframework.statemachine.config.StateMachineMonitor<S,E> != null ) { org.springframework.statemachine.config.StateMachine<S,E> . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < S , E > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.config.StateMachineAccess<S,E> ) { if ( org.springframework.statemachine.config.StateMachineMonitor<S,E> != null ) { org.springframework.statemachine.config.StateMachineAccess<S,E> . addStateMachineMonitor ( org.springframework.statemachine.config.StateMachineMonitor<S,E> ) ; } if ( org.springframework.statemachine.config.StateMachineMonitor<S,E> != null ) { org.springframework.statemachine.config.StateMachineAccess<S,E> . addStateMachineMonitor ( org.springframework.statemachine.config.StateMachineMonitor<S,E> ) ; } } } ) ; } if ( org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . isSecurityEnabled ( ) ) { final StateMachineSecurityInterceptor < S , E > org.springframework.statemachine.config.StateMachineSecurityInterceptor<S,E> = new StateMachineSecurityInterceptor < S , E > ( org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . getTransitionSecurityAccessDecisionManager ( ) , org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . getEventSecurityAccessDecisionManager ( ) , org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . getEventSecurityRule ( ) ) ; org.springframework.statemachine.config.Log . info ( STRING + org.springframework.statemachine.config.StateMachineSecurityInterceptor<S,E> ) ; org.springframework.statemachine.config.StateMachine<S,E> . getStateMachineAccessor ( ) . doWithAllRegions ( new StateMachineFunction < StateMachineAccess < S , E > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.config.StateMachineAccess<S,E> ) { org.springframework.statemachine.config.StateMachineAccess<S,E> . addStateMachineInterceptor ( org.springframework.statemachine.config.StateMachineSecurityInterceptor<S,E> ) ; } } ) ; } if ( org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . getStateMachineEnsemble ( ) != null ) { DistributedStateMachine < S , E > org.springframework.statemachine.config.DistributedStateMachine<S,E> = new DistributedStateMachine < S , E > ( org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . getStateMachineEnsemble ( ) , org.springframework.statemachine.config.StateMachine<S,E> ) ; org.springframework.statemachine.config.DistributedStateMachine<S,E> . setAutoStartup ( org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . isAutoStart ( ) ) ; org.springframework.statemachine.config.DistributedStateMachine<S,E> . afterPropertiesSet ( ) ; org.springframework.statemachine.config.StateMachine<S,E> = org.springframework.statemachine.config.DistributedStateMachine<S,E> ; } for ( StateMachineListener < S , E > org.springframework.statemachine.config.StateMachineListener<S,E> : org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . getStateMachineListeners ( ) ) { org.springframework.statemachine.config.StateMachine<S,E> . addStateListener ( org.springframework.statemachine.config.StateMachineListener<S,E> ) ; } for ( java.util.Map.Entry<S,org.springframework.statemachine.config.StateHolder<S,E>> < S , StateHolder < S , E > > java.util.Map.Entry<S,org.springframework.statemachine.config.StateHolder<S,E>> : java.util.Map<S,org.springframework.statemachine.config.StateHolder<S,E>> . entrySet ( ) ) { java.util.Map.Entry<S,org.springframework.statemachine.config.StateHolder<S,E>> . getValue ( ) . setState ( java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( java.util.Map.Entry<S,org.springframework.statemachine.config.StateHolder<S,E>> . getKey ( ) ) ) ; } for ( java.util.Map.Entry<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> < java.lang.Object , StateMachine < S , E > > java.util.Map.Entry<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> : java.util.Map<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> . entrySet ( ) ) { StateMachine < S , E > org.springframework.statemachine.config.StateMachine<S,E> = null ; if ( java.util.Map.Entry<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> . getKey ( ) != null ) { java.lang.Object java.lang.Object = null ; for ( StateData < S , E > org.springframework.statemachine.config.StateData<S,E> : org.springframework.statemachine.config.StateMachineModel<S,E> . getStatesData ( ) . getStateData ( ) ) { if ( ObjectUtils . nullSafeEquals ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , java.util.Map.Entry<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> . getKey ( ) ) ) { java.lang.Object = org.springframework.statemachine.config.StateData<S,E> . getParent ( ) ; break; } } org.springframework.statemachine.config.StateMachine<S,E> = java.util.Map<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> . get ( java.lang.Object ) ; } final StateMachine < S , E > org.springframework.statemachine.config.StateMachine<S,E> = org.springframework.statemachine.config.StateMachine<S,E> ; java.util.Map.Entry<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> . getValue ( ) . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < S , E > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.config.StateMachineAccess<S,E> ) { org.springframework.statemachine.config.StateMachineAccess<S,E> . setParentMachine ( org.springframework.statemachine.config.StateMachine<S,E> ) ; } } ) ; } return org.springframework.statemachine.config.StateMachine<S,E> ( org.springframework.statemachine.config.StateMachine<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.config.StateMachineAccess<S,E> ) { org.springframework.statemachine.config.StateMachineAccess<S,E> . setRelay ( org.springframework.statemachine.config.StateMachine<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.config.StateMachineAccess<S,E> ) { if ( org.springframework.statemachine.config.StateMachineMonitor<S,E> != null ) { org.springframework.statemachine.config.StateMachineAccess<S,E> . addStateMachineMonitor ( org.springframework.statemachine.config.StateMachineMonitor<S,E> ) ; } if ( org.springframework.statemachine.config.StateMachineMonitor<S,E> != null ) { org.springframework.statemachine.config.StateMachineAccess<S,E> . addStateMachineMonitor ( org.springframework.statemachine.config.StateMachineMonitor<S,E> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.config.StateMachineAccess<S,E> ) { org.springframework.statemachine.config.StateMachineAccess<S,E> . addStateMachineInterceptor ( org.springframework.statemachine.config.StateMachineSecurityInterceptor<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.config.StateMachineAccess<S,E> ) { org.springframework.statemachine.config.StateMachineAccess<S,E> . setParentMachine ( org.springframework.statemachine.config.StateMachine<S,E> ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( StateMachineMonitor < S , E > org.springframework.statemachine.config.StateMachineMonitor<S,E> ) { this . org.springframework.statemachine.config.StateMachineMonitor<S,E> = org.springframework.statemachine.config.StateMachineMonitor<S,E> ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.config.StateMachine<S,E> < S , E > org.springframework.statemachine.config.StateMachine<S,E> ( StateMachine < S , E > org.springframework.statemachine.config.StateMachine<S,E> ) { if ( boolean && org.springframework.statemachine.config.StateMachine<S,E> instanceof SmartLifecycle && ( ( SmartLifecycle ) org.springframework.statemachine.config.StateMachine<S,E> ) . isAutoStartup ( ) ) { org.springframework.statemachine.config.AbstractStateMachineFactory.AutostartListener<S,E> < S , E > org.springframework.statemachine.config.AbstractStateMachineFactory.AutostartListener<S,E> = new org.springframework.statemachine.config.AbstractStateMachineFactory.AutostartListener<S,E> <> ( ) ; org.springframework.statemachine.config.StateMachine<S,E> . addStateListener ( org.springframework.statemachine.config.AbstractStateMachineFactory.AutostartListener<S,E> ) ; ( ( SmartLifecycle ) org.springframework.statemachine.config.StateMachine<S,E> ) . start ( ) ; try { org.springframework.statemachine.config.AbstractStateMachineFactory.AutostartListener<S,E> . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.config.Log . warn ( STRING ) ; } finally { org.springframework.statemachine.config.StateMachine<S,E> . removeStateListener ( org.springframework.statemachine.config.AbstractStateMachineFactory.AutostartListener<S,E> ) ; } } return org.springframework.statemachine.config.StateMachine<S,E> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.statemachine.config.BeanFactory org.springframework.statemachine.config.BeanFactory ( StateMachineModel < S , E > org.springframework.statemachine.config.StateMachineModel<S,E> ) { if ( org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . getBeanFactory ( ) != null ) { return org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . getBeanFactory ( ) ; } else { return getBeanFactory ( ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.statemachine.config.TaskExecutor org.springframework.statemachine.config.TaskExecutor ( StateMachineModel < S , E > org.springframework.statemachine.config.StateMachineModel<S,E> ) { if ( org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . getTaskExecutor ( ) != null ) { return org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . getTaskExecutor ( ) ; } else { return getTaskExecutor ( ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.statemachine.config.TaskScheduler org.springframework.statemachine.config.TaskScheduler ( StateMachineModel < S , E > org.springframework.statemachine.config.StateMachineModel<S,E> ) { if ( org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . getTaskScheduler ( ) != null ) { return org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . getTaskScheduler ( ) ; } else { return getTaskScheduler ( ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.statemachine.config.StateMachineModel<S,E> < S , E > org.springframework.statemachine.config.StateMachineModel<S,E> ( java.lang.String java.lang.String ) { if ( org.springframework.statemachine.config.StateMachineModelFactory<S,E> == null ) { return org.springframework.statemachine.config.StateMachineModel<S,E> ; } else { StateMachineModel < S , E > org.springframework.statemachine.config.StateMachineModel<S,E> = org.springframework.statemachine.config.StateMachineModelFactory<S,E> . build ( java.lang.String ) ; if ( org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) == null ) { return new DefaultStateMachineModel <> ( org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) , org.springframework.statemachine.config.StateMachineModel<S,E> . getStatesData ( ) , org.springframework.statemachine.config.StateMachineModel<S,E> . getTransitionsData ( ) ) ; } else { return org.springframework.statemachine.config.StateMachineModel<S,E> ; } } }  <METHOD_END>
<METHOD_START> private int int ( java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> ) { int int = NUMBER ; for ( StateData < S , E > org.springframework.statemachine.config.StateData<S,E> : java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> ) { if ( org.springframework.statemachine.config.StateData<S,E> . isInitial ( ) ) { int ++ ; } } return int ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<java.util.Collection<org.springframework.statemachine.config.StateData<S,E>>> < java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > > java.util.Collection<java.util.Collection<org.springframework.statemachine.config.StateData<S,E>>> ( java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> ) { java.util.Map<java.lang.Object,java.util.Collection<org.springframework.statemachine.config.StateData<S,E>>> < java.lang.Object , java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > > java.util.Map<java.lang.Object,java.util.Collection<org.springframework.statemachine.config.StateData<S,E>>> = new java.util.HashMap<java.lang.Object,java.util.Collection<org.springframework.statemachine.config.StateData<S,E>>> < java.lang.Object , java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > > ( ) ; for ( StateData < S , E > org.springframework.statemachine.config.StateData<S,E> : java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> ) { java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> = java.util.Map<java.lang.Object,java.util.Collection<org.springframework.statemachine.config.StateData<S,E>>> . get ( org.springframework.statemachine.config.StateData<S,E> . getRegion ( ) ) ; if ( java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> == null ) { java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > ( ) ; } java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> . add ( org.springframework.statemachine.config.StateData<S,E> ) ; java.util.Map<java.lang.Object,java.util.Collection<org.springframework.statemachine.config.StateData<S,E>>> . put ( org.springframework.statemachine.config.StateData<S,E> . getRegion ( ) , java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> ) ; } return java.util.Map<java.lang.Object,java.util.Collection<org.springframework.statemachine.config.StateData<S,E>>> . values ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> < TransitionData < S , E > > java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> ( boolean boolean , java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> , StateMachineModel < S , E > org.springframework.statemachine.config.StateMachineModel<S,E> ) { if ( boolean ) { return java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> ( org.springframework.statemachine.config.StateMachineModel<S,E> . getTransitionsData ( ) . getTransitions ( ) , java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> ) ; } else { return java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> ( org.springframework.statemachine.config.StateMachineModel<S,E> . getTransitionsData ( ) . getTransitions ( ) ) ; } }  <METHOD_END>
<METHOD_START> private static < S , E > java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> ( java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> ) { java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > ( ) ; java.lang.Object java.lang.Object = null ; if ( ! java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> . isEmpty ( ) ) { java.lang.Object = java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> . peek ( ) . getParent ( ) ; } while ( ! java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> . isEmpty ( ) && ObjectUtils . nullSafeEquals ( java.lang.Object , java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> . peek ( ) . getParent ( ) ) ) { java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> . add ( java.util.Stack<org.springframework.statemachine.config.StateData<S,E>> . pop ( ) ) ; } return java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> ; }  <METHOD_END>
<METHOD_START> public void ( StateMachine < S , E > org.springframework.statemachine.config.StateMachine<S,E> ) { this . org.springframework.statemachine.config.StateMachine<S,E> = org.springframework.statemachine.config.StateMachine<S,E> ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> < TransitionData < S , E > > java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> ( java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> < TransitionData < S , E > > java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> , java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> ) { java.util.ArrayList<org.springframework.statemachine.config.TransitionData<S,E>> < TransitionData < S , E > > java.util.ArrayList<org.springframework.statemachine.config.TransitionData<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.TransitionData<S,E>> < TransitionData < S , E > > ( ) ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; for ( StateData < S , E > org.springframework.statemachine.config.StateData<S,E> : java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> ) { java.util.Collection<java.lang.Object> . boolean ( org.springframework.statemachine.config.StateData<S,E> . getParent ( ) ) ; } for ( TransitionData < S , E > org.springframework.statemachine.config.TransitionData<S,E> : java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> ) { S S = org.springframework.statemachine.config.TransitionData<S,E> . getState ( ) ; if ( S != null && java.util.Collection<java.lang.Object> . boolean ( S ) ) { java.util.ArrayList<org.springframework.statemachine.config.TransitionData<S,E>> . add ( org.springframework.statemachine.config.TransitionData<S,E> ) ; } } return java.util.ArrayList<org.springframework.statemachine.config.TransitionData<S,E>> ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> < TransitionData < S , E > > java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> ( java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> < TransitionData < S , E > > java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> ) { java.util.ArrayList<org.springframework.statemachine.config.TransitionData<S,E>> < TransitionData < S , E > > java.util.ArrayList<org.springframework.statemachine.config.TransitionData<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.TransitionData<S,E>> < TransitionData < S , E > > ( ) ; for ( TransitionData < S , E > org.springframework.statemachine.config.TransitionData<S,E> : java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> ) { if ( org.springframework.statemachine.config.TransitionData<S,E> . getState ( ) == null ) { java.util.ArrayList<org.springframework.statemachine.config.TransitionData<S,E>> . add ( org.springframework.statemachine.config.TransitionData<S,E> ) ; } } return java.util.ArrayList<org.springframework.statemachine.config.TransitionData<S,E>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.statemachine.config.StateMachine<S,E> < S , E > org.springframework.statemachine.config.StateMachine<S,E> ( java.util.Map<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> < java.lang.Object , StateMachine < S , E > > java.util.Map<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> , java.util.Map<S,org.springframework.statemachine.config.State<S,E>> < S , State < S , E > > java.util.Map<S,org.springframework.statemachine.config.State<S,E>> , java.util.Map<S,org.springframework.statemachine.config.StateHolder<S,E>> < S , StateHolder < S , E > > java.util.Map<S,org.springframework.statemachine.config.StateHolder<S,E>> , java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> , java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> < TransitionData < S , E > > java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> , BeanFactory org.springframework.statemachine.config.BeanFactory , java.lang.Boolean java.lang.Boolean , DefaultExtendedState org.springframework.statemachine.config.DefaultExtendedState , TransitionsData < S , E > org.springframework.statemachine.config.TransitionsData<S,E> , TaskExecutor org.springframework.statemachine.config.TaskExecutor , TaskScheduler org.springframework.statemachine.config.TaskScheduler , java.lang.String java.lang.String , java.util.UUID java.util.UUID , StateMachineModel < S , E > org.springframework.statemachine.config.StateMachineModel<S,E> ) { State < S , E > org.springframework.statemachine.config.State<S,E> = null ; State < S , E > org.springframework.statemachine.config.State<S,E> = null ; PseudoState < S , E > org.springframework.statemachine.config.PseudoState<S,E> = null ; Action < S , E > org.springframework.statemachine.config.Action<S,E> = null ; java.util.Collection<org.springframework.statemachine.config.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.config.State<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.State<S,E>> < State < S , E > > ( ) ; for ( StateData < S , E > org.springframework.statemachine.config.StateData<S,E> : java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> ) { StateMachine < S , E > org.springframework.statemachine.config.StateMachine<S,E> = java.util.Map<java.lang.Object,org.springframework.statemachine.config.StateMachine<S,E>> . get ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) ) ; if ( org.springframework.statemachine.config.StateMachine<S,E> == null ) { org.springframework.statemachine.config.StateMachine<S,E> = org.springframework.statemachine.config.StateData<S,E> . getSubmachine ( ) ; if ( org.springframework.statemachine.config.StateMachine<S,E> == null && org.springframework.statemachine.config.StateData<S,E> . getSubmachineFactory ( ) != null ) { org.springframework.statemachine.config.StateMachine<S,E> = org.springframework.statemachine.config.StateData<S,E> . getSubmachineFactory ( ) . getStateMachine ( java.lang.String ) ; } } org.springframework.statemachine.config.State<S,E> = java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) ) ; if ( org.springframework.statemachine.config.State<S,E> != null ) { java.util.Collection<org.springframework.statemachine.config.State<S,E>> . add ( org.springframework.statemachine.config.State<S,E> ) ; if ( org.springframework.statemachine.config.StateData<S,E> . isInitial ( ) ) { org.springframework.statemachine.config.State<S,E> = org.springframework.statemachine.config.State<S,E> ; } continue; } if ( org.springframework.statemachine.config.StateMachine<S,E> != null ) { PseudoState < S , E > org.springframework.statemachine.config.PseudoState<S,E> = null ; if ( org.springframework.statemachine.config.StateData<S,E> . isInitial ( ) ) { org.springframework.statemachine.config.PseudoState<S,E> = new DefaultPseudoState < S , E > ( PseudoStateKind . INITIAL ) ; } org.springframework.statemachine.config.State<S,E> = new StateMachineState < S , E > ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.StateMachine<S,E> , org.springframework.statemachine.config.StateData<S,E> . getDeferred ( ) , org.springframework.statemachine.config.StateData<S,E> . getEntryActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getExitActions ( ) , org.springframework.statemachine.config.PseudoState<S,E> ) ; if ( java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> . size ( ) > NUMBER && org.springframework.statemachine.config.StateData<S,E> . isInitial ( ) ) { org.springframework.statemachine.config.State<S,E> = org.springframework.statemachine.config.State<S,E> ; org.springframework.statemachine.config.Action<S,E> = org.springframework.statemachine.config.StateData<S,E> . getInitialAction ( ) ; } else if ( java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> . size ( ) == NUMBER ) { org.springframework.statemachine.config.State<S,E> = org.springframework.statemachine.config.State<S,E> ; org.springframework.statemachine.config.Action<S,E> = org.springframework.statemachine.config.StateData<S,E> . getInitialAction ( ) ; } java.util.Collection<org.springframework.statemachine.config.State<S,E>> . add ( org.springframework.statemachine.config.State<S,E> ) ; } else { PseudoState < S , E > org.springframework.statemachine.config.PseudoState<S,E> = null ; if ( org.springframework.statemachine.config.StateData<S,E> . isInitial ( ) ) { org.springframework.statemachine.config.PseudoState<S,E> = new DefaultPseudoState < S , E > ( PseudoStateKind . INITIAL ) ; } else if ( org.springframework.statemachine.config.StateData<S,E> . isEnd ( ) ) { org.springframework.statemachine.config.PseudoState<S,E> = new DefaultPseudoState < S , E > ( PseudoStateKind . END ) ; } else if ( org.springframework.statemachine.config.StateData<S,E> . getPseudoStateKind ( ) == PseudoStateKind . HISTORY_SHALLOW ) { continue; } else if ( org.springframework.statemachine.config.StateData<S,E> . getPseudoStateKind ( ) == PseudoStateKind . HISTORY_DEEP ) { continue; } else if ( org.springframework.statemachine.config.StateData<S,E> . getPseudoStateKind ( ) == PseudoStateKind . JOIN ) { continue; } else if ( org.springframework.statemachine.config.StateData<S,E> . getPseudoStateKind ( ) == PseudoStateKind . FORK ) { continue; } else if ( org.springframework.statemachine.config.StateData<S,E> . getPseudoStateKind ( ) == PseudoStateKind . CHOICE ) { continue; } else if ( org.springframework.statemachine.config.StateData<S,E> . getPseudoStateKind ( ) == PseudoStateKind . JUNCTION ) { continue; } else if ( org.springframework.statemachine.config.StateData<S,E> . getPseudoStateKind ( ) == PseudoStateKind . ENTRY ) { continue; } else if ( org.springframework.statemachine.config.StateData<S,E> . getPseudoStateKind ( ) == PseudoStateKind . EXIT ) { continue; } org.springframework.statemachine.config.State<S,E> = org.springframework.statemachine.config.State<S,E> ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.StateData<S,E> . getDeferred ( ) , org.springframework.statemachine.config.StateData<S,E> . getEntryActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getExitActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getStateActions ( ) , org.springframework.statemachine.config.PseudoState<S,E> , org.springframework.statemachine.config.StateMachineModel<S,E> ) ; if ( org.springframework.statemachine.config.StateData<S,E> . isInitial ( ) ) { org.springframework.statemachine.config.State<S,E> = org.springframework.statemachine.config.State<S,E> ; org.springframework.statemachine.config.Action<S,E> = org.springframework.statemachine.config.StateData<S,E> . getInitialAction ( ) ; } java.util.Collection<org.springframework.statemachine.config.State<S,E>> . add ( org.springframework.statemachine.config.State<S,E> ) ; } java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . put ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.State<S,E> ) ; } for ( StateData < S , E > org.springframework.statemachine.config.StateData<S,E> : java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> ) { if ( org.springframework.statemachine.config.StateData<S,E> . getPseudoStateKind ( ) == PseudoStateKind . HISTORY_SHALLOW ) { State < S , E > org.springframework.statemachine.config.State<S,E> = null ; S S = org.springframework.statemachine.config.StateData<S,E> . getState ( ) ; java.util.Collection<org.springframework.statemachine.config.HistoryData<S,E>> < HistoryData < S , E > > java.util.Collection<org.springframework.statemachine.config.HistoryData<S,E>> = org.springframework.statemachine.config.TransitionsData<S,E> . getHistorys ( ) ; for ( HistoryData < S , E > org.springframework.statemachine.config.HistoryData<S,E> : java.util.Collection<org.springframework.statemachine.config.HistoryData<S,E>> ) { if ( org.springframework.statemachine.config.HistoryData<S,E> . getSource ( ) . equals ( S ) ) { org.springframework.statemachine.config.State<S,E> = java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( org.springframework.statemachine.config.HistoryData<S,E> . getTarget ( ) ) ; } } StateHolder < S , E > org.springframework.statemachine.config.StateHolder<S,E> = new StateHolder < S , E > ( org.springframework.statemachine.config.State<S,E> ) ; StateHolder < S , E > org.springframework.statemachine.config.StateHolder<S,E> = new StateHolder < S , E > ( java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( org.springframework.statemachine.config.StateData<S,E> . getParent ( ) ) ) ; if ( org.springframework.statemachine.config.StateHolder<S,E> . getState ( ) == null ) { java.util.Map<S,org.springframework.statemachine.config.StateHolder<S,E>> . put ( ( S ) org.springframework.statemachine.config.StateData<S,E> . getParent ( ) , org.springframework.statemachine.config.StateHolder<S,E> ) ; } PseudoState < S , E > org.springframework.statemachine.config.PseudoState<S,E> = new HistoryPseudoState < S , E > ( PseudoStateKind . HISTORY_SHALLOW , org.springframework.statemachine.config.StateHolder<S,E> , org.springframework.statemachine.config.StateHolder<S,E> ) ; org.springframework.statemachine.config.State<S,E> = org.springframework.statemachine.config.State<S,E> ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.StateData<S,E> . getDeferred ( ) , org.springframework.statemachine.config.StateData<S,E> . getEntryActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getExitActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getStateActions ( ) , org.springframework.statemachine.config.PseudoState<S,E> , org.springframework.statemachine.config.StateMachineModel<S,E> ) ; java.util.Collection<org.springframework.statemachine.config.State<S,E>> . add ( org.springframework.statemachine.config.State<S,E> ) ; java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . put ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.State<S,E> ) ; org.springframework.statemachine.config.PseudoState<S,E> = org.springframework.statemachine.config.PseudoState<S,E> ; } else if ( org.springframework.statemachine.config.StateData<S,E> . getPseudoStateKind ( ) == PseudoStateKind . HISTORY_DEEP ) { State < S , E > org.springframework.statemachine.config.State<S,E> = null ; S S = org.springframework.statemachine.config.StateData<S,E> . getState ( ) ; java.util.Collection<org.springframework.statemachine.config.HistoryData<S,E>> < HistoryData < S , E > > java.util.Collection<org.springframework.statemachine.config.HistoryData<S,E>> = org.springframework.statemachine.config.TransitionsData<S,E> . getHistorys ( ) ; for ( HistoryData < S , E > org.springframework.statemachine.config.HistoryData<S,E> : java.util.Collection<org.springframework.statemachine.config.HistoryData<S,E>> ) { if ( org.springframework.statemachine.config.HistoryData<S,E> . getSource ( ) . equals ( S ) ) { org.springframework.statemachine.config.State<S,E> = java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( org.springframework.statemachine.config.HistoryData<S,E> . getTarget ( ) ) ; } } StateHolder < S , E > org.springframework.statemachine.config.StateHolder<S,E> = new StateHolder < S , E > ( org.springframework.statemachine.config.State<S,E> ) ; StateHolder < S , E > org.springframework.statemachine.config.StateHolder<S,E> = new StateHolder < S , E > ( java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( org.springframework.statemachine.config.StateData<S,E> . getParent ( ) ) ) ; if ( org.springframework.statemachine.config.StateHolder<S,E> . getState ( ) == null ) { java.util.Map<S,org.springframework.statemachine.config.StateHolder<S,E>> . put ( ( S ) org.springframework.statemachine.config.StateData<S,E> . getParent ( ) , org.springframework.statemachine.config.StateHolder<S,E> ) ; } PseudoState < S , E > org.springframework.statemachine.config.PseudoState<S,E> = new HistoryPseudoState < S , E > ( PseudoStateKind . HISTORY_DEEP , org.springframework.statemachine.config.StateHolder<S,E> , org.springframework.statemachine.config.StateHolder<S,E> ) ; org.springframework.statemachine.config.State<S,E> = org.springframework.statemachine.config.State<S,E> ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.StateData<S,E> . getDeferred ( ) , org.springframework.statemachine.config.StateData<S,E> . getEntryActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getExitActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getStateActions ( ) , org.springframework.statemachine.config.PseudoState<S,E> , org.springframework.statemachine.config.StateMachineModel<S,E> ) ; java.util.Collection<org.springframework.statemachine.config.State<S,E>> . add ( org.springframework.statemachine.config.State<S,E> ) ; java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . put ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.State<S,E> ) ; org.springframework.statemachine.config.PseudoState<S,E> = org.springframework.statemachine.config.PseudoState<S,E> ; } if ( org.springframework.statemachine.config.StateData<S,E> . getPseudoStateKind ( ) == PseudoStateKind . CHOICE ) { S S = org.springframework.statemachine.config.StateData<S,E> . getState ( ) ; java.util.List<org.springframework.statemachine.config.ChoiceData<S,E>> < ChoiceData < S , E > > java.util.List<org.springframework.statemachine.config.ChoiceData<S,E>> = org.springframework.statemachine.config.TransitionsData<S,E> . getChoices ( ) . get ( S ) ; java.util.List<org.springframework.statemachine.config.ChoiceStateData<S,E>> < ChoiceStateData < S , E > > java.util.List<org.springframework.statemachine.config.ChoiceStateData<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.ChoiceStateData<S,E>> < ChoiceStateData < S , E > > ( ) ; for ( ChoiceData < S , E > org.springframework.statemachine.config.ChoiceData<S,E> : java.util.List<org.springframework.statemachine.config.ChoiceData<S,E>> ) { StateHolder < S , E > org.springframework.statemachine.config.StateHolder<S,E> = new StateHolder < S , E > ( java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( org.springframework.statemachine.config.ChoiceData<S,E> . getTarget ( ) ) ) ; if ( org.springframework.statemachine.config.StateHolder<S,E> . getState ( ) == null ) { java.util.Map<S,org.springframework.statemachine.config.StateHolder<S,E>> . put ( org.springframework.statemachine.config.ChoiceData<S,E> . getTarget ( ) , org.springframework.statemachine.config.StateHolder<S,E> ) ; } java.util.List<org.springframework.statemachine.config.ChoiceStateData<S,E>> . add ( new ChoiceStateData < S , E > ( org.springframework.statemachine.config.StateHolder<S,E> , org.springframework.statemachine.config.ChoiceData<S,E> . getGuard ( ) ) ) ; } PseudoState < S , E > org.springframework.statemachine.config.PseudoState<S,E> = new ChoicePseudoState < S , E > ( java.util.List<org.springframework.statemachine.config.ChoiceStateData<S,E>> ) ; org.springframework.statemachine.config.State<S,E> = org.springframework.statemachine.config.State<S,E> ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.StateData<S,E> . getDeferred ( ) , org.springframework.statemachine.config.StateData<S,E> . getEntryActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getExitActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getStateActions ( ) , org.springframework.statemachine.config.PseudoState<S,E> , org.springframework.statemachine.config.StateMachineModel<S,E> ) ; java.util.Collection<org.springframework.statemachine.config.State<S,E>> . add ( org.springframework.statemachine.config.State<S,E> ) ; java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . put ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.State<S,E> ) ; } else if ( org.springframework.statemachine.config.StateData<S,E> . getPseudoStateKind ( ) == PseudoStateKind . JUNCTION ) { S S = org.springframework.statemachine.config.StateData<S,E> . getState ( ) ; java.util.List<org.springframework.statemachine.config.JunctionData<S,E>> < JunctionData < S , E > > java.util.List<org.springframework.statemachine.config.JunctionData<S,E>> = org.springframework.statemachine.config.TransitionsData<S,E> . getJunctions ( ) . get ( S ) ; java.util.List<org.springframework.statemachine.config.JunctionStateData<S,E>> < JunctionStateData < S , E > > java.util.List<org.springframework.statemachine.config.JunctionStateData<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.JunctionStateData<S,E>> < JunctionStateData < S , E > > ( ) ; for ( JunctionData < S , E > org.springframework.statemachine.config.JunctionData<S,E> : java.util.List<org.springframework.statemachine.config.JunctionData<S,E>> ) { StateHolder < S , E > org.springframework.statemachine.config.StateHolder<S,E> = new StateHolder < S , E > ( java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( org.springframework.statemachine.config.JunctionData<S,E> . getTarget ( ) ) ) ; if ( org.springframework.statemachine.config.StateHolder<S,E> . getState ( ) == null ) { java.util.Map<S,org.springframework.statemachine.config.StateHolder<S,E>> . put ( org.springframework.statemachine.config.JunctionData<S,E> . getTarget ( ) , org.springframework.statemachine.config.StateHolder<S,E> ) ; } java.util.List<org.springframework.statemachine.config.JunctionStateData<S,E>> . add ( new JunctionStateData < S , E > ( org.springframework.statemachine.config.StateHolder<S,E> , org.springframework.statemachine.config.JunctionData<S,E> . getGuard ( ) ) ) ; } PseudoState < S , E > org.springframework.statemachine.config.PseudoState<S,E> = new JunctionPseudoState < S , E > ( java.util.List<org.springframework.statemachine.config.JunctionStateData<S,E>> ) ; org.springframework.statemachine.config.State<S,E> = org.springframework.statemachine.config.State<S,E> ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.StateData<S,E> . getDeferred ( ) , org.springframework.statemachine.config.StateData<S,E> . getEntryActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getExitActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getStateActions ( ) , org.springframework.statemachine.config.PseudoState<S,E> , org.springframework.statemachine.config.StateMachineModel<S,E> ) ; java.util.Collection<org.springframework.statemachine.config.State<S,E>> . add ( org.springframework.statemachine.config.State<S,E> ) ; java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . put ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.State<S,E> ) ; } else if ( org.springframework.statemachine.config.StateData<S,E> . getPseudoStateKind ( ) == PseudoStateKind . ENTRY ) { S S = org.springframework.statemachine.config.StateData<S,E> . getState ( ) ; java.util.Collection<org.springframework.statemachine.config.EntryData<S,E>> < EntryData < S , E > > java.util.Collection<org.springframework.statemachine.config.EntryData<S,E>> = org.springframework.statemachine.config.TransitionsData<S,E> . getEntrys ( ) ; for ( EntryData < S , E > org.springframework.statemachine.config.EntryData<S,E> : java.util.Collection<org.springframework.statemachine.config.EntryData<S,E>> ) { if ( S . boolean ( org.springframework.statemachine.config.EntryData<S,E> . getSource ( ) ) ) { PseudoState < S , E > org.springframework.statemachine.config.PseudoState<S,E> = new EntryPseudoState < S , E > ( java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( org.springframework.statemachine.config.EntryData<S,E> . getTarget ( ) ) ) ; org.springframework.statemachine.config.State<S,E> = org.springframework.statemachine.config.State<S,E> ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.StateData<S,E> . getDeferred ( ) , org.springframework.statemachine.config.StateData<S,E> . getEntryActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getExitActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getStateActions ( ) , org.springframework.statemachine.config.PseudoState<S,E> , org.springframework.statemachine.config.StateMachineModel<S,E> ) ; java.util.Collection<org.springframework.statemachine.config.State<S,E>> . add ( org.springframework.statemachine.config.State<S,E> ) ; java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . put ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.State<S,E> ) ; break; } } } else if ( org.springframework.statemachine.config.StateData<S,E> . getPseudoStateKind ( ) == PseudoStateKind . EXIT ) { S S = org.springframework.statemachine.config.StateData<S,E> . getState ( ) ; java.util.Collection<org.springframework.statemachine.config.ExitData<S,E>> < ExitData < S , E > > java.util.Collection<org.springframework.statemachine.config.ExitData<S,E>> = org.springframework.statemachine.config.TransitionsData<S,E> . getExits ( ) ; for ( ExitData < S , E > org.springframework.statemachine.config.ExitData<S,E> : java.util.Collection<org.springframework.statemachine.config.ExitData<S,E>> ) { if ( S . boolean ( org.springframework.statemachine.config.ExitData<S,E> . getSource ( ) ) ) { StateHolder < S , E > org.springframework.statemachine.config.StateHolder<S,E> = new StateHolder < S , E > ( java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( org.springframework.statemachine.config.ExitData<S,E> . getTarget ( ) ) ) ; if ( org.springframework.statemachine.config.StateHolder<S,E> . getState ( ) == null ) { java.util.Map<S,org.springframework.statemachine.config.StateHolder<S,E>> . put ( org.springframework.statemachine.config.ExitData<S,E> . getTarget ( ) , org.springframework.statemachine.config.StateHolder<S,E> ) ; } PseudoState < S , E > org.springframework.statemachine.config.PseudoState<S,E> = new ExitPseudoState < S , E > ( org.springframework.statemachine.config.StateHolder<S,E> ) ; org.springframework.statemachine.config.State<S,E> = org.springframework.statemachine.config.State<S,E> ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.StateData<S,E> . getDeferred ( ) , org.springframework.statemachine.config.StateData<S,E> . getEntryActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getExitActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getStateActions ( ) , org.springframework.statemachine.config.PseudoState<S,E> , org.springframework.statemachine.config.StateMachineModel<S,E> ) ; java.util.Collection<org.springframework.statemachine.config.State<S,E>> . add ( org.springframework.statemachine.config.State<S,E> ) ; java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . put ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.State<S,E> ) ; break; } } } else if ( org.springframework.statemachine.config.StateData<S,E> . getPseudoStateKind ( ) == PseudoStateKind . FORK ) { S S = org.springframework.statemachine.config.StateData<S,E> . getState ( ) ; java.util.List<S> < S > java.util.List<S> = org.springframework.statemachine.config.TransitionsData<S,E> . getForks ( ) . get ( S ) ; java.util.List<org.springframework.statemachine.config.State<S,E>> < State < S , E > > java.util.List<org.springframework.statemachine.config.State<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.State<S,E>> < State < S , E > > ( ) ; for ( S S : java.util.List<S> ) { java.util.List<org.springframework.statemachine.config.State<S,E>> . add ( java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( S ) ) ; } PseudoState < S , E > org.springframework.statemachine.config.PseudoState<S,E> = new ForkPseudoState < S , E > ( java.util.List<org.springframework.statemachine.config.State<S,E>> ) ; org.springframework.statemachine.config.State<S,E> = org.springframework.statemachine.config.State<S,E> ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.StateData<S,E> . getDeferred ( ) , org.springframework.statemachine.config.StateData<S,E> . getEntryActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getExitActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getStateActions ( ) , org.springframework.statemachine.config.PseudoState<S,E> , org.springframework.statemachine.config.StateMachineModel<S,E> ) ; java.util.Collection<org.springframework.statemachine.config.State<S,E>> . add ( org.springframework.statemachine.config.State<S,E> ) ; java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . put ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.State<S,E> ) ; } else if ( org.springframework.statemachine.config.StateData<S,E> . getPseudoStateKind ( ) == PseudoStateKind . JOIN ) { S S = org.springframework.statemachine.config.StateData<S,E> . getState ( ) ; java.util.List<S> < S > java.util.List<S> = org.springframework.statemachine.config.TransitionsData<S,E> . getJoins ( ) . get ( S ) ; java.util.List<org.springframework.statemachine.config.State<S,E>> < State < S , E > > java.util.List<org.springframework.statemachine.config.State<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.State<S,E>> < State < S , E > > ( ) ; if ( java.util.List<S> . int ( ) == NUMBER ) { State < S , E > org.springframework.statemachine.config.State<S,E> = java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( java.util.List<S> . S ( NUMBER ) ) ; if ( org.springframework.statemachine.config.State<S,E> instanceof RegionState ) { java.util.Collection<org.springframework.statemachine.config.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.config.Region<S,E>> = ( ( RegionState < S , E > ) org.springframework.statemachine.config.State<S,E> ) . getRegions ( ) ; for ( Region < S , E > org.springframework.statemachine.config.Region<S,E> : java.util.Collection<org.springframework.statemachine.config.Region<S,E>> ) { java.util.Collection<org.springframework.statemachine.config.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.config.State<S,E>> = org.springframework.statemachine.config.Region<S,E> . getStates ( ) ; for ( State < S , E > org.springframework.statemachine.config.State<S,E> : java.util.Collection<org.springframework.statemachine.config.State<S,E>> ) { if ( org.springframework.statemachine.config.State<S,E> . getPseudoState ( ) != null && org.springframework.statemachine.config.State<S,E> . getPseudoState ( ) . getKind ( ) == PseudoStateKind . END ) { java.util.List<org.springframework.statemachine.config.State<S,E>> . add ( org.springframework.statemachine.config.State<S,E> ) ; continue; } } } } } else { for ( S S : java.util.List<S> ) { java.util.List<org.springframework.statemachine.config.State<S,E>> . add ( java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( S ) ) ; } } java.util.List<org.springframework.statemachine.config.JoinStateData<S,E>> < JoinStateData < S , E > > java.util.List<org.springframework.statemachine.config.JoinStateData<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.JoinStateData<S,E>> < JoinStateData < S , E > > ( ) ; java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> < TransitionData < S , E > > java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> = org.springframework.statemachine.config.TransitionsData<S,E> . getTransitions ( ) ; for ( TransitionData < S , E > org.springframework.statemachine.config.TransitionData<S,E> : java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> ) { if ( org.springframework.statemachine.config.TransitionData<S,E> . getSource ( ) == S ) { StateHolder < S , E > org.springframework.statemachine.config.StateHolder<S,E> = new StateHolder < S , E > ( java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( org.springframework.statemachine.config.TransitionData<S,E> . getTarget ( ) ) ) ; if ( org.springframework.statemachine.config.StateHolder<S,E> . getState ( ) == null ) { java.util.Map<S,org.springframework.statemachine.config.StateHolder<S,E>> . put ( org.springframework.statemachine.config.TransitionData<S,E> . getTarget ( ) , org.springframework.statemachine.config.StateHolder<S,E> ) ; } java.util.List<org.springframework.statemachine.config.JoinStateData<S,E>> . add ( new JoinStateData < S , E > ( org.springframework.statemachine.config.StateHolder<S,E> , org.springframework.statemachine.config.TransitionData<S,E> . getGuard ( ) ) ) ; } } JoinPseudoState < S , E > org.springframework.statemachine.config.JoinPseudoState<S,E> = new JoinPseudoState < S , E > ( java.util.List<org.springframework.statemachine.config.State<S,E>> , java.util.List<org.springframework.statemachine.config.JoinStateData<S,E>> ) ; org.springframework.statemachine.config.State<S,E> = org.springframework.statemachine.config.State<S,E> ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.StateData<S,E> . getDeferred ( ) , org.springframework.statemachine.config.StateData<S,E> . getEntryActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getExitActions ( ) , org.springframework.statemachine.config.StateData<S,E> . getStateActions ( ) , org.springframework.statemachine.config.JoinPseudoState<S,E> , org.springframework.statemachine.config.StateMachineModel<S,E> ) ; java.util.Collection<org.springframework.statemachine.config.State<S,E>> . add ( org.springframework.statemachine.config.State<S,E> ) ; java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . put ( org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.State<S,E> ) ; } } java.util.Collection<org.springframework.statemachine.config.Transition<S,E>> < Transition < S , E > > java.util.Collection<org.springframework.statemachine.config.Transition<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.Transition<S,E>> < Transition < S , E > > ( ) ; for ( TransitionData < S , E > org.springframework.statemachine.config.TransitionData<S,E> : java.util.Collection<org.springframework.statemachine.config.TransitionData<S,E>> ) { S S = org.springframework.statemachine.config.TransitionData<S,E> . getSource ( ) ; S S = org.springframework.statemachine.config.TransitionData<S,E> . getTarget ( ) ; E E = org.springframework.statemachine.config.TransitionData<S,E> . getEvent ( ) ; java.lang.Long java.lang.Long = org.springframework.statemachine.config.TransitionData<S,E> . getPeriod ( ) ; java.lang.Integer java.lang.Integer = org.springframework.statemachine.config.TransitionData<S,E> . getCount ( ) ; Trigger < S , E > org.springframework.statemachine.config.Trigger<S,E> = null ; if ( E != null ) { org.springframework.statemachine.config.Trigger<S,E> = new EventTrigger < S , E > ( E ) ; } else if ( java.lang.Long != null ) { TimerTrigger < S , E > org.springframework.statemachine.config.TimerTrigger<S,E> = new TimerTrigger < S , E > ( java.lang.Long , java.lang.Integer != null ? java.lang.Integer : NUMBER ) ; if ( org.springframework.statemachine.config.BeanFactory != null ) { org.springframework.statemachine.config.TimerTrigger<S,E> . setBeanFactory ( org.springframework.statemachine.config.BeanFactory ) ; } if ( org.springframework.statemachine.config.TaskExecutor != null ) { org.springframework.statemachine.config.TimerTrigger<S,E> . setTaskExecutor ( org.springframework.statemachine.config.TaskExecutor ) ; } if ( org.springframework.statemachine.config.TaskScheduler != null ) { org.springframework.statemachine.config.TimerTrigger<S,E> . setTaskScheduler ( org.springframework.statemachine.config.TaskScheduler ) ; } org.springframework.statemachine.config.Trigger<S,E> = org.springframework.statemachine.config.TimerTrigger<S,E> ; ( ( AbstractState < S , E > ) java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( S ) ) . getTriggers ( ) . add ( org.springframework.statemachine.config.Trigger<S,E> ) ; } if ( org.springframework.statemachine.config.TransitionData<S,E> . getKind ( ) == TransitionKind . EXTERNAL ) { if ( java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( S ) == null || java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( S ) == null ) { continue; } DefaultExternalTransition < S , E > org.springframework.statemachine.config.DefaultExternalTransition<S,E> = new DefaultExternalTransition < S , E > ( java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( S ) , java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( S ) , org.springframework.statemachine.config.TransitionData<S,E> . getActions ( ) , E , org.springframework.statemachine.config.TransitionData<S,E> . getGuard ( ) , org.springframework.statemachine.config.Trigger<S,E> , org.springframework.statemachine.config.TransitionData<S,E> . getSecurityRule ( ) ) ; java.util.Collection<org.springframework.statemachine.config.Transition<S,E>> . add ( org.springframework.statemachine.config.DefaultExternalTransition<S,E> ) ; } else if ( org.springframework.statemachine.config.TransitionData<S,E> . getKind ( ) == TransitionKind . LOCAL ) { if ( java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( S ) == null || java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( S ) == null ) { continue; } DefaultLocalTransition < S , E > org.springframework.statemachine.config.DefaultLocalTransition<S,E> = new DefaultLocalTransition < S , E > ( java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( S ) , java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( S ) , org.springframework.statemachine.config.TransitionData<S,E> . getActions ( ) , E , org.springframework.statemachine.config.TransitionData<S,E> . getGuard ( ) , org.springframework.statemachine.config.Trigger<S,E> , org.springframework.statemachine.config.TransitionData<S,E> . getSecurityRule ( ) ) ; java.util.Collection<org.springframework.statemachine.config.Transition<S,E>> . add ( org.springframework.statemachine.config.DefaultLocalTransition<S,E> ) ; } else if ( org.springframework.statemachine.config.TransitionData<S,E> . getKind ( ) == TransitionKind . INTERNAL ) { DefaultInternalTransition < S , E > org.springframework.statemachine.config.DefaultInternalTransition<S,E> = new DefaultInternalTransition < S , E > ( java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( S ) , org.springframework.statemachine.config.TransitionData<S,E> . getActions ( ) , E , org.springframework.statemachine.config.TransitionData<S,E> . getGuard ( ) , org.springframework.statemachine.config.Trigger<S,E> , org.springframework.statemachine.config.TransitionData<S,E> . getSecurityRule ( ) ) ; java.util.Collection<org.springframework.statemachine.config.Transition<S,E>> . add ( org.springframework.statemachine.config.DefaultInternalTransition<S,E> ) ; } } if ( org.springframework.statemachine.config.TransitionsData<S,E> . getJoins ( ) != null ) { for ( java.util.Map.Entry<S,java.util.List<S>> < S , java.util.List<S> < S > > java.util.Map.Entry<S,java.util.List<S>> : org.springframework.statemachine.config.TransitionsData<S,E> . getJoins ( ) . entrySet ( ) ) { if ( java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( java.util.Map.Entry<S,java.util.List<S>> . S ( ) ) != null ) { java.util.List<S> < S > java.util.List<S> = java.util.Map.Entry<S,java.util.List<S>> . java.util.List<S> ( ) ; for ( S S : java.util.List<S> ) { State < S , E > org.springframework.statemachine.config.State<S,E> = java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( S ) ; if ( org.springframework.statemachine.config.State<S,E> != null && ! org.springframework.statemachine.config.State<S,E> . isOrthogonal ( ) ) { State < S , E > org.springframework.statemachine.config.State<S,E> = java.util.Map<S,org.springframework.statemachine.config.State<S,E>> . get ( java.util.Map.Entry<S,java.util.List<S>> . S ( ) ) ; DefaultExternalTransition < S , E > org.springframework.statemachine.config.DefaultExternalTransition<S,E> = new DefaultExternalTransition < S , E > ( org.springframework.statemachine.config.State<S,E> , org.springframework.statemachine.config.State<S,E> , null , null , null , null , null ) ; java.util.Collection<org.springframework.statemachine.config.Transition<S,E>> . add ( org.springframework.statemachine.config.DefaultExternalTransition<S,E> ) ; } } } } } Transition < S , E > org.springframework.statemachine.config.Transition<S,E> = new InitialTransition < S , E > ( org.springframework.statemachine.config.State<S,E> , org.springframework.statemachine.config.Action<S,E> ) ; StateMachine < S , E > org.springframework.statemachine.config.StateMachine<S,E> = org.springframework.statemachine.config.StateMachine<S,E> ( java.util.Collection<org.springframework.statemachine.config.State<S,E>> , java.util.Collection<org.springframework.statemachine.config.Transition<S,E>> , org.springframework.statemachine.config.State<S,E> , org.springframework.statemachine.config.Transition<S,E> , null , org.springframework.statemachine.config.DefaultExtendedState , org.springframework.statemachine.config.PseudoState<S,E> , java.lang.Boolean , org.springframework.statemachine.config.BeanFactory , org.springframework.statemachine.config.TaskExecutor , org.springframework.statemachine.config.TaskScheduler , java.lang.String , java.lang.String != null ? java.lang.String : org.springframework.statemachine.config.StateMachineModel<S,E> . getConfigurationData ( ) . getMachineId ( ) , java.util.UUID , org.springframework.statemachine.config.StateMachineModel<S,E> ) ; return org.springframework.statemachine.config.StateMachine<S,E> ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.statemachine.config.StateMachine<S,E> < S , E > org.springframework.statemachine.config.StateMachine<S,E> ( java.util.Collection<org.springframework.statemachine.config.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.config.State<S,E>> , java.util.Collection<org.springframework.statemachine.config.Transition<S,E>> < Transition < S , E > > java.util.Collection<org.springframework.statemachine.config.Transition<S,E>> , State < S , E > org.springframework.statemachine.config.State<S,E> , Transition < S , E > org.springframework.statemachine.config.Transition<S,E> , Message < E > org.springframework.statemachine.config.Message<E> , ExtendedState org.springframework.statemachine.config.ExtendedState , PseudoState < S , E > org.springframework.statemachine.config.PseudoState<S,E> , java.lang.Boolean java.lang.Boolean , BeanFactory org.springframework.statemachine.config.BeanFactory , TaskExecutor org.springframework.statemachine.config.TaskExecutor , TaskScheduler org.springframework.statemachine.config.TaskScheduler , java.lang.String java.lang.String , java.lang.String java.lang.String , java.util.UUID java.util.UUID , StateMachineModel < S , E > org.springframework.statemachine.config.StateMachineModel<S,E> );  <METHOD_END>
<METHOD_START> protected abstract org.springframework.statemachine.config.State<S,E> < S , E > org.springframework.statemachine.config.State<S,E> ( S S , java.util.Collection<E> < E > java.util.Collection<E> , java.util.Collection<? extends org.springframework.statemachine.config.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.config.Action<S,E>> , java.util.Collection<? extends org.springframework.statemachine.config.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.config.Action<S,E>> , java.util.Collection<? extends org.springframework.statemachine.config.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.config.Action<S,E>> , PseudoState < S , E > org.springframework.statemachine.config.PseudoState<S,E> , StateMachineModel < S , E > org.springframework.statemachine.config.StateMachineModel<S,E> );  <METHOD_END>
<METHOD_START> private java.util.Iterator<org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>>> < Node < StateData < S , E > > > java.util.Iterator<org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>>> ( StateMachineModel < S , E > org.springframework.statemachine.config.StateMachineModel<S,E> ) { Tree < StateData < S , E > > org.springframework.statemachine.config.Tree<org.springframework.statemachine.config.StateData<S,E>> = new Tree < StateData < S , E > > ( ) ; void ( org.springframework.statemachine.config.Tree<org.springframework.statemachine.config.StateData<S,E>> , org.springframework.statemachine.config.StateMachineModel<S,E> . getStatesData ( ) . getStateData ( ) ) ; return new TreeTraverser < Node < StateData < S , E > > > ( ) { @ java.lang.Override public java.lang.Iterable<org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>>> < Node < StateData < S , E > > > java.lang.Iterable<org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>>> ( Node < StateData < S , E > > org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>> ) { return org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>> . getChildren ( ) ; } } . postOrderTraversal ( org.springframework.statemachine.config.Tree<org.springframework.statemachine.config.StateData<S,E>> . getRoot ( ) ) . iterator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>>> < Node < StateData < S , E > > > java.lang.Iterable<org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>>> ( Node < StateData < S , E > > org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>> ) { return org.springframework.statemachine.config.Node<org.springframework.statemachine.config.StateData<S,E>> . getChildren ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( Tree < StateData < S , E > > org.springframework.statemachine.config.Tree<org.springframework.statemachine.config.StateData<S,E>> , java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> < StateData < S , E > > java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> ) { if ( java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> == null ) { return; } for ( StateData < S , E > org.springframework.statemachine.config.StateData<S,E> : java.util.Collection<org.springframework.statemachine.config.StateData<S,E>> ) { org.springframework.statemachine.config.Tree<org.springframework.statemachine.config.StateData<S,E>> . add ( org.springframework.statemachine.config.StateData<S,E> , org.springframework.statemachine.config.StateData<S,E> . getState ( ) , org.springframework.statemachine.config.StateData<S,E> . getParent ( ) ) ; void ( org.springframework.statemachine.config.Tree<org.springframework.statemachine.config.StateData<S,E>> , org.springframework.statemachine.config.StateData<S,E> . getSubmachineStateData ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.statemachine.config.RegionState<S,E> < S , E > org.springframework.statemachine.config.RegionState<S,E> ( S S , java.util.Collection<org.springframework.statemachine.config.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.config.Region<S,E>> , java.util.Collection<E> < E > java.util.Collection<E> , java.util.Collection<? extends org.springframework.statemachine.config.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.config.Action<S,E>> , java.util.Collection<? extends org.springframework.statemachine.config.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.config.Action<S,E>> , PseudoState < S , E > org.springframework.statemachine.config.PseudoState<S,E> );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.config.StateMachine<S,E> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
