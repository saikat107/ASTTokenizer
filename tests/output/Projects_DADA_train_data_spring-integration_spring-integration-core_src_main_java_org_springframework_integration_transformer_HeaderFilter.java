<METHOD_START> public void ( java.lang.String ... java.lang.String[] ) { Assert . notEmpty ( java.lang.String[] , STRING ) ; this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.transformer.Message<?> < ? > org.springframework.integration.transformer.Message<?> ( Message < ? > org.springframework.integration.transformer.Message<?> ) { AbstractIntegrationMessageBuilder < ? > org.springframework.integration.transformer.AbstractIntegrationMessageBuilder<?> = this . getMessageBuilderFactory ( ) . fromMessage ( org.springframework.integration.transformer.Message<> ) ; if ( this . boolean ) { org.springframework.integration.transformer.AbstractIntegrationMessageBuilder<> . removeHeaders ( this . java.lang.String[] ) ; } else { for ( java.lang.String java.lang.String : this . java.lang.String[] ) { org.springframework.integration.transformer.AbstractIntegrationMessageBuilder<> . removeHeader ( java.lang.String ) ; } } return org.springframework.integration.transformer.AbstractIntegrationMessageBuilder<> . build ( ) ; }  <METHOD_END>
