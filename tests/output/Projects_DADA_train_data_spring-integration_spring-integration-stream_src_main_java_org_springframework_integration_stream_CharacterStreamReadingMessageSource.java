<METHOD_START> public void ( java.io.Reader java.io.Reader ) { this( java.io.Reader , - NUMBER , false ); }  <METHOD_END>
<METHOD_START> public void ( java.io.Reader java.io.Reader , int int ) { this( java.io.Reader , int , false ); }  <METHOD_END>
<METHOD_START> public void ( java.io.Reader java.io.Reader , int int , boolean boolean ) { Assert . notNull ( java.io.Reader , STRING ) ; this . java.lang.Object = java.io.Reader ; if ( java.io.Reader instanceof java.io.BufferedReader ) { this . java.io.BufferedReader = ( java.io.BufferedReader ) java.io.Reader ; } else if ( int > NUMBER ) { this . java.io.BufferedReader = new java.io.BufferedReader ( java.io.Reader , int ) ; } else { this . java.io.BufferedReader = new java.io.BufferedReader ( java.io.Reader ) ; } this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.integration.stream.ApplicationEventPublisher ) { this . org.springframework.integration.stream.ApplicationEventPublisher = org.springframework.integration.stream.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.stream.Message<java.lang.String> < java.lang.String > org.springframework.integration.stream.Message<java.lang.String> ( ) { try { synchronized ( this . java.lang.Object ) { if ( ! this . boolean && ! this . java.io.BufferedReader . boolean ( ) ) { return null ; } java.lang.String java.lang.String = this . java.io.BufferedReader . java.lang.String ( ) ; if ( java.lang.String == null && this . org.springframework.integration.stream.ApplicationEventPublisher != null ) { this . org.springframework.integration.stream.ApplicationEventPublisher . publishEvent ( new StreamClosedEvent ( this ) ) ; } return ( java.lang.String != null ) ? new GenericMessage < java.lang.String > ( java.lang.String ) : null ; } } catch ( java.io.IOException java.io.IOException ) { throw new MessagingException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> public static final org.springframework.integration.stream.CharacterStreamReadingMessageSource org.springframework.integration.stream.CharacterStreamReadingMessageSource ( ) { return new org.springframework.integration.stream.CharacterStreamReadingMessageSource ( new java.io.InputStreamReader ( java.lang.System . java.io.InputStream ) ) ; }  <METHOD_END>
<METHOD_START> public static final org.springframework.integration.stream.CharacterStreamReadingMessageSource org.springframework.integration.stream.CharacterStreamReadingMessageSource ( java.lang.String java.lang.String ) { try { return new org.springframework.integration.stream.CharacterStreamReadingMessageSource ( new java.io.InputStreamReader ( java.lang.System . java.io.InputStream , java.lang.String ) ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String , java.io.UnsupportedEncodingException ) ; } }  <METHOD_END>
<METHOD_START> public static final org.springframework.integration.stream.CharacterStreamReadingMessageSource org.springframework.integration.stream.CharacterStreamReadingMessageSource ( ) { return new org.springframework.integration.stream.CharacterStreamReadingMessageSource ( new java.io.InputStreamReader ( java.lang.System . java.io.InputStream ) , - NUMBER , true ) ; }  <METHOD_END>
<METHOD_START> public static final org.springframework.integration.stream.CharacterStreamReadingMessageSource org.springframework.integration.stream.CharacterStreamReadingMessageSource ( java.lang.String java.lang.String ) { try { return new org.springframework.integration.stream.CharacterStreamReadingMessageSource ( new java.io.InputStreamReader ( java.lang.System . java.io.InputStream , java.lang.String ) , - NUMBER , true ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String , java.io.UnsupportedEncodingException ) ; } }  <METHOD_END>
