<METHOD_START> public void void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( Validator org.springframework.validation.beanvalidation.Validator ) { if ( org.springframework.validation.beanvalidation.Validator instanceof LocalValidatorFactoryBean ) { this . org.springframework.validation.beanvalidation.Validator = ( ( LocalValidatorFactoryBean ) org.springframework.validation.beanvalidation.Validator ) . getValidator ( ) ; } else { this . org.springframework.validation.beanvalidation.Validator = org.springframework.validation.beanvalidation.Validator ; } }  <METHOD_END>
<METHOD_START> public void void ( ValidatorFactory org.springframework.validation.beanvalidation.ValidatorFactory ) { this . org.springframework.validation.beanvalidation.Validator = org.springframework.validation.beanvalidation.ValidatorFactory . getValidator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Pointcut org.springframework.validation.beanvalidation.Pointcut = new AnnotationMatchingPointcut ( this . java.lang.Class<> , true ) ; this . advisor = new DefaultPointcutAdvisor ( org.springframework.validation.beanvalidation.Pointcut , org.springframework.validation.beanvalidation.Advice ( this . org.springframework.validation.beanvalidation.Validator ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.validation.beanvalidation.Advice org.springframework.validation.beanvalidation.Advice ( Validator org.springframework.validation.beanvalidation.Validator ) { return ( org.springframework.validation.beanvalidation.Validator != null ? new MethodValidationInterceptor ( org.springframework.validation.beanvalidation.Validator ) : new MethodValidationInterceptor ( ) ) ; }  <METHOD_END>
