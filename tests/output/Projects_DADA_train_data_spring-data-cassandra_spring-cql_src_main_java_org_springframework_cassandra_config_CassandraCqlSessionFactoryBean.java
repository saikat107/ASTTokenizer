<METHOD_START> @ java.lang.Override public org.springframework.cassandra.config.Session org.springframework.cassandra.config.Session ( ) { return this . org.springframework.cassandra.config.Session ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends org.springframework.cassandra.config.Session> < ? extends Session > java.lang.Class<? extends org.springframework.cassandra.config.Session> ( ) { return ( this . org.springframework.cassandra.config.Session != null ? this . org.springframework.cassandra.config.Session . getClass ( ) : Session .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { this . org.springframework.cassandra.config.Session = org.springframework.cassandra.config.Session ( java.lang.String ( ) ) ; void ( java.util.List<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.cassandra.config.Session org.springframework.cassandra.config.Session ( java.lang.String java.lang.String ) { return ( StringUtils . hasText ( java.lang.String ) ? org.springframework.cassandra.config.Cluster ( ) . connect ( java.lang.String ) : org.springframework.cassandra.config.Cluster ( ) . connect ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { void ( java.util.List<java.lang.String> ( ) ) ; org.springframework.cassandra.config.Session ( ) . close ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { if ( ! CollectionUtils . isEmpty ( java.util.List<java.lang.String> ) ) { CqlOperations org.springframework.cassandra.config.CqlOperations = org.springframework.cassandra.config.CqlOperations ( org.springframework.cassandra.config.Session ( ) ) ; java.util.List<java.lang.String> . void ( java.lang.String -> { org.springframework.cassandra.config.Logger . info ( STRING , java.lang.String ) ; org.springframework.cassandra.config.CqlOperations . execute ( java.lang.String ) ; } ) ; } }  <METHOD_END>
<METHOD_START> org.springframework.cassandra.config.CqlOperations org.springframework.cassandra.config.CqlOperations ( Session org.springframework.cassandra.config.Session ) { return new CqlTemplate ( org.springframework.cassandra.config.Session ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.config.DataAccessException org.springframework.cassandra.config.DataAccessException ( java.lang.RuntimeException java.lang.RuntimeException ) { return this . org.springframework.cassandra.config.PersistenceExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { Session org.springframework.cassandra.config.Session = org.springframework.cassandra.config.Session ( ) ; return ! ( org.springframework.cassandra.config.Session == null || org.springframework.cassandra.config.Session . isClosed ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( Cluster org.springframework.cassandra.config.Cluster ) { Assert . notNull ( org.springframework.cassandra.config.Cluster , STRING ) ; this . org.springframework.cassandra.config.Cluster = org.springframework.cassandra.config.Cluster ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cassandra.config.Cluster org.springframework.cassandra.config.Cluster ( ) { Assert . state ( this . org.springframework.cassandra.config.Cluster != null , STRING ) ; return this . org.springframework.cassandra.config.Cluster ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cassandra.config.Session org.springframework.cassandra.config.Session ( ) { Session org.springframework.cassandra.config.Session = org.springframework.cassandra.config.Session ( ) ; Assert . state ( org.springframework.cassandra.config.Session != null , STRING ) ; return org.springframework.cassandra.config.Session ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { this . java.util.List<java.lang.String> = ( java.util.List<java.lang.String> != null ? new java.util.ArrayList<java.lang.String> <> ( java.util.List<java.lang.String> ) : java.util.Collections . java.util.List<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.Collections . java.util.List<java.lang.String> ( this . java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { this . java.util.List<java.lang.String> = ( java.util.List<java.lang.String> != null ? new java.util.ArrayList<java.lang.String> <> ( java.util.List<java.lang.String> ) : java.util.Collections . java.util.List<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.Collections . java.util.List<java.lang.String> ( this . java.util.List<java.lang.String> ) ; }  <METHOD_END>
