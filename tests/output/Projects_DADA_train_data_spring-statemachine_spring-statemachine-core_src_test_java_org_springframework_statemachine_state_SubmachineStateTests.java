<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.state.AnnotationConfigApplicationContext org.springframework.statemachine.state.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PseudoState < TestStates , TestEvents > org.springframework.statemachine.state.PseudoState<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = new DefaultPseudoState < TestStates , TestEvents > ( PseudoStateKind . INITIAL ) ; State < TestStates , TestEvents > org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = new EnumState < TestStates , TestEvents > ( TestStates . SI , org.springframework.statemachine.state.PseudoState<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; State < TestStates , TestEvents > org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = new EnumState < TestStates , TestEvents > ( TestStates . S1 ) ; State < TestStates , TestEvents > org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = new EnumState < TestStates , TestEvents > ( TestStates . S2 ) ; State < TestStates , TestEvents > org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = new EnumState < TestStates , TestEvents > ( TestStates . S3 ) ; java.util.Collection<org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> < State < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> < State < TestStates , TestEvents > > ( ) ; java.util.Collection<org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . add ( org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . add ( org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . add ( org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . add ( org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> < Transition < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> < Transition < TestStates , TestEvents > > ( ) ; DefaultExternalTransition < TestStates , TestEvents > org.springframework.statemachine.state.DefaultExternalTransition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = new DefaultExternalTransition < TestStates , TestEvents > ( org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , null , TestEvents . E1 , null , new EventTrigger < TestStates , TestEvents > ( TestEvents . E1 ) ) ; DefaultExternalTransition < TestStates , TestEvents > org.springframework.statemachine.state.DefaultExternalTransition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = new DefaultExternalTransition < TestStates , TestEvents > ( org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , null , TestEvents . E2 , null , new EventTrigger < TestStates , TestEvents > ( TestEvents . E2 ) ) ; DefaultExternalTransition < TestStates , TestEvents > org.springframework.statemachine.state.DefaultExternalTransition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = new DefaultExternalTransition < TestStates , TestEvents > ( org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , null , TestEvents . E3 , null , new EventTrigger < TestStates , TestEvents > ( TestEvents . E3 ) ) ; java.util.Collection<org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . add ( org.springframework.statemachine.state.DefaultExternalTransition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . add ( org.springframework.statemachine.state.DefaultExternalTransition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . add ( org.springframework.statemachine.state.DefaultExternalTransition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; SyncTaskExecutor org.springframework.statemachine.state.SyncTaskExecutor = new SyncTaskExecutor ( ) ; BeanFactory org.springframework.statemachine.state.BeanFactory = new DefaultListableBeanFactory ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = new ObjectStateMachine < TestStates , TestEvents > ( java.util.Collection<org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> , java.util.Collection<org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> , org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . setTaskExecutor ( org.springframework.statemachine.state.SyncTaskExecutor ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . setBeanFactory ( org.springframework.statemachine.state.BeanFactory ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . afterPropertiesSet ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; StateMachineState < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineState<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = new StateMachineState < TestStates , TestEvents > ( TestStates . S4 , org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; assertThat ( org.springframework.statemachine.state.StateMachineState<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isSimple ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.state.StateMachineState<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isComposite ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.state.StateMachineState<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isOrthogonal ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.state.StateMachineState<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isSubmachineState ( ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.StateMachineState<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getIds ( ) , contains ( TestStates . S4 , TestStates . SI ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( BaseConfig .class , org.springframework.statemachine.state.SubmachineStateTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E2 ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E3 ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E4 ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S2 , TestStates . S21 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.state.SubmachineStateTests.Config2 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isRunning ( ) , is ( true ) ) ; State < TestStates , TestEvents > org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = ( ( StateMachineState < TestStates , TestEvents > ) org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) . getSubmachine ( ) ; boolean boolean = TestUtils . readField ( STRING , org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; assertThat ( boolean , is ( true ) ) ; org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) ; org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = ( ( StateMachineState < TestStates , TestEvents > ) org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) . getSubmachine ( ) ; boolean = TestUtils . readField ( STRING , org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; assertThat ( boolean , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S2 , TestStates . S20 , TestStates . S2011 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.state.SubmachineStateTests.Config3 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isRunning ( ) , is ( true ) ) ; State < TestStates , TestEvents > org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = ( ( StateMachineState < TestStates , TestEvents > ) org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) . getSubmachine ( ) ; boolean boolean = TestUtils . readField ( STRING , org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; assertThat ( boolean , is ( true ) ) ; org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) ; org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = ( ( StateMachineState < TestStates , TestEvents > ) org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) . getSubmachine ( ) ; boolean = TestUtils . readField ( STRING , org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; assertThat ( boolean , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S2 , TestStates . S21 , TestStates . S212 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.state.SubmachineStateTests.Config3 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isRunning ( ) , is ( true ) ) ; State < TestStates , TestEvents > org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = ( ( StateMachineState < TestStates , TestEvents > ) org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) . getSubmachine ( ) ; State < TestStates , TestEvents > org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = ( ( StateMachineState < TestStates , TestEvents > ) org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) . getSubmachine ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E3 ) ; boolean boolean = TestUtils . readField ( STRING , org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; assertThat ( boolean , is ( false ) ) ; boolean boolean = TestUtils . readField ( STRING , org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; assertThat ( boolean , is ( false ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . state ( TestStates . S2 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . state ( TestStates . S20 ) . state ( TestStates . S21 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S20 ) . target ( TestStates . S21 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . S1 ) . event ( TestEvents . E3 ) . and ( ) . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S21 ) . event ( TestEvents . E4 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . state ( TestStates . S2 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . state ( TestStates . S20 ) . state ( TestStates . S21 ) . and ( ) . withStates ( ) . parent ( TestStates . S20 ) . initial ( TestStates . S2011 ) . state ( TestStates . S2011 ) . state ( TestStates . S2012 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . state ( TestStates . S2 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . state ( TestStates . S20 ) . state ( TestStates . S21 ) . and ( ) . withStates ( ) . parent ( TestStates . S21 ) . initial ( TestStates . S211 ) . state ( TestStates . S211 ) . state ( TestStates . S212 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S212 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S211 ) . target ( TestStates . S212 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S212 ) . target ( TestStates . S1 ) . event ( TestEvents . E3 ) ; }  <METHOD_END>
