<METHOD_START> public void ( SolrClient org.springframework.data.solr.core.SolrClient ) { this( new HttpSolrClientFactory ( org.springframework.data.solr.core.SolrClient ) ); }  <METHOD_END>
<METHOD_START> public void ( SolrClient org.springframework.data.solr.core.SolrClient , RequestMethod org.springframework.data.solr.core.RequestMethod ) { this( new HttpSolrClientFactory ( org.springframework.data.solr.core.SolrClient ) , org.springframework.data.solr.core.RequestMethod ); }  <METHOD_END>
<METHOD_START> public void ( SolrClientFactory org.springframework.data.solr.core.SolrClientFactory ) { this( org.springframework.data.solr.core.SolrClientFactory , ( SolrConverter ) null ); }  <METHOD_END>
<METHOD_START> public void ( SolrClientFactory org.springframework.data.solr.core.SolrClientFactory , RequestMethod org.springframework.data.solr.core.RequestMethod ) { this( org.springframework.data.solr.core.SolrClientFactory , null , org.springframework.data.solr.core.RequestMethod ); }  <METHOD_END>
<METHOD_START> public void ( SolrClientFactory org.springframework.data.solr.core.SolrClientFactory , SolrConverter org.springframework.data.solr.core.SolrConverter ) { this( org.springframework.data.solr.core.SolrClientFactory , org.springframework.data.solr.core.SolrConverter , RequestMethod . GET ); }  <METHOD_END>
<METHOD_START> public void ( SolrClientFactory org.springframework.data.solr.core.SolrClientFactory , SolrConverter org.springframework.data.solr.core.SolrConverter , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( org.springframework.data.solr.core.SolrClientFactory , STRING ) ; this . org.springframework.data.solr.core.SolrClientFactory = org.springframework.data.solr.core.SolrClientFactory ; this . org.springframework.data.solr.core.RequestMethod = org.springframework.data.solr.core.RequestMethod != null ? org.springframework.data.solr.core.RequestMethod : RequestMethod . GET ; this . org.springframework.data.solr.core.SolrConverter = org.springframework.data.solr.core.SolrConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( SolrCallback < T > org.springframework.data.solr.core.SolrCallback<T> ) { Assert . notNull ( org.springframework.data.solr.core.SolrCallback<T> , STRING ) ; try { SolrClient org.springframework.data.solr.core.SolrClient = this . org.springframework.data.solr.core.SolrClient ( ) ; return org.springframework.data.solr.core.SolrCallback<T> . doInSolr ( org.springframework.data.solr.core.SolrClient ) ; } catch ( java.lang.Exception java.lang.Exception ) { DataAccessException org.springframework.data.solr.core.DataAccessException = org.springframework.data.solr.core.PersistenceExceptionTranslator ( ) . translateExceptionIfPossible ( java.lang.Exception instanceof java.lang.RuntimeException ? ( java.lang.RuntimeException ) java.lang.Exception : new java.lang.RuntimeException ( java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ) ; throw org.springframework.data.solr.core.DataAccessException == null ? new UncategorizedSolrException ( java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) : org.springframework.data.solr.core.DataAccessException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.SolrPingResponse org.springframework.data.solr.core.SolrPingResponse ( ) { return java.lang.Object ( SolrClient :: ping ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( final SolrDataQuery org.springframework.data.solr.core.SolrDataQuery ) { return long ( org.springframework.data.solr.core.SolrDataQuery , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( final SolrDataQuery org.springframework.data.solr.core.SolrDataQuery , final RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( org.springframework.data.solr.core.SolrDataQuery , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.RequestMethod , STRING ) ; return T ( solrClient -> { SolrQuery solrQuery = queryParsers . getForClass ( query . getClass ( ) ) . constructSolrQuery ( query ) ; solrQuery . setStart ( NUMBER ) ; solrQuery . setRows ( NUMBER ) ; return solrClient . query ( solrQuery , getSolrRequestMethod ( method ) ) . getResults ( ) . getNumFound ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( java.lang.String java.lang.String , SolrDataQuery org.springframework.data.solr.core.SolrDataQuery ) { return long ( java.lang.String , org.springframework.data.solr.core.SolrDataQuery , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( java.lang.String java.lang.String , SolrDataQuery org.springframework.data.solr.core.SolrDataQuery , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.SolrDataQuery , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.RequestMethod , STRING ) ; return T ( solrClient -> { SolrQuery solrQuery = queryParsers . getForClass ( query . getClass ( ) ) . constructSolrQuery ( query ) ; solrQuery . setStart ( NUMBER ) ; solrQuery . setRows ( NUMBER ) ; return solrClient . query ( collection , solrQuery , getSolrRequestMethod ( method ) ) . getResults ( ) . getNumFound ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( java.lang.Object java.lang.Object ) { return org.springframework.data.solr.core.UpdateResponse ( java.lang.Object , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { return org.springframework.data.solr.core.UpdateResponse ( java.lang.String , java.lang.Object , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , int int ) { void ( java.lang.Object ) ; return T ( solrClient -> solrClient . add ( collection , convertBeanToSolrInputDocument ( obj ) , commitWithinMs ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( final java.lang.Object java.lang.Object , final int int ) { void ( java.lang.Object ) ; return T ( solrClient -> solrClient . add ( convertBeanToSolrInputDocument ( objectToAdd ) , commitWithinMs ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( java.util.Collection<?> < ? > java.util.Collection<?> ) { return org.springframework.data.solr.core.UpdateResponse ( java.util.Collection<> , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( java.lang.String java.lang.String , java.util.Collection<?> < ? > java.util.Collection<?> ) { return org.springframework.data.solr.core.UpdateResponse ( java.lang.String , java.util.Collection<> , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( java.lang.String java.lang.String , java.util.Collection<?> < ? > java.util.Collection<?> , int int ) { return T ( solrClient -> solrClient . add ( collection , convertBeansToSolrInputDocuments ( beans ) , commitWithinMs ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( final java.util.Collection<?> < ? > java.util.Collection<?> , final int int ) { return T ( solrClient -> solrClient . add ( convertBeansToSolrInputDocuments ( beansToAdd ) , commitWithinMs ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( SolrInputDocument org.springframework.data.solr.core.SolrInputDocument ) { return org.springframework.data.solr.core.UpdateResponse ( org.springframework.data.solr.core.SolrInputDocument , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( java.lang.String java.lang.String , SolrInputDocument org.springframework.data.solr.core.SolrInputDocument ) { return org.springframework.data.solr.core.UpdateResponse ( java.lang.String , org.springframework.data.solr.core.SolrInputDocument , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( java.lang.String java.lang.String , SolrInputDocument org.springframework.data.solr.core.SolrInputDocument , int int ) { return T ( solrClient -> solrClient . add ( collection , document , commitWithinMs ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( final SolrInputDocument org.springframework.data.solr.core.SolrInputDocument , final int int ) { return T ( solrClient -> solrClient . add ( documentToAdd , commitWithinMs ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( java.util.Collection<org.springframework.data.solr.core.SolrInputDocument> < SolrInputDocument > java.util.Collection<org.springframework.data.solr.core.SolrInputDocument> ) { return org.springframework.data.solr.core.UpdateResponse ( java.util.Collection<org.springframework.data.solr.core.SolrInputDocument> , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( java.lang.String java.lang.String , java.util.Collection<org.springframework.data.solr.core.SolrInputDocument> < SolrInputDocument > java.util.Collection<org.springframework.data.solr.core.SolrInputDocument> ) { return org.springframework.data.solr.core.UpdateResponse ( java.lang.String , java.util.Collection<org.springframework.data.solr.core.SolrInputDocument> , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( java.lang.String java.lang.String , java.util.Collection<org.springframework.data.solr.core.SolrInputDocument> < SolrInputDocument > java.util.Collection<org.springframework.data.solr.core.SolrInputDocument> , int int ) { return T ( solrClient -> solrClient . add ( collection , documents , commitWithinMs ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( final java.util.Collection<org.springframework.data.solr.core.SolrInputDocument> < SolrInputDocument > java.util.Collection<org.springframework.data.solr.core.SolrInputDocument> , final int int ) { return T ( solrClient -> solrClient . add ( documentsToAdd , commitWithinMs ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( SolrDataQuery org.springframework.data.solr.core.SolrDataQuery ) { Assert . notNull ( org.springframework.data.solr.core.SolrDataQuery , STRING ) ; final java.lang.String java.lang.String = this . org.springframework.data.solr.core.QueryParsers . getForClass ( org.springframework.data.solr.core.SolrDataQuery . getClass ( ) ) . getQueryString ( org.springframework.data.solr.core.SolrDataQuery ) ; return T ( solrClient -> solrClient . deleteByQuery ( queryString ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( java.lang.String java.lang.String , SolrDataQuery org.springframework.data.solr.core.SolrDataQuery ) { Assert . notNull ( org.springframework.data.solr.core.SolrDataQuery , STRING ) ; final java.lang.String java.lang.String = this . org.springframework.data.solr.core.QueryParsers . getForClass ( org.springframework.data.solr.core.SolrDataQuery . getClass ( ) ) . getQueryString ( org.springframework.data.solr.core.SolrDataQuery ) ; return T ( solrClient -> solrClient . deleteByQuery ( collection , queryString ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( final java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return T ( solrClient -> solrClient . deleteById ( id ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return T ( solrClient -> solrClient . deleteById ( collection , id ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { Assert . notNull ( java.util.Collection<java.lang.String> , STRING ) ; return T ( solrClient -> solrClient . deleteById ( ids . stream ( ) . collect ( Collectors . toList ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.UpdateResponse org.springframework.data.solr.core.UpdateResponse ( java.lang.String java.lang.String , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { Assert . notNull ( java.util.Collection<java.lang.String> , STRING ) ; return T ( solrClient -> solrClient . deleteById ( collection , ids . stream ( ) . collect ( Collectors . toList ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Optional<T> < T > java.util.Optional<T> ( Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return java.util.Optional ( org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Optional<T> < T > java.util.Optional<T> ( java.lang.String java.lang.String , Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return java.util.Optional ( java.lang.String , org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Optional<T> < T > java.util.Optional<T> ( java.lang.String java.lang.String , Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.Query , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; org.springframework.data.solr.core.Query . setPageRequest ( PageRequest . of ( NUMBER , NUMBER ) ) ; QueryResponse org.springframework.data.solr.core.QueryResponse = org.springframework.data.solr.core.QueryResponse ( java.lang.String , org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ) ; if ( org.springframework.data.solr.core.QueryResponse . getResults ( ) . size ( ) > NUMBER ) { if ( org.springframework.data.solr.core.QueryResponse . getResults ( ) . size ( ) > NUMBER ) { org.springframework.data.solr.core.Logger . warn ( STRING ) ; } return java.util.Optional . java.util.Optional ( java.util.List ( org.springframework.data.solr.core.QueryResponse . getResults ( ) , java.lang.Class<T> ) . get ( NUMBER ) ) ; } return java.util.Optional . java.util.Optional<T> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Optional<T> < T > java.util.Optional<T> ( Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( org.springframework.data.solr.core.Query , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; org.springframework.data.solr.core.Query . setPageRequest ( PageRequest . of ( NUMBER , NUMBER ) ) ; QueryResponse org.springframework.data.solr.core.QueryResponse = org.springframework.data.solr.core.QueryResponse ( org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ) ; if ( org.springframework.data.solr.core.QueryResponse . getResults ( ) . size ( ) > NUMBER ) { if ( org.springframework.data.solr.core.QueryResponse . getResults ( ) . size ( ) > NUMBER ) { org.springframework.data.solr.core.Logger . warn ( STRING ) ; } return java.util.Optional . java.util.Optional ( java.util.List ( org.springframework.data.solr.core.QueryResponse . getResults ( ) , java.lang.Class<T> ) . get ( NUMBER ) ) ; } return java.util.Optional . java.util.Optional<T> ( ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.solr.core.SolrResultPage<T> < T > org.springframework.data.solr.core.SolrResultPage<T> ( Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { return org.springframework.data.solr.core.SolrResultPage ( null , org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.solr.core.SolrResultPage<T> < T > org.springframework.data.solr.core.SolrResultPage<T> ( java.lang.String java.lang.String , Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { QueryResponse org.springframework.data.solr.core.QueryResponse = null ; NamedObjectsQuery org.springframework.data.solr.core.NamedObjectsQuery = new NamedObjectsQuery ( org.springframework.data.solr.core.Query ) ; org.springframework.data.solr.core.QueryResponse = org.springframework.data.solr.core.QueryResponse ( java.lang.String , org.springframework.data.solr.core.NamedObjectsQuery , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod != null ? org.springframework.data.solr.core.RequestMethod : org.springframework.data.solr.core.RequestMethod ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.data.solr.core.NamedObjectsQuery . getNamesAssociation ( ) ; return org.springframework.data.solr.core.SolrResultPage ( org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.QueryResponse , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.ScoredPage<T> < T > org.springframework.data.solr.core.ScoredPage<T> ( Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( org.springframework.data.solr.core.Query , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; return org.springframework.data.solr.core.SolrResultPage ( org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.ScoredPage<T> < T > org.springframework.data.solr.core.ScoredPage<T> ( java.lang.String java.lang.String , Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.Query , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; return org.springframework.data.solr.core.SolrResultPage ( java.lang.String , org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T , S extends org.springframework.data.solr.core.Page<T> < T > > S S ( Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.solr.core.Page ( org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T , S extends org.springframework.data.solr.core.Page<T> < T > > S S ( java.lang.String java.lang.String , Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.solr.core.Page ( java.lang.String , org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T , S extends org.springframework.data.solr.core.Page<T> < T > > S S ( Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( org.springframework.data.solr.core.Query , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; return ( S ) org.springframework.data.solr.core.SolrResultPage ( org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ) ; }  <METHOD_END>
<METHOD_START> public < T , S extends org.springframework.data.solr.core.Page<T> < T > > S S ( java.lang.String java.lang.String , Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.Query , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; return ( S ) org.springframework.data.solr.core.SolrResultPage ( java.lang.String , org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.ScoredPage<T> < T > org.springframework.data.solr.core.ScoredPage<T> ( Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( org.springframework.data.solr.core.Query , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.RequestMethod , STRING ) ; return org.springframework.data.solr.core.SolrResultPage ( org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.ScoredPage<T> < T > org.springframework.data.solr.core.ScoredPage<T> ( java.lang.String java.lang.String , Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.Query , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.RequestMethod , STRING ) ; return org.springframework.data.solr.core.SolrResultPage ( java.lang.String , org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.GroupPage<T> < T > org.springframework.data.solr.core.GroupPage<T> ( Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.solr.core.GroupPage ( org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.GroupPage<T> < T > org.springframework.data.solr.core.GroupPage<T> ( java.lang.String java.lang.String , Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.solr.core.GroupPage ( java.lang.String , org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.GroupPage<T> < T > org.springframework.data.solr.core.GroupPage<T> ( Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( org.springframework.data.solr.core.Query , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.RequestMethod , STRING ) ; return org.springframework.data.solr.core.SolrResultPage ( org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.GroupPage<T> < T > org.springframework.data.solr.core.GroupPage<T> ( java.lang.String java.lang.String , Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.Query , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.RequestMethod , STRING ) ; return org.springframework.data.solr.core.SolrResultPage ( java.lang.String , org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.StatsPage<T> < T > org.springframework.data.solr.core.StatsPage<T> ( Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.solr.core.StatsPage ( org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.StatsPage<T> < T > org.springframework.data.solr.core.StatsPage<T> ( java.lang.String java.lang.String , Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.solr.core.StatsPage ( java.lang.String , org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.StatsPage<T> < T > org.springframework.data.solr.core.StatsPage<T> ( Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( org.springframework.data.solr.core.Query , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.RequestMethod , STRING ) ; return org.springframework.data.solr.core.SolrResultPage ( org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.solr.core.StatsPage<T> < T > org.springframework.data.solr.core.StatsPage<T> ( java.lang.String java.lang.String , Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.Query , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.RequestMethod , STRING ) ; return org.springframework.data.solr.core.SolrResultPage ( java.lang.String , org.springframework.data.solr.core.Query , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.FacetPage<T> < T > org.springframework.data.solr.core.FacetPage<T> ( FacetQuery org.springframework.data.solr.core.FacetQuery , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.solr.core.FacetPage ( org.springframework.data.solr.core.FacetQuery , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.FacetPage<T> < T > org.springframework.data.solr.core.FacetPage<T> ( java.lang.String java.lang.String , FacetQuery org.springframework.data.solr.core.FacetQuery , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.solr.core.FacetPage ( java.lang.String , org.springframework.data.solr.core.FacetQuery , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.FacetPage<T> < T > org.springframework.data.solr.core.FacetPage<T> ( FacetQuery org.springframework.data.solr.core.FacetQuery , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( org.springframework.data.solr.core.FacetQuery , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; NamedObjectsFacetQuery org.springframework.data.solr.core.NamedObjectsFacetQuery = new NamedObjectsFacetQuery ( org.springframework.data.solr.core.FacetQuery ) ; return org.springframework.data.solr.core.SolrResultPage ( org.springframework.data.solr.core.FacetQuery , java.lang.Class<T> , org.springframework.data.solr.core.QueryResponse ( org.springframework.data.solr.core.NamedObjectsFacetQuery , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ) , org.springframework.data.solr.core.NamedObjectsFacetQuery . getNamesAssociation ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.FacetPage<T> < T > org.springframework.data.solr.core.FacetPage<T> ( java.lang.String java.lang.String , FacetQuery org.springframework.data.solr.core.FacetQuery , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.FacetQuery , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; NamedObjectsFacetQuery org.springframework.data.solr.core.NamedObjectsFacetQuery = new NamedObjectsFacetQuery ( org.springframework.data.solr.core.FacetQuery ) ; return org.springframework.data.solr.core.SolrResultPage ( org.springframework.data.solr.core.FacetQuery , java.lang.Class<T> , org.springframework.data.solr.core.QueryResponse ( java.lang.String , org.springframework.data.solr.core.NamedObjectsFacetQuery , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ) , org.springframework.data.solr.core.NamedObjectsFacetQuery . getNamesAssociation ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.HighlightPage<T> < T > org.springframework.data.solr.core.HighlightPage<T> ( HighlightQuery org.springframework.data.solr.core.HighlightQuery , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.solr.core.HighlightPage ( org.springframework.data.solr.core.HighlightQuery , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.HighlightPage<T> < T > org.springframework.data.solr.core.HighlightPage<T> ( java.lang.String java.lang.String , HighlightQuery org.springframework.data.solr.core.HighlightQuery , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.solr.core.HighlightPage ( java.lang.String , org.springframework.data.solr.core.HighlightQuery , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.HighlightPage<T> < T > org.springframework.data.solr.core.HighlightPage<T> ( HighlightQuery org.springframework.data.solr.core.HighlightQuery , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( org.springframework.data.solr.core.HighlightQuery , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; NamedObjectsHighlightQuery org.springframework.data.solr.core.NamedObjectsHighlightQuery = new NamedObjectsHighlightQuery ( org.springframework.data.solr.core.HighlightQuery ) ; QueryResponse org.springframework.data.solr.core.QueryResponse = org.springframework.data.solr.core.QueryResponse ( org.springframework.data.solr.core.NamedObjectsHighlightQuery , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; return org.springframework.data.solr.core.SolrResultPage ( org.springframework.data.solr.core.HighlightQuery , java.lang.Class<T> , org.springframework.data.solr.core.QueryResponse , org.springframework.data.solr.core.NamedObjectsHighlightQuery . getNamesAssociation ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.HighlightPage<T> < T > org.springframework.data.solr.core.HighlightPage<T> ( java.lang.String java.lang.String , HighlightQuery org.springframework.data.solr.core.HighlightQuery , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( org.springframework.data.solr.core.HighlightQuery , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; NamedObjectsHighlightQuery org.springframework.data.solr.core.NamedObjectsHighlightQuery = new NamedObjectsHighlightQuery ( org.springframework.data.solr.core.HighlightQuery ) ; QueryResponse org.springframework.data.solr.core.QueryResponse = org.springframework.data.solr.core.QueryResponse ( java.lang.String , org.springframework.data.solr.core.NamedObjectsHighlightQuery , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; return org.springframework.data.solr.core.SolrResultPage ( org.springframework.data.solr.core.HighlightQuery , java.lang.Class<T> , org.springframework.data.solr.core.QueryResponse , org.springframework.data.solr.core.NamedObjectsHighlightQuery . getNamesAssociation ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.FacetAndHighlightPage<T> < T > org.springframework.data.solr.core.FacetAndHighlightPage<T> ( FacetAndHighlightQuery org.springframework.data.solr.core.FacetAndHighlightQuery , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.solr.core.FacetAndHighlightPage ( org.springframework.data.solr.core.FacetAndHighlightQuery , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.FacetAndHighlightPage<T> < T > org.springframework.data.solr.core.FacetAndHighlightPage<T> ( java.lang.String java.lang.String , FacetAndHighlightQuery org.springframework.data.solr.core.FacetAndHighlightQuery , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.solr.core.FacetAndHighlightPage ( java.lang.String , org.springframework.data.solr.core.FacetAndHighlightQuery , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.FacetAndHighlightPage<T> < T > org.springframework.data.solr.core.FacetAndHighlightPage<T> ( FacetAndHighlightQuery org.springframework.data.solr.core.FacetAndHighlightQuery , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( org.springframework.data.solr.core.FacetAndHighlightQuery , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; NamedObjectsFacetAndHighlightQuery org.springframework.data.solr.core.NamedObjectsFacetAndHighlightQuery = new NamedObjectsFacetAndHighlightQuery ( org.springframework.data.solr.core.FacetAndHighlightQuery ) ; QueryResponse org.springframework.data.solr.core.QueryResponse = org.springframework.data.solr.core.QueryResponse ( org.springframework.data.solr.core.NamedObjectsFacetAndHighlightQuery , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.data.solr.core.NamedObjectsFacetAndHighlightQuery . getNamesAssociation ( ) ; return org.springframework.data.solr.core.SolrResultPage ( org.springframework.data.solr.core.FacetAndHighlightQuery , java.lang.Class<T> , org.springframework.data.solr.core.QueryResponse , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.solr.core.FacetAndHighlightPage<T> < T > org.springframework.data.solr.core.FacetAndHighlightPage<T> ( java.lang.String java.lang.String , FacetAndHighlightQuery org.springframework.data.solr.core.FacetAndHighlightQuery , java.lang.Class<T> < T > java.lang.Class<T> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( org.springframework.data.solr.core.FacetAndHighlightQuery , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; NamedObjectsFacetAndHighlightQuery org.springframework.data.solr.core.NamedObjectsFacetAndHighlightQuery = new NamedObjectsFacetAndHighlightQuery ( org.springframework.data.solr.core.FacetAndHighlightQuery ) ; QueryResponse org.springframework.data.solr.core.QueryResponse = org.springframework.data.solr.core.QueryResponse ( java.lang.String , org.springframework.data.solr.core.NamedObjectsFacetAndHighlightQuery , java.lang.Class<T> , org.springframework.data.solr.core.RequestMethod ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.data.solr.core.NamedObjectsFacetAndHighlightQuery . getNamesAssociation ( ) ; return org.springframework.data.solr.core.SolrResultPage ( org.springframework.data.solr.core.FacetAndHighlightQuery , java.lang.Class<T> , org.springframework.data.solr.core.QueryResponse , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.solr.core.SolrResultPage<T> < T > org.springframework.data.solr.core.SolrResultPage<T> ( Query org.springframework.data.solr.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , QueryResponse org.springframework.data.solr.core.QueryResponse , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.List<T> < T > java.util.List<T> = java.util.List ( org.springframework.data.solr.core.QueryResponse , java.lang.Class<T> ) ; SolrDocumentList org.springframework.data.solr.core.SolrDocumentList = org.springframework.data.solr.core.QueryResponse . getResults ( ) ; long long = org.springframework.data.solr.core.SolrDocumentList == null ? NUMBER : org.springframework.data.solr.core.SolrDocumentList . getNumFound ( ) ; java.lang.Float java.lang.Float = org.springframework.data.solr.core.SolrDocumentList == null ? null : org.springframework.data.solr.core.SolrDocumentList . getMaxScore ( ) ; Pageable org.springframework.data.solr.core.Pageable = org.springframework.data.solr.core.Query . getPageRequest ( ) ; SolrResultPage < T > org.springframework.data.solr.core.SolrResultPage<T> = new SolrResultPage <> ( java.util.List<T> , org.springframework.data.solr.core.Pageable , long , java.lang.Float ) ; org.springframework.data.solr.core.SolrResultPage<T> . setFieldStatsResults ( ResultHelper . convertFieldStatsInfoToFieldStatsResultMap ( org.springframework.data.solr.core.QueryResponse . getFieldStatsInfo ( ) ) ) ; org.springframework.data.solr.core.SolrResultPage<T> . setGroupResults ( ResultHelper . convertGroupQueryResponseToGroupResultMap ( org.springframework.data.solr.core.Query , java.util.Map<java.lang.String,java.lang.Object> , org.springframework.data.solr.core.QueryResponse , this , java.lang.Class<T> ) ) ; if ( org.springframework.data.solr.core.Query instanceof HighlightQuery ) { ResultHelper . convertAndAddHighlightQueryResponseToResultPage ( org.springframework.data.solr.core.QueryResponse , org.springframework.data.solr.core.SolrResultPage<T> ) ; } if ( org.springframework.data.solr.core.Query instanceof FacetQuery ) { org.springframework.data.solr.core.SolrResultPage<T> . setFacetQueryResultPage ( ResultHelper . convertFacetQueryResponseToFacetQueryResult ( ( FacetQuery ) org.springframework.data.solr.core.Query , org.springframework.data.solr.core.QueryResponse ) ) ; org.springframework.data.solr.core.SolrResultPage<T> . addAllFacetFieldResultPages ( ResultHelper . convertFacetQueryResponseToFacetPageMap ( ( FacetQuery ) org.springframework.data.solr.core.Query , org.springframework.data.solr.core.QueryResponse ) ) ; org.springframework.data.solr.core.SolrResultPage<T> . addAllFacetPivotFieldResult ( ResultHelper . convertFacetQueryResponseToFacetPivotMap ( ( FacetQuery ) org.springframework.data.solr.core.Query , org.springframework.data.solr.core.QueryResponse ) ) ; org.springframework.data.solr.core.SolrResultPage<T> . addAllRangeFacetFieldResultPages ( ResultHelper . convertFacetQueryResponseToRangeFacetPageMap ( ( FacetQuery ) org.springframework.data.solr.core.Query , org.springframework.data.solr.core.QueryResponse ) ) ; } if ( org.springframework.data.solr.core.Query . getSpellcheckOptions ( ) != null ) { java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.Alternative>> < java.lang.String , java.util.List<org.springframework.data.solr.core.Alternative> < Alternative > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.Alternative>> = ResultHelper . extreactSuggestions ( org.springframework.data.solr.core.QueryResponse ) ; for ( java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.solr.core.Alternative>> < java.lang.String , java.util.List<org.springframework.data.solr.core.Alternative> < Alternative > > java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.solr.core.Alternative>> : java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.Alternative>> . entrySet ( ) ) { org.springframework.data.solr.core.SolrResultPage<T> . addSuggestions ( java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.solr.core.Alternative>> . getKey ( ) , java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.solr.core.Alternative>> . getValue ( ) ) ; } } return org.springframework.data.solr.core.SolrResultPage<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.TermsPage org.springframework.data.solr.core.TermsPage ( TermsQuery org.springframework.data.solr.core.TermsQuery ) { return org.springframework.data.solr.core.TermsPage ( org.springframework.data.solr.core.TermsQuery , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.TermsPage org.springframework.data.solr.core.TermsPage ( java.lang.String java.lang.String , TermsQuery org.springframework.data.solr.core.TermsQuery ) { return org.springframework.data.solr.core.TermsPage ( java.lang.String , org.springframework.data.solr.core.TermsQuery , org.springframework.data.solr.core.RequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.TermsPage org.springframework.data.solr.core.TermsPage ( TermsQuery org.springframework.data.solr.core.TermsQuery , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( org.springframework.data.solr.core.TermsQuery , STRING ) ; QueryResponse org.springframework.data.solr.core.QueryResponse = org.springframework.data.solr.core.QueryResponse ( null , org.springframework.data.solr.core.TermsQuery , null , org.springframework.data.solr.core.RequestMethod ) ; TermsResultPage org.springframework.data.solr.core.TermsResultPage = new TermsResultPage ( ) ; org.springframework.data.solr.core.TermsResultPage . addAllTerms ( ResultHelper . convertTermsQueryResponseToTermsMap ( org.springframework.data.solr.core.QueryResponse ) ) ; return org.springframework.data.solr.core.TermsResultPage ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.TermsPage org.springframework.data.solr.core.TermsPage ( java.lang.String java.lang.String , TermsQuery org.springframework.data.solr.core.TermsQuery , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.TermsQuery , STRING ) ; QueryResponse org.springframework.data.solr.core.QueryResponse = org.springframework.data.solr.core.QueryResponse ( java.lang.String , org.springframework.data.solr.core.TermsQuery , null , org.springframework.data.solr.core.RequestMethod ) ; TermsResultPage org.springframework.data.solr.core.TermsResultPage = new TermsResultPage ( ) ; org.springframework.data.solr.core.TermsResultPage . addAllTerms ( ResultHelper . convertTermsQueryResponseToTermsMap ( org.springframework.data.solr.core.QueryResponse ) ) ; return org.springframework.data.solr.core.TermsResultPage ; }  <METHOD_END>
<METHOD_START> final org.springframework.data.solr.core.QueryResponse org.springframework.data.solr.core.QueryResponse ( SolrDataQuery org.springframework.data.solr.core.SolrDataQuery , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.solr.core.QueryResponse ( org.springframework.data.solr.core.SolrDataQuery , java.lang.Class<> , org.springframework.data.solr.core.RequestMethod ) ; }  <METHOD_END>
<METHOD_START> final org.springframework.data.solr.core.QueryResponse org.springframework.data.solr.core.QueryResponse ( SolrDataQuery org.springframework.data.solr.core.SolrDataQuery , java.lang.Class<?> < ? > java.lang.Class<?> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { return org.springframework.data.solr.core.QueryResponse ( null , org.springframework.data.solr.core.SolrDataQuery , java.lang.Class<> , org.springframework.data.solr.core.RequestMethod ) ; }  <METHOD_END>
<METHOD_START> final org.springframework.data.solr.core.QueryResponse org.springframework.data.solr.core.QueryResponse ( java.lang.String java.lang.String , SolrDataQuery org.springframework.data.solr.core.SolrDataQuery , java.lang.Class<?> < ? > java.lang.Class<?> , RequestMethod org.springframework.data.solr.core.RequestMethod ) { Assert . notNull ( org.springframework.data.solr.core.SolrDataQuery , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.RequestMethod , STRING ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.QueryParsers . getForClass ( org.springframework.data.solr.core.SolrDataQuery . getClass ( ) ) . constructSolrQuery ( org.springframework.data.solr.core.SolrDataQuery ) ; if ( java.lang.Class<> != null ) { SolrPersistentEntity < ? > org.springframework.data.solr.core.SolrPersistentEntity<?> = org.springframework.data.solr.core.MappingContext<,org.springframework.data.solr.core.SolrPersistentProperty> . getPersistentEntity ( java.lang.Class<> ) . orElseThrow ( ( ) new IllegalArgumentException ( STRING ) ) ; if ( org.springframework.data.solr.core.SolrPersistentEntity<> . hasScoreProperty ( ) ) { org.springframework.data.solr.core.SolrQuery . setIncludeScore ( true ) ; } } org.springframework.data.solr.core.Logger . debug ( STRING + org.springframework.data.solr.core.SolrQuery + STRING ) ; return org.springframework.data.solr.core.QueryResponse ( java.lang.String , org.springframework.data.solr.core.SolrQuery , SolrRequest.METHOD ( org.springframework.data.solr.core.RequestMethod ) ) ; }  <METHOD_END>
<METHOD_START> final org.springframework.data.solr.core.QueryResponse org.springframework.data.solr.core.QueryResponse ( final SolrQuery org.springframework.data.solr.core.SolrQuery , final SolrRequest . SolrRequest SolrRequest.METHOD ) { return org.springframework.data.solr.core.QueryResponse ( null , org.springframework.data.solr.core.SolrQuery , SolrRequest.METHOD ) ; }  <METHOD_END>
<METHOD_START> final org.springframework.data.solr.core.QueryResponse org.springframework.data.solr.core.QueryResponse ( java.lang.String java.lang.String , final SolrQuery org.springframework.data.solr.core.SolrQuery , final SolrRequest . SolrRequest SolrRequest.METHOD ) { return T ( solrServer -> solrServer . query ( collection , solrQuery , method ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.lang.Object ( SolrClient :: commit ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { T ( solrClient -> solrClient . commit ( collection ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { T ( solrClient -> solrClient . commit ( true , true , true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { T ( solrClient -> solrClient . commit ( collection , true , true , true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.lang.Object ( SolrClient :: rollback ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { java.lang.Object ( SolrClient :: rollback ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.SolrInputDocument org.springframework.data.solr.core.SolrInputDocument ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof SolrInputDocument ) { return ( SolrInputDocument ) java.lang.Object ; } SolrInputDocument org.springframework.data.solr.core.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.SolrConverter ( ) . write ( java.lang.Object , org.springframework.data.solr.core.SolrInputDocument ) ; return org.springframework.data.solr.core.SolrInputDocument ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( final java.lang.String java.lang.String ) { return org.springframework.data.solr.core.SchemaOperations ( java.lang.String ) . getSchemaName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > org.springframework.data.solr.core.Cursor<T> < T > org.springframework.data.solr.core.Cursor<T> ( Query org.springframework.data.solr.core.Query , final java.lang.Class<T> < T > java.lang.Class<T> ) { return new DelegatingCursor < T > ( org.springframework.data.solr.core.QueryParsers . getForClass ( org.springframework.data.solr.core.Query . getClass ( ) ) . constructSolrQuery ( org.springframework.data.solr.core.Query ) ) { @ java.lang.Override protected org . springframework . data . solr . core . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query < T > doLoad ( SolrQuery org.springframework.data.solr.core.SolrQuery ) { QueryResponse org.springframework.data.solr.core.QueryResponse = org.springframework.data.solr.core.QueryResponse ( org.springframework.data.solr.core.SolrQuery , SolrRequest.METHOD ( org.springframework.data.solr.core.RequestMethod ( ) ) ) ; if ( org.springframework.data.solr.core.QueryResponse == null ) { return new PartialResult <> ( STRING , java.util.Collections .< T > java.util.List<T> ( ) ) ; } return new PartialResult <> ( org.springframework.data.solr.core.QueryResponse . getNextCursorMark ( ) , java.util.List ( org.springframework.data.solr.core.QueryResponse , java.lang.Class<T> ) ) ; } } . open ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org . springframework . data . solr . core . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query < T > doLoad ( SolrQuery org.springframework.data.solr.core.SolrQuery ) { QueryResponse org.springframework.data.solr.core.QueryResponse = org.springframework.data.solr.core.QueryResponse ( org.springframework.data.solr.core.SolrQuery , SolrRequest.METHOD ( org.springframework.data.solr.core.RequestMethod ( ) ) ) ; if ( org.springframework.data.solr.core.QueryResponse == null ) { return new PartialResult <> ( STRING , java.util.Collections .< T > java.util.List<T> ( ) ) ; } return new PartialResult <> ( org.springframework.data.solr.core.QueryResponse . getNextCursorMark ( ) , java.util.List ( org.springframework.data.solr.core.QueryResponse , java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.solr.core.Cursor<T> < T > org.springframework.data.solr.core.Cursor<T> ( java.lang.String java.lang.String , Query org.springframework.data.solr.core.Query , final java.lang.Class<T> < T > java.lang.Class<T> ) { return new DelegatingCursor < T > ( org.springframework.data.solr.core.QueryParsers . getForClass ( org.springframework.data.solr.core.Query . getClass ( ) ) . constructSolrQuery ( org.springframework.data.solr.core.Query ) ) { @ java.lang.Override protected org . springframework . data . solr . core . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query < T > doLoad ( SolrQuery org.springframework.data.solr.core.SolrQuery ) { QueryResponse org.springframework.data.solr.core.QueryResponse = org.springframework.data.solr.core.QueryResponse ( java.lang.String , org.springframework.data.solr.core.SolrQuery , SolrRequest.METHOD ( org.springframework.data.solr.core.RequestMethod ( ) ) ) ; if ( org.springframework.data.solr.core.QueryResponse == null ) { return new PartialResult <> ( STRING , java.util.Collections .< T > java.util.List<T> ( ) ) ; } return new PartialResult <> ( org.springframework.data.solr.core.QueryResponse . getNextCursorMark ( ) , java.util.List ( org.springframework.data.solr.core.QueryResponse , java.lang.Class<T> ) ) ; } } . open ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org . springframework . data . solr . core . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query < T > doLoad ( SolrQuery org.springframework.data.solr.core.SolrQuery ) { QueryResponse org.springframework.data.solr.core.QueryResponse = org.springframework.data.solr.core.QueryResponse ( java.lang.String , org.springframework.data.solr.core.SolrQuery , SolrRequest.METHOD ( org.springframework.data.solr.core.RequestMethod ( ) ) ) ; if ( org.springframework.data.solr.core.QueryResponse == null ) { return new PartialResult <> ( STRING , java.util.Collections .< T > java.util.List<T> ( ) ) ; } return new PartialResult <> ( org.springframework.data.solr.core.QueryResponse . getNextCursorMark ( ) , java.util.List ( org.springframework.data.solr.core.QueryResponse , java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Collection<T> < T > java.util.Collection<T> ( final java.util.Collection<? extends java.io.Serializable> < ? extends java.io.Serializable > java.util.Collection<? extends java.io.Serializable> , final java.lang.Class<T> < T > java.lang.Class<T> ) { if ( CollectionUtils . isEmpty ( java.util.Collection<> ) ) { return java.util.Collections . java.util.List<T> ( ) ; } return T ( solrClient -> convertSolrDocumentListToBeans ( solrClient . getById ( ids . stream ( ) . map ( Object :: toString ) . collect ( Collectors . toList ( ) ) ) , clazz ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Collection<T> < T > java.util.Collection<T> ( java.lang.String java.lang.String , final java.util.Collection<? extends java.io.Serializable> < ? extends java.io.Serializable > java.util.Collection<? extends java.io.Serializable> , final java.lang.Class<T> < T > java.lang.Class<T> ) { if ( CollectionUtils . isEmpty ( java.util.Collection<> ) ) { return java.util.Collections . java.util.List<T> ( ) ; } return T ( solrClient -> convertSolrDocumentListToBeans ( solrClient . getById ( collection , ids . stream ( ) . map ( Object :: toString ) . collect ( Collectors . toList ( ) ) ) , clazz ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.io.Serializable java.io.Serializable , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( java.io.Serializable , STRING ) ; java.util.Collection<T> < T > java.util.Collection<T> = java.util.Collection<T> ( java.util.Collections . java.util.List<java.io.Serializable> ( java.io.Serializable ) , java.lang.Class<T> ) ; if ( java.util.Collection<T> . boolean ( ) ) { return null ; } return java.util.Collection<T> . java.util.Iterator<T> ( ) . T ( ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( java.lang.String java.lang.String , java.io.Serializable java.io.Serializable , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.io.Serializable , STRING ) ; java.util.Collection<T> < T > java.util.Collection<T> = java.util.Collection<T> ( java.lang.String , java.util.Collections . java.util.List<java.io.Serializable> ( java.io.Serializable ) , java.lang.Class<T> ) ; if ( java.util.Collection<T> . boolean ( ) ) { return null ; } return java.util.Collection<T> . java.util.Iterator<T> ( ) . T ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.SchemaOperations org.springframework.data.solr.core.SchemaOperations ( java.lang.String java.lang.String ) { return new DefaultSchemaOperations ( java.lang.String , this ) ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.data.solr.core.SolrInputDocument> < SolrInputDocument > java.util.Collection<org.springframework.data.solr.core.SolrInputDocument> ( java.lang.Iterable<?> < ? > java.lang.Iterable<?> ) { if ( java.lang.Iterable<> == null ) { return java.util.Collections . java.util.List<org.springframework.data.solr.core.SolrInputDocument> ( ) ; } java.util.List<org.springframework.data.solr.core.SolrInputDocument> < SolrInputDocument > java.util.List<org.springframework.data.solr.core.SolrInputDocument> = new java.util.ArrayList<org.springframework.data.solr.core.SolrInputDocument> <> ( ) ; for ( java.lang.Object java.lang.Object : java.lang.Iterable<> ) { java.util.List<org.springframework.data.solr.core.SolrInputDocument> . add ( org.springframework.data.solr.core.SolrInputDocument ( java.lang.Object ) ) ; } return java.util.List<org.springframework.data.solr.core.SolrInputDocument> ; }  <METHOD_END>
<METHOD_START> public < T > java.util.List<T> < T > java.util.List<T> ( QueryResponse org.springframework.data.solr.core.QueryResponse , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.solr.core.QueryResponse != null ? java.util.List ( org.springframework.data.solr.core.QueryResponse . getResults ( ) , java.lang.Class<T> ) : java.util.Collections .< T > java.util.List<T> ( ) ; }  <METHOD_END>
<METHOD_START> public < T > java.util.List<T> < T > java.util.List<T> ( SolrDocumentList org.springframework.data.solr.core.SolrDocumentList , java.lang.Class<T> < T > java.lang.Class<T> ) { if ( org.springframework.data.solr.core.SolrDocumentList == null ) { return java.util.Collections .< T > java.util.List<T> ( ) ; } return org.springframework.data.solr.core.SolrConverter ( ) . read ( org.springframework.data.solr.core.SolrDocumentList , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( SolrDocument org.springframework.data.solr.core.SolrDocument , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.solr.core.SolrConverter ( ) . read ( java.lang.Class<T> , org.springframework.data.solr.core.SolrDocument ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object ) { if ( null != java.lang.Object && ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) || java.util.List<java.lang.String> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.core.SolrConverter org.springframework.data.solr.core.SolrConverter ( ) { MappingSolrConverter org.springframework.data.solr.core.MappingSolrConverter = new MappingSolrConverter ( this . org.springframework.data.solr.core.MappingContext<,org.springframework.data.solr.core.SolrPersistentProperty> ) ; org.springframework.data.solr.core.MappingSolrConverter . afterPropertiesSet ( ) ; return org.springframework.data.solr.core.MappingSolrConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.data.solr.core.SolrClient org.springframework.data.solr.core.SolrClient ( ) { return org.springframework.data.solr.core.SolrClientFactory . getSolrClient ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.SolrConverter org.springframework.data.solr.core.SolrConverter ( ) { return this . org.springframework.data.solr.core.SolrConverter ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.solr.core.PersistenceExceptionTranslator org.springframework.data.solr.core.PersistenceExceptionTranslator ( ) { return org.springframework.data.solr.core.PersistenceExceptionTranslator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.data.solr.core.ApplicationContext ) { this . org.springframework.data.solr.core.ApplicationContext = org.springframework.data.solr.core.ApplicationContext ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<? extends org.springframework.data.solr.core.SolrDataQuery> < ? extends SolrDataQuery > java.lang.Class<? extends org.springframework.data.solr.core.SolrDataQuery> , QueryParser org.springframework.data.solr.core.QueryParser ) { this . org.springframework.data.solr.core.QueryParsers . registerParser ( java.lang.Class<> , org.springframework.data.solr.core.QueryParser ) ; }  <METHOD_END>
<METHOD_START> public void void ( SolrConverter org.springframework.data.solr.core.SolrConverter ) { this . org.springframework.data.solr.core.SolrConverter = org.springframework.data.solr.core.SolrConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.data.solr.core.MappingContext<,org.springframework.data.solr.core.SolrPersistentProperty> == null ) { this . org.springframework.data.solr.core.MappingContext<? extends org.springframework.data.solr.core.SolrPersistentEntity<?>,org.springframework.data.solr.core.SolrPersistentProperty> = new SimpleSolrMappingContext ( new SolrPersistentEntitySchemaCreator ( this . org.springframework.data.solr.core.SolrClientFactory ) . enable ( this . java.util.Set<org.springframework.data.solr.core.Feature> ) ) ; } if ( this . org.springframework.data.solr.core.SolrConverter == null ) { this . org.springframework.data.solr.core.SolrConverter = org.springframework.data.solr.core.SolrConverter ( ) ; } void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . org.springframework.data.solr.core.ApplicationContext != null && this . org.springframework.data.solr.core.ApplicationContext . getBeansOfType ( PersistenceExceptionTranslator .class ) . isEmpty ( ) ) { if ( this . org.springframework.data.solr.core.ApplicationContext instanceof ConfigurableApplicationContext ) { ( ( ConfigurableApplicationContext ) this . org.springframework.data.solr.core.ApplicationContext ) . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.data.solr.core.PersistenceExceptionTranslator ) ; } } }  <METHOD_END>
<METHOD_START> private SolrRequest . SolrRequest.METHOD SolrRequest.METHOD ( RequestMethod org.springframework.data.solr.core.RequestMethod ) { RequestMethod org.springframework.data.solr.core.RequestMethod = org.springframework.data.solr.core.RequestMethod != null ? org.springframework.data.solr.core.RequestMethod : org.springframework.data.solr.core.RequestMethod ( ) ; switch ( org.springframework.data.solr.core.RequestMethod ) { case GET : return SolrRequest . METHOD . GET ; case POST : return SolrRequest . METHOD . POST ; case PUT : return SolrRequest . METHOD . PUT ; } throw new java.lang.IllegalArgumentException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( MappingContext < ? extends SolrPersistentEntity < ? > , SolrPersistentProperty > org.springframework.data.solr.core.MappingContext<? extends org.springframework.data.solr.core.SolrPersistentEntity<?>,org.springframework.data.solr.core.SolrPersistentProperty> ) { this . org.springframework.data.solr.core.MappingContext<? extends org.springframework.data.solr.core.SolrPersistentEntity<?>,org.springframework.data.solr.core.SolrPersistentProperty> = org.springframework.data.solr.core.MappingContext<,org.springframework.data.solr.core.SolrPersistentProperty> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<org.springframework.data.solr.core.Feature> < Feature > java.util.Collection<org.springframework.data.solr.core.Feature> ) { this . java.util.Set<org.springframework.data.solr.core.Feature> = new java.util.HashSet <> ( java.util.Collection<org.springframework.data.solr.core.Feature> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.data.solr.core.Feature> < Feature > java.util.Set<org.springframework.data.solr.core.Feature> ( ) { if ( CollectionUtils . isEmpty ( this . java.util.Set<org.springframework.data.solr.core.Feature> ) ) { return java.util.Collections . java.util.Set<org.springframework.data.solr.core.Feature> ( ) ; } return java.util.Collections . java.util.Set<org.springframework.data.solr.core.Feature> ( this . java.util.Set<org.springframework.data.solr.core.Feature> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.RequestMethod org.springframework.data.solr.core.RequestMethod ( ) { return org.springframework.data.solr.core.RequestMethod ; }  <METHOD_END>
