<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager , TransactionAttributeSource [] org.springframework.transaction.interceptor.TransactionAttributeSource[] ) throws java.lang.Exception { TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor = new TransactionInterceptor ( ) ; org.springframework.transaction.interceptor.TransactionInterceptor . setTransactionManager ( org.springframework.transaction.interceptor.PlatformTransactionManager ) ; org.springframework.transaction.interceptor.TransactionInterceptor . setTransactionAttributeSources ( org.springframework.transaction.interceptor.TransactionAttributeSource[] ) ; ProxyFactory org.springframework.transaction.interceptor.ProxyFactory = new ProxyFactory ( java.lang.Object ) ; org.springframework.transaction.interceptor.ProxyFactory . addAdvice ( NUMBER , org.springframework.transaction.interceptor.TransactionInterceptor ) ; return org.springframework.transaction.interceptor.ProxyFactory . getProxy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager , TransactionAttributeSource org.springframework.transaction.interceptor.TransactionAttributeSource ) { TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor = new TransactionInterceptor ( ) ; org.springframework.transaction.interceptor.TransactionInterceptor . setTransactionManager ( org.springframework.transaction.interceptor.PlatformTransactionManager ) ; assertEquals ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.TransactionInterceptor . getTransactionManager ( ) ) ; org.springframework.transaction.interceptor.TransactionInterceptor . setTransactionAttributeSource ( org.springframework.transaction.interceptor.TransactionAttributeSource ) ; assertEquals ( org.springframework.transaction.interceptor.TransactionAttributeSource , org.springframework.transaction.interceptor.TransactionInterceptor . getTransactionAttributeSource ( ) ) ; ProxyFactory org.springframework.transaction.interceptor.ProxyFactory = new ProxyFactory ( java.lang.Object ) ; org.springframework.transaction.interceptor.ProxyFactory . addAdvice ( NUMBER , org.springframework.transaction.interceptor.TransactionInterceptor ) ; return org.springframework.transaction.interceptor.ProxyFactory . getProxy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor = new TransactionInterceptor ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.transaction.interceptor.TransactionInterceptor . setTransactionAttributes ( java.util.Properties ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = new org.springframework.transaction.interceptor.TransactionInterceptorTests.SerializableTransactionManager ( ) ; org.springframework.transaction.interceptor.TransactionInterceptor . setTransactionManager ( org.springframework.transaction.interceptor.PlatformTransactionManager ) ; org.springframework.transaction.interceptor.TransactionInterceptor = ( TransactionInterceptor ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.transaction.interceptor.TransactionInterceptor ) ; assertNotNull ( ti . logger ) ; assertTrue ( org.springframework.transaction.interceptor.TransactionInterceptor . getTransactionManager ( ) instanceof org.springframework.transaction.interceptor.TransactionInterceptorTests.SerializableTransactionManager ) ; assertNotNull ( org.springframework.transaction.interceptor.TransactionInterceptor . getTransactionAttributeSource ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { NameMatchTransactionAttributeSource org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource = new NameMatchTransactionAttributeSource ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource . setProperties ( java.util.Properties ) ; NameMatchTransactionAttributeSource org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource = new NameMatchTransactionAttributeSource ( ) ; java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource . setProperties ( java.util.Properties ) ; TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor = new TransactionInterceptor ( ) ; org.springframework.transaction.interceptor.TransactionInterceptor . setTransactionAttributeSources ( new TransactionAttributeSource [] { org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource , org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource } ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = new org.springframework.transaction.interceptor.TransactionInterceptorTests.SerializableTransactionManager ( ) ; org.springframework.transaction.interceptor.TransactionInterceptor . setTransactionManager ( org.springframework.transaction.interceptor.PlatformTransactionManager ) ; org.springframework.transaction.interceptor.TransactionInterceptor = ( TransactionInterceptor ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.transaction.interceptor.TransactionInterceptor ) ; assertTrue ( org.springframework.transaction.interceptor.TransactionInterceptor . getTransactionManager ( ) instanceof org.springframework.transaction.interceptor.TransactionInterceptorTests.SerializableTransactionManager ) ; assertTrue ( org.springframework.transaction.interceptor.TransactionInterceptor . getTransactionAttributeSource ( ) instanceof CompositeTransactionAttributeSource ) ; CompositeTransactionAttributeSource org.springframework.transaction.interceptor.CompositeTransactionAttributeSource = ( CompositeTransactionAttributeSource ) org.springframework.transaction.interceptor.TransactionInterceptor . getTransactionAttributeSource ( ) ; assertTrue ( org.springframework.transaction.interceptor.CompositeTransactionAttributeSource . getTransactionAttributeSources ( ) [ NUMBER ] instanceof NameMatchTransactionAttributeSource ) ; assertTrue ( org.springframework.transaction.interceptor.CompositeTransactionAttributeSource . getTransactionAttributeSources ( ) [ NUMBER ] instanceof NameMatchTransactionAttributeSource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = mock ( PlatformTransactionManager .class ) ; TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor = org.springframework.transaction.interceptor.TransactionInterceptor ( org.springframework.transaction.interceptor.PlatformTransactionManager , null ) ; assertSame ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.TransactionInterceptor . determineTransactionManager ( new DefaultTransactionAttribute ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = mock ( PlatformTransactionManager .class ) ; TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor = org.springframework.transaction.interceptor.TransactionInterceptor ( org.springframework.transaction.interceptor.PlatformTransactionManager , null ) ; assertSame ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.TransactionInterceptor . determineTransactionManager ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.transaction.interceptor.BeanFactory = mock ( BeanFactory .class ) ; TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor = org.springframework.transaction.interceptor.TransactionInterceptor ( org.springframework.transaction.interceptor.BeanFactory ) ; assertNull ( org.springframework.transaction.interceptor.TransactionInterceptor . determineTransactionManager ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.transaction.interceptor.BeanFactory = mock ( BeanFactory .class ) ; TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor = org.springframework.transaction.interceptor.TransactionInterceptor ( org.springframework.transaction.interceptor.BeanFactory ) ; DefaultTransactionAttribute org.springframework.transaction.interceptor.DefaultTransactionAttribute = new DefaultTransactionAttribute ( ) ; org.springframework.transaction.interceptor.DefaultTransactionAttribute . setQualifier ( STRING ) ; org.springframework.transaction.interceptor.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; org.springframework.transaction.interceptor.ExpectedException . expectMessage ( STRING ) ; org.springframework.transaction.interceptor.TransactionInterceptor . determineTransactionManager ( org.springframework.transaction.interceptor.DefaultTransactionAttribute ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.transaction.interceptor.BeanFactory = mock ( BeanFactory .class ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = mock ( PlatformTransactionManager .class ) ; TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor = org.springframework.transaction.interceptor.TransactionInterceptor ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.BeanFactory ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = org.springframework.transaction.interceptor.PlatformTransactionManager ( org.springframework.transaction.interceptor.BeanFactory , STRING ) ; DefaultTransactionAttribute org.springframework.transaction.interceptor.DefaultTransactionAttribute = new DefaultTransactionAttribute ( ) ; org.springframework.transaction.interceptor.DefaultTransactionAttribute . setQualifier ( STRING ) ; assertSame ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.TransactionInterceptor . determineTransactionManager ( org.springframework.transaction.interceptor.DefaultTransactionAttribute ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.transaction.interceptor.BeanFactory = mock ( BeanFactory .class ) ; org.springframework.transaction.interceptor.PlatformTransactionManager ( org.springframework.transaction.interceptor.BeanFactory , STRING ) ; TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor = org.springframework.transaction.interceptor.TransactionInterceptor ( STRING , org.springframework.transaction.interceptor.BeanFactory ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = org.springframework.transaction.interceptor.PlatformTransactionManager ( org.springframework.transaction.interceptor.BeanFactory , STRING ) ; DefaultTransactionAttribute org.springframework.transaction.interceptor.DefaultTransactionAttribute = new DefaultTransactionAttribute ( ) ; org.springframework.transaction.interceptor.DefaultTransactionAttribute . setQualifier ( STRING ) ; assertSame ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.TransactionInterceptor . determineTransactionManager ( org.springframework.transaction.interceptor.DefaultTransactionAttribute ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.transaction.interceptor.BeanFactory = mock ( BeanFactory .class ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = org.springframework.transaction.interceptor.PlatformTransactionManager ( org.springframework.transaction.interceptor.BeanFactory , STRING ) ; TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor = org.springframework.transaction.interceptor.TransactionInterceptor ( STRING , org.springframework.transaction.interceptor.BeanFactory ) ; DefaultTransactionAttribute org.springframework.transaction.interceptor.DefaultTransactionAttribute = new DefaultTransactionAttribute ( ) ; org.springframework.transaction.interceptor.DefaultTransactionAttribute . setQualifier ( STRING ) ; assertSame ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.TransactionInterceptor . determineTransactionManager ( org.springframework.transaction.interceptor.DefaultTransactionAttribute ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.transaction.interceptor.BeanFactory = mock ( BeanFactory .class ) ; TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor = org.springframework.transaction.interceptor.TransactionInterceptor ( org.springframework.transaction.interceptor.BeanFactory ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = org.springframework.transaction.interceptor.PlatformTransactionManager ( org.springframework.transaction.interceptor.BeanFactory , STRING ) ; DefaultTransactionAttribute org.springframework.transaction.interceptor.DefaultTransactionAttribute = new DefaultTransactionAttribute ( ) ; org.springframework.transaction.interceptor.DefaultTransactionAttribute . setQualifier ( STRING ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = org.springframework.transaction.interceptor.TransactionInterceptor . determineTransactionManager ( org.springframework.transaction.interceptor.DefaultTransactionAttribute ) ; assertSame ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.PlatformTransactionManager ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = org.springframework.transaction.interceptor.TransactionInterceptor . determineTransactionManager ( org.springframework.transaction.interceptor.DefaultTransactionAttribute ) ; assertSame ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.PlatformTransactionManager ) ; verify ( org.springframework.transaction.interceptor.BeanFactory , times ( NUMBER ) ) . containsBean ( STRING ) ; verify ( org.springframework.transaction.interceptor.BeanFactory , times ( NUMBER ) ) . getBean ( STRING , PlatformTransactionManager .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.transaction.interceptor.BeanFactory = mock ( BeanFactory .class ) ; TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor = org.springframework.transaction.interceptor.TransactionInterceptor ( STRING , org.springframework.transaction.interceptor.BeanFactory ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = org.springframework.transaction.interceptor.PlatformTransactionManager ( org.springframework.transaction.interceptor.BeanFactory , STRING ) ; DefaultTransactionAttribute org.springframework.transaction.interceptor.DefaultTransactionAttribute = new DefaultTransactionAttribute ( ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = org.springframework.transaction.interceptor.TransactionInterceptor . determineTransactionManager ( org.springframework.transaction.interceptor.DefaultTransactionAttribute ) ; assertSame ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.PlatformTransactionManager ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = org.springframework.transaction.interceptor.TransactionInterceptor . determineTransactionManager ( org.springframework.transaction.interceptor.DefaultTransactionAttribute ) ; assertSame ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.PlatformTransactionManager ) ; verify ( org.springframework.transaction.interceptor.BeanFactory , times ( NUMBER ) ) . getBean ( STRING , PlatformTransactionManager .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.transaction.interceptor.BeanFactory = mock ( BeanFactory .class ) ; TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor = org.springframework.transaction.interceptor.TransactionInterceptor ( org.springframework.transaction.interceptor.BeanFactory ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = mock ( PlatformTransactionManager .class ) ; given ( org.springframework.transaction.interceptor.BeanFactory . getBean ( PlatformTransactionManager .class ) ) . willReturn ( org.springframework.transaction.interceptor.PlatformTransactionManager ) ; DefaultTransactionAttribute org.springframework.transaction.interceptor.DefaultTransactionAttribute = new DefaultTransactionAttribute ( ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = org.springframework.transaction.interceptor.TransactionInterceptor . determineTransactionManager ( org.springframework.transaction.interceptor.DefaultTransactionAttribute ) ; assertSame ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.PlatformTransactionManager ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = org.springframework.transaction.interceptor.TransactionInterceptor . determineTransactionManager ( org.springframework.transaction.interceptor.DefaultTransactionAttribute ) ; assertSame ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.PlatformTransactionManager ) ; verify ( org.springframework.transaction.interceptor.BeanFactory , times ( NUMBER ) ) . getBean ( PlatformTransactionManager .class ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.transaction.interceptor.TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor ( BeanFactory org.springframework.transaction.interceptor.BeanFactory , java.lang.String java.lang.String , PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager ) { TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor = new TransactionInterceptor ( ) ; if ( org.springframework.transaction.interceptor.BeanFactory != null ) { org.springframework.transaction.interceptor.TransactionInterceptor . setBeanFactory ( org.springframework.transaction.interceptor.BeanFactory ) ; } if ( java.lang.String != null ) { org.springframework.transaction.interceptor.TransactionInterceptor . setTransactionManagerBeanName ( java.lang.String ) ; } if ( org.springframework.transaction.interceptor.PlatformTransactionManager != null ) { org.springframework.transaction.interceptor.TransactionInterceptor . setTransactionManager ( org.springframework.transaction.interceptor.PlatformTransactionManager ) ; } org.springframework.transaction.interceptor.TransactionInterceptor . setTransactionAttributeSource ( new NameMatchTransactionAttributeSource ( ) ) ; org.springframework.transaction.interceptor.TransactionInterceptor . afterPropertiesSet ( ) ; return org.springframework.transaction.interceptor.TransactionInterceptor ; }  <METHOD_END>
<METHOD_START> private org.springframework.transaction.interceptor.TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor ( PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager , BeanFactory org.springframework.transaction.interceptor.BeanFactory ) { return org.springframework.transaction.interceptor.TransactionInterceptor ( org.springframework.transaction.interceptor.BeanFactory , null , org.springframework.transaction.interceptor.PlatformTransactionManager ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.transaction.interceptor.TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor ( java.lang.String java.lang.String , BeanFactory org.springframework.transaction.interceptor.BeanFactory ) { return org.springframework.transaction.interceptor.TransactionInterceptor ( org.springframework.transaction.interceptor.BeanFactory , java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.transaction.interceptor.TransactionInterceptor org.springframework.transaction.interceptor.TransactionInterceptor ( BeanFactory org.springframework.transaction.interceptor.BeanFactory ) { return org.springframework.transaction.interceptor.TransactionInterceptor ( org.springframework.transaction.interceptor.BeanFactory , null , null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.transaction.interceptor.PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager ( BeanFactory org.springframework.transaction.interceptor.BeanFactory , java.lang.String java.lang.String ) { PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = mock ( PlatformTransactionManager .class ) ; given ( org.springframework.transaction.interceptor.BeanFactory . containsBean ( java.lang.String ) ) . willReturn ( true ) ; given ( org.springframework.transaction.interceptor.BeanFactory . getBean ( java.lang.String , PlatformTransactionManager .class ) ) . willReturn ( org.springframework.transaction.interceptor.PlatformTransactionManager ) ; return org.springframework.transaction.interceptor.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.transaction.interceptor.TransactionStatus org.springframework.transaction.interceptor.TransactionStatus ( TransactionDefinition org.springframework.transaction.interceptor.TransactionDefinition ) throws org.springframework.transaction.interceptor.TransactionException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.transaction.interceptor.TransactionStatus ) throws org.springframework.transaction.interceptor.TransactionException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.transaction.interceptor.TransactionStatus ) throws org.springframework.transaction.interceptor.TransactionException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
