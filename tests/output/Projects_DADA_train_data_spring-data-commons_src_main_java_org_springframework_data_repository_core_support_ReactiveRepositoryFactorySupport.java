<METHOD_START> @ java.lang.Override protected void void ( RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata ) { if ( ! ReactiveWrappers . isAvailable ( ) ) { throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.repository.core.support.RepositoryMetadata . getRepositoryInterface ( ) . getName ( ) ) ) ; } if ( org.springframework.data.repository.core.support.ReactiveRepositoryFactorySupport.RxJavaOneConversionSetup . boolean ) { java.util.Arrays . java.util.stream.IntStream ( org.springframework.data.repository.core.support.RepositoryMetadata . getRepositoryInterface ( ) . getMethods ( ) ) . forEach ( org.springframework.data.repository.core.support.ReactiveRepositoryFactorySupport.RxJavaOneConversionSetup :: void ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.reflect.Method java.lang.reflect.Method ) { if ( ReactiveWrappers . supports ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) && ! ClassUtils . isAssignable ( Publisher .class , java.lang.reflect.Method . java.lang.Class<?> ( ) ) && ! ReactiveWrapperConverters . supports ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ) { throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( STRING , java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.String ( ) , java.lang.reflect.Method ) ) ; } java.util.Arrays . java.util.stream.Stream<java.lang.Class<?>> ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) . java.util.stream.Stream<java.lang.Class<?>> ( ReactiveWrappers :: supports ) . filter ( parameterType -> ! ClassUtils . isAssignable ( Publisher .class , parameterType ) ) . filter ( parameterType -> ! ReactiveWrapperConverters . supports ( parameterType ) ) . forEach ( parameterType -> { throw new InvalidDataAccessApiUsageException ( String . format ( STRING , parameterType . getName ( ) , method . getDeclaringClass ( ) . getName ( ) , method ) ) ; } ) ; }  <METHOD_END>
