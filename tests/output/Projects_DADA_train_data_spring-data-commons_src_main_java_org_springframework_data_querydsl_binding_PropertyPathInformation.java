<METHOD_START> public static org.springframework.data.querydsl.binding.PropertyPathInformation org.springframework.data.querydsl.binding.PropertyPathInformation ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.querydsl.binding.PropertyPathInformation . org.springframework.data.querydsl.binding.PropertyPathInformation ( PropertyPath . from ( java.lang.String , java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.querydsl.binding.PropertyPathInformation org.springframework.data.querydsl.binding.PropertyPathInformation ( java.lang.String java.lang.String , TypeInformation < ? > org.springframework.data.querydsl.binding.TypeInformation<?> ) { return org.springframework.data.querydsl.binding.PropertyPathInformation . org.springframework.data.querydsl.binding.PropertyPathInformation ( PropertyPath . from ( java.lang.String , org.springframework.data.querydsl.binding.TypeInformation<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.querydsl.binding.PropertyPath . getLeafProperty ( ) . getType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.querydsl.binding.PropertyPath . getLeafProperty ( ) . getOwningType ( ) . getType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.data.querydsl.binding.PropertyPath . getLeafProperty ( ) . getSegment ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.beans.PropertyDescriptor java.beans.PropertyDescriptor ( ) { return BeanUtils . getPropertyDescriptor ( java.lang.Class<?> ( ) , java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.data.querydsl.binding.PropertyPath . toDotPath ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.querydsl.binding.Path<?> < ? > org.springframework.data.querydsl.binding.Path<?> ( EntityPathResolver org.springframework.data.querydsl.binding.EntityPathResolver ) { return org.springframework.data.querydsl.binding.Path<?> ( org.springframework.data.querydsl.binding.EntityPathResolver , org.springframework.data.querydsl.binding.PropertyPath , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.querydsl.binding.Path<?> < ? > org.springframework.data.querydsl.binding.Path<?> ( EntityPathResolver org.springframework.data.querydsl.binding.EntityPathResolver , PropertyPath org.springframework.data.querydsl.binding.PropertyPath , java.util.Optional<org.springframework.data.querydsl.binding.Path<?>> < Path < ? > > java.util.Optional<org.springframework.data.querydsl.binding.Path<?>> ) { java.util.Optional<org.springframework.data.querydsl.binding.Path<?>> < Path < ? > > java.util.Optional<org.springframework.data.querydsl.binding.Path<?>> = java.util.Optional<org.springframework.data.querydsl.binding.Path<?>> . filter ( it -> it instanceof CollectionPathBase ) . map ( CollectionPathBase .class :: org.springframework.data.querydsl.binding.CollectionPathBase ) . map ( CollectionPathBase :: any ) . map ( Path .class :: org.springframework.data.querydsl.binding.Path ) . map ( it -> reifyPath ( resolver , path , Optional . of ( it ) ) ) ; return java.util.Optional<org.springframework.data.querydsl.binding.Path<?>> . orElseGet ( ( ) { Path < ? > entityPath = base . orElseGet ( ( ) resolver . createPath ( path . getOwningType ( ) . getType ( ) ) ) ; Field field = ReflectionUtils . findField ( entityPath . getClass ( ) , path . getSegment ( ) ) ; Object value = ReflectionUtils . getField ( field , entityPath ) ; if ( path . hasNext ( ) ) { return reifyPath ( resolver , path . next ( ) , Optional . of ( ( Path < ? > ) value ) ) ; } return ( Path < ? > ) value ; } ) ; }  <METHOD_END>
