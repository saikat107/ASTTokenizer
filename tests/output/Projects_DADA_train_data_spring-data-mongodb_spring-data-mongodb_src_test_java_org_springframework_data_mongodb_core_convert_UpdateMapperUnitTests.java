<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { this . org.springframework.data.mongodb.core.convert.Converter<org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity,org.springframework.data.mongodb.core.convert.Document> = Mockito . spy ( new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntityWriteConverter ( ) ) ; CustomConversions org.springframework.data.mongodb.core.convert.CustomConversions = new CustomConversions ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.convert.Converter<org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity,org.springframework.data.mongodb.core.convert.Document> ) ) ; this . org.springframework.data.mongodb.core.convert.MongoMappingContext = new MongoMappingContext ( ) ; this . org.springframework.data.mongodb.core.convert.MongoMappingContext . setSimpleTypeHolder ( org.springframework.data.mongodb.core.convert.CustomConversions . getSimpleTypeHolder ( ) ) ; this . org.springframework.data.mongodb.core.convert.MongoMappingContext . initialize ( ) ; this . org.springframework.data.mongodb.core.convert.MappingMongoConverter = new MappingMongoConverter ( new DefaultDbRefResolver ( org.springframework.data.mongodb.core.convert.MongoDbFactory ) , org.springframework.data.mongodb.core.convert.MongoMappingContext ) ; this . org.springframework.data.mongodb.core.convert.MappingMongoConverter . setCustomConversions ( org.springframework.data.mongodb.core.convert.CustomConversions ) ; this . org.springframework.data.mongodb.core.convert.MappingMongoConverter . afterPropertiesSet ( ) ; this . org.springframework.data.mongodb.core.convert.UpdateMapper = new UpdateMapper ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . push ( STRING , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ConcreteChildClass ( STRING , STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ParentClass .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertTypeHint ( org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ConcreteChildClass .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = Update . update ( STRING , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelImpl ( NUMBER ) ) ; UpdateMapper org.springframework.data.mongodb.core.convert.UpdateMapper = new UpdateMapper ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelWrapper .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = ( Document ) org.springframework.data.mongodb.core.convert.Document . get ( STRING ) ; assertTypeHint ( org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelImpl .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = Update . update ( STRING , NUMBER ) ; UpdateMapper org.springframework.data.mongodb.core.convert.UpdateMapper = new UpdateMapper ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelWrapper .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = Update . update ( STRING , null ) ; UpdateMapper org.springframework.data.mongodb.core.convert.UpdateMapper = new UpdateMapper ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelWrapper .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = Update . update ( STRING , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ConcreteChildClass ( STRING , STRING ) ) ; UpdateMapper org.springframework.data.mongodb.core.convert.UpdateMapper = new UpdateMapper ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ParentClass .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertTypeHint ( org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ConcreteChildClass .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = Update . update ( STRING , STRING ) . set ( STRING , STRING ) ; UpdateMapper org.springframework.data.mongodb.core.convert.UpdateMapper = new UpdateMapper ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ParentClass .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = Update . update ( STRING , STRING ) . set ( STRING , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ConcreteChildClass ( STRING , STRING ) ) ; UpdateMapper org.springframework.data.mongodb.core.convert.UpdateMapper = new UpdateMapper ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ParentClass .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( STRING ) ) ; assertTypeHint ( org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ConcreteChildClass .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . push ( STRING ) . each ( STRING , STRING , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Model .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = getAsDBList ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , nullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , nullValue ( ) ) ; assertThat ( java.util.List<java.lang.Object> , IsIterableContainingInOrder . contains ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . push ( STRING ) . each ( STRING , STRING , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Model .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , nullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . push ( STRING ) . each ( new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ListModel ( STRING , STRING , STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelWrapper .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = getAsDBList ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = getAsDBList ( ( Document ) java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , STRING ) ; assertThat ( java.util.List<java.lang.Object> , IsIterableContainingInOrder . contains ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . push ( STRING ) . each ( new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ListModel ( STRING , STRING , STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelWrapper .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; java.util.List<org.springframework.data.mongodb.core.convert.Document> < Document > java.util.List<org.springframework.data.mongodb.core.convert.Document> = getAsDBList ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertTypeHint ( java.util.List<org.springframework.data.mongodb.core.convert.Document> . get ( NUMBER ) , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ListModel .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . push ( STRING ) . each ( STRING , STRING ) . push ( STRING ) . each ( STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( java.lang.Object .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) . containsKey ( STRING ) , is ( true ) ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . push ( STRING ) . atPosition ( NUMBER ) . each ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( java.lang.Object .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( NUMBER ) ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . push ( STRING ) . atPosition ( Position . FIRST ) . each ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( java.lang.Object .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( NUMBER ) ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . push ( STRING ) . atPosition ( Position . LAST ) . each ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( java.lang.Object .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( false ) ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . push ( STRING ) . atPosition ( null ) . each ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( java.lang.Object .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( false ) ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . push ( STRING ) . slice ( NUMBER ) . each ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( java.lang.Object .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . push ( STRING ) . slice ( NUMBER ) . each ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) . push ( STRING ) . slice ( - NUMBER ) . each ( STRING , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( java.lang.Object .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( ( java.lang.Integer ) org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( ( java.lang.Integer ) org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( - NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . push ( STRING ) . sort ( Direction . DESC ) . each ( NUMBER , NUMBER , NUMBER ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ParentClass .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( ( java.lang.Integer ) org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( - NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . push ( STRING ) . sort ( new Sort ( new Order ( Direction . ASC , STRING ) , new Order ( Direction . ASC , STRING ) ) ) . each ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.EntityWithList .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( ( Document ) org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , equalTo ( new Document ( STRING , NUMBER ) . append ( STRING , NUMBER ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . push ( STRING ) . sort ( Direction . ASC ) . each ( STRING ) . push ( STRING ) . sort ( new Sort ( Direction . ASC , STRING ) ) . each ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( java.lang.Object .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( ( java.lang.Integer ) org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( ( Document ) org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , equalTo ( new Document ( STRING , NUMBER ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity> < org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity > java.util.List<org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity> = java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity> ( new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity ( STRING ) , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity ( STRING ) , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity ( STRING ) ) ; org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity [] org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity[] = new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity [ java.util.List<org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity> . int ( ) ] ; Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . pushAll ( STRING , java.util.List<org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity> . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity[] ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity[] ) ) ; org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.DomainEntity .class ) ) ; verify ( org.springframework.data.mongodb.core.convert.Converter<org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity,org.springframework.data.mongodb.core.convert.Document> , times ( NUMBER ) ) . convert ( Mockito . any ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . pull ( STRING , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.DocumentWithDBRefCollection .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( new DBRef ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Entity org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Entity = new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Entity ( ) ; org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Entity . java.lang.String = STRING ; Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . pull ( STRING , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Entity ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.DocumentWithDBRefCollection .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( new DBRef ( STRING , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Entity . java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MappingException .class ) public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . pull ( STRING , STRING ) ; org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.DocumentWithDBRefCollection .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . pull ( STRING , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Wrapper .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Entity org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Entity = new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Entity ( ) ; org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Entity . java.lang.String = STRING ; Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Entity ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.DocumentWithDBRefCollection .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( new DBRef ( STRING , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Entity . java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ParentClass .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) ; org.springframework.data.mongodb.core.convert.Update . pull ( STRING , new Document ( STRING , new Document ( STRING , org.springframework.data.mongodb.core.convert.MappingMongoConverter . convertToMongoType ( java.util.Arrays . java.util.List<java.lang.Long> ( NUMBER , NUMBER ) ) ) ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ParentClass .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = getAsDBList ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( java.util.List<java.lang.Object> , IsIterableContainingInOrder . contains ( NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . addToSet ( STRING ) . each ( STRING , STRING , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ListModel .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = getAsDBList ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( java.util.List<java.lang.Object> , IsIterableContainingInOrder . contains ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . addToSet ( STRING ) . each ( new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelImpl ( NUMBER ) , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelImpl ( NUMBER ) , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelImpl ( NUMBER ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelWrapper .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; java.util.List java.util.List = getAsDBList ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; for ( java.lang.Object java.lang.Object : java.util.List ) { assertTypeHint ( ( Document ) java.lang.Object , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelImpl .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.InterfaceDocumentDefinitionImpl ( STRING , STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.DocumentWithReferenceToInterfaceImpl .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.Document . get ( STRING ) ; DBRef org.springframework.data.mongodb.core.convert.DBRef = new DBRef ( STRING , STRING ) ; assertThat ( java.lang.Object , allOf ( instanceOf ( DBRef .class ) , IsEqual . equalTo ( org.springframework.data.mongodb.core.convert.DBRef ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . pull ( STRING , Query . query ( Criteria . where ( STRING ) . in ( STRING , STRING ) ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ParentClass .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = DocumentTestUtils . getAsDBList ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( java.util.List<java.lang.Object> , IsIterableContainingInOrder . contains ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . pull ( STRING , Query . query ( Criteria . where ( STRING ) . is ( STRING ) ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.DocumentWithDBRefCollection .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) ; org.springframework.data.mongodb.core.convert.Update . unset ( STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.DocumentWithDBRefCollection .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . addToSet ( STRING ) . each ( new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedDocument ( STRING ) , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedDocument ( STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.DocumentWithNestedCollection .class ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . notContaining ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . notContaining ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . addToSet ( STRING ) . each ( new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelImpl ( NUMBER ) , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelImpl ( NUMBER ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ListModelWrapper .class ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelImpl .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelImpl .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . addToSet ( STRING ) . each ( new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ConcreteChildClass ( STRING , STRING ) , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ConcreteChildClass ( STRING , STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ParentClass .class ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ConcreteChildClass .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ConcreteChildClass .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.WrapperAroundInterfaceType org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.WrapperAroundInterfaceType = new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.WrapperAroundInterfaceType ( ) ; org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.WrapperAroundInterfaceType . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Model = new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelImpl ( NUMBER ) ; Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . addToSet ( STRING ) . each ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.WrapperAroundInterfaceType ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.DomainTypeWithListOfConcreteTypesHavingSingleInterfaceTypeAttribute .class ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . notContaining ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelImpl .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ListModelWrapper org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ListModelWrapper = new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ListModelWrapper ( ) ; org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ListModelWrapper . java.util.List<org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Model> = java.util.Collections . java.util.List<org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Model> ( new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelImpl ( NUMBER ) ) ; Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ListModelWrapper ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.DomainTypeWrappingConcreteyTypeHavingListOfInterfaceTypeAttributes .class ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . notContaining ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ModelImpl .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedDocument ( STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.EntityWithObject .class ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedDocument .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedDocument ( STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.EntityWithObject .class ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . notContaining ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedDocument ( STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.EntityWithAliasedObject .class ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedDocument .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( STRING , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedDocument ( STRING ) ) ; Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , java.util.Map<java.lang.Object,java.lang.Object> ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.EntityWithObjectMap .class ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedDocument .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.Object,org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedDocument> < java.lang.Object , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedDocument > java.util.Map<java.lang.Object,org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedDocument> = java.util.Collections . java.util.Map<java.lang.Object,org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedDocument> ( STRING , new org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedDocument ( STRING ) ) ; Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , java.util.Map<java.lang.Object,org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedDocument> ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.EntityWithObjectMap .class ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . notContaining ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { CustomConversions org.springframework.data.mongodb.core.convert.CustomConversions = new CustomConversions ( java.util.Arrays . java.util.List<java.lang.Enum<?>> ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.AllocationToStringConverter . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.AllocationToStringConverter , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.StringToAllocationConverter . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.StringToAllocationConverter ) ) ; MongoMappingContext org.springframework.data.mongodb.core.convert.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.mongodb.core.convert.MongoMappingContext . setSimpleTypeHolder ( org.springframework.data.mongodb.core.convert.CustomConversions . getSimpleTypeHolder ( ) ) ; org.springframework.data.mongodb.core.convert.MongoMappingContext . afterPropertiesSet ( ) ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = new MappingMongoConverter ( mock ( DbRefResolver .class ) , org.springframework.data.mongodb.core.convert.MongoMappingContext ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . setCustomConversions ( org.springframework.data.mongodb.core.convert.CustomConversions ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . afterPropertiesSet ( ) ; UpdateMapper org.springframework.data.mongodb.core.convert.UpdateMapper = new UpdateMapper ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum .class ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , null ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ConcreteChildClass .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , null ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithJava8Date .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , null ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ListModel .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , null ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.EntityWithObject .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , new java.util.concurrent.atomic.AtomicInteger ( NUMBER ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.SimpleValueHolder .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , Is . is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , new java.util.concurrent.atomic.AtomicInteger ( NUMBER ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.SimpleValueHolder .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , Is . is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . min ( STRING , NUMBER ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.SimpleValueHolder .class ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , new Document ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . max ( STRING , NUMBER ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.SimpleValueHolder .class ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , isBsonObject ( ) . containing ( STRING , new Document ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { CustomConversions org.springframework.data.mongodb.core.convert.CustomConversions = new CustomConversions ( java.util.Arrays . java.util.List<java.lang.Enum<?>> ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.AllocationToStringConverter . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.AllocationToStringConverter , org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.StringToAllocationConverter . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.StringToAllocationConverter ) ) ; MongoMappingContext org.springframework.data.mongodb.core.convert.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.mongodb.core.convert.MongoMappingContext . setSimpleTypeHolder ( org.springframework.data.mongodb.core.convert.CustomConversions . getSimpleTypeHolder ( ) ) ; org.springframework.data.mongodb.core.convert.MongoMappingContext . afterPropertiesSet ( ) ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = new MappingMongoConverter ( mock ( DbRefResolver .class ) , org.springframework.data.mongodb.core.convert.MongoMappingContext ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . setCustomConversions ( org.springframework.data.mongodb.core.convert.CustomConversions ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . afterPropertiesSet ( ) ; UpdateMapper org.springframework.data.mongodb.core.convert.UpdateMapper = new UpdateMapper ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , java.util.Collections . java.util.Map<org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation,java.lang.Integer> ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation , NUMBER ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) , is ( true ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.Document . get ( STRING , Document .class ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( STRING , STRING ) . append ( STRING , new Document ( STRING , STRING ) . append ( STRING , STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.SimpleValueHolder .class ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( equalTo ( new Document ( STRING , STRING ) . append ( STRING , STRING ) . append ( STRING , STRING ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( STRING , STRING ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.SimpleValueHolder .class ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( STRING , new Document ( STRING , STRING ) ) . append ( STRING , new Document ( STRING , STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.SimpleValueHolder .class ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( equalTo ( new Document ( STRING , STRING ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , is ( equalTo ( new Document ( STRING , STRING ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.convert.Update = new Update ( ) . set ( STRING , java.util.Collections . java.util.Map<java.lang.Integer,java.lang.String> ( NUMBER , STRING ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.EntityWithObjectMap .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = getAsDocument ( getAsDocument ( org.springframework.data.mongodb.core.convert.Document , STRING ) , STRING ) ; for ( java.lang.Object java.lang.Object : org.springframework.data.mongodb.core.convert.Document . keySet ( ) ) { assertThat ( java.lang.Object , is ( instanceOf ( java.lang.String .class ) ) ) ; } }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.InterfaceDocumentDefinitionWithoutId org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.InterfaceDocumentDefinitionWithoutId ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.InterfaceDocumentDefinitionWithoutId org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.InterfaceDocumentDefinitionWithoutId ) { this . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.InterfaceDocumentDefinitionWithoutId = org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.InterfaceDocumentDefinitionWithoutId ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.InterfaceDocumentDefinitionWithoutId org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.InterfaceDocumentDefinitionWithoutId ( ) { return this . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.InterfaceDocumentDefinitionWithoutId ; }  <METHOD_END>
<METHOD_START> public void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Model org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Model ) { this . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Model = org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.Model ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String ... java.lang.String[] ) { this . java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.util.List<? extends org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.AbstractChildClass> < ? extends org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.AbstractChildClass > java.util.List<? extends org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.AbstractChildClass> ) { this . java.lang.String = java.lang.String ; this . java.util.List<? extends org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.AbstractChildClass> = java.util.List<> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.lang.String = STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( java.lang.String , java.lang.String ); }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity> < org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity > java.util.List<org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity> ( ) { return java.util.List<org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super(); this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.NestedEntity ) { return new Document ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super(); this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation ( java.lang.String java.lang.String ) { for ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation : org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation[] ( ) ) { if ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation . java.lang.String . boolean ( java.lang.String ) ) { return org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation ; } } throw new java.lang.IllegalArgumentException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation ) { return org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation ( java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation . org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.ClassWithEnum.Allocation ( java.lang.String ) ; }  <METHOD_END>
