<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.ClassLoader ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { return new org.springframework.context.support.ContextTypeMatchClassLoader.ContextOverridingClassLoader ( getParent ( ) ) . loadClass ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( java.lang.Class<> . java.lang.ClassLoader ( ) instanceof org.springframework.context.support.ContextTypeMatchClassLoader.ContextOverridingClassLoader ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.ClassLoader ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.String java.lang.String ) { if ( isExcluded ( java.lang.String ) || org.springframework.context.support.ContextTypeMatchClassLoader .this . isExcluded ( java.lang.String ) ) { return false ; } ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; java.lang.ClassLoader java.lang.ClassLoader = getParent ( ) ; while ( java.lang.ClassLoader != null ) { if ( ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.ClassLoader , java.lang.String ) != null ) { return false ; } java.lang.ClassLoader = java.lang.ClassLoader . java.lang.ClassLoader ( ) ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { byte [] byte[] = java.util.Map<java.lang.String,byte[]> . byte[] ( java.lang.String ) ; if ( byte[] == null ) { byte[] = loadBytesForClass ( java.lang.String ) ; if ( byte[] != null ) { java.util.Map<java.lang.String,byte[]> . byte[] ( java.lang.String , byte[] ) ; } else { return null ; } } return defineClass ( java.lang.String , byte[] , NUMBER , byte[] . int ) ; }  <METHOD_END>
