<METHOD_START> public static org.springframework.integration.test.mail.TestMailServer.SmtpServer org.springframework.integration.test.mail.TestMailServer.SmtpServer ( int int ) { try { return new org.springframework.integration.test.mail.TestMailServer.SmtpServer ( int ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.RuntimeException ( java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.test.mail.TestMailServer.Pop3Server org.springframework.integration.test.mail.TestMailServer.Pop3Server ( int int ) { try { return new org.springframework.integration.test.mail.TestMailServer.Pop3Server ( int ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.RuntimeException ( java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.test.mail.TestMailServer.ImapServer org.springframework.integration.test.mail.TestMailServer.ImapServer ( int int ) { try { return new org.springframework.integration.test.mail.TestMailServer.ImapServer ( int ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.RuntimeException ( java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> public void ( int int ) throws java.io.IOException { super( int ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.test.mail.TestMailServer.MailServer.MailHandler org.springframework.integration.test.mail.TestMailServer.MailServer.MailHandler ( java.net.Socket java.net.Socket ) { return new org.springframework.integration.test.mail.TestMailServer.SmtpServer.SmtpHandler ( java.net.Socket ) ; }  <METHOD_END>
<METHOD_START> public void ( java.net.Socket java.net.Socket ) { super( java.net.Socket ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( ) { try { void ( STRING ) ; while ( ! java.net.Socket . boolean ( ) ) { java.lang.String java.lang.String = java.io.BufferedReader . java.lang.String ( ) ; if ( java.lang.String == null ) { break; } if ( java.lang.String . boolean ( STRING ) ) { void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( ( new java.lang.String ( Base64Utils . decode ( java.lang.String . byte[] ( ) ) ) ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; void ( STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( ( new java.lang.String ( Base64Utils . decode ( java.lang.String . byte[] ( ) ) ) ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; void ( STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( STRING ) ; java.net.Socket . void ( ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } java.util.List<java.lang.String> . boolean ( java.lang.StringBuilder . java.lang.String ( ) ) ; } catch ( java.io.IOException java.io.IOException ) { java.io.IOException . void ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( int int ) throws java.io.IOException { super( int ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.test.mail.TestMailServer.MailServer.MailHandler org.springframework.integration.test.mail.TestMailServer.MailServer.MailHandler ( java.net.Socket java.net.Socket ) { return new org.springframework.integration.test.mail.TestMailServer.Pop3Server.Pop3Handler ( java.net.Socket ) ; }  <METHOD_END>
<METHOD_START> public void ( java.net.Socket java.net.Socket ) { super( java.net.Socket ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( ) { try { void ( STRING ) ; while ( ! java.net.Socket . boolean ( ) ) { java.lang.String java.lang.String = java.io.BufferedReader . java.lang.String ( ) ; if ( STRING . boolean ( java.lang.String ) ) { void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; } else if ( STRING . boolean ( java.lang.String ) ) { void ( STRING ) ; } else if ( STRING . boolean ( java.lang.String ) ) { void ( STRING ) ; } else if ( STRING . boolean ( java.lang.String ) ) { void ( STRING ) ; } else if ( STRING . boolean ( java.lang.String ) ) { void ( STRING ) ; } else if ( STRING . boolean ( java.lang.String ) ) { void ( STRING ) ; void ( java.lang.String ) ; void ( STRING ) ; } else if ( STRING . boolean ( java.lang.String ) ) { void ( STRING ) ; java.net.Socket . void ( ) ; } } } catch ( java.io.IOException java.io.IOException ) { java.io.IOException . void ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( int int ) throws java.io.IOException { super( int ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. void ( ) ; this . boolean = false ; this . boolean = false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.test.mail.TestMailServer.MailServer.MailHandler org.springframework.integration.test.mail.TestMailServer.MailServer.MailHandler ( java.net.Socket java.net.Socket ) { return new org.springframework.integration.test.mail.TestMailServer.ImapServer.ImapHandler ( java.net.Socket ) ; }  <METHOD_END>
<METHOD_START> public void ( java.net.Socket java.net.Socket ) { super( java.net.Socket ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( ) { try { void ( STRING ) ; java.lang.String java.lang.String = STRING ; while ( ! java.net.Socket . boolean ( ) ) { java.lang.String java.lang.String = java.io.BufferedReader . java.lang.String ( ) ; if ( java.lang.String == null ) { break; } java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( STRING ) + NUMBER ) ; if ( java.lang.String . boolean ( STRING ) ) { void ( STRING ) ; void ( java.lang.String + STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( java.lang.String + STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( STRING ) ; void ( java.lang.String + STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( STRING ) ; void ( java.lang.String + STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( STRING ) ; if ( ! boolean ) { void ( STRING ) ; void ( STRING ) ; } else { void ( STRING ) ; } void ( STRING ) ; void ( java.lang.String + STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( java.lang.String + STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( java.lang.String ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( java.lang.String ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ) ; void ( java.lang.String + STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( STRING + STRING ) ; void ( java.lang.String + STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( STRING ) ; void ( java.lang.String + STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( STRING ) ; void ( java.lang.String + STRING ) ; boolean = true ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( STRING ) ; void ( java.lang.String + STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( STRING + ( java.lang.String . int ( ) + NUMBER ) + STRING ) ; void ( java.lang.String ) ; void ( STRING ) ; void ( java.lang.String + STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( java.lang.String + STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( java.lang.String + STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( java.lang.String + STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( STRING ) ; java.lang.String = java.lang.String ; if ( ! boolean ) { try { java.lang.Thread . void ( NUMBER ) ; void ( STRING ) ; boolean = false ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } } boolean = true ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( java.lang.String + STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( java.lang.String + STRING ) ; this . java.net.Socket . void ( ) ; } } } catch ( java.io.IOException java.io.IOException ) { java.io.IOException . void ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws java.io.IOException { if ( boolean ) { void ( STRING ) ; } else { void ( STRING ) ; } void ( java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( int int ) throws java.io.IOException { this . java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( int ) ; this . boolean = true ; java.util.concurrent.ExecutorService . void ( this ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.net.ServerSocket . int ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.Set<java.lang.String> . void ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { return this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { while ( ! java.net.ServerSocket . boolean ( ) ) { java.net.Socket java.net.Socket = this . java.net.ServerSocket . java.net.Socket ( ) ; java.util.concurrent.ExecutorService . void ( org.springframework.integration.test.mail.TestMailServer.MailServer.MailHandler ( java.net.Socket ) ) ; } } catch ( java.io.IOException java.io.IOException ) { this . boolean = false ; } }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.integration.test.mail.TestMailServer.MailServer.MailHandler org.springframework.integration.test.mail.TestMailServer.MailServer.MailHandler ( java.net.Socket java.net.Socket );  <METHOD_END>
<METHOD_START> public void void ( ) { try { this . java.net.ServerSocket . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { java.io.IOException . void ( ) ; } this . java.util.concurrent.ExecutorService . java.util.List<java.lang.Runnable> ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.net.Socket java.net.Socket ) { this . java.net.Socket = java.net.Socket ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { this . java.io.BufferedReader = new java.io.BufferedReader ( new java.io.InputStreamReader ( this . java.net.Socket . java.io.InputStream ( ) ) ) ; this . java.io.BufferedWriter = new java.io.BufferedWriter ( new java.io.OutputStreamWriter ( this . java.net.Socket . java.io.OutputStream ( ) ) ) ; } catch ( java.io.IOException java.io.IOException ) { java.io.IOException . void ( ) ; } void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) throws java.io.IOException { this . java.io.BufferedWriter . void ( java.lang.String ) ; this . java.io.BufferedWriter . void ( STRING ) ; this . java.io.BufferedWriter . void ( ) ; }  <METHOD_END>
<METHOD_START> abstract void void ( )  <METHOD_END>
<METHOD_START> private void ( ) {	}  <METHOD_END>
