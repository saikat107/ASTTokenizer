<METHOD_START> @ Test public void void ( ) { void ( new RequestMethodsRequestCondition ( GET ) , GET ) ; void ( new RequestMethodsRequestCondition ( GET , POST ) , GET ) ; void ( new RequestMethodsRequestCondition ( GET ) , POST ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new RequestMethodsRequestCondition ( HEAD ) , HEAD ) ; void ( new RequestMethodsRequestCondition ( GET ) , GET ) ; void ( new RequestMethodsRequestCondition ( POST ) , HEAD ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestMethodsRequestCondition org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition = new RequestMethodsRequestCondition ( ) ; for ( RequestMethod org.springframework.web.servlet.mvc.condition.RequestMethod : RequestMethod . values ( ) ) { if ( ! OPTIONS . equals ( org.springframework.web.servlet.mvc.condition.RequestMethod ) ) { HttpServletRequest org.springframework.web.servlet.mvc.condition.HttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.mvc.condition.RequestMethod . name ( ) , STRING ) ; assertNotNull ( org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.HttpServletRequest ) ) ; } } void ( org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition , OPTIONS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpServletRequest org.springframework.web.servlet.mvc.condition.HttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; assertNotNull ( new RequestMethodsRequestCondition ( ) . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.HttpServletRequest ) ) ; assertNull ( new RequestMethodsRequestCondition ( GET , POST ) . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.HttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.condition.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.condition.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; assertNotNull ( new RequestMethodsRequestCondition ( ) . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; assertNotNull ( new RequestMethodsRequestCondition ( PUT ) . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; assertNull ( new RequestMethodsRequestCondition ( DELETE ) . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.condition.MockHttpServletRequest . setDispatcherType ( DispatcherType . ERROR ) ; RequestMethodsRequestCondition org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition = new RequestMethodsRequestCondition ( ) ; RequestMethodsRequestCondition org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition = org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition ) ; assertSame ( org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition , org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestMethodsRequestCondition org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition = new RequestMethodsRequestCondition ( GET , HEAD ) ; RequestMethodsRequestCondition org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition = new RequestMethodsRequestCondition ( POST ) ; RequestMethodsRequestCondition org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition = new RequestMethodsRequestCondition ( ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; int int = org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition . compareTo ( org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition , org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ; assertTrue ( STRING + int , int < NUMBER ) ; int = org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition . compareTo ( org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition , org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ; assertTrue ( STRING + int , int > NUMBER ) ; int = org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition . compareTo ( org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition , org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ; assertTrue ( STRING + int , int < NUMBER ) ; int = org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition . compareTo ( org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition , org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ; assertEquals ( STRING , NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestMethodsRequestCondition org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition = new RequestMethodsRequestCondition ( GET ) ; RequestMethodsRequestCondition org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition = new RequestMethodsRequestCondition ( POST ) ; RequestMethodsRequestCondition org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition = org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition . combine ( org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition . getContent ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( RequestMethodsRequestCondition org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition , RequestMethod org.springframework.web.servlet.mvc.condition.RequestMethod ) { MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.mvc.condition.RequestMethod . name ( ) , STRING ) ; RequestMethodsRequestCondition org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition = org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition ) ; assertEquals ( java.util.Collections . java.util.Set ( org.springframework.web.servlet.mvc.condition.RequestMethod ) , org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition . getContent ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( RequestMethodsRequestCondition org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition , RequestMethod org.springframework.web.servlet.mvc.condition.RequestMethod ) { MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.mvc.condition.RequestMethod . name ( ) , STRING ) ; assertNull ( org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; }  <METHOD_END>
