<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.boot.context.config.ApplicationEvent ) { if ( org.springframework.boot.context.config.ApplicationEvent instanceof ApplicationEnvironmentPreparedEvent ) { java.util.List<org.springframework.boot.context.config.ApplicationListener<org.springframework.boot.context.config.ApplicationEvent>> < ApplicationListener < ApplicationEvent > > java.util.List<org.springframework.boot.context.config.ApplicationListener<org.springframework.boot.context.config.ApplicationEvent>> = java.util.List<org.springframework.boot.context.config.ApplicationListener<org.springframework.boot.context.config.ApplicationEvent>> ( ( ( ApplicationEnvironmentPreparedEvent ) org.springframework.boot.context.config.ApplicationEvent ) . getEnvironment ( ) ) ; if ( java.util.List<org.springframework.boot.context.config.ApplicationListener<org.springframework.boot.context.config.ApplicationEvent>> . isEmpty ( ) ) { return; } this . org.springframework.boot.context.config.SimpleApplicationEventMulticaster = new SimpleApplicationEventMulticaster ( ) ; for ( ApplicationListener < ApplicationEvent > org.springframework.boot.context.config.ApplicationListener<org.springframework.boot.context.config.ApplicationEvent> : java.util.List<org.springframework.boot.context.config.ApplicationListener<org.springframework.boot.context.config.ApplicationEvent>> ) { this . org.springframework.boot.context.config.SimpleApplicationEventMulticaster . addApplicationListener ( org.springframework.boot.context.config.ApplicationListener<org.springframework.boot.context.config.ApplicationEvent> ) ; } } if ( this . org.springframework.boot.context.config.SimpleApplicationEventMulticaster != null ) { this . org.springframework.boot.context.config.SimpleApplicationEventMulticaster . multicastEvent ( org.springframework.boot.context.config.ApplicationEvent ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<org.springframework.boot.context.config.ApplicationListener<org.springframework.boot.context.config.ApplicationEvent>> < ApplicationListener < ApplicationEvent > > java.util.List<org.springframework.boot.context.config.ApplicationListener<org.springframework.boot.context.config.ApplicationEvent>> ( ConfigurableEnvironment org.springframework.boot.context.config.ConfigurableEnvironment ) { if ( org.springframework.boot.context.config.ConfigurableEnvironment == null ) { return java.util.Collections . java.util.List<org.springframework.boot.context.config.ApplicationListener<org.springframework.boot.context.config.ApplicationEvent>> ( ) ; } java.lang.String java.lang.String = org.springframework.boot.context.config.ConfigurableEnvironment . getProperty ( java.lang.String ) ; java.util.List<org.springframework.boot.context.config.ApplicationListener<org.springframework.boot.context.config.ApplicationEvent>> < ApplicationListener < ApplicationEvent > > java.util.List<org.springframework.boot.context.config.ApplicationListener<org.springframework.boot.context.config.ApplicationEvent>> = new java.util.ArrayList<org.springframework.boot.context.config.ApplicationListener<org.springframework.boot.context.config.ApplicationEvent>> <> ( ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { for ( java.lang.String java.lang.String : StringUtils . commaDelimitedListToSet ( java.lang.String ) ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.String , ClassUtils . getDefaultClassLoader ( ) ) ; Assert . isAssignable ( ApplicationListener .class , java.lang.Class<> , STRING + java.lang.String + STRING ) ; java.util.List<org.springframework.boot.context.config.ApplicationListener<org.springframework.boot.context.config.ApplicationEvent>> . add ( ( ApplicationListener < ApplicationEvent > ) BeanUtils . instantiateClass ( java.lang.Class<> ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new ApplicationContextException ( STRING + java.lang.String + STRING , java.lang.Exception ) ; } } } AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.boot.context.config.ApplicationListener<org.springframework.boot.context.config.ApplicationEvent>> ) ; return java.util.List<org.springframework.boot.context.config.ApplicationListener<org.springframework.boot.context.config.ApplicationEvent>> ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
