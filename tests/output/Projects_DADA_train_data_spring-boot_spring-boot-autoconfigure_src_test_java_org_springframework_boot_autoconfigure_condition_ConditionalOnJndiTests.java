<METHOD_START> @ Before public void void ( ) { this . java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; java.lang.Thread . java.lang.Thread ( ) . void ( new JndiPropertiesHidingClassLoader ( java.lang.Class<? extends org.springframework.boot.autoconfigure.condition.ConditionalOnJndiTests> ( ) . java.lang.ClassLoader ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { TestableInitialContextFactory . clearAll ( ) ; if ( this . java.lang.String != null ) { java.lang.System . java.lang.String ( javax.naming.Context . java.lang.String , this . java.lang.String ) ; } else { java.lang.System . java.lang.String ( javax.naming.Context . java.lang.String ) ; } if ( this . org.springframework.boot.autoconfigure.condition.ConfigurableApplicationContext != null ) { this . org.springframework.boot.autoconfigure.condition.ConfigurableApplicationContext . close ( ) ; } java.lang.Thread . java.lang.Thread ( ) . void ( this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnJndiTests.JndiAvailableConfiguration .class ) ; void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; void ( org.springframework.boot.autoconfigure.condition.ConditionalOnJndiTests.JndiAvailableConfiguration .class ) ; void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; void ( org.springframework.boot.autoconfigure.condition.ConditionalOnJndiTests.JndiConditionConfiguration .class ) ; void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; TestableInitialContextFactory . bind ( STRING , new java.lang.Object ( ) ) ; void ( org.springframework.boot.autoconfigure.condition.ConditionalOnJndiTests.JndiConditionConfiguration .class ) ; void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome = this . org.springframework.boot.autoconfigure.condition.ConditionalOnJndiTests.MockableOnJndi . getMatchOutcome ( null , org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ( STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionOutcome . isMatch ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.ConditionalOnJndiTests.MockableOnJndi . void ( STRING ) ; ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome = this . org.springframework.boot.autoconfigure.condition.ConditionalOnJndiTests.MockableOnJndi . getMatchOutcome ( null , org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ( STRING , STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionOutcome . isMatch ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { this . java.lang.String = java.lang.System . java.lang.String ( javax.naming.Context . java.lang.String ) ; java.lang.System . java.lang.String ( javax.naming.Context . java.lang.String , TestableInitialContextFactory .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { assertThat ( this . org.springframework.boot.autoconfigure.condition.ConfigurableApplicationContext . getBeansOfType ( java.lang.String .class ) ) . hasSize ( boolean ? NUMBER : NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnJndiTests.JndiConditionConfiguration .class ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.condition.ConfigurableApplicationContext = org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ( java.lang.String ... java.lang.String[] ) { AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata = mock ( AnnotatedTypeMetadata .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String[] ) ; given ( org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata . getAnnotationAttributes ( ConditionalOnJndi .class . java.lang.String ( ) ) ) . willReturn ( java.util.Map<java.lang.String,java.lang.Object> ) ; return org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.autoconfigure.condition.JndiLocator org.springframework.boot.autoconfigure.condition.JndiLocator ( java.lang.String [] java.lang.String[] ) { return new JndiLocator ( java.lang.String[] ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.boot.autoconfigure.condition.ConditionalOnJndiTests.MockableOnJndi .this . java.lang.String ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.boot.autoconfigure.condition.ConditionalOnJndiTests.MockableOnJndi .this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
