<METHOD_START> @ Before public void void ( ) { org.springframework.integration.aop.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.aop.DestinationResolver<org.springframework.integration.aop.MessageChannel> = new BeanFactoryChannelResolver ( org.springframework.integration.aop.DefaultListableBeanFactory ) ; org.springframework.integration.aop.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.aop.QueueChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PublisherMetadataSource org.springframework.integration.aop.PublisherMetadataSource = new org.springframework.integration.aop.MessagePublishingInterceptorTests.TestPublisherMetadataSource ( ) ; MessagePublishingInterceptor org.springframework.integration.aop.MessagePublishingInterceptor = new MessagePublishingInterceptor ( org.springframework.integration.aop.PublisherMetadataSource ) ; org.springframework.integration.aop.MessagePublishingInterceptor . setBeanFactory ( org.springframework.integration.aop.DefaultListableBeanFactory ) ; org.springframework.integration.aop.MessagePublishingInterceptor . setChannelResolver ( org.springframework.integration.aop.DestinationResolver<org.springframework.integration.aop.MessageChannel> ) ; ProxyFactory org.springframework.integration.aop.ProxyFactory = new ProxyFactory ( new org.springframework.integration.aop.MessagePublishingInterceptorTests.TestBeanImpl ( ) ) ; org.springframework.integration.aop.ProxyFactory . addAdvice ( org.springframework.integration.aop.MessagePublishingInterceptor ) ; org.springframework.integration.aop.MessagePublishingInterceptorTests.TestBean org.springframework.integration.aop.MessagePublishingInterceptorTests.TestBean = ( org.springframework.integration.aop.MessagePublishingInterceptorTests.TestBean ) org.springframework.integration.aop.ProxyFactory . getProxy ( ) ; org.springframework.integration.aop.MessagePublishingInterceptorTests.TestBean . java.lang.String ( ) ; Message < ? > org.springframework.integration.aop.Message<?> = org.springframework.integration.aop.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aop.Message<> ) ; assertEquals ( STRING , org.springframework.integration.aop.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; MethodNameMappingPublisherMetadataSource org.springframework.integration.aop.MethodNameMappingPublisherMetadataSource = new MethodNameMappingPublisherMetadataSource ( java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.integration.aop.MethodNameMappingPublisherMetadataSource . setChannelMap ( java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> . java.util.Map<java.lang.String,java.lang.String> ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.aop.MethodNameMappingPublisherMetadataSource . setHeaderExpressionMap ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> ) ; MessagePublishingInterceptor org.springframework.integration.aop.MessagePublishingInterceptor = new MessagePublishingInterceptor ( org.springframework.integration.aop.MethodNameMappingPublisherMetadataSource ) ; org.springframework.integration.aop.MessagePublishingInterceptor . setBeanFactory ( org.springframework.integration.aop.DefaultListableBeanFactory ) ; org.springframework.integration.aop.MessagePublishingInterceptor . setChannelResolver ( org.springframework.integration.aop.DestinationResolver<org.springframework.integration.aop.MessageChannel> ) ; ProxyFactory org.springframework.integration.aop.ProxyFactory = new ProxyFactory ( new org.springframework.integration.aop.MessagePublishingInterceptorTests.TestBeanImpl ( ) ) ; org.springframework.integration.aop.ProxyFactory . addAdvice ( org.springframework.integration.aop.MessagePublishingInterceptor ) ; org.springframework.integration.aop.MessagePublishingInterceptorTests.TestBean org.springframework.integration.aop.MessagePublishingInterceptorTests.TestBean = ( org.springframework.integration.aop.MessagePublishingInterceptorTests.TestBean ) org.springframework.integration.aop.ProxyFactory . getProxy ( ) ; org.springframework.integration.aop.MessagePublishingInterceptorTests.TestBean . java.lang.String ( ) ; Message < ? > org.springframework.integration.aop.Message<?> = org.springframework.integration.aop.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aop.Message<> ) ; assertEquals ( STRING , org.springframework.integration.aop.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.aop.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.aop.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( java.lang.reflect.Method java.lang.reflect.Method ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method ) { return STRING ; }  <METHOD_END>
