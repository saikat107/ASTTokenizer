<METHOD_START> @ Test public void void ( ) org.springframework.expression.spel.EvaluationException { StandardTypeLocator org.springframework.expression.spel.StandardTypeLocator = new StandardTypeLocator ( ) ; assertEquals ( java.lang.Integer .class , org.springframework.expression.spel.StandardTypeLocator . findType ( STRING ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.StandardTypeLocator . findType ( STRING ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.expression.spel.StandardTypeLocator . getImportPrefixes ( ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertFalse ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertEquals ( java.lang.Boolean .class , org.springframework.expression.spel.StandardTypeLocator . findType ( STRING ) ) ; try { org.springframework.expression.spel.StandardTypeLocator . findType ( STRING ) ; fail ( STRING ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException = ( SpelEvaluationException ) org.springframework.expression.spel.EvaluationException ; assertEquals ( SpelMessage . TYPE_NOT_FOUND , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } org.springframework.expression.spel.StandardTypeLocator . registerImport ( STRING ) ; assertEquals ( java . net . java.net.URL .class , org.springframework.expression.spel.StandardTypeLocator . findType ( STRING ) ) ; }  <METHOD_END>
