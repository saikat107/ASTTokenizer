<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.cassandra.convert.CassandraMappingContext = new BasicCassandraMappingContext ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter = new MappingCassandraConverter ( org.springframework.data.cassandra.convert.CassandraMappingContext ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.WithEnumColumns org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.WithEnumColumns = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.WithEnumColumns ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.WithEnumColumns . void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.WithEnumColumns , org.springframework.data.cassandra.convert.Insert ) ; assertThat ( java.util.List<java.lang.Object> ( org.springframework.data.cassandra.convert.Insert ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeTrue ( Version . parse ( SpringVersion . getVersion ( ) ) . isLessThan ( org.springframework.data.cassandra.convert.Version ) ) ; org.springframework.data.cassandra.convert.ExpectedException . expect ( ConverterNotFoundException .class ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.UnsupportedEnumToOrdinalMapping org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.UnsupportedEnumToOrdinalMapping = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.UnsupportedEnumToOrdinalMapping ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.UnsupportedEnumToOrdinalMapping . void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.UnsupportedEnumToOrdinalMapping , org.springframework.data.cassandra.convert.Insert ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeTrue ( Version . parse ( SpringVersion . getVersion ( ) ) . isGreaterThanOrEqualTo ( org.springframework.data.cassandra.convert.Version ) ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.UnsupportedEnumToOrdinalMapping org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.UnsupportedEnumToOrdinalMapping = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.UnsupportedEnumToOrdinalMapping ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.UnsupportedEnumToOrdinalMapping . void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.UnsupportedEnumToOrdinalMapping , org.springframework.data.cassandra.convert.Insert ) ; assertThat ( java.util.List<java.lang.Object> ( org.springframework.data.cassandra.convert.Insert ) ) . contains ( ( java.lang.Object ) java.lang.Integer . java.lang.Integer ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition . int ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumPrimaryKey org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumPrimaryKey = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumPrimaryKey ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumPrimaryKey . void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumPrimaryKey , org.springframework.data.cassandra.convert.Insert ) ; assertThat ( java.util.List<java.lang.Object> ( org.springframework.data.cassandra.convert.Insert ) ) . contains ( ( java.lang.Object ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey . void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.CompositeKeyThing org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.CompositeKeyThing = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.CompositeKeyThing ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.CompositeKeyThing . void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.CompositeKeyThing , org.springframework.data.cassandra.convert.Insert ) ; assertThat ( java.util.List<java.lang.Object> ( org.springframework.data.cassandra.convert.Insert ) ) . contains ( ( java.lang.Object ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.WithEnumColumns org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.WithEnumColumns = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.WithEnumColumns ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.WithEnumColumns . void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ) ; Update org.springframework.data.cassandra.convert.Update = QueryBuilder . update ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.WithEnumColumns , org.springframework.data.cassandra.convert.Update ) ; assertThat ( java.util.Collection<java.lang.Object> ( org.springframework.data.cassandra.convert.Update ) ) . contains ( ( java.lang.Object ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumPrimaryKey org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumPrimaryKey = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumPrimaryKey ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumPrimaryKey . void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ) ; Update org.springframework.data.cassandra.convert.Update = QueryBuilder . update ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumPrimaryKey , org.springframework.data.cassandra.convert.Update ) ; assertThat ( java.util.Collection<java.lang.Object> ( org.springframework.data.cassandra.convert.Update ) ) . contains ( ( java.lang.Object ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey . void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.CompositeKeyThing org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.CompositeKeyThing = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.CompositeKeyThing ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.CompositeKeyThing . void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey ) ; Update org.springframework.data.cassandra.convert.Update = QueryBuilder . update ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.CompositeKeyThing , org.springframework.data.cassandra.convert.Update ) ; assertThat ( java.util.Collection<java.lang.Object> ( org.springframework.data.cassandra.convert.Update ) ) . contains ( ( java.lang.Object ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumPrimaryKey org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumPrimaryKey = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumPrimaryKey ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumPrimaryKey . void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ) ; Where org.springframework.data.cassandra.convert.Where = QueryBuilder . delete ( ) . from ( STRING ) . where ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumPrimaryKey , org.springframework.data.cassandra.convert.Where ) ; assertThat ( java.util.Collection<java.lang.Object> ( org.springframework.data.cassandra.convert.Where ) ) . contains ( ( java.lang.Object ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey . void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.CompositeKeyThing org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.CompositeKeyThing = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.CompositeKeyThing ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.CompositeKeyThing . void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey ) ; Where org.springframework.data.cassandra.convert.Where = QueryBuilder . delete ( ) . from ( STRING ) . where ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.CompositeKeyThing , org.springframework.data.cassandra.convert.Where ) ; assertThat ( java.util.Collection<java.lang.Object> ( org.springframework.data.cassandra.convert.Where ) ) . contains ( ( java.lang.Object ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.convert.Row . getString ( NUMBER ) ) . thenReturn ( STRING ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( java.lang.String .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.convert.Row . getObject ( NUMBER ) ) . thenReturn ( NUMBER ) ; java.lang.Integer java.lang.Integer = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( java.lang.Integer .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( java.lang.Integer ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.convert.Row . getObject ( NUMBER ) ) . thenReturn ( NUMBER ) ; java.lang.Long java.lang.Long = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( java.lang.Long .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( java.lang.Long ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.convert.Row . getObject ( NUMBER ) ) . thenReturn ( NUMBER ) ; java.lang.Double java.lang.Double = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( java.lang.Double .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( java.lang.Double ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.convert.Row . getObject ( NUMBER ) ) . thenReturn ( NUMBER ) ; java.lang.Float java.lang.Float = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( java.lang.Float .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( java.lang.Float ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.convert.Row . getObject ( NUMBER ) ) . thenReturn ( java.math.BigInteger . java.math.BigInteger ( NUMBER ) ) ; java.math.BigInteger java.math.BigInteger = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( java.math.BigInteger .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( java.math.BigInteger ) . isEqualTo ( java.math.BigInteger . java.math.BigInteger ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.convert.Row . getObject ( NUMBER ) ) . thenReturn ( java.math.BigDecimal . java.math.BigDecimal ( NUMBER ) ) ; java.math.BigDecimal java.math.BigDecimal = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( java.math.BigDecimal .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( java.math.BigDecimal ) . isEqualTo ( java.math.BigDecimal . java.math.BigDecimal ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; when ( org.springframework.data.cassandra.convert.Row . getUUID ( NUMBER ) ) . thenReturn ( java.util.UUID ) ; java.util.UUID java.util.UUID = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( java.util.UUID .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( java.util.UUID ) . isEqualTo ( java.util.UUID ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.UnknownHostException { java.net.InetAddress java.net.InetAddress = java.net.InetAddress . java.net.InetAddress ( ) ; when ( org.springframework.data.cassandra.convert.Row . getInet ( NUMBER ) ) . thenReturn ( java.net.InetAddress ) ; java.net.InetAddress java.net.InetAddress = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( java.net.InetAddress .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( java.net.InetAddress ) . isEqualTo ( java.net.InetAddress ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Date java.util.Date = new java.util.Date ( NUMBER ) ; when ( org.springframework.data.cassandra.convert.Row . getTimestamp ( NUMBER ) ) . thenReturn ( java.util.Date ) ; java.util.Date java.util.Date = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( java.util.Date .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( java.util.Date ) . isEqualTo ( java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LocalDate org.springframework.data.cassandra.convert.LocalDate = LocalDate . fromDaysSinceEpoch ( NUMBER ) ; when ( org.springframework.data.cassandra.convert.Row . getDate ( NUMBER ) ) . thenReturn ( org.springframework.data.cassandra.convert.LocalDate ) ; LocalDate org.springframework.data.cassandra.convert.LocalDate = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( LocalDate .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( org.springframework.data.cassandra.convert.LocalDate ) . isEqualTo ( org.springframework.data.cassandra.convert.LocalDate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.convert.Row . getBool ( NUMBER ) ) . thenReturn ( true ) ; java.lang.Boolean java.lang.Boolean = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( java.lang.Boolean .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( java.lang.Boolean ) . isEqualTo ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.time.LocalDateTime java.time.LocalDateTime = java.time.LocalDateTime . java.time.LocalDateTime ( ) ; java.time.Instant java.time.Instant = java.time.LocalDateTime . java.time.Instant ( java.time.ZoneOffset . java.time.ZoneOffset ) ; Row org.springframework.data.cassandra.convert.Row = RowMockUtil . newRowMock ( column ( STRING , STRING , DataType . ascii ( ) ) , column ( STRING , java.util.Date . java.util.Date ( java.time.Instant ) , DataType . timestamp ( ) ) ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate . java.time.LocalDate ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate . java.time.LocalDate . int ( ) ) . isEqualTo ( java.time.LocalDateTime . int ( ) ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate . java.time.LocalDate . int ( ) ) . isEqualTo ( java.time.LocalDateTime . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java . time . java.time.LocalDate java.time.LocalDate = java . time . java.time.LocalDate . java.time.LocalDate ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate . java.time.LocalDate = java.time.LocalDate ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate , org.springframework.data.cassandra.convert.Insert ) ; assertThat ( java.util.List<java.lang.Object> ( org.springframework.data.cassandra.convert.Insert ) ) . contains ( LocalDate . fromYearMonthDay ( java.time.LocalDate . int ( ) , java.time.LocalDate . int ( ) , java.time.LocalDate . int ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java . time . java.time.LocalDate java.time.LocalDate = java . time . java.time.LocalDate . java.time.LocalDate ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate . java.time.LocalDate = java.time.LocalDate ; Update org.springframework.data.cassandra.convert.Update = QueryBuilder . update ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate , org.springframework.data.cassandra.convert.Update ) ; assertThat ( java.util.Collection<java.lang.Object> ( org.springframework.data.cassandra.convert.Update ) ) . contains ( LocalDate . fromYearMonthDay ( java.time.LocalDate . int ( ) , java.time.LocalDate . int ( ) , java.time.LocalDate . int ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java . time . java.time.LocalDate java.time.LocalDate = java . time . java.time.LocalDate . java.time.LocalDate ( ) ; java . time . java.time.LocalDate java.time.LocalDate = java . time . java.time.LocalDate . java.time.LocalDate ( NUMBER , NUMBER , NUMBER ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate . java.util.List<java.time.LocalDate> = java.util.Arrays . java.util.List<java.time.LocalDate> ( java.time.LocalDate , java.time.LocalDate ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate , org.springframework.data.cassandra.convert.Insert ) ; java.util.List<org.springframework.data.cassandra.convert.LocalDate> < LocalDate > java.util.List<org.springframework.data.cassandra.convert.LocalDate> = java.util.List ( org.springframework.data.cassandra.convert.Insert ) ; assertThat ( java.util.List<org.springframework.data.cassandra.convert.LocalDate> ) . contains ( LocalDate . fromYearMonthDay ( java.time.LocalDate . int ( ) , java.time.LocalDate . int ( ) , java.time.LocalDate . int ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.cassandra.convert.LocalDate> ) . contains ( LocalDate . fromYearMonthDay ( NUMBER , NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java . time . java.time.LocalDate java.time.LocalDate = java . time . java.time.LocalDate . java.time.LocalDate ( ) ; java . time . java.time.LocalDate java.time.LocalDate = java . time . java.time.LocalDate . java.time.LocalDate ( NUMBER , NUMBER , NUMBER ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate . java.util.Set<java.time.LocalDate> = new java.util.HashSet<java.time.LocalDate> <> ( java.util.Arrays . java.util.List<java.time.LocalDate> ( java.time.LocalDate , java.time.LocalDate ) ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate , org.springframework.data.cassandra.convert.Insert ) ; java.util.Set<org.springframework.data.cassandra.convert.LocalDate> < LocalDate > java.util.Set<org.springframework.data.cassandra.convert.LocalDate> = java.util.Set ( org.springframework.data.cassandra.convert.Insert ) ; assertThat ( java.util.Set<org.springframework.data.cassandra.convert.LocalDate> ) . contains ( LocalDate . fromYearMonthDay ( java.time.LocalDate . int ( ) , java.time.LocalDate . int ( ) , java.time.LocalDate . int ( ) ) ) ; assertThat ( java.util.Set<org.springframework.data.cassandra.convert.LocalDate> ) . contains ( LocalDate . fromYearMonthDay ( NUMBER , NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Row org.springframework.data.cassandra.convert.Row = RowMockUtil . newRowMock ( column ( STRING , STRING , DataType . ascii ( ) ) , column ( STRING , LocalDate . fromYearMonthDay ( NUMBER , NUMBER , NUMBER ) , DataType . date ( ) ) ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDateMappedToDate org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDateMappedToDate = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDateMappedToDate .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDateMappedToDate . java.time.LocalDate ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDateMappedToDate . java.time.LocalDate . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDateMappedToDate . java.time.LocalDate . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDateMappedToDate . java.time.LocalDate . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDateMappedToDate org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDateMappedToDate = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDateMappedToDate ( null , java . time . java.time.LocalDate . java.time.LocalDate ( NUMBER , NUMBER , NUMBER ) ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDateMappedToDate , org.springframework.data.cassandra.convert.Insert ) ; assertThat ( java.util.List<java.lang.Object> ( org.springframework.data.cassandra.convert.Insert ) . contains ( LocalDate . fromYearMonthDay ( NUMBER , NUMBER , NUMBER ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDateMappedToDate org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDateMappedToDate = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDateMappedToDate ( null , java . time . java.time.LocalDate . java.time.LocalDate ( NUMBER , NUMBER , NUMBER ) ) ; Update org.springframework.data.cassandra.convert.Update = QueryBuilder . update ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDateMappedToDate , org.springframework.data.cassandra.convert.Update ) ; assertThat ( java.util.Collection<java.lang.Object> ( org.springframework.data.cassandra.convert.Update ) ) . contains ( LocalDate . fromYearMonthDay ( NUMBER , NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.time.LocalDateTime java.time.LocalDateTime = java.time.LocalDateTime . java.time.LocalDateTime ( ) ; java.time.Instant java.time.Instant = java.time.LocalDateTime . java.time.Instant ( java.time.ZoneOffset . java.time.ZoneOffset ) ; Row org.springframework.data.cassandra.convert.Row = RowMockUtil . newRowMock ( column ( STRING , STRING , DataType . ascii ( ) ) , column ( STRING , java.util.Date . java.util.Date ( java.time.Instant ) , DataType . timestamp ( ) ) ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate . java.time.LocalDateTime ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate . java.time.LocalDateTime . int ( ) ) . isEqualTo ( java.time.LocalDateTime . int ( ) ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithLocalDate . java.time.LocalDateTime . int ( ) ) . isEqualTo ( java.time.LocalDateTime . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.time.LocalDateTime java.time.LocalDateTime = java.time.LocalDateTime . java.time.LocalDateTime ( ) ; java.time.Instant java.time.Instant = java.time.LocalDateTime . java.time.Instant ( java.time.ZoneOffset . java.time.ZoneOffset ) ; Row org.springframework.data.cassandra.convert.Row = RowMockUtil . newRowMock ( column ( STRING , STRING , DataType . ascii ( ) ) , column ( STRING , java.util.Date . java.util.Date ( java.time.Instant ) , DataType . timestamp ( ) ) ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithInstant org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithInstant = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithInstant .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithInstant . java.time.Instant ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithInstant . java.time.Instant . long ( ) ) . isEqualTo ( java.time.Instant . long ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Row org.springframework.data.cassandra.convert.Row = RowMockUtil . newRowMock ( column ( STRING , STRING , DataType . ascii ( ) ) , column ( STRING , STRING , DataType . varchar ( ) ) ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithZoneId org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithZoneId = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithZoneId .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithZoneId . java.time.ZoneId ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithZoneId . java.time.ZoneId . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Row org.springframework.data.cassandra.convert.Row = RowMockUtil . newRowMock ( column ( STRING , STRING , DataType . ascii ( ) ) , column ( STRING , LocalDate . fromYearMonthDay ( NUMBER , NUMBER , NUMBER ) , DataType . date ( ) ) ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate . org.joda.time.LocalDate ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate . org.joda.time.LocalDate . getYear ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate . org.joda.time.LocalDate . getMonthOfYear ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate . org.joda.time.LocalDate . getDayOfMonth ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate . org.joda.time.LocalDate = new org . org.joda . org.joda . org.joda ( NUMBER , NUMBER , NUMBER ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate , org.springframework.data.cassandra.convert.Insert ) ; assertThat ( java.util.List<java.lang.Object> ( org.springframework.data.cassandra.convert.Insert ) . contains ( LocalDate . fromYearMonthDay ( NUMBER , NUMBER , NUMBER ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate . org.joda.time.LocalDate = new org . org.joda . org.joda . org.joda ( NUMBER , NUMBER , NUMBER ) ; Update org.springframework.data.cassandra.convert.Update = QueryBuilder . update ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithJodaLocalDateMappedToDate , org.springframework.data.cassandra.convert.Update ) ; assertThat ( java.util.Collection<java.lang.Object> ( org.springframework.data.cassandra.convert.Update ) ) . contains ( LocalDate . fromYearMonthDay ( NUMBER , NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Row org.springframework.data.cassandra.convert.Row = RowMockUtil . newRowMock ( column ( STRING , STRING , DataType . ascii ( ) ) , column ( STRING , LocalDate . fromYearMonthDay ( NUMBER , NUMBER , NUMBER ) , DataType . date ( ) ) ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate = org.springframework.data.cassandra.convert.MappingCassandraConverter . readRow ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate .class , org.springframework.data.cassandra.convert.Row ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate . org.threeten.bp.LocalDate ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate . org.threeten.bp.LocalDate . getYear ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate . org.threeten.bp.LocalDate . getMonthValue ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate . org.threeten.bp.LocalDate . getDayOfMonth ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate . org.threeten.bp.LocalDate = org . org.threeten . org.threeten . LocalDate . of ( NUMBER , NUMBER , NUMBER ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate , org.springframework.data.cassandra.convert.Insert ) ; assertThat ( java.util.List<java.lang.Object> ( org.springframework.data.cassandra.convert.Insert ) . contains ( LocalDate . fromYearMonthDay ( NUMBER , NUMBER , NUMBER ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate = new org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate . org.threeten.bp.LocalDate = org . org.threeten . org.threeten . LocalDate . of ( NUMBER , NUMBER , NUMBER ) ; Update org.springframework.data.cassandra.convert.Update = QueryBuilder . update ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.TypeWithThreeTenBpLocalDateMappedToDate , org.springframework.data.cassandra.convert.Update ) ; assertThat ( java.util.Collection<java.lang.Object> ( org.springframework.data.cassandra.convert.Update ) ) . contains ( LocalDate . fromYearMonthDay ( NUMBER , NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UserToken org.springframework.data.cassandra.convert.UserToken = new UserToken ( ) ; org.springframework.data.cassandra.convert.UserToken . setUserId ( java.util.UUID . java.util.UUID ( ) ) ; org.springframework.data.cassandra.convert.UserToken . setToken ( java.util.UUID . java.util.UUID ( ) ) ; org.springframework.data.cassandra.convert.UserToken . setAdminComment ( STRING ) ; org.springframework.data.cassandra.convert.UserToken . setUserComment ( STRING ) ; Update org.springframework.data.cassandra.convert.Update = QueryBuilder . update ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.UserToken , org.springframework.data.cassandra.convert.Update ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Update ) ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Update ) ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Update ) ) . containsEntry ( STRING , org.springframework.data.cassandra.convert.UserToken . getUserId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UserToken org.springframework.data.cassandra.convert.UserToken = new UserToken ( ) ; org.springframework.data.cassandra.convert.UserToken . setUserId ( java.util.UUID . java.util.UUID ( ) ) ; org.springframework.data.cassandra.convert.UserToken . setToken ( java.util.UUID . java.util.UUID ( ) ) ; org.springframework.data.cassandra.convert.UserToken . setAdminComment ( STRING ) ; org.springframework.data.cassandra.convert.UserToken . setUserComment ( STRING ) ; Delete org.springframework.data.cassandra.convert.Delete = QueryBuilder . delete ( ) . from ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.UserToken , org.springframework.data.cassandra.convert.Delete . where ( ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , org.springframework.data.cassandra.convert.UserToken . getUserId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Delete org.springframework.data.cassandra.convert.Delete = QueryBuilder . delete ( ) . from ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( STRING , org.springframework.data.cassandra.convert.Delete . where ( ) , org.springframework.data.cassandra.convert.CassandraMappingContext . getRequiredPersistentEntity ( Person .class ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Delete org.springframework.data.cassandra.convert.Delete = QueryBuilder . delete ( ) . from ( STRING ) ; Person org.springframework.data.cassandra.convert.Person = new Person ( ) ; org.springframework.data.cassandra.convert.Person . setId ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.Person , org.springframework.data.cassandra.convert.Delete . where ( ) , org.springframework.data.cassandra.convert.CassandraMappingContext . getRequiredPersistentEntity ( Person .class ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { Delete org.springframework.data.cassandra.convert.Delete = QueryBuilder . delete ( ) . from ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( new Person ( ) , org.springframework.data.cassandra.convert.Delete . where ( ) , org.springframework.data.cassandra.convert.CassandraMappingContext . getRequiredPersistentEntity ( Person .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Delete org.springframework.data.cassandra.convert.Delete = QueryBuilder . delete ( ) . from ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( id ( STRING , STRING ) , org.springframework.data.cassandra.convert.Delete . where ( ) , org.springframework.data.cassandra.convert.CassandraMappingContext . getRequiredPersistentEntity ( Person .class ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Delete org.springframework.data.cassandra.convert.Delete = QueryBuilder . delete ( ) . from ( STRING ) ; TypeWithCompositeKey org.springframework.data.cassandra.convert.TypeWithCompositeKey = new TypeWithCompositeKey ( ) ; org.springframework.data.cassandra.convert.TypeWithCompositeKey . setFirstname ( STRING ) ; org.springframework.data.cassandra.convert.TypeWithCompositeKey . setLastname ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.TypeWithCompositeKey , org.springframework.data.cassandra.convert.Delete . where ( ) , org.springframework.data.cassandra.convert.CassandraMappingContext . getRequiredPersistentEntity ( TypeWithCompositeKey .class ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Delete org.springframework.data.cassandra.convert.Delete = QueryBuilder . delete ( ) . from ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( id ( STRING , STRING ) . with ( STRING , STRING ) , org.springframework.data.cassandra.convert.Delete . where ( ) , org.springframework.data.cassandra.convert.CassandraMappingContext . getRequiredPersistentEntity ( TypeWithCompositeKey .class ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Delete org.springframework.data.cassandra.convert.Delete = QueryBuilder . delete ( ) . from ( STRING ) ; TypeWithMapId org.springframework.data.cassandra.convert.TypeWithMapId = new TypeWithMapId ( ) ; org.springframework.data.cassandra.convert.TypeWithMapId . setFirstname ( STRING ) ; org.springframework.data.cassandra.convert.TypeWithMapId . setLastname ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.TypeWithMapId , org.springframework.data.cassandra.convert.Delete . where ( ) , org.springframework.data.cassandra.convert.CassandraMappingContext . getRequiredPersistentEntity ( TypeWithMapId .class ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Delete org.springframework.data.cassandra.convert.Delete = QueryBuilder . delete ( ) . from ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition , org.springframework.data.cassandra.convert.Delete . where ( ) , org.springframework.data.cassandra.convert.CassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumPrimaryKey .class ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Delete org.springframework.data.cassandra.convert.Delete = QueryBuilder . delete ( ) . from ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( id ( STRING , STRING ) . with ( STRING , STRING ) , org.springframework.data.cassandra.convert.Delete . where ( ) , org.springframework.data.cassandra.convert.CassandraMappingContext . getRequiredPersistentEntity ( TypeWithMapId .class ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Delete org.springframework.data.cassandra.convert.Delete = QueryBuilder . delete ( ) . from ( STRING ) ; CompositeKey org.springframework.data.cassandra.convert.CompositeKey = new CompositeKey ( ) ; org.springframework.data.cassandra.convert.CompositeKey . setFirstname ( STRING ) ; org.springframework.data.cassandra.convert.CompositeKey . setLastname ( STRING ) ; TypeWithKeyClass org.springframework.data.cassandra.convert.TypeWithKeyClass = new TypeWithKeyClass ( ) ; org.springframework.data.cassandra.convert.TypeWithKeyClass . setKey ( org.springframework.data.cassandra.convert.CompositeKey ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.TypeWithKeyClass , org.springframework.data.cassandra.convert.Delete . where ( ) , org.springframework.data.cassandra.convert.CassandraMappingContext . getRequiredPersistentEntity ( TypeWithKeyClass .class ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { Delete org.springframework.data.cassandra.convert.Delete = QueryBuilder . delete ( ) . from ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( new TypeWithKeyClass ( ) , org.springframework.data.cassandra.convert.Delete . where ( ) , org.springframework.data.cassandra.convert.CassandraMappingContext . getRequiredPersistentEntity ( TypeWithKeyClass .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Delete org.springframework.data.cassandra.convert.Delete = QueryBuilder . delete ( ) . from ( STRING ) ; CompositeKey org.springframework.data.cassandra.convert.CompositeKey = new CompositeKey ( ) ; org.springframework.data.cassandra.convert.CompositeKey . setFirstname ( STRING ) ; org.springframework.data.cassandra.convert.CompositeKey . setLastname ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.CompositeKey , org.springframework.data.cassandra.convert.Delete . where ( ) , org.springframework.data.cassandra.convert.CassandraMappingContext . getRequiredPersistentEntity ( TypeWithKeyClass .class ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Delete org.springframework.data.cassandra.convert.Delete = QueryBuilder . delete ( ) . from ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( id ( STRING , STRING ) . with ( STRING , STRING ) , org.springframework.data.cassandra.convert.Delete . where ( ) , org.springframework.data.cassandra.convert.CassandraMappingContext . getRequiredPersistentEntity ( TypeWithKeyClass .class ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { Delete org.springframework.data.cassandra.convert.Delete = QueryBuilder . delete ( ) . from ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( id ( STRING , STRING ) , org.springframework.data.cassandra.convert.Delete . where ( ) , org.springframework.data.cassandra.convert.CassandraMappingContext . getRequiredPersistentEntity ( TypeWithMapId .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > java.util.List<T> < T > java.util.List<T> ( Insert org.springframework.data.cassandra.convert.Insert ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.List<java.lang.Object> ( org.springframework.data.cassandra.convert.Insert ) ; return ( java.util.List<T> < T > ) java.util.List<java.lang.Object> . java.util.stream.Stream<java.lang.Object> ( ) . java.util.stream.Stream<java.lang.Object> ( java.lang.Object -> java.lang.Object instanceof java.util.List ) . java.util.Optional<java.lang.Object> ( ) . java.lang.Object ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > java.util.Set<T> < T > java.util.Set<T> ( Insert org.springframework.data.cassandra.convert.Insert ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.List<java.lang.Object> ( org.springframework.data.cassandra.convert.Insert ) ; return ( java.util.Set<T> < T > ) java.util.List<java.lang.Object> . java.util.stream.Stream<java.lang.Object> ( ) . java.util.stream.Stream<java.lang.Object> ( java.lang.Object -> java.lang.Object instanceof java.util.Set ) . java.util.Optional<java.lang.Object> ( ) . java.lang.Object ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Insert org.springframework.data.cassandra.convert.Insert ) { return ( java.util.List<java.lang.Object> < java.lang.Object > ) ReflectionTestUtils . getField ( org.springframework.data.cassandra.convert.Insert , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ( Update org.springframework.data.cassandra.convert.Update ) { return java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Update ) . values ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( Update org.springframework.data.cassandra.convert.Update ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; Assignments org.springframework.data.cassandra.convert.Assignments = ( Assignments ) ReflectionTestUtils . getField ( org.springframework.data.cassandra.convert.Update , STRING ) ; java.util.List<org.springframework.data.cassandra.convert.Assignment> < Assignment > java.util.List<org.springframework.data.cassandra.convert.Assignment> = ( java.util.List<org.springframework.data.cassandra.convert.Assignment> < Assignment > ) ReflectionTestUtils . getField ( org.springframework.data.cassandra.convert.Assignments , STRING ) ; for ( Assignment org.springframework.data.cassandra.convert.Assignment : java.util.List<org.springframework.data.cassandra.convert.Assignment> ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.data.cassandra.convert.Assignment . getColumnName ( ) , ReflectionTestUtils . getField ( org.springframework.data.cassandra.convert.Assignment , STRING ) ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ( Update org.springframework.data.cassandra.convert.Update ) { return java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Update . where ( ) ) . values ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ( BuiltStatement org.springframework.data.cassandra.convert.BuiltStatement ) { return java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.BuiltStatement ) . values ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( Update org.springframework.data.cassandra.convert.Update ) { return java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Update . where ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( Delete org.springframework.data.cassandra.convert.Delete ) { return java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.convert.Delete . where ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( BuiltStatement org.springframework.data.cassandra.convert.BuiltStatement ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.List<org.springframework.data.cassandra.convert.Clause> < Clause > java.util.List<org.springframework.data.cassandra.convert.Clause> = ( java.util.List<org.springframework.data.cassandra.convert.Clause> < Clause > ) ReflectionTestUtils . getField ( org.springframework.data.cassandra.convert.BuiltStatement , STRING ) ; for ( Clause org.springframework.data.cassandra.convert.Clause : java.util.List<org.springframework.data.cassandra.convert.Clause> ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ReflectionTestUtils . invokeMethod ( org.springframework.data.cassandra.convert.Clause , STRING ) , ReflectionTestUtils . getField ( org.springframework.data.cassandra.convert.Clause , STRING ) ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ( ) { return org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ) { this . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition = org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ( ) { return org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ) { this . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition = org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ; }  <METHOD_END>
<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ) { this . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition = org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ( ) { return org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ) { this . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition = org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ( ) { return org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ) { this . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition = org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.Condition ; }  <METHOD_END>
<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey ) { this . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey = org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey ( ) { return org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey ) { this . org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey = org.springframework.data.cassandra.convert.MappingCassandraConverterUnitTests.EnumCompositePrimaryKey ; }  <METHOD_END>
