<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.boot.context.BeanFactory ) throws org.springframework.boot.context.BeansException { this . org.springframework.boot.context.BeanFactory = org.springframework.boot.context.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MetadataReader org.springframework.boot.context.MetadataReader , MetadataReaderFactory org.springframework.boot.context.MetadataReaderFactory ) throws java.io.IOException { if ( this . org.springframework.boot.context.BeanFactory instanceof ListableBeanFactory && java.lang.Class<? extends org.springframework.boot.context.TypeExcludeFilter> ( ) . boolean ( org.springframework.boot.context.TypeExcludeFilter .class ) ) { java.util.Collection<org.springframework.boot.context.TypeExcludeFilter> < org.springframework.boot.context.TypeExcludeFilter > java.util.Collection<org.springframework.boot.context.TypeExcludeFilter> = ( ( ListableBeanFactory ) this . org.springframework.boot.context.BeanFactory ) . getBeansOfType ( org.springframework.boot.context.TypeExcludeFilter .class ) . values ( ) ; for ( org.springframework.boot.context.TypeExcludeFilter org.springframework.boot.context.TypeExcludeFilter : java.util.Collection<org.springframework.boot.context.TypeExcludeFilter> ) { if ( org.springframework.boot.context.TypeExcludeFilter . boolean ( org.springframework.boot.context.MetadataReader , org.springframework.boot.context.MetadataReaderFactory ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<? extends org.springframework.boot.context.TypeExcludeFilter> ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<? extends org.springframework.boot.context.TypeExcludeFilter> ( ) + STRING ) ; }  <METHOD_END>
