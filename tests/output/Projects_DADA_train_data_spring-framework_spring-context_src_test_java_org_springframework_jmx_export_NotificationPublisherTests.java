<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.jmx.export.ConfigurableApplicationContext = loadContext ( STRING ) ; this . server . addNotificationListener ( ObjectNameManager . getInstance ( STRING ) , org.springframework.jmx.export.NotificationPublisherTests.CountingNotificationListener , null , null ) ; org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisher org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisher = ( org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisher ) org.springframework.jmx.export.ConfigurableApplicationContext . getBean ( STRING ) ; assertNotNull ( STRING , org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisher . org.springframework.jmx.export.NotificationPublisher ( ) ) ; org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisher . void ( ) ; assertEquals ( STRING , NUMBER , org.springframework.jmx.export.NotificationPublisherTests.CountingNotificationListener . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.jmx.export.ConfigurableApplicationContext = loadContext ( STRING ) ; MBeanExporter org.springframework.jmx.export.MBeanExporter = ( MBeanExporter ) org.springframework.jmx.export.ConfigurableApplicationContext . getBean ( STRING ) ; org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisher org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisher = new org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisher ( ) ; org.springframework.jmx.export.MBeanExporter . registerManagedResource ( org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisher , ObjectNameManager . getInstance ( STRING ) ) ; this . server . addNotificationListener ( ObjectNameManager . getInstance ( STRING ) , org.springframework.jmx.export.NotificationPublisherTests.CountingNotificationListener , null , null ) ; assertNotNull ( STRING , org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisher . org.springframework.jmx.export.NotificationPublisher ( ) ) ; org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisher . void ( ) ; assertEquals ( STRING , NUMBER , org.springframework.jmx.export.NotificationPublisherTests.CountingNotificationListener . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.jmx.export.ConfigurableApplicationContext = loadContext ( STRING ) ; this . server . addNotificationListener ( ObjectNameManager . getInstance ( STRING ) , org.springframework.jmx.export.NotificationPublisherTests.CountingNotificationListener , null , null ) ; org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisherMBean org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisherMBean = ( org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisherMBean ) org.springframework.jmx.export.ConfigurableApplicationContext . getBean ( STRING ) ; org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisherMBean . void ( ) ; assertEquals ( STRING , NUMBER , org.springframework.jmx.export.NotificationPublisherTests.CountingNotificationListener . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.jmx.export.ConfigurableApplicationContext = loadContext ( STRING ) ; assertFalse ( STRING , org.springframework.jmx.export.ConfigurableApplicationContext . getBeanFactory ( ) . containsSingleton ( STRING ) ) ; server . getAttribute ( ObjectNameManager . getInstance ( STRING ) , STRING ) ; this . server . addNotificationListener ( ObjectNameManager . getInstance ( STRING ) , org.springframework.jmx.export.NotificationPublisherTests.CountingNotificationListener , null , null ) ; org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisher org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisher = ( org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisher ) org.springframework.jmx.export.ConfigurableApplicationContext . getBean ( STRING ) ; assertNotNull ( STRING , org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisher . org.springframework.jmx.export.NotificationPublisher ( ) ) ; org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisher . void ( ) ; assertEquals ( STRING , NUMBER , org.springframework.jmx.export.NotificationPublisherTests.CountingNotificationListener . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( javax.management.Notification javax.management.Notification , java.lang.Object java.lang.Object ) { this . javax.management.Notification = javax.management.Notification ; this . int ++ ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public javax.management.Notification javax.management.Notification ( ) { return javax.management.Notification ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( NotificationPublisher org.springframework.jmx.export.NotificationPublisher ) { this . org.springframework.jmx.export.NotificationPublisher = org.springframework.jmx.export.NotificationPublisher ; }  <METHOD_END>
<METHOD_START> public org.springframework.jmx.export.NotificationPublisher org.springframework.jmx.export.NotificationPublisher ( ) { return org.springframework.jmx.export.NotificationPublisher ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . org.springframework.jmx.export.NotificationPublisher . sendNotification ( new javax.management.Notification ( STRING , this , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.management.AttributeNotFoundException , javax.management.MBeanException , javax.management.ReflectionException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( javax.management.Attribute javax.management.Attribute ) throws javax.management.AttributeNotFoundException , javax.management.InvalidAttributeValueException , javax.management.MBeanException , javax.management.ReflectionException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.management.AttributeList javax.management.AttributeList ( java.lang.String [] java.lang.String[] ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.management.AttributeList javax.management.AttributeList ( javax.management.AttributeList javax.management.AttributeList ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Object java.lang.Object[] [] , java.lang.String java.lang.String[] [] ) throws javax.management.MBeanException , javax.management.ReflectionException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.management.MBeanInfo javax.management.MBeanInfo ( ) { return new javax.management.MBeanInfo ( org.springframework.jmx.export.NotificationPublisherTests.MyNotificationPublisherMBean .class . java.lang.String ( ) , STRING , new javax.management.MBeanAttributeInfo [ NUMBER ] , new javax.management.MBeanConstructorInfo [ NUMBER ] , new javax.management.MBeanOperationInfo [ NUMBER ] , new javax.management.MBeanNotificationInfo [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( new javax.management.Notification ( STRING , this , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( new javax.management.Notification ( STRING , this , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
