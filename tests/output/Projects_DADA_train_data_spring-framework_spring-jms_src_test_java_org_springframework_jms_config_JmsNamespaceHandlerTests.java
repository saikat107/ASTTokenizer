<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext = new org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext ( STRING , java.lang.Class<? extends org.springframework.jms.config.JmsNamespaceHandlerTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { this . org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBeansOfType ( DefaultMessageListenerContainer .class ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; java.util.Map<java.lang.String,?> = org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBeansOfType ( GenericMessageEndpointManager .class ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; java.util.Map<java.lang.String,org.springframework.jms.config.JmsListenerContainerFactory> < java.lang.String , JmsListenerContainerFactory > java.util.Map<java.lang.String,org.springframework.jms.config.JmsListenerContainerFactory> = org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBeansOfType ( JmsListenerContainerFactory .class ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,org.springframework.jms.config.JmsListenerContainerFactory> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,org.springframework.jms.config.DefaultMessageListenerContainer> < java.lang.String , DefaultMessageListenerContainer > java.util.Map<java.lang.String,org.springframework.jms.config.DefaultMessageListenerContainer> = org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBeansOfType ( DefaultMessageListenerContainer .class ) ; ConnectionFactory org.springframework.jms.config.ConnectionFactory = org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( java.lang.String , ConnectionFactory .class ) ; ConnectionFactory org.springframework.jms.config.ConnectionFactory = org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( java.lang.String , ConnectionFactory .class ) ; int int = NUMBER ; int int = NUMBER ; for ( DefaultMessageListenerContainer org.springframework.jms.config.DefaultMessageListenerContainer : java.util.Map<java.lang.String,org.springframework.jms.config.DefaultMessageListenerContainer> . values ( ) ) { if ( org.springframework.jms.config.DefaultMessageListenerContainer . getConnectionFactory ( ) . equals ( org.springframework.jms.config.ConnectionFactory ) ) { int ++ ; } else if ( org.springframework.jms.config.DefaultMessageListenerContainer . getConnectionFactory ( ) . equals ( org.springframework.jms.config.ConnectionFactory ) ) { int ++ ; } } assertEquals ( STRING , NUMBER , int ) ; assertEquals ( STRING , NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,org.springframework.jms.config.JmsMessageEndpointManager> < java.lang.String , JmsMessageEndpointManager > java.util.Map<java.lang.String,org.springframework.jms.config.JmsMessageEndpointManager> = org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBeansOfType ( JmsMessageEndpointManager .class ) ; assertTrue ( STRING , java.util.Map<java.lang.String,org.springframework.jms.config.JmsMessageEndpointManager> . containsKey ( STRING ) ) ; JmsMessageEndpointManager org.springframework.jms.config.JmsMessageEndpointManager = java.util.Map<java.lang.String,org.springframework.jms.config.JmsMessageEndpointManager> . get ( STRING ) ; assertEquals ( STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING ) , org.springframework.jms.config.JmsMessageEndpointManager . getResourceAdapter ( ) ) ; assertEquals ( STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING ) , new DirectFieldAccessor ( org.springframework.jms.config.JmsMessageEndpointManager ) . getPropertyValue ( STRING ) ) ; java.lang.Object java.lang.Object = new DirectFieldAccessor ( org.springframework.jms.config.JmsMessageEndpointManager ) . getPropertyValue ( STRING ) ; java.lang.Object java.lang.Object = new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; assertEquals ( STRING , MessageListenerAdapter .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; MessageListenerAdapter org.springframework.jms.config.MessageListenerAdapter = ( MessageListenerAdapter ) java.lang.Object ; DirectFieldAccessor org.springframework.jms.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.jms.config.MessageListenerAdapter ) ; assertEquals ( STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING ) , org.springframework.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING ) , org.springframework.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , STRING , org.springframework.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.jms.config.DefaultJmsListenerContainerFactory> < java.lang.String , DefaultJmsListenerContainerFactory > java.util.Map<java.lang.String,org.springframework.jms.config.DefaultJmsListenerContainerFactory> = org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBeansOfType ( DefaultJmsListenerContainerFactory .class ) ; DefaultJmsListenerContainerFactory org.springframework.jms.config.DefaultJmsListenerContainerFactory = java.util.Map<java.lang.String,org.springframework.jms.config.DefaultJmsListenerContainerFactory> . get ( STRING ) ; assertNotNull ( STRING , org.springframework.jms.config.DefaultJmsListenerContainerFactory ) ; DefaultMessageListenerContainer org.springframework.jms.config.DefaultMessageListenerContainer = org.springframework.jms.config.DefaultJmsListenerContainerFactory . createListenerContainer ( org.springframework.jms.config.JmsListenerEndpoint ( ) ) ; assertEquals ( STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( java.lang.String ) , org.springframework.jms.config.DefaultMessageListenerContainer . getConnectionFactory ( ) ) ; assertEquals ( STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING ) , org.springframework.jms.config.DefaultMessageListenerContainer . getDestinationResolver ( ) ) ; assertEquals ( STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING ) , org.springframework.jms.config.DefaultMessageListenerContainer . getMessageConverter ( ) ) ; assertEquals ( STRING , true , org.springframework.jms.config.DefaultMessageListenerContainer . isPubSubDomain ( ) ) ; assertEquals ( STRING , true , org.springframework.jms.config.DefaultMessageListenerContainer . isSubscriptionDurable ( ) ) ; assertEquals ( STRING , DefaultMessageListenerContainer . CACHE_CONNECTION , org.springframework.jms.config.DefaultMessageListenerContainer . getCacheLevel ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.config.DefaultMessageListenerContainer . getConcurrentConsumers ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.config.DefaultMessageListenerContainer . getMaxConcurrentConsumers ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.config.DefaultMessageListenerContainer . getMaxMessagesPerTask ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.config.DefaultMessageListenerContainer . getPhase ( ) ) ; assertSame ( org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING ) , new DirectFieldAccessor ( org.springframework.jms.config.DefaultMessageListenerContainer ) . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.jms.config.DefaultJcaListenerContainerFactory> < java.lang.String , DefaultJcaListenerContainerFactory > java.util.Map<java.lang.String,org.springframework.jms.config.DefaultJcaListenerContainerFactory> = org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBeansOfType ( DefaultJcaListenerContainerFactory .class ) ; DefaultJcaListenerContainerFactory org.springframework.jms.config.DefaultJcaListenerContainerFactory = java.util.Map<java.lang.String,org.springframework.jms.config.DefaultJcaListenerContainerFactory> . get ( STRING ) ; assertNotNull ( STRING , org.springframework.jms.config.DefaultJcaListenerContainerFactory ) ; JmsMessageEndpointManager org.springframework.jms.config.JmsMessageEndpointManager = org.springframework.jms.config.DefaultJcaListenerContainerFactory . createListenerContainer ( org.springframework.jms.config.JmsListenerEndpoint ( ) ) ; assertEquals ( STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING ) , org.springframework.jms.config.JmsMessageEndpointManager . getResourceAdapter ( ) ) ; assertEquals ( STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING ) , org.springframework.jms.config.JmsMessageEndpointManager . getActivationSpecConfig ( ) . getMessageConverter ( ) ) ; assertEquals ( STRING , true , org.springframework.jms.config.JmsMessageEndpointManager . isPubSubDomain ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.config.JmsMessageEndpointManager . getActivationSpecConfig ( ) . getMaxConcurrency ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.config.JmsMessageEndpointManager . getActivationSpecConfig ( ) . getPrefetchSize ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.config.JmsMessageEndpointManager . getPhase ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.jms.config.TestBean = org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING , TestBean .class ) ; TestBean org.springframework.jms.config.TestBean = org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING , TestBean .class ) ; org.springframework.jms.config.JmsNamespaceHandlerTests.TestMessageListener org.springframework.jms.config.JmsNamespaceHandlerTests.TestMessageListener = org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.TestMessageListener .class ) ; assertNull ( org.springframework.jms.config.TestBean . getName ( ) ) ; assertNull ( org.springframework.jms.config.TestBean . getName ( ) ) ; assertNull ( org.springframework.jms.config.JmsNamespaceHandlerTests.TestMessageListener . org.springframework.jms.config.Message ) ; TextMessage org.springframework.jms.config.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.config.TextMessage . getText ( ) ) . willReturn ( STRING ) ; MessageListener org.springframework.jms.config.MessageListener = org.springframework.jms.config.MessageListener ( STRING ) ; org.springframework.jms.config.MessageListener . onMessage ( org.springframework.jms.config.TextMessage ) ; assertEquals ( STRING , org.springframework.jms.config.TestBean . getName ( ) ) ; TextMessage org.springframework.jms.config.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.config.TextMessage . getText ( ) ) . willReturn ( STRING ) ; MessageListener org.springframework.jms.config.MessageListener = org.springframework.jms.config.MessageListener ( STRING ) ; org.springframework.jms.config.MessageListener . onMessage ( org.springframework.jms.config.TextMessage ) ; assertEquals ( STRING , org.springframework.jms.config.TestBean . getName ( ) ) ; TextMessage org.springframework.jms.config.TextMessage = mock ( TextMessage .class ) ; MessageListener org.springframework.jms.config.MessageListener = org.springframework.jms.config.MessageListener ( DefaultMessageListenerContainer .class . java.lang.String ( ) + STRING ) ; org.springframework.jms.config.MessageListener . onMessage ( org.springframework.jms.config.TextMessage ) ; assertSame ( org.springframework.jms.config.TextMessage , org.springframework.jms.config.JmsNamespaceHandlerTests.TestMessageListener . org.springframework.jms.config.Message ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING ) ; BackOff org.springframework.jms.config.BackOff = org.springframework.jms.config.BackOff ( STRING ) ; BackOff org.springframework.jms.config.BackOff = org.springframework.jms.config.BackOff ( STRING ) ; long long = long ( DefaultMessageListenerContainer .class . java.lang.String ( ) + STRING ) ; assertSame ( java.lang.Object , org.springframework.jms.config.BackOff ) ; assertSame ( java.lang.Object , org.springframework.jms.config.BackOff ) ; assertEquals ( DefaultMessageListenerContainer . DEFAULT_RECOVERY_INTERVAL , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultMessageListenerContainer org.springframework.jms.config.DefaultMessageListenerContainer = this . org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( DefaultMessageListenerContainer .class . java.lang.String ( ) + STRING , DefaultMessageListenerContainer .class ) ; DefaultMessageListenerContainer org.springframework.jms.config.DefaultMessageListenerContainer = this . org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING , DefaultMessageListenerContainer .class ) ; DefaultMessageListenerContainer org.springframework.jms.config.DefaultMessageListenerContainer = this . org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING , DefaultMessageListenerContainer .class ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.config.DefaultMessageListenerContainer . getConcurrentConsumers ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.config.DefaultMessageListenerContainer . getMaxConcurrentConsumers ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.config.DefaultMessageListenerContainer . getConcurrentConsumers ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.config.DefaultMessageListenerContainer . getMaxConcurrentConsumers ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.config.DefaultMessageListenerContainer . getConcurrentConsumers ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.config.DefaultMessageListenerContainer . getMaxConcurrentConsumers ( ) ) ; JmsMessageEndpointManager org.springframework.jms.config.JmsMessageEndpointManager = this . org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING , JmsMessageEndpointManager .class ) ; JmsMessageEndpointManager org.springframework.jms.config.JmsMessageEndpointManager = this . org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING , JmsMessageEndpointManager .class ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.config.JmsMessageEndpointManager . getActivationSpecConfig ( ) . getMaxConcurrency ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.config.JmsMessageEndpointManager . getActivationSpecConfig ( ) . getMaxConcurrency ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultMessageListenerContainer org.springframework.jms.config.DefaultMessageListenerContainer = this . org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING , DefaultMessageListenerContainer .class ) ; DefaultMessageListenerContainer org.springframework.jms.config.DefaultMessageListenerContainer = this . org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING , DefaultMessageListenerContainer .class ) ; assertEquals ( STRING , true , org.springframework.jms.config.DefaultMessageListenerContainer . isPubSubDomain ( ) ) ; assertEquals ( STRING , true , org.springframework.jms.config.DefaultMessageListenerContainer . isPubSubDomain ( ) ) ; assertEquals ( STRING , false , org.springframework.jms.config.DefaultMessageListenerContainer . isReplyPubSubDomain ( ) ) ; assertEquals ( STRING , false , org.springframework.jms.config.DefaultMessageListenerContainer . isReplyPubSubDomain ( ) ) ; JmsMessageEndpointManager org.springframework.jms.config.JmsMessageEndpointManager = this . org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING , JmsMessageEndpointManager .class ) ; JmsMessageEndpointManager org.springframework.jms.config.JmsMessageEndpointManager = this . org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING , JmsMessageEndpointManager .class ) ; assertEquals ( STRING , true , org.springframework.jms.config.JmsMessageEndpointManager . isPubSubDomain ( ) ) ; assertEquals ( STRING , true , org.springframework.jms.config.JmsMessageEndpointManager . isPubSubDomain ( ) ) ; assertEquals ( STRING , false , org.springframework.jms.config.JmsMessageEndpointManager . isReplyPubSubDomain ( ) ) ; assertEquals ( STRING , false , org.springframework.jms.config.JmsMessageEndpointManager . isReplyPubSubDomain ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ErrorHandler org.springframework.jms.config.ErrorHandler = this . org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( STRING , ErrorHandler .class ) ; ErrorHandler org.springframework.jms.config.ErrorHandler = org.springframework.jms.config.ErrorHandler ( STRING ) ; ErrorHandler org.springframework.jms.config.ErrorHandler = org.springframework.jms.config.ErrorHandler ( STRING ) ; ErrorHandler org.springframework.jms.config.ErrorHandler = org.springframework.jms.config.ErrorHandler ( DefaultMessageListenerContainer .class . java.lang.String ( ) + STRING ) ; assertSame ( org.springframework.jms.config.ErrorHandler , org.springframework.jms.config.ErrorHandler ) ; assertSame ( org.springframework.jms.config.ErrorHandler , org.springframework.jms.config.ErrorHandler ) ; assertNull ( org.springframework.jms.config.ErrorHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = int ( STRING ) ; int int = int ( STRING ) ; int int = int ( STRING ) ; int int = int ( STRING ) ; int int = int ( DefaultMessageListenerContainer .class . java.lang.String ( ) + STRING ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , int ) ; assertEquals ( java.lang.Integer . int , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . boolean ( STRING ) ) ; assertTrue ( STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . boolean ( STRING ) ) ; assertTrue ( STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . boolean ( STRING ) ) ; assertTrue ( STRING + DefaultMessageListenerContainer .class . java.lang.String ( ) + STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . boolean ( DefaultMessageListenerContainer .class . java.lang.String ( ) + STRING ) ) ; assertTrue ( STRING + JmsMessageEndpointManager .class . java.lang.String ( ) + STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . boolean ( JmsMessageEndpointManager .class . java.lang.String ( ) + STRING ) ) ; assertTrue ( STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . boolean ( STRING ) ) ; assertTrue ( STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . boolean ( STRING ) ) ; assertTrue ( STRING , org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Iterator<org.springframework.jms.config.ComponentDefinition> < ComponentDefinition > java.util.Iterator<org.springframework.jms.config.ComponentDefinition> = org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . java.util.Iterator<org.springframework.jms.config.ComponentDefinition> ( ) ; while ( java.util.Iterator<org.springframework.jms.config.ComponentDefinition> . hasNext ( ) ) { ComponentDefinition org.springframework.jms.config.ComponentDefinition = java.util.Iterator<org.springframework.jms.config.ComponentDefinition> . next ( ) ; assertNotNull ( STRING + org.springframework.jms.config.ComponentDefinition . getName ( ) + STRING , org.springframework.jms.config.ComponentDefinition . getSource ( ) ) ; void ( org.springframework.jms.config.ComponentDefinition ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ComponentDefinition org.springframework.jms.config.ComponentDefinition ) { BeanDefinition [] org.springframework.jms.config.BeanDefinition[] = org.springframework.jms.config.ComponentDefinition . getBeanDefinitions ( ) ; for ( BeanDefinition org.springframework.jms.config.BeanDefinition : org.springframework.jms.config.BeanDefinition[] ) { assertNotNull ( STRING , org.springframework.jms.config.BeanDefinition . getSource ( ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.jms.config.MessageListener org.springframework.jms.config.MessageListener ( java.lang.String java.lang.String ) { DefaultMessageListenerContainer org.springframework.jms.config.DefaultMessageListenerContainer = this . org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( java.lang.String , DefaultMessageListenerContainer .class ) ; return ( MessageListener ) org.springframework.jms.config.DefaultMessageListenerContainer . getMessageListener ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.config.ErrorHandler org.springframework.jms.config.ErrorHandler ( java.lang.String java.lang.String ) { DefaultMessageListenerContainer org.springframework.jms.config.DefaultMessageListenerContainer = this . org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( java.lang.String , DefaultMessageListenerContainer .class ) ; return ( ErrorHandler ) new DirectFieldAccessor ( org.springframework.jms.config.DefaultMessageListenerContainer ) . getPropertyValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.config.BackOff org.springframework.jms.config.BackOff ( java.lang.String java.lang.String ) { DefaultMessageListenerContainer org.springframework.jms.config.DefaultMessageListenerContainer = this . org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( java.lang.String , DefaultMessageListenerContainer .class ) ; return ( BackOff ) new DirectFieldAccessor ( org.springframework.jms.config.DefaultMessageListenerContainer ) . getPropertyValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> private long long ( java.lang.String java.lang.String ) { BackOff org.springframework.jms.config.BackOff = org.springframework.jms.config.BackOff ( java.lang.String ) ; assertEquals ( FixedBackOff .class , org.springframework.jms.config.BackOff . getClass ( ) ) ; return ( ( FixedBackOff ) org.springframework.jms.config.BackOff ) . getInterval ( ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.String java.lang.String ) { java.lang.Object java.lang.Object = this . org.springframework.jms.config.JmsNamespaceHandlerTests.ToolingTestApplicationContext . getBean ( java.lang.String ) ; if ( ! ( java.lang.Object instanceof Phased ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ; } return ( ( Phased ) java.lang.Object ) . getPhase ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.config.JmsListenerEndpoint org.springframework.jms.config.JmsListenerEndpoint ( ) { SimpleJmsListenerEndpoint org.springframework.jms.config.SimpleJmsListenerEndpoint = new SimpleJmsListenerEndpoint ( ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setMessageListener ( new MessageListenerAdapter ( ) ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setDestination ( STRING ) ; return org.springframework.jms.config.SimpleJmsListenerEndpoint ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.jms.config.Message ) { this . org.springframework.jms.config.Message = org.springframework.jms.config.Message ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { super( java.lang.String , java.lang.Class<> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( XmlBeanDefinitionReader org.springframework.jms.config.XmlBeanDefinitionReader ) { this . java.util.Set<org.springframework.jms.config.ComponentDefinition> = new java.util.HashSet <> ( ) ; org.springframework.jms.config.XmlBeanDefinitionReader . setEventListener ( new org.springframework.jms.config.JmsNamespaceHandlerTests.StoringReaderEventListener ( this . java.util.Set<org.springframework.jms.config.ComponentDefinition> ) ) ; org.springframework.jms.config.XmlBeanDefinitionReader . setSourceExtractor ( new PassThroughSourceExtractor ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { for ( ComponentDefinition org.springframework.jms.config.ComponentDefinition : this . java.util.Set<org.springframework.jms.config.ComponentDefinition> ) { if ( org.springframework.jms.config.ComponentDefinition instanceof CompositeComponentDefinition ) { ComponentDefinition [] org.springframework.jms.config.ComponentDefinition[] = ( ( CompositeComponentDefinition ) org.springframework.jms.config.ComponentDefinition ) . getNestedComponents ( ) ; for ( ComponentDefinition org.springframework.jms.config.ComponentDefinition : org.springframework.jms.config.ComponentDefinition[] ) { if ( org.springframework.jms.config.ComponentDefinition . getName ( ) . equals ( java.lang.String ) ) { return true ; } } } else { if ( org.springframework.jms.config.ComponentDefinition . getName ( ) . equals ( java.lang.String ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> public java.util.Iterator<org.springframework.jms.config.ComponentDefinition> < ComponentDefinition > java.util.Iterator<org.springframework.jms.config.ComponentDefinition> ( ) { return this . java.util.Set<org.springframework.jms.config.ComponentDefinition> . iterator ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Set<org.springframework.jms.config.ComponentDefinition> < ComponentDefinition > java.util.Set<org.springframework.jms.config.ComponentDefinition> ) { this . java.util.Set<org.springframework.jms.config.ComponentDefinition> = java.util.Set<org.springframework.jms.config.ComponentDefinition> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ComponentDefinition org.springframework.jms.config.ComponentDefinition ) { this . java.util.Set<org.springframework.jms.config.ComponentDefinition> . add ( org.springframework.jms.config.ComponentDefinition ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) {		}  <METHOD_END>
