<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.context.annotation.AnnotationMetadata . getAnnotationAttributes ( EnableMBeanExport .class . java.lang.String ( ) ) ; this . org.springframework.context.annotation.AnnotationAttributes = AnnotationAttributes . fromMap ( java.util.Map<java.lang.String,java.lang.Object> ) ; if ( this . org.springframework.context.annotation.AnnotationAttributes == null ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.context.annotation.AnnotationMetadata . getClassName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.context.annotation.Environment ) { this . org.springframework.context.annotation.Environment = org.springframework.context.annotation.Environment ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.context.annotation.BeanFactory ) { this . org.springframework.context.annotation.BeanFactory = org.springframework.context.annotation.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = java.lang.String ) @ Role ( BeanDefinition . ROLE_INFRASTRUCTURE ) public org.springframework.context.annotation.AnnotationMBeanExporter org.springframework.context.annotation.AnnotationMBeanExporter ( ) { AnnotationMBeanExporter org.springframework.context.annotation.AnnotationMBeanExporter = new AnnotationMBeanExporter ( ) ; void ( org.springframework.context.annotation.AnnotationMBeanExporter ) ; void ( org.springframework.context.annotation.AnnotationMBeanExporter ) ; void ( org.springframework.context.annotation.AnnotationMBeanExporter ) ; return org.springframework.context.annotation.AnnotationMBeanExporter ; }  <METHOD_END>
<METHOD_START> private void void ( AnnotationMBeanExporter org.springframework.context.annotation.AnnotationMBeanExporter ) { java.lang.String java.lang.String = this . org.springframework.context.annotation.AnnotationAttributes . getString ( STRING ) ; if ( java.lang.String != null && this . org.springframework.context.annotation.Environment != null ) { java.lang.String = this . org.springframework.context.annotation.Environment . resolvePlaceholders ( java.lang.String ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.context.annotation.AnnotationMBeanExporter . setDefaultDomain ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AnnotationMBeanExporter org.springframework.context.annotation.AnnotationMBeanExporter ) { java.lang.String java.lang.String = this . org.springframework.context.annotation.AnnotationAttributes . getString ( STRING ) ; if ( java.lang.String != null && this . org.springframework.context.annotation.Environment != null ) { java.lang.String = this . org.springframework.context.annotation.Environment . resolvePlaceholders ( java.lang.String ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.context.annotation.AnnotationMBeanExporter . setServer ( this . org.springframework.context.annotation.BeanFactory . getBean ( java.lang.String , javax.management.MBeanServer .class ) ) ; } else { org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform = org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform . org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform ( ) ; if ( org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform != null ) { org.springframework.context.annotation.AnnotationMBeanExporter . setServer ( org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform . javax.management.MBeanServer ( ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( AnnotationMBeanExporter org.springframework.context.annotation.AnnotationMBeanExporter ) { RegistrationPolicy org.springframework.context.annotation.RegistrationPolicy = this . org.springframework.context.annotation.AnnotationAttributes . getEnum ( STRING ) ; org.springframework.context.annotation.AnnotationMBeanExporter . setRegistrationPolicy ( org.springframework.context.annotation.RegistrationPolicy ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.management.MBeanServer javax.management.MBeanServer ( ) { try { return new JndiLocatorDelegate ( ) . lookup ( STRING , javax.management.MBeanServer .class ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { throw new MBeanServerNotFoundException ( STRING , javax.naming.NamingException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.management.MBeanServer javax.management.MBeanServer ( ) { WebSphereMBeanServerFactoryBean org.springframework.context.annotation.WebSphereMBeanServerFactoryBean = new WebSphereMBeanServerFactoryBean ( ) ; org.springframework.context.annotation.WebSphereMBeanServerFactoryBean . afterPropertiesSet ( ) ; return org.springframework.context.annotation.WebSphereMBeanServerFactoryBean . getObject ( ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public abstract javax.management.MBeanServer javax.management.MBeanServer ( )  <METHOD_END>
<METHOD_START> public static org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform ( ) { java.lang.ClassLoader java.lang.ClassLoader = org.springframework.context.annotation.MBeanExportConfiguration .class . java.lang.ClassLoader ( ) ; for ( org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform : org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform[] ( ) ) { if ( ClassUtils . isPresent ( org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform . java.lang.String , java.lang.ClassLoader ) ) { return org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform ; } } return null ; }  <METHOD_END>
