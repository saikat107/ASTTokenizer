<METHOD_START> public static org.springframework.web.servlet.support.WebApplicationContext org.springframework.web.servlet.support.WebApplicationContext ( HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest , ServletContext org.springframework.web.servlet.support.ServletContext ) { WebApplicationContext org.springframework.web.servlet.support.WebApplicationContext = ( WebApplicationContext ) org.springframework.web.servlet.support.HttpServletRequest . getAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ; if ( org.springframework.web.servlet.support.WebApplicationContext == null ) { if ( org.springframework.web.servlet.support.ServletContext != null ) { org.springframework.web.servlet.support.WebApplicationContext = WebApplicationContextUtils . getWebApplicationContext ( org.springframework.web.servlet.support.ServletContext ) ; } if ( org.springframework.web.servlet.support.WebApplicationContext == null ) { org.springframework.web.servlet.support.WebApplicationContext = ContextLoader . getCurrentWebApplicationContext ( ) ; } } return org.springframework.web.servlet.support.WebApplicationContext ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.support.WebApplicationContext org.springframework.web.servlet.support.WebApplicationContext ( HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest ) { return org.springframework.web.servlet.support.WebApplicationContext ( org.springframework.web.servlet.support.HttpServletRequest , org.springframework.web.servlet.support.HttpServletRequest . getServletContext ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.support.LocaleResolver org.springframework.web.servlet.support.LocaleResolver ( HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest ) { return ( LocaleResolver ) org.springframework.web.servlet.support.HttpServletRequest . getAttribute ( DispatcherServlet . LOCALE_RESOLVER_ATTRIBUTE ) ; }  <METHOD_END>
<METHOD_START> public static java.util.Locale java.util.Locale ( HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest ) { LocaleResolver org.springframework.web.servlet.support.LocaleResolver = org.springframework.web.servlet.support.LocaleResolver ( org.springframework.web.servlet.support.HttpServletRequest ) ; return ( org.springframework.web.servlet.support.LocaleResolver != null ? org.springframework.web.servlet.support.LocaleResolver . resolveLocale ( org.springframework.web.servlet.support.HttpServletRequest ) : org.springframework.web.servlet.support.HttpServletRequest . getLocale ( ) ) ; }  <METHOD_END>
<METHOD_START> public static java.util.TimeZone java.util.TimeZone ( HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest ) { LocaleResolver org.springframework.web.servlet.support.LocaleResolver = org.springframework.web.servlet.support.LocaleResolver ( org.springframework.web.servlet.support.HttpServletRequest ) ; if ( org.springframework.web.servlet.support.LocaleResolver instanceof LocaleContextResolver ) { LocaleContext org.springframework.web.servlet.support.LocaleContext = ( ( LocaleContextResolver ) org.springframework.web.servlet.support.LocaleResolver ) . resolveLocaleContext ( org.springframework.web.servlet.support.HttpServletRequest ) ; if ( org.springframework.web.servlet.support.LocaleContext instanceof TimeZoneAwareLocaleContext ) { return ( ( TimeZoneAwareLocaleContext ) org.springframework.web.servlet.support.LocaleContext ) . getTimeZone ( ) ; } } return null ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.support.ThemeResolver org.springframework.web.servlet.support.ThemeResolver ( HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest ) { return ( ThemeResolver ) org.springframework.web.servlet.support.HttpServletRequest . getAttribute ( DispatcherServlet . THEME_RESOLVER_ATTRIBUTE ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.support.ThemeSource org.springframework.web.servlet.support.ThemeSource ( HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest ) { return ( ThemeSource ) org.springframework.web.servlet.support.HttpServletRequest . getAttribute ( DispatcherServlet . THEME_SOURCE_ATTRIBUTE ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.support.Theme org.springframework.web.servlet.support.Theme ( HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest ) { ThemeResolver org.springframework.web.servlet.support.ThemeResolver = org.springframework.web.servlet.support.ThemeResolver ( org.springframework.web.servlet.support.HttpServletRequest ) ; ThemeSource org.springframework.web.servlet.support.ThemeSource = org.springframework.web.servlet.support.ThemeSource ( org.springframework.web.servlet.support.HttpServletRequest ) ; if ( org.springframework.web.servlet.support.ThemeResolver != null && org.springframework.web.servlet.support.ThemeSource != null ) { java.lang.String java.lang.String = org.springframework.web.servlet.support.ThemeResolver . resolveThemeName ( org.springframework.web.servlet.support.HttpServletRequest ) ; return org.springframework.web.servlet.support.ThemeSource . getTheme ( java.lang.String ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ( HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest ) { return ( java.util.Map<java.lang.String,?> < java.lang.String , ? > ) org.springframework.web.servlet.support.HttpServletRequest . getAttribute ( DispatcherServlet . INPUT_FLASH_MAP_ATTRIBUTE ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.support.FlashMap org.springframework.web.servlet.support.FlashMap ( HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest ) { return ( FlashMap ) org.springframework.web.servlet.support.HttpServletRequest . getAttribute ( DispatcherServlet . OUTPUT_FLASH_MAP_ATTRIBUTE ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.support.FlashMapManager org.springframework.web.servlet.support.FlashMapManager ( HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest ) { return ( FlashMapManager ) org.springframework.web.servlet.support.HttpServletRequest . getAttribute ( DispatcherServlet . FLASH_MAP_MANAGER_ATTRIBUTE ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String , HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.support.HttpServletResponse ) { FlashMap org.springframework.web.servlet.support.FlashMap = org.springframework.web.servlet.support.FlashMap ( org.springframework.web.servlet.support.HttpServletRequest ) ; if ( CollectionUtils . isEmpty ( org.springframework.web.servlet.support.FlashMap ) ) { return; } UriComponents org.springframework.web.servlet.support.UriComponents = UriComponentsBuilder . fromUriString ( java.lang.String ) . build ( ) ; org.springframework.web.servlet.support.FlashMap . setTargetRequestPath ( org.springframework.web.servlet.support.UriComponents . getPath ( ) ) ; org.springframework.web.servlet.support.FlashMap . addTargetRequestParams ( org.springframework.web.servlet.support.UriComponents . getQueryParams ( ) ) ; FlashMapManager org.springframework.web.servlet.support.FlashMapManager = org.springframework.web.servlet.support.FlashMapManager ( org.springframework.web.servlet.support.HttpServletRequest ) ; Assert . state ( org.springframework.web.servlet.support.FlashMapManager != null , STRING ) ; org.springframework.web.servlet.support.FlashMapManager . saveOutputFlashMap ( org.springframework.web.servlet.support.FlashMap , org.springframework.web.servlet.support.HttpServletRequest , org.springframework.web.servlet.support.HttpServletResponse ) ; }  <METHOD_END>
