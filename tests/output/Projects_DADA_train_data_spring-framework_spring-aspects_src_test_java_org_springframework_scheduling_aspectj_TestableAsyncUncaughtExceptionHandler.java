<METHOD_START> void ( ) { this( false ); }  <METHOD_END>
<METHOD_START> void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object ... java.lang.Object[] ) { org.springframework.scheduling.aspectj.TestableAsyncUncaughtExceptionHandler.UncaughtExceptionDescriptor = new org.springframework.scheduling.aspectj.TestableAsyncUncaughtExceptionHandler.UncaughtExceptionDescriptor ( java.lang.Throwable , java.lang.reflect.Method ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; if ( boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.scheduling.aspectj.TestableAsyncUncaughtExceptionHandler.UncaughtExceptionDescriptor != null ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > java.lang.Class<? extends java.lang.Throwable> ) { assertNotNull ( STRING , org.springframework.scheduling.aspectj.TestableAsyncUncaughtExceptionHandler.UncaughtExceptionDescriptor ) ; assertEquals ( STRING , java.lang.Class<> , org.springframework.scheduling.aspectj.TestableAsyncUncaughtExceptionHandler.UncaughtExceptionDescriptor . java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) ) ; assertEquals ( STRING , java.lang.reflect.Method , org.springframework.scheduling.aspectj.TestableAsyncUncaughtExceptionHandler.UncaughtExceptionDescriptor . java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { try { this . java.util.concurrent.CountDownLatch . boolean ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } }  <METHOD_END>
<METHOD_START> private void ( java.lang.Throwable java.lang.Throwable , java.lang.reflect.Method java.lang.reflect.Method ) { this . java.lang.Throwable = java.lang.Throwable ; this . java.lang.reflect.Method = java.lang.reflect.Method ; }  <METHOD_END>
