<METHOD_START> public void ( MongoConverter org.springframework.data.mongodb.core.convert.MongoConverter ) { this . org.springframework.data.mongodb.core.convert.MongoConverter = org.springframework.data.mongodb.core.convert.MongoConverter ; this . org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> = org.springframework.data.mongodb.core.convert.MongoConverter . getMappingContext ( ) ; java.util.Map<org.springframework.data.mongodb.core.convert.StringMatcher,org.springframework.data.mongodb.core.convert.Type> . put ( StringMatcher . EXACT , Type . SIMPLE_PROPERTY ) ; java.util.Map<org.springframework.data.mongodb.core.convert.StringMatcher,org.springframework.data.mongodb.core.convert.Type> . put ( StringMatcher . CONTAINING , Type . CONTAINING ) ; java.util.Map<org.springframework.data.mongodb.core.convert.StringMatcher,org.springframework.data.mongodb.core.convert.Type> . put ( StringMatcher . STARTING , Type . STARTING_WITH ) ; java.util.Map<org.springframework.data.mongodb.core.convert.StringMatcher,org.springframework.data.mongodb.core.convert.Type> . put ( StringMatcher . ENDING , Type . ENDING_WITH ) ; java.util.Map<org.springframework.data.mongodb.core.convert.StringMatcher,org.springframework.data.mongodb.core.convert.Type> . put ( StringMatcher . REGEX , Type . REGEX ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( Example < ? > org.springframework.data.mongodb.core.convert.Example<?> ) { Assert . notNull ( org.springframework.data.mongodb.core.convert.Example<> , STRING ) ; return org.springframework.data.mongodb.core.convert.Document ( org.springframework.data.mongodb.core.convert.Example<> , org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.Example<> . getProbeType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( Example < ? > org.springframework.data.mongodb.core.convert.Example<?> , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> ) { Assert . notNull ( org.springframework.data.mongodb.core.convert.Example<> , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> , STRING ) ; Document org.springframework.data.mongodb.core.convert.Document = ( Document ) org.springframework.data.mongodb.core.convert.MongoConverter . convertToMongoType ( org.springframework.data.mongodb.core.convert.Example<> . getProbe ( ) ) ; if( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getIdProperty ( ) . isPresent ( ) && ! org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getIdentifierAccessor ( org.springframework.data.mongodb.core.convert.Example<> . getProbe ( ) ) . getIdentifier ( ) . isPresent ( ) ) { org.springframework.data.mongodb.core.convert.Document . remove ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getIdProperty ( ) . get ( ) . getFieldName ( ) ) ; } ExampleMatcherAccessor org.springframework.data.mongodb.core.convert.ExampleMatcherAccessor = new ExampleMatcherAccessor ( org.springframework.data.mongodb.core.convert.Example<> . getMatcher ( ) ) ; void ( STRING , org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.Example<> . getProbeType ( ) , org.springframework.data.mongodb.core.convert.ExampleMatcherAccessor ) ; Document org.springframework.data.mongodb.core.convert.Document = ObjectUtils . nullSafeEquals ( NullHandler . INCLUDE , org.springframework.data.mongodb.core.convert.ExampleMatcherAccessor . getNullHandler ( ) ) ? org.springframework.data.mongodb.core.convert.Document : new Document ( SerializationUtils . flattenMap ( org.springframework.data.mongodb.core.convert.Document ) ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.Example<> . getMatcher ( ) . isAllMatching ( ) ? org.springframework.data.mongodb.core.convert.Document : org.springframework.data.mongodb.core.convert.Document ( org.springframework.data.mongodb.core.convert.Document ) ; this . org.springframework.data.mongodb.core.convert.MongoConverter . getTypeMapper ( ) . writeTypeRestrictions ( org.springframework.data.mongodb.core.convert.Document , java.util.Set<java.lang.Class<?>> ( org.springframework.data.mongodb.core.convert.Example<> ) ) ; return org.springframework.data.mongodb.core.convert.Document ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( Document org.springframework.data.mongodb.core.convert.Document ) { java.util.List<org.springframework.data.mongodb.core.convert.Document> < Document > java.util.List<org.springframework.data.mongodb.core.convert.Document> = new java.util.ArrayList<org.springframework.data.mongodb.core.convert.Document> < Document > ( org.springframework.data.mongodb.core.convert.Document . keySet ( ) . size ( ) ) ; for ( java.lang.String java.lang.String : org.springframework.data.mongodb.core.convert.Document . keySet ( ) ) { java.util.List<org.springframework.data.mongodb.core.convert.Document> . add ( new Document ( java.lang.String , org.springframework.data.mongodb.core.convert.Document . get ( java.lang.String ) ) ) ; } return new Document ( STRING , java.util.List<org.springframework.data.mongodb.core.convert.Document> ) ; }  <METHOD_END>
<METHOD_START> private java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( Example < ? > org.springframework.data.mongodb.core.convert.Example<?> ) { java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.HashSet<java.lang.Class<?>> < java.lang.Class<?> < ? > > ( ) ; for ( TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> : org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getManagedTypes ( ) ) { if ( org.springframework.data.mongodb.core.convert.Example<> . getProbeType ( ) . isAssignableFrom ( org.springframework.data.mongodb.core.convert.TypeInformation<> . getType ( ) ) ) { java.util.Set<java.lang.Class<?>> . boolean ( org.springframework.data.mongodb.core.convert.TypeInformation<> . getType ( ) ) ; } } return java.util.Set<java.lang.Class<?>> ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getRequiredPersistentEntity ( java.lang.Class<> ) ; java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String . java.lang.String[] ( STRING ) ) . java.util.Iterator<java.lang.String> ( ) ; final java.util.Stack<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> < MongoPersistentProperty > java.util.Stack<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> = new java.util.Stack<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> < MongoPersistentProperty > ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; while ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getPersistentProperty ( java.lang.String ) . orElse ( null ) ; if ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty == null ) { org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . doWithProperties ( ( PropertyHandler < MongoPersistentProperty > ) property -> { if ( property . getFieldName ( ) . equals ( part ) ) { stack . push ( property ) ; } } ) ; if ( java.util.Stack<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . isEmpty ( ) ) { return STRING ; } org.springframework.data.mongodb.core.convert.MongoPersistentProperty = java.util.Stack<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . pop ( ) ; } java.util.List<java.lang.String> . boolean ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getName ( ) ) ; if ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . isEntity ( ) && org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . hasPersistentEntityFor ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getActualType ( ) ) ) { org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getActualType ( ) ) ; } else { break; } } return StringUtils . collectionToDelimitedString ( java.util.List<java.lang.String> , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , Document org.springframework.data.mongodb.core.convert.Document , java.lang.Class<?> < ? > java.lang.Class<?> , ExampleMatcherAccessor org.springframework.data.mongodb.core.convert.ExampleMatcherAccessor ) { if ( ! ( org.springframework.data.mongodb.core.convert.Document instanceof Document ) ) { return; } java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> < java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> = ( ( Document ) org.springframework.data.mongodb.core.convert.Document ) . entrySet ( ) . iterator ( ) ; while ( java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> . boolean ( ) ) { java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> = java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> . java.util.Map.Entry<java.lang.String,java.lang.Object> ( ) ; java.lang.String java.lang.String = StringUtils . hasText ( java.lang.String ) ? java.lang.String + STRING + java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) : java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String , java.lang.Class<> ) ; if ( boolean ( java.util.Map.Entry<java.lang.String,java.lang.Object> ) ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> . void ( ) ; continue; } if ( org.springframework.data.mongodb.core.convert.ExampleMatcherAccessor . isIgnoredPath ( java.lang.String ) || org.springframework.data.mongodb.core.convert.ExampleMatcherAccessor . isIgnoredPath ( java.lang.String ) ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> . void ( ) ; continue; } StringMatcher org.springframework.data.mongodb.core.convert.StringMatcher = org.springframework.data.mongodb.core.convert.ExampleMatcherAccessor . getDefaultStringMatcher ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; boolean boolean = org.springframework.data.mongodb.core.convert.ExampleMatcherAccessor . isIgnoreCaseEnabled ( ) ; if ( org.springframework.data.mongodb.core.convert.ExampleMatcherAccessor . hasPropertySpecifiers ( ) ) { java.lang.String = org.springframework.data.mongodb.core.convert.ExampleMatcherAccessor . hasPropertySpecifier ( java.lang.String ) ? java.lang.String : java.lang.String ( java.lang.String , java.lang.Class<> ) ; org.springframework.data.mongodb.core.convert.StringMatcher = org.springframework.data.mongodb.core.convert.ExampleMatcherAccessor . getStringMatcherForPath ( java.lang.String ) ; boolean = org.springframework.data.mongodb.core.convert.ExampleMatcherAccessor . isIgnoreCaseForPath ( java.lang.String ) ; } if ( org.springframework.data.mongodb.core.convert.ExampleMatcherAccessor . hasPropertySpecifier ( java.lang.String ) ) { PropertyValueTransformer org.springframework.data.mongodb.core.convert.PropertyValueTransformer = org.springframework.data.mongodb.core.convert.ExampleMatcherAccessor . getValueTransformerForPath ( java.lang.String ) ; java.lang.Object = org.springframework.data.mongodb.core.convert.PropertyValueTransformer . convert ( java.lang.Object ) ; if ( java.lang.Object == null ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> . void ( ) ; continue; } java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.Object ) ; } if ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) instanceof java.lang.String ) { void ( java.util.Map.Entry<java.lang.String,java.lang.Object> , org.springframework.data.mongodb.core.convert.StringMatcher , boolean ) ; } else if ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) instanceof Document ) { void ( java.lang.String , ( Document ) java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) , java.lang.Class<> , org.springframework.data.mongodb.core.convert.ExampleMatcherAccessor ) ; } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> ) { return java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) . boolean ( STRING ) && java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) == null || java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) . boolean ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> , StringMatcher org.springframework.data.mongodb.core.convert.StringMatcher , boolean boolean ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; if ( ObjectUtils . nullSafeEquals ( StringMatcher . DEFAULT , org.springframework.data.mongodb.core.convert.StringMatcher ) ) { if ( boolean ) { org.springframework.data.mongodb.core.convert.Document . put ( STRING , java.util.regex.Pattern . java.lang.String ( ( java.lang.String ) java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ) ; java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.data.mongodb.core.convert.Document ) ; } } else { Type org.springframework.data.mongodb.core.convert.Type = java.util.Map<org.springframework.data.mongodb.core.convert.StringMatcher,org.springframework.data.mongodb.core.convert.Type> . get ( org.springframework.data.mongodb.core.convert.StringMatcher ) ; java.lang.String java.lang.String = MongoRegexCreator . INSTANCE . toRegularExpression ( ( java.lang.String ) java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) , org.springframework.data.mongodb.core.convert.Type ) ; org.springframework.data.mongodb.core.convert.Document . put ( STRING , java.lang.String ) ; java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.data.mongodb.core.convert.Document ) ; } if ( boolean ) { org.springframework.data.mongodb.core.convert.Document . put ( STRING , STRING ) ; } }  <METHOD_END>
