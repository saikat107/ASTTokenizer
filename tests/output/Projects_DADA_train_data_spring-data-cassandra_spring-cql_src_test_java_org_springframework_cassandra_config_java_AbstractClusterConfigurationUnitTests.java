<METHOD_START> @ Test public void void ( ) java.lang.Exception { CassandraCqlClusterFactoryBean org.springframework.cassandra.config.java.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.java.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) {} ; Cluster org.springframework.cassandra.config.java.Cluster = org.springframework.cassandra.config.java.Cluster ( org.springframework.cassandra.config.java.AbstractClusterConfiguration ) ; assertThat ( org.springframework.cassandra.config.java.Cluster ) . isNotNull ( ) ; assertThat ( org.springframework.cassandra.config.java.Cluster . isClosed ( ) ) . isFalse ( ) ; assertThat ( org.springframework.cassandra.config.java.Configuration ( org.springframework.cassandra.config.java.Cluster ) . getMetricsOptions ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.cassandra.config.java.Configuration ( org.springframework.cassandra.config.java.Cluster ) . getMetricsOptions ( ) . isJMXReportingEnabled ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final CompressionType org.springframework.cassandra.config.java.CompressionType = CompressionType . SNAPPY ; AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected org.springframework.cassandra.config.java.CompressionType org.springframework.cassandra.config.java.CompressionType ( ) { return org.springframework.cassandra.config.java.CompressionType ; } } ; Cluster org.springframework.cassandra.config.java.Cluster = org.springframework.cassandra.config.java.Cluster ( org.springframework.cassandra.config.java.AbstractClusterConfiguration ) ; assertThat ( org.springframework.cassandra.config.java.Configuration ( org.springframework.cassandra.config.java.Cluster ) . getProtocolOptions ( ) . getCompression ( ) ) . isEqualTo ( Compression . SNAPPY ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.config.java.CompressionType org.springframework.cassandra.config.java.CompressionType ( ) { return org.springframework.cassandra.config.java.CompressionType ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final PoolingOptions org.springframework.cassandra.config.java.PoolingOptions = new PoolingOptions ( ) ; AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected org.springframework.cassandra.config.java.PoolingOptions org.springframework.cassandra.config.java.PoolingOptions ( ) { return org.springframework.cassandra.config.java.PoolingOptions ; } } ; Cluster org.springframework.cassandra.config.java.Cluster = org.springframework.cassandra.config.java.Cluster ( org.springframework.cassandra.config.java.AbstractClusterConfiguration ) ; assertThat ( org.springframework.cassandra.config.java.Configuration ( org.springframework.cassandra.config.java.Cluster ) . getPoolingOptions ( ) ) . isEqualTo ( org.springframework.cassandra.config.java.PoolingOptions ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.config.java.PoolingOptions org.springframework.cassandra.config.java.PoolingOptions ( ) { return org.springframework.cassandra.config.java.PoolingOptions ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final SocketOptions org.springframework.cassandra.config.java.SocketOptions = new SocketOptions ( ) ; AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected org.springframework.cassandra.config.java.SocketOptions org.springframework.cassandra.config.java.SocketOptions ( ) { return org.springframework.cassandra.config.java.SocketOptions ; } } ; Cluster org.springframework.cassandra.config.java.Cluster = org.springframework.cassandra.config.java.Cluster ( org.springframework.cassandra.config.java.AbstractClusterConfiguration ) ; assertThat ( org.springframework.cassandra.config.java.Configuration ( org.springframework.cassandra.config.java.Cluster ) . getSocketOptions ( ) ) . isEqualTo ( org.springframework.cassandra.config.java.SocketOptions ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.config.java.SocketOptions org.springframework.cassandra.config.java.SocketOptions ( ) { return org.springframework.cassandra.config.java.SocketOptions ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final QueryOptions org.springframework.cassandra.config.java.QueryOptions = new QueryOptions ( ) ; AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected org.springframework.cassandra.config.java.QueryOptions org.springframework.cassandra.config.java.QueryOptions ( ) { return org.springframework.cassandra.config.java.QueryOptions ; } } ; Cluster org.springframework.cassandra.config.java.Cluster = org.springframework.cassandra.config.java.Cluster ( org.springframework.cassandra.config.java.AbstractClusterConfiguration ) ; assertThat ( org.springframework.cassandra.config.java.Configuration ( org.springframework.cassandra.config.java.Cluster ) . getQueryOptions ( ) ) . isEqualTo ( org.springframework.cassandra.config.java.QueryOptions ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.config.java.QueryOptions org.springframework.cassandra.config.java.QueryOptions ( ) { return org.springframework.cassandra.config.java.QueryOptions ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final AuthProvider org.springframework.cassandra.config.java.AuthProvider = new PlainTextAuthProvider ( STRING , STRING ) ; AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected org.springframework.cassandra.config.java.AuthProvider org.springframework.cassandra.config.java.AuthProvider ( ) { return org.springframework.cassandra.config.java.AuthProvider ; } } ; Cluster org.springframework.cassandra.config.java.Cluster = org.springframework.cassandra.config.java.Cluster ( org.springframework.cassandra.config.java.AbstractClusterConfiguration ) ; assertThat ( org.springframework.cassandra.config.java.Configuration ( org.springframework.cassandra.config.java.Cluster ) . getProtocolOptions ( ) . getAuthProvider ( ) ) . isEqualTo ( org.springframework.cassandra.config.java.AuthProvider ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.config.java.AuthProvider org.springframework.cassandra.config.java.AuthProvider ( ) { return org.springframework.cassandra.config.java.AuthProvider ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final LoadBalancingPolicy org.springframework.cassandra.config.java.LoadBalancingPolicy = new RoundRobinPolicy ( ) ; AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected org.springframework.cassandra.config.java.LoadBalancingPolicy org.springframework.cassandra.config.java.LoadBalancingPolicy ( ) { return org.springframework.cassandra.config.java.LoadBalancingPolicy ; } } ; Cluster org.springframework.cassandra.config.java.Cluster = org.springframework.cassandra.config.java.Cluster ( org.springframework.cassandra.config.java.AbstractClusterConfiguration ) ; assertThat ( org.springframework.cassandra.config.java.Configuration ( org.springframework.cassandra.config.java.Cluster ) . getPolicies ( ) . getLoadBalancingPolicy ( ) ) . isEqualTo ( org.springframework.cassandra.config.java.LoadBalancingPolicy ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.config.java.LoadBalancingPolicy org.springframework.cassandra.config.java.LoadBalancingPolicy ( ) { return org.springframework.cassandra.config.java.LoadBalancingPolicy ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final ReconnectionPolicy org.springframework.cassandra.config.java.ReconnectionPolicy = new ExponentialReconnectionPolicy ( NUMBER , NUMBER ) ; AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected org.springframework.cassandra.config.java.ReconnectionPolicy org.springframework.cassandra.config.java.ReconnectionPolicy ( ) { return org.springframework.cassandra.config.java.ReconnectionPolicy ; } } ; Cluster org.springframework.cassandra.config.java.Cluster = org.springframework.cassandra.config.java.Cluster ( org.springframework.cassandra.config.java.AbstractClusterConfiguration ) ; assertThat ( org.springframework.cassandra.config.java.Configuration ( org.springframework.cassandra.config.java.Cluster ) . getPolicies ( ) . getReconnectionPolicy ( ) ) . isEqualTo ( org.springframework.cassandra.config.java.ReconnectionPolicy ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.config.java.ReconnectionPolicy org.springframework.cassandra.config.java.ReconnectionPolicy ( ) { return org.springframework.cassandra.config.java.ReconnectionPolicy ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected org.springframework.cassandra.config.java.ProtocolVersion org.springframework.cassandra.config.java.ProtocolVersion ( ) { return ProtocolVersion . V2 ; } } ; Cluster org.springframework.cassandra.config.java.Cluster = org.springframework.cassandra.config.java.Cluster ( org.springframework.cassandra.config.java.AbstractClusterConfiguration ) ; assertThat ( org.springframework.cassandra.config.java.Configuration ( org.springframework.cassandra.config.java.Cluster ) . getProtocolOptions ( ) ) . extracting ( STRING ) . contains ( ProtocolVersion . V2 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.config.java.ProtocolVersion org.springframework.cassandra.config.java.ProtocolVersion ( ) { return ProtocolVersion . V2 ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected boolean boolean ( ) { return false ; } } ; Cluster org.springframework.cassandra.config.java.Cluster = org.springframework.cassandra.config.java.Cluster ( org.springframework.cassandra.config.java.AbstractClusterConfiguration ) ; assertThat ( org.springframework.cassandra.config.java.Configuration ( org.springframework.cassandra.config.java.Cluster ) . getMetricsOptions ( ) . isEnabled ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.List<org.springframework.cassandra.config.java.CreateKeyspaceSpecification> < CreateKeyspaceSpecification > java.util.List<org.springframework.cassandra.config.java.CreateKeyspaceSpecification> = java.util.Collections . java.util.List ( CreateKeyspaceSpecification . createKeyspace ( ) ) ; AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected java.util.List<org.springframework.cassandra.config.java.CreateKeyspaceSpecification> < CreateKeyspaceSpecification > java.util.List<org.springframework.cassandra.config.java.CreateKeyspaceSpecification> ( ) { return java.util.List<org.springframework.cassandra.config.java.CreateKeyspaceSpecification> ; } } ; assertThat ( org.springframework.cassandra.config.java.AbstractClusterConfiguration . cluster ( ) . getKeyspaceCreations ( ) ) . isEqualTo ( java.util.List<org.springframework.cassandra.config.java.CreateKeyspaceSpecification> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.cassandra.config.java.CreateKeyspaceSpecification> < CreateKeyspaceSpecification > java.util.List<org.springframework.cassandra.config.java.CreateKeyspaceSpecification> ( ) { return java.util.List<org.springframework.cassandra.config.java.CreateKeyspaceSpecification> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.List<org.springframework.cassandra.config.java.DropKeyspaceSpecification> < DropKeyspaceSpecification > java.util.List<org.springframework.cassandra.config.java.DropKeyspaceSpecification> = java.util.Collections . java.util.List ( DropKeyspaceSpecification . dropKeyspace ( ) ) ; AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected java.util.List<org.springframework.cassandra.config.java.DropKeyspaceSpecification> < DropKeyspaceSpecification > java.util.List<org.springframework.cassandra.config.java.DropKeyspaceSpecification> ( ) { return java.util.List<org.springframework.cassandra.config.java.DropKeyspaceSpecification> ; } } ; assertThat ( org.springframework.cassandra.config.java.AbstractClusterConfiguration . cluster ( ) . getKeyspaceDrops ( ) ) . isEqualTo ( java.util.List<org.springframework.cassandra.config.java.DropKeyspaceSpecification> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.cassandra.config.java.DropKeyspaceSpecification> < DropKeyspaceSpecification > java.util.List<org.springframework.cassandra.config.java.DropKeyspaceSpecification> ( ) { return java.util.List<org.springframework.cassandra.config.java.DropKeyspaceSpecification> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ; } } ; assertThat ( org.springframework.cassandra.config.java.AbstractClusterConfiguration . cluster ( ) . getStartupScripts ( ) ) . isEqualTo ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ; } } ; assertThat ( org.springframework.cassandra.config.java.AbstractClusterConfiguration . cluster ( ) . getShutdownScripts ( ) ) . isEqualTo ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final AddressTranslator org.springframework.cassandra.config.java.AddressTranslator = mock ( AddressTranslator .class ) ; AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected org.springframework.cassandra.config.java.AddressTranslator org.springframework.cassandra.config.java.AddressTranslator ( ) { return org.springframework.cassandra.config.java.AddressTranslator ; } } ; assertThat ( org.springframework.cassandra.config.java.Policies ( org.springframework.cassandra.config.java.Cluster ( org.springframework.cassandra.config.java.AbstractClusterConfiguration ) ) . getAddressTranslator ( ) ) . isEqualTo ( org.springframework.cassandra.config.java.AddressTranslator ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.config.java.AddressTranslator org.springframework.cassandra.config.java.AddressTranslator ( ) { return org.springframework.cassandra.config.java.AddressTranslator ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final ClusterBuilderConfigurer org.springframework.cassandra.config.java.ClusterBuilderConfigurer = mock ( ClusterBuilderConfigurer .class ) ; AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected org.springframework.cassandra.config.java.ClusterBuilderConfigurer org.springframework.cassandra.config.java.ClusterBuilderConfigurer ( ) { return org.springframework.cassandra.config.java.ClusterBuilderConfigurer ; } } ; assertThat ( org.springframework.cassandra.config.java.Cluster ( org.springframework.cassandra.config.java.AbstractClusterConfiguration ) ) . isNotNull ( ) ; verify ( org.springframework.cassandra.config.java.ClusterBuilderConfigurer , times ( NUMBER ) ) . configure ( isA ( Cluster . Cluster .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.config.java.ClusterBuilderConfigurer org.springframework.cassandra.config.java.ClusterBuilderConfigurer ( ) { return org.springframework.cassandra.config.java.ClusterBuilderConfigurer ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; } } ; assertThat ( org.springframework.cassandra.config.java.Cluster ( org.springframework.cassandra.config.java.AbstractClusterConfiguration ) . getClusterName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected int int ( ) { return NUMBER ; } } ; assertThat ( org.springframework.cassandra.config.java.ProtocolOptions ( org.springframework.cassandra.config.java.Cluster ( org.springframework.cassandra.config.java.AbstractClusterConfiguration ) ) . getMaxSchemaAgreementWaitSeconds ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final SpeculativeExecutionPolicy org.springframework.cassandra.config.java.SpeculativeExecutionPolicy = mock ( SpeculativeExecutionPolicy .class ) ; AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected org.springframework.cassandra.config.java.SpeculativeExecutionPolicy org.springframework.cassandra.config.java.SpeculativeExecutionPolicy ( ) { return org.springframework.cassandra.config.java.SpeculativeExecutionPolicy ; } } ; assertThat ( org.springframework.cassandra.config.java.Policies ( org.springframework.cassandra.config.java.Cluster ( org.springframework.cassandra.config.java.AbstractClusterConfiguration ) ) . getSpeculativeExecutionPolicy ( ) ) . isEqualTo ( org.springframework.cassandra.config.java.SpeculativeExecutionPolicy ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.config.java.SpeculativeExecutionPolicy org.springframework.cassandra.config.java.SpeculativeExecutionPolicy ( ) { return org.springframework.cassandra.config.java.SpeculativeExecutionPolicy ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final TimestampGenerator org.springframework.cassandra.config.java.TimestampGenerator = mock ( TimestampGenerator .class ) ; AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration = new AbstractClusterConfiguration ( ) { @ java.lang.Override protected org.springframework.cassandra.config.java.TimestampGenerator org.springframework.cassandra.config.java.TimestampGenerator ( ) { return org.springframework.cassandra.config.java.TimestampGenerator ; } } ; assertThat ( org.springframework.cassandra.config.java.Policies ( org.springframework.cassandra.config.java.Cluster ( org.springframework.cassandra.config.java.AbstractClusterConfiguration ) ) . getTimestampGenerator ( ) ) . isEqualTo ( org.springframework.cassandra.config.java.TimestampGenerator ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.config.java.TimestampGenerator org.springframework.cassandra.config.java.TimestampGenerator ( ) { return org.springframework.cassandra.config.java.TimestampGenerator ; }  <METHOD_END>
<METHOD_START> private org.springframework.cassandra.config.java.Policies org.springframework.cassandra.config.java.Policies ( Cluster org.springframework.cassandra.config.java.Cluster ) { return org.springframework.cassandra.config.java.Configuration ( org.springframework.cassandra.config.java.Cluster ) . getPolicies ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cassandra.config.java.ProtocolOptions org.springframework.cassandra.config.java.ProtocolOptions ( Cluster org.springframework.cassandra.config.java.Cluster ) { return org.springframework.cassandra.config.java.Configuration ( org.springframework.cassandra.config.java.Cluster ) . getProtocolOptions ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cassandra.config.java.Configuration org.springframework.cassandra.config.java.Configuration ( Cluster org.springframework.cassandra.config.java.Cluster ) { return org.springframework.cassandra.config.java.Cluster . getConfiguration ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cassandra.config.java.Cluster org.springframework.cassandra.config.java.Cluster ( AbstractClusterConfiguration org.springframework.cassandra.config.java.AbstractClusterConfiguration ) throws java.lang.Exception { CassandraCqlClusterFactoryBean org.springframework.cassandra.config.java.CassandraCqlClusterFactoryBean = org.springframework.cassandra.config.java.AbstractClusterConfiguration . cluster ( ) ; org.springframework.cassandra.config.java.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; return org.springframework.cassandra.config.java.CassandraCqlClusterFactoryBean . getObject ( ) ; }  <METHOD_END>
