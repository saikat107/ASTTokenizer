<METHOD_START> @ Test public void void ( ) java.lang.Throwable { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Object .class . java.lang.reflect.Method ( STRING ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; final java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.LinkedList<java.lang.Object> <> ( ) ; java.util.List<java.lang.Object> . boolean ( new MethodInterceptor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { return java.lang.Object ; } } ) ; ReflectiveMethodInvocation org.springframework.aop.framework.ReflectiveMethodInvocation = new ReflectiveMethodInvocation ( java.lang.Object , null , java.lang.reflect.Method , null , null , java.util.List<java.lang.Object> ) ; java.lang.Object java.lang.Object = org.springframework.aop.framework.ReflectiveMethodInvocation . proceed ( ) ; assertTrue ( STRING , java.lang.Object == java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { java.lang.Object java.lang.Object = new TestBean ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; } } ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.LinkedList<java.lang.Object> <> ( ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Object .class . java.lang.reflect.Method ( STRING ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; ReflectiveMethodInvocation org.springframework.aop.framework.ReflectiveMethodInvocation = new ReflectiveMethodInvocation ( java.lang.Object , java.lang.Object , java.lang.reflect.Method , null , null , java.util.List<java.lang.Object> ) ; org.springframework.aop.framework.ReflectiveMethodInvocation . toString ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
