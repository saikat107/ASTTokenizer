<METHOD_START> public void ( RedisTemplate < java.lang.String , ? > org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,?> ) { Assert . notNull ( org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> , STRING ) ; this . org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,?> = org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void ( RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory ) { Assert . notNull ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; this . org.springframework.integration.redis.outbound.RedisConnectionFactory = org.springframework.integration.redis.outbound.RedisConnectionFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . void ( new LiteralExpression ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.redis.outbound.Expression ) { Assert . notNull ( org.springframework.integration.redis.outbound.Expression , STRING ) ; this . org.springframework.integration.redis.outbound.Expression = org.springframework.integration.redis.outbound.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( CollectionType org.springframework.integration.redis.outbound.CollectionType ) { this . org.springframework.integration.redis.outbound.CollectionType = org.springframework.integration.redis.outbound.CollectionType ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.redis.outbound.Expression ) { Assert . notNull ( org.springframework.integration.redis.outbound.Expression , STRING ) ; this . org.springframework.integration.redis.outbound.Expression = org.springframework.integration.redis.outbound.Expression ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { this . org.springframework.integration.redis.outbound.StandardEvaluationContext = ExpressionUtils . createStandardEvaluationContext ( this . getBeanFactory ( ) ) ; Assert . state ( ! this . boolean || ( this . org.springframework.integration.redis.outbound.CollectionType == CollectionType . MAP || this . org.springframework.integration.redis.outbound.CollectionType == CollectionType . PROPERTIES ) , STRING ) ; if ( ! this . boolean ) { if ( ! this . boolean ) { RedisTemplate < java.lang.String , java.lang.Object > org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.lang.Object> = new RedisTemplate < java.lang.String , java.lang.Object > ( ) ; StringRedisSerializer org.springframework.integration.redis.outbound.StringRedisSerializer = new StringRedisSerializer ( ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.lang.Object> . setKeySerializer ( org.springframework.integration.redis.outbound.StringRedisSerializer ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.lang.Object> . setHashKeySerializer ( org.springframework.integration.redis.outbound.StringRedisSerializer ) ; this . org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,?> = org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.lang.Object> ; } this . org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . setConnectionFactory ( this . org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; this . org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . afterPropertiesSet ( ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.redis.outbound.Message<?> ) throws java.lang.Exception { java.lang.String java.lang.String = this . org.springframework.integration.redis.outbound.Expression . getValue ( this . org.springframework.integration.redis.outbound.StandardEvaluationContext , org.springframework.integration.redis.outbound.Message<> , java.lang.String .class ) ; Assert . hasText ( java.lang.String , STRING + this . org.springframework.integration.redis.outbound.Expression . getExpressionString ( ) ) ; RedisStore org.springframework.integration.redis.outbound.RedisStore = this . org.springframework.integration.redis.outbound.RedisStore ( java.lang.String ) ; Assert . state ( this . boolean , STRING ) ; try { if ( this . org.springframework.integration.redis.outbound.CollectionType == CollectionType . ZSET ) { this . void ( ( RedisZSet < java.lang.Object > ) org.springframework.integration.redis.outbound.RedisStore , org.springframework.integration.redis.outbound.Message<> ) ; } else if ( this . org.springframework.integration.redis.outbound.CollectionType == CollectionType . SET ) { this . void ( ( RedisSet < java.lang.Object > ) org.springframework.integration.redis.outbound.RedisStore , org.springframework.integration.redis.outbound.Message<> ) ; } else if ( this . org.springframework.integration.redis.outbound.CollectionType == CollectionType . LIST ) { this . void ( ( RedisList < java.lang.Object > ) org.springframework.integration.redis.outbound.RedisStore , org.springframework.integration.redis.outbound.Message<> ) ; } else if ( this . org.springframework.integration.redis.outbound.CollectionType == CollectionType . MAP ) { this . void ( ( RedisMap < java.lang.Object , java.lang.Object > ) org.springframework.integration.redis.outbound.RedisStore , org.springframework.integration.redis.outbound.Message<> ) ; } else if ( this . org.springframework.integration.redis.outbound.CollectionType == CollectionType . PROPERTIES ) { this . void ( ( RedisProperties ) org.springframework.integration.redis.outbound.RedisStore , org.springframework.integration.redis.outbound.Message<> ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new MessageHandlingException ( org.springframework.integration.redis.outbound.Message<> , STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( RedisZSet < java.lang.Object > org.springframework.integration.redis.outbound.RedisZSet<java.lang.Object> , final Message < ? > org.springframework.integration.redis.outbound.Message<?> ) throws java.lang.Exception { final java.lang.Object java.lang.Object = org.springframework.integration.redis.outbound.Message<> . getPayload ( ) ; final BoundZSetOperations < java.lang.String , java.lang.Object > org.springframework.integration.redis.outbound.BoundZSetOperations<java.lang.String,java.lang.Object> = ( BoundZSetOperations < java.lang.String , java.lang.Object > ) this . org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . boundZSetOps ( org.springframework.integration.redis.outbound.RedisZSet<java.lang.Object> . getKey ( ) ) ; final boolean boolean = this . boolean ( org.springframework.integration.redis.outbound.Message<> ) ; if ( this . boolean ) { if ( ( java.lang.Object instanceof java.util.Map<?,?> < ? , ? > && this . boolean ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) ) ) { final java.util.Map<java.lang.Object,java.lang.Number> < java.lang.Object , java.lang.Number > java.util.Map<java.lang.Object,java.lang.Number> = ( java.util.Map<java.lang.Object,java.lang.Number> < java.lang.Object , java.lang.Number > ) java.lang.Object ; this . void ( ( ) { for ( java.util.Map.Entry<java.lang.Object,java.lang.Number> < java.lang.Object , java.lang.Number > java.util.Map.Entry<java.lang.Object,java.lang.Number> : java.util.Map<java.lang.Object,java.lang.Number> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Number>> ( ) ) { java.lang.Number java.lang.Number = java.util.Map.Entry<java.lang.Object,java.lang.Number> . java.lang.Number ( ) ; void ( org.springframework.integration.redis.outbound.BoundZSetOperations<java.lang.String,java.lang.Object> , java.util.Map.Entry<java.lang.Object,java.lang.Number> . java.lang.Object ( ) , java.lang.Number == null ? double ( org.springframework.integration.redis.outbound.Message<> ) : NumberUtils . convertNumberToTargetClass ( java.lang.Number , java.lang.Double .class ) , boolean ) ; } } ) ; } else if ( java.lang.Object instanceof java.util.Collection<?> < ? > ) { this . void ( ( ) { for ( java.lang.Object java.lang.Object : ( ( java.util.Collection<?> < ? > ) java.lang.Object ) ) { void ( org.springframework.integration.redis.outbound.BoundZSetOperations<java.lang.String,java.lang.Object> , java.lang.Object , double ( org.springframework.integration.redis.outbound.Message<> ) , boolean ) ; } } ) ; } else { this . void ( org.springframework.integration.redis.outbound.BoundZSetOperations<java.lang.String,java.lang.Object> , java.lang.Object , this . double ( org.springframework.integration.redis.outbound.Message<> ) , boolean ) ; } } else { this . void ( org.springframework.integration.redis.outbound.BoundZSetOperations<java.lang.String,java.lang.Object> , java.lang.Object , this . double ( org.springframework.integration.redis.outbound.Message<> ) , boolean ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( Message < ? > org.springframework.integration.redis.outbound.Message<?> ) { if ( org.springframework.integration.redis.outbound.Message<> . getHeaders ( ) . containsKey ( RedisHeaders . ZSET_INCREMENT_SCORE ) ) { return this . org.springframework.integration.redis.outbound.Expression . getValue ( this . org.springframework.integration.redis.outbound.StandardEvaluationContext , org.springframework.integration.redis.outbound.Message<> , java.lang.Boolean .class ) ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( RedisList < java.lang.Object > org.springframework.integration.redis.outbound.RedisList<java.lang.Object> , Message < ? > org.springframework.integration.redis.outbound.Message<?> ) { java.lang.Object java.lang.Object = org.springframework.integration.redis.outbound.Message<> . getPayload ( ) ; if ( this . boolean ) { if ( java.lang.Object instanceof java.util.Collection<?> < ? > ) { org.springframework.integration.redis.outbound.RedisList<java.lang.Object> . addAll ( ( java.util.Collection<? extends java.lang.Object> < ? extends java.lang.Object > ) java.lang.Object ) ; } else { org.springframework.integration.redis.outbound.RedisList<java.lang.Object> . add ( java.lang.Object ) ; } } else { org.springframework.integration.redis.outbound.RedisList<java.lang.Object> . add ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( final RedisSet < java.lang.Object > org.springframework.integration.redis.outbound.RedisSet<java.lang.Object> , Message < ? > org.springframework.integration.redis.outbound.Message<?> ) { final java.lang.Object java.lang.Object = org.springframework.integration.redis.outbound.Message<> . getPayload ( ) ; if ( this . boolean && java.lang.Object instanceof java.util.Collection<?> < ? > ) { final BoundSetOperations < java.lang.String , java.lang.Object > org.springframework.integration.redis.outbound.BoundSetOperations<java.lang.String,java.lang.Object> = ( BoundSetOperations < java.lang.String , java.lang.Object > ) this . org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . boundSetOps ( org.springframework.integration.redis.outbound.RedisSet<java.lang.Object> . getKey ( ) ) ; this . void ( ( ) { for ( java.lang.Object java.lang.Object : ( ( java.util.Collection<?> < ? > ) java.lang.Object ) ) { org.springframework.integration.redis.outbound.BoundSetOperations<java.lang.String,java.lang.Object> . add ( java.lang.Object ) ; } } ) ; } else { org.springframework.integration.redis.outbound.RedisSet<java.lang.Object> . add ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( final RedisMap < java.lang.Object , java.lang.Object > org.springframework.integration.redis.outbound.RedisMap<java.lang.Object,java.lang.Object> , Message < ? > org.springframework.integration.redis.outbound.Message<?> ) { final java.lang.Object java.lang.Object = org.springframework.integration.redis.outbound.Message<> . getPayload ( ) ; if ( this . boolean && java.lang.Object instanceof java.util.Map<?,?> < ? , ? > ) { this . void ( ( ) org.springframework.integration.redis.outbound.RedisMap<java.lang.Object,java.lang.Object> . putAll ( ( java.util.Map<? extends java.lang.Object,? extends java.lang.Object> < ? extends java.lang.Object , ? extends java.lang.Object > ) java.lang.Object ) ) ; } else { java.lang.Object java.lang.Object = this . java.lang.Object ( org.springframework.integration.redis.outbound.Message<> , false ) ; org.springframework.integration.redis.outbound.RedisMap<java.lang.Object,java.lang.Object> . put ( java.lang.Object , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> private void void ( final RedisProperties org.springframework.integration.redis.outbound.RedisProperties , Message < ? > org.springframework.integration.redis.outbound.Message<?> ) { final java.lang.Object java.lang.Object = org.springframework.integration.redis.outbound.Message<> . getPayload ( ) ; if ( this . boolean && java.lang.Object instanceof java.util.Properties ) { this . void ( ( ) org.springframework.integration.redis.outbound.RedisProperties . putAll ( ( java.util.Properties ) java.lang.Object ) ) ; } else { Assert . isInstanceOf ( java.lang.String .class , java.lang.Object , STRING ) ; java.lang.Object java.lang.Object = this . java.lang.Object ( org.springframework.integration.redis.outbound.Message<> , true ) ; org.springframework.integration.redis.outbound.RedisProperties . put ( java.lang.Object , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler.PipelineCallback org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler.PipelineCallback ) { RedisConnection org.springframework.integration.redis.outbound.RedisConnection = RedisConnectionUtils . bindConnection ( this . org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . getConnectionFactory ( ) ) ; try { org.springframework.integration.redis.outbound.RedisConnection . openPipeline ( ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler.PipelineCallback . void ( ) ; } finally { org.springframework.integration.redis.outbound.RedisConnection . closePipeline ( ) ; RedisConnectionUtils . unbindConnection ( this . org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . getConnectionFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.redis.outbound.Message<?> , boolean boolean ) { java.lang.Object java.lang.Object = this . org.springframework.integration.redis.outbound.Expression . getValue ( this . org.springframework.integration.redis.outbound.StandardEvaluationContext , org.springframework.integration.redis.outbound.Message<> ) ; Assert . notNull ( java.lang.Object , STRING + STRING ) ; if ( boolean ) { Assert . isInstanceOf ( java.lang.String .class , java.lang.Object , STRING ) ; } Assert . isTrue ( java.lang.Object != null , STRING + STRING + RedisHeaders . MAP_KEY + STRING ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private void void ( final BoundZSetOperations < java.lang.String , java.lang.Object > org.springframework.integration.redis.outbound.BoundZSetOperations<java.lang.String,java.lang.Object> , java.lang.Object java.lang.Object , java.lang.Double java.lang.Double , boolean boolean ) { if ( java.lang.Double != null ) { this . void ( org.springframework.integration.redis.outbound.BoundZSetOperations<java.lang.String,java.lang.Object> , java.lang.Object , java.lang.Double , boolean ) ; } else { this . org.springframework.integration.redis.outbound.Log . debug ( STRING ) ; this . void ( org.springframework.integration.redis.outbound.BoundZSetOperations<java.lang.String,java.lang.Object> , java.lang.Object , java.lang.Double . java.lang.Double ( NUMBER ) , boolean ) ; } }  <METHOD_END>
<METHOD_START> private void void ( final BoundZSetOperations < java.lang.String , java.lang.Object > org.springframework.integration.redis.outbound.BoundZSetOperations<java.lang.String,java.lang.Object> , java.lang.Object java.lang.Object , java.lang.Double java.lang.Double , boolean boolean ) { if ( boolean ) { org.springframework.integration.redis.outbound.BoundZSetOperations<java.lang.String,java.lang.Object> . incrementScore ( java.lang.Object , java.lang.Double ) ; } else { org.springframework.integration.redis.outbound.BoundZSetOperations<java.lang.String,java.lang.Object> . add ( java.lang.Object , java.lang.Double ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { for ( java.lang.Object java.lang.Object : java.util.Map<,> . java.util.Collection<> ( ) ) { if ( ! ( java.lang.Object instanceof java.lang.Number ) ) { if ( this . org.springframework.integration.redis.outbound.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.redis.outbound.Log . warn ( STRING + java.lang.Object + STRING ) ; } return false ; } } return true ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.redis.outbound.RedisStore org.springframework.integration.redis.outbound.RedisStore ( java.lang.String java.lang.String ) { RedisCollectionFactoryBean org.springframework.integration.redis.outbound.RedisCollectionFactoryBean = new RedisCollectionFactoryBean ( ) ; org.springframework.integration.redis.outbound.RedisCollectionFactoryBean . setKey ( java.lang.String ) ; org.springframework.integration.redis.outbound.RedisCollectionFactoryBean . setTemplate ( this . org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> ) ; org.springframework.integration.redis.outbound.RedisCollectionFactoryBean . setType ( this . org.springframework.integration.redis.outbound.CollectionType ) ; org.springframework.integration.redis.outbound.RedisCollectionFactoryBean . afterPropertiesSet ( ) ; return org.springframework.integration.redis.outbound.RedisCollectionFactoryBean . getObject ( ) ; }  <METHOD_END>
<METHOD_START> private double double ( Message < ? > org.springframework.integration.redis.outbound.Message<?> ) { java.lang.Object java.lang.Object = org.springframework.integration.redis.outbound.Message<> . getHeaders ( ) . get ( RedisHeaders . ZSET_SCORE ) ; if ( java.lang.Object == null ) { return java.lang.Double . java.lang.Double ( NUMBER ) ; } else { Assert . isInstanceOf ( java.lang.Number .class , java.lang.Object , STRING + RedisHeaders . ZSET_SCORE + STRING ) ; java.lang.Number java.lang.Number = ( java.lang.Number ) java.lang.Object ; return java.lang.Double . java.lang.Double ( java.lang.Number . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
