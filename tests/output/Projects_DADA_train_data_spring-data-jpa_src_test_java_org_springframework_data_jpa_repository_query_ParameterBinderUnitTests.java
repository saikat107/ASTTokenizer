<METHOD_START> @ Before public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.reflect.Method = org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; java.lang.reflect.Method = org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; java.lang.reflect.Method = org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Sort .class ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User ( java.lang.String java.lang.String , Sort org.springframework.data.jpa.repository.query.Sort );  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User ( @ Param ( STRING ) java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User ( @ Param ( STRING ) java.lang.String java.lang.String , Pageable org.springframework.data.jpa.repository.query.Pageable );  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User ( @ Param ( STRING ) java.lang.String java.lang.String , Sort org.springframework.data.jpa.repository.query.Sort );  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User ( @ Temporal java.util.Date java.util.Date );  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User ( @ Temporal ( TIMESTAMP ) java.util.Date java.util.Date );  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User ( @ Temporal java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User> < org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User > java.util.List<org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User> ( java.lang.Integer ... java.lang.Integer[] );  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.User ( java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> );  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new ParameterBinder ( new JpaParameters ( java.lang.reflect.Method ) , new java.lang.Object [] { STRING , STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new ParameterBinder ( new JpaParameters ( java.lang.reflect.Method ) , ( java.lang.Object [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { JpaParameters org.springframework.data.jpa.repository.query.JpaParameters = new JpaParameters ( java.lang.reflect.Method ) ; new ParameterBinder ( org.springframework.data.jpa.repository.query.JpaParameters ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; JpaParameters org.springframework.data.jpa.repository.query.JpaParameters = new JpaParameters ( java.lang.reflect.Method ) ; ParameterBinder org.springframework.data.jpa.repository.query.ParameterBinder = new ParameterBinder ( org.springframework.data.jpa.repository.query.JpaParameters , new java.lang.Object [] { STRING , null } ) ; assertThat ( org.springframework.data.jpa.repository.query.ParameterBinder . getPageable ( ) , is ( Pageable . unpaged ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Sort .class ) ; new ParameterBinder ( new JpaParameters ( java.lang.reflect.Method ) , new java.lang.Object [] { STRING , null } ) . bind ( org.springframework.data.jpa.repository.query.Query ) ; verify ( org.springframework.data.jpa.repository.query.Query ) . setParameter ( eq ( NUMBER ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; new ParameterBinder ( new JpaParameters ( java.lang.reflect.Method ) , new java.lang.Object [] { STRING , null } ) . bind ( org.springframework.data.jpa.repository.query.Query ) ; verify ( org.springframework.data.jpa.repository.query.Query ) . setParameter ( eq ( NUMBER ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new ParameterBinder ( new JpaParameters ( java.lang.reflect.Method ) , new java.lang.Object [] { STRING } ) . bind ( org.springframework.data.jpa.repository.query.Query ) ; verify ( org.springframework.data.jpa.repository.query.Query ) . setParameter ( eq ( NUMBER ) , anyObject ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.data.jpa.repository.query.Query . setParameter ( eq ( STRING ) , anyObject ( ) ) ) . thenReturn ( org.springframework.data.jpa.repository.query.Query ) ; new ParameterBinder ( new JpaParameters ( java.lang.reflect.Method ) , new java.lang.Object [] { STRING } ) { @ java.lang.Override boolean boolean ( Query org.springframework.data.jpa.repository.query.Query ) { return true ; } } . bind ( org.springframework.data.jpa.repository.query.Query ) ; verify ( org.springframework.data.jpa.repository.query.Query ) . setParameter ( eq ( STRING ) , anyObject ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override boolean boolean ( Query org.springframework.data.jpa.repository.query.Query ) { return true ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.data.jpa.repository.query.ParameterBinderUnitTests> ( ) . java.lang.reflect.Method ( STRING , org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleEmbeddable .class ) ; JpaParameters org.springframework.data.jpa.repository.query.JpaParameters = new JpaParameters ( java.lang.reflect.Method ) ; org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleEmbeddable org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleEmbeddable = new org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleEmbeddable ( ) ; new ParameterBinder ( org.springframework.data.jpa.repository.query.JpaParameters , new java.lang.Object [] { org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleEmbeddable } ) . bind ( org.springframework.data.jpa.repository.query.Query ) ; verify ( org.springframework.data.jpa.repository.query.Query ) . setParameter ( NUMBER , org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleEmbeddable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Sort org.springframework.data.jpa.repository.query.Sort = Sort . by ( STRING ) ; ParameterBinder org.springframework.data.jpa.repository.query.ParameterBinder = new ParameterBinder ( new JpaParameters ( java.lang.reflect.Method ) , new java.lang.Object [] { STRING , org.springframework.data.jpa.repository.query.Sort } ) ; assertThat ( org.springframework.data.jpa.repository.query.ParameterBinder . getSort ( ) , is ( org.springframework.data.jpa.repository.query.Sort ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.util.Date .class ) ; JpaParameters org.springframework.data.jpa.repository.query.JpaParameters = new JpaParameters ( java.lang.reflect.Method ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; new ParameterBinder ( org.springframework.data.jpa.repository.query.JpaParameters , new java.lang.Object [] { java.util.Date } ) . bind ( org.springframework.data.jpa.repository.query.Query ) ; verify ( org.springframework.data.jpa.repository.query.Query ) . setParameter ( eq ( NUMBER ) , eq ( java.util.Date ) , eq ( TemporalType . DATE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.util.Date .class ) ; JpaParameters org.springframework.data.jpa.repository.query.JpaParameters = new JpaParameters ( java.lang.reflect.Method ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; new ParameterBinder ( org.springframework.data.jpa.repository.query.JpaParameters , new java.lang.Object [] { java.util.Date } ) . bind ( org.springframework.data.jpa.repository.query.Query ) ; verify ( org.springframework.data.jpa.repository.query.Query ) . setParameter ( eq ( NUMBER ) , eq ( java.util.Date ) , eq ( TemporalType . TIMESTAMP ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; JpaParameters org.springframework.data.jpa.repository.query.JpaParameters = new JpaParameters ( java.lang.reflect.Method ) ; new ParameterBinder ( org.springframework.data.jpa.repository.query.JpaParameters , new java.lang.Object [] { STRING , STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.lang.Integer [] .class ) ; JpaParameters org.springframework.data.jpa.repository.query.JpaParameters = new JpaParameters ( java.lang.reflect.Method ) ; java.lang.Integer [] java.lang.Integer[] = new java.lang.Integer [] { NUMBER , NUMBER , NUMBER } ; new ParameterBinder ( org.springframework.data.jpa.repository.query.JpaParameters , new java.lang.Object [] { java.lang.Integer[] } ) . bind ( org.springframework.data.jpa.repository.query.Query ) ; verify ( org.springframework.data.jpa.repository.query.Query ) . setParameter ( eq ( NUMBER ) , eq ( java.lang.Integer[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleRepository .class . java.lang.reflect.Method ( STRING , java.util.Optional .class ) ; JpaParameters org.springframework.data.jpa.repository.query.JpaParameters = new JpaParameters ( java.lang.reflect.Method ) ; new ParameterBinder ( org.springframework.data.jpa.repository.query.JpaParameters , new java.lang.Object [] { java.util.Optional . java.util.Optional<java.lang.String> ( STRING ) } ) . bind ( org.springframework.data.jpa.repository.query.Query ) ; verify ( org.springframework.data.jpa.repository.query.Query ) . setParameter ( eq ( NUMBER ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleEntity org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleEntity ( org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleEmbeddable org.springframework.data.jpa.repository.query.ParameterBinderUnitTests.SampleEmbeddable ) { return null ; }  <METHOD_END>
