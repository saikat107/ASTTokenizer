<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { Connection org.springframework.jms.connection.Connection = mock ( Connection .class ) ; SingleConnectionFactory org.springframework.jms.connection.SingleConnectionFactory = new SingleConnectionFactory ( org.springframework.jms.connection.Connection ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . stop ( ) ; org.springframework.jms.connection.Connection . close ( ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . stop ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.SingleConnectionFactory . destroy ( ) ; verify ( org.springframework.jms.connection.Connection , times ( NUMBER ) ) . start ( ) ; verify ( org.springframework.jms.connection.Connection , times ( NUMBER ) ) . stop ( ) ; verify ( org.springframework.jms.connection.Connection ) . close ( ) ; verifyNoMoreInteractions ( org.springframework.jms.connection.Connection ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { Connection org.springframework.jms.connection.Connection = mock ( QueueConnection .class ) ; SingleConnectionFactory org.springframework.jms.connection.SingleConnectionFactory = new SingleConnectionFactory ( org.springframework.jms.connection.Connection ) ; QueueConnection org.springframework.jms.connection.QueueConnection = org.springframework.jms.connection.SingleConnectionFactory . createQueueConnection ( ) ; org.springframework.jms.connection.QueueConnection . start ( ) ; org.springframework.jms.connection.QueueConnection . stop ( ) ; org.springframework.jms.connection.QueueConnection . close ( ) ; QueueConnection org.springframework.jms.connection.QueueConnection = org.springframework.jms.connection.SingleConnectionFactory . createQueueConnection ( ) ; org.springframework.jms.connection.QueueConnection . start ( ) ; org.springframework.jms.connection.QueueConnection . stop ( ) ; org.springframework.jms.connection.QueueConnection . close ( ) ; org.springframework.jms.connection.SingleConnectionFactory . destroy ( ) ; verify ( org.springframework.jms.connection.Connection , times ( NUMBER ) ) . start ( ) ; verify ( org.springframework.jms.connection.Connection , times ( NUMBER ) ) . stop ( ) ; verify ( org.springframework.jms.connection.Connection ) . close ( ) ; verifyNoMoreInteractions ( org.springframework.jms.connection.Connection ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { Connection org.springframework.jms.connection.Connection = mock ( TopicConnection .class ) ; SingleConnectionFactory org.springframework.jms.connection.SingleConnectionFactory = new SingleConnectionFactory ( org.springframework.jms.connection.Connection ) ; TopicConnection org.springframework.jms.connection.TopicConnection = org.springframework.jms.connection.SingleConnectionFactory . createTopicConnection ( ) ; org.springframework.jms.connection.TopicConnection . start ( ) ; org.springframework.jms.connection.TopicConnection . stop ( ) ; org.springframework.jms.connection.TopicConnection . close ( ) ; TopicConnection org.springframework.jms.connection.TopicConnection = org.springframework.jms.connection.SingleConnectionFactory . createTopicConnection ( ) ; org.springframework.jms.connection.TopicConnection . start ( ) ; org.springframework.jms.connection.TopicConnection . stop ( ) ; org.springframework.jms.connection.TopicConnection . close ( ) ; org.springframework.jms.connection.SingleConnectionFactory . destroy ( ) ; verify ( org.springframework.jms.connection.Connection , times ( NUMBER ) ) . start ( ) ; verify ( org.springframework.jms.connection.Connection , times ( NUMBER ) ) . stop ( ) ; verify ( org.springframework.jms.connection.Connection ) . close ( ) ; verifyNoMoreInteractions ( org.springframework.jms.connection.Connection ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = mock ( ConnectionFactory .class ) ; Connection org.springframework.jms.connection.Connection = mock ( Connection .class ) ; given ( org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.Connection ) ; SingleConnectionFactory org.springframework.jms.connection.SingleConnectionFactory = new SingleConnectionFactory ( org.springframework.jms.connection.ConnectionFactory ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.SingleConnectionFactory . destroy ( ) ; verify ( org.springframework.jms.connection.Connection ) . start ( ) ; verify ( org.springframework.jms.connection.Connection ) . stop ( ) ; verify ( org.springframework.jms.connection.Connection ) . close ( ) ; verifyNoMoreInteractions ( org.springframework.jms.connection.Connection ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { QueueConnectionFactory org.springframework.jms.connection.QueueConnectionFactory = mock ( QueueConnectionFactory .class ) ; QueueConnection org.springframework.jms.connection.QueueConnection = mock ( QueueConnection .class ) ; given ( org.springframework.jms.connection.QueueConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.QueueConnection ) ; SingleConnectionFactory org.springframework.jms.connection.SingleConnectionFactory = new SingleConnectionFactory ( org.springframework.jms.connection.QueueConnectionFactory ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.SingleConnectionFactory . destroy ( ) ; verify ( org.springframework.jms.connection.QueueConnection ) . start ( ) ; verify ( org.springframework.jms.connection.QueueConnection ) . stop ( ) ; verify ( org.springframework.jms.connection.QueueConnection ) . close ( ) ; verifyNoMoreInteractions ( org.springframework.jms.connection.QueueConnection ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { QueueConnectionFactory org.springframework.jms.connection.QueueConnectionFactory = mock ( QueueConnectionFactory .class ) ; QueueConnection org.springframework.jms.connection.QueueConnection = mock ( QueueConnection .class ) ; given ( org.springframework.jms.connection.QueueConnectionFactory . createQueueConnection ( ) ) . willReturn ( org.springframework.jms.connection.QueueConnection ) ; SingleConnectionFactory org.springframework.jms.connection.SingleConnectionFactory = new SingleConnectionFactory ( org.springframework.jms.connection.QueueConnectionFactory ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createQueueConnection ( ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createQueueConnection ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.SingleConnectionFactory . destroy ( ) ; verify ( org.springframework.jms.connection.QueueConnection ) . start ( ) ; verify ( org.springframework.jms.connection.QueueConnection ) . stop ( ) ; verify ( org.springframework.jms.connection.QueueConnection ) . close ( ) ; verifyNoMoreInteractions ( org.springframework.jms.connection.QueueConnection ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { TopicConnectionFactory org.springframework.jms.connection.TopicConnectionFactory = mock ( TopicConnectionFactory .class ) ; TopicConnection org.springframework.jms.connection.TopicConnection = mock ( TopicConnection .class ) ; given ( org.springframework.jms.connection.TopicConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.TopicConnection ) ; SingleConnectionFactory org.springframework.jms.connection.SingleConnectionFactory = new SingleConnectionFactory ( org.springframework.jms.connection.TopicConnectionFactory ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.SingleConnectionFactory . destroy ( ) ; verify ( org.springframework.jms.connection.TopicConnection ) . start ( ) ; verify ( org.springframework.jms.connection.TopicConnection ) . stop ( ) ; verify ( org.springframework.jms.connection.TopicConnection ) . close ( ) ; verifyNoMoreInteractions ( org.springframework.jms.connection.TopicConnection ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { TopicConnectionFactory org.springframework.jms.connection.TopicConnectionFactory = mock ( TopicConnectionFactory .class ) ; TopicConnection org.springframework.jms.connection.TopicConnection = mock ( TopicConnection .class ) ; given ( org.springframework.jms.connection.TopicConnectionFactory . createTopicConnection ( ) ) . willReturn ( org.springframework.jms.connection.TopicConnection ) ; SingleConnectionFactory org.springframework.jms.connection.SingleConnectionFactory = new SingleConnectionFactory ( org.springframework.jms.connection.TopicConnectionFactory ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createTopicConnection ( ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createTopicConnection ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.SingleConnectionFactory . destroy ( ) ; verify ( org.springframework.jms.connection.TopicConnection ) . start ( ) ; verify ( org.springframework.jms.connection.TopicConnection ) . stop ( ) ; verify ( org.springframework.jms.connection.TopicConnection ) . close ( ) ; verifyNoMoreInteractions ( org.springframework.jms.connection.TopicConnection ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { Connection org.springframework.jms.connection.Connection = mock ( Connection .class ) ; SingleConnectionFactory org.springframework.jms.connection.SingleConnectionFactory = new SingleConnectionFactory ( org.springframework.jms.connection.Connection ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; org.springframework.jms.connection.Connection . start ( ) ; verify ( org.springframework.jms.connection.Connection ) . start ( ) ; org.springframework.jms.connection.Connection . stop ( ) ; verify ( org.springframework.jms.connection.Connection ) . stop ( ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; org.springframework.jms.connection.Connection . start ( ) ; verify ( org.springframework.jms.connection.Connection , times ( NUMBER ) ) . start ( ) ; org.springframework.jms.connection.Connection . stop ( ) ; verify ( org.springframework.jms.connection.Connection , times ( NUMBER ) ) . stop ( ) ; org.springframework.jms.connection.Connection . start ( ) ; verify ( org.springframework.jms.connection.Connection , times ( NUMBER ) ) . start ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . stop ( ) ; org.springframework.jms.connection.Connection . stop ( ) ; verify ( org.springframework.jms.connection.Connection , times ( NUMBER ) ) . stop ( ) ; org.springframework.jms.connection.Connection . start ( ) ; verify ( org.springframework.jms.connection.Connection , times ( NUMBER ) ) . start ( ) ; org.springframework.jms.connection.Connection . close ( ) ; verify ( org.springframework.jms.connection.Connection , times ( NUMBER ) ) . stop ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.SingleConnectionFactory . destroy ( ) ; verify ( org.springframework.jms.connection.Connection ) . close ( ) ; verifyNoMoreInteractions ( org.springframework.jms.connection.Connection ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = mock ( ConnectionFactory .class ) ; Connection org.springframework.jms.connection.Connection = mock ( Connection .class ) ; given ( org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.Connection ) ; SingleConnectionFactory org.springframework.jms.connection.SingleConnectionFactory = new SingleConnectionFactory ( org.springframework.jms.connection.ConnectionFactory ) ; org.springframework.jms.connection.SingleConnectionFactory . setClientId ( STRING ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.SingleConnectionFactory . destroy ( ) ; verify ( org.springframework.jms.connection.Connection ) . setClientID ( STRING ) ; verify ( org.springframework.jms.connection.Connection ) . start ( ) ; verify ( org.springframework.jms.connection.Connection ) . stop ( ) ; verify ( org.springframework.jms.connection.Connection ) . close ( ) ; verifyNoMoreInteractions ( org.springframework.jms.connection.Connection ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = mock ( ConnectionFactory .class ) ; Connection org.springframework.jms.connection.Connection = mock ( Connection .class ) ; ExceptionListener org.springframework.jms.connection.ExceptionListener = new ChainedExceptionListener ( ) ; given ( org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.Connection ) ; given ( org.springframework.jms.connection.Connection . getExceptionListener ( ) ) . willReturn ( org.springframework.jms.connection.ExceptionListener ) ; SingleConnectionFactory org.springframework.jms.connection.SingleConnectionFactory = new SingleConnectionFactory ( org.springframework.jms.connection.ConnectionFactory ) ; org.springframework.jms.connection.SingleConnectionFactory . setExceptionListener ( org.springframework.jms.connection.ExceptionListener ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; assertEquals ( org.springframework.jms.connection.ExceptionListener , org.springframework.jms.connection.Connection . getExceptionListener ( ) ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . stop ( ) ; org.springframework.jms.connection.Connection . close ( ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . stop ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.SingleConnectionFactory . destroy ( ) ; verify ( org.springframework.jms.connection.Connection ) . setExceptionListener ( org.springframework.jms.connection.ExceptionListener ) ; verify ( org.springframework.jms.connection.Connection , times ( NUMBER ) ) . start ( ) ; verify ( org.springframework.jms.connection.Connection , times ( NUMBER ) ) . stop ( ) ; verify ( org.springframework.jms.connection.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = mock ( ConnectionFactory .class ) ; TestConnection org.springframework.jms.connection.TestConnection = new TestConnection ( ) ; given ( org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.TestConnection ) ; SingleConnectionFactory org.springframework.jms.connection.SingleConnectionFactory = new SingleConnectionFactory ( org.springframework.jms.connection.ConnectionFactory ) ; org.springframework.jms.connection.SingleConnectionFactory . setReconnectOnException ( true ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; assertNull ( org.springframework.jms.connection.Connection . getExceptionListener ( ) ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.TestConnection . getExceptionListener ( ) . onException ( new JMSException ( STRING ) ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.SingleConnectionFactory . destroy ( ) ; assertEquals ( NUMBER , org.springframework.jms.connection.TestConnection . getStartCount ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.connection.TestConnection . getCloseCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = mock ( ConnectionFactory .class ) ; TestConnection org.springframework.jms.connection.TestConnection = new TestConnection ( ) ; given ( org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.TestConnection ) ; TestExceptionListener org.springframework.jms.connection.TestExceptionListener = new TestExceptionListener ( ) ; SingleConnectionFactory org.springframework.jms.connection.SingleConnectionFactory = new SingleConnectionFactory ( org.springframework.jms.connection.ConnectionFactory ) ; org.springframework.jms.connection.SingleConnectionFactory . setExceptionListener ( org.springframework.jms.connection.TestExceptionListener ) ; org.springframework.jms.connection.SingleConnectionFactory . setReconnectOnException ( true ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; assertSame ( org.springframework.jms.connection.TestExceptionListener , org.springframework.jms.connection.Connection . getExceptionListener ( ) ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.TestConnection . getExceptionListener ( ) . onException ( new JMSException ( STRING ) ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.SingleConnectionFactory . destroy ( ) ; assertEquals ( NUMBER , org.springframework.jms.connection.TestConnection . getStartCount ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.connection.TestConnection . getCloseCount ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.connection.TestExceptionListener . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = mock ( ConnectionFactory .class ) ; TestConnection org.springframework.jms.connection.TestConnection = new TestConnection ( ) ; given ( org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.TestConnection ) ; TestExceptionListener org.springframework.jms.connection.TestExceptionListener = new TestExceptionListener ( ) ; TestExceptionListener org.springframework.jms.connection.TestExceptionListener = new TestExceptionListener ( ) ; TestExceptionListener org.springframework.jms.connection.TestExceptionListener = new TestExceptionListener ( ) ; SingleConnectionFactory org.springframework.jms.connection.SingleConnectionFactory = new SingleConnectionFactory ( org.springframework.jms.connection.ConnectionFactory ) { @ java.lang.Override public void void ( JMSException org.springframework.jms.connection.JMSException ) { } } ; org.springframework.jms.connection.SingleConnectionFactory . setReconnectOnException ( true ) ; org.springframework.jms.connection.SingleConnectionFactory . setExceptionListener ( org.springframework.jms.connection.TestExceptionListener ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; org.springframework.jms.connection.Connection . setExceptionListener ( org.springframework.jms.connection.TestExceptionListener ) ; assertSame ( org.springframework.jms.connection.TestExceptionListener , org.springframework.jms.connection.Connection . getExceptionListener ( ) ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; org.springframework.jms.connection.Connection . setExceptionListener ( org.springframework.jms.connection.TestExceptionListener ) ; assertSame ( org.springframework.jms.connection.TestExceptionListener , org.springframework.jms.connection.Connection . getExceptionListener ( ) ) ; org.springframework.jms.connection.TestConnection . getExceptionListener ( ) . onException ( new JMSException ( STRING ) ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.TestConnection . getExceptionListener ( ) . onException ( new JMSException ( STRING ) ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.TestConnection . getExceptionListener ( ) . onException ( new JMSException ( STRING ) ) ; org.springframework.jms.connection.SingleConnectionFactory . destroy ( ) ; assertEquals ( NUMBER , org.springframework.jms.connection.TestConnection . getStartCount ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.connection.TestConnection . getCloseCount ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.connection.TestExceptionListener . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.connection.TestExceptionListener . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.connection.TestExceptionListener . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( JMSException org.springframework.jms.connection.JMSException ) { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = mock ( ConnectionFactory .class ) ; TestConnection org.springframework.jms.connection.TestConnection = new TestConnection ( ) ; given ( org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.TestConnection ) ; TestExceptionListener org.springframework.jms.connection.TestExceptionListener = new TestExceptionListener ( ) ; TestExceptionListener org.springframework.jms.connection.TestExceptionListener = new TestExceptionListener ( ) ; TestExceptionListener org.springframework.jms.connection.TestExceptionListener = new TestExceptionListener ( ) ; SingleConnectionFactory org.springframework.jms.connection.SingleConnectionFactory = new SingleConnectionFactory ( org.springframework.jms.connection.ConnectionFactory ) ; org.springframework.jms.connection.SingleConnectionFactory . setReconnectOnException ( true ) ; org.springframework.jms.connection.SingleConnectionFactory . setExceptionListener ( org.springframework.jms.connection.TestExceptionListener ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; org.springframework.jms.connection.Connection . setExceptionListener ( org.springframework.jms.connection.TestExceptionListener ) ; assertSame ( org.springframework.jms.connection.TestExceptionListener , org.springframework.jms.connection.Connection . getExceptionListener ( ) ) ; org.springframework.jms.connection.Connection . start ( ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.SingleConnectionFactory . createConnection ( ) ; org.springframework.jms.connection.Connection . setExceptionListener ( org.springframework.jms.connection.TestExceptionListener ) ; assertSame ( org.springframework.jms.connection.TestExceptionListener , org.springframework.jms.connection.Connection . getExceptionListener ( ) ) ; org.springframework.jms.connection.TestConnection . getExceptionListener ( ) . onException ( new JMSException ( STRING ) ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.Connection . getMetaData ( ) ; org.springframework.jms.connection.TestConnection . getExceptionListener ( ) . onException ( new JMSException ( STRING ) ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.SingleConnectionFactory . destroy ( ) ; assertEquals ( NUMBER , org.springframework.jms.connection.TestConnection . getStartCount ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.connection.TestConnection . getCloseCount ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.connection.TestExceptionListener . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.connection.TestExceptionListener . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.connection.TestExceptionListener . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = mock ( ConnectionFactory .class ) ; Connection org.springframework.jms.connection.Connection = mock ( Connection .class ) ; Session org.springframework.jms.connection.Session = mock ( Session .class ) ; Session org.springframework.jms.connection.Session = mock ( Session .class ) ; given ( org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.Connection ) ; given ( org.springframework.jms.connection.Connection . createSession ( true , Session . AUTO_ACKNOWLEDGE ) ) . willReturn ( org.springframework.jms.connection.Session ) ; given ( org.springframework.jms.connection.Session . getTransacted ( ) ) . willReturn ( true ) ; given ( org.springframework.jms.connection.Connection . createSession ( false , Session . CLIENT_ACKNOWLEDGE ) ) . willReturn ( org.springframework.jms.connection.Session ) ; CachingConnectionFactory org.springframework.jms.connection.CachingConnectionFactory = new CachingConnectionFactory ( org.springframework.jms.connection.ConnectionFactory ) ; org.springframework.jms.connection.CachingConnectionFactory . setReconnectOnException ( false ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.CachingConnectionFactory . createConnection ( ) ; Session org.springframework.jms.connection.Session = org.springframework.jms.connection.Connection . createSession ( true , Session . AUTO_ACKNOWLEDGE ) ; org.springframework.jms.connection.Session . getTransacted ( ) ; org.springframework.jms.connection.Session . close ( ) ; org.springframework.jms.connection.Session = org.springframework.jms.connection.Connection . createSession ( false , Session . CLIENT_ACKNOWLEDGE ) ; org.springframework.jms.connection.Session . close ( ) ; org.springframework.jms.connection.Connection . start ( ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.CachingConnectionFactory . createConnection ( ) ; Session org.springframework.jms.connection.Session = org.springframework.jms.connection.Connection . createSession ( false , Session . CLIENT_ACKNOWLEDGE ) ; org.springframework.jms.connection.Session . close ( ) ; org.springframework.jms.connection.Session = org.springframework.jms.connection.Connection . createSession ( true , Session . AUTO_ACKNOWLEDGE ) ; org.springframework.jms.connection.Session . commit ( ) ; org.springframework.jms.connection.Session . close ( ) ; org.springframework.jms.connection.Connection . start ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.CachingConnectionFactory . destroy ( ) ; verify ( org.springframework.jms.connection.Session ) . commit ( ) ; verify ( org.springframework.jms.connection.Session ) . close ( ) ; verify ( org.springframework.jms.connection.Session ) . close ( ) ; verify ( org.springframework.jms.connection.Connection ) . start ( ) ; verify ( org.springframework.jms.connection.Connection ) . stop ( ) ; verify ( org.springframework.jms.connection.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { QueueConnectionFactory org.springframework.jms.connection.QueueConnectionFactory = mock ( QueueConnectionFactory .class ) ; QueueConnection org.springframework.jms.connection.QueueConnection = mock ( QueueConnection .class ) ; QueueSession org.springframework.jms.connection.QueueSession = mock ( QueueSession .class ) ; QueueSession org.springframework.jms.connection.QueueSession = mock ( QueueSession .class ) ; given ( org.springframework.jms.connection.QueueConnectionFactory . createQueueConnection ( ) ) . willReturn ( org.springframework.jms.connection.QueueConnection ) ; given ( org.springframework.jms.connection.QueueConnection . createQueueSession ( true , Session . AUTO_ACKNOWLEDGE ) ) . willReturn ( org.springframework.jms.connection.QueueSession ) ; given ( org.springframework.jms.connection.QueueSession . getTransacted ( ) ) . willReturn ( true ) ; given ( org.springframework.jms.connection.QueueConnection . createQueueSession ( false , Session . CLIENT_ACKNOWLEDGE ) ) . willReturn ( org.springframework.jms.connection.QueueSession ) ; CachingConnectionFactory org.springframework.jms.connection.CachingConnectionFactory = new CachingConnectionFactory ( org.springframework.jms.connection.QueueConnectionFactory ) ; org.springframework.jms.connection.CachingConnectionFactory . setReconnectOnException ( false ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.CachingConnectionFactory . createQueueConnection ( ) ; Session org.springframework.jms.connection.Session = org.springframework.jms.connection.Connection . createSession ( true , Session . AUTO_ACKNOWLEDGE ) ; org.springframework.jms.connection.Session . rollback ( ) ; org.springframework.jms.connection.Session . close ( ) ; org.springframework.jms.connection.Session = org.springframework.jms.connection.Connection . createSession ( false , Session . CLIENT_ACKNOWLEDGE ) ; org.springframework.jms.connection.Session . close ( ) ; org.springframework.jms.connection.Connection . start ( ) ; QueueConnection org.springframework.jms.connection.QueueConnection = org.springframework.jms.connection.CachingConnectionFactory . createQueueConnection ( ) ; Session org.springframework.jms.connection.Session = org.springframework.jms.connection.QueueConnection . createQueueSession ( false , Session . CLIENT_ACKNOWLEDGE ) ; org.springframework.jms.connection.Session . close ( ) ; org.springframework.jms.connection.Session = org.springframework.jms.connection.QueueConnection . createSession ( true , Session . AUTO_ACKNOWLEDGE ) ; org.springframework.jms.connection.Session . getTransacted ( ) ; org.springframework.jms.connection.Session . close ( ) ; org.springframework.jms.connection.QueueConnection . start ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.QueueConnection . close ( ) ; org.springframework.jms.connection.CachingConnectionFactory . destroy ( ) ; verify ( org.springframework.jms.connection.QueueSession ) . rollback ( ) ; verify ( org.springframework.jms.connection.QueueSession ) . close ( ) ; verify ( org.springframework.jms.connection.QueueSession ) . close ( ) ; verify ( org.springframework.jms.connection.QueueConnection ) . start ( ) ; verify ( org.springframework.jms.connection.QueueConnection ) . stop ( ) ; verify ( org.springframework.jms.connection.QueueConnection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { TopicConnectionFactory org.springframework.jms.connection.TopicConnectionFactory = mock ( TopicConnectionFactory .class ) ; TopicConnection org.springframework.jms.connection.TopicConnection = mock ( TopicConnection .class ) ; TopicSession org.springframework.jms.connection.TopicSession = mock ( TopicSession .class ) ; TopicSession org.springframework.jms.connection.TopicSession = mock ( TopicSession .class ) ; given ( org.springframework.jms.connection.TopicConnectionFactory . createTopicConnection ( ) ) . willReturn ( org.springframework.jms.connection.TopicConnection ) ; given ( org.springframework.jms.connection.TopicConnection . createTopicSession ( true , Session . AUTO_ACKNOWLEDGE ) ) . willReturn ( org.springframework.jms.connection.TopicSession ) ; given ( org.springframework.jms.connection.TopicSession . getTransacted ( ) ) . willReturn ( true ) ; given ( org.springframework.jms.connection.TopicConnection . createTopicSession ( false , Session . CLIENT_ACKNOWLEDGE ) ) . willReturn ( org.springframework.jms.connection.TopicSession ) ; CachingConnectionFactory org.springframework.jms.connection.CachingConnectionFactory = new CachingConnectionFactory ( org.springframework.jms.connection.TopicConnectionFactory ) ; org.springframework.jms.connection.CachingConnectionFactory . setReconnectOnException ( false ) ; Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.CachingConnectionFactory . createTopicConnection ( ) ; Session org.springframework.jms.connection.Session = org.springframework.jms.connection.Connection . createSession ( true , Session . AUTO_ACKNOWLEDGE ) ; org.springframework.jms.connection.Session . getTransacted ( ) ; org.springframework.jms.connection.Session . close ( ) ; org.springframework.jms.connection.Session = org.springframework.jms.connection.Connection . createSession ( false , Session . CLIENT_ACKNOWLEDGE ) ; org.springframework.jms.connection.Session . close ( ) ; org.springframework.jms.connection.Connection . start ( ) ; TopicConnection org.springframework.jms.connection.TopicConnection = org.springframework.jms.connection.CachingConnectionFactory . createTopicConnection ( ) ; Session org.springframework.jms.connection.Session = org.springframework.jms.connection.TopicConnection . createTopicSession ( false , Session . CLIENT_ACKNOWLEDGE ) ; org.springframework.jms.connection.Session . close ( ) ; org.springframework.jms.connection.Session = org.springframework.jms.connection.TopicConnection . createSession ( true , Session . AUTO_ACKNOWLEDGE ) ; org.springframework.jms.connection.Session . getTransacted ( ) ; org.springframework.jms.connection.Session . close ( ) ; org.springframework.jms.connection.TopicConnection . start ( ) ; org.springframework.jms.connection.Connection . close ( ) ; org.springframework.jms.connection.TopicConnection . close ( ) ; org.springframework.jms.connection.CachingConnectionFactory . destroy ( ) ; verify ( org.springframework.jms.connection.TopicSession ) . close ( ) ; verify ( org.springframework.jms.connection.TopicSession ) . close ( ) ; verify ( org.springframework.jms.connection.TopicConnection ) . start ( ) ; verify ( org.springframework.jms.connection.TopicConnection ) . stop ( ) ; verify ( org.springframework.jms.connection.TopicConnection ) . close ( ) ; }  <METHOD_END>
