<METHOD_START> public void ( ) { this . java.util.Set<org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition> = new java.util.HashSet<org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition> < org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition > ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = StringUtils . hasText ( java.lang.String ) ? java.lang.String : java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Projection org.springframework.data.rest.core.config.Projection = AnnotationUtils . findAnnotation ( java.lang.Class<> , Projection .class ) ; if ( org.springframework.data.rest.core.config.Projection == null ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( java.lang.String , java.lang.Class<> ) ) ; } java.lang.String java.lang.String = org.springframework.data.rest.core.config.Projection . name ( ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.data.rest.core.config.Projection . types ( ) ; return StringUtils . hasText ( java.lang.String ) ? org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration ( java.lang.Class<> , java.lang.String , java.lang.Class<?>[] ) : org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration ( java.lang.Class<> , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration ( java.lang.Class<> , StringUtils . uncapitalize ( java.lang.Class<> . java.lang.String ( ) ) , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; Assert . notEmpty ( java.lang.Class<?>[] , STRING ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { this . java.util.Set<org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition> . boolean ( org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition . org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition ( java.lang.Class<> , java.lang.Class<> , java.lang.String ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return java.util.Map<java.lang.String,java.lang.Class<?>> ( java.lang.Class<> ) . java.lang.Class<?> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { for ( org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition : java.util.Set<org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition> ) { if ( org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition . java.lang.Class<> . boolean ( java.lang.Class<> ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > java.util.Map<java.lang.String,java.lang.Class<?>> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . getUserClass ( java.lang.Class<> ) ; java.util.Map<java.lang.String,org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition> < java.lang.String , org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition > java.util.Map<java.lang.String,org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition> = new java.util.HashMap<java.lang.String,org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition> < java.lang.String , org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition > ( ) ; java.util.Map<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > java.util.Map<java.lang.String,java.lang.Class<?>> = new java.util.HashMap<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > ( ) ; for ( org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition : java.util.Set<org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition> ) { if ( ! org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition . java.lang.Class<> . boolean ( java.lang.Class<> ) ) { continue; } org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition = java.util.Map<java.lang.String,org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition> . org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition ( org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition . java.lang.String ) ; if ( org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition == null || boolean ( org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition . java.lang.Class<> , org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition . java.lang.Class<> ) ) { java.util.Map<java.lang.String,org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition> . org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition ( org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition . java.lang.String , org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition ) ; java.util.Map<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition . java.lang.String , org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition . java.lang.Class<> ) ; } } return java.util.Map<java.lang.String,java.lang.Class<?>> ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<> . boolean ( java.lang.Class<> ) && ! java.lang.Class<> . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; return new org.springframework.data.rest.core.config.ProjectionDefinitionConfiguration.ProjectionDefinition ( java.lang.Class<> , java.lang.Class<> , java.lang.String ) ; }  <METHOD_END>
