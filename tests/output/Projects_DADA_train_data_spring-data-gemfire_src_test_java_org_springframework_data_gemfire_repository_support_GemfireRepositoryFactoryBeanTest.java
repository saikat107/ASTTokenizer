<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryBean = new GemfireRepositoryFactoryBean ( PersonRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.repository.support.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.repository.support.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryBean . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { RegionAttributes < ? , ? > org.springframework.data.gemfire.repository.support.RegionAttributes<?,?> = mock ( RegionAttributes .class ) ; doReturn ( java.lang.Long .class ) . when ( org.springframework.data.gemfire.repository.support.RegionAttributes<,> ) . getKeyConstraint ( ) ; Region < ? , ? > org.springframework.data.gemfire.repository.support.Region<?,?> = mock ( Region .class ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.repository.support.Region<,> ) . getName ( ) ; doReturn ( org.springframework.data.gemfire.repository.support.RegionAttributes<,> ) . when ( org.springframework.data.gemfire.repository.support.Region<,> ) . getAttributes ( ) ; ApplicationContext org.springframework.data.gemfire.repository.support.ApplicationContext = mock ( ApplicationContext .class ) ; doReturn ( java.util.Collections . java.util.Map ( STRING , org.springframework.data.gemfire.repository.support.Region<,> ) ) . when ( org.springframework.data.gemfire.repository.support.ApplicationContext ) . getBeansOfType ( Region .class ) ; org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryBean . setApplicationContext ( org.springframework.data.gemfire.repository.support.ApplicationContext ) ; org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryBean . setGemfireMappingContext ( new GemfireMappingContext ( ) ) ; org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryBean . getObject ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
