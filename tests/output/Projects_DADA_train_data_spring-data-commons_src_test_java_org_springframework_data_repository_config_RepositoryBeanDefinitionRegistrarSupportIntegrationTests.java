<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.repository.config.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.data.repository.config.RepositoryBeanDefinitionRegistrarSupportIntegrationTests.TestConfig .class ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( org.springframework.data.repository.config.AnnotationConfigApplicationContext != null ) { this . org.springframework.data.repository.config.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.repository.config.AnnotationConfigApplicationContext . getBean ( MyOtherRepository .class ) . getImplementationId ( ) ) . isEqualTo ( MyOtherRepositoryImpl .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.repository.config.AnnotationConfigApplicationContext . getBean ( MyRepository .class ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.repository.config.AnnotationConfigApplicationContext . getBean ( MyOtherRepository .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.data.repository.config.BeanDefinition = org.springframework.data.repository.config.AnnotationConfigApplicationContext . getBeanDefinition ( STRING ) ; assertThat ( org.springframework.data.repository.config.BeanDefinition . getSource ( ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.repository.config.AnnotationConfigApplicationContext . getBean ( DummyConfigurationExtension .class ) ) . isNotNull ( ) ; }  <METHOD_END>
