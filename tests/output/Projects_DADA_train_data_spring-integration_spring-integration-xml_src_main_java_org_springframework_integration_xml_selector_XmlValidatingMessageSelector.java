<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( XmlValidator org.springframework.integration.xml.selector.XmlValidator ) { Assert . notNull ( org.springframework.integration.xml.selector.XmlValidator , STRING ) ; this . org.springframework.integration.xml.selector.XmlValidator = org.springframework.integration.xml.selector.XmlValidator ; }  <METHOD_END>
<METHOD_START> public void ( Resource org.springframework.integration.xml.selector.Resource , org.springframework.integration.xml.selector.XmlValidatingMessageSelector.SchemaType org.springframework.integration.xml.selector.XmlValidatingMessageSelector.SchemaType ) throws java.io.IOException { Assert . notNull ( org.springframework.integration.xml.selector.Resource , STRING ) ; if ( org.springframework.integration.xml.selector.XmlValidatingMessageSelector.SchemaType == null ) { org.springframework.integration.xml.selector.XmlValidatingMessageSelector.SchemaType = org.springframework.integration.xml.selector.XmlValidatingMessageSelector.SchemaType . org.springframework.integration.xml.selector.XmlValidatingMessageSelector.SchemaType ; } this . org.springframework.integration.xml.selector.XmlValidator = XmlValidatorFactory . createValidator ( org.springframework.integration.xml.selector.Resource , org.springframework.integration.xml.selector.XmlValidatingMessageSelector.SchemaType . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( Resource org.springframework.integration.xml.selector.Resource , java.lang.String java.lang.String ) throws java.io.IOException { this( org.springframework.integration.xml.selector.Resource , StringUtils . isEmpty ( java.lang.String ) ? null : org.springframework.integration.xml.selector.XmlValidatingMessageSelector.SchemaType . org.springframework.integration.xml.selector.XmlValidatingMessageSelector.SchemaType ( java.lang.String . java.lang.String ( ) . java.lang.String ( STRING , STRING ) ) ); }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( XmlPayloadConverter org.springframework.integration.xml.selector.XmlPayloadConverter ) { Assert . notNull ( org.springframework.integration.xml.selector.XmlPayloadConverter , STRING ) ; this . org.springframework.integration.xml.selector.XmlPayloadConverter = org.springframework.integration.xml.selector.XmlPayloadConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.integration.xml.selector.Message<?> ) { org.xml.sax.SAXParseException [] org.xml.sax.SAXParseException[] = null ; try { org.xml.sax.SAXParseException[] = this . org.springframework.integration.xml.selector.XmlValidator . validate ( this . org.springframework.integration.xml.selector.XmlPayloadConverter . convertToSource ( org.springframework.integration.xml.selector.Message<> . getPayload ( ) ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessageHandlingException ( org.springframework.integration.xml.selector.Message<> , java.lang.Exception ) ; } boolean boolean = ObjectUtils . isEmpty ( org.xml.sax.SAXParseException[] ) ; if ( ! boolean ) { if ( this . boolean ) { throw new MessageRejectedException ( org.springframework.integration.xml.selector.Message<> , STRING , new AggregatedXmlMessageValidationException ( java.util.Arrays .< java.lang.Throwable > java.util.List<java.lang.Throwable> ( org.xml.sax.SAXParseException[] ) ) ) ; } this . org.springframework.integration.xml.selector.Log . debug ( STRING ) ; } return boolean ; }  <METHOD_END>
