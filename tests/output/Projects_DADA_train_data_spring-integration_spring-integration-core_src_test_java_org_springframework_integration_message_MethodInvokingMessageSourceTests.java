<METHOD_START> @ Test public void void ( ) { MethodInvokingMessageSource org.springframework.integration.message.MethodInvokingMessageSource = new MethodInvokingMessageSource ( ) ; org.springframework.integration.message.MethodInvokingMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.message.MethodInvokingMessageSource . setObject ( new org.springframework.integration.message.MethodInvokingMessageSourceTests.TestBean ( ) ) ; org.springframework.integration.message.MethodInvokingMessageSource . setMethodName ( STRING ) ; Message < ? > org.springframework.integration.message.Message<?> = org.springframework.integration.message.MethodInvokingMessageSource . receive ( ) ; assertNotNull ( org.springframework.integration.message.Message<> ) ; assertNotNull ( org.springframework.integration.message.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.message.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.integration.message.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.message.Expression> = new java.util.HashMap<java.lang.String,org.springframework.integration.message.Expression> < java.lang.String , Expression > ( ) ; java.util.Map<java.lang.String,org.springframework.integration.message.Expression> . put ( STRING , new LiteralExpression ( STRING ) ) ; java.util.Map<java.lang.String,org.springframework.integration.message.Expression> . put ( STRING , new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; MethodInvokingMessageSource org.springframework.integration.message.MethodInvokingMessageSource = new MethodInvokingMessageSource ( ) ; org.springframework.integration.message.MethodInvokingMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.message.MethodInvokingMessageSource . setObject ( new org.springframework.integration.message.MethodInvokingMessageSourceTests.TestBean ( ) ) ; org.springframework.integration.message.MethodInvokingMessageSource . setMethodName ( STRING ) ; org.springframework.integration.message.MethodInvokingMessageSource . setHeaderExpressions ( java.util.Map<java.lang.String,org.springframework.integration.message.Expression> ) ; Message < ? > org.springframework.integration.message.Message<?> = org.springframework.integration.message.MethodInvokingMessageSource . receive ( ) ; assertNotNull ( org.springframework.integration.message.Message<> ) ; assertNotNull ( org.springframework.integration.message.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.message.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.message.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.message.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { MethodInvokingMessageSource org.springframework.integration.message.MethodInvokingMessageSource = new MethodInvokingMessageSource ( ) ; org.springframework.integration.message.MethodInvokingMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.message.MethodInvokingMessageSource . setObject ( new org.springframework.integration.message.MethodInvokingMessageSourceTests.TestBean ( ) ) ; org.springframework.integration.message.MethodInvokingMessageSource . setMethodName ( STRING ) ; org.springframework.integration.message.MethodInvokingMessageSource . receive ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { MethodInvokingMessageSource org.springframework.integration.message.MethodInvokingMessageSource = new MethodInvokingMessageSource ( ) ; org.springframework.integration.message.MethodInvokingMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.message.MethodInvokingMessageSource . setObject ( new org.springframework.integration.message.MethodInvokingMessageSourceTests.TestBean ( ) ) ; org.springframework.integration.message.MethodInvokingMessageSource . setMethodName ( STRING ) ; org.springframework.integration.message.MethodInvokingMessageSource . receive ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { MethodInvokingMessageSource org.springframework.integration.message.MethodInvokingMessageSource = new MethodInvokingMessageSource ( ) ; org.springframework.integration.message.MethodInvokingMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.message.MethodInvokingMessageSource . setObject ( new org.springframework.integration.message.MethodInvokingMessageSourceTests.TestBean ( ) ) ; org.springframework.integration.message.MethodInvokingMessageSource . setMethodName ( STRING ) ; org.springframework.integration.message.MethodInvokingMessageSource . receive ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodInvokingMessageSource org.springframework.integration.message.MethodInvokingMessageSource = new MethodInvokingMessageSource ( ) ; org.springframework.integration.message.MethodInvokingMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.message.MethodInvokingMessageSource . setObject ( new org.springframework.integration.message.MethodInvokingMessageSourceTests.TestBean ( ) ) ; org.springframework.integration.message.MethodInvokingMessageSource . setMethodName ( STRING ) ; Message < ? > org.springframework.integration.message.Message<?> = org.springframework.integration.message.MethodInvokingMessageSource . receive ( ) ; assertNull ( org.springframework.integration.message.Message<> ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING ; }  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
