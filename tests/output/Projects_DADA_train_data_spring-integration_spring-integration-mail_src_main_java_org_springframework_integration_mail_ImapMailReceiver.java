<METHOD_START> public void ( ) { super(); this . setProtocol ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); if ( java.lang.String != null ) { Assert . isTrue ( java.lang.String . java.lang.String ( ) . boolean ( STRING ) , STRING ) ; } else { this . setProtocol ( STRING ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( SearchTermStrategy org.springframework.integration.mail.SearchTermStrategy ) { Assert . notNull ( org.springframework.integration.mail.SearchTermStrategy , STRING ) ; this . org.springframework.integration.mail.SearchTermStrategy = org.springframework.integration.mail.SearchTermStrategy ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long * NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; this . org.springframework.integration.mail.TaskScheduler = getTaskScheduler ( ) ; if ( this . org.springframework.integration.mail.TaskScheduler == null ) { ThreadPoolTaskScheduler org.springframework.integration.mail.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.mail.ThreadPoolTaskScheduler . initialize ( ) ; this . org.springframework.integration.mail.TaskScheduler = org.springframework.integration.mail.ThreadPoolTaskScheduler ; } java.util.Properties java.util.Properties = getJavaMailProperties ( ) ; for ( java.lang.String java.lang.String : new java.lang.String [] { STRING , STRING } ) { java.lang.String java.lang.String = STRING + java.lang.String + STRING ; if ( java.util.Properties . java.lang.String ( java.lang.String ) == null ) { java.util.Properties . java.lang.Object ( java.lang.String , STRING ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( ) org.springframework.integration.mail.MessagingException { this . openFolder ( ) ; Folder org.springframework.integration.mail.Folder = this . getFolder ( ) ; Assert . state ( org.springframework.integration.mail.Folder instanceof IMAPFolder , STRING + IMAPFolder .class . java.lang.String ( ) + STRING ) ; IMAPFolder org.springframework.integration.mail.IMAPFolder = ( IMAPFolder ) org.springframework.integration.mail.Folder ; if ( org.springframework.integration.mail.IMAPFolder . hasNewMessages ( ) ) { return; } else if ( ! org.springframework.integration.mail.Folder . getPermanentFlags ( ) . contains ( Flags . Flag . RECENT ) ) { if ( org.springframework.integration.mail.Message[] ( ) . length > NUMBER ) { return; } } org.springframework.integration.mail.IMAPFolder . addMessageCountListener ( this . org.springframework.integration.mail.MessageCountListener ) ; try { this . java.util.concurrent.ScheduledFuture<?> = this . org.springframework.integration.mail.TaskScheduler . schedule ( this . org.springframework.integration.mail.ImapMailReceiver.IdleCanceler , new java.util.Date ( java.lang.System . long ( ) + this . long ) ) ; org.springframework.integration.mail.IMAPFolder . idle ( ) ; } finally { org.springframework.integration.mail.IMAPFolder . removeMessageCountListener ( this . org.springframework.integration.mail.MessageCountListener ) ; if ( this . java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.mail.Message [] org.springframework.integration.mail.Message[] ( ) org.springframework.integration.mail.MessagingException { Flags org.springframework.integration.mail.Flags = this . getFolder ( ) . getPermanentFlags ( ) ; SearchTerm org.springframework.integration.mail.SearchTerm = this . org.springframework.integration.mail.SearchTerm ( org.springframework.integration.mail.Flags ) ; Folder org.springframework.integration.mail.Folder = this . getFolder ( ) ; if ( org.springframework.integration.mail.Folder . isOpen ( ) ) { return org.springframework.integration.mail.Message[] ( org.springframework.integration.mail.SearchTerm != null ? org.springframework.integration.mail.Folder . search ( org.springframework.integration.mail.SearchTerm ) : org.springframework.integration.mail.Folder . getMessages ( ) ) ; } throw new MessagingException ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.mail.Message [] org.springframework.integration.mail.Message[] ( Message [] org.springframework.integration.mail.Message[] ) { boolean boolean = false ; for ( Message org.springframework.integration.mail.Message : org.springframework.integration.mail.Message[] ) { if ( org.springframework.integration.mail.Message == null ) { boolean = true ; break; } } if ( ! boolean ) { return org.springframework.integration.mail.Message[] ; } else { java.util.List<org.springframework.integration.mail.Message> < Message > java.util.List<org.springframework.integration.mail.Message> = new java.util.ArrayList<org.springframework.integration.mail.Message> < Message > ( ) ; for ( Message org.springframework.integration.mail.Message : org.springframework.integration.mail.Message[] ) { if ( org.springframework.integration.mail.Message != null ) { java.util.List<org.springframework.integration.mail.Message> . add ( org.springframework.integration.mail.Message ) ; } } return java.util.List<org.springframework.integration.mail.Message> . toArray ( new Message [ java.util.List<org.springframework.integration.mail.Message> . size ( ) ] ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.mail.SearchTerm org.springframework.integration.mail.SearchTerm ( Flags org.springframework.integration.mail.Flags ) { return this . org.springframework.integration.mail.SearchTermStrategy . generateSearchTerm ( org.springframework.integration.mail.Flags , this . getFolder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message org.springframework.integration.mail.Message ) throws org.springframework.integration.mail.MessagingException { super. setAdditionalFlags ( org.springframework.integration.mail.Message ) ; if ( this . boolean ) { org.springframework.integration.mail.Message . setFlag ( Flag . SEEN , true ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { Folder org.springframework.integration.mail.Folder = getFolder ( ) ; logger . debug ( STRING ) ; if ( org.springframework.integration.mail.Folder != null ) { org.springframework.integration.mail.Folder . isOpen ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) {			} }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageCountEvent org.springframework.integration.mail.MessageCountEvent ) { Message [] org.springframework.integration.mail.Message[] = org.springframework.integration.mail.MessageCountEvent . getMessages ( ) ; if ( messages . length > NUMBER ) { org.springframework.integration.mail.Message[] [ NUMBER ] . getFolder ( ) . isOpen ( ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mail.SearchTerm org.springframework.integration.mail.SearchTerm ( Flags org.springframework.integration.mail.Flags , Folder org.springframework.integration.mail.Folder ) { SearchTerm org.springframework.integration.mail.SearchTerm = null ; boolean boolean = false ; if ( org.springframework.integration.mail.Flags != null ) { boolean = org.springframework.integration.mail.Flags . contains ( Flags . Flag . RECENT ) ; if ( boolean ) { org.springframework.integration.mail.SearchTerm = new FlagTerm ( new Flags ( Flags . Flag . RECENT ) , true ) ; } if ( org.springframework.integration.mail.Flags . contains ( Flags . Flag . ANSWERED ) ) { NotTerm org.springframework.integration.mail.NotTerm = new NotTerm ( new FlagTerm ( new Flags ( Flags . Flag . ANSWERED ) , true ) ) ; if ( org.springframework.integration.mail.SearchTerm == null ) { org.springframework.integration.mail.SearchTerm = org.springframework.integration.mail.NotTerm ; } else { org.springframework.integration.mail.SearchTerm = new AndTerm ( org.springframework.integration.mail.SearchTerm , org.springframework.integration.mail.NotTerm ) ; } } if ( org.springframework.integration.mail.Flags . contains ( Flags . Flag . DELETED ) ) { NotTerm org.springframework.integration.mail.NotTerm = new NotTerm ( new FlagTerm ( new Flags ( Flags . Flag . DELETED ) , true ) ) ; if ( org.springframework.integration.mail.SearchTerm == null ) { org.springframework.integration.mail.SearchTerm = org.springframework.integration.mail.NotTerm ; } else { org.springframework.integration.mail.SearchTerm = new AndTerm ( org.springframework.integration.mail.SearchTerm , org.springframework.integration.mail.NotTerm ) ; } } if ( org.springframework.integration.mail.Flags . contains ( Flags . Flag . SEEN ) ) { NotTerm org.springframework.integration.mail.NotTerm = new NotTerm ( new FlagTerm ( new Flags ( Flags . Flag . SEEN ) , true ) ) ; if ( org.springframework.integration.mail.SearchTerm == null ) { org.springframework.integration.mail.SearchTerm = org.springframework.integration.mail.NotTerm ; } else { org.springframework.integration.mail.SearchTerm = new AndTerm ( org.springframework.integration.mail.SearchTerm , org.springframework.integration.mail.NotTerm ) ; } } } if ( ! boolean ) { NotTerm org.springframework.integration.mail.NotTerm = null ; if ( org.springframework.integration.mail.Folder . getPermanentFlags ( ) . contains ( Flags . Flag . USER ) ) { logger . debug ( STRING + STRING + STRING + getUserFlag ( ) ) ; Flags org.springframework.integration.mail.Flags = new Flags ( ) ; org.springframework.integration.mail.Flags . add ( getUserFlag ( ) ) ; org.springframework.integration.mail.NotTerm = new NotTerm ( new FlagTerm ( org.springframework.integration.mail.Flags , true ) ) ; } else { logger . debug ( STRING + STRING ) ; org.springframework.integration.mail.NotTerm = new NotTerm ( new FlagTerm ( new Flags ( Flags . Flag . FLAGGED ) , true ) ) ; } if ( org.springframework.integration.mail.SearchTerm == null ) { org.springframework.integration.mail.SearchTerm = org.springframework.integration.mail.NotTerm ; } else { org.springframework.integration.mail.SearchTerm = new AndTerm ( org.springframework.integration.mail.SearchTerm , org.springframework.integration.mail.NotTerm ) ; } } return org.springframework.integration.mail.SearchTerm ; }  <METHOD_END>
