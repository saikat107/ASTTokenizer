<METHOD_START> public void ( ApplicationContext org.springframework.boot.autoconfigure.web.reactive.ApplicationContext ) { this . org.springframework.boot.autoconfigure.web.reactive.ApplicationContext = org.springframework.boot.autoconfigure.web.reactive.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.reactive.HttpHandler org.springframework.boot.autoconfigure.web.reactive.HttpHandler ( ) { return WebHttpHandlerBuilder . applicationContext ( this . org.springframework.boot.autoconfigure.web.reactive.ApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.web.reactive.WebFilter> < WebFilter > > org.springframework.boot.autoconfigure.web.reactive.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.web.reactive.WebFilter>> , ObjectProvider < WebSessionManager > org.springframework.boot.autoconfigure.web.reactive.ObjectProvider<org.springframework.boot.autoconfigure.web.reactive.WebSessionManager> , ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.web.reactive.HttpMessageReader<?>> < HttpMessageReader < ? > > > org.springframework.boot.autoconfigure.web.reactive.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.web.reactive.HttpMessageReader<?>>> , ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.web.reactive.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > org.springframework.boot.autoconfigure.web.reactive.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.web.reactive.HttpMessageWriter<?>>> , ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.web.reactive.ViewResolver> < ViewResolver > > org.springframework.boot.autoconfigure.web.reactive.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.web.reactive.ViewResolver>> ) { this . java.util.List<org.springframework.boot.autoconfigure.web.reactive.WebFilter> = org.springframework.boot.autoconfigure.web.reactive.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.web.reactive.WebFilter>> . getIfAvailable ( ) ; if ( this . java.util.List<org.springframework.boot.autoconfigure.web.reactive.WebFilter> != null ) { AnnotationAwareOrderComparator . sort ( this . java.util.List<org.springframework.boot.autoconfigure.web.reactive.WebFilter> ) ; } this . org.springframework.boot.autoconfigure.web.reactive.WebSessionManager = org.springframework.boot.autoconfigure.web.reactive.ObjectProvider<org.springframework.boot.autoconfigure.web.reactive.WebSessionManager> . getIfAvailable ( ) ; this . java.util.List<org.springframework.boot.autoconfigure.web.reactive.HttpMessageReader<?>> = org.springframework.boot.autoconfigure.web.reactive.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.web.reactive.HttpMessageReader<?>>> . getIfAvailable ( ) ; this . java.util.List<org.springframework.boot.autoconfigure.web.reactive.HttpMessageWriter<?>> = org.springframework.boot.autoconfigure.web.reactive.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.web.reactive.HttpMessageWriter<?>>> . getIfAvailable ( ) ; this . java.util.List<org.springframework.boot.autoconfigure.web.reactive.ViewResolver> = org.springframework.boot.autoconfigure.web.reactive.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.web.reactive.ViewResolver>> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public < T extends org.springframework.boot.autoconfigure.web.reactive.ServerResponse > org.springframework.boot.autoconfigure.web.reactive.HttpHandler org.springframework.boot.autoconfigure.web.reactive.HttpHandler ( java.util.List<org.springframework.boot.autoconfigure.web.reactive.RouterFunction<T>> < RouterFunction < T > > java.util.List<org.springframework.boot.autoconfigure.web.reactive.RouterFunction<T>> ) { java.util.List<org.springframework.boot.autoconfigure.web.reactive.RouterFunction<T>> . sort ( new AnnotationAwareOrderComparator ( ) ) ; RouterFunction < T > org.springframework.boot.autoconfigure.web.reactive.RouterFunction<T> = java.util.List<org.springframework.boot.autoconfigure.web.reactive.RouterFunction<T>> . stream ( ) . reduce ( RouterFunction :: and ) . get ( ) ; HandlerStrategies . HandlerStrategies HandlerStrategies.Builder = HandlerStrategies . builder ( ) ; if ( this . java.util.List<org.springframework.boot.autoconfigure.web.reactive.HttpMessageReader<?>> != null ) { this . java.util.List<org.springframework.boot.autoconfigure.web.reactive.HttpMessageReader<?>> . forEach ( HandlerStrategies.Builder :: messageReader ) ; } if ( this . java.util.List<org.springframework.boot.autoconfigure.web.reactive.HttpMessageWriter<?>> != null ) { this . java.util.List<org.springframework.boot.autoconfigure.web.reactive.HttpMessageWriter<?>> . forEach ( HandlerStrategies.Builder :: messageWriter ) ; } if ( this . java.util.List<org.springframework.boot.autoconfigure.web.reactive.ViewResolver> != null ) { this . java.util.List<org.springframework.boot.autoconfigure.web.reactive.ViewResolver> . forEach ( HandlerStrategies.Builder :: viewResolver ) ; } WebHandler org.springframework.boot.autoconfigure.web.reactive.WebHandler = RouterFunctions . toHttpHandler ( org.springframework.boot.autoconfigure.web.reactive.RouterFunction<T> , HandlerStrategies.Builder . build ( ) ) ; WebHttpHandlerBuilder org.springframework.boot.autoconfigure.web.reactive.WebHttpHandlerBuilder = WebHttpHandlerBuilder . webHandler ( org.springframework.boot.autoconfigure.web.reactive.WebHandler ) . sessionManager ( this . org.springframework.boot.autoconfigure.web.reactive.WebSessionManager ) ; org.springframework.boot.autoconfigure.web.reactive.WebHttpHandlerBuilder . filters ( this . java.util.List<org.springframework.boot.autoconfigure.web.reactive.WebFilter> ) ; return org.springframework.boot.autoconfigure.web.reactive.WebHttpHandlerBuilder . build ( ) ; }  <METHOD_END>
