<METHOD_START> public void ( final MappingContext < ? extends CouchbasePersistentEntity < ? > , CouchbasePersistentProperty > org.springframework.data.couchbase.core.convert.MappingContext<? extends org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<?>,org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> ) { this( org.springframework.data.couchbase.core.convert.MappingContext<,org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( final MappingContext < ? extends CouchbasePersistentEntity < ? > , CouchbasePersistentProperty > org.springframework.data.couchbase.core.convert.MappingContext<? extends org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<?>,org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> , final java.lang.String java.lang.String ) { super( new DefaultConversionService ( ) ); this . org.springframework.data.couchbase.core.convert.MappingContext<? extends org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<?>,org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> = org.springframework.data.couchbase.core.convert.MappingContext<,org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> ; org.springframework.data.couchbase.core.convert.CouchbaseTypeMapper = new DefaultCouchbaseTypeMapper ( java.lang.String != null ? java.lang.String : java.lang.String ) ; org.springframework.data.couchbase.core.convert.SpELContext = new SpELContext ( CouchbaseDocumentPropertyAccessor . INSTANCE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.convert.MappingContext<? extends org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<?>,org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> < ? extends CouchbasePersistentEntity < ? > , CouchbasePersistentProperty > org.springframework.data.couchbase.core.convert.MappingContext<? extends org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<?>,org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> ( ) { return org.springframework.data.couchbase.core.convert.MappingContext<,org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.data.couchbase.core.convert.CouchbaseTypeMapper . getTypeKey ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < R > R R ( final java.lang.Class<R> < R > java.lang.Class<R> , final CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument ) { return java.lang.Object ( ClassTypeInformation . from ( java.lang.Class<R> ) , org.springframework.data.couchbase.core.convert.CouchbaseDocument , null ) ; }  <METHOD_END>
<METHOD_START> protected < R > R R ( final TypeInformation < R > org.springframework.data.couchbase.core.convert.TypeInformation<R> , final CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument ) { return java.lang.Object ( org.springframework.data.couchbase.core.convert.TypeInformation<R> , org.springframework.data.couchbase.core.convert.CouchbaseDocument , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < R > R R ( final TypeInformation < R > org.springframework.data.couchbase.core.convert.TypeInformation<R> , final CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument , final java.lang.Object java.lang.Object ) { if ( org.springframework.data.couchbase.core.convert.CouchbaseDocument == null ) { return null ; } TypeInformation < ? extends R > org.springframework.data.couchbase.core.convert.TypeInformation<? extends R> = org.springframework.data.couchbase.core.convert.CouchbaseTypeMapper . readType ( org.springframework.data.couchbase.core.convert.CouchbaseDocument , org.springframework.data.couchbase.core.convert.TypeInformation<R> ) ; java.lang.Class<? extends R> < ? extends R > java.lang.Class<? extends R> = org.springframework.data.couchbase.core.convert.TypeInformation<> . getType ( ) ; if ( conversions . hasCustomReadTarget ( org.springframework.data.couchbase.core.convert.CouchbaseDocument . getClass ( ) , java.lang.Class<> ) ) { return conversionService . convert ( org.springframework.data.couchbase.core.convert.CouchbaseDocument , java.lang.Class<> ) ; } if ( org.springframework.data.couchbase.core.convert.TypeInformation<> . isMap ( ) ) { return ( R ) java.util.Map<java.lang.Object,java.lang.Object> ( org.springframework.data.couchbase.core.convert.TypeInformation<> , org.springframework.data.couchbase.core.convert.CouchbaseDocument , java.lang.Object ) ; } CouchbasePersistentEntity < R > org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<R> = ( CouchbasePersistentEntity < R > ) org.springframework.data.couchbase.core.convert.MappingContext<,org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> . getRequiredPersistentEntity ( org.springframework.data.couchbase.core.convert.TypeInformation<> ) ; return java.lang.Object ( org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<R> , org.springframework.data.couchbase.core.convert.CouchbaseDocument , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected < R > R R ( final CouchbasePersistentEntity < R > org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<R> , final CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument , final java.lang.Object java.lang.Object ) { final DefaultSpELExpressionEvaluator org.springframework.data.couchbase.core.convert.DefaultSpELExpressionEvaluator = new DefaultSpELExpressionEvaluator ( org.springframework.data.couchbase.core.convert.CouchbaseDocument , org.springframework.data.couchbase.core.convert.SpELContext ) ; ParameterValueProvider < CouchbasePersistentProperty > org.springframework.data.couchbase.core.convert.ParameterValueProvider<org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> = org.springframework.data.couchbase.core.convert.ParameterValueProvider<org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> ( org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<R> , org.springframework.data.couchbase.core.convert.CouchbaseDocument , org.springframework.data.couchbase.core.convert.DefaultSpELExpressionEvaluator , java.lang.Object ) ; EntityInstantiator org.springframework.data.couchbase.core.convert.EntityInstantiator = instantiators . getInstantiatorFor ( org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<R> ) ; final R R = org.springframework.data.couchbase.core.convert.EntityInstantiator . createInstance ( org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<R> , org.springframework.data.couchbase.core.convert.ParameterValueProvider<org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> ) ; final ConvertingPropertyAccessor org.springframework.data.couchbase.core.convert.ConvertingPropertyAccessor = org.springframework.data.couchbase.core.convert.ConvertingPropertyAccessor ( R ) ; org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<R> . getPersistentProperties ( ) . filter ( prop -> { if ( ! ( prop . isIdProperty ( ) || source . containsKey ( prop . getFieldName ( ) ) ) || entity . isConstructorArgument ( prop ) ) { return false ; } return true ; } ) . forEach ( prop -> { Optional < Object > obj = prop . isIdProperty ( ) ? Optional . ofNullable ( source . getId ( ) ) : getValueInternal ( prop , source , instance ) ; accessor . setProperty ( prop , obj ) ; } ) ; org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<R> . getAssociations ( ) . forEach ( association -> { CouchbasePersistentProperty inverseProp = association . getInverse ( ) ; Optional < Object > obj = getValueInternal ( inverseProp , source , instance ) ; accessor . setProperty ( inverseProp , obj ) ; } ) ; return R ; }  <METHOD_END>
<METHOD_START> protected java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( final CouchbasePersistentProperty org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty , final CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument , final java.lang.Object java.lang.Object ) { return new org.springframework.data.couchbase.core.convert.MappingCouchbaseConverter.CouchbasePropertyValueProvider ( org.springframework.data.couchbase.core.convert.CouchbaseDocument , org.springframework.data.couchbase.core.convert.SpELContext , java.lang.Object ) . java.util.Optional ( org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.convert.ParameterValueProvider<org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> < CouchbasePersistentProperty > org.springframework.data.couchbase.core.convert.ParameterValueProvider<org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> ( final CouchbasePersistentEntity < ? > org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<?> , final CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument , final DefaultSpELExpressionEvaluator org.springframework.data.couchbase.core.convert.DefaultSpELExpressionEvaluator , final java.lang.Object java.lang.Object ) { org.springframework.data.couchbase.core.convert.MappingCouchbaseConverter.CouchbasePropertyValueProvider org.springframework.data.couchbase.core.convert.MappingCouchbaseConverter.CouchbasePropertyValueProvider = new org.springframework.data.couchbase.core.convert.MappingCouchbaseConverter.CouchbasePropertyValueProvider ( org.springframework.data.couchbase.core.convert.CouchbaseDocument , org.springframework.data.couchbase.core.convert.DefaultSpELExpressionEvaluator , java.lang.Object ) ; PersistentEntityParameterValueProvider < CouchbasePersistentProperty > org.springframework.data.couchbase.core.convert.PersistentEntityParameterValueProvider<org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> = new PersistentEntityParameterValueProvider < CouchbasePersistentProperty > ( org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<> , org.springframework.data.couchbase.core.convert.MappingCouchbaseConverter.CouchbasePropertyValueProvider , java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) ) ; return new org.springframework.data.couchbase.core.convert.MappingCouchbaseConverter.ConverterAwareSpELExpressionParameterValueProvider ( org.springframework.data.couchbase.core.convert.DefaultSpELExpressionEvaluator , conversionService , org.springframework.data.couchbase.core.convert.PersistentEntityParameterValueProvider<org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ( final TypeInformation < ? > org.springframework.data.couchbase.core.convert.TypeInformation<?> , final CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument , final java.lang.Object java.lang.Object ) { Assert . notNull ( org.springframework.data.couchbase.core.convert.CouchbaseDocument , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.couchbase.core.convert.CouchbaseTypeMapper . readType ( org.springframework.data.couchbase.core.convert.CouchbaseDocument , org.springframework.data.couchbase.core.convert.TypeInformation<> ) . getType ( ) ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = CollectionFactory . createMap ( java.lang.Class<> , org.springframework.data.couchbase.core.convert.CouchbaseDocument . export ( ) . keySet ( ) . size ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.data.couchbase.core.convert.CouchbaseDocument . getPayload ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; java.lang.Object java.lang.Object = org.springframework.data.couchbase.core.convert.TypeInformation<> . getComponentType ( ) . map ( TypeInformation :: getType ) . map ( keyType -> ( Object ) conversionService . convert ( entry . getKey ( ) , keyType ) ) . orElse ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ) ; TypeInformation < ? > org.springframework.data.couchbase.core.convert.TypeInformation<?> = org.springframework.data.couchbase.core.convert.TypeInformation<> . getMapValueType ( ) . orElse ( null ) ; if ( java.lang.Object instanceof CouchbaseDocument ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , java.lang.Object ( org.springframework.data.couchbase.core.convert.TypeInformation<> , ( CouchbaseDocument ) java.lang.Object , java.lang.Object ) ) ; } else if ( java.lang.Object instanceof CouchbaseList ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , java.lang.Object ( org.springframework.data.couchbase.core.convert.TypeInformation<> , ( CouchbaseList ) java.lang.Object , java.lang.Object ) ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.couchbase.core.convert.TypeInformation<> == null ? null : org.springframework.data.couchbase.core.convert.TypeInformation<> . getType ( ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , java.lang.Object ( java.lang.Object , java.lang.Class<> ) ) ; } } return java.util.Map<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.Object java.lang.Object ( final java.lang.Object java.lang.Object , final java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Object == null || java.lang.Class<> == null ) { return java.lang.Object ; } if ( conversions . hasCustomReadTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<> ) ) { return conversionService . convert ( java.lang.Object , java.lang.Class<> ) ; } if ( java.lang.Enum .class . boolean ( java.lang.Class<> ) ) { return java.lang.Enum . java.lang.Enum ( ( java.lang.Class<java.lang.Enum> < java.lang.Enum > ) java.lang.Class<> , java.lang.Object . java.lang.String ( ) ) ; } if ( java.lang.Class .class . boolean ( java.lang.Class<> ) ) { try { return java.lang.Class . java.lang.Class<?> ( java.lang.Object . java.lang.String ( ) ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new MappingException ( STRING + java.lang.Object . java.lang.String ( ) ) ; } } return java.lang.Class<> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ? java.lang.Object : conversionService . convert ( java.lang.Object , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.lang.Object java.lang.Object , final CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument ) { if ( java.lang.Object == null ) { return; } boolean boolean = conversions . getCustomWriteTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , CouchbaseDocument .class ) != null ; TypeInformation < ? > org.springframework.data.couchbase.core.convert.TypeInformation<?> = ClassTypeInformation . from ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; if ( ! boolean ) { org.springframework.data.couchbase.core.convert.CouchbaseTypeMapper . writeType ( org.springframework.data.couchbase.core.convert.TypeInformation<> , org.springframework.data.couchbase.core.convert.CouchbaseDocument ) ; } void ( java.lang.Object , org.springframework.data.couchbase.core.convert.CouchbaseDocument , org.springframework.data.couchbase.core.convert.TypeInformation<> ) ; if ( org.springframework.data.couchbase.core.convert.CouchbaseDocument . getId ( ) == null ) { throw new MappingException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( final java.lang.Object java.lang.Object , CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument , final TypeInformation < ? > org.springframework.data.couchbase.core.convert.TypeInformation<?> ) { if ( java.lang.Object == null ) { return; } java.lang.Class<?> < ? > java.lang.Class<?> = conversions . getCustomWriteTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , CouchbaseDocument .class ) ; if ( java.lang.Class<> != null ) { void ( conversionService . convert ( java.lang.Object , CouchbaseDocument .class ) , org.springframework.data.couchbase.core.convert.CouchbaseDocument ) ; return; } if ( java.util.Map .class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { org.springframework.data.couchbase.core.convert.CouchbaseDocument ( ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.lang.Object , org.springframework.data.couchbase.core.convert.CouchbaseDocument , ClassTypeInformation . MAP ) ; return; } if ( java.util.Collection .class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } CouchbasePersistentEntity < ? > org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<?> = org.springframework.data.couchbase.core.convert.MappingContext<,org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> . getPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) . orElse ( null ) ; void ( java.lang.Object , org.springframework.data.couchbase.core.convert.CouchbaseDocument , org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<> ) ; void ( org.springframework.data.couchbase.core.convert.TypeInformation<> , java.lang.Object , org.springframework.data.couchbase.core.convert.CouchbaseDocument ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument , final CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : org.springframework.data.couchbase.core.convert.CouchbaseDocument . export ( ) . entrySet ( ) ) { org.springframework.data.couchbase.core.convert.CouchbaseDocument . put ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } org.springframework.data.couchbase.core.convert.CouchbaseDocument . setId ( org.springframework.data.couchbase.core.convert.CouchbaseDocument . getId ( ) ) ; org.springframework.data.couchbase.core.convert.CouchbaseDocument . setExpiration ( org.springframework.data.couchbase.core.convert.CouchbaseDocument . getExpiration ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final java.lang.Object java.lang.Object , final CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument , final CouchbasePersistentEntity < ? > org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<?> ) { if ( java.lang.Object == null ) { return; } if ( org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<> == null ) { throw new MappingException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; } final ConvertingPropertyAccessor org.springframework.data.couchbase.core.convert.ConvertingPropertyAccessor = org.springframework.data.couchbase.core.convert.ConvertingPropertyAccessor ( java.lang.Object ) ; final java.util.Optional<org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> < CouchbasePersistentProperty > java.util.Optional<org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> = org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<> . getIdProperty ( ) ; final java.util.Optional<org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> < CouchbasePersistentProperty > java.util.Optional<org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> = org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<> . getVersionProperty ( ) ; if ( org.springframework.data.couchbase.core.convert.CouchbaseDocument . getId ( ) == null ) { java.util.Optional<org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> . ifPresent ( id -> { target . setId ( accessor . getProperty ( id , String .class ) . orElse ( null ) ) ; } ) ; } org.springframework.data.couchbase.core.convert.CouchbaseDocument . setExpiration ( org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<> . getExpiry ( ) ) ; org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<> . getPersistentProperties ( ) . filter ( prop -> { if ( idProperty . filter ( prop :: equals ) . isPresent ( ) ) { return false ; } if ( versionProperty . filter ( prop :: equals ) . isPresent ( ) ) { return false ; } if ( enableStrictFieldChecking && ! prop . isAnnotationPresent ( Field .class ) ) { return false ; } return true ; } ) . forEach ( prop -> { Optional < Object > propertyObj = accessor . getProperty ( prop , ( Class ) prop . getType ( ) ) ; propertyObj . ifPresent ( o -> { if ( ! conversions . isSimpleType ( o . getClass ( ) ) ) { writePropertyInternal ( o , target , prop ) ; } else { writeSimpleInternal ( o , target , prop . getFieldName ( ) ) ; } } ) ; } ) ; org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<> . getAssociations ( ) . forEach ( association -> { CouchbasePersistentProperty inverseProp = association . getInverse ( ) ; Class < ? > type = inverseProp . getType ( ) ; Optional < Object > propertyObj = accessor . getProperty ( inverseProp , ( Class ) type ) ; propertyObj . ifPresent ( o -> { writePropertyInternal ( o , target , inverseProp ) ; } ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( final java.lang.Object java.lang.Object , final CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument , final CouchbasePersistentProperty org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty ) { if ( java.lang.Object == null ) { return; } java.lang.String java.lang.String = org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty . getFieldName ( ) ; TypeInformation < ? > org.springframework.data.couchbase.core.convert.TypeInformation<?> = ClassTypeInformation . from ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; TypeInformation < ? > org.springframework.data.couchbase.core.convert.TypeInformation<?> = org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty . getTypeInformation ( ) ; if ( org.springframework.data.couchbase.core.convert.TypeInformation<> . isCollectionLike ( ) ) { CouchbaseList org.springframework.data.couchbase.core.convert.CouchbaseList = org.springframework.data.couchbase.core.convert.CouchbaseList ( java.util.Collection<?> ( java.lang.Object ) , org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty ) ; org.springframework.data.couchbase.core.convert.CouchbaseDocument . put ( java.lang.String , org.springframework.data.couchbase.core.convert.CouchbaseList ) ; return; } if ( org.springframework.data.couchbase.core.convert.TypeInformation<> . isMap ( ) ) { CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument = org.springframework.data.couchbase.core.convert.CouchbaseDocument ( ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.lang.Object , org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty ) ; org.springframework.data.couchbase.core.convert.CouchbaseDocument . put ( java.lang.String , org.springframework.data.couchbase.core.convert.CouchbaseDocument ) ; return; } java.lang.Class<?> < ? > java.lang.Class<?> = conversions . getCustomWriteTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , null ) ; if ( java.lang.Class<> != null ) { org.springframework.data.couchbase.core.convert.CouchbaseDocument . put ( java.lang.String , conversionService . convert ( java.lang.Object , java.lang.Class<> ) ) ; return; } CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument = new CouchbaseDocument ( ) ; void ( org.springframework.data.couchbase.core.convert.TypeInformation<> , java.lang.Object , org.springframework.data.couchbase.core.convert.CouchbaseDocument ) ; CouchbasePersistentEntity < ? > org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<?> = boolean ( org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty . getType ( ) , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ? org.springframework.data.couchbase.core.convert.MappingContext<,org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) : org.springframework.data.couchbase.core.convert.MappingContext<,org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> . getRequiredPersistentEntity ( org.springframework.data.couchbase.core.convert.TypeInformation<> ) ; void ( java.lang.Object , org.springframework.data.couchbase.core.convert.CouchbaseDocument , org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<> ) ; org.springframework.data.couchbase.core.convert.CouchbaseDocument . put ( java.lang.String , org.springframework.data.couchbase.core.convert.CouchbaseDocument ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.convert.CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument ( final java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> , final CouchbasePersistentProperty org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty ) { Assert . notNull ( java.util.Map<java.lang.Object,java.lang.Object> , STRING ) ; Assert . notNull ( org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty , STRING ) ; return org.springframework.data.couchbase.core.convert.CouchbaseDocument ( java.util.Map<java.lang.Object,java.lang.Object> , new CouchbaseDocument ( ) , org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty . getTypeInformation ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.convert.CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument ( final java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> , final CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument , final TypeInformation < ? > org.springframework.data.couchbase.core.convert.TypeInformation<?> ) { for ( java.util.Map . java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; if ( conversions . isSimpleType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { java.lang.String java.lang.String = java.lang.Object . java.lang.String ( ) ; if ( java.lang.Object == null || conversions . isSimpleType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { void ( java.lang.Object , org.springframework.data.couchbase.core.convert.CouchbaseDocument , java.lang.String ) ; } else if ( java.lang.Object instanceof java.util.Collection || java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { org.springframework.data.couchbase.core.convert.CouchbaseDocument . put ( java.lang.String , org.springframework.data.couchbase.core.convert.CouchbaseList ( java.util.Collection<?> ( java.lang.Object ) , new CouchbaseList ( conversions . getSimpleTypeHolder ( ) ) , org.springframework.data.couchbase.core.convert.TypeInformation<> . getMapValueType ( ) ) ) ; } else { CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument = new CouchbaseDocument ( ) ; TypeInformation < ? > org.springframework.data.couchbase.core.convert.TypeInformation<?> = org.springframework.data.couchbase.core.convert.TypeInformation<> . isMap ( ) ? org.springframework.data.couchbase.core.convert.TypeInformation<> . getMapValueType ( ) . orElse ( ClassTypeInformation . OBJECT ) : ClassTypeInformation . OBJECT ; void ( java.lang.Object , org.springframework.data.couchbase.core.convert.CouchbaseDocument , org.springframework.data.couchbase.core.convert.TypeInformation<> ) ; org.springframework.data.couchbase.core.convert.CouchbaseDocument . put ( java.lang.String , org.springframework.data.couchbase.core.convert.CouchbaseDocument ) ; } } else { throw new MappingException ( STRING ) ; } } return org.springframework.data.couchbase.core.convert.CouchbaseDocument ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.convert.CouchbaseList org.springframework.data.couchbase.core.convert.CouchbaseList ( final java.util.Collection<?> < ? > java.util.Collection<?> , final CouchbasePersistentProperty org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty ) { return org.springframework.data.couchbase.core.convert.CouchbaseList ( java.util.Collection<> , new CouchbaseList ( conversions . getSimpleTypeHolder ( ) ) , java.util.Optional . java.util.Optional ( org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty . getTypeInformation ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.convert.CouchbaseList org.springframework.data.couchbase.core.convert.CouchbaseList ( final java.util.Collection<?> < ? > java.util.Collection<?> , final CouchbaseList org.springframework.data.couchbase.core.convert.CouchbaseList , final java.util.Optional<org.springframework.data.couchbase.core.convert.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.couchbase.core.convert.TypeInformation<?>> ) { java.util.Optional<org.springframework.data.couchbase.core.convert.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.couchbase.core.convert.TypeInformation<?>> = java.util.Optional<org.springframework.data.couchbase.core.convert.TypeInformation<?>> . flatMap ( TypeInformation :: getComponentType ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object == null ? null : java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( java.lang.Class<> == null || conversions . isSimpleType ( java.lang.Class<> ) ) { org.springframework.data.couchbase.core.convert.CouchbaseList . put ( java.lang.Object ) ; } else if ( java.lang.Object instanceof java.util.Collection || java.lang.Class<> . boolean ( ) ) { org.springframework.data.couchbase.core.convert.CouchbaseList . put ( org.springframework.data.couchbase.core.convert.CouchbaseList ( java.util.Collection<?> ( java.lang.Object ) , new CouchbaseList ( conversions . getSimpleTypeHolder ( ) ) , java.util.Optional<org.springframework.data.couchbase.core.convert.TypeInformation<?>> ) ) ; } else { TypeInformation < ? > org.springframework.data.couchbase.core.convert.TypeInformation<?> = java.util.Optional<org.springframework.data.couchbase.core.convert.TypeInformation<?>> . orElse ( null ) ; CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument = new CouchbaseDocument ( ) ; void ( java.lang.Object , org.springframework.data.couchbase.core.convert.CouchbaseDocument , org.springframework.data.couchbase.core.convert.TypeInformation<> ) ; org.springframework.data.couchbase.core.convert.CouchbaseList . put ( org.springframework.data.couchbase.core.convert.CouchbaseDocument ) ; } } return org.springframework.data.couchbase.core.convert.CouchbaseList ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.Object java.lang.Object ( final TypeInformation < ? > org.springframework.data.couchbase.core.convert.TypeInformation<?> , final CouchbaseList org.springframework.data.couchbase.core.convert.CouchbaseList , final java.lang.Object java.lang.Object ) { Assert . notNull ( org.springframework.data.couchbase.core.convert.TypeInformation<> , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.couchbase.core.convert.TypeInformation<> . getType ( ) ; if ( org.springframework.data.couchbase.core.convert.CouchbaseList . isEmpty ( ) ) { return java.lang.Object ( new java.util.HashSet<java.lang.Object> < java.lang.Object > ( ) , java.lang.Class<> ) ; } java.lang.Class<?> = java.util.Collection .class . boolean ( java.lang.Class<> ) ? java.lang.Class<> : java.util.List .class ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = org.springframework.data.couchbase.core.convert.TypeInformation<> . getType ( ) . isArray ( ) ? new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) : CollectionFactory . createCollection ( java.lang.Class<> , org.springframework.data.couchbase.core.convert.CouchbaseList . size ( false ) ) ; TypeInformation < ? > org.springframework.data.couchbase.core.convert.TypeInformation<?> = org.springframework.data.couchbase.core.convert.TypeInformation<> . getComponentType ( ) . orElse ( null ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.couchbase.core.convert.TypeInformation<> == null ? null : org.springframework.data.couchbase.core.convert.TypeInformation<> . getType ( ) ; for ( int int = NUMBER ; int < org.springframework.data.couchbase.core.convert.CouchbaseList . size ( false ) ; int ++ ) { java.lang.Object java.lang.Object = org.springframework.data.couchbase.core.convert.CouchbaseList . get ( int ) ; if ( java.lang.Object instanceof CouchbaseDocument ) { java.util.Collection<java.lang.Object> . boolean ( java.lang.Object ( org.springframework.data.couchbase.core.convert.TypeInformation<> , ( CouchbaseDocument ) java.lang.Object , java.lang.Object ) ) ; } else if ( java.lang.Object instanceof CouchbaseList ) { java.util.Collection<java.lang.Object> . boolean ( java.lang.Object ( org.springframework.data.couchbase.core.convert.TypeInformation<> , ( CouchbaseList ) java.lang.Object , java.lang.Object ) ) ; } else { java.util.Collection<java.lang.Object> . boolean ( java.lang.Object ( java.lang.Object , java.lang.Class<> ) ) ; } } return java.lang.Object ( java.util.Collection<java.lang.Object> , org.springframework.data.couchbase.core.convert.TypeInformation<> . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Collection<?> < ? > java.util.Collection<?> ( final java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.util.Collection ) { return ( java.util.Collection<?> < ? > ) java.lang.Object ; } return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ? CollectionUtils . arrayToList ( java.lang.Object ) : java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( final java.lang.Class<?> < ? > java.lang.Class<?> , final java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<> . boolean ( java.lang.Class<> ) && ! java.lang.Class<> . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( final java.lang.Object java.lang.Object , final CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument , final java.lang.String java.lang.String ) { org.springframework.data.couchbase.core.convert.CouchbaseDocument . put ( java.lang.String , java.lang.Object ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( final java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return null ; } java.lang.Class<?> < ? > java.lang.Class<?> = conversions . getCustomWriteTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , null ) ; if ( java.lang.Class<> != null ) { return conversionService . convert ( java.lang.Object , java.lang.Class<> ) ; } else { return java.lang.Enum .class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ? ( ( java.lang.Enum<?> < ? > ) java.lang.Object ) . java.lang.String ( ) : java.lang.Object ; } }  <METHOD_END>
<METHOD_START> protected void void ( TypeInformation < ? > org.springframework.data.couchbase.core.convert.TypeInformation<?> , java.lang.Object java.lang.Object , CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument ) { TypeInformation < ? > org.springframework.data.couchbase.core.convert.TypeInformation<?> = org.springframework.data.couchbase.core.convert.TypeInformation<> != null ? org.springframework.data.couchbase.core.convert.TypeInformation<> . getActualType ( ) : org.springframework.data.couchbase.core.convert.TypeInformation<> ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.couchbase.core.convert.TypeInformation<> == null ? java.lang.Object .class : org.springframework.data.couchbase.core.convert.TypeInformation<> . getType ( ) ; boolean boolean = ! java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( java.lang.Class<> ) ; if ( boolean ) { org.springframework.data.couchbase.core.convert.CouchbaseTypeMapper . writeType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , org.springframework.data.couchbase.core.convert.CouchbaseDocument ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.data.couchbase.core.convert.ApplicationContext ) { this . org.springframework.data.couchbase.core.convert.ApplicationContext = org.springframework.data.couchbase.core.convert.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < R > R R ( java.lang.Object java.lang.Object , TypeInformation < ? > org.springframework.data.couchbase.core.convert.TypeInformation<?> , java.lang.Object java.lang.Object ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.couchbase.core.convert.TypeInformation<> . getType ( ) ; if ( conversions . hasCustomReadTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<> ) ) { return ( R ) conversionService . convert ( java.lang.Object , java.lang.Class<> ) ; } else if ( java.lang.Object instanceof CouchbaseDocument ) { return ( R ) java.lang.Object ( org.springframework.data.couchbase.core.convert.TypeInformation<> , ( CouchbaseDocument ) java.lang.Object , java.lang.Object ) ; } else if ( java.lang.Object instanceof CouchbaseList ) { return ( R ) java.lang.Object ( org.springframework.data.couchbase.core.convert.TypeInformation<> , ( CouchbaseList ) java.lang.Object , java.lang.Object ) ; } else { return ( R ) java.lang.Object ( java.lang.Object , java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.convert.ConvertingPropertyAccessor org.springframework.data.couchbase.core.convert.ConvertingPropertyAccessor ( java.lang.Object java.lang.Object ) { CouchbasePersistentEntity < ? > org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<?> = org.springframework.data.couchbase.core.convert.MappingContext<,org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; PersistentPropertyAccessor org.springframework.data.couchbase.core.convert.PersistentPropertyAccessor = org.springframework.data.couchbase.core.convert.CouchbasePersistentEntity<> . getPropertyAccessor ( java.lang.Object ) ; return new ConvertingPropertyAccessor ( org.springframework.data.couchbase.core.convert.PersistentPropertyAccessor , conversionService ) ; }  <METHOD_END>
<METHOD_START> public void ( final CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument , final SpELContext org.springframework.data.couchbase.core.convert.SpELContext , final java.lang.Object java.lang.Object ) { this( org.springframework.data.couchbase.core.convert.CouchbaseDocument , new DefaultSpELExpressionEvaluator ( org.springframework.data.couchbase.core.convert.CouchbaseDocument , org.springframework.data.couchbase.core.convert.SpELContext ) , java.lang.Object ); }  <METHOD_END>
<METHOD_START> public void ( final CouchbaseDocument org.springframework.data.couchbase.core.convert.CouchbaseDocument , final DefaultSpELExpressionEvaluator org.springframework.data.couchbase.core.convert.DefaultSpELExpressionEvaluator , final java.lang.Object java.lang.Object ) { Assert . notNull ( org.springframework.data.couchbase.core.convert.CouchbaseDocument , STRING ) ; Assert . notNull ( org.springframework.data.couchbase.core.convert.DefaultSpELExpressionEvaluator , STRING ) ; this . org.springframework.data.couchbase.core.convert.CouchbaseDocument = org.springframework.data.couchbase.core.convert.CouchbaseDocument ; this . org.springframework.data.couchbase.core.convert.SpELExpressionEvaluator = org.springframework.data.couchbase.core.convert.DefaultSpELExpressionEvaluator ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < R > java.util.Optional<R> < R > java.util.Optional<R> ( final CouchbasePersistentProperty org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty ) { java.lang.Object java.lang.Object = org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty . getSpelExpression ( ) . map ( org.springframework.data.couchbase.core.convert.SpELExpressionEvaluator :: evaluate ) . orElseGet ( ( ) source . get ( property . getFieldName ( ) ) ) ; if ( org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty . isIdProperty ( ) ) { return java.util.Optional . java.util.Optional<R> ( ( R ) org.springframework.data.couchbase.core.convert.CouchbaseDocument . getId ( ) ) ; } if ( java.lang.Object == null ) { return java.util.Optional . java.util.Optional<R> ( ) ; } return java.util.Optional . java.util.Optional ( java.lang.Object ( java.lang.Object , org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty . getTypeInformation ( ) , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> public void ( final SpELExpressionEvaluator org.springframework.data.couchbase.core.convert.SpELExpressionEvaluator , final ConversionService org.springframework.data.couchbase.core.convert.ConversionService , final ParameterValueProvider < CouchbasePersistentProperty > org.springframework.data.couchbase.core.convert.ParameterValueProvider<org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> , final java.lang.Object java.lang.Object ) { super( org.springframework.data.couchbase.core.convert.SpELExpressionEvaluator , org.springframework.data.couchbase.core.convert.ConversionService , org.springframework.data.couchbase.core.convert.ParameterValueProvider<org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> ); this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T > T T ( final java.lang.Object java.lang.Object , final Parameter < T , CouchbasePersistentProperty > org.springframework.data.couchbase.core.convert.Parameter<T,org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> ) { return java.lang.Object ( java.lang.Object , org.springframework.data.couchbase.core.convert.Parameter<T,org.springframework.data.couchbase.core.convert.CouchbasePersistentProperty> . getType ( ) , java.lang.Object ) ; }  <METHOD_END>
