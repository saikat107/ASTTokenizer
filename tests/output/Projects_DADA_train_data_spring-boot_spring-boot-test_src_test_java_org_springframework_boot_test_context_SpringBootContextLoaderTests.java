<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.boot.test.context.SpringBootContextLoaderTests.SimpleConfig .class ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.boot.test.context.SpringBootContextLoaderTests.SimpleConfigNonAlias .class ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.boot.test.context.SpringBootContextLoaderTests.OverrideConfig .class ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.boot.test.context.SpringBootContextLoaderTests.AppendConfig .class ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.boot.test.context.SpringBootContextLoaderTests.SameSeparatorInValue .class ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.boot.test.context.SpringBootContextLoaderTests.AnotherSeparatorInValue .class ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.boot.test.context.SpringBootContextLoaderTests.NewLineInValue .class ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.Class<?> < ? > java.lang.Class<?> )			throws java.lang.Exception { TestContext org.springframework.boot.test.context.TestContext = new org.springframework.boot.test.context.SpringBootContextLoaderTests.ExposedTestContextManager ( java.lang.Class<> ) . org.springframework.boot.test.context.TestContext ( ) ; MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration = ( MergedContextConfiguration ) ReflectionTestUtils . getField ( org.springframework.boot.test.context.TestContext , STRING ) ; return TestPropertySourceUtils . convertInlinedPropertiesToMap ( org.springframework.boot.test.context.MergedContextConfiguration . getPropertySourceProperties ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { assertThat ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) . as ( STRING + java.lang.String + STRING ) . isTrue ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) . isEqualTo ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { super( java.lang.Class<> ); }  <METHOD_END>
<METHOD_START> public final org.springframework.boot.test.context.TestContext org.springframework.boot.test.context.TestContext ( ) { return super. getTestContext ( ) ; }  <METHOD_END>
