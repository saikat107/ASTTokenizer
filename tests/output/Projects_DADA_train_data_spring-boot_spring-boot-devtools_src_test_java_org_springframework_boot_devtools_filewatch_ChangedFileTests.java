<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING ) ; new ChangedFile ( null , this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFile ( ) , Type . ADD ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING ) ; new ChangedFile ( this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFolder ( ) , null , Type . ADD ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING ) ; new ChangedFile ( this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFile ( ) , this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFolder ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFile ( ) ; ChangedFile org.springframework.boot.devtools.filewatch.ChangedFile = new ChangedFile ( this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFolder ( ) , java.io.File , Type . ADD ) ; assertThat ( org.springframework.boot.devtools.filewatch.ChangedFile . getFile ( ) ) . isEqualTo ( java.io.File ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ChangedFile org.springframework.boot.devtools.filewatch.ChangedFile = new ChangedFile ( this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFolder ( ) , this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFile ( ) , Type . DELETE ) ; assertThat ( org.springframework.boot.devtools.filewatch.ChangedFile . getType ( ) ) . isEqualTo ( Type . DELETE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFolder ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; ChangedFile org.springframework.boot.devtools.filewatch.ChangedFile = new ChangedFile ( java.io.File , java.io.File , Type . ADD ) ; assertThat ( org.springframework.boot.devtools.filewatch.ChangedFile . getRelativeName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
