<METHOD_START> @ Before public void void ( ) { if ( org.springframework.data.gemfire.repository.sample.PersonRepository . count ( ) == NUMBER ) { org.springframework.data.gemfire.repository.sample.Person = org.springframework.data.gemfire.repository.sample.PersonRepository . save ( org.springframework.data.gemfire.repository.sample.Person ) ; org.springframework.data.gemfire.repository.sample.Person = org.springframework.data.gemfire.repository.sample.PersonRepository . save ( org.springframework.data.gemfire.repository.sample.Person ) ; org.springframework.data.gemfire.repository.sample.Person = org.springframework.data.gemfire.repository.sample.PersonRepository . save ( org.springframework.data.gemfire.repository.sample.Person ) ; org.springframework.data.gemfire.repository.sample.Person = org.springframework.data.gemfire.repository.sample.PersonRepository . save ( org.springframework.data.gemfire.repository.sample.Person ) ; org.springframework.data.gemfire.repository.sample.Person = org.springframework.data.gemfire.repository.sample.PersonRepository . save ( org.springframework.data.gemfire.repository.sample.Person ) ; org.springframework.data.gemfire.repository.sample.Person = org.springframework.data.gemfire.repository.sample.PersonRepository . save ( org.springframework.data.gemfire.repository.sample.Person ) ; org.springframework.data.gemfire.repository.sample.Person = org.springframework.data.gemfire.repository.sample.PersonRepository . save ( org.springframework.data.gemfire.repository.sample.Person ) ; org.springframework.data.gemfire.repository.sample.Person = org.springframework.data.gemfire.repository.sample.PersonRepository . save ( org.springframework.data.gemfire.repository.sample.Person ) ; } assertThat ( org.springframework.data.gemfire.repository.sample.PersonRepository . count ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> protected < T > java.util.List<T> < T > java.util.List<T> ( java.lang.Iterable<T> < T > java.lang.Iterable<T> ) { java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( ) ; for ( T T : java.lang.Iterable<T> ) { java.util.List<T> . boolean ( T ) ; } return java.util.List<T> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.repository.sample.Person org.springframework.data.gemfire.repository.sample.Person ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return new Person ( java.util.concurrent.atomic.AtomicLong . long ( ) , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected Sort . Sort.Order Sort.Order ( java.lang.String java.lang.String ) { return Sort.Order ( java.lang.String , Sort . Direction . ASC ) ; }  <METHOD_END>
<METHOD_START> protected Sort . Sort.Order Sort.Order ( java.lang.String java.lang.String , Sort . Sort Sort.Direction ) { return new Sort . Sort ( Sort.Direction , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.repository.sample.Sort org.springframework.data.gemfire.repository.sample.Sort ( Sort . Sort ... Sort.Order[] ) { return new Sort ( Sort.Order[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Iterable<org.springframework.data.gemfire.repository.sample.Person> < Person > java.lang.Iterable<org.springframework.data.gemfire.repository.sample.Person> = org.springframework.data.gemfire.repository.sample.PersonRepository . findAll ( org.springframework.data.gemfire.repository.sample.Sort ( Sort.Order ( STRING ) ) ) ; assertThat ( java.lang.Iterable<org.springframework.data.gemfire.repository.sample.Person> ) . isNotNull ( ) ; java.util.List<org.springframework.data.gemfire.repository.sample.Person> < Person > java.util.List<org.springframework.data.gemfire.repository.sample.Person> = java.util.List<org.springframework.data.gemfire.repository.sample.Person> ( java.lang.Iterable<org.springframework.data.gemfire.repository.sample.Person> ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.Person> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.Person> ) . isEqualTo ( java.util.Arrays . java.util.List ( org.springframework.data.gemfire.repository.sample.Person , org.springframework.data.gemfire.repository.sample.Person , org.springframework.data.gemfire.repository.sample.Person , org.springframework.data.gemfire.repository.sample.Person , org.springframework.data.gemfire.repository.sample.Person , org.springframework.data.gemfire.repository.sample.Person , org.springframework.data.gemfire.repository.sample.Person , org.springframework.data.gemfire.repository.sample.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.gemfire.repository.sample.Person> < Person > java.util.List<org.springframework.data.gemfire.repository.sample.Person> = org.springframework.data.gemfire.repository.sample.PersonRepository . findDistinctPeopleByOrderByLastnameDesc ( org.springframework.data.gemfire.repository.sample.Sort ( Sort.Order ( STRING ) ) ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.Person> ) . isNotNull ( ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.Person> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.Person> ) . isEqualTo ( java.util.Arrays . java.util.List ( org.springframework.data.gemfire.repository.sample.Person , org.springframework.data.gemfire.repository.sample.Person , org.springframework.data.gemfire.repository.sample.Person , org.springframework.data.gemfire.repository.sample.Person , org.springframework.data.gemfire.repository.sample.Person , org.springframework.data.gemfire.repository.sample.Person , org.springframework.data.gemfire.repository.sample.Person , org.springframework.data.gemfire.repository.sample.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.gemfire.repository.sample.Person> < Person > java.util.List<org.springframework.data.gemfire.repository.sample.Person> = org.springframework.data.gemfire.repository.sample.PersonRepository . findDistinctByLastname ( STRING , null ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.Person> ) . isNotNull ( ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.Person> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.Person> ) . containsAll ( java.util.Arrays . java.util.List ( org.springframework.data.gemfire.repository.sample.Person , org.springframework.data.gemfire.repository.sample.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.data.gemfire.repository.sample.Person> < Person > java.util.Collection<org.springframework.data.gemfire.repository.sample.Person> = org.springframework.data.gemfire.repository.sample.PersonRepository . findDistinctByFirstnameOrLastname ( STRING , STRING , org.springframework.data.gemfire.repository.sample.Sort ( Sort.Order ( STRING , Sort . Direction . DESC ) , Sort.Order ( STRING , Sort . Direction . ASC ) ) ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.sample.Person> ) . isNotNull ( ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.sample.Person> . size ( ) ) . isEqualTo ( NUMBER ) ; java.util.Iterator<org.springframework.data.gemfire.repository.sample.Person> < Person > java.util.Iterator<org.springframework.data.gemfire.repository.sample.Person> = java.util.Collection<org.springframework.data.gemfire.repository.sample.Person> . iterator ( ) ; assertThat ( java.util.Iterator<org.springframework.data.gemfire.repository.sample.Person> . hasNext ( ) ) . isTrue ( ) ; assertThat ( java.util.Iterator<org.springframework.data.gemfire.repository.sample.Person> . next ( ) ) . isEqualTo ( org.springframework.data.gemfire.repository.sample.Person ) ; assertThat ( java.util.Iterator<org.springframework.data.gemfire.repository.sample.Person> . hasNext ( ) ) . isTrue ( ) ; assertThat ( java.util.Iterator<org.springframework.data.gemfire.repository.sample.Person> . next ( ) ) . isEqualTo ( org.springframework.data.gemfire.repository.sample.Person ) ; assertThat ( java.util.Iterator<org.springframework.data.gemfire.repository.sample.Person> . hasNext ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.data.gemfire.repository.sample.Person> < Person > java.util.Collection<org.springframework.data.gemfire.repository.sample.Person> = org.springframework.data.gemfire.repository.sample.PersonRepository . findByFirstnameIgnoreCaseAndLastnameIgnoreCase ( STRING , STRING ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.sample.Person> ) . isNotNull ( ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.sample.Person> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.sample.Person> . iterator ( ) . next ( ) ) . isEqualTo ( org.springframework.data.gemfire.repository.sample.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.data.gemfire.repository.sample.Person> < Person > java.util.Collection<org.springframework.data.gemfire.repository.sample.Person> = org.springframework.data.gemfire.repository.sample.PersonRepository . findByFirstnameAndLastnameAllIgnoringCase ( STRING , STRING ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.sample.Person> ) . isNotNull ( ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.sample.Person> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.sample.Person> . iterator ( ) . next ( ) ) . isEqualTo ( org.springframework.data.gemfire.repository.sample.Person ) ; }  <METHOD_END>
<METHOD_START> java.util.Properties java.util.Properties ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , java.lang.String ( ) ) ; return java.util.Properties ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return org.springframework.data.gemfire.repository.sample.PersonRepositoryIntegrationTests .class . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.repository.sample.CacheFactoryBean org.springframework.data.gemfire.repository.sample.CacheFactoryBean ( ) { CacheFactoryBean org.springframework.data.gemfire.repository.sample.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.repository.sample.CacheFactoryBean . setClose ( true ) ; org.springframework.data.gemfire.repository.sample.CacheFactoryBean . setProperties ( java.util.Properties ( ) ) ; return org.springframework.data.gemfire.repository.sample.CacheFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) org.springframework.data.gemfire.repository.sample.LocalRegionFactoryBean org.springframework.data.gemfire.repository.sample.LocalRegionFactoryBean ( Cache org.springframework.data.gemfire.repository.sample.Cache , RegionAttributes < java.lang.Long , Person > org.springframework.data.gemfire.repository.sample.RegionAttributes<java.lang.Long,org.springframework.data.gemfire.repository.sample.Person> ) { LocalRegionFactoryBean < java.lang.Long , Person > org.springframework.data.gemfire.repository.sample.LocalRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.repository.sample.Person> = new LocalRegionFactoryBean < java.lang.Long , Person > ( ) ; org.springframework.data.gemfire.repository.sample.LocalRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.repository.sample.Person> . setAttributes ( org.springframework.data.gemfire.repository.sample.RegionAttributes<java.lang.Long,org.springframework.data.gemfire.repository.sample.Person> ) ; org.springframework.data.gemfire.repository.sample.LocalRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.repository.sample.Person> . setCache ( org.springframework.data.gemfire.repository.sample.Cache ) ; org.springframework.data.gemfire.repository.sample.LocalRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.repository.sample.Person> . setClose ( false ) ; org.springframework.data.gemfire.repository.sample.LocalRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.repository.sample.Person> . setPersistent ( false ) ; return org.springframework.data.gemfire.repository.sample.LocalRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.repository.sample.Person> ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.SuppressWarnings ( STRING ) org.springframework.data.gemfire.repository.sample.RegionAttributesFactoryBean org.springframework.data.gemfire.repository.sample.RegionAttributesFactoryBean ( ) { RegionAttributesFactoryBean org.springframework.data.gemfire.repository.sample.RegionAttributesFactoryBean = new RegionAttributesFactoryBean ( ) ; org.springframework.data.gemfire.repository.sample.RegionAttributesFactoryBean . setKeyConstraint ( java.lang.Long .class ) ; org.springframework.data.gemfire.repository.sample.RegionAttributesFactoryBean . setValueConstraint ( Person .class ) ; return org.springframework.data.gemfire.repository.sample.RegionAttributesFactoryBean ; }  <METHOD_END>
