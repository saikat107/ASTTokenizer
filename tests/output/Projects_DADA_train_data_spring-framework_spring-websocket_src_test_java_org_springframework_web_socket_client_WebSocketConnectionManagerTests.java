<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ; org.springframework.web.socket.client.WebSocketConnectionManagerTests.TestLifecycleWebSocketClient org.springframework.web.socket.client.WebSocketConnectionManagerTests.TestLifecycleWebSocketClient = new org.springframework.web.socket.client.WebSocketConnectionManagerTests.TestLifecycleWebSocketClient ( false ) ; WebSocketHandler org.springframework.web.socket.client.WebSocketHandler = new TextWebSocketHandler ( ) ; WebSocketConnectionManager org.springframework.web.socket.client.WebSocketConnectionManager = new WebSocketConnectionManager ( org.springframework.web.socket.client.WebSocketConnectionManagerTests.TestLifecycleWebSocketClient , org.springframework.web.socket.client.WebSocketHandler , STRING , STRING ) ; org.springframework.web.socket.client.WebSocketConnectionManager . setSubProtocols ( java.util.List<java.lang.String> ) ; org.springframework.web.socket.client.WebSocketConnectionManager . openConnection ( ) ; WebSocketHttpHeaders org.springframework.web.socket.client.WebSocketHttpHeaders = new WebSocketHttpHeaders ( ) ; org.springframework.web.socket.client.WebSocketHttpHeaders . setSecWebSocketProtocol ( java.util.List<java.lang.String> ) ; assertEquals ( org.springframework.web.socket.client.WebSocketHttpHeaders , org.springframework.web.socket.client.WebSocketConnectionManagerTests.TestLifecycleWebSocketClient . org.springframework.web.socket.client.HttpHeaders ) ; assertEquals ( new java.net.URI ( STRING ) , org.springframework.web.socket.client.WebSocketConnectionManagerTests.TestLifecycleWebSocketClient . java.net.URI ) ; WebSocketHandlerDecorator org.springframework.web.socket.client.WebSocketHandlerDecorator = ( WebSocketHandlerDecorator ) org.springframework.web.socket.client.WebSocketConnectionManagerTests.TestLifecycleWebSocketClient . org.springframework.web.socket.client.WebSocketHandler ; assertEquals ( LoggingWebSocketHandlerDecorator .class , org.springframework.web.socket.client.WebSocketHandlerDecorator . getClass ( ) ) ; assertSame ( org.springframework.web.socket.client.WebSocketHandler , org.springframework.web.socket.client.WebSocketHandlerDecorator . getDelegate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.socket.client.WebSocketConnectionManagerTests.TestLifecycleWebSocketClient org.springframework.web.socket.client.WebSocketConnectionManagerTests.TestLifecycleWebSocketClient = new org.springframework.web.socket.client.WebSocketConnectionManagerTests.TestLifecycleWebSocketClient ( false ) ; WebSocketHandler org.springframework.web.socket.client.WebSocketHandler = new TextWebSocketHandler ( ) ; WebSocketConnectionManager org.springframework.web.socket.client.WebSocketConnectionManager = new WebSocketConnectionManager ( org.springframework.web.socket.client.WebSocketConnectionManagerTests.TestLifecycleWebSocketClient , org.springframework.web.socket.client.WebSocketHandler , STRING ) ; org.springframework.web.socket.client.WebSocketConnectionManager . startInternal ( ) ; assertTrue ( org.springframework.web.socket.client.WebSocketConnectionManagerTests.TestLifecycleWebSocketClient . boolean ( ) ) ; org.springframework.web.socket.client.WebSocketConnectionManager . stopInternal ( ) ; assertFalse ( org.springframework.web.socket.client.WebSocketConnectionManagerTests.TestLifecycleWebSocketClient . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.client.ListenableFuture<org.springframework.web.socket.client.WebSocketSession> < WebSocketSession > org.springframework.web.socket.client.ListenableFuture<org.springframework.web.socket.client.WebSocketSession> ( WebSocketHandler org.springframework.web.socket.client.WebSocketHandler , java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { java.net.URI java.net.URI = UriComponentsBuilder . fromUriString ( java.lang.String ) . buildAndExpand ( java.lang.Object[] ) . encode ( ) . toUri ( ) ; return org.springframework.web.socket.client.ListenableFuture<org.springframework.web.socket.client.WebSocketSession> ( org.springframework.web.socket.client.WebSocketHandler , null , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.client.ListenableFuture<org.springframework.web.socket.client.WebSocketSession> < WebSocketSession > org.springframework.web.socket.client.ListenableFuture<org.springframework.web.socket.client.WebSocketSession> ( WebSocketHandler org.springframework.web.socket.client.WebSocketHandler , WebSocketHttpHeaders org.springframework.web.socket.client.WebSocketHttpHeaders , java.net.URI java.net.URI ) { this . org.springframework.web.socket.client.WebSocketHandler = org.springframework.web.socket.client.WebSocketHandler ; this . org.springframework.web.socket.client.HttpHeaders = org.springframework.web.socket.client.WebSocketHttpHeaders ; this . java.net.URI = java.net.URI ; return new ListenableFutureTask <> ( ( ) null ) ; }  <METHOD_END>
