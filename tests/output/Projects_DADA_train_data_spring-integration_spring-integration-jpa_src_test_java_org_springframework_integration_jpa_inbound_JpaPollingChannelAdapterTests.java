<METHOD_START> @ Test @ DirtiesContext public void void ( ) java.lang.Exception { org.springframework.integration.jpa.inbound.OnlyOnceTrigger . reset ( ) ; final JpaExecutor org.springframework.integration.jpa.inbound.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.inbound.EntityManager ) ; org.springframework.integration.jpa.inbound.JpaExecutor . setEntityClass ( StudentDomain .class ) ; org.springframework.integration.jpa.inbound.JpaExecutor . afterPropertiesSet ( ) ; final JpaPollingChannelAdapter org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter = new JpaPollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaExecutor ) ; final SourcePollingChannelAdapter org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter = JpaTestUtils . getSourcePollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter , this . org.springframework.integration.jpa.inbound.MessageChannel , this . org.springframework.integration.jpa.inbound.PollerMetadata , this . org.springframework.integration.jpa.inbound.GenericApplicationContext , this . java.lang.Class<? extends org.springframework.integration.jpa.inbound.JpaPollingChannelAdapterTests> ( ) . java.lang.ClassLoader ( ) ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . start ( ) ; final java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> = new java.util.ArrayList<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > ( ) ; final Consumer org.springframework.integration.jpa.inbound.Consumer = new Consumer ( ) ; java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . add ( org.springframework.integration.jpa.inbound.Consumer . poll ( NUMBER ) ) ; Message < java.util.Collection<?> < ? > > org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> = java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . get ( NUMBER ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . stop ( ) ; assertNotNull ( org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> ) ; assertNotNull ( org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> . getPayload ( ) ) ; java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> . getPayload ( ) ; assertTrue ( java.util.Collection<> . int ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jpa.inbound.OnlyOnceTrigger . reset ( ) ; final JpaExecutor org.springframework.integration.jpa.inbound.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.inbound.EntityManager ) ; org.springframework.integration.jpa.inbound.JpaExecutor . setJpaQuery ( STRING ) ; org.springframework.integration.jpa.inbound.JpaExecutor . afterPropertiesSet ( ) ; final JpaPollingChannelAdapter org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter = new JpaPollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaExecutor ) ; final SourcePollingChannelAdapter org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter = JpaTestUtils . getSourcePollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter , this . org.springframework.integration.jpa.inbound.MessageChannel , this . org.springframework.integration.jpa.inbound.PollerMetadata , this . org.springframework.integration.jpa.inbound.GenericApplicationContext , this . java.lang.Class<? extends org.springframework.integration.jpa.inbound.JpaPollingChannelAdapterTests> ( ) . java.lang.ClassLoader ( ) ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . start ( ) ; final java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> = new java.util.ArrayList<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > ( ) ; final Consumer org.springframework.integration.jpa.inbound.Consumer = new Consumer ( ) ; java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . add ( org.springframework.integration.jpa.inbound.Consumer . poll ( NUMBER ) ) ; Message < java.util.Collection<?> < ? > > org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> = java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . get ( NUMBER ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . stop ( ) ; assertNotNull ( org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> ) ; assertNotNull ( org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> . getPayload ( ) ) ; java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> . getPayload ( ) ; assertTrue ( java.util.Collection<> . int ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jpa.inbound.OnlyOnceTrigger . reset ( ) ; final JpaExecutor org.springframework.integration.jpa.inbound.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.inbound.EntityManager ) ; org.springframework.integration.jpa.inbound.JpaExecutor . setJpaQuery ( STRING ) ; org.springframework.integration.jpa.inbound.JpaExecutor . setMaxResultsExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.jpa.inbound.JpaExecutor . afterPropertiesSet ( ) ; final JpaPollingChannelAdapter org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter = new JpaPollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaExecutor ) ; final SourcePollingChannelAdapter org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter = JpaTestUtils . getSourcePollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter , this . org.springframework.integration.jpa.inbound.MessageChannel , this . org.springframework.integration.jpa.inbound.PollerMetadata , this . org.springframework.integration.jpa.inbound.GenericApplicationContext , this . java.lang.Class<? extends org.springframework.integration.jpa.inbound.JpaPollingChannelAdapterTests> ( ) . java.lang.ClassLoader ( ) ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . start ( ) ; final java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> = new java.util.ArrayList<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > ( ) ; final Consumer org.springframework.integration.jpa.inbound.Consumer = new Consumer ( ) ; java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . add ( org.springframework.integration.jpa.inbound.Consumer . poll ( NUMBER ) ) ; Message < java.util.Collection<?> < ? > > org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> = java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . get ( NUMBER ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . stop ( ) ; assertNotNull ( org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> ) ; assertNotNull ( org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> . getPayload ( ) ) ; java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> . getPayload ( ) ; assertTrue ( java.util.Collection<> . int ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jpa.inbound.OnlyOnceTrigger . reset ( ) ; final JpaExecutor org.springframework.integration.jpa.inbound.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.inbound.EntityManager ) ; org.springframework.integration.jpa.inbound.JpaExecutor . setJpaQuery ( STRING ) ; org.springframework.integration.jpa.inbound.JpaExecutor . afterPropertiesSet ( ) ; final JpaPollingChannelAdapter org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter = new JpaPollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaExecutor ) ; final SourcePollingChannelAdapter org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter = JpaTestUtils . getSourcePollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter , this . org.springframework.integration.jpa.inbound.MessageChannel , this . org.springframework.integration.jpa.inbound.PollerMetadata , this . org.springframework.integration.jpa.inbound.GenericApplicationContext , this . java.lang.Class<? extends org.springframework.integration.jpa.inbound.JpaPollingChannelAdapterTests> ( ) . java.lang.ClassLoader ( ) ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . start ( ) ; final java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> = new java.util.ArrayList<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > ( ) ; final Consumer org.springframework.integration.jpa.inbound.Consumer = new Consumer ( ) ; java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . add ( org.springframework.integration.jpa.inbound.Consumer . poll ( NUMBER ) ) ; Message < java.util.Collection<?> < ? > > org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> = java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . get ( NUMBER ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . stop ( ) ; assertNotNull ( org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> ) ; assertNotNull ( org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> . getPayload ( ) ) ; java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> . getPayload ( ) ; assertTrue ( java.util.Collection<> . int ( ) == NUMBER ) ; StudentDomain org.springframework.integration.jpa.inbound.StudentDomain = ( StudentDomain ) java.util.Collection<> . java.util.Iterator<> ( ) . next ( ) ; assertEquals ( STRING , org.springframework.integration.jpa.inbound.StudentDomain . getLastName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext public void void ( ) java.lang.Exception { org.springframework.integration.jpa.inbound.OnlyOnceTrigger . reset ( ) ; final JpaExecutor org.springframework.integration.jpa.inbound.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.inbound.EntityManager ) ; org.springframework.integration.jpa.inbound.JpaExecutor . setJpaQuery ( STRING ) ; org.springframework.integration.jpa.inbound.JpaExecutor . setDeleteAfterPoll ( true ) ; org.springframework.integration.jpa.inbound.JpaExecutor . setDeleteInBatch ( true ) ; org.springframework.integration.jpa.inbound.JpaExecutor . setFlush ( true ) ; org.springframework.integration.jpa.inbound.JpaExecutor . afterPropertiesSet ( ) ; final JpaPollingChannelAdapter org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter = new JpaPollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaExecutor ) ; final SourcePollingChannelAdapter org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter = JpaTestUtils . getSourcePollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter , this . org.springframework.integration.jpa.inbound.MessageChannel , this . org.springframework.integration.jpa.inbound.PollerMetadata , this . org.springframework.integration.jpa.inbound.GenericApplicationContext , this . java.lang.Class<? extends org.springframework.integration.jpa.inbound.JpaPollingChannelAdapterTests> ( ) . java.lang.ClassLoader ( ) ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . start ( ) ; final java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> = new java.util.ArrayList<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > ( ) ; final Consumer org.springframework.integration.jpa.inbound.Consumer = new Consumer ( ) ; java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . add ( org.springframework.integration.jpa.inbound.Consumer . poll ( NUMBER ) ) ; Message < java.util.Collection<?> < ? > > org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> = java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . get ( NUMBER ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . stop ( ) ; assertNotNull ( STRING , org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> ) ; assertNotNull ( org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> . getPayload ( ) ) ; java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> . getPayload ( ) ; assertTrue ( java.util.Collection<> . int ( ) == NUMBER ) ; java.lang.Long java.lang.Long = java.lang.Long ( java.util.Collection<> ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , java.lang.Long ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Long java.lang.Long ( java.util.Collection<?> < ? > java.util.Collection<?> ) throws java.lang.InterruptedException { java.lang.Long java.lang.Long = ( long ) java.util.Collection<> . int ( ) ; int int = NUMBER ; while ( java.lang.Long > NUMBER ) { java.lang.Long = org.springframework.integration.jpa.inbound.EntityManager . createQuery ( STRING , java.lang.Long .class ) . getSingleResult ( ) ; if ( java.lang.Long > NUMBER ) { java.lang.Thread . void ( NUMBER ) ; if ( int ++ > NUMBER ) { fail ( STRING ) ; } } } return java.lang.Long ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext public void void ( ) java.lang.Exception { org.springframework.integration.jpa.inbound.OnlyOnceTrigger . reset ( ) ; final JpaExecutor org.springframework.integration.jpa.inbound.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.inbound.EntityManager ) ; org.springframework.integration.jpa.inbound.JpaExecutor . setJpaQuery ( STRING ) ; org.springframework.integration.jpa.inbound.JpaExecutor . setDeleteAfterPoll ( true ) ; org.springframework.integration.jpa.inbound.JpaExecutor . afterPropertiesSet ( ) ; final JpaPollingChannelAdapter org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter = new JpaPollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaExecutor ) ; final SourcePollingChannelAdapter org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter = JpaTestUtils . getSourcePollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter , this . org.springframework.integration.jpa.inbound.MessageChannel , this . org.springframework.integration.jpa.inbound.PollerMetadata , this . org.springframework.integration.jpa.inbound.GenericApplicationContext , this . java.lang.Class<? extends org.springframework.integration.jpa.inbound.JpaPollingChannelAdapterTests> ( ) . java.lang.ClassLoader ( ) ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . start ( ) ; java.lang.Thread . void ( NUMBER ) ; final Consumer org.springframework.integration.jpa.inbound.Consumer = new Consumer ( ) ; final java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> = new java.util.ArrayList<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > ( ) ; java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . add ( org.springframework.integration.jpa.inbound.Consumer . poll ( NUMBER ) ) ; final Message < java.util.Collection<?> < ? > > org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> = java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . get ( NUMBER ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . stop ( ) ; assertNull ( org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext public void void ( ) java.lang.Exception { org.springframework.integration.jpa.inbound.OnlyOnceTrigger . reset ( ) ; final JpaExecutor org.springframework.integration.jpa.inbound.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.inbound.JpaOperations ) ; org.springframework.integration.jpa.inbound.JpaExecutor . setJpaQuery ( STRING ) ; org.springframework.integration.jpa.inbound.JpaExecutor . setDeleteAfterPoll ( true ) ; org.springframework.integration.jpa.inbound.JpaExecutor . setDeleteInBatch ( false ) ; org.springframework.integration.jpa.inbound.JpaExecutor . afterPropertiesSet ( ) ; final JpaPollingChannelAdapter org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter = new JpaPollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaExecutor ) ; final SourcePollingChannelAdapter org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter = JpaTestUtils . getSourcePollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter , this . org.springframework.integration.jpa.inbound.MessageChannel , this . org.springframework.integration.jpa.inbound.PollerMetadata , this . org.springframework.integration.jpa.inbound.GenericApplicationContext , this . java.lang.Class<? extends org.springframework.integration.jpa.inbound.JpaPollingChannelAdapterTests> ( ) . java.lang.ClassLoader ( ) ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . start ( ) ; java.lang.Thread . void ( NUMBER ) ; final Consumer org.springframework.integration.jpa.inbound.Consumer = new Consumer ( ) ; final java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> = new java.util.ArrayList<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > ( ) ; java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . add ( org.springframework.integration.jpa.inbound.Consumer . poll ( NUMBER ) ) ; final Message < java.util.Collection<?> < ? > > org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> = java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . get ( NUMBER ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . stop ( ) ; assertNotNull ( STRING , org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> ) ; assertNotNull ( org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> . getPayload ( ) ) ; final java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> . getPayload ( ) ; assertTrue ( java.util.Collection<> . int ( ) == NUMBER ) ; java.lang.Long java.lang.Long = java.lang.Long ( java.util.Collection<> ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , java.lang.Long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jpa.inbound.OnlyOnceTrigger . reset ( ) ; final JpaExecutor org.springframework.integration.jpa.inbound.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.inbound.EntityManager ) ; org.springframework.integration.jpa.inbound.JpaExecutor . setNativeQuery ( STRING ) ; org.springframework.integration.jpa.inbound.JpaExecutor . afterPropertiesSet ( ) ; final JpaPollingChannelAdapter org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter = new JpaPollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaExecutor ) ; final SourcePollingChannelAdapter org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter = JpaTestUtils . getSourcePollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter , this . org.springframework.integration.jpa.inbound.MessageChannel , this . org.springframework.integration.jpa.inbound.PollerMetadata , this . org.springframework.integration.jpa.inbound.GenericApplicationContext , this . java.lang.Class<? extends org.springframework.integration.jpa.inbound.JpaPollingChannelAdapterTests> ( ) . java.lang.ClassLoader ( ) ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . start ( ) ; final java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> = new java.util.ArrayList<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > ( ) ; final Consumer org.springframework.integration.jpa.inbound.Consumer = new Consumer ( ) ; java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . add ( org.springframework.integration.jpa.inbound.Consumer . poll ( NUMBER ) ) ; Message < java.util.Collection<?> < ? > > org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> = java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . get ( NUMBER ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . stop ( ) ; assertNotNull ( org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> ) ; assertNotNull ( org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> . getPayload ( ) ) ; java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> . getPayload ( ) ; assertTrue ( java.util.Collection<> . int ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jpa.inbound.OnlyOnceTrigger . reset ( ) ; final JpaExecutor org.springframework.integration.jpa.inbound.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.inbound.EntityManager ) ; org.springframework.integration.jpa.inbound.JpaExecutor . setNamedQuery ( STRING ) ; org.springframework.integration.jpa.inbound.JpaExecutor . afterPropertiesSet ( ) ; final JpaPollingChannelAdapter org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter = new JpaPollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaExecutor ) ; final SourcePollingChannelAdapter org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter = JpaTestUtils . getSourcePollingChannelAdapter ( org.springframework.integration.jpa.inbound.JpaPollingChannelAdapter , this . org.springframework.integration.jpa.inbound.MessageChannel , this . org.springframework.integration.jpa.inbound.PollerMetadata , this . org.springframework.integration.jpa.inbound.GenericApplicationContext , this . java.lang.Class<? extends org.springframework.integration.jpa.inbound.JpaPollingChannelAdapterTests> ( ) . java.lang.ClassLoader ( ) ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . start ( ) ; final java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> = new java.util.ArrayList<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> < Message < java.util.Collection<?> < ? > > > ( ) ; final Consumer org.springframework.integration.jpa.inbound.Consumer = new Consumer ( ) ; java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . add ( org.springframework.integration.jpa.inbound.Consumer . poll ( NUMBER ) ) ; Message < java.util.Collection<?> < ? > > org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> = java.util.List<org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>>> . get ( NUMBER ) ; org.springframework.integration.jpa.inbound.SourcePollingChannelAdapter . stop ( ) ; assertNotNull ( org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> ) ; assertNotNull ( org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> . getPayload ( ) ) ; java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.integration.jpa.inbound.Message<java.util.Collection<?>> . getPayload ( ) ; assertTrue ( java.util.Collection<> . int ( ) == NUMBER ) ; }  <METHOD_END>
