<METHOD_START> public void ( ) { this( new HttpHeaders ( ) , false ); }  <METHOD_END>
<METHOD_START> public void ( HttpHeaders org.springframework.web.socket.HttpHeaders ) { this( org.springframework.web.socket.HttpHeaders , false ); }  <METHOD_END>
<METHOD_START> private void ( HttpHeaders org.springframework.web.socket.HttpHeaders , boolean boolean ) { this . org.springframework.web.socket.HttpHeaders = boolean ? HttpHeaders . readOnlyHttpHeaders ( org.springframework.web.socket.HttpHeaders ) : org.springframework.web.socket.HttpHeaders ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.socket.WebSocketHttpHeaders org.springframework.web.socket.WebSocketHttpHeaders ( org.springframework.web.socket.WebSocketHttpHeaders org.springframework.web.socket.WebSocketHttpHeaders ) { return new org.springframework.web.socket.WebSocketHttpHeaders ( org.springframework.web.socket.WebSocketHttpHeaders , true ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.socket.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.WebSocketExtension> ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.lang.String ) ; if ( CollectionUtils . isEmpty ( java.util.List<java.lang.String> ) ) { return java.util.Collections . java.util.List<org.springframework.web.socket.WebSocketExtension> ( ) ; } else { java.util.List<org.springframework.web.socket.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.WebSocketExtension> = new java.util.ArrayList<org.springframework.web.socket.WebSocketExtension> <> ( java.util.List<java.lang.String> . int ( ) ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.util.List<org.springframework.web.socket.WebSocketExtension> . addAll ( WebSocketExtension . parseExtensions ( java.lang.String ) ) ; } return java.util.List<org.springframework.web.socket.WebSocketExtension> ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.socket.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.WebSocketExtension> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList <> ( java.util.List<org.springframework.web.socket.WebSocketExtension> . size ( ) ) ; for ( WebSocketExtension org.springframework.web.socket.WebSocketExtension : java.util.List<org.springframework.web.socket.WebSocketExtension> ) { java.util.List<java.lang.String> . boolean ( org.springframework.web.socket.WebSocketExtension . toString ( ) ) ; } void ( java.lang.String , toCommaDelimitedString ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { if ( java.lang.String != null ) { void ( java.lang.String , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { void ( java.lang.String , toCommaDelimitedString ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.lang.String ) ; if ( CollectionUtils . isEmpty ( java.util.List<java.lang.String> ) ) { return java.util.Collections . java.util.List<java.lang.String> ( ) ; } else if ( java.util.List<java.lang.String> . int ( ) == NUMBER ) { return getValuesAsList ( java.lang.String ) ; } else { return java.util.List<java.lang.String> ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return this . org.springframework.web.socket.HttpHeaders . getFirst ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . org.springframework.web.socket.HttpHeaders . add ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . org.springframework.web.socket.HttpHeaders . set ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . org.springframework.web.socket.HttpHeaders . setAll ( java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return this . org.springframework.web.socket.HttpHeaders . toSingleValueMap ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.web.socket.HttpHeaders . size ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.web.socket.HttpHeaders . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return this . org.springframework.web.socket.HttpHeaders . containsKey ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return this . org.springframework.web.socket.HttpHeaders . containsValue ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.Object java.lang.Object ) { return this . org.springframework.web.socket.HttpHeaders . get ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return this . org.springframework.web.socket.HttpHeaders . put ( java.lang.String , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.Object java.lang.Object ) { return this . org.springframework.web.socket.HttpHeaders . remove ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Map<? extends java.lang.String,? extends java.util.List<java.lang.String>> < ? extends java.lang.String , ? extends java.util.List<java.lang.String> < java.lang.String > > java.util.Map<? extends java.lang.String,? extends java.util.List<java.lang.String>> ) { this . org.springframework.web.socket.HttpHeaders . putAll ( java.util.Map<,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.web.socket.HttpHeaders . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return this . org.springframework.web.socket.HttpHeaders . keySet ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > java.util.Collection<java.util.List<java.lang.String>> ( ) { return this . org.springframework.web.socket.HttpHeaders . values ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.web.socket.Entry<java.lang.String,java.util.List<java.lang.String>>> < Entry < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > > java.util.Set<org.springframework.web.socket.Entry<java.lang.String,java.util.List<java.lang.String>>> ( ) { return this . org.springframework.web.socket.HttpHeaders . entrySet ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.web.socket.WebSocketHttpHeaders ) ) { return false ; } org.springframework.web.socket.WebSocketHttpHeaders org.springframework.web.socket.WebSocketHttpHeaders = ( org.springframework.web.socket.WebSocketHttpHeaders ) java.lang.Object ; return this . org.springframework.web.socket.HttpHeaders . equals ( org.springframework.web.socket.WebSocketHttpHeaders . org.springframework.web.socket.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.web.socket.HttpHeaders . hashCode ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.web.socket.HttpHeaders . toString ( ) ; }  <METHOD_END>
