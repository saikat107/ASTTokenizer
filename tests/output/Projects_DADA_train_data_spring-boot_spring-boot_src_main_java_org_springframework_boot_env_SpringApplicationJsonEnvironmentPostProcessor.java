<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableEnvironment org.springframework.boot.env.ConfigurableEnvironment , SpringApplication org.springframework.boot.env.SpringApplication ) { java.lang.String java.lang.String = org.springframework.boot.env.ConfigurableEnvironment . resolvePlaceholders ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { void ( org.springframework.boot.env.ConfigurableEnvironment , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableEnvironment org.springframework.boot.env.ConfigurableEnvironment , java.lang.String java.lang.String ) { try { JsonParser org.springframework.boot.env.JsonParser = JsonParserFactory . getJsonParser ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.env.JsonParser . parseMap ( java.lang.String ) ; if ( ! java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) ) { void ( org.springframework.boot.env.ConfigurableEnvironment , new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) ) ) ; } } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.env.Log . warn ( STRING + java.lang.String , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; void ( null , java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.Object> ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.lang.String = ( java.lang.String == null ? STRING : java.lang.String + STRING ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { void ( java.lang.String + java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map<java.lang.String,java.lang.Object> , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.util.Map ) { void ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> , ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.util.Collection ) { int int = NUMBER ; for ( java.lang.Object java.lang.Object : ( java.util.Collection<java.lang.Object> < java.lang.Object > ) java.lang.Object ) { void ( java.lang.String + STRING + int + STRING , java.util.Map<java.lang.String,java.lang.Object> , java.lang.Object ) ; int ++ ; } } else { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableEnvironment org.springframework.boot.env.ConfigurableEnvironment , PropertySource < ? > org.springframework.boot.env.PropertySource<?> ) { MutablePropertySources org.springframework.boot.env.MutablePropertySources = org.springframework.boot.env.ConfigurableEnvironment . getPropertySources ( ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.env.MutablePropertySources ) ; if ( org.springframework.boot.env.MutablePropertySources . contains ( java.lang.String ) ) { org.springframework.boot.env.MutablePropertySources . addBefore ( java.lang.String , org.springframework.boot.env.PropertySource<> ) ; } else { org.springframework.boot.env.MutablePropertySources . addFirst ( org.springframework.boot.env.PropertySource<> ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( MutablePropertySources org.springframework.boot.env.MutablePropertySources ) { if ( ClassUtils . isPresent ( java.lang.String , null ) && org.springframework.boot.env.MutablePropertySources . contains ( StandardServletEnvironment . JNDI_PROPERTY_SOURCE_NAME ) ) { return StandardServletEnvironment . JNDI_PROPERTY_SOURCE_NAME ; } return StandardEnvironment . SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME ; }  <METHOD_END>
