<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new org.springframework.data.jpa.repository.query.JpaQueryExecutionUnitTests.StubQueryExecution ( ) . execute ( null , new java.lang.Object [] {} ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new org.springframework.data.jpa.repository.query.JpaQueryExecutionUnitTests.StubQueryExecution ( ) . execute ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new JpaQueryExecution ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object [] java.lang.Object[] ) { return null ; } } . execute ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery , new java.lang.Object [] {} ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object [] java.lang.Object[] ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { when ( org.springframework.data.jpa.repository.query.Query . executeUpdate ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.jpa.repository.query.JpaQueryMethod . getReturnType ( ) ) . thenReturn ( ( java.lang.Class ) void .class ) ; when ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery . createQuery ( Mockito . any ( java.lang.Object [] .class ) ) ) . thenReturn ( org.springframework.data.jpa.repository.query.Query ) ; when ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery . getQueryMethod ( ) ) . thenReturn ( org.springframework.data.jpa.repository.query.JpaQueryMethod ) ; ModifyingExecution org.springframework.data.jpa.repository.query.ModifyingExecution = new ModifyingExecution ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ) ; org.springframework.data.jpa.repository.query.ModifyingExecution . execute ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery , new java.lang.Object [] {} ) ; verify ( org.springframework.data.jpa.repository.query.EntityManager , times ( NUMBER ) ) . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { when ( org.springframework.data.jpa.repository.query.JpaQueryMethod . getReturnType ( ) ) . thenReturn ( ( java.lang.Class ) void .class , ( java.lang.Class ) int .class , ( java.lang.Class ) java.lang.Integer .class ) ; new ModifyingExecution ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ) ; new ModifyingExecution ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ) ; new ModifyingExecution ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { when ( org.springframework.data.jpa.repository.query.JpaQueryMethod . getReturnType ( ) ) . thenReturn ( ( java.lang.Class ) java.lang.Long .class ) ; new ModifyingExecution ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Parameters < ? , ? > org.springframework.data.jpa.repository.query.Parameters<?,?> = new DefaultParameters ( java.lang.Class<? extends org.springframework.data.jpa.repository.query.JpaQueryExecutionUnitTests> ( ) . java.lang.reflect.Method ( STRING , Pageable .class ) ) ; when ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery . createCountQuery ( Mockito . any ( java.lang.Object [] .class ) ) ) . thenReturn ( org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> ) ; when ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery . createQuery ( Mockito . any ( java.lang.Object [] .class ) ) ) . thenReturn ( org.springframework.data.jpa.repository.query.Query ) ; when ( org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> . getResultList ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.Long> ( NUMBER ) ) ; PagedExecution org.springframework.data.jpa.repository.query.PagedExecution = new PagedExecution ( org.springframework.data.jpa.repository.query.Parameters<,> ) ; org.springframework.data.jpa.repository.query.PagedExecution . doExecute ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery , new java.lang.Object [] { PageRequest . of ( NUMBER , NUMBER ) } ) ; verify ( org.springframework.data.jpa.repository.query.Query ) . getResultList ( ) ; verify ( org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> ) . getResultList ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Parameters < ? , ? > org.springframework.data.jpa.repository.query.Parameters<?,?> = new DefaultParameters ( java.lang.Class<? extends org.springframework.data.jpa.repository.query.JpaQueryExecutionUnitTests> ( ) . java.lang.reflect.Method ( STRING , Pageable .class ) ) ; when ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery . createQuery ( Mockito . any ( java.lang.Object [] .class ) ) ) . thenReturn ( org.springframework.data.jpa.repository.query.Query ) ; when ( org.springframework.data.jpa.repository.query.Query . getResultList ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.Long> ( NUMBER ) ) ; PagedExecution org.springframework.data.jpa.repository.query.PagedExecution = new PagedExecution ( org.springframework.data.jpa.repository.query.Parameters<,> ) ; org.springframework.data.jpa.repository.query.PagedExecution . doExecute ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery , new java.lang.Object [] { PageRequest . of ( NUMBER , NUMBER ) } ) ; verify ( org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> , times ( NUMBER ) ) . getResultList ( ) ; verify ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery , times ( NUMBER ) ) . createCountQuery ( ( java.lang.Object [] ) any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Parameters < ? , ? > org.springframework.data.jpa.repository.query.Parameters<?,?> = new DefaultParameters ( java.lang.Class<? extends org.springframework.data.jpa.repository.query.JpaQueryExecutionUnitTests> ( ) . java.lang.reflect.Method ( STRING , Pageable .class ) ) ; when ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery . createQuery ( Mockito . any ( java.lang.Object [] .class ) ) ) . thenReturn ( org.springframework.data.jpa.repository.query.Query ) ; when ( org.springframework.data.jpa.repository.query.Query . getResultList ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.Object> ( new java.lang.Object ( ) , new java.lang.Object ( ) , new java.lang.Object ( ) , new java.lang.Object ( ) ) ) ; PagedExecution org.springframework.data.jpa.repository.query.PagedExecution = new PagedExecution ( org.springframework.data.jpa.repository.query.Parameters<,> ) ; org.springframework.data.jpa.repository.query.PagedExecution . doExecute ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery , new java.lang.Object [] { PageRequest . of ( NUMBER , NUMBER ) } ) ; verify ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery , times ( NUMBER ) ) . createCountQuery ( ( java.lang.Object [] ) any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Parameters < ? , ? > org.springframework.data.jpa.repository.query.Parameters<?,?> = new DefaultParameters ( java.lang.Class<? extends org.springframework.data.jpa.repository.query.JpaQueryExecutionUnitTests> ( ) . java.lang.reflect.Method ( STRING , Pageable .class ) ) ; when ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery . createQuery ( Mockito . any ( java.lang.Object [] .class ) ) ) . thenReturn ( org.springframework.data.jpa.repository.query.Query ) ; when ( org.springframework.data.jpa.repository.query.Query . getResultList ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.Object> ( new java.lang.Object ( ) , new java.lang.Object ( ) , new java.lang.Object ( ) , new java.lang.Object ( ) ) ) ; PagedExecution org.springframework.data.jpa.repository.query.PagedExecution = new PagedExecution ( org.springframework.data.jpa.repository.query.Parameters<,> ) ; org.springframework.data.jpa.repository.query.PagedExecution . doExecute ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery , new java.lang.Object [] { PageRequest . of ( NUMBER , NUMBER ) } ) ; verify ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery , times ( NUMBER ) ) . createCountQuery ( ( java.lang.Object [] ) any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Parameters < ? , ? > org.springframework.data.jpa.repository.query.Parameters<?,?> = new DefaultParameters ( java.lang.Class<? extends org.springframework.data.jpa.repository.query.JpaQueryExecutionUnitTests> ( ) . java.lang.reflect.Method ( STRING , Pageable .class ) ) ; when ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery . createQuery ( Mockito . any ( java.lang.Object [] .class ) ) ) . thenReturn ( org.springframework.data.jpa.repository.query.Query ) ; when ( org.springframework.data.jpa.repository.query.Query . getResultList ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; when ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery . createCountQuery ( Mockito . any ( java.lang.Object [] .class ) ) ) . thenReturn ( org.springframework.data.jpa.repository.query.Query ) ; when ( org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> . getResultList ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.Long> ( NUMBER ) ) ; PagedExecution org.springframework.data.jpa.repository.query.PagedExecution = new PagedExecution ( org.springframework.data.jpa.repository.query.Parameters<,> ) ; org.springframework.data.jpa.repository.query.PagedExecution . doExecute ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery , new java.lang.Object [] { PageRequest . of ( NUMBER , NUMBER ) } ) ; verify ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery ) . createCountQuery ( ( java.lang.Object [] ) any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Parameters < ? , ? > org.springframework.data.jpa.repository.query.Parameters<?,?> = new DefaultParameters ( java.lang.Class<? extends org.springframework.data.jpa.repository.query.JpaQueryExecutionUnitTests> ( ) . java.lang.reflect.Method ( STRING , Pageable .class ) ) ; when ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery . createQuery ( Mockito . any ( java.lang.Object [] .class ) ) ) . thenReturn ( org.springframework.data.jpa.repository.query.Query ) ; when ( org.springframework.data.jpa.repository.query.Query . getResultList ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.Object> ( new java.lang.Object ( ) , new java.lang.Object ( ) , new java.lang.Object ( ) , new java.lang.Object ( ) ) ) ; when ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery . createCountQuery ( Mockito . any ( java.lang.Object [] .class ) ) ) . thenReturn ( org.springframework.data.jpa.repository.query.Query ) ; when ( org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> . getResultList ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.Long> ( NUMBER ) ) ; PagedExecution org.springframework.data.jpa.repository.query.PagedExecution = new PagedExecution ( org.springframework.data.jpa.repository.query.Parameters<,> ) ; org.springframework.data.jpa.repository.query.PagedExecution . doExecute ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery , new java.lang.Object [] { PageRequest . of ( NUMBER , NUMBER ) } ) ; verify ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery ) . createCountQuery ( ( java.lang.Object [] ) any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { doReturn ( org.springframework.data.jpa.repository.query.JpaQueryMethod ) . when ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery ) . getQueryMethod ( ) ; doReturn ( java.util.Optional .class ) . when ( org.springframework.data.jpa.repository.query.JpaQueryMethod ) . getReturnType ( ) ; org.springframework.data.jpa.repository.query.JpaQueryExecutionUnitTests.StubQueryExecution org.springframework.data.jpa.repository.query.JpaQueryExecutionUnitTests.StubQueryExecution = new org.springframework.data.jpa.repository.query.JpaQueryExecutionUnitTests.StubQueryExecution ( ) { protected java.lang.Object java.lang.Object ( AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object [] java.lang.Object[] ) { return STRING ; } } ; java.lang.Object java.lang.Object = org.springframework.data.jpa.repository.query.JpaQueryExecutionUnitTests.StubQueryExecution . execute ( org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery , new java.lang.Object [ NUMBER ] ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.lang.String .class ) ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object [] java.lang.Object[] ) { return STRING ; }  <METHOD_END>
<METHOD_START> public static void void ( Pageable org.springframework.data.jpa.repository.query.Pageable ) {}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object [] java.lang.Object[] ) { return null ; }  <METHOD_END>
