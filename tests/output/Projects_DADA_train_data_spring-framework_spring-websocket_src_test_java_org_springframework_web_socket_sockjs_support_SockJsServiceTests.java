<METHOD_START> @ java.lang.Override @ Before public void void ( ) { super. setUp ( ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService = new org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService ( new ThreadPoolTaskScheduler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setWebSocketEnabled ( false ) ; void ( STRING , STRING , HttpStatus . NOT_FOUND ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setWebSocketEnabled ( true ) ; void ( STRING , STRING , HttpStatus . OK ) ; void ( STRING , STRING , HttpStatus . NOT_FOUND ) ; void ( STRING , STRING , HttpStatus . NOT_FOUND ) ; void ( STRING , STRING , HttpStatus . NOT_FOUND ) ; void ( STRING , STRING , HttpStatus . NOT_FOUND ) ; void ( STRING , STRING , HttpStatus . NOT_FOUND ) ; void ( STRING , STRING , HttpStatus . NOT_FOUND ) ; void ( STRING , STRING , HttpStatus . NOT_FOUND ) ; void ( STRING , STRING , HttpStatus . NOT_FOUND ) ; void ( STRING , STRING , HttpStatus . NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING , HttpStatus . OK ) ; assertEquals ( STRING , this . servletResponse . getContentType ( ) ) ; assertEquals ( STRING , this . servletResponse . getHeader ( HttpHeaders . CACHE_CONTROL ) ) ; assertNull ( this . servletResponse . getHeader ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertNull ( this . servletResponse . getHeader ( HttpHeaders . ACCESS_CONTROL_ALLOW_CREDENTIALS ) ) ; assertNull ( this . servletResponse . getHeader ( HttpHeaders . VARY ) ) ; java.lang.String java.lang.String = this . servletResponse . getContentAsString ( ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ':' ) ) ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( java.lang.String . int ( ',' ) ) ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setSessionCookieNeeded ( false ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setWebSocketEnabled ( false ) ; void ( STRING , STRING , HttpStatus . OK ) ; java.lang.String = this . servletResponse . getContentAsString ( ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( java.lang.String . int ( ',' ) ) ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; void ( STRING , STRING , HttpStatus . OK ) ; assertNull ( this . servletResponse . getHeader ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertNull ( this . servletResponse . getHeader ( HttpHeaders . ACCESS_CONTROL_ALLOW_CREDENTIALS ) ) ; assertNull ( this . servletResponse . getHeader ( HttpHeaders . VARY ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . servletRequest . setServerName ( STRING ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; void ( STRING , STRING , HttpStatus . OK ) ; assertEquals ( STRING , this . servletResponse . getContentType ( ) ) ; assertEquals ( STRING , this . servletResponse . getHeader ( HttpHeaders . CACHE_CONTROL ) ) ; java.lang.String java.lang.String = this . servletResponse . getContentAsString ( ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ':' ) ) ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( java.lang.String . int ( ',' ) ) ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; void ( STRING , STRING , HttpStatus . OK ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; void ( STRING , STRING , HttpStatus . OK ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; void ( STRING , STRING , HttpStatus . OK ) ; this . servletRequest . setServerName ( STRING ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; void ( STRING , STRING , HttpStatus . FORBIDDEN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . servletResponse . setHeader ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN , STRING ) ; void ( STRING , STRING , HttpStatus . OK ) ; assertEquals ( STRING , this . servletResponse . getHeader ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpServletResponse org.springframework.web.socket.sockjs.support.HttpServletResponse = mock ( HttpServletResponse .class ) ; ServletOutputStream org.springframework.web.socket.sockjs.support.ServletOutputStream = mock ( ServletOutputStream .class ) ; given ( org.springframework.web.socket.sockjs.support.HttpServletResponse . getHeaders ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN ) ) . willThrow ( java.lang.NullPointerException .class ) ; given ( org.springframework.web.socket.sockjs.support.HttpServletResponse . getOutputStream ( ) ) . willReturn ( org.springframework.web.socket.sockjs.support.ServletOutputStream ) ; this . response = new ServletServerHttpResponse ( org.springframework.web.socket.sockjs.support.HttpServletResponse ) ; void ( STRING , STRING , HttpStatus . OK ) ; verify ( org.springframework.web.socket.sockjs.support.HttpServletResponse , times ( NUMBER ) ) . getOutputStream ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . servletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_HEADERS , STRING ) ; void ( STRING , STRING , HttpStatus . NO_CONTENT ) ; assertNull ( this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . getCorsConfiguration ( this . servletRequest ) ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; void ( STRING , STRING , HttpStatus . NO_CONTENT ) ; assertNull ( this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . getCorsConfiguration ( this . servletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . servletRequest . setServerName ( STRING ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; this . servletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; this . servletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_HEADERS , STRING ) ; void ( STRING , STRING , HttpStatus . NO_CONTENT ) ; assertNotNull ( this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . getCorsConfiguration ( this . servletRequest ) ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; void ( STRING , STRING , HttpStatus . NO_CONTENT ) ; assertNotNull ( this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . getCorsConfiguration ( this . servletRequest ) ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; void ( STRING , STRING , HttpStatus . NO_CONTENT ) ; assertNotNull ( this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . getCorsConfiguration ( this . servletRequest ) ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; void ( STRING , STRING , HttpStatus . NO_CONTENT ) ; assertNotNull ( this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . getCorsConfiguration ( this . servletRequest ) ) ; this . servletRequest . setServerName ( STRING ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; void ( STRING , STRING , HttpStatus . FORBIDDEN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setSuppressCors ( true ) ; this . servletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_HEADERS , STRING ) ; void ( STRING , STRING , HttpStatus . NO_CONTENT ) ; assertNull ( this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . getCorsConfiguration ( this . servletRequest ) ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; void ( STRING , STRING , HttpStatus . FORBIDDEN ) ; assertNull ( this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . getCorsConfiguration ( this . servletRequest ) ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; void ( STRING , STRING , HttpStatus . NO_CONTENT ) ; assertNull ( this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . getCorsConfiguration ( this . servletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING , HttpStatus . OK ) ; assertEquals ( STRING , this . servletResponse . getContentType ( ) ) ; assertTrue ( this . servletResponse . getContentAsString ( ) . startsWith ( STRING ) ) ; assertEquals ( NUMBER , this . servletResponse . getContentLength ( ) ) ; assertEquals ( STRING , this . response . getHeaders ( ) . getCacheControl ( ) ) ; assertEquals ( STRING , this . response . getHeaders ( ) . getETag ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . servletRequest . addHeader ( STRING , STRING ) ; void ( STRING , STRING , HttpStatus . NOT_MODIFIED ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING , HttpStatus . OK ) ; assertEquals ( STRING , this . servletResponse . getContentAsString ( ) ) ; void ( STRING , STRING , HttpStatus . OK ) ; assertNull ( STRING , this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . java.lang.String ) ; assertSame ( this . org.springframework.web.socket.sockjs.support.WebSocketHandler , this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . org.springframework.web.socket.sockjs.support.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . servletRequest . setContentType ( STRING ) ; void ( STRING , STRING , HttpStatus . OK ) ; assertEquals ( STRING , NUMBER , this . servletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , HttpStatus org.springframework.web.socket.sockjs.support.HttpStatus ) throws java.io.IOException { resetResponse ( ) ; void ( java.lang.String , java.lang.String , org.springframework.web.socket.sockjs.support.HttpStatus ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , HttpStatus org.springframework.web.socket.sockjs.support.HttpStatus ) throws java.io.IOException { setRequest ( java.lang.String , java.lang.String ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING . int ( ) ) ; this . org.springframework.web.socket.sockjs.support.SockJsServiceTests.TestSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.support.WebSocketHandler ) ; assertEquals ( org.springframework.web.socket.sockjs.support.HttpStatus . value ( ) , this . servletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( TaskScheduler org.springframework.web.socket.sockjs.support.TaskScheduler ) { super( org.springframework.web.socket.sockjs.support.TaskScheduler ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ServerHttpRequest org.springframework.web.socket.sockjs.support.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.support.ServerHttpResponse , WebSocketHandler org.springframework.web.socket.sockjs.support.WebSocketHandler ) throws java.io.IOException { this . org.springframework.web.socket.sockjs.support.WebSocketHandler = org.springframework.web.socket.sockjs.support.WebSocketHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ServerHttpRequest org.springframework.web.socket.sockjs.support.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.support.ServerHttpResponse , WebSocketHandler org.springframework.web.socket.sockjs.support.WebSocketHandler , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.web.socket.sockjs.support.SockJsException { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . org.springframework.web.socket.sockjs.support.WebSocketHandler = org.springframework.web.socket.sockjs.support.WebSocketHandler ; }  <METHOD_END>
