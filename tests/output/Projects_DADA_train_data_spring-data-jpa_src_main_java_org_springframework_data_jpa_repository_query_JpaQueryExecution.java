<METHOD_START> public java.lang.Object java.lang.Object ( AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object [] java.lang.Object[] ) { Assert . notNull ( org.springframework.data.jpa.repository.query.AbstractJpaQuery , STRING ) ; Assert . notNull ( java.lang.Object[] , STRING ) ; java.lang.Object java.lang.Object ; try { java.lang.Object = java.lang.Object ( org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object[] ) ; } catch ( NoResultException org.springframework.data.jpa.repository.query.NoResultException ) { return null ; } if ( java.lang.Object == null ) { return null ; } JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = org.springframework.data.jpa.repository.query.AbstractJpaQuery . getQueryMethod ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.jpa.repository.query.JpaQueryMethod . getReturnType ( ) ; if ( void .class . boolean ( java.lang.Class<> ) || java.lang.Class<> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return java.lang.Object ; } return org.springframework.data.jpa.repository.query.ConversionService . canConvert ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<> ) ? org.springframework.data.jpa.repository.query.ConversionService . convert ( java.lang.Object , java.lang.Class<> ) : java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object [] java.lang.Object[] );  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object [] java.lang.Object[] ) { return org.springframework.data.jpa.repository.query.AbstractJpaQuery . createQuery ( java.lang.Object[] ) . getResultList ( ) ; }  <METHOD_END>
<METHOD_START> public void ( Parameters < ? , ? > org.springframework.data.jpa.repository.query.Parameters<?,?> ) { this . org.springframework.data.jpa.repository.query.Parameters<?,?> = org.springframework.data.jpa.repository.query.Parameters<,> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected java.lang.Object java.lang.Object ( AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object [] java.lang.Object[] ) { ParametersParameterAccessor org.springframework.data.jpa.repository.query.ParametersParameterAccessor = new ParametersParameterAccessor ( org.springframework.data.jpa.repository.query.Parameters<,> , java.lang.Object[] ) ; Pageable org.springframework.data.jpa.repository.query.Pageable = org.springframework.data.jpa.repository.query.ParametersParameterAccessor . getPageable ( ) ; Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.AbstractJpaQuery . createQuery ( java.lang.Object[] ) ; int int = org.springframework.data.jpa.repository.query.Pageable . getPageSize ( ) ; org.springframework.data.jpa.repository.query.Query . setMaxResults ( int + NUMBER ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = org.springframework.data.jpa.repository.query.Query . getResultList ( ) ; boolean boolean = java.util.List<java.lang.Object> . int ( ) > int ; return new SliceImpl < java.lang.Object > ( boolean ? java.util.List<java.lang.Object> . java.util.List<java.lang.Object> ( NUMBER , int ) : java.util.List<java.lang.Object> , org.springframework.data.jpa.repository.query.Pageable , boolean ) ; }  <METHOD_END>
<METHOD_START> public void ( Parameters < ? , ? > org.springframework.data.jpa.repository.query.Parameters<?,?> ) { this . org.springframework.data.jpa.repository.query.Parameters<?,?> = org.springframework.data.jpa.repository.query.Parameters<,> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected java.lang.Object java.lang.Object ( final AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , final java.lang.Object [] java.lang.Object[] ) { ParameterAccessor org.springframework.data.jpa.repository.query.ParameterAccessor = new ParametersParameterAccessor ( org.springframework.data.jpa.repository.query.Parameters<,> , java.lang.Object[] ) ; Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.AbstractJpaQuery . createQuery ( java.lang.Object[] ) ; return PageableExecutionUtils . getPage ( org.springframework.data.jpa.repository.query.Query . getResultList ( ) , org.springframework.data.jpa.repository.query.ParameterAccessor . getPageable ( ) , ( ) count ( repositoryQuery , values ) ) ; }  <METHOD_END>
<METHOD_START> private long long ( AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object [] java.lang.Object[] ) { java.util.List<?> < ? > java.util.List<?> = org.springframework.data.jpa.repository.query.AbstractJpaQuery . createCountQuery ( java.lang.Object[] ) . getResultList ( ) ; return ( java.util.List<> . int ( ) == NUMBER ? org.springframework.data.jpa.repository.query.ConversionService . convert ( java.util.List<> . get ( NUMBER ) , java.lang.Long .class ) : java.util.List<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object [] java.lang.Object[] ) { return org.springframework.data.jpa.repository.query.AbstractJpaQuery . createQuery ( java.lang.Object[] ) . getSingleResult ( ) ; }  <METHOD_END>
<METHOD_START> public void ( JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod , EntityManager org.springframework.data.jpa.repository.query.EntityManager ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.jpa.repository.query.JpaQueryMethod . getReturnType ( ) ; boolean boolean = void .class . boolean ( java.lang.Class<> ) || java.lang.Void .class . boolean ( java.lang.Class<> ) ; boolean boolean = int .class . boolean ( java.lang.Class<> ) || java.lang.Integer .class . boolean ( java.lang.Class<> ) ; Assert . isTrue ( boolean || boolean , STRING ) ; this . org.springframework.data.jpa.repository.query.EntityManager = org.springframework.data.jpa.repository.query.EntityManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object [] java.lang.Object[] ) { int int = org.springframework.data.jpa.repository.query.AbstractJpaQuery . createQuery ( java.lang.Object[] ) . executeUpdate ( ) ; if ( org.springframework.data.jpa.repository.query.EntityManager != null ) { org.springframework.data.jpa.repository.query.EntityManager . clear ( ) ; } return int ; }  <METHOD_END>
<METHOD_START> public void ( EntityManager org.springframework.data.jpa.repository.query.EntityManager ) { this . org.springframework.data.jpa.repository.query.EntityManager = org.springframework.data.jpa.repository.query.EntityManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object [] java.lang.Object[] ) { Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.AbstractJpaQuery . createQuery ( java.lang.Object[] ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.data.jpa.repository.query.Query . getResultList ( ) ; for ( java.lang.Object java.lang.Object : java.util.List<> ) { org.springframework.data.jpa.repository.query.EntityManager . remove ( java.lang.Object ) ; } return org.springframework.data.jpa.repository.query.AbstractJpaQuery . getQueryMethod ( ) . isCollectionQuery ( ) ? java.util.List<> : java.util.List<> . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object [] java.lang.Object[] ) { return ! org.springframework.data.jpa.repository.query.AbstractJpaQuery . createQuery ( java.lang.Object[] ) . getResultList ( ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object [] java.lang.Object[] ) { Assert . isInstanceOf ( StoredProcedureJpaQuery .class , org.springframework.data.jpa.repository.query.AbstractJpaQuery ) ; StoredProcedureJpaQuery org.springframework.data.jpa.repository.query.StoredProcedureJpaQuery = ( StoredProcedureJpaQuery ) org.springframework.data.jpa.repository.query.AbstractJpaQuery ; StoredProcedureQuery org.springframework.data.jpa.repository.query.StoredProcedureQuery = org.springframework.data.jpa.repository.query.StoredProcedureJpaQuery . createQuery ( java.lang.Object[] ) ; org.springframework.data.jpa.repository.query.StoredProcedureQuery . execute ( ) ; return org.springframework.data.jpa.repository.query.StoredProcedureJpaQuery . extractOutputValue ( org.springframework.data.jpa.repository.query.StoredProcedureQuery ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( final AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery , java.lang.Object [] java.lang.Object[] ) { if ( ! SurroundingTransactionDetectorMethodInterceptor . INSTANCE . isSurroundingTransactionActive ( ) ) { throw new InvalidDataAccessApiUsageException ( java.lang.String ) ; } Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.AbstractJpaQuery . createQuery ( java.lang.Object[] ) ; PersistenceProvider org.springframework.data.jpa.repository.query.PersistenceProvider = PersistenceProvider . fromEntityManager ( org.springframework.data.jpa.repository.query.AbstractJpaQuery . getEntityManager ( ) ) ; CloseableIterator < java.lang.Object > org.springframework.data.jpa.repository.query.CloseableIterator<java.lang.Object> = org.springframework.data.jpa.repository.query.PersistenceProvider . executeQueryWithResultStream ( org.springframework.data.jpa.repository.query.Query ) ; return StreamUtils . createStreamFromIterator ( org.springframework.data.jpa.repository.query.CloseableIterator<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public static void void ( ConfigurableConversionService org.springframework.data.jpa.repository.query.ConfigurableConversionService ) { java.lang.ClassLoader java.lang.ClassLoader = org.springframework.data.jpa.repository.query.JpaQueryExecution .class . java.lang.ClassLoader ( ) ; if ( ClassUtils . isPresent ( STRING , java.lang.ClassLoader ) ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( STRING , java.lang.ClassLoader ) ; org.springframework.data.jpa.repository.query.ConfigurableConversionService . removeConvertible ( java.lang.Object .class , java.lang.Class<> ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { return; } catch ( java.lang.LinkageError java.lang.LinkageError ) { return; } } }  <METHOD_END>
