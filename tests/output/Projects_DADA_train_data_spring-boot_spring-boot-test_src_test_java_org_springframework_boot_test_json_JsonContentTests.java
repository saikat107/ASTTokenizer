<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING ) ; new JsonContent < ExampleObject > ( null , org.springframework.boot.test.json.ResolvableType , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING ) ; new JsonContent < ExampleObject > ( java.lang.Class<? extends org.springframework.boot.test.json.JsonContentTests> ( ) , org.springframework.boot.test.json.ResolvableType , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonContent < ExampleObject > org.springframework.boot.test.json.JsonContent<org.springframework.boot.test.json.ExampleObject> = new JsonContent <> ( java.lang.Class<? extends org.springframework.boot.test.json.JsonContentTests> ( ) , null , java.lang.String ) ; assertThat ( org.springframework.boot.test.json.JsonContent<org.springframework.boot.test.json.ExampleObject> ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonContent < ExampleObject > org.springframework.boot.test.json.JsonContent<org.springframework.boot.test.json.ExampleObject> = new JsonContent <> ( java.lang.Class<? extends org.springframework.boot.test.json.JsonContentTests> ( ) , org.springframework.boot.test.json.ResolvableType , java.lang.String ) ; assertThat ( org.springframework.boot.test.json.JsonContent<org.springframework.boot.test.json.ExampleObject> . assertThat ( ) ) . isInstanceOf ( JsonContentAssert .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonContent < ExampleObject > org.springframework.boot.test.json.JsonContent<org.springframework.boot.test.json.ExampleObject> = new JsonContent <> ( java.lang.Class<? extends org.springframework.boot.test.json.JsonContentTests> ( ) , org.springframework.boot.test.json.ResolvableType , java.lang.String ) ; assertThat ( org.springframework.boot.test.json.JsonContent<org.springframework.boot.test.json.ExampleObject> . getJson ( ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonContent < ExampleObject > org.springframework.boot.test.json.JsonContent<org.springframework.boot.test.json.ExampleObject> = new JsonContent <> ( java.lang.Class<? extends org.springframework.boot.test.json.JsonContentTests> ( ) , org.springframework.boot.test.json.ResolvableType , java.lang.String ) ; assertThat ( org.springframework.boot.test.json.JsonContent<org.springframework.boot.test.json.ExampleObject> . toString ( ) ) . isEqualTo ( STRING + java.lang.String + STRING + org.springframework.boot.test.json.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonContent < ExampleObject > org.springframework.boot.test.json.JsonContent<org.springframework.boot.test.json.ExampleObject> = new JsonContent <> ( java.lang.Class<? extends org.springframework.boot.test.json.JsonContentTests> ( ) , null , java.lang.String ) ; assertThat ( org.springframework.boot.test.json.JsonContent<org.springframework.boot.test.json.ExampleObject> . toString ( ) ) . isEqualTo ( STRING + java.lang.String ) ; }  <METHOD_END>
