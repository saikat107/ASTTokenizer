<METHOD_START> @ Before public void void ( ) { org.springframework.data.cassandra.repository.query.CassandraMappingContext = new BasicCassandraMappingContext ( ) ; org.springframework.data.cassandra.repository.query.CassandraConverter = new MappingCassandraConverter ( org.springframework.data.cassandra.repository.query.CassandraMappingContext ) ; when ( org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations . getConverter ( ) ) . thenReturn ( org.springframework.data.cassandra.repository.query.CassandraConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , STRING , STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , org.springframework.data.cassandra.repository.query.ReactivePartTreeCassandraQueryUnitTests.PersonProjection .class ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [ java.lang.Object[] . int ] ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { java.lang.Class<?>[] [ int ] = java.lang.Object[] [ int ] . java.lang.Class<? extends java.lang.Object> ( ) ; } ReactivePartTreeCassandraQuery org.springframework.data.cassandra.repository.query.ReactivePartTreeCassandraQuery = org.springframework.data.cassandra.repository.query.ReactivePartTreeCassandraQuery ( java.lang.String , java.lang.Class<?>[] ) ; CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.ReactivePartTreeCassandraQuery . getQueryMethod ( ) , java.lang.Object[] ) ; return org.springframework.data.cassandra.repository.query.ReactivePartTreeCassandraQuery . createQuery ( new ConvertingParameterAccessor ( org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations . getConverter ( ) , org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.repository.query.ReactivePartTreeCassandraQuery org.springframework.data.cassandra.repository.query.ReactivePartTreeCassandraQuery ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { try { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.cassandra.repository.query.ReactivePartTreeCassandraQueryUnitTests.Repo .class . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; ProjectionFactory org.springframework.data.cassandra.repository.query.ProjectionFactory = new SpelAwareProxyProjectionFactory ( ) ; ReactiveCassandraQueryMethod org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod = new ReactiveCassandraQueryMethod ( java.lang.reflect.Method , new DefaultRepositoryMetadata ( org.springframework.data.cassandra.repository.query.ReactivePartTreeCassandraQueryUnitTests.Repo .class ) , org.springframework.data.cassandra.repository.query.ProjectionFactory , org.springframework.data.cassandra.repository.query.CassandraMappingContext ) ; return new ReactivePartTreeCassandraQuery ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod , org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new java.lang.IllegalArgumentException ( java.lang.NoSuchMethodException . java.lang.String ( ) , java.lang.NoSuchMethodException ) ; } catch ( java.lang.SecurityException java.lang.SecurityException ) { throw new java.lang.IllegalArgumentException ( java.lang.SecurityException . java.lang.String ( ) , java.lang.SecurityException ) ; } }  <METHOD_END>
<METHOD_START> @ Query ( ) org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.Person> < Person > org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.Person> < Person > org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.Person> ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.Person> < Person > org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.Person> ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.Person> < Person > org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.Person> ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.Person> < Person > org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.Person> ( )  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Mono<org.springframework.data.cassandra.repository.query.ReactivePartTreeCassandraQueryUnitTests.PersonProjection> < org.springframework.data.cassandra.repository.query.ReactivePartTreeCassandraQueryUnitTests.PersonProjection > org.springframework.data.cassandra.repository.query.Mono<org.springframework.data.cassandra.repository.query.ReactivePartTreeCassandraQueryUnitTests.PersonProjection> ( )  <METHOD_END>
<METHOD_START> < T > org.springframework.data.cassandra.repository.query.Single<T> < T > org.springframework.data.cassandra.repository.query.Single<T> ( java.lang.Class<T> < T > java.lang.Class<T> );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
