<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static org.springframework.data.gemfire.DataAccessException org.springframework.data.gemfire.DataAccessException ( GemFireException org.springframework.data.gemfire.GemFireException ) { if ( org.springframework.data.gemfire.GemFireException instanceof CacheException ) { if ( org.springframework.data.gemfire.GemFireException instanceof CacheExistsException ) { return new DataIntegrityViolationException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof CommitConflictException ) { return new DataIntegrityViolationException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof CommitIncompleteException ) { return new DataIntegrityViolationException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof EntryExistsException ) { return new DuplicateKeyException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof EntryNotFoundException ) { return new DataRetrievalFailureException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof RegionExistsException ) { return new DataIntegrityViolationException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } } if ( org.springframework.data.gemfire.GemFireException instanceof CacheRuntimeException ) { if ( org.springframework.data.gemfire.GemFireException instanceof CacheXmlException ) { return new GemfireSystemException ( org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof CancelException ) { return new GemfireCancellationException ( ( CancelException ) org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof CqClosedException ) { return new InvalidDataAccessApiUsageException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof DiskAccessException ) { return new DataAccessResourceFailureException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof EntryDestroyedException ) { return new InvalidDataAccessApiUsageException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof FailedSynchronizationException ) { return new PessimisticLockingFailureException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof IndexMaintenanceException ) { return new GemfireIndexException ( ( IndexMaintenanceException ) org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof OperationAbortedException ) { if ( org.springframework.data.gemfire.GemFireException instanceof CacheLoaderException ) { return new GemfireSystemException ( org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof CacheWriterException ) { return new GemfireSystemException ( org.springframework.data.gemfire.GemFireException ) ; } return new DataAccessResourceFailureException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof PartitionedRegionDistributionException ) { return new DataAccessResourceFailureException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof PartitionedRegionStorageException ) { return new DataAccessResourceFailureException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof QueryExecutionTimeoutException ) { return new GemfireQueryException ( ( QueryExecutionTimeoutException ) org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof RegionDestroyedException ) { return new InvalidDataAccessResourceUsageException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof org . org.apache . org.apache . org.apache . org.apache ) { return new InvalidDataAccessResourceUsageException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof ResourceException ) { return new DataAccessResourceFailureException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof RoleException ) { return new GemfireSystemException ( org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof StatisticsDisabledException ) { return new GemfireSystemException ( org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof SynchronizationCommitConflictException ) { return new PessimisticLockingFailureException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } } if ( org.springframework.data.gemfire.GemFireException instanceof CopyException ) { return new GemfireSystemException ( org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof org . org.apache . org.apache . org.apache . org.apache ) { return new DataRetrievalFailureException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof FunctionException ) { return new InvalidDataAccessApiUsageException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof GemFireCacheException ) { return org.springframework.data.gemfire.DataAccessException ( ( ( GemFireCacheException ) org.springframework.data.gemfire.GemFireException ) . getCacheException ( ) ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof GemFireConfigException ) { return new GemfireSystemException ( org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof GemFireIOException ) { return new DataAccessResourceFailureException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof GemFireSecurityException ) { return new PermissionDeniedDataAccessException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof IncompatibleSystemException ) { return new GemfireSystemException ( org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof InternalGemFireException ) { return new GemfireSystemException ( org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof InvalidValueException ) { return new TypeMismatchDataAccessException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof LeaseExpiredException ) { return new PessimisticLockingFailureException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof LicenseException ) { return new GemfireSystemException ( org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof NoSystemException ) { return new GemfireSystemException ( org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof org . org.apache . org.apache . org.apache . org.apache ) { return new GemfireSystemException ( org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof ServerConnectivityException ) { return new DataAccessResourceFailureException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof SystemConnectException ) { return new DataAccessResourceFailureException ( org.springframework.data.gemfire.GemFireException . getMessage ( ) , org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof SystemIsRunningException ) { return new GemfireSystemException ( org.springframework.data.gemfire.GemFireException ) ; } if ( org.springframework.data.gemfire.GemFireException instanceof UnmodifiableException ) { return new GemfireSystemException ( org.springframework.data.gemfire.GemFireException ) ; } DataAccessException org.springframework.data.gemfire.DataAccessException = org.springframework.data.gemfire.DataAccessException ( org.springframework.data.gemfire.GemFireException ) ; if ( org.springframework.data.gemfire.DataAccessException != null ) return org.springframework.data.gemfire.DataAccessException ; return new GemfireSystemException ( org.springframework.data.gemfire.GemFireException ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.data.gemfire.DataAccessException org.springframework.data.gemfire.DataAccessException ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( java.lang.RuntimeException instanceof IndexInvalidException ) { return org.springframework.data.gemfire.DataAccessException ( ( IndexInvalidException ) java.lang.RuntimeException ) ; } if ( java.lang.RuntimeException instanceof QueryInvalidException ) { return org.springframework.data.gemfire.DataAccessException ( ( QueryInvalidException ) java.lang.RuntimeException ) ; } if ( boolean ( java.lang.RuntimeException ) ) { return org.springframework.data.gemfire.DataAccessException ( java.lang.RuntimeException ) ; } return new GemfireSystemException ( java.lang.RuntimeException ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static org.springframework.data.gemfire.DataAccessException org.springframework.data.gemfire.DataAccessException ( GemFireCheckedException org.springframework.data.gemfire.GemFireCheckedException ) { if ( org.springframework.data.gemfire.GemFireCheckedException instanceof QueryException ) { return new GemfireQueryException ( ( QueryException ) org.springframework.data.gemfire.GemFireCheckedException ) ; } if ( org.springframework.data.gemfire.GemFireCheckedException instanceof VersionException ) { return new DataAccessResourceFailureException ( org.springframework.data.gemfire.GemFireCheckedException . getMessage ( ) , org.springframework.data.gemfire.GemFireCheckedException ) ; } if ( org.springframework.data.gemfire.GemFireCheckedException instanceof org . org.apache . org.apache . org.apache . org.apache ) { return new GemfireSystemException ( org.springframework.data.gemfire.GemFireCheckedException ) ; } return new GemfireSystemException ( org.springframework.data.gemfire.GemFireCheckedException ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.gemfire.DataAccessException org.springframework.data.gemfire.DataAccessException ( IndexInvalidException org.springframework.data.gemfire.IndexInvalidException ) { return new GemfireIndexException ( org.springframework.data.gemfire.IndexInvalidException ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.gemfire.DataAccessException org.springframework.data.gemfire.DataAccessException ( QueryInvalidException org.springframework.data.gemfire.QueryInvalidException ) { return new GemfireQueryException ( org.springframework.data.gemfire.QueryInvalidException ) ; }  <METHOD_END>
<METHOD_START> static boolean boolean ( java.lang.RuntimeException java.lang.RuntimeException ) { return ( java.lang.Class<> != null && java.lang.Class<> . boolean ( java.lang.RuntimeException . java.lang.Class<? extends java.lang.RuntimeException> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.data.gemfire.DataAccessException org.springframework.data.gemfire.DataAccessException ( java.lang.RuntimeException java.lang.RuntimeException ) { return new GemfireQueryException ( java.lang.RuntimeException ) ; }  <METHOD_END>
