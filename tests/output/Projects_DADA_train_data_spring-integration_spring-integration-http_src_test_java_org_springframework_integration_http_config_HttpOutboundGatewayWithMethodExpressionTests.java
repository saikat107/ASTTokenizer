<METHOD_START> @ Before public void void ( ) { this . org.springframework.integration.http.config.MockRestServiceServer = MockRestServiceServer . createServer ( this . org.springframework.integration.http.config.RestTemplate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.http.config.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . POST ) ) . andRespond ( withSuccess ( HttpMethod . POST . name ( ) , MediaType . TEXT_PLAIN ) ) ; this . org.springframework.integration.http.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.http.config.Message<?> = this . org.springframework.integration.http.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.http.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.http.config.Message<> . getPayload ( ) ) ; this . org.springframework.integration.http.config.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.http.config.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( HttpMethod . GET . name ( ) , MediaType . TEXT_PLAIN ) ) ; this . org.springframework.integration.http.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.http.config.Message<?> = org.springframework.integration.http.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.http.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.http.config.Message<> . getPayload ( ) ) ; this . org.springframework.integration.http.config.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionParsingException .class ) public void void ( ) java.lang.Exception { new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.http.config.HttpOutboundGatewayWithMethodExpressionTests> ( ) ) . close ( ) ; }  <METHOD_END>
