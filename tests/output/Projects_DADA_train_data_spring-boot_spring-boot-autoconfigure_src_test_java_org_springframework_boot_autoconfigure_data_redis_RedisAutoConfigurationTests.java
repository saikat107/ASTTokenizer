<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . getBean ( STRING , RedisOperations .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . getBean ( StringRedisTemplate .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . getBean ( JedisConnectionFactory .class ) . getHostName ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . getBean ( JedisConnectionFactory .class ) . getDatabase ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING , STRING , STRING , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . getBean ( JedisConnectionFactory .class ) . getHostName ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . getBean ( JedisConnectionFactory .class ) . getPort ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . getBean ( JedisConnectionFactory .class ) . getPassword ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . getBean ( JedisConnectionFactory .class ) . isUseSsl ( ) ) . isEqualTo ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . getBean ( JedisConnectionFactory .class ) . getHostName ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . getBean ( JedisConnectionFactory .class ) . getPoolConfig ( ) . getMaxIdle ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . getBean ( JedisConnectionFactory .class ) . getHostName ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . getBean ( JedisConnectionFactory .class ) . getTimeout ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; if ( boolean ( java.util.List<java.lang.String> ) ) { void ( STRING , STRING + StringUtils . collectionToCommaDelimitedString ( java.util.List<java.lang.String> ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . getBean ( JedisConnectionFactory .class ) . isRedisSentinelAware ( ) ) . isTrue ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; if ( boolean ( java.util.List<java.lang.String> ) ) { void ( STRING + java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , STRING + java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . getBean ( JedisConnectionFactory .class ) . getClusterConnection ( ) ) . isNotNull ( ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { if ( boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { Jedis org.springframework.boot.autoconfigure.data.redis.Jedis = null ; try { java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( STRING ) ; org.springframework.boot.autoconfigure.data.redis.Jedis = new Jedis ( java.lang.String[] [ NUMBER ] , java.lang.Integer . java.lang.Integer ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.boot.autoconfigure.data.redis.Jedis . connect ( ) ; org.springframework.boot.autoconfigure.data.redis.Jedis . ping ( ) ; return true ; } catch ( java.lang.Exception java.lang.Exception ) { return false ; } finally { if ( org.springframework.boot.autoconfigure.data.redis.Jedis != null ) { try { org.springframework.boot.autoconfigure.data.redis.Jedis . disconnect ( ) ; org.springframework.boot.autoconfigure.data.redis.Jedis . close ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext ( java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . register ( RedisAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.boot.autoconfigure.data.redis.AnnotationConfigApplicationContext ; }  <METHOD_END>
