<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , PAGE_NUMBER , PAGE_SIZE ) ; void ( REFERENCE_WITHOUT_SORT , java.lang.String ) ; void ( REFERENCE_WITH_SORT , java.lang.String + STRING ) ; void ( REFERENCE_WITH_SORT_FIELDS , java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.data.web.MethodParameter = new MethodParameter ( Sample .class . java.lang.reflect.Method ( STRING , Pageable .class ) , NUMBER ) ; UriComponentsContributor org.springframework.data.web.UriComponentsContributor = new HateoasPageableHandlerMethodArgumentResolver ( ) ; UriComponentsBuilder org.springframework.data.web.UriComponentsBuilder = UriComponentsBuilder . fromHttpUrl ( STRING ) ; org.springframework.data.web.UriComponentsContributor . enhance ( org.springframework.data.web.UriComponentsBuilder , org.springframework.data.web.MethodParameter , PageRequest . of ( NUMBER , NUMBER ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.data.web.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.data.web.UriComponentsBuilder . build ( ) . getQueryParams ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.data.web.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ; assertThat ( java.util.List<java.lang.String> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) . isEqualTo ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.data.web.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ; assertThat ( java.util.List<java.lang.String> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( PageRequest . of ( NUMBER , NUMBER ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.data.web.UriComponents = UriComponentsBuilder . fromPath ( STRING ) . build ( ) ; HateoasPageableHandlerMethodArgumentResolver org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver = org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver ( ) ; org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver . setPageParameterName ( STRING ) ; java.lang.String java.lang.String = org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver . getPaginationTemplateVariables ( null , org.springframework.data.web.UriComponents ) . toString ( ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HateoasPageableHandlerMethodArgumentResolver org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver = org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver ( ) ; org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver . setOneIndexedParameters ( true ) ; UriComponentsBuilder org.springframework.data.web.UriComponentsBuilder = UriComponentsBuilder . fromPath ( STRING ) ; org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver . enhance ( org.springframework.data.web.UriComponentsBuilder , null , PageRequest . of ( NUMBER , NUMBER ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.data.web.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.data.web.UriComponentsBuilder . build ( ) . getQueryParams ( ) ; assertThat ( org.springframework.data.web.MultiValueMap<java.lang.String,java.lang.String> . containsKey ( org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver . getPageParameterName ( ) ) ) . isTrue ( ) ; assertThat ( org.springframework.data.web.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver . getPageParameterName ( ) ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver ( ) { HateoasPageableHandlerMethodArgumentResolver org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver = new HateoasPageableHandlerMethodArgumentResolver ( ) ; org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver . setMaxPageSize ( NUMBER ) ; return org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver ; }  <METHOD_END>
<METHOD_START> protected void void ( Pageable org.springframework.data.web.Pageable , java.lang.String java.lang.String ) { UriComponentsBuilder org.springframework.data.web.UriComponentsBuilder = UriComponentsBuilder . fromPath ( STRING ) ; MethodParameter org.springframework.data.web.MethodParameter = getParameterOfMethod ( STRING ) ; org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver ( ) . enhance ( org.springframework.data.web.UriComponentsBuilder , org.springframework.data.web.MethodParameter , org.springframework.data.web.Pageable ) ; assertThat ( org.springframework.data.web.UriComponentsBuilder . build ( ) . toUriString ( ) ) . endsWith ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { UriComponents org.springframework.data.web.UriComponents = UriComponentsBuilder . fromUriString ( java.lang.String ) . build ( ) ; HateoasPageableHandlerMethodArgumentResolver org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver = org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver ( ) ; assertThat ( org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver . getPaginationTemplateVariables ( null , org.springframework.data.web.UriComponents ) . toString ( ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
