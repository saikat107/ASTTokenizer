<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . newInstance ( ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . scheme ( STRING ) . host ( STRING ) . path ( STRING ) . queryParam ( STRING ) . fragment ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getQuery ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getFragment ( ) ) ; java.net.URI java.net.URI = new java.net.URI ( STRING ) ; assertEquals ( STRING , java.net.URI , org.springframework.web.util.UriComponents . toUri ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . newInstance ( ) . scheme ( STRING ) . host ( STRING ) . pathSegment ( STRING ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) ; org.springframework.web.util.UriComponentsBuilder = org.springframework.web.util.UriComponentsBuilder . pathSegment ( STRING ) . queryParam ( STRING ) . fragment ( STRING ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; java.net.URI java.net.URI = new java.net.URI ( STRING ) ; assertEquals ( STRING , java.net.URI , org.springframework.web.util.UriComponents . toUri ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getQuery ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getFragment ( ) ) ; java.net.URI = new java.net.URI ( STRING ) ; assertEquals ( STRING , java.net.URI , org.springframework.web.util.UriComponents . toUri ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromPath ( STRING ) . queryParam ( STRING ) . fragment ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getQuery ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getFragment ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.util.UriComponents . toUriString ( ) ) ; java.net.URI java.net.URI = new java.net.URI ( STRING ) ; assertEquals ( STRING , java.net.URI , org.springframework.web.util.UriComponents . toUri ( ) ) ; org.springframework.web.util.UriComponents = UriComponentsBuilder . fromPath ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; java.net.URI = new java.net.URI ( STRING ) ; assertEquals ( STRING , java.net.URI , org.springframework.web.util.UriComponents . toUri ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUri ( java.net.URI ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getQuery ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getFragment ( ) ) ; assertEquals ( STRING , java.net.URI , org.springframework.web.util.UriComponents . toUri ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUri ( java.net.URI ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getSchemeSpecificPart ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getFragment ( ) ) ; assertEquals ( STRING , java.net.URI , org.springframework.web.util.UriComponents . toUri ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; java.lang.String java.lang.String = UriComponentsBuilder . fromUri ( java.net.URI ) . build ( ) . getQueryParams ( ) . get ( STRING ) . get ( NUMBER ) ; java.lang.String java.lang.String = UriComponentsBuilder . fromUriString ( java.net.URI . java.lang.String ( ) ) . build ( ) . getQueryParams ( ) . get ( STRING ) . get ( NUMBER ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertNull ( org.springframework.web.util.UriComponents . getUserInfo ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( - NUMBER , org.springframework.web.util.UriComponents . getPort ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , org.springframework.web.util.UriComponents . getPathSegments ( ) ) ; assertNull ( org.springframework.web.util.UriComponents . getQuery ( ) ) ; assertNull ( org.springframework.web.util.UriComponents . getFragment ( ) ) ; org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getUserInfo ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.UriComponents . getPort ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getQuery ( ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( NUMBER ) ; org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; assertEquals ( org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> , org.springframework.web.util.UriComponents . getQueryParams ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getFragment ( ) ) ; org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertNull ( org.springframework.web.util.UriComponents . getUserInfo ( ) ) ; assertNull ( org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( - NUMBER , org.springframework.web.util.UriComponents . getPort ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getSchemeSpecificPart ( ) ) ; assertNull ( org.springframework.web.util.UriComponents . getPath ( ) ) ; assertNull ( org.springframework.web.util.UriComponents . getQuery ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getFragment ( ) ) ; org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; assertNull ( org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertNull ( org.springframework.web.util.UriComponents . getUserInfo ( ) ) ; assertNull ( org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( - NUMBER , org.springframework.web.util.UriComponents . getPort ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertNull ( org.springframework.web.util.UriComponents . getQuery ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getFragment ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { java.lang.String java.lang.String = STRING ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( java.lang.String ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getQuery ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getQueryParams ( ) . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.net.URI java.net.URI = UriComponentsBuilder . fromHttpUrl ( java.lang.String ) . build ( true ) . toUri ( ) ; assertEquals ( java.lang.String , java.net.URI . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , UriComponentsBuilder . fromHttpUrl ( STRING ) . build ( ) . getScheme ( ) ) ; assertEquals ( STRING , UriComponentsBuilder . fromHttpUrl ( STRING ) . build ( ) . getScheme ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.net.URISyntaxException { UriComponentsBuilder . fromHttpUrl ( STRING ) . build ( ) . encode ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) . encode ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) . encode ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) . encode ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; assertTrue ( StringUtils . isEmpty ( org.springframework.web.util.UriComponents . getUserInfo ( ) ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertTrue ( org.springframework.web.util.UriComponents . getQueryParams ( ) . containsKey ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getQueryParams ( ) . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerPort ( - NUMBER ) ; org.springframework.web.util.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setQueryString ( STRING ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( - NUMBER , org.springframework.web.util.UriComponents . getPort ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , NUMBER ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerPort ( NUMBER ) ; org.springframework.web.util.MockHttpServletRequest . setRequestURI ( STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( - NUMBER , org.springframework.web.util.UriComponents . getPort ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerPort ( - NUMBER ) ; org.springframework.web.util.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerPort ( - NUMBER ) ; org.springframework.web.util.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerPort ( - NUMBER ) ; org.springframework.web.util.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerPort ( - NUMBER ) ; org.springframework.web.util.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerPort ( - NUMBER ) ; org.springframework.web.util.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerPort ( - NUMBER ) ; org.springframework.web.util.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.UriComponents . getPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerPort ( - NUMBER ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( - NUMBER , org.springframework.web.util.UriComponents . getPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerPort ( NUMBER ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.UriComponents . getPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerPort ( NUMBER ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( - NUMBER , org.springframework.web.util.UriComponents . getPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerPort ( NUMBER ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertEquals ( - NUMBER , org.springframework.web.util.UriComponents . getPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerPort ( NUMBER ) ; org.springframework.web.util.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerPort ( NUMBER ) ; org.springframework.web.util.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerPort ( NUMBER ) ; org.springframework.web.util.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromPath ( STRING ) . build ( ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . newInstance ( ) . uriComponents ( org.springframework.web.util.UriComponents ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . fromPath ( STRING ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , org.springframework.web.util.UriComponents . getPathSegments ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . newInstance ( ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . pathSegment ( STRING ) . pathSegment ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , org.springframework.web.util.UriComponents . getPathSegments ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . fromPath ( STRING ) . path ( STRING ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) . encode ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , org.springframework.web.util.UriComponents . getPathSegments ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . fromPath ( STRING ) . pathSegment ( STRING ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) . encode ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , org.springframework.web.util.UriComponents . getPathSegments ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . newInstance ( ) . pathSegment ( STRING ) . pathSegment ( STRING ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , org.springframework.web.util.UriComponents . getPathSegments ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . newInstance ( ) . pathSegment ( STRING ) . path ( STRING ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.web.util.UriComponents . getPathSegments ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . newInstance ( ) . pathSegment ( STRING , STRING , STRING , STRING ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , org.springframework.web.util.UriComponents . getPathSegments ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromPath ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . fromUriString ( STRING ) ; org.springframework.web.util.UriComponentsBuilder . replacePath ( STRING ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toUriString ( ) ) ; org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . fromUriString ( STRING ) ; org.springframework.web.util.UriComponentsBuilder . replacePath ( null ) ; org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toUriString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . fromUriString ( STRING ) ; org.springframework.web.util.UriComponentsBuilder . replaceQuery ( STRING ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toUriString ( ) ) ; org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . fromUriString ( STRING ) ; org.springframework.web.util.UriComponentsBuilder . replaceQuery ( null ) ; org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toUriString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . newInstance ( ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . queryParam ( STRING , STRING , NUMBER ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getQuery ( ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( NUMBER ) ; org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; assertEquals ( org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> , org.springframework.web.util.UriComponents . getQueryParams ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . newInstance ( ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . queryParam ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getQuery ( ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( NUMBER ) ; org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , null ) ; assertEquals ( org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> , org.springframework.web.util.UriComponents . getQueryParams ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . newInstance ( ) . queryParam ( STRING , STRING , NUMBER ) ; org.springframework.web.util.UriComponentsBuilder . replaceQueryParam ( STRING , STRING , NUMBER ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getQuery ( ) ) ; org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . newInstance ( ) . queryParam ( STRING , STRING , NUMBER ) ; org.springframework.web.util.UriComponentsBuilder . replaceQueryParam ( STRING ) ; org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) ; assertNull ( STRING , org.springframework.web.util.UriComponents . getQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromPath ( STRING ) . buildAndExpand ( STRING ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toUriString ( ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.web.util.UriComponents = UriComponentsBuilder . fromPath ( STRING ) . buildAndExpand ( java.util.Map<java.lang.String,java.lang.String> ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toUriString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . buildAndExpand ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toUriString ( ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; UriComponentsBuilder . fromUriString ( STRING ) . buildAndExpand ( java.util.Map<java.lang.String,java.lang.String> ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toUriString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; assertThat ( org.springframework.web.util.UriComponents . toUriString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.web.util.UriComponents . getQueryParams ( ) . get ( STRING ) . get ( NUMBER ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; assertThat ( org.springframework.web.util.UriComponents . toUriString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.web.util.UriComponents . getQueryParams ( ) . get ( STRING ) . get ( NUMBER ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; assertThat ( org.springframework.web.util.UriComponents . toUriString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.web.util.UriComponents . getQueryParams ( ) . get ( STRING ) . get ( NUMBER ) , equalTo ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( UriComponentsBuilder . fromUriString ( STRING ) . build ( ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( UriComponentsBuilder . fromUriString ( STRING ) . build ( ) . toUriString ( ) , equalTo ( STRING ) ) ; assertThat ( UriComponentsBuilder . fromUriString ( STRING ) . build ( ) . toUri ( ) . getPath ( ) , equalTo ( STRING ) ) ; assertThat ( UriComponentsBuilder . fromUriString ( STRING ) . build ( ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( UriComponentsBuilder . fromUriString ( STRING ) . build ( ) . toUriString ( ) , equalTo ( STRING ) ) ; assertThat ( UriComponentsBuilder . fromUriString ( STRING ) . build ( ) . toUri ( ) . getPath ( ) , equalTo ( STRING ) ) ; assertThat ( UriComponentsBuilder . fromUriString ( STRING ) . path ( STRING ) . build ( ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( UriComponentsBuilder . fromUriString ( STRING ) . path ( STRING ) . build ( ) . toUriString ( ) , equalTo ( STRING ) ) ; assertThat ( UriComponentsBuilder . fromUriString ( STRING ) . path ( STRING ) . build ( ) . toUri ( ) . getPath ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( UriComponentsBuilder . fromUriString ( STRING ) . path ( STRING ) . build ( ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( UriComponentsBuilder . fromUriString ( STRING ) . pathSegment ( STRING , STRING , STRING ) . build ( ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( UriComponentsBuilder . fromUriString ( STRING ) . path ( STRING ) . path ( STRING ) . build ( ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( UriComponentsBuilder . fromUriString ( STRING ) . pathSegment ( STRING ) . path ( STRING ) . build ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; assertThat ( org.springframework.web.util.UriComponents . getFragment ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.web.util.UriComponents . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; assertThat ( org.springframework.web.util.UriComponents . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . newInstance ( ) ; org.springframework.web.util.UriComponentsBuilder . scheme ( STRING ) . host ( STRING ) . path ( STRING ) . pathSegment ( STRING ) . queryParam ( STRING ) . fragment ( STRING ) ; UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = ( UriComponentsBuilder ) org.springframework.web.util.UriComponentsBuilder . clone ( ) ; org.springframework.web.util.UriComponentsBuilder . scheme ( STRING ) . host ( STRING ) . path ( STRING ) . pathSegment ( STRING ) . queryParam ( STRING ) . fragment ( STRING ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getQuery ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getFragment ( ) ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getQuery ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getFragment ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setRequestURI ( STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setRequestURI ( STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setRequestURI ( STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.util.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.util.MockHttpServletRequest . setScheme ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.util.MockHttpServletRequest . setRequestURI ( STRING ) ; HttpRequest org.springframework.web.util.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getScheme ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getHost ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; }  <METHOD_END>
