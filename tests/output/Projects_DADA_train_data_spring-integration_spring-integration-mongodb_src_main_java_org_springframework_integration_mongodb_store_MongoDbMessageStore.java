<METHOD_START> public void ( MongoDbFactory org.springframework.integration.mongodb.store.MongoDbFactory ) { this( org.springframework.integration.mongodb.store.MongoDbFactory , null ); }  <METHOD_END>
<METHOD_START> public void ( MongoDbFactory org.springframework.integration.mongodb.store.MongoDbFactory , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.integration.mongodb.store.MongoDbFactory , STRING ) ; this . org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageReadingMongoConverter = new org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageReadingMongoConverter ( org.springframework.integration.mongodb.store.MongoDbFactory , new MongoMappingContext ( ) ) ; this . org.springframework.integration.mongodb.store.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.store.MongoDbFactory , this . org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageReadingMongoConverter ) ; this . java.lang.String = ( StringUtils . hasText ( java.lang.String ) ) ? java.lang.String : java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { Assert . notNull ( java.lang.ClassLoader , STRING ) ; this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.integration.mongodb.store.ApplicationContext ) throws org.springframework.integration.mongodb.store.BeansException { this . org.springframework.integration.mongodb.store.ApplicationContext = org.springframework.integration.mongodb.store.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( this . org.springframework.integration.mongodb.store.ApplicationContext != null ) { this . org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageReadingMongoConverter . setApplicationContext ( this . org.springframework.integration.mongodb.store.ApplicationContext ) ; } this . org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageReadingMongoConverter . void ( ) ; IndexOperations org.springframework.integration.mongodb.store.IndexOperations = this . org.springframework.integration.mongodb.store.MongoTemplate . indexOps ( this . java.lang.String ) ; org.springframework.integration.mongodb.store.IndexOperations . ensureIndex ( new Index ( java.lang.String , Sort . Direction . ASC ) . on ( java.lang.String , Sort . Direction . DESC ) . on ( java.lang.String , Sort . Direction . DESC ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.integration.mongodb.store.Message<T> < T > org.springframework.integration.mongodb.store.Message<T> ( Message < T > org.springframework.integration.mongodb.store.Message<T> ) { Assert . notNull ( org.springframework.integration.mongodb.store.Message<T> , STRING ) ; this . void ( new org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper ( org.springframework.integration.mongodb.store.Message<T> ) ) ; return org.springframework.integration.mongodb.store.Message<T> ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper ) { java.util.UUID java.util.UUID = ( java.util.UUID ) org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . java.util.Map<java.lang.String,> . get ( MessageHeaders . ID ) ; Query org.springframework.integration.mongodb.store.Query = org.springframework.integration.mongodb.store.Query ( java.util.UUID , org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . java.lang.Object ( ) ) ; if ( ! this . org.springframework.integration.mongodb.store.MongoTemplate . exists ( org.springframework.integration.mongodb.store.Query , org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper .class , this . java.lang.String ) ) { if ( org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . long ( ) == NUMBER ) { org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . void ( java.lang.System . long ( ) ) ; } org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . void ( java.lang.System . long ( ) ) ; this . org.springframework.integration.mongodb.store.MongoTemplate . insert ( org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper , this . java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.store.Message<?> < ? > org.springframework.integration.mongodb.store.Message<?> ( java.util.UUID java.util.UUID ) { Assert . notNull ( java.util.UUID , STRING ) ; org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper = this . org.springframework.integration.mongodb.store.MongoTemplate . findOne ( org.springframework.integration.mongodb.store.Query ( java.util.UUID ) , org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper .class , this . java.lang.String ) ; return ( org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper != null ) ? org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . org.springframework.integration.mongodb.store.Message<?> ( ) : null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.store.MessageMetadata org.springframework.integration.mongodb.store.MessageMetadata ( java.util.UUID java.util.UUID ) { Assert . notNull ( java.util.UUID , STRING ) ; org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper = this . org.springframework.integration.mongodb.store.MongoTemplate . findOne ( org.springframework.integration.mongodb.store.Query ( java.util.UUID ) , org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper .class , this . java.lang.String ) ; if ( org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper != null ) { MessageMetadata org.springframework.integration.mongodb.store.MessageMetadata = new MessageMetadata ( java.util.UUID ) ; org.springframework.integration.mongodb.store.MessageMetadata . setTimestamp ( org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . long ( ) ) ; return org.springframework.integration.mongodb.store.MessageMetadata ; } else { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ManagedAttribute public long long ( ) { return this . org.springframework.integration.mongodb.store.MongoTemplate . getCollection ( this . java.lang.String ) . count ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.store.Message<?> < ? > org.springframework.integration.mongodb.store.Message<?> ( java.util.UUID java.util.UUID ) { Assert . notNull ( java.util.UUID , STRING ) ; org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper = this . org.springframework.integration.mongodb.store.MongoTemplate . findAndRemove ( org.springframework.integration.mongodb.store.Query ( java.util.UUID ) , org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper .class , this . java.lang.String ) ; return ( org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper != null ? org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . org.springframework.integration.mongodb.store.Message<?> ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.store.MessageGroup org.springframework.integration.mongodb.store.MessageGroup ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; Query org.springframework.integration.mongodb.store.Query = org.springframework.integration.mongodb.store.Query ( java.lang.Object ) ; org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper = this . org.springframework.integration.mongodb.store.MongoTemplate . findOne ( org.springframework.integration.mongodb.store.Query , org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper .class , this . java.lang.String ) ; if ( org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper != null ) { long long = org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . long ( ) ; long long = org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . long ( ) ; boolean boolean = org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . boolean ( ) ; int int = org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . int ( ) ; MessageGroup org.springframework.integration.mongodb.store.MessageGroup = getMessageGroupFactory ( ) . create ( this , java.lang.Object , long , boolean ) ; org.springframework.integration.mongodb.store.MessageGroup . setLastModified ( long ) ; org.springframework.integration.mongodb.store.MessageGroup . setLastReleasedMessageSequenceNumber ( int ) ; return org.springframework.integration.mongodb.store.MessageGroup ; } else { return new SimpleMessageGroup ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , org.springframework.integration.mongodb.store.Message<?> < ? > ... org.springframework.integration.mongodb.store.Message<?>[] ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( org.springframework.integration.mongodb.store.Message<?>[] , STRING ) ; Query org.springframework.integration.mongodb.store.Query = org.springframework.integration.mongodb.store.Query ( java.lang.Object ) ; org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper = this . org.springframework.integration.mongodb.store.MongoTemplate . findOne ( org.springframework.integration.mongodb.store.Query , org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper .class , this . java.lang.String ) ; long long = java.lang.System . long ( ) ; int int = NUMBER ; boolean boolean = false ; if ( org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper != null ) { long = org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . long ( ) ; int = org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . int ( ) ; boolean = org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . boolean ( ) ; } for ( Message < ? > org.springframework.integration.mongodb.store.Message<?> : org.springframework.integration.mongodb.store.Message<?>[] ) { org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper = new org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper ( org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . void ( java.lang.Object ) ; org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . void ( long ) ; org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . void ( org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper == null ? long : java.lang.System . long ( ) ) ; org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . void ( boolean ) ; org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . void ( int ) ; org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . void ( int ( ) ) ; void ( org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.util.Collection<org.springframework.integration.mongodb.store.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.mongodb.store.Message<?>> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.util.Collection<org.springframework.integration.mongodb.store.Message<?>> , STRING ) ; java.util.Collection<java.util.UUID> < java.util.UUID > java.util.Collection<java.util.UUID> = new java.util.ArrayList<java.util.UUID> <> ( ) ; for ( Message < ? > org.springframework.integration.mongodb.store.Message<?> : java.util.Collection<org.springframework.integration.mongodb.store.Message<?>> ) { java.util.Collection<java.util.UUID> . boolean ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; if ( java.util.Collection<java.util.UUID> . int ( ) >= getRemoveBatchSize ( ) ) { void ( java.lang.Object , java.util.Collection<java.util.UUID> ) ; java.util.Collection<java.util.UUID> . void ( ) ; } } if ( java.util.Collection<java.util.UUID> . int ( ) > NUMBER ) { void ( java.lang.Object , java.util.Collection<java.util.UUID> ) ; } void ( java.lang.Object , org.springframework.integration.mongodb.store.Update ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.util.Collection<java.util.UUID> < java.util.UUID > java.util.Collection<java.util.UUID> ) { BulkOperations org.springframework.integration.mongodb.store.BulkOperations = this . org.springframework.integration.mongodb.store.MongoTemplate . bulkOps ( BulkOperations . BulkMode . ORDERED , this . java.lang.String ) ; for ( java.util.UUID java.util.UUID : java.util.Collection<java.util.UUID> ) { org.springframework.integration.mongodb.store.BulkOperations . remove ( org.springframework.integration.mongodb.store.Query ( java.util.UUID , java.lang.Object ) ) ; } org.springframework.integration.mongodb.store.BulkOperations . execute ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { this . org.springframework.integration.mongodb.store.MongoTemplate . remove ( org.springframework.integration.mongodb.store.Query ( java.lang.Object ) , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.integration.mongodb.store.MessageGroup> < MessageGroup > java.util.Iterator<org.springframework.integration.mongodb.store.MessageGroup> ( ) { java.util.List<org.springframework.integration.mongodb.store.MessageGroup> < MessageGroup > java.util.List<org.springframework.integration.mongodb.store.MessageGroup> = new java.util.ArrayList<org.springframework.integration.mongodb.store.MessageGroup> <> ( ) ; Query org.springframework.integration.mongodb.store.Query = Query . query ( Criteria . where ( java.lang.String ) . exists ( true ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = this . org.springframework.integration.mongodb.store.MongoTemplate . getCollection ( this . java.lang.String ) . distinct ( java.lang.String , org.springframework.integration.mongodb.store.Query . getQueryObject ( ) , java.lang.String .class ) ; for ( java.lang.Object java.lang.Object : java.lang.Iterable<java.lang.String> ) { java.util.List<org.springframework.integration.mongodb.store.MessageGroup> . add ( org.springframework.integration.mongodb.store.MessageGroup ( java.lang.Object ) ) ; } return java.util.List<org.springframework.integration.mongodb.store.MessageGroup> . iterator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.store.Message<?> < ? > org.springframework.integration.mongodb.store.Message<?> ( final java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; Query org.springframework.integration.mongodb.store.Query = org.springframework.integration.mongodb.store.Query ( java.lang.Object ) . with ( Sort . by ( java.lang.String , java.lang.String ) ) ; org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper = this . org.springframework.integration.mongodb.store.MongoTemplate . findAndRemove ( org.springframework.integration.mongodb.store.Query , org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper .class , this . java.lang.String ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = null ; if ( org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper != null ) { org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . org.springframework.integration.mongodb.store.Message<?> ( ) ; } void ( java.lang.Object , org.springframework.integration.mongodb.store.Update ( ) ) ; return org.springframework.integration.mongodb.store.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.Object java.lang.Object ) { long long = this . org.springframework.integration.mongodb.store.MongoTemplate . count ( new Query ( Criteria . where ( java.lang.String ) . is ( java.lang.Object ) ) , this . java.lang.String ) ; Assert . isTrue ( long <= java.lang.Integer . int , STRING ) ; return ( int ) long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , int int ) { this . void ( java.lang.Object , org.springframework.integration.mongodb.store.Update ( ) . set ( java.lang.String , int ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { this . void ( java.lang.Object , org.springframework.integration.mongodb.store.Update ( ) . set ( java.lang.String , true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.store.Message<?> < ? > org.springframework.integration.mongodb.store.Message<?> ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; Query org.springframework.integration.mongodb.store.Query = org.springframework.integration.mongodb.store.Query ( java.lang.Object ) ; org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper = this . org.springframework.integration.mongodb.store.MongoTemplate . findOne ( org.springframework.integration.mongodb.store.Query , org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper .class , this . java.lang.String ) ; if ( org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper != null ) { return org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . org.springframework.integration.mongodb.store.Message<?> ( ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.integration.mongodb.store.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.mongodb.store.Message<?>> ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; Query org.springframework.integration.mongodb.store.Query = org.springframework.integration.mongodb.store.Query ( java.lang.Object ) ; java.util.List<org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper> < org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper > java.util.List<org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper> = this . org.springframework.integration.mongodb.store.MongoTemplate . find ( org.springframework.integration.mongodb.store.Query , org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper .class , this . java.lang.String ) ; return java.util.List<org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper> . java.util.stream.Stream<org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper> ( ) . java.util.stream.Stream<org.springframework.integration.mongodb.store.Message<>> ( org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper :: org.springframework.integration.mongodb.store.Message<?> ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ManagedAttribute public int int ( ) { Query org.springframework.integration.mongodb.store.Query = Query . query ( Criteria . where ( MessageDocumentFields . MESSAGE_ID ) . exists ( true ) . and ( MessageDocumentFields . GROUP_ID ) . exists ( true ) ) ; long long = this . org.springframework.integration.mongodb.store.MongoTemplate . count ( org.springframework.integration.mongodb.store.Query , this . java.lang.String ) ; Assert . isTrue ( long <= java.lang.Integer . int , STRING ) ; return ( int ) long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ManagedAttribute public int int ( ) { Query org.springframework.integration.mongodb.store.Query = Query . query ( Criteria . where ( MessageDocumentFields . GROUP_ID ) . exists ( true ) ) ; return this . org.springframework.integration.mongodb.store.MongoTemplate . getCollection ( this . java.lang.String ) . distinct ( MessageDocumentFields . GROUP_ID , org.springframework.integration.mongodb.store.Query . getQueryObject ( ) , java.lang.Object .class ) . into ( new java.util.ArrayList <> ( ) ) . size ( ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.integration.mongodb.store.Update org.springframework.integration.mongodb.store.Update ( ) { return Update . update ( java.lang.String , java.lang.System . long ( ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.integration.mongodb.store.Query org.springframework.integration.mongodb.store.Query ( java.util.UUID java.util.UUID ) { return new Query ( Criteria . where ( STRING ) . is ( java.util.UUID ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.integration.mongodb.store.Query org.springframework.integration.mongodb.store.Query ( java.util.UUID java.util.UUID , java.lang.Object java.lang.Object ) { return new Query ( Criteria . where ( STRING ) . is ( java.util.UUID ) . and ( java.lang.String ) . is ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.integration.mongodb.store.Query org.springframework.integration.mongodb.store.Query ( java.lang.Object java.lang.Object ) { return org.springframework.integration.mongodb.store.Query ( java.lang.Object ) . with ( new Sort ( Sort . Direction . DESC , java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.integration.mongodb.store.Query org.springframework.integration.mongodb.store.Query ( java.lang.Object java.lang.Object ) { return new Query ( Criteria . where ( java.lang.String ) . is ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , Update org.springframework.integration.mongodb.store.Update ) { Query org.springframework.integration.mongodb.store.Query = org.springframework.integration.mongodb.store.Query ( java.lang.Object ) . with ( new Sort ( Sort . Direction . DESC , java.lang.String , java.lang.String ) ) ; this . org.springframework.integration.mongodb.store.MongoTemplate . updateFirst ( org.springframework.integration.mongodb.store.Query , org.springframework.integration.mongodb.store.Update , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private int int ( ) { Query org.springframework.integration.mongodb.store.Query = Query . query ( Criteria . where ( STRING ) . is ( java.lang.String ) ) ; org.springframework.integration.mongodb.store.Query . fields ( ) . include ( java.lang.String ) ; return ( java.lang.Integer ) this . org.springframework.integration.mongodb.store.MongoTemplate . findAndModify ( org.springframework.integration.mongodb.store.Query , new Update ( ) . inc ( java.lang.String , NUMBER ) , FindAndModifyOptions . options ( ) . returnNew ( true ) . upsert ( true ) , java.util.Map .class , this . java.lang.String ) . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static void void ( MessageHeaders org.springframework.integration.mongodb.store.MessageHeaders , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) new DirectFieldAccessor ( org.springframework.integration.mongodb.store.MessageHeaders ) . getPropertyValue ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . ID , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . ID ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . TIMESTAMP , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . TIMESTAMP ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( Bson org.springframework.integration.mongodb.store.Bson ) { if ( org.springframework.integration.mongodb.store.Bson instanceof Document ) { return ( Document ) org.springframework.integration.mongodb.store.Bson ; } if ( org.springframework.integration.mongodb.store.Bson instanceof DBObject ) { return ( ( DBObject ) org.springframework.integration.mongodb.store.Bson ) . toMap ( ) ; } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.integration.mongodb.store.Bson . getClass ( ) ) ) ; }  <METHOD_END>
<METHOD_START> void ( MongoDbFactory org.springframework.integration.mongodb.store.MongoDbFactory , MappingContext < ? extends MongoPersistentEntity < ? > , MongoPersistentProperty > org.springframework.integration.mongodb.store.MappingContext<? extends org.springframework.integration.mongodb.store.MongoPersistentEntity<?>,org.springframework.integration.mongodb.store.MongoPersistentProperty> ) { super( new DefaultDbRefResolver ( org.springframework.integration.mongodb.store.MongoDbFactory ) , org.springframework.integration.mongodb.store.MappingContext<,org.springframework.integration.mongodb.store.MongoPersistentProperty> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; java.util.List<java.lang.Object> . boolean ( new org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageHistoryToDocumentConverter ( ) ) ; java.util.List<java.lang.Object> . boolean ( new org.springframework.integration.mongodb.store.MongoDbMessageStore.DocumentToGenericMessageConverter ( ) ) ; java.util.List<java.lang.Object> . boolean ( new org.springframework.integration.mongodb.store.MongoDbMessageStore.DocumentToMutableMessageConverter ( ) ) ; java.util.List<java.lang.Object> . boolean ( new org.springframework.integration.mongodb.store.MongoDbMessageStore.DocumentToErrorMessageConverter ( ) ) ; java.util.List<java.lang.Object> . boolean ( new org.springframework.integration.mongodb.store.MongoDbMessageStore.DocumentToAdviceMessageConverter ( ) ) ; java.util.List<java.lang.Object> . boolean ( new org.springframework.integration.mongodb.store.MongoDbMessageStore.ThrowableToBytesConverter ( ) ) ; this . setCustomConversions ( new CustomConversions ( java.util.List<java.lang.Object> ) ) ; super. afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Bson org.springframework.integration.mongodb.store.Bson ) { Assert . isInstanceOf ( org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper .class , java.lang.Object ) ; java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.integration.mongodb.store.Bson ) . put ( java.lang.String , java.lang.System . long ( ) ) ; super. write ( java.lang.Object , org.springframework.integration.mongodb.store.Bson ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING } ) public < S > S S ( java.lang.Class<S> < S > java.lang.Class<S> , Bson org.springframework.integration.mongodb.store.Bson ) { if ( ! org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper .class . boolean ( java.lang.Class<S> ) ) { return super. read ( java.lang.Class<S> , org.springframework.integration.mongodb.store.Bson ) ; } if ( org.springframework.integration.mongodb.store.Bson != null ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.integration.mongodb.store.Bson ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = null ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; if ( java.lang.Object == null ) { java.lang.Object = GenericMessage .class . java.lang.String ( ) ; } try { org.springframework.integration.mongodb.store.Message<?> = ( Message < ? > ) java.lang.Object ( ClassUtils . forName ( java.lang.Object . java.lang.String ( ) , org.springframework.integration.mongodb.store.MongoDbMessageStore .this . java.lang.ClassLoader ) , org.springframework.integration.mongodb.store.Bson ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Object , java.lang.ClassNotFoundException ) ; } java.lang.Long java.lang.Long = ( java.lang.Long ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; java.lang.Long java.lang.Long = ( java.lang.Long ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; java.lang.Integer java.lang.Integer = ( java.lang.Integer ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; java.lang.Boolean java.lang.Boolean = ( java.lang.Boolean ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper = new org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper ( org.springframework.integration.mongodb.store.Message<> ) ; if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) { org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . void ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; } if ( java.lang.Long != null ) { org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . void ( java.lang.Long ) ; } if ( java.lang.Long != null ) { org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . void ( java.lang.Long ) ; } if ( java.lang.Integer != null ) { org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . void ( java.lang.Integer ) ; } if ( java.lang.Boolean != null ) { org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper . void ( java.lang.Boolean ) ; } return ( S ) org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageWrapper ; } return null ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof Bson ) { Bson org.springframework.integration.mongodb.store.Bson = ( Bson ) java.lang.Object ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.integration.mongodb.store.Bson ) ; try { java.lang.Class<?> < ? > java.lang.Class<?> = null ; if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) { java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.lang.Class<?> = ClassUtils . forName ( java.lang.Object . java.lang.String ( ) , org.springframework.integration.mongodb.store.MongoDbMessageStore .this . java.lang.ClassLoader ) ; } else if ( org.springframework.integration.mongodb.store.Bson instanceof BasicDBList ) { java.lang.Class<?> = java.util.List .class ; } else { throw new java.lang.IllegalStateException ( STRING + org.springframework.integration.mongodb.store.Bson . getClass ( ) ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , super. read ( java.lang.Class<> , org.springframework.integration.mongodb.store.Bson ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . warn ( STRING + java.lang.String + STRING , java.lang.Exception ) ; } } else { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Bson org.springframework.integration.mongodb.store.Bson ) { java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.integration.mongodb.store.Bson ) . get ( STRING ) ; if ( java.lang.Object instanceof Bson ) { Bson org.springframework.integration.mongodb.store.Bson = ( Bson ) java.lang.Object ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.integration.mongodb.store.Bson ) . get ( STRING ) ; try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.Object . java.lang.String ( ) , org.springframework.integration.mongodb.store.MongoDbMessageStore .this . java.lang.ClassLoader ) ; java.lang.Object = java.lang.Object ( java.lang.Class<> , org.springframework.integration.mongodb.store.Bson ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Object , java.lang.Exception ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.store.Document org.springframework.integration.mongodb.store.Document ( MessageHistory org.springframework.integration.mongodb.store.MessageHistory ) { BasicDBList org.springframework.integration.mongodb.store.BasicDBList = new BasicDBList ( ) ; for ( java.util.Properties java.util.Properties : org.springframework.integration.mongodb.store.MessageHistory ) { Document org.springframework.integration.mongodb.store.Document = new Document ( ) . append ( MessageHistory . NAME_PROPERTY , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) . append ( MessageHistory . TYPE_PROPERTY , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) . append ( MessageHistory . TIMESTAMP_PROPERTY , java.util.Properties . java.lang.String ( MessageHistory . TIMESTAMP_PROPERTY ) ) ; org.springframework.integration.mongodb.store.BasicDBList . add ( org.springframework.integration.mongodb.store.Document ) ; } return new Document ( STRING , org.springframework.integration.mongodb.store.BasicDBList ) . append ( STRING , MessageHistory .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.store.GenericMessage<?> < ? > org.springframework.integration.mongodb.store.GenericMessage<?> ( Document org.springframework.integration.mongodb.store.Document ) { @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.mongodb.store.MongoDbMessageStore .this . org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageReadingMongoConverter . java.util.Map<java.lang.String,java.lang.Object> ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.mongodb.store.Document . get ( STRING ) ) ; GenericMessage < ? > org.springframework.integration.mongodb.store.GenericMessage<?> = new GenericMessage <> ( org.springframework.integration.mongodb.store.MongoDbMessageStore .this . org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageReadingMongoConverter . java.lang.Object ( org.springframework.integration.mongodb.store.Document ) , java.util.Map<java.lang.String,java.lang.Object> ) ; void ( org.springframework.integration.mongodb.store.GenericMessage<> . getHeaders ( ) , java.util.Map<java.lang.String,java.lang.Object> ) ; return org.springframework.integration.mongodb.store.GenericMessage<> ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.store.MutableMessage<?> < ? > org.springframework.integration.mongodb.store.MutableMessage<?> ( Document org.springframework.integration.mongodb.store.Document ) { @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.mongodb.store.MongoDbMessageStore .this . org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageReadingMongoConverter . java.util.Map<java.lang.String,java.lang.Object> ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.mongodb.store.Document . get ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.mongodb.store.MongoDbMessageStore .this . org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageReadingMongoConverter . java.lang.Object ( org.springframework.integration.mongodb.store.Document ) ; return ( MutableMessage < ? > ) MutableMessageBuilder . withPayload ( java.lang.Object ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.store.AdviceMessage<?> < ? > org.springframework.integration.mongodb.store.AdviceMessage<?> ( Document org.springframework.integration.mongodb.store.Document ) { @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.mongodb.store.MongoDbMessageStore .this . org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageReadingMongoConverter . java.util.Map<java.lang.String,java.lang.Object> ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.mongodb.store.Document . get ( STRING ) ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = null ; if ( org.springframework.integration.mongodb.store.Document . get ( STRING ) != null ) { Bson org.springframework.integration.mongodb.store.Bson = ( Bson ) org.springframework.integration.mongodb.store.Document . get ( STRING ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.integration.mongodb.store.Bson ) . get ( STRING ) ; try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.Object . java.lang.String ( ) , org.springframework.integration.mongodb.store.MongoDbMessageStore .this . java.lang.ClassLoader ) ; org.springframework.integration.mongodb.store.Message<?> = ( Message < ? > ) org.springframework.integration.mongodb.store.MongoDbMessageStore .this . org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageReadingMongoConverter . java.lang.Object ( java.lang.Class<> , org.springframework.integration.mongodb.store.Bson ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Object , java.lang.Exception ) ; } } AdviceMessage < ? > org.springframework.integration.mongodb.store.AdviceMessage<?> = new AdviceMessage <> ( org.springframework.integration.mongodb.store.MongoDbMessageStore .this . org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageReadingMongoConverter . java.lang.Object ( org.springframework.integration.mongodb.store.Document ) , java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.mongodb.store.Message<> ) ; void ( org.springframework.integration.mongodb.store.AdviceMessage<> . getHeaders ( ) , java.util.Map<java.lang.String,java.lang.Object> ) ; return org.springframework.integration.mongodb.store.AdviceMessage<> ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.store.ErrorMessage org.springframework.integration.mongodb.store.ErrorMessage ( Document org.springframework.integration.mongodb.store.Document ) { @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.mongodb.store.MongoDbMessageStore .this . org.springframework.integration.mongodb.store.MongoDbMessageStore.MessageReadingMongoConverter . java.util.Map<java.lang.String,java.lang.Object> ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.mongodb.store.Document . get ( STRING ) ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.mongodb.store.Converter<byte[],java.lang.Object> . convert ( ( ( Binary ) org.springframework.integration.mongodb.store.Document . get ( STRING ) ) . getData ( ) ) ; ErrorMessage org.springframework.integration.mongodb.store.ErrorMessage = new ErrorMessage ( ( java.lang.Throwable ) java.lang.Object , java.util.Map<java.lang.String,java.lang.Object> ) ; void ( org.springframework.integration.mongodb.store.ErrorMessage . getHeaders ( ) , java.util.Map<java.lang.String,java.lang.Object> ) ; return org.springframework.integration.mongodb.store.ErrorMessage ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( java.lang.Throwable java.lang.Throwable ) { return this . org.springframework.integration.mongodb.store.Converter<java.lang.Object,byte[]> . convert ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> void ( Message < ? > org.springframework.integration.mongodb.store.Message<?> ) { Assert . notNull ( org.springframework.integration.mongodb.store.Message<> , STRING ) ; this . org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.Message<> ; this . java.lang.String = org.springframework.integration.mongodb.store.Message<> . getClass ( ) . getName ( ) ; this . java.lang.Object = org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ; this . java.util.Map<java.lang.String,?> = org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) ; if ( org.springframework.integration.mongodb.store.Message<> instanceof AdviceMessage ) { this . org.springframework.integration.mongodb.store.Message<?> = ( ( AdviceMessage < ? > ) org.springframework.integration.mongodb.store.Message<> ) . getInputMessage ( ) ; } else { this . org.springframework.integration.mongodb.store.Message<?> = null ; } }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.mongodb.store.Message<?> < ? > org.springframework.integration.mongodb.store.Message<?> ( ) { return this . org.springframework.integration.mongodb.store.Message<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
