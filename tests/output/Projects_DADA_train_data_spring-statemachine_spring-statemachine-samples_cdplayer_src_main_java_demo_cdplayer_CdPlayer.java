<METHOD_START> public void void ( Cd demo.cdplayer.Cd ) { demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . sendEvent ( MessageBuilder . withPayload ( Events . LOAD ) . setHeader ( Variables . CD . toString ( ) , demo.cdplayer.Cd ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . sendEvent ( Events . PLAY ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . sendEvent ( Events . STOP ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . sendEvent ( Events . PAUSE ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . sendEvent ( Events . EJECT ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . sendEvent ( MessageBuilder . withPayload ( Events . FORWARD ) . setHeader ( Headers . TRACKSHIFT . toString ( ) , NUMBER ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . sendEvent ( MessageBuilder . withPayload ( Events . BACK ) . setHeader ( Headers . TRACKSHIFT . toString ( ) , - NUMBER ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String + STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ OnTransition ( target = STRING ) public void void ( ExtendedState demo.cdplayer.ExtendedState ) { java.lang.Object java.lang.Object = demo.cdplayer.ExtendedState . getVariables ( ) . get ( Variables . CD ) ; if ( java.lang.Object != null ) { java.lang.String = ( ( Cd ) java.lang.Object ) . getName ( ) ; } }  <METHOD_END>
<METHOD_START> @ StatesOnTransition ( target = States . PLAYING ) public void void ( ExtendedState demo.cdplayer.ExtendedState ) { java.lang.Object java.lang.Object = demo.cdplayer.ExtendedState . getVariables ( ) . get ( Variables . ELAPSEDTIME ) ; java.lang.Object java.lang.Object = demo.cdplayer.ExtendedState . getVariables ( ) . get ( Variables . CD ) ; java.lang.Object java.lang.Object = demo.cdplayer.ExtendedState . getVariables ( ) . get ( Variables . TRACK ) ; if ( java.lang.Object instanceof java.lang.Long && java.lang.Object instanceof java.lang.Integer && java.lang.Object instanceof Cd ) { java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING ) ; java.lang.String = ( ( Cd ) java.lang.Object ) . getTracks ( ) [ ( ( java.lang.Integer ) java.lang.Object ) ] + STRING + java.text.SimpleDateFormat . java.lang.String ( new java.util.Date ( ( java.lang.Long ) java.lang.Object ) ) ; } }  <METHOD_END>
<METHOD_START> @ StatesOnTransition ( target = States . OPEN ) public void void ( ExtendedState demo.cdplayer.ExtendedState ) { java.lang.String = STRING ; }  <METHOD_END>
<METHOD_START> @ StatesOnTransition ( target = { States . CLOSED , States . IDLE } ) public void void ( ExtendedState demo.cdplayer.ExtendedState ) { java.lang.Object java.lang.Object = demo.cdplayer.ExtendedState . getVariables ( ) . get ( Variables . CD ) ; if ( java.lang.Object != null ) { java.lang.String = ( ( Cd ) java.lang.Object ) . getName ( ) ; } else { java.lang.String = STRING ; } java.lang.String = STRING ; }  <METHOD_END>
