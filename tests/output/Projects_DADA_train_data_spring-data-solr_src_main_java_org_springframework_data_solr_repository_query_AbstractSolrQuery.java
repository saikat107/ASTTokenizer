<METHOD_START> protected void ( SolrOperations org.springframework.data.solr.repository.query.SolrOperations , SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod ) { Assert . notNull ( org.springframework.data.solr.repository.query.SolrOperations , STRING ) ; Assert . notNull ( org.springframework.data.solr.repository.query.SolrQueryMethod , STRING ) ; this . org.springframework.data.solr.repository.query.SolrOperations = org.springframework.data.solr.repository.query.SolrOperations ; this . org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object [] java.lang.Object[] ) { SolrParameterAccessor org.springframework.data.solr.repository.query.SolrParameterAccessor = new SolrParametersParameterAccessor ( org.springframework.data.solr.repository.query.SolrQueryMethod , java.lang.Object[] ) ; Query org.springframework.data.solr.repository.query.Query = org.springframework.data.solr.repository.query.Query ( org.springframework.data.solr.repository.query.SolrParameterAccessor ) ; void ( org.springframework.data.solr.repository.query.Query , org.springframework.data.solr.repository.query.SolrParameterAccessor ) ; void ( org.springframework.data.solr.repository.query.Query ) ; void ( org.springframework.data.solr.repository.query.Query ) ; void ( org.springframework.data.solr.repository.query.Query ) ; void ( org.springframework.data.solr.repository.query.Query ) ; void ( org.springframework.data.solr.repository.query.Query ) ; if ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasStatsDefinition ( ) ) { org.springframework.data.solr.repository.query.Query . setStatsOptions ( org.springframework.data.solr.repository.query.StatsOptions ( org.springframework.data.solr.repository.query.SolrQueryMethod , org.springframework.data.solr.repository.query.SolrParameterAccessor ) ) ; } if ( boolean ( ) && boolean ( ) ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } if ( boolean ( ) ) { return new org.springframework.data.solr.repository.query.AbstractSolrQuery.CountExecution ( ) . java.lang.Object ( org.springframework.data.solr.repository.query.Query ) ; } if ( boolean ( ) ) { return new org.springframework.data.solr.repository.query.AbstractSolrQuery.DeleteExecution ( ) . java.lang.Object ( org.springframework.data.solr.repository.query.Query ) ; } if ( org.springframework.data.solr.repository.query.SolrQueryMethod . isPageQuery ( ) || org.springframework.data.solr.repository.query.SolrQueryMethod . isSliceQuery ( ) ) { if ( org.springframework.data.solr.repository.query.SolrQueryMethod . isFacetQuery ( ) && org.springframework.data.solr.repository.query.SolrQueryMethod . isHighlightQuery ( ) ) { FacetAndHighlightQuery org.springframework.data.solr.repository.query.FacetAndHighlightQuery = SimpleFacetAndHighlightQuery . fromQuery ( org.springframework.data.solr.repository.query.Query , new SimpleFacetAndHighlightQuery ( ) ) ; org.springframework.data.solr.repository.query.FacetAndHighlightQuery . setFacetOptions ( org.springframework.data.solr.repository.query.FacetOptions ( org.springframework.data.solr.repository.query.SolrQueryMethod , org.springframework.data.solr.repository.query.SolrParameterAccessor ) ) ; org.springframework.data.solr.repository.query.FacetAndHighlightQuery . setHighlightOptions ( org.springframework.data.solr.repository.query.HighlightOptions ( org.springframework.data.solr.repository.query.SolrQueryMethod , org.springframework.data.solr.repository.query.SolrParameterAccessor ) ) ; return new org.springframework.data.solr.repository.query.AbstractSolrQuery.FacetAndHighlightPageExecution ( org.springframework.data.solr.repository.query.SolrParameterAccessor . getPageable ( ) ) . java.lang.Object ( org.springframework.data.solr.repository.query.FacetAndHighlightQuery ) ; } if ( org.springframework.data.solr.repository.query.SolrQueryMethod . isFacetQuery ( ) ) { FacetQuery org.springframework.data.solr.repository.query.FacetQuery = SimpleFacetQuery . fromQuery ( org.springframework.data.solr.repository.query.Query , new SimpleFacetQuery ( ) ) ; org.springframework.data.solr.repository.query.FacetQuery . setFacetOptions ( org.springframework.data.solr.repository.query.FacetOptions ( org.springframework.data.solr.repository.query.SolrQueryMethod , org.springframework.data.solr.repository.query.SolrParameterAccessor ) ) ; return new org.springframework.data.solr.repository.query.AbstractSolrQuery.FacetPageExecution ( org.springframework.data.solr.repository.query.SolrParameterAccessor . getPageable ( ) ) . java.lang.Object ( org.springframework.data.solr.repository.query.FacetQuery ) ; } if ( org.springframework.data.solr.repository.query.SolrQueryMethod . isHighlightQuery ( ) ) { HighlightQuery org.springframework.data.solr.repository.query.HighlightQuery = SimpleHighlightQuery . fromQuery ( org.springframework.data.solr.repository.query.Query , new SimpleHighlightQuery ( ) ) ; org.springframework.data.solr.repository.query.HighlightQuery . setHighlightOptions ( org.springframework.data.solr.repository.query.HighlightOptions ( org.springframework.data.solr.repository.query.SolrQueryMethod , org.springframework.data.solr.repository.query.SolrParameterAccessor ) ) ; return new org.springframework.data.solr.repository.query.AbstractSolrQuery.HighlightPageExecution ( org.springframework.data.solr.repository.query.SolrParameterAccessor . getPageable ( ) ) . java.lang.Object ( org.springframework.data.solr.repository.query.HighlightQuery ) ; } return new org.springframework.data.solr.repository.query.AbstractSolrQuery.PagedExecution ( org.springframework.data.solr.repository.query.SolrParameterAccessor . getPageable ( ) ) . java.lang.Object ( org.springframework.data.solr.repository.query.Query ) ; } else if ( org.springframework.data.solr.repository.query.SolrQueryMethod . isCollectionQuery ( ) ) { return new org.springframework.data.solr.repository.query.AbstractSolrQuery.CollectionExecution ( org.springframework.data.solr.repository.query.SolrParameterAccessor . getPageable ( ) ) . java.lang.Object ( org.springframework.data.solr.repository.query.Query ) ; } return new org.springframework.data.solr.repository.query.AbstractSolrQuery.SingleEntityExecution ( ) . java.lang.Object ( org.springframework.data.solr.repository.query.Query ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.repository.query.SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod ( ) { return this . org.springframework.data.solr.repository.query.SolrQueryMethod ; }  <METHOD_END>
<METHOD_START> private void void ( Query org.springframework.data.solr.repository.query.Query ) { Query . Query Query.Operator = org.springframework.data.solr.repository.query.SolrQueryMethod . getDefaultOperator ( ) ; if ( Query.Operator != null && ! Query . Operator . NONE . equals ( Query.Operator ) ) { org.springframework.data.solr.repository.query.Query . setDefaultOperator ( Query.Operator ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Query org.springframework.data.solr.repository.query.Query ) { java.lang.Integer java.lang.Integer = org.springframework.data.solr.repository.query.SolrQueryMethod . getTimeAllowed ( ) ; if ( java.lang.Integer != null ) { org.springframework.data.solr.repository.query.Query . setTimeAllowed ( java.lang.Integer ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Query org.springframework.data.solr.repository.query.Query ) { java.lang.String java.lang.String = org.springframework.data.solr.repository.query.SolrQueryMethod . getDefType ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.solr.repository.query.Query . setDefType ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Query org.springframework.data.solr.repository.query.Query ) { java.lang.String java.lang.String = org.springframework.data.solr.repository.query.SolrQueryMethod . getRequestHandler ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.solr.repository.query.Query . setRequestHandler ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Query org.springframework.data.solr.repository.query.Query ) { if ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasSpellcheck ( ) ) { org.springframework.data.solr.repository.query.Query . setSpellcheckOptions ( org.springframework.data.solr.repository.query.SolrQueryMethod . getSpellcheckOptions ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Query org.springframework.data.solr.repository.query.Query , SolrParameterAccessor org.springframework.data.solr.repository.query.SolrParameterAccessor ) { if ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) { for ( java.lang.String java.lang.String : org.springframework.data.solr.repository.query.SolrQueryMethod . getFilterQueries ( ) ) { org.springframework.data.solr.repository.query.Query . addFilterQuery ( org.springframework.data.solr.repository.query.SimpleQuery ( java.lang.String , org.springframework.data.solr.repository.query.SolrParameterAccessor ) ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( Query org.springframework.data.solr.repository.query.Query ) { if ( org.springframework.data.solr.repository.query.Query != null && this . org.springframework.data.solr.repository.query.SolrQueryMethod ( ) . hasProjectionFields ( ) ) { for ( java.lang.String java.lang.String : this . org.springframework.data.solr.repository.query.SolrQueryMethod ( ) . getProjectionFields ( ) ) { org.springframework.data.solr.repository.query.Query . addProjectionOnField ( new SimpleField ( java.lang.String ) ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.data.solr.repository.query.SimpleQuery org.springframework.data.solr.repository.query.SimpleQuery ( java.lang.String java.lang.String , SolrParameterAccessor org.springframework.data.solr.repository.query.SolrParameterAccessor ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String , org.springframework.data.solr.repository.query.SolrParameterAccessor ) ; return new SimpleQuery ( new SimpleStringCriteria ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , SolrParameterAccessor org.springframework.data.solr.repository.query.SolrParameterAccessor ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return java.lang.String ; } java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; java.lang.String java.lang.String = java.lang.String ; while ( java.util.regex.Matcher . boolean ( ) ) { java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( ) ; int int = java.lang.Integer . int ( java.util.regex.Matcher . java.lang.String ( NUMBER ) ) ; java.lang.String = java.lang.String . java.lang.String ( java.lang.String , java.lang.String ( org.springframework.data.solr.repository.query.SolrParameterAccessor , int ) ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.String java.lang.String ( SolrParameterAccessor org.springframework.data.solr.repository.query.SolrParameterAccessor , int int ) { java.lang.Object java.lang.Object = org.springframework.data.solr.repository.query.SolrParameterAccessor . getBindableValue ( int ) ; if ( java.lang.Object == null ) { return STRING ; } if ( org.springframework.data.solr.repository.query.GenericConversionService . canConvert ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String .class ) ) { return org.springframework.data.solr.repository.query.GenericConversionService . convert ( java.lang.Object , java.lang.String .class ) ; } if ( java.lang.Object instanceof java.util.Collection ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.Object java.lang.Object : ( java.util.Collection ) java.lang.Object ) { if ( org.springframework.data.solr.repository.query.GenericConversionService . canConvert ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String .class ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.data.solr.repository.query.GenericConversionService . convert ( java.lang.Object , java.lang.String .class ) ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Object . java.lang.String ( ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } return java.lang.StringBuilder . java.lang.String ( ) . java.lang.String ( ) ; } return java.lang.Object . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.repository.query.StatsOptions org.springframework.data.solr.repository.query.StatsOptions ( SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod , SolrParameterAccessor org.springframework.data.solr.repository.query.SolrParameterAccessor ) { if ( ! org.springframework.data.solr.repository.query.SolrQueryMethod . hasStatsDefinition ( ) ) { return null ; } StatsOptions org.springframework.data.solr.repository.query.StatsOptions = new StatsOptions ( ) ; for ( java.lang.String java.lang.String : org.springframework.data.solr.repository.query.SolrQueryMethod . getFieldStats ( ) ) { org.springframework.data.solr.repository.query.StatsOptions . addField ( java.lang.String ) ; } for ( java.lang.String java.lang.String : org.springframework.data.solr.repository.query.SolrQueryMethod . getStatsFacets ( ) ) { org.springframework.data.solr.repository.query.StatsOptions . addFacet ( java.lang.String ) ; } org.springframework.data.solr.repository.query.StatsOptions . setCalcDistinct ( org.springframework.data.solr.repository.query.SolrQueryMethod . isFieldStatsCountDistinctEnable ( ) ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = org.springframework.data.solr.repository.query.SolrQueryMethod . getStatsSelectiveCountDistinctFields ( ) ; for ( java.util.Map.Entry<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map.Entry<java.lang.String,java.lang.String[]> : org.springframework.data.solr.repository.query.SolrQueryMethod . getStatsSelectiveFacets ( ) . entrySet ( ) ) { FieldStatsOptions org.springframework.data.solr.repository.query.FieldStatsOptions = org.springframework.data.solr.repository.query.StatsOptions . addField ( java.util.Map.Entry<java.lang.String,java.lang.String[]> . java.lang.String ( ) ) ; for ( java.lang.String java.lang.String : java.util.Map.Entry<java.lang.String,java.lang.String[]> . java.lang.String[] ( ) ) { org.springframework.data.solr.repository.query.FieldStatsOptions . addSelectiveFacet ( java.lang.String ) ; } org.springframework.data.solr.repository.query.FieldStatsOptions . setSelectiveCalcDistinct ( java.util.Collection<java.lang.String> . boolean ( java.util.Map.Entry<java.lang.String,java.lang.String[]> . java.lang.String ( ) ) ) ; } return org.springframework.data.solr.repository.query.StatsOptions ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.repository.query.FacetOptions org.springframework.data.solr.repository.query.FacetOptions ( SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod , SolrParameterAccessor org.springframework.data.solr.repository.query.SolrParameterAccessor ) { FacetOptions org.springframework.data.solr.repository.query.FacetOptions = new FacetOptions ( ) ; if ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetFields ( ) ) { org.springframework.data.solr.repository.query.FacetOptions . addFacetOnFlieldnames ( org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetFields ( ) ) ; } if ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetQueries ( ) ) { for ( java.lang.String java.lang.String : org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetQueries ( ) ) { org.springframework.data.solr.repository.query.FacetOptions . addFacetQuery ( org.springframework.data.solr.repository.query.SimpleQuery ( java.lang.String , org.springframework.data.solr.repository.query.SolrParameterAccessor ) ) ; } } if ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasPivotFields ( ) ) { for ( java.lang.String [] java.lang.String[] : org.springframework.data.solr.repository.query.SolrQueryMethod . getPivotFields ( ) ) { org.springframework.data.solr.repository.query.FacetOptions . addFacetOnPivot ( java.lang.String[] ) ; } } org.springframework.data.solr.repository.query.FacetOptions . setFacetLimit ( org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetLimit ( ) ) ; org.springframework.data.solr.repository.query.FacetOptions . setFacetMinCount ( org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetMinCount ( ) ) ; org.springframework.data.solr.repository.query.FacetOptions . setFacetPrefix ( java.lang.String ( org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetPrefix ( ) , org.springframework.data.solr.repository.query.SolrParameterAccessor ) ) ; return org.springframework.data.solr.repository.query.FacetOptions ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.repository.query.HighlightOptions org.springframework.data.solr.repository.query.HighlightOptions ( SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod , SolrParameterAccessor org.springframework.data.solr.repository.query.SolrParameterAccessor ) { HighlightOptions org.springframework.data.solr.repository.query.HighlightOptions = new HighlightOptions ( ) ; if ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasHighlightFields ( ) ) { org.springframework.data.solr.repository.query.HighlightOptions . addFields ( org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightFieldNames ( ) ) ; } java.lang.Integer java.lang.Integer = org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightFragsize ( ) ; if ( java.lang.Integer != null ) { org.springframework.data.solr.repository.query.HighlightOptions . setFragsize ( java.lang.Integer ) ; } java.lang.Integer java.lang.Integer = org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlighSnipplets ( ) ; if ( java.lang.Integer != null ) { org.springframework.data.solr.repository.query.HighlightOptions . setNrSnipplets ( java.lang.Integer ) ; } java.lang.String java.lang.String = org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightQuery ( ) ; if ( java.lang.String != null ) { org.springframework.data.solr.repository.query.HighlightOptions . setQuery ( org.springframework.data.solr.repository.query.SimpleQuery ( java.lang.String , org.springframework.data.solr.repository.query.SolrParameterAccessor ) ) ; } void ( org.springframework.data.solr.repository.query.HighlightOptions , org.springframework.data.solr.repository.query.SolrQueryMethod ) ; return org.springframework.data.solr.repository.query.HighlightOptions ; }  <METHOD_END>
<METHOD_START> private void void ( HighlightOptions org.springframework.data.solr.repository.query.HighlightOptions , SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod ) { java.lang.String java.lang.String = org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightFormatter ( ) ; if ( java.lang.String != null ) { org.springframework.data.solr.repository.query.HighlightOptions . setFormatter ( java.lang.String ) ; } java.lang.String java.lang.String = org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightPrefix ( ) ; if ( java.lang.String != null ) { if ( boolean ( java.lang.String ) ) { org.springframework.data.solr.repository.query.HighlightOptions . setSimplePrefix ( java.lang.String ) ; } else { org.springframework.data.solr.repository.query.HighlightOptions . addHighlightParameter ( new HighlightParameter ( HighlightParams . TAG_PRE , java.lang.String ) ) ; } } java.lang.String java.lang.String = org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightPostfix ( ) ; if ( java.lang.String != null ) { if ( boolean ( java.lang.String ) ) { org.springframework.data.solr.repository.query.HighlightOptions . setSimplePostfix ( java.lang.String ) ; } else { org.springframework.data.solr.repository.query.HighlightOptions . addHighlightParameter ( new HighlightParameter ( HighlightParams . TAG_POST , java.lang.String ) ) ; } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { return java.lang.String == null || HighlightParams . SIMPLE . equalsIgnoreCase ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.data.solr.repository.query.Query org.springframework.data.solr.repository.query.Query ( SolrParameterAccessor org.springframework.data.solr.repository.query.SolrParameterAccessor );  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.data.solr.repository.query.SolrQueryMethod . isDeleteQuery ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.solr.repository.query.Pageable org.springframework.data.solr.repository.query.Pageable ( final Pageable org.springframework.data.solr.repository.query.Pageable , final int int ) { if ( org.springframework.data.solr.repository.query.Pageable == null ) { return new SolrPageRequest ( NUMBER , int ) ; } return new PageRequest ( org.springframework.data.solr.repository.query.Pageable . getPageNumber ( ) , org.springframework.data.solr.repository.query.Pageable . getPageSize ( ) , org.springframework.data.solr.repository.query.Pageable . getSort ( ) ) { private static final long long = NUMBER ; @ java.lang.Override public long long ( ) { return org.springframework.data.solr.repository.query.Pageable . getOffset ( ) ; } @ java.lang.Override public int int ( ) { return int ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return org.springframework.data.solr.repository.query.Pageable . getOffset ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( Query org.springframework.data.solr.repository.query.Query );  <METHOD_END>
<METHOD_START> protected org.springframework.data.solr.repository.query.Page<?> < ? > org.springframework.data.solr.repository.query.Page<?> ( Query org.springframework.data.solr.repository.query.Query ) { EntityMetadata < ? > org.springframework.data.solr.repository.query.EntityMetadata<?> = org.springframework.data.solr.repository.query.SolrQueryMethod . getEntityInformation ( ) ; return org.springframework.data.solr.repository.query.SolrOperations . queryForPage ( org.springframework.data.solr.repository.query.Query , org.springframework.data.solr.repository.query.EntityMetadata<> . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( Pageable org.springframework.data.solr.repository.query.Pageable ) { this . org.springframework.data.solr.repository.query.Pageable = org.springframework.data.solr.repository.query.Pageable ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.solr.repository.query.Query ) { if ( ! boolean ( ) ) { org.springframework.data.solr.repository.query.Query . setPageRequest ( org.springframework.data.solr.repository.query.Pageable . isPaged ( ) ? org.springframework.data.solr.repository.query.Pageable : new SolrPageRequest ( NUMBER , ( int ) long ( org.springframework.data.solr.repository.query.Query ) ) ) ; return org.springframework.data.solr.repository.query.Page<?> ( org.springframework.data.solr.repository.query.Query ) . getContent ( ) ; } if ( org.springframework.data.solr.repository.query.Pageable . isUnpaged ( ) && boolean ( ) ) { return org.springframework.data.solr.repository.query.Page<?> ( org.springframework.data.solr.repository.query.Query . setPageRequest ( new SolrPageRequest ( NUMBER , int ( ) ) ) ) . getContent ( ) ; } if ( int ( ) > NUMBER ) { if ( org.springframework.data.solr.repository.query.Pageable . getOffset ( ) > int ( ) ) { return new PageImpl ( java . util . java.util.Collections . java.util.List<java.lang.Object> ( ) , org.springframework.data.solr.repository.query.Pageable , int ( ) ) ; } if ( org.springframework.data.solr.repository.query.Pageable . getOffset ( ) + org.springframework.data.solr.repository.query.Pageable . getPageSize ( ) > int ( ) ) { org.springframework.data.solr.repository.query.Query . setPageRequest ( org.springframework.data.solr.repository.query.Pageable ( org.springframework.data.solr.repository.query.Pageable , int ( ) - ( int ) org.springframework.data.solr.repository.query.Pageable . getOffset ( ) ) ) ; } } return org.springframework.data.solr.repository.query.Page<?> ( org.springframework.data.solr.repository.query.Query ) . getContent ( ) ; }  <METHOD_END>
<METHOD_START> private long long ( Query org.springframework.data.solr.repository.query.Query ) { return org.springframework.data.solr.repository.query.SolrOperations . count ( org.springframework.data.solr.repository.query.Query ) ; }  <METHOD_END>
<METHOD_START> public void ( Pageable org.springframework.data.solr.repository.query.Pageable ) { Assert . notNull ( org.springframework.data.solr.repository.query.Pageable , STRING ) ; this . org.springframework.data.solr.repository.query.Pageable = org.springframework.data.solr.repository.query.Pageable ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.solr.repository.query.Query ) { Pageable org.springframework.data.solr.repository.query.Pageable = org.springframework.data.solr.repository.query.Pageable ( ) ; if ( boolean ( ) ) { int int = int ( ) ; if ( org.springframework.data.solr.repository.query.Pageable == null ) { org.springframework.data.solr.repository.query.Pageable = new SolrPageRequest ( NUMBER , int ) ; } if ( int > NUMBER ) { if ( org.springframework.data.solr.repository.query.Pageable . getOffset ( ) > int ) { return new PageImpl ( java . util . java.util.Collections . java.util.List<java.lang.Object> ( ) , org.springframework.data.solr.repository.query.Pageable , int ) ; } if ( org.springframework.data.solr.repository.query.Pageable . getOffset ( ) + org.springframework.data.solr.repository.query.Pageable . getPageSize ( ) > int ) { org.springframework.data.solr.repository.query.Pageable = org.springframework.data.solr.repository.query.Pageable ( org.springframework.data.solr.repository.query.Pageable , int - ( int ) org.springframework.data.solr.repository.query.Pageable . getOffset ( ) ) ; } } } org.springframework.data.solr.repository.query.Query . setPageRequest ( org.springframework.data.solr.repository.query.Pageable ) ; return org.springframework.data.solr.repository.query.Page<?> ( org.springframework.data.solr.repository.query.Query ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.solr.repository.query.Pageable org.springframework.data.solr.repository.query.Pageable ( ) { return this . org.springframework.data.solr.repository.query.Pageable ; }  <METHOD_END>
<METHOD_START> public void ( Pageable org.springframework.data.solr.repository.query.Pageable ) { super( org.springframework.data.solr.repository.query.Pageable ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.solr.repository.query.FacetPage<?> < ? > org.springframework.data.solr.repository.query.FacetPage<?> ( Query org.springframework.data.solr.repository.query.Query ) { Assert . isInstanceOf ( FacetQuery .class , org.springframework.data.solr.repository.query.Query , STRING ) ; EntityMetadata < ? > org.springframework.data.solr.repository.query.EntityMetadata<?> = org.springframework.data.solr.repository.query.SolrQueryMethod . getEntityInformation ( ) ; return org.springframework.data.solr.repository.query.SolrOperations . queryForFacetPage ( ( FacetQuery ) org.springframework.data.solr.repository.query.Query , org.springframework.data.solr.repository.query.EntityMetadata<> . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( Pageable org.springframework.data.solr.repository.query.Pageable ) { super( org.springframework.data.solr.repository.query.Pageable ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.solr.repository.query.HighlightPage<?> < ? > org.springframework.data.solr.repository.query.HighlightPage<?> ( Query org.springframework.data.solr.repository.query.Query ) { Assert . isInstanceOf ( HighlightQuery .class , org.springframework.data.solr.repository.query.Query , STRING ) ; EntityMetadata < ? > org.springframework.data.solr.repository.query.EntityMetadata<?> = org.springframework.data.solr.repository.query.SolrQueryMethod . getEntityInformation ( ) ; return org.springframework.data.solr.repository.query.SolrOperations . queryForHighlightPage ( ( HighlightQuery ) org.springframework.data.solr.repository.query.Query , org.springframework.data.solr.repository.query.EntityMetadata<> . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( Pageable org.springframework.data.solr.repository.query.Pageable ) { super( org.springframework.data.solr.repository.query.Pageable ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.solr.repository.query.FacetAndHighlightPage<?> < ? > org.springframework.data.solr.repository.query.FacetAndHighlightPage<?> ( Query org.springframework.data.solr.repository.query.Query ) { Assert . isInstanceOf ( FacetAndHighlightQuery .class , org.springframework.data.solr.repository.query.Query , STRING ) ; EntityMetadata < ? > org.springframework.data.solr.repository.query.EntityMetadata<?> = org.springframework.data.solr.repository.query.SolrQueryMethod . getEntityInformation ( ) ; return org.springframework.data.solr.repository.query.SolrOperations . queryForFacetAndHighlightPage ( ( FacetAndHighlightQuery ) org.springframework.data.solr.repository.query.Query , org.springframework.data.solr.repository.query.EntityMetadata<> . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.solr.repository.query.Query ) { EntityMetadata < ? > org.springframework.data.solr.repository.query.EntityMetadata<?> = org.springframework.data.solr.repository.query.SolrQueryMethod . getEntityInformation ( ) ; if ( ! ClassUtils . isAssignable ( java.util.Optional .class , org.springframework.data.solr.repository.query.SolrQueryMethod . getReturnedObjectType ( ) ) ) { return org.springframework.data.solr.repository.query.SolrOperations . queryForObject ( org.springframework.data.solr.repository.query.Query , org.springframework.data.solr.repository.query.EntityMetadata<> . getJavaType ( ) ) . orElse ( null ) ; } return org.springframework.data.solr.repository.query.SolrOperations . queryForObject ( org.springframework.data.solr.repository.query.Query , org.springframework.data.solr.repository.query.EntityMetadata<> . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.solr.repository.query.Query ) { return org.springframework.data.solr.repository.query.SolrOperations . count ( org.springframework.data.solr.repository.query.Query ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.solr.repository.query.Query ) { if ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) { SolrTransactionSynchronizationAdapterBuilder . forOperations ( org.springframework.data.solr.repository.query.SolrOperations ) . withDefaultBehaviour ( ) . register ( ) ; } java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.data.solr.repository.query.Query ) ; org.springframework.data.solr.repository.query.SolrOperations . delete ( org.springframework.data.solr.repository.query.Query ) ; if ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) { org.springframework.data.solr.repository.query.SolrOperations . commit ( ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Query org.springframework.data.solr.repository.query.Query ) { java.lang.Object java.lang.Object = null ; if ( org.springframework.data.solr.repository.query.SolrQueryMethod . isCollectionQuery ( ) ) { Query org.springframework.data.solr.repository.query.Query = SimpleQuery . fromQuery ( org.springframework.data.solr.repository.query.Query ) ; java.lang.Object = org.springframework.data.solr.repository.query.SolrOperations . queryForPage ( org.springframework.data.solr.repository.query.Query . setPageRequest ( new SolrPageRequest ( NUMBER , java.lang.Integer . int ) ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getEntityInformation ( ) . getJavaType ( ) ) . getContent ( ) ; } if ( ClassUtils . isAssignable ( java.lang.Number .class , org.springframework.data.solr.repository.query.SolrQueryMethod . getReturnedObjectType ( ) ) ) { java.lang.Object = org.springframework.data.solr.repository.query.SolrOperations . count ( org.springframework.data.solr.repository.query.Query ) ; } return java.lang.Object ; }  <METHOD_END>
