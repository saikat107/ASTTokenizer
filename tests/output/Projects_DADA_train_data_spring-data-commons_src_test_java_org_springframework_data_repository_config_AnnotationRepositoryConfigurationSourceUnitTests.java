<METHOD_START> @ Before public void void ( ) { AnnotationMetadata org.springframework.data.repository.config.AnnotationMetadata = new StandardAnnotationMetadata ( SampleConfiguration .class , true ) ; org.springframework.data.repository.config.Environment = new StandardEnvironment ( ) ; org.springframework.data.repository.config.ResourceLoader = new DefaultResourceLoader ( ) ; org.springframework.data.repository.config.RepositoryConfigurationSource = new AnnotationRepositoryConfigurationSource ( org.springframework.data.repository.config.AnnotationMetadata , EnableRepositories .class , org.springframework.data.repository.config.ResourceLoader , org.springframework.data.repository.config.Environment ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.repository.config.RepositoryConfigurationSource . getBasePackages ( ) ) . contains ( org.springframework.data.repository.config.AnnotationRepositoryConfigurationSourceUnitTests .class . java.lang.Package ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.data.repository.config.BeanDefinition> < BeanDefinition > java.util.Collection<org.springframework.data.repository.config.BeanDefinition> = org.springframework.data.repository.config.RepositoryConfigurationSource . getCandidates ( new DefaultResourceLoader ( ) ) ; assertThat ( java.util.Collection<org.springframework.data.repository.config.BeanDefinition> ) . hasSize ( NUMBER ) ; BeanDefinition org.springframework.data.repository.config.BeanDefinition = java.util.Collection<org.springframework.data.repository.config.BeanDefinition> . iterator ( ) . next ( ) ; assertThat ( org.springframework.data.repository.config.BeanDefinition . getBeanClassName ( ) ) . isEqualTo ( MyRepository .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationRepositoryConfigurationSource org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource = org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource ( org.springframework.data.repository.config.AnnotationRepositoryConfigurationSourceUnitTests.DefaultConfiguration .class ) ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource . getBasePackages ( ) ; assertThat ( java.lang.Iterable<java.lang.String> ) . contains ( org.springframework.data.repository.config.AnnotationRepositoryConfigurationSourceUnitTests.DefaultConfiguration .class . java.lang.Package ( ) . java.lang.String ( ) ) ; assertThat ( org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource . shouldConsiderNestedRepositories ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationRepositoryConfigurationSource org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource = org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource ( org.springframework.data.repository.config.AnnotationRepositoryConfigurationSourceUnitTests.DefaultConfigurationWithBasePackage .class ) ; assertThat ( org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource . getBasePackages ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationRepositoryConfigurationSource org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource = org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource ( org.springframework.data.repository.config.AnnotationRepositoryConfigurationSourceUnitTests.DefaultConfigurationWithNestedRepositories .class ) ; assertThat ( org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource . shouldConsiderNestedRepositories ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryConfigurationSource org.springframework.data.repository.config.RepositoryConfigurationSource = org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource ( org.springframework.data.repository.config.AnnotationRepositoryConfigurationSourceUnitTests.DefaultConfigurationWithBasePackage .class ) ; assertThat ( org.springframework.data.repository.config.RepositoryConfigurationSource . getAttribute ( STRING ) ) . hasValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardAnnotationMetadata org.springframework.data.repository.config.StandardAnnotationMetadata = new StandardAnnotationMetadata ( java.lang.Class<? extends org.springframework.data.repository.config.AnnotationRepositoryConfigurationSourceUnitTests> ( ) . java.lang.ClassLoader ( ) . java.lang.Class<?> ( STRING ) , true ) ; RepositoryConfigurationSource org.springframework.data.repository.config.RepositoryConfigurationSource = new AnnotationRepositoryConfigurationSource ( org.springframework.data.repository.config.StandardAnnotationMetadata , EnableRepositories .class , org.springframework.data.repository.config.ResourceLoader , org.springframework.data.repository.config.Environment ) ; assertThat ( org.springframework.data.repository.config.RepositoryConfigurationSource . getBasePackages ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource ( org.springframework.data.repository.config.AnnotationRepositoryConfigurationSourceUnitTests.ConfigurationWithExplicitFilter .class ) . usesExplicitFilters ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource ( org.springframework.data.repository.config.AnnotationRepositoryConfigurationSourceUnitTests.DefaultConfiguration .class ) . usesExplicitFilters ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationMetadata org.springframework.data.repository.config.AnnotationMetadata = new StandardAnnotationMetadata ( org.springframework.data.repository.config.AnnotationRepositoryConfigurationSourceUnitTests.ConfigWithSampleAnnotation .class , true ) ; RepositoryConfigurationSource org.springframework.data.repository.config.RepositoryConfigurationSource = new AnnotationRepositoryConfigurationSource ( org.springframework.data.repository.config.AnnotationMetadata , org.springframework.data.repository.config.AnnotationRepositoryConfigurationSourceUnitTests.SampleAnnotation .class , org.springframework.data.repository.config.ResourceLoader , org.springframework.data.repository.config.Environment ) ; assertThat ( org.springframework.data.repository.config.RepositoryConfigurationSource . getRepositoryBaseClassName ( ) ) . isNotPresent ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource ( java.lang.Class<?> < ? > java.lang.Class<?> ) { AnnotationMetadata org.springframework.data.repository.config.AnnotationMetadata = new StandardAnnotationMetadata ( java.lang.Class<> , true ) ; return new AnnotationRepositoryConfigurationSource ( org.springframework.data.repository.config.AnnotationMetadata , EnableRepositories .class , org.springframework.data.repository.config.ResourceLoader , org.springframework.data.repository.config.Environment ) ; }  <METHOD_END>
