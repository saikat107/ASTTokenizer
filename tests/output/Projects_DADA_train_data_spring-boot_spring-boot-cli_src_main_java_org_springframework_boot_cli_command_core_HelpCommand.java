<METHOD_START> public void ( CommandRunner org.springframework.boot.cli.command.core.CommandRunner ) { super( STRING , STRING ); this . org.springframework.boot.cli.command.core.CommandRunner = org.springframework.boot.cli.command.core.CommandRunner ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.boot.cli.command.core.OptionHelp> < OptionHelp > java.util.Collection<org.springframework.boot.cli.command.core.OptionHelp> ( ) { java.util.List<org.springframework.boot.cli.command.core.OptionHelp> < OptionHelp > java.util.List<org.springframework.boot.cli.command.core.OptionHelp> = new java.util.ArrayList<org.springframework.boot.cli.command.core.OptionHelp> <> ( ) ; for ( final Command org.springframework.boot.cli.command.core.Command : this . org.springframework.boot.cli.command.core.CommandRunner ) { if ( boolean ( org.springframework.boot.cli.command.core.Command ) ) { java.util.List<org.springframework.boot.cli.command.core.OptionHelp> . add ( new OptionHelp ( ) { @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return java.util.Collections . java.util.Set ( org.springframework.boot.cli.command.core.Command . getName ( ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.boot.cli.command.core.Command . getDescription ( ) ; } } ) ; } } return java.util.List<org.springframework.boot.cli.command.core.OptionHelp> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return java.util.Collections . java.util.Set ( org.springframework.boot.cli.command.core.Command . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.boot.cli.command.core.Command . getDescription ( ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Command org.springframework.boot.cli.command.core.Command ) { if ( org.springframework.boot.cli.command.core.Command instanceof org.springframework.boot.cli.command.core.HelpCommand || org.springframework.boot.cli.command.core.Command instanceof HintCommand ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.cli.command.core.ExitStatus org.springframework.boot.cli.command.core.ExitStatus ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { if ( java.lang.String[] . int == NUMBER ) { throw new NoHelpCommandArgumentsException ( ) ; } java.lang.String java.lang.String = java.lang.String[] [ NUMBER ] ; for ( Command org.springframework.boot.cli.command.core.Command : this . org.springframework.boot.cli.command.core.CommandRunner ) { if ( org.springframework.boot.cli.command.core.Command . getName ( ) . equals ( java.lang.String ) ) { Log . info ( this . org.springframework.boot.cli.command.core.CommandRunner . getName ( ) + org.springframework.boot.cli.command.core.Command . getName ( ) + STRING + org.springframework.boot.cli.command.core.Command . getDescription ( ) ) ; Log . info ( STRING ) ; if ( org.springframework.boot.cli.command.core.Command . getUsageHelp ( ) != null ) { Log . info ( STRING + this . org.springframework.boot.cli.command.core.CommandRunner . getName ( ) + org.springframework.boot.cli.command.core.Command . getName ( ) + STRING + org.springframework.boot.cli.command.core.Command . getUsageHelp ( ) ) ; Log . info ( STRING ) ; } if ( org.springframework.boot.cli.command.core.Command . getHelp ( ) != null ) { Log . info ( org.springframework.boot.cli.command.core.Command . getHelp ( ) ) ; } java.util.Collection<org.springframework.boot.cli.command.core.HelpExample> < HelpExample > java.util.Collection<org.springframework.boot.cli.command.core.HelpExample> = org.springframework.boot.cli.command.core.Command . getExamples ( ) ; if ( java.util.Collection<org.springframework.boot.cli.command.core.HelpExample> != null ) { Log . info ( java.util.Collection<org.springframework.boot.cli.command.core.HelpExample> . size ( ) == NUMBER ? STRING : STRING ) ; Log . info ( STRING ) ; for ( HelpExample org.springframework.boot.cli.command.core.HelpExample : java.util.Collection<org.springframework.boot.cli.command.core.HelpExample> ) { Log . info ( STRING + org.springframework.boot.cli.command.core.HelpExample . getDescription ( ) + STRING ) ; Log . info ( STRING + org.springframework.boot.cli.command.core.HelpExample . getExample ( ) ) ; Log . info ( STRING ) ; } Log . info ( STRING ) ; } return ExitStatus . OK ; } } throw new NoSuchCommandException ( java.lang.String ) ; }  <METHOD_END>
