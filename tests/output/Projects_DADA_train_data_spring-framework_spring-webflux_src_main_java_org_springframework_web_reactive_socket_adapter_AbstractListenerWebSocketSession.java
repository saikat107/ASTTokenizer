<METHOD_START> public void ( T T , java.lang.String java.lang.String , HandshakeInfo org.springframework.web.reactive.socket.adapter.HandshakeInfo , DataBufferFactory org.springframework.web.reactive.socket.adapter.DataBufferFactory ) { this( T , java.lang.String , org.springframework.web.reactive.socket.adapter.HandshakeInfo , org.springframework.web.reactive.socket.adapter.DataBufferFactory , null ); }  <METHOD_END>
<METHOD_START> public void ( T T , java.lang.String java.lang.String , HandshakeInfo org.springframework.web.reactive.socket.adapter.HandshakeInfo , DataBufferFactory org.springframework.web.reactive.socket.adapter.DataBufferFactory , MonoProcessor < java.lang.Void > org.springframework.web.reactive.socket.adapter.MonoProcessor<java.lang.Void> ) { super( T , java.lang.String , org.springframework.web.reactive.socket.adapter.HandshakeInfo , org.springframework.web.reactive.socket.adapter.DataBufferFactory ); this . org.springframework.web.reactive.socket.adapter.MonoProcessor<java.lang.Void> = org.springframework.web.reactive.socket.adapter.MonoProcessor<java.lang.Void> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession<T>.WebSocketSendProcessor org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession<T>.WebSocketSendProcessor ( ) { return this . org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession<T>.WebSocketSendProcessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.Flux<org.springframework.web.reactive.socket.adapter.WebSocketMessage> < WebSocketMessage > org.springframework.web.reactive.socket.adapter.Flux<org.springframework.web.reactive.socket.adapter.WebSocketMessage> ( ) { return boolean ( ) ? Flux . from ( this . org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession<T>.WebSocketReceivePublisher ) : Flux . from ( this . org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession<T>.WebSocketReceivePublisher ) . onBackpressureBuffer ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.adapter.Mono<java.lang.Void> ( Publisher < WebSocketMessage > org.springframework.web.reactive.socket.adapter.Publisher<org.springframework.web.reactive.socket.adapter.WebSocketMessage> ) { if ( this . java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ) { this . org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession<T>.WebSocketSendProcessor = new org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession<T>.WebSocketSendProcessor ( ) ; return Mono . from ( subscriber -> { messages . subscribe ( this . sendProcessor ) ; this . sendProcessor . subscribe ( subscriber ) ; } ) ; } else { return Mono . error ( new java.lang.IllegalStateException ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( )  <METHOD_END>
<METHOD_START> protected abstract void void ( )  <METHOD_END>
<METHOD_START> protected abstract void void ( )  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> void void ( Type org.springframework.web.reactive.socket.adapter.Type , WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage ) { this . org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession<T>.WebSocketReceivePublisher . void ( org.springframework.web.reactive.socket.adapter.WebSocketMessage ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.Throwable java.lang.Throwable ) { this . org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession<T>.WebSocketReceivePublisher . onError ( java.lang.Throwable ) ; if ( this . org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession<T>.WebSocketSendProcessor != null ) { this . org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession<T>.WebSocketSendProcessor . cancel ( ) ; this . org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession<T>.WebSocketSendProcessor . onError ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> void void ( CloseStatus org.springframework.web.reactive.socket.adapter.CloseStatus ) { this . org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession<T>.WebSocketReceivePublisher . onAllDataRead ( ) ; if ( this . org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession<T>.WebSocketSendProcessor != null ) { this . org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession<T>.WebSocketSendProcessor . cancel ( ) ; this . org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession<T>.WebSocketSendProcessor . onComplete ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Subscription org.springframework.web.reactive.socket.adapter.Subscription ) { org.springframework.web.reactive.socket.adapter.Subscription . request ( java.lang.Long . long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Void java.lang.Void ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { if ( this . org.springframework.web.reactive.socket.adapter.MonoProcessor<java.lang.Void> != null ) { this . org.springframework.web.reactive.socket.adapter.MonoProcessor<java.lang.Void> . onError ( java.lang.Throwable ) ; } int int = CloseStatus . SERVER_ERROR . getCode ( ) ; close ( new CloseStatus ( int , java.lang.Throwable . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.web.reactive.socket.adapter.MonoProcessor<java.lang.Void> != null ) { this . org.springframework.web.reactive.socket.adapter.MonoProcessor<java.lang.Void> . onComplete ( ) ; } close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . org.springframework.web.reactive.socket.adapter.WebSocketMessage != null ) { onDataAvailable ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.socket.adapter.WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage ( ) java.io.IOException { if ( this . org.springframework.web.reactive.socket.adapter.WebSocketMessage != null ) { WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage = this . org.springframework.web.reactive.socket.adapter.WebSocketMessage ; this . org.springframework.web.reactive.socket.adapter.WebSocketMessage = null ; void ( ) ; return org.springframework.web.reactive.socket.adapter.WebSocketMessage ; } return null ; }  <METHOD_END>
<METHOD_START> void void ( WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage ) { this . org.springframework.web.reactive.socket.adapter.WebSocketMessage = org.springframework.web.reactive.socket.adapter.WebSocketMessage ; void ( ) ; onDataAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage ) throws java.io.IOException { return boolean ( org.springframework.web.reactive.socket.adapter.WebSocketMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . currentData = null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage ) { return ( org.springframework.web.reactive.socket.adapter.WebSocketMessage . getPayload ( ) . readableByteCount ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return ( this . boolean && this . currentData != null ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
