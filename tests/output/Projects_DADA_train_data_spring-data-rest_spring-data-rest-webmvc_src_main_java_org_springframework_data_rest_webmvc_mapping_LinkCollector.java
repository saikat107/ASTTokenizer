<METHOD_START> public void ( PersistentEntities org.springframework.data.rest.webmvc.mapping.PersistentEntities , SelfLinkProvider org.springframework.data.rest.webmvc.mapping.SelfLinkProvider , Associations org.springframework.data.rest.webmvc.mapping.Associations ) { Assert . notNull ( org.springframework.data.rest.webmvc.mapping.PersistentEntities , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.mapping.SelfLinkProvider , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.mapping.Associations , STRING ) ; this . org.springframework.data.rest.webmvc.mapping.SelfLinkProvider = org.springframework.data.rest.webmvc.mapping.SelfLinkProvider ; this . org.springframework.data.rest.webmvc.mapping.PersistentEntities = org.springframework.data.rest.webmvc.mapping.PersistentEntities ; this . org.springframework.data.rest.webmvc.mapping.Associations = org.springframework.data.rest.webmvc.mapping.Associations ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.webmvc.mapping.Links org.springframework.data.rest.webmvc.mapping.Links ( java.lang.Object java.lang.Object ) { return org.springframework.data.rest.webmvc.mapping.Links ( java.lang.Object , java.util.Collections .< Link > java.util.List<org.springframework.data.rest.webmvc.mapping.Link> ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.webmvc.mapping.Links org.springframework.data.rest.webmvc.mapping.Links ( java.lang.Object java.lang.Object , java.util.List<org.springframework.data.rest.webmvc.mapping.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.mapping.Link> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.util.List<org.springframework.data.rest.webmvc.mapping.Link> , STRING ) ; Links org.springframework.data.rest.webmvc.mapping.Links = new Links ( java.util.List<org.springframework.data.rest.webmvc.mapping.Link> ) ; Link org.springframework.data.rest.webmvc.mapping.Link = org.springframework.data.rest.webmvc.mapping.Link ( java.lang.Object , org.springframework.data.rest.webmvc.mapping.Links ) ; if ( org.springframework.data.rest.webmvc.mapping.Link == null ) { return org.springframework.data.rest.webmvc.mapping.Links ; } Path org.springframework.data.rest.webmvc.mapping.Path = new Path ( org.springframework.data.rest.webmvc.mapping.Link . expand ( ) . getHref ( ) ) ; org.springframework.data.rest.webmvc.mapping.LinkCollector.LinkCollectingAssociationHandler org.springframework.data.rest.webmvc.mapping.LinkCollector.LinkCollectingAssociationHandler = new org.springframework.data.rest.webmvc.mapping.LinkCollector.LinkCollectingAssociationHandler ( org.springframework.data.rest.webmvc.mapping.PersistentEntities , org.springframework.data.rest.webmvc.mapping.Path , org.springframework.data.rest.webmvc.mapping.Associations ) ; org.springframework.data.rest.webmvc.mapping.PersistentEntities . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) . doWithAssociations ( org.springframework.data.rest.webmvc.mapping.LinkCollector.LinkCollectingAssociationHandler ) ; java.util.List<org.springframework.data.rest.webmvc.mapping.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.mapping.Link> = new java.util.ArrayList<org.springframework.data.rest.webmvc.mapping.Link> < Link > ( java.util.List<org.springframework.data.rest.webmvc.mapping.Link> ) ; java.util.List<org.springframework.data.rest.webmvc.mapping.Link> . addAll ( org.springframework.data.rest.webmvc.mapping.LinkCollector.LinkCollectingAssociationHandler . java.util.List<org.springframework.data.rest.webmvc.mapping.Link> ( ) ) ; return org.springframework.data.rest.webmvc.mapping.Links ( java.lang.Object , java.util.List<org.springframework.data.rest.webmvc.mapping.Link> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.webmvc.mapping.Links org.springframework.data.rest.webmvc.mapping.Links ( java.lang.Object java.lang.Object , java.util.List<org.springframework.data.rest.webmvc.mapping.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.mapping.Link> ) { PersistentEntity < ? , ? > org.springframework.data.rest.webmvc.mapping.PersistentEntity<?,?> = org.springframework.data.rest.webmvc.mapping.PersistentEntities . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; org.springframework.data.rest.webmvc.mapping.LinkCollector.NestedLinkCollectingAssociationHandler org.springframework.data.rest.webmvc.mapping.LinkCollector.NestedLinkCollectingAssociationHandler = new org.springframework.data.rest.webmvc.mapping.LinkCollector.NestedLinkCollectingAssociationHandler ( org.springframework.data.rest.webmvc.mapping.SelfLinkProvider , org.springframework.data.rest.webmvc.mapping.PersistentEntity<,> . getPropertyAccessor ( java.lang.Object ) , org.springframework.data.rest.webmvc.mapping.Associations ) ; org.springframework.data.rest.webmvc.mapping.PersistentEntity<,> . doWithAssociations ( org.springframework.data.rest.webmvc.mapping.LinkCollector.NestedLinkCollectingAssociationHandler ) ; java.util.List<org.springframework.data.rest.webmvc.mapping.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.mapping.Link> = new java.util.ArrayList<org.springframework.data.rest.webmvc.mapping.Link> < Link > ( ) ; java.util.List<org.springframework.data.rest.webmvc.mapping.Link> . addAll ( java.util.List<org.springframework.data.rest.webmvc.mapping.Link> ) ; java.util.List<org.springframework.data.rest.webmvc.mapping.Link> . addAll ( org.springframework.data.rest.webmvc.mapping.LinkCollector.NestedLinkCollectingAssociationHandler . getLinks ( ) ) ; return new Links ( java.util.List<org.springframework.data.rest.webmvc.mapping.Link> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.rest.webmvc.mapping.Links org.springframework.data.rest.webmvc.mapping.Links ( java.lang.Object java.lang.Object , java.util.List<org.springframework.data.rest.webmvc.mapping.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.mapping.Link> ) { Links org.springframework.data.rest.webmvc.mapping.Links = new Links ( java.util.List<org.springframework.data.rest.webmvc.mapping.Link> ) ; if ( org.springframework.data.rest.webmvc.mapping.Links . hasLink ( Link . REL_SELF ) ) { return org.springframework.data.rest.webmvc.mapping.Links ; } java.util.List<org.springframework.data.rest.webmvc.mapping.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.mapping.Link> = new java.util.ArrayList<org.springframework.data.rest.webmvc.mapping.Link> < Link > ( ) ; java.util.List<org.springframework.data.rest.webmvc.mapping.Link> . add ( org.springframework.data.rest.webmvc.mapping.Link ( java.lang.Object , org.springframework.data.rest.webmvc.mapping.Links ) ) ; java.util.List<org.springframework.data.rest.webmvc.mapping.Link> . addAll ( java.util.List<org.springframework.data.rest.webmvc.mapping.Link> ) ; return new Links ( java.util.List<org.springframework.data.rest.webmvc.mapping.Link> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.rest.webmvc.mapping.Link org.springframework.data.rest.webmvc.mapping.Link ( java.lang.Object java.lang.Object , Links org.springframework.data.rest.webmvc.mapping.Links ) { if ( org.springframework.data.rest.webmvc.mapping.Links . hasLink ( Link . REL_SELF ) ) { return org.springframework.data.rest.webmvc.mapping.Links . getLink ( Link . REL_SELF ) ; } return org.springframework.data.rest.webmvc.mapping.SelfLinkProvider . createSelfLinkFor ( java.lang.Object ) . withSelfRel ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.rest.webmvc.mapping.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.mapping.Link> ( ) { return java.util.List<org.springframework.data.rest.webmvc.mapping.Link> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final Association < ? extends PersistentProperty < ? > > org.springframework.data.rest.webmvc.mapping.Association<? extends org.springframework.data.rest.webmvc.mapping.PersistentProperty<?>> ) { if ( org.springframework.data.rest.webmvc.mapping.Associations . isLinkableAssociation ( org.springframework.data.rest.webmvc.mapping.Association<> ) ) { PersistentProperty < ? > org.springframework.data.rest.webmvc.mapping.PersistentProperty<?> = org.springframework.data.rest.webmvc.mapping.Association<> . getInverse ( ) ; Links org.springframework.data.rest.webmvc.mapping.Links = new Links ( java.util.List<org.springframework.data.rest.webmvc.mapping.Link> ) ; for ( Link org.springframework.data.rest.webmvc.mapping.Link : org.springframework.data.rest.webmvc.mapping.Associations . getLinksFor ( org.springframework.data.rest.webmvc.mapping.Association<> , org.springframework.data.rest.webmvc.mapping.Path ) ) { if ( org.springframework.data.rest.webmvc.mapping.Links . hasLink ( org.springframework.data.rest.webmvc.mapping.Link . getRel ( ) ) ) { throw new MappingException ( java.lang.String . java.lang.String ( java.lang.String , org.springframework.data.rest.webmvc.mapping.PersistentProperty<> . toString ( ) ) ) ; } else { java.util.List<org.springframework.data.rest.webmvc.mapping.Link> . add ( org.springframework.data.rest.webmvc.mapping.Link ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Association < ? extends PersistentProperty < ? > > org.springframework.data.rest.webmvc.mapping.Association<? extends org.springframework.data.rest.webmvc.mapping.PersistentProperty<?>> ) { if ( ! org.springframework.data.rest.webmvc.mapping.Associations . isLinkableAssociation ( org.springframework.data.rest.webmvc.mapping.Association<> ) ) { return; } PersistentProperty < ? > org.springframework.data.rest.webmvc.mapping.PersistentProperty<?> = org.springframework.data.rest.webmvc.mapping.Association<> . getInverse ( ) ; org.springframework.data.rest.webmvc.mapping.PersistentPropertyAccessor . getProperty ( org.springframework.data.rest.webmvc.mapping.PersistentProperty<> ) . ifPresent ( it -> { ResourceMetadata metadata = associations . getMappings ( ) . getMetadataFor ( property . getOwner ( ) . getType ( ) ) ; ResourceMapping propertyMapping = metadata . getMappingFor ( property ) ; for ( Object element : asCollection ( it ) ) { if ( element != null ) links . add ( getLinkFor ( element , propertyMapping ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.rest.webmvc.mapping.Link org.springframework.data.rest.webmvc.mapping.Link ( java.lang.Object java.lang.Object , ResourceMapping org.springframework.data.rest.webmvc.mapping.ResourceMapping ) { return org.springframework.data.rest.webmvc.mapping.SelfLinkProvider . createSelfLinkFor ( java.lang.Object ) . withRel ( org.springframework.data.rest.webmvc.mapping.ResourceMapping . getRel ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.util.Collection ) { return ( java.util.Collection<java.lang.Object> < java.lang.Object > ) java.lang.Object ; } return java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) ; }  <METHOD_END>
