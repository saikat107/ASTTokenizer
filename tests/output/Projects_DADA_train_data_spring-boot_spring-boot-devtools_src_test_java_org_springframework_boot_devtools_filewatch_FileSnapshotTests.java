<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING ) ; new FileSnapshot ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING ) ; new FileSnapshot ( this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFolder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = java.io.File ( STRING , long ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) . java.io.File ( ) ; FileSnapshot org.springframework.boot.devtools.filewatch.FileSnapshot = new FileSnapshot ( java.io.File ) ; FileSnapshot org.springframework.boot.devtools.filewatch.FileSnapshot = new FileSnapshot ( java.io.File ) ; assertThat ( org.springframework.boot.devtools.filewatch.FileSnapshot ) . isEqualTo ( org.springframework.boot.devtools.filewatch.FileSnapshot ) ; assertThat ( org.springframework.boot.devtools.filewatch.FileSnapshot . hashCode ( ) ) . isEqualTo ( org.springframework.boot.devtools.filewatch.FileSnapshot . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = java.io.File ( STRING , long ) ; FileSnapshot org.springframework.boot.devtools.filewatch.FileSnapshot = new FileSnapshot ( java.io.File ) ; java.io.File . boolean ( ) ; assertThat ( org.springframework.boot.devtools.filewatch.FileSnapshot ) . isNotEqualTo ( new FileSnapshot ( java.io.File ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = java.io.File ( STRING , long ) ; FileSnapshot org.springframework.boot.devtools.filewatch.FileSnapshot = new FileSnapshot ( java.io.File ) ; void ( java.io.File , STRING , long ) ; assertThat ( org.springframework.boot.devtools.filewatch.FileSnapshot ) . isNotEqualTo ( new FileSnapshot ( java.io.File ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = java.io.File ( STRING , long ) ; FileSnapshot org.springframework.boot.devtools.filewatch.FileSnapshot = new FileSnapshot ( java.io.File ) ; void ( java.io.File , STRING , long + long ) ; assertThat ( org.springframework.boot.devtools.filewatch.FileSnapshot ) . isNotEqualTo ( new FileSnapshot ( java.io.File ) ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( java.lang.String java.lang.String , long long ) throws java.io.IOException { java.io.File java.io.File = this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFile ( ) ; void ( java.io.File , java.lang.String , long ) ; return java.io.File ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File , java.lang.String java.lang.String , long long )			throws java.io.IOException { FileCopyUtils . copy ( java.lang.String . byte[] ( ) , java.io.File ) ; java.io.File . boolean ( long ) ; }  <METHOD_END>
