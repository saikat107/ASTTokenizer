<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.rest.core.support.DomainObjectMerger = new DomainObjectMerger ( new Repositories ( org.springframework.data.rest.core.support.ConfigurableApplicationContext . getBeanFactory ( ) ) , new DefaultConversionService ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.rest.core.support.Person = new Person ( STRING , STRING ) ; Person org.springframework.data.rest.core.support.Person = new Person ( STRING , STRING ) ; org.springframework.data.rest.core.support.DomainObjectMerger . merge ( org.springframework.data.rest.core.support.Person , org.springframework.data.rest.core.support.Person , APPLY_NULLS ) ; assertThat ( org.springframework.data.rest.core.support.Person . getFirstName ( ) ) . isEqualTo ( org.springframework.data.rest.core.support.Person . getFirstName ( ) ) ; assertThat ( org.springframework.data.rest.core.support.Person . getLastName ( ) ) . isEqualTo ( org.springframework.data.rest.core.support.Person . getLastName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.rest.core.support.Person = new Person ( null , null ) ; Person org.springframework.data.rest.core.support.Person = new Person ( STRING , STRING ) ; org.springframework.data.rest.core.support.DomainObjectMerger . merge ( org.springframework.data.rest.core.support.Person , org.springframework.data.rest.core.support.Person , APPLY_NULLS ) ; assertThat ( org.springframework.data.rest.core.support.Person . getFirstName ( ) ) . isEqualTo ( org.springframework.data.rest.core.support.Person . getFirstName ( ) ) ; assertThat ( org.springframework.data.rest.core.support.Person . getLastName ( ) ) . isEqualTo ( org.springframework.data.rest.core.support.Person . getLastName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.rest.core.support.Person = new Person ( STRING , STRING ) ; Person org.springframework.data.rest.core.support.Person = new Person ( STRING , STRING ) ; org.springframework.data.rest.core.support.Person . setSiblings ( java.util.Arrays . java.util.List ( org.springframework.data.rest.core.support.Person ) ) ; org.springframework.data.rest.core.support.DomainObjectMerger . merge ( new Person ( STRING , null ) , org.springframework.data.rest.core.support.Person , IGNORE_NULLS ) ; assertThat ( org.springframework.data.rest.core.support.Person . getSiblings ( ) ) . isNotEmpty ( ) ; }  <METHOD_END>
