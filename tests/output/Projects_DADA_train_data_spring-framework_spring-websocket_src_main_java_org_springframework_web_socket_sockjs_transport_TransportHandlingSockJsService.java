<METHOD_START> public void ( TaskScheduler org.springframework.web.socket.sockjs.transport.TaskScheduler , TransportHandler ... org.springframework.web.socket.sockjs.transport.TransportHandler[] ) { this( org.springframework.web.socket.sockjs.transport.TaskScheduler , java.util.Arrays . java.util.List ( org.springframework.web.socket.sockjs.transport.TransportHandler[] ) ); }  <METHOD_END>
<METHOD_START> public void ( TaskScheduler org.springframework.web.socket.sockjs.transport.TaskScheduler , java.util.Collection<org.springframework.web.socket.sockjs.transport.TransportHandler> < TransportHandler > java.util.Collection<org.springframework.web.socket.sockjs.transport.TransportHandler> ) { super( org.springframework.web.socket.sockjs.transport.TaskScheduler ); if ( CollectionUtils . isEmpty ( java.util.Collection<org.springframework.web.socket.sockjs.transport.TransportHandler> ) ) { logger . warn ( STRING ) ; } else { for ( TransportHandler org.springframework.web.socket.sockjs.transport.TransportHandler : java.util.Collection<org.springframework.web.socket.sockjs.transport.TransportHandler> ) { org.springframework.web.socket.sockjs.transport.TransportHandler . initialize ( this ) ; this . java.util.Map<org.springframework.web.socket.sockjs.transport.TransportType,org.springframework.web.socket.sockjs.transport.TransportHandler> . put ( org.springframework.web.socket.sockjs.transport.TransportHandler . getTransportType ( ) , org.springframework.web.socket.sockjs.transport.TransportHandler ) ; } } if ( boolean ) { this . org.springframework.web.socket.sockjs.transport.SockJsMessageCodec = new Jackson2SockJsMessageCodec ( ) ; } }  <METHOD_END>
<METHOD_START> public java.util.Map<org.springframework.web.socket.sockjs.transport.TransportType,org.springframework.web.socket.sockjs.transport.TransportHandler> < TransportType , TransportHandler > java.util.Map<org.springframework.web.socket.sockjs.transport.TransportType,org.springframework.web.socket.sockjs.transport.TransportHandler> ( ) { return java.util.Collections . java.util.Map<org.springframework.web.socket.sockjs.transport.TransportType,org.springframework.web.socket.sockjs.transport.TransportHandler> ( this . java.util.Map<org.springframework.web.socket.sockjs.transport.TransportType,org.springframework.web.socket.sockjs.transport.TransportHandler> ) ; }  <METHOD_END>
<METHOD_START> public void void ( SockJsMessageCodec org.springframework.web.socket.sockjs.transport.SockJsMessageCodec ) { this . org.springframework.web.socket.sockjs.transport.SockJsMessageCodec = org.springframework.web.socket.sockjs.transport.SockJsMessageCodec ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.sockjs.transport.SockJsMessageCodec org.springframework.web.socket.sockjs.transport.SockJsMessageCodec ( ) { Assert . state ( this . org.springframework.web.socket.sockjs.transport.SockJsMessageCodec != null , STRING + STRING ) ; return this . org.springframework.web.socket.sockjs.transport.SockJsMessageCodec ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.socket.sockjs.transport.HandshakeInterceptor> < HandshakeInterceptor > java.util.List<org.springframework.web.socket.sockjs.transport.HandshakeInterceptor> ) { this . java.util.List<org.springframework.web.socket.sockjs.transport.HandshakeInterceptor> . clear ( ) ; if ( java.util.List<org.springframework.web.socket.sockjs.transport.HandshakeInterceptor> != null ) { this . java.util.List<org.springframework.web.socket.sockjs.transport.HandshakeInterceptor> . addAll ( java.util.List<org.springframework.web.socket.sockjs.transport.HandshakeInterceptor> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.socket.sockjs.transport.HandshakeInterceptor> < HandshakeInterceptor > java.util.List<org.springframework.web.socket.sockjs.transport.HandshakeInterceptor> ( ) { return this . java.util.List<org.springframework.web.socket.sockjs.transport.HandshakeInterceptor> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! boolean ( ) ) { this . boolean = true ; for ( TransportHandler org.springframework.web.socket.sockjs.transport.TransportHandler : this . java.util.Map<org.springframework.web.socket.sockjs.transport.TransportType,org.springframework.web.socket.sockjs.transport.TransportHandler> . values ( ) ) { if ( org.springframework.web.socket.sockjs.transport.TransportHandler instanceof Lifecycle ) { ( ( Lifecycle ) org.springframework.web.socket.sockjs.transport.TransportHandler ) . start ( ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( boolean ( ) ) { this . boolean = false ; for ( TransportHandler org.springframework.web.socket.sockjs.transport.TransportHandler : this . java.util.Map<org.springframework.web.socket.sockjs.transport.TransportType,org.springframework.web.socket.sockjs.transport.TransportHandler> . values ( ) ) { if ( org.springframework.web.socket.sockjs.transport.TransportHandler instanceof Lifecycle ) { ( ( Lifecycle ) org.springframework.web.socket.sockjs.transport.TransportHandler ) . stop ( ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ServerHttpRequest org.springframework.web.socket.sockjs.transport.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.transport.ServerHttpResponse , WebSocketHandler org.springframework.web.socket.sockjs.transport.WebSocketHandler ) throws java.io.IOException { TransportHandler org.springframework.web.socket.sockjs.transport.TransportHandler = this . java.util.Map<org.springframework.web.socket.sockjs.transport.TransportType,org.springframework.web.socket.sockjs.transport.TransportHandler> . get ( TransportType . WEBSOCKET ) ; if ( ! ( org.springframework.web.socket.sockjs.transport.TransportHandler instanceof HandshakeHandler ) ) { logger . error ( STRING ) ; org.springframework.web.socket.sockjs.transport.ServerHttpResponse . setStatusCode ( HttpStatus . NOT_FOUND ) ; return; } HandshakeInterceptorChain org.springframework.web.socket.sockjs.transport.HandshakeInterceptorChain = new HandshakeInterceptorChain ( this . java.util.List<org.springframework.web.socket.sockjs.transport.HandshakeInterceptor> , org.springframework.web.socket.sockjs.transport.WebSocketHandler ) ; HandshakeFailureException org.springframework.web.socket.sockjs.transport.HandshakeFailureException = null ; try { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; if ( ! org.springframework.web.socket.sockjs.transport.HandshakeInterceptorChain . applyBeforeHandshake ( org.springframework.web.socket.sockjs.transport.ServerHttpRequest , org.springframework.web.socket.sockjs.transport.ServerHttpResponse , java.util.Map<java.lang.String,java.lang.Object> ) ) { return; } ( ( HandshakeHandler ) org.springframework.web.socket.sockjs.transport.TransportHandler ) . doHandshake ( org.springframework.web.socket.sockjs.transport.ServerHttpRequest , org.springframework.web.socket.sockjs.transport.ServerHttpResponse , org.springframework.web.socket.sockjs.transport.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.web.socket.sockjs.transport.HandshakeInterceptorChain . applyAfterHandshake ( org.springframework.web.socket.sockjs.transport.ServerHttpRequest , org.springframework.web.socket.sockjs.transport.ServerHttpResponse , null ) ; } catch ( HandshakeFailureException org.springframework.web.socket.sockjs.transport.HandshakeFailureException ) { org.springframework.web.socket.sockjs.transport.HandshakeFailureException = org.springframework.web.socket.sockjs.transport.HandshakeFailureException ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.sockjs.transport.HandshakeFailureException = new HandshakeFailureException ( STRING + org.springframework.web.socket.sockjs.transport.ServerHttpRequest . getURI ( ) , java.lang.Throwable ) ; } finally { if ( org.springframework.web.socket.sockjs.transport.HandshakeFailureException != null ) { org.springframework.web.socket.sockjs.transport.HandshakeInterceptorChain . applyAfterHandshake ( org.springframework.web.socket.sockjs.transport.ServerHttpRequest , org.springframework.web.socket.sockjs.transport.ServerHttpResponse , org.springframework.web.socket.sockjs.transport.HandshakeFailureException ) ; throw org.springframework.web.socket.sockjs.transport.HandshakeFailureException ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ServerHttpRequest org.springframework.web.socket.sockjs.transport.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.transport.ServerHttpResponse , WebSocketHandler org.springframework.web.socket.sockjs.transport.WebSocketHandler , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.web.socket.sockjs.transport.SockJsException { TransportType org.springframework.web.socket.sockjs.transport.TransportType = TransportType . fromValue ( java.lang.String ) ; if ( org.springframework.web.socket.sockjs.transport.TransportType == null ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + org.springframework.web.socket.sockjs.transport.ServerHttpRequest . getURI ( ) ) ; } org.springframework.web.socket.sockjs.transport.ServerHttpResponse . setStatusCode ( HttpStatus . NOT_FOUND ) ; return; } TransportHandler org.springframework.web.socket.sockjs.transport.TransportHandler = this . java.util.Map<org.springframework.web.socket.sockjs.transport.TransportType,org.springframework.web.socket.sockjs.transport.TransportHandler> . get ( org.springframework.web.socket.sockjs.transport.TransportType ) ; if ( org.springframework.web.socket.sockjs.transport.TransportHandler == null ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + org.springframework.web.socket.sockjs.transport.ServerHttpRequest . getURI ( ) ) ; } org.springframework.web.socket.sockjs.transport.ServerHttpResponse . setStatusCode ( HttpStatus . NOT_FOUND ) ; return; } SockJsException org.springframework.web.socket.sockjs.transport.SockJsException = null ; HandshakeInterceptorChain org.springframework.web.socket.sockjs.transport.HandshakeInterceptorChain = new HandshakeInterceptorChain ( this . java.util.List<org.springframework.web.socket.sockjs.transport.HandshakeInterceptor> , org.springframework.web.socket.sockjs.transport.WebSocketHandler ) ; try { HttpMethod org.springframework.web.socket.sockjs.transport.HttpMethod = org.springframework.web.socket.sockjs.transport.TransportType . getHttpMethod ( ) ; if ( org.springframework.web.socket.sockjs.transport.HttpMethod != org.springframework.web.socket.sockjs.transport.ServerHttpRequest . getMethod ( ) ) { if ( HttpMethod . OPTIONS == org.springframework.web.socket.sockjs.transport.ServerHttpRequest . getMethod ( ) && org.springframework.web.socket.sockjs.transport.TransportType . supportsCors ( ) ) { if ( checkOrigin ( org.springframework.web.socket.sockjs.transport.ServerHttpRequest , org.springframework.web.socket.sockjs.transport.ServerHttpResponse , HttpMethod . OPTIONS , org.springframework.web.socket.sockjs.transport.HttpMethod ) ) { org.springframework.web.socket.sockjs.transport.ServerHttpResponse . setStatusCode ( HttpStatus . NO_CONTENT ) ; addCacheHeaders ( org.springframework.web.socket.sockjs.transport.ServerHttpResponse ) ; } } else if ( org.springframework.web.socket.sockjs.transport.TransportType . supportsCors ( ) ) { sendMethodNotAllowed ( org.springframework.web.socket.sockjs.transport.ServerHttpResponse , org.springframework.web.socket.sockjs.transport.HttpMethod , HttpMethod . OPTIONS ) ; } else { sendMethodNotAllowed ( org.springframework.web.socket.sockjs.transport.ServerHttpResponse , org.springframework.web.socket.sockjs.transport.HttpMethod ) ; } return; } SockJsSession org.springframework.web.socket.sockjs.transport.SockJsSession = this . java.util.Map<java.lang.String,org.springframework.web.socket.sockjs.transport.SockJsSession> . get ( java.lang.String ) ; if ( org.springframework.web.socket.sockjs.transport.SockJsSession == null ) { if ( org.springframework.web.socket.sockjs.transport.TransportHandler instanceof SockJsSessionFactory ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; if ( ! org.springframework.web.socket.sockjs.transport.HandshakeInterceptorChain . applyBeforeHandshake ( org.springframework.web.socket.sockjs.transport.ServerHttpRequest , org.springframework.web.socket.sockjs.transport.ServerHttpResponse , java.util.Map<java.lang.String,java.lang.Object> ) ) { return; } SockJsSessionFactory org.springframework.web.socket.sockjs.transport.SockJsSessionFactory = ( SockJsSessionFactory ) org.springframework.web.socket.sockjs.transport.TransportHandler ; org.springframework.web.socket.sockjs.transport.SockJsSession = org.springframework.web.socket.sockjs.transport.SockJsSession ( java.lang.String , org.springframework.web.socket.sockjs.transport.SockJsSessionFactory , org.springframework.web.socket.sockjs.transport.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; } else { org.springframework.web.socket.sockjs.transport.ServerHttpResponse . setStatusCode ( HttpStatus . NOT_FOUND ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + STRING ) ; } return; } } else { if ( org.springframework.web.socket.sockjs.transport.SockJsSession . getPrincipal ( ) != null ) { if ( ! org.springframework.web.socket.sockjs.transport.SockJsSession . getPrincipal ( ) . equals ( org.springframework.web.socket.sockjs.transport.ServerHttpRequest . getPrincipal ( ) ) ) { logger . debug ( STRING ) ; org.springframework.web.socket.sockjs.transport.ServerHttpResponse . setStatusCode ( HttpStatus . NOT_FOUND ) ; return; } } if ( ! org.springframework.web.socket.sockjs.transport.TransportHandler . checkSessionType ( org.springframework.web.socket.sockjs.transport.SockJsSession ) ) { logger . debug ( STRING ) ; org.springframework.web.socket.sockjs.transport.ServerHttpResponse . setStatusCode ( HttpStatus . NOT_FOUND ) ; return; } } if ( org.springframework.web.socket.sockjs.transport.TransportType . sendsNoCacheInstruction ( ) ) { addNoCacheHeaders ( org.springframework.web.socket.sockjs.transport.ServerHttpResponse ) ; } if ( org.springframework.web.socket.sockjs.transport.TransportType . supportsCors ( ) ) { if ( ! checkOrigin ( org.springframework.web.socket.sockjs.transport.ServerHttpRequest , org.springframework.web.socket.sockjs.transport.ServerHttpResponse ) ) { return; } } org.springframework.web.socket.sockjs.transport.TransportHandler . handleRequest ( org.springframework.web.socket.sockjs.transport.ServerHttpRequest , org.springframework.web.socket.sockjs.transport.ServerHttpResponse , org.springframework.web.socket.sockjs.transport.WebSocketHandler , org.springframework.web.socket.sockjs.transport.SockJsSession ) ; org.springframework.web.socket.sockjs.transport.HandshakeInterceptorChain . applyAfterHandshake ( org.springframework.web.socket.sockjs.transport.ServerHttpRequest , org.springframework.web.socket.sockjs.transport.ServerHttpResponse , null ) ; } catch ( SockJsException org.springframework.web.socket.sockjs.transport.SockJsException ) { org.springframework.web.socket.sockjs.transport.SockJsException = org.springframework.web.socket.sockjs.transport.SockJsException ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.sockjs.transport.SockJsException = new SockJsException ( STRING + org.springframework.web.socket.sockjs.transport.ServerHttpRequest . getURI ( ) , java.lang.String , java.lang.Throwable ) ; } finally { if ( org.springframework.web.socket.sockjs.transport.SockJsException != null ) { org.springframework.web.socket.sockjs.transport.HandshakeInterceptorChain . applyAfterHandshake ( org.springframework.web.socket.sockjs.transport.ServerHttpRequest , org.springframework.web.socket.sockjs.transport.ServerHttpResponse , org.springframework.web.socket.sockjs.transport.SockJsException ) ; throw org.springframework.web.socket.sockjs.transport.SockJsException ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( ! super. validateRequest ( java.lang.String , java.lang.String , java.lang.String ) ) { return false ; } if ( ! this . allowedOrigins . contains ( STRING ) ) { TransportType org.springframework.web.socket.sockjs.transport.TransportType = TransportType . fromValue ( java.lang.String ) ; if ( org.springframework.web.socket.sockjs.transport.TransportType == null || ! org.springframework.web.socket.sockjs.transport.TransportType . supportsOrigin ( ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + java.lang.String + STRING ) ; } return false ; } } return true ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.sockjs.transport.SockJsSession org.springframework.web.socket.sockjs.transport.SockJsSession ( java.lang.String java.lang.String , SockJsSessionFactory org.springframework.web.socket.sockjs.transport.SockJsSessionFactory , WebSocketHandler org.springframework.web.socket.sockjs.transport.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { SockJsSession org.springframework.web.socket.sockjs.transport.SockJsSession = this . java.util.Map<java.lang.String,org.springframework.web.socket.sockjs.transport.SockJsSession> . get ( java.lang.String ) ; if ( org.springframework.web.socket.sockjs.transport.SockJsSession != null ) { return org.springframework.web.socket.sockjs.transport.SockJsSession ; } if ( this . java.util.concurrent.ScheduledFuture<> == null ) { void ( ) ; } org.springframework.web.socket.sockjs.transport.SockJsSession = org.springframework.web.socket.sockjs.transport.SockJsSessionFactory . createSession ( java.lang.String , org.springframework.web.socket.sockjs.transport.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; this . java.util.Map<java.lang.String,org.springframework.web.socket.sockjs.transport.SockJsSession> . put ( java.lang.String , org.springframework.web.socket.sockjs.transport.SockJsSession ) ; return org.springframework.web.socket.sockjs.transport.SockJsSession ; }  <METHOD_END>
<METHOD_START> private void void ( ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.web.socket.sockjs.transport.SockJsSession> ) { if ( this . java.util.concurrent.ScheduledFuture<> != null ) { return; } this . java.util.concurrent.ScheduledFuture<?> = getTaskScheduler ( ) . scheduleAtFixedRate ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( SockJsSession org.springframework.web.socket.sockjs.transport.SockJsSession : java.util.Map<java.lang.String,org.springframework.web.socket.sockjs.transport.SockJsSession> . values ( ) ) { try { if ( org.springframework.web.socket.sockjs.transport.SockJsSession . getTimeSinceLastActive ( ) > getDisconnectDelay ( ) ) { java.util.Map<java.lang.String,org.springframework.web.socket.sockjs.transport.SockJsSession> . remove ( org.springframework.web.socket.sockjs.transport.SockJsSession . getId ( ) ) ; java.util.List<java.lang.String> . boolean ( org.springframework.web.socket.sockjs.transport.SockJsSession . getId ( ) ) ; org.springframework.web.socket.sockjs.transport.SockJsSession . close ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { logger . debug ( STRING + org.springframework.web.socket.sockjs.transport.SockJsSession , java.lang.Throwable ) ; } } if ( logger . isDebugEnabled ( ) && ! java.util.List<java.lang.String> . boolean ( ) ) { logger . debug ( STRING + java.util.List<java.lang.String> . int ( ) + STRING + java.util.List<java.lang.String> ) ; } } } , getDisconnectDelay ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( SockJsSession org.springframework.web.socket.sockjs.transport.SockJsSession : java.util.Map<java.lang.String,org.springframework.web.socket.sockjs.transport.SockJsSession> . values ( ) ) { try { if ( org.springframework.web.socket.sockjs.transport.SockJsSession . getTimeSinceLastActive ( ) > getDisconnectDelay ( ) ) { java.util.Map<java.lang.String,org.springframework.web.socket.sockjs.transport.SockJsSession> . remove ( org.springframework.web.socket.sockjs.transport.SockJsSession . getId ( ) ) ; java.util.List<java.lang.String> . boolean ( org.springframework.web.socket.sockjs.transport.SockJsSession . getId ( ) ) ; org.springframework.web.socket.sockjs.transport.SockJsSession . close ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { logger . debug ( STRING + org.springframework.web.socket.sockjs.transport.SockJsSession , java.lang.Throwable ) ; } } if ( logger . isDebugEnabled ( ) && ! java.util.List<java.lang.String> . boolean ( ) ) { logger . debug ( STRING + java.util.List<java.lang.String> . int ( ) + STRING + java.util.List<java.lang.String> ) ; } }  <METHOD_END>
