<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext . register ( PropertyPlaceholderAutoConfiguration .class , ElasticsearchAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext . getBeanNamesForType ( Client .class ) . length ) . isEqualTo ( NUMBER ) ; NodeClient org.springframework.boot.autoconfigure.data.elasticsearch.NodeClient = ( NodeClient ) this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext . getBean ( Client .class ) ; assertThat ( org.springframework.boot.autoconfigure.data.elasticsearch.NodeClient . settings ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.data.elasticsearch.NodeClient . settings ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.data.elasticsearch.NodeClient . settings ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext , STRING , STRING , STRING , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext . register ( PropertyPlaceholderAutoConfiguration .class , ElasticsearchAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext . getBeanNamesForType ( Client .class ) . length ) . isEqualTo ( NUMBER ) ; NodeClient org.springframework.boot.autoconfigure.data.elasticsearch.NodeClient = ( NodeClient ) this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext . getBean ( Client .class ) ; assertThat ( org.springframework.boot.autoconfigure.data.elasticsearch.NodeClient . settings ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.data.elasticsearch.NodeClient . settings ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.data.elasticsearch.NodeClient . settings ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.data.elasticsearch.NodeClient . settings ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfigurationTests.CustomConfiguration .class , PropertyPlaceholderAutoConfiguration .class , ElasticsearchAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext . getBeanNamesForType ( Client .class ) . length ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext . getBean ( STRING ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext . getBean ( Client .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext . register ( PropertyPlaceholderAutoConfiguration .class , ElasticsearchAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.elasticsearch.ExpectedException . expect ( BeanCreationException .class ) ; this . org.springframework.boot.autoconfigure.data.elasticsearch.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.autoconfigure.data.elasticsearch.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.data.elasticsearch.Client org.springframework.boot.autoconfigure.data.elasticsearch.Client ( ) { return mock ( Client .class ) ; }  <METHOD_END>
