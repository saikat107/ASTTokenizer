<METHOD_START> @ Test public void void ( ) { org.springframework.integration.mail.MailReceivingMessageSourceTests.StubMailReceiver org.springframework.integration.mail.MailReceivingMessageSourceTests.StubMailReceiver = new org.springframework.integration.mail.MailReceivingMessageSourceTests.StubMailReceiver ( ) ; MimeMessage org.springframework.integration.mail.MimeMessage = Mockito . mock ( MimeMessage .class ) ; MimeMessage org.springframework.integration.mail.MimeMessage = Mockito . mock ( MimeMessage .class ) ; MimeMessage org.springframework.integration.mail.MimeMessage = Mockito . mock ( MimeMessage .class ) ; MimeMessage org.springframework.integration.mail.MimeMessage = Mockito . mock ( MimeMessage .class ) ; org.springframework.integration.mail.MailReceivingMessageSourceTests.StubMailReceiver . java.util.concurrent.ConcurrentLinkedQueue<javax.mail.Message[]> . add ( new javax . javax.mail . javax.mail [] { org.springframework.integration.mail.MimeMessage } ) ; org.springframework.integration.mail.MailReceivingMessageSourceTests.StubMailReceiver . java.util.concurrent.ConcurrentLinkedQueue<javax.mail.Message[]> . add ( new javax . javax.mail . javax.mail [] { org.springframework.integration.mail.MimeMessage , org.springframework.integration.mail.MimeMessage } ) ; org.springframework.integration.mail.MailReceivingMessageSourceTests.StubMailReceiver . java.util.concurrent.ConcurrentLinkedQueue<javax.mail.Message[]> . add ( new javax . javax.mail . javax.mail [] { org.springframework.integration.mail.MimeMessage } ) ; MailReceivingMessageSource org.springframework.integration.mail.MailReceivingMessageSource = new MailReceivingMessageSource ( org.springframework.integration.mail.MailReceivingMessageSourceTests.StubMailReceiver ) ; assertEquals ( STRING , org.springframework.integration.mail.MimeMessage , org.springframework.integration.mail.MailReceivingMessageSource . receive ( ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.mail.MimeMessage , org.springframework.integration.mail.MailReceivingMessageSource . receive ( ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.mail.MimeMessage , org.springframework.integration.mail.MailReceivingMessageSource . receive ( ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.mail.MimeMessage , org.springframework.integration.mail.MailReceivingMessageSource . receive ( ) . getPayload ( ) ) ; assertNull ( STRING , org.springframework.integration.mail.MailReceivingMessageSource . receive ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax . javax.mail . javax.mail.Message [] javax.mail.Message[] ( ) { return java.util.concurrent.ConcurrentLinkedQueue<javax.mail.Message[]> . poll ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
