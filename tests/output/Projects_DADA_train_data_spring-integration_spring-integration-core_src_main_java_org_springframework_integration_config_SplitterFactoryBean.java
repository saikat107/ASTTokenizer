<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.MessageHandler org.springframework.integration.config.MessageHandler ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.Object , STRING ) ; AbstractMessageSplitter org.springframework.integration.config.AbstractMessageSplitter = this . extractTypeIfPossible ( java.lang.Object , AbstractMessageSplitter .class ) ; if ( org.springframework.integration.config.AbstractMessageSplitter == null ) { this . checkForIllegalTarget ( java.lang.Object , java.lang.String ) ; org.springframework.integration.config.AbstractMessageSplitter = this . org.springframework.integration.config.AbstractMessageSplitter ( java.lang.Object , java.lang.String ) ; this . org.springframework.integration.config.AbstractMessageSplitter ( org.springframework.integration.config.AbstractMessageSplitter ) ; } else { Assert . isTrue ( ! StringUtils . hasText ( java.lang.String ) , STRING + STRING ) ; this . org.springframework.integration.config.AbstractMessageSplitter ( org.springframework.integration.config.AbstractMessageSplitter ) ; if ( java.lang.Object instanceof MessageHandler ) { return ( MessageHandler ) java.lang.Object ; } } return org.springframework.integration.config.AbstractMessageSplitter ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.config.AbstractMessageSplitter org.springframework.integration.config.AbstractMessageSplitter ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return ( StringUtils . hasText ( java.lang.String ) ) ? new MethodInvokingSplitter ( java.lang.Object , java.lang.String ) : new MethodInvokingSplitter ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.MessageHandler org.springframework.integration.config.MessageHandler ( Expression org.springframework.integration.config.Expression ) { return this . org.springframework.integration.config.AbstractMessageSplitter ( new ExpressionEvaluatingSplitter ( org.springframework.integration.config.Expression ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.MessageHandler org.springframework.integration.config.MessageHandler ( ) { return this . org.springframework.integration.config.AbstractMessageSplitter ( new DefaultMessageSplitter ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.config.AbstractMessageSplitter org.springframework.integration.config.AbstractMessageSplitter ( AbstractMessageSplitter org.springframework.integration.config.AbstractMessageSplitter ) { this . void ( org.springframework.integration.config.AbstractMessageSplitter ) ; return org.springframework.integration.config.AbstractMessageSplitter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( AbstractMessageProducingHandler org.springframework.integration.config.AbstractMessageProducingHandler ) { return org.springframework.integration.config.AbstractMessageProducingHandler instanceof AbstractMessageSplitter || ( this . java.lang.Boolean == null && this . java.lang.String == null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( AbstractMessageProducingHandler org.springframework.integration.config.AbstractMessageProducingHandler ) { if ( this . java.lang.Long != null ) { org.springframework.integration.config.AbstractMessageProducingHandler . setSendTimeout ( this . java.lang.Long ) ; } if ( this . java.lang.Boolean != null ) { if ( org.springframework.integration.config.AbstractMessageProducingHandler instanceof AbstractReplyProducingMessageHandler ) { ( ( AbstractReplyProducingMessageHandler ) org.springframework.integration.config.AbstractMessageProducingHandler ) . setRequiresReply ( this . java.lang.Boolean ) ; } else if ( this . java.lang.Boolean && logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.integration.config.AbstractMessageProducingHandler . getComponentName ( ) + STRING ) ; } } if ( ! ( org.springframework.integration.config.AbstractMessageProducingHandler instanceof AbstractMessageSplitter ) ) { Assert . isNull ( this . java.lang.Boolean , STRING + STRING ) ; Assert . isNull ( this . java.lang.String , STRING + STRING ) ; } else { AbstractMessageSplitter org.springframework.integration.config.AbstractMessageSplitter = ( AbstractMessageSplitter ) org.springframework.integration.config.AbstractMessageProducingHandler ; if ( this . java.lang.String != null ) { Assert . isInstanceOf ( DefaultMessageSplitter .class , org.springframework.integration.config.AbstractMessageSplitter , STRING + STRING ) ; ( ( DefaultMessageSplitter ) org.springframework.integration.config.AbstractMessageSplitter ) . setDelimiters ( this . java.lang.String ) ; } if ( this . java.lang.Boolean != null ) { org.springframework.integration.config.AbstractMessageSplitter . setApplySequence ( this . java.lang.Boolean ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<? extends org.springframework.integration.config.MessageHandler> < ? extends MessageHandler > java.lang.Class<? extends org.springframework.integration.config.MessageHandler> ( ) { return AbstractMessageSplitter .class ; }  <METHOD_END>
