<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { super( STRING , java.lang.String , java.lang.Object ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override < T > void void ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) { java.lang.Object java.lang.Object = java.lang.Object ( evaluateValueFromTarget ( java.lang.Object , java.lang.Class<T> ) ) ; java.lang.Object java.lang.Object = java.lang.Object ( getValueFromTarget ( java.lang.Object ) ) ; if ( ! ObjectUtils . nullSafeEquals ( java.lang.Object , java.lang.Object ) ) { throw new PatchException ( STRING + path + STRING ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.Double || java.lang.Object instanceof java.lang.Float ) { java.lang.Object = java.math.BigDecimal . java.math.BigDecimal ( ( ( java.lang.Number ) java.lang.Object ) . double ( ) ) ; } else if ( java.lang.Object instanceof java.lang.Number ) { java.lang.Object = java.math.BigInteger . java.math.BigInteger ( ( ( java.lang.Number ) java.lang.Object ) . long ( ) ) ; } return java.lang.Object ; }  <METHOD_END>
