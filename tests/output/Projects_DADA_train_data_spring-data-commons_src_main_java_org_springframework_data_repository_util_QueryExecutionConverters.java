<METHOD_START> private void ( ) {}  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; for ( org.springframework.data.repository.util.QueryExecutionConverters.WrapperType org.springframework.data.repository.util.QueryExecutionConverters.WrapperType : java.util.Set<org.springframework.data.repository.util.QueryExecutionConverters.WrapperType> ) { if ( org.springframework.data.repository.util.QueryExecutionConverters.WrapperType . getType ( ) . isAssignableFrom ( java.lang.Class<> ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; for ( org.springframework.data.repository.util.QueryExecutionConverters.WrapperType org.springframework.data.repository.util.QueryExecutionConverters.WrapperType : java.util.Set<org.springframework.data.repository.util.QueryExecutionConverters.WrapperType> ) { if ( org.springframework.data.repository.util.QueryExecutionConverters.WrapperType . getType ( ) . isAssignableFrom ( java.lang.Class<> ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { for ( org.springframework.data.repository.util.QueryExecutionConverters.WrapperType org.springframework.data.repository.util.QueryExecutionConverters.WrapperType : java.util.Set<org.springframework.data.repository.util.QueryExecutionConverters.WrapperType> ) { if ( org.springframework.data.repository.util.QueryExecutionConverters.WrapperType . getType ( ) . isAssignableFrom ( java.lang.Class<> ) ) { return org.springframework.data.repository.util.QueryExecutionConverters.WrapperType . boolean ( ) ; } } return false ; }  <METHOD_END>
<METHOD_START> public static java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( ) { return java.util.Collections . java.util.Set<java.lang.Class<?>> ( java.util.Set<java.lang.Class<?>> ) ; }  <METHOD_END>
<METHOD_START> public static void void ( ConfigurableConversionService org.springframework.data.repository.util.ConfigurableConversionService ) { Assert . notNull ( org.springframework.data.repository.util.ConfigurableConversionService , STRING ) ; org.springframework.data.repository.util.ConfigurableConversionService . removeConvertible ( java.util.Collection .class , java.lang.Object .class ) ; if ( boolean ) { org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( new org.springframework.data.repository.util.QueryExecutionConverters.NullableWrapperToGuavaOptionalConverter ( org.springframework.data.repository.util.ConfigurableConversionService ) ) ; } if ( boolean ) { org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( new org.springframework.data.repository.util.QueryExecutionConverters.NullableWrapperToJdk8OptionalConverter ( org.springframework.data.repository.util.ConfigurableConversionService ) ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( new org.springframework.data.repository.util.QueryExecutionConverters.NullableWrapperToCompletableFutureConverter ( org.springframework.data.repository.util.ConfigurableConversionService ) ) ; } if ( boolean ) { org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( new org.springframework.data.repository.util.QueryExecutionConverters.NullableWrapperToScalaOptionConverter ( org.springframework.data.repository.util.ConfigurableConversionService ) ) ; } if ( boolean ) { org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( new org.springframework.data.repository.util.QueryExecutionConverters.NullableWrapperToJavaslangOptionConverter ( org.springframework.data.repository.util.ConfigurableConversionService ) ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( JavaslangCollections . FromJavaConverter . INSTANCE ) ; } org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( new org.springframework.data.repository.util.QueryExecutionConverters.NullableWrapperToFutureConverter ( org.springframework.data.repository.util.ConfigurableConversionService ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null || ! boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return java.lang.Object ; } for ( Converter < java.lang.Object , java.lang.Object > org.springframework.data.repository.util.Converter<java.lang.Object,java.lang.Object> : java.util.Set<org.springframework.data.repository.util.Converter<java.lang.Object,java.lang.Object>> ) { java.lang.Object java.lang.Object = org.springframework.data.repository.util.Converter<java.lang.Object,java.lang.Object> . convert ( java.lang.Object ) ; if ( java.lang.Object != java.lang.Object ) { return java.lang.Object ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected void ( ConversionService org.springframework.data.repository.util.ConversionService , java.lang.Object java.lang.Object ) { Assert . notNull ( org.springframework.data.repository.util.ConversionService , STRING ) ; Assert . notNull ( java.lang.Object , STRING ) ; this . org.springframework.data.repository.util.ConversionService = org.springframework.data.repository.util.ConversionService ; this . java.lang.Object = java.lang.Object ; this . java.lang.Iterable<java.lang.Class<?>> = java.util.Collections . java.util.Set<java.lang.Class<?>> ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.data.repository.util.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.data.repository.util.ConvertiblePair> ( ) { return Streamable . of ( java.lang.Iterable<java.lang.Class<?>> ) . map ( it -> new ConvertiblePair ( NullableWrapper .class , it ) ) . stream ( ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.Set<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.data.repository.util.TypeDescriptor , TypeDescriptor org.springframework.data.repository.util.TypeDescriptor ) { NullableWrapper org.springframework.data.repository.util.NullableWrapper = ( NullableWrapper ) java.lang.Object ; java.lang.Object java.lang.Object = org.springframework.data.repository.util.NullableWrapper . getValue ( ) ; return java.lang.Object == null ? java.lang.Object : java.lang.Object ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> public void ( ConversionService org.springframework.data.repository.util.ConversionService ) { super( org.springframework.data.repository.util.ConversionService , Optional . absent ( ) , java.util.Collections . java.util.Set<java.lang.Class<org.springframework.data.repository.util.Optional>> ( Optional .class ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return Optional . of ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.repository.util.QueryExecutionConverters.WrapperType org.springframework.data.repository.util.QueryExecutionConverters.WrapperType ( ) { return org.springframework.data.repository.util.QueryExecutionConverters.WrapperType . org.springframework.data.repository.util.QueryExecutionConverters.WrapperType ( Optional .class ) ; }  <METHOD_END>
<METHOD_START> public void ( ConversionService org.springframework.data.repository.util.ConversionService ) { super( org.springframework.data.repository.util.ConversionService , java . util . java.util.Optional . java.util.Optional<java.lang.Object> ( ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java . util . java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.repository.util.QueryExecutionConverters.WrapperType org.springframework.data.repository.util.QueryExecutionConverters.WrapperType ( ) { return org.springframework.data.repository.util.QueryExecutionConverters.WrapperType . org.springframework.data.repository.util.QueryExecutionConverters.WrapperType ( java . util . java.util.Optional .class ) ; }  <METHOD_END>
<METHOD_START> public void ( ConversionService org.springframework.data.repository.util.ConversionService ) { super( org.springframework.data.repository.util.ConversionService , new AsyncResult <> ( null ) , java.util.Arrays . java.util.List<java.lang.Class<? extends java.lang.Object>> ( java.util.concurrent.Future .class , ListenableFuture .class ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return new AsyncResult <> ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void ( ConversionService org.springframework.data.repository.util.ConversionService ) { super( org.springframework.data.repository.util.ConversionService , java.util.concurrent.CompletableFuture . java.util.concurrent.CompletableFuture<java.lang.Object> ( null ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object instanceof java.util.concurrent.CompletableFuture ? java.lang.Object : java.util.concurrent.CompletableFuture . java.util.concurrent.CompletableFuture<java.lang.Object> ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.repository.util.QueryExecutionConverters.WrapperType org.springframework.data.repository.util.QueryExecutionConverters.WrapperType ( ) { return org.springframework.data.repository.util.QueryExecutionConverters.WrapperType . org.springframework.data.repository.util.QueryExecutionConverters.WrapperType ( java.util.concurrent.CompletableFuture .class ) ; }  <METHOD_END>
<METHOD_START> public void ( ConversionService org.springframework.data.repository.util.ConversionService ) { super( org.springframework.data.repository.util.ConversionService , Option . empty ( ) , java.util.Collections . java.util.Set<java.lang.Class<org.springframework.data.repository.util.Option>> ( Option .class ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return Option . apply ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.repository.util.QueryExecutionConverters.WrapperType org.springframework.data.repository.util.QueryExecutionConverters.WrapperType ( ) { return org.springframework.data.repository.util.QueryExecutionConverters.WrapperType . org.springframework.data.repository.util.QueryExecutionConverters.WrapperType ( Option .class ) ; }  <METHOD_END>
<METHOD_START> public void ( ConversionService org.springframework.data.repository.util.ConversionService ) { super( org.springframework.data.repository.util.ConversionService , javaslang . control . Option . none ( ) , java.util.Collections . java.util.Set<java.lang.Class<javaslang.control.Option>> ( javaslang . javaslang . javaslang .class ) ); }  <METHOD_END>
<METHOD_START> public static org.springframework.data.repository.util.QueryExecutionConverters.WrapperType org.springframework.data.repository.util.QueryExecutionConverters.WrapperType ( ) { return org.springframework.data.repository.util.QueryExecutionConverters.WrapperType . org.springframework.data.repository.util.QueryExecutionConverters.WrapperType ( javaslang . javaslang . javaslang .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return javaslang . control . Option . of ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object instanceof Optional ? ( ( Optional < ? > ) java.lang.Object ) . orNull ( ) : java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object instanceof java . util . java.util.Optional ? ( ( java . util . java.util.Optional<?> < ? > ) java.lang.Object ) . orElse ( null ) : java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Option<java.lang.Object> < java.lang.Object > org.springframework.data.repository.util.Option<java.lang.Object> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object instanceof Option ? ( ( Option < ? > ) java.lang.Object ) . getOrElse ( org.springframework.data.repository.util.Function0<java.lang.Object> ) : java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof javaslang . javaslang . javaslang ) { return ( ( javaslang . javaslang . javaslang < java.lang.Object > ) java.lang.Object ) . getOrElse ( ( ) null ) ; } if ( java.lang.Object instanceof Traversable ) { return JavaslangCollections . ToJavaConverter . INSTANCE . convert ( java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.repository.util.QueryExecutionConverters.WrapperType org.springframework.data.repository.util.QueryExecutionConverters.WrapperType ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new org.springframework.data.repository.util.QueryExecutionConverters.WrapperType ( java.lang.Class<> , org.springframework.data.repository.util.QueryExecutionConverters.WrapperType.Cardinality . org.springframework.data.repository.util.QueryExecutionConverters.WrapperType.Cardinality ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.repository.util.QueryExecutionConverters.WrapperType org.springframework.data.repository.util.QueryExecutionConverters.WrapperType ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new org.springframework.data.repository.util.QueryExecutionConverters.WrapperType ( java.lang.Class<> , org.springframework.data.repository.util.QueryExecutionConverters.WrapperType.Cardinality . org.springframework.data.repository.util.QueryExecutionConverters.WrapperType.Cardinality ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.repository.util.QueryExecutionConverters.WrapperType org.springframework.data.repository.util.QueryExecutionConverters.WrapperType ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new org.springframework.data.repository.util.QueryExecutionConverters.WrapperType ( java.lang.Class<> , org.springframework.data.repository.util.QueryExecutionConverters.WrapperType.Cardinality . org.springframework.data.repository.util.QueryExecutionConverters.WrapperType.Cardinality ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { return org.springframework.data.repository.util.QueryExecutionConverters.WrapperType.Cardinality . boolean ( org.springframework.data.repository.util.QueryExecutionConverters.WrapperType.Cardinality . org.springframework.data.repository.util.QueryExecutionConverters.WrapperType.Cardinality ) ; }  <METHOD_END>
