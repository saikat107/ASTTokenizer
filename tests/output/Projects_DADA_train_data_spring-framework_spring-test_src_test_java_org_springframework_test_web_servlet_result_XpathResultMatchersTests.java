<METHOD_START> @ Test public void void ( ) java.lang.Exception { new XpathResultMatchers ( STRING , null ) . node ( Matchers . notNullValue ( ) ) . match ( org.springframework.test.web.servlet.result.StubMvcResult ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new XpathResultMatchers ( STRING , null ) . node ( Matchers . nullValue ( ) ) . match ( org.springframework.test.web.servlet.result.StubMvcResult ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new XpathResultMatchers ( STRING , null ) . exists ( ) . match ( org.springframework.test.web.servlet.result.StubMvcResult ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new XpathResultMatchers ( STRING , null ) . exists ( ) . match ( org.springframework.test.web.servlet.result.StubMvcResult ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new XpathResultMatchers ( STRING , null ) . doesNotExist ( ) . match ( org.springframework.test.web.servlet.result.StubMvcResult ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new XpathResultMatchers ( STRING , null ) . doesNotExist ( ) . match ( org.springframework.test.web.servlet.result.StubMvcResult ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new XpathResultMatchers ( STRING , null ) . nodeCount ( NUMBER ) . match ( org.springframework.test.web.servlet.result.StubMvcResult ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new XpathResultMatchers ( STRING , null ) . nodeCount ( NUMBER ) . match ( org.springframework.test.web.servlet.result.StubMvcResult ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new XpathResultMatchers ( STRING , null ) . string ( STRING ) . match ( org.springframework.test.web.servlet.result.StubMvcResult ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new XpathResultMatchers ( STRING , null ) . string ( STRING ) . match ( org.springframework.test.web.servlet.result.StubMvcResult ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new XpathResultMatchers ( STRING , null ) . number ( NUMBER ) . match ( org.springframework.test.web.servlet.result.StubMvcResult ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new XpathResultMatchers ( STRING , null ) . number ( NUMBER ) . match ( org.springframework.test.web.servlet.result.StubMvcResult ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new XpathResultMatchers ( STRING , null ) . booleanValue ( true ) . match ( org.springframework.test.web.servlet.result.StubMvcResult ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { new XpathResultMatchers ( STRING , null ) . booleanValue ( false ) . match ( org.springframework.test.web.servlet.result.StubMvcResult ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + STRING ; byte [] byte[] = java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.test.web.servlet.result.MockHttpServletResponse . addHeader ( STRING , STRING ) ; StreamUtils . copy ( byte[] , org.springframework.test.web.servlet.result.MockHttpServletResponse . getOutputStream ( ) ) ; StubMvcResult org.springframework.test.web.servlet.result.StubMvcResult = new StubMvcResult ( null , null , null , null , null , null , org.springframework.test.web.servlet.result.MockHttpServletResponse ) ; new XpathResultMatchers ( STRING , null ) . string ( STRING ) . match ( org.springframework.test.web.servlet.result.StubMvcResult ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.servlet.result.StubMvcResult org.springframework.test.web.servlet.result.StubMvcResult ( ) java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.test.web.servlet.result.MockHttpServletResponse . addHeader ( STRING , STRING ) ; org.springframework.test.web.servlet.result.MockHttpServletResponse . getWriter ( ) . print ( new java.lang.String ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; return new StubMvcResult ( null , null , null , null , null , null , org.springframework.test.web.servlet.result.MockHttpServletResponse ) ; }  <METHOD_END>
