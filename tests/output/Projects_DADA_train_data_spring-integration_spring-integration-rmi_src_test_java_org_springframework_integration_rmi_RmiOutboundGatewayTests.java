<METHOD_START> @ Before public void void ( ) { this . org.springframework.integration.rmi.RmiOutboundGateway . setOutputChannel ( this . org.springframework.integration.rmi.QueueChannel ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.rmi.RemoteException { RmiServiceExporter org.springframework.integration.rmi.RmiServiceExporter = new RmiServiceExporter ( ) ; org.springframework.integration.rmi.RmiServiceExporter . setService ( new org.springframework.integration.rmi.RmiOutboundGatewayTests.TestExchanger ( ) ) ; org.springframework.integration.rmi.RmiServiceExporter . setServiceInterface ( RequestReplyExchanger .class ) ; org.springframework.integration.rmi.RmiServiceExporter . setServiceName ( STRING ) ; org.springframework.integration.rmi.RmiServiceExporter . setRegistryPort ( int ) ; org.springframework.integration.rmi.RmiServiceExporter . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.rmi.RemoteException { org.springframework.integration.rmi.RmiOutboundGateway . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.rmi.Message<?> = org.springframework.integration.rmi.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.rmi.Message<> ) ; assertEquals ( STRING , org.springframework.integration.rmi.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.rmi.RemoteException { GenericMessage < java.lang.String > org.springframework.integration.rmi.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; try { org.springframework.integration.rmi.RmiOutboundGateway . handleMessage ( org.springframework.integration.rmi.GenericMessage<java.lang.String> ) ; fail ( STRING ) ; } catch ( MessagingException org.springframework.integration.rmi.MessagingException ) { assertSame ( org.springframework.integration.rmi.GenericMessage<java.lang.String> , org.springframework.integration.rmi.MessagingException . getFailedMessage ( ) ) ; assertEquals ( STRING , ( ( MessagingException ) org.springframework.integration.rmi.MessagingException . getCause ( ) ) . getFailedMessage ( ) . getPayload ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.rmi.RemoteException { Message < java.lang.String > org.springframework.integration.rmi.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.rmi.RmiOutboundGateway . handleMessage ( org.springframework.integration.rmi.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.rmi.Message<?> = org.springframework.integration.rmi.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.rmi.Message<> ) ; assertEquals ( STRING , org.springframework.integration.rmi.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.rmi.RemoteException { org.springframework.integration.rmi.RmiOutboundGatewayTests.NonSerializableTestObject org.springframework.integration.rmi.RmiOutboundGatewayTests.NonSerializableTestObject = new org.springframework.integration.rmi.RmiOutboundGatewayTests.NonSerializableTestObject ( ) ; Message < ? > org.springframework.integration.rmi.Message<?> = new GenericMessage < org.springframework.integration.rmi.RmiOutboundGatewayTests.NonSerializableTestObject > ( org.springframework.integration.rmi.RmiOutboundGatewayTests.NonSerializableTestObject ) ; org.springframework.integration.rmi.RmiOutboundGateway . handleMessage ( org.springframework.integration.rmi.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.rmi.RemoteException { Message < java.lang.String > org.springframework.integration.rmi.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , new org.springframework.integration.rmi.RmiOutboundGatewayTests.NonSerializableTestObject ( ) ) . build ( ) ; org.springframework.integration.rmi.RmiOutboundGateway . handleMessage ( org.springframework.integration.rmi.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.rmi.Message<?> = org.springframework.integration.rmi.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.rmi.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; assertNotNull ( org.springframework.integration.rmi.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.rmi.RemoteException { RmiOutboundGateway org.springframework.integration.rmi.RmiOutboundGateway = new RmiOutboundGateway ( STRING ) ; boolean boolean = false ; try { org.springframework.integration.rmi.RmiOutboundGateway . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( MessageHandlingException org.springframework.integration.rmi.MessageHandlingException ) { assertEquals ( RemoteLookupFailureException .class , org.springframework.integration.rmi.MessageHandlingException . getCause ( ) . getClass ( ) ) ; boolean = true ; } assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RmiOutboundGateway org.springframework.integration.rmi.RmiOutboundGateway = new RmiOutboundGateway ( STRING ) ; boolean boolean = false ; try { org.springframework.integration.rmi.RmiOutboundGateway . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( MessageHandlingException org.springframework.integration.rmi.MessageHandlingException ) { assertEquals ( RemoteLookupFailureException .class , org.springframework.integration.rmi.MessageHandlingException . getCause ( ) . getClass ( ) ) ; boolean = true ; } assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.rmi.RemoteException { RmiOutboundGateway org.springframework.integration.rmi.RmiOutboundGateway = new RmiOutboundGateway ( STRING ) ; boolean boolean = false ; try { org.springframework.integration.rmi.RmiOutboundGateway . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( MessageHandlingException org.springframework.integration.rmi.MessageHandlingException ) { assertEquals ( RemoteLookupFailureException .class , org.springframework.integration.rmi.MessageHandlingException . getCause ( ) . getClass ( ) ) ; boolean = true ; } assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.rmi.Message<?> < ? > org.springframework.integration.rmi.Message<?> ( Message < ? > org.springframework.integration.rmi.Message<?> ) { if ( org.springframework.integration.rmi.Message<> . getPayload ( ) . equals ( STRING ) ) { new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.rmi.Message<?> ) { throw new java.lang.RuntimeException ( STRING ) ; } } . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; } return new GenericMessage < java.lang.String > ( org.springframework.integration.rmi.Message<> . getPayload ( ) . toString ( ) . toUpperCase ( ) , org.springframework.integration.rmi.Message<> . getHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.rmi.Message<?> ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
