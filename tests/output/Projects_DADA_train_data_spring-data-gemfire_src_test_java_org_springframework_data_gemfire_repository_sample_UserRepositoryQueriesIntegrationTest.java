<METHOD_START> protected static void void ( final java.lang.Iterable<org.springframework.data.gemfire.repository.sample.User> < User > java.lang.Iterable<org.springframework.data.gemfire.repository.sample.User> , final java.lang.String ... java.lang.String[] ) { assertNotNull ( STRING , java.lang.Iterable<org.springframework.data.gemfire.repository.sample.User> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( java.lang.String[] . int ) ; for ( User org.springframework.data.gemfire.repository.sample.User : java.lang.Iterable<org.springframework.data.gemfire.repository.sample.User> ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.gemfire.repository.sample.User . getUsername ( ) ) ; } assertEquals ( java.lang.String[] . int , java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.repository.sample.User org.springframework.data.gemfire.repository.sample.User ( final java.lang.String java.lang.String ) { return org.springframework.data.gemfire.repository.sample.User ( java.lang.String , true ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.repository.sample.User org.springframework.data.gemfire.repository.sample.User ( final java.lang.String java.lang.String , final java.lang.Boolean java.lang.Boolean ) { return org.springframework.data.gemfire.repository.sample.User ( java.lang.String , java.lang.Boolean , java.util.Calendar . java.util.Calendar ( ) , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.repository.sample.User org.springframework.data.gemfire.repository.sample.User ( final java.lang.String java.lang.String , final java.lang.Boolean java.lang.Boolean , final java.util.Calendar java.util.Calendar , final java.lang.String java.lang.String ) { User org.springframework.data.gemfire.repository.sample.User = new User ( java.lang.String ) ; org.springframework.data.gemfire.repository.sample.User . setActive ( java.lang.Boolean ) ; org.springframework.data.gemfire.repository.sample.User . setEmail ( java.lang.String ) ; org.springframework.data.gemfire.repository.sample.User . setSince ( java.util.Calendar ) ; return org.springframework.data.gemfire.repository.sample.User ; }  <METHOD_END>
<METHOD_START> protected static int int ( final java.lang.Integer java.lang.Integer ) { return ( java.lang.Integer == null ? NUMBER : java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.repository.sample.Region ) ; if ( org.springframework.data.gemfire.repository.sample.Region . isEmpty ( ) ) { org.springframework.data.gemfire.repository.sample.UserRepository . save ( org.springframework.data.gemfire.repository.sample.User ( STRING , true ) ) ; org.springframework.data.gemfire.repository.sample.UserRepository . save ( org.springframework.data.gemfire.repository.sample.User ( STRING , true ) ) ; org.springframework.data.gemfire.repository.sample.UserRepository . save ( org.springframework.data.gemfire.repository.sample.User ( STRING , false ) ) ; org.springframework.data.gemfire.repository.sample.UserRepository . save ( org.springframework.data.gemfire.repository.sample.User ( STRING , false ) ) ; org.springframework.data.gemfire.repository.sample.UserRepository . save ( org.springframework.data.gemfire.repository.sample.User ( STRING , true ) ) ; org.springframework.data.gemfire.repository.sample.UserRepository . save ( org.springframework.data.gemfire.repository.sample.User ( STRING , false ) ) ; org.springframework.data.gemfire.repository.sample.UserRepository . save ( org.springframework.data.gemfire.repository.sample.User ( STRING , true ) ) ; org.springframework.data.gemfire.repository.sample.UserRepository . save ( org.springframework.data.gemfire.repository.sample.User ( STRING , false ) ) ; org.springframework.data.gemfire.repository.sample.UserRepository . save ( org.springframework.data.gemfire.repository.sample.User ( STRING , false ) ) ; assertFalse ( org.springframework.data.gemfire.repository.sample.Region . isEmpty ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.repository.sample.Region . size ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.gemfire.repository.sample.User> < User > java.util.List<org.springframework.data.gemfire.repository.sample.User> = org.springframework.data.gemfire.repository.sample.UserRepository . findDistinctByActiveTrue ( ) ; void ( java.util.List<org.springframework.data.gemfire.repository.sample.User> , STRING , STRING , STRING , STRING ) ; java.util.List<org.springframework.data.gemfire.repository.sample.User> < User > java.util.List<org.springframework.data.gemfire.repository.sample.User> = org.springframework.data.gemfire.repository.sample.UserRepository . findDistinctByActiveFalse ( ) ; void ( java.util.List<org.springframework.data.gemfire.repository.sample.User> , STRING , STRING , STRING , STRING , STRING ) ; java.util.List<org.springframework.data.gemfire.repository.sample.User> < User > java.util.List<org.springframework.data.gemfire.repository.sample.User> = org.springframework.data.gemfire.repository.sample.UserRepository . findDistinctByUsernameLike ( STRING ) ; void ( java.util.List<org.springframework.data.gemfire.repository.sample.User> , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = org.springframework.data.gemfire.repository.sample.UserRepository . countUsersByUsernameLike ( STRING ) ; assertEquals ( NUMBER , int ( java.lang.Integer ) ) ; java.lang.Integer = org.springframework.data.gemfire.repository.sample.UserRepository . countUsersByUsernameLike ( STRING ) ; assertEquals ( NUMBER , int ( java.lang.Integer ) ) ; java.lang.Integer = org.springframework.data.gemfire.repository.sample.UserRepository . countUsersByUsernameLike ( STRING ) ; assertNotNull ( java.lang.Integer ) ; assertEquals ( NUMBER , int ( java.lang.Integer ) ) ; }  <METHOD_END>
