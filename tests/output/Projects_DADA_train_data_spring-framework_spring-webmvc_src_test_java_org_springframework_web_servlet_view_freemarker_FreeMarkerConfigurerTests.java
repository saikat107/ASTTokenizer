<METHOD_START> @ Test ( expected = java.io.IOException .class ) public void void ( ) java.lang.Exception { FreeMarkerConfigurationFactoryBean org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurationFactoryBean = new FreeMarkerConfigurationFactoryBean ( ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurationFactoryBean . setConfigLocation ( new FileSystemResource ( STRING ) ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurationFactoryBean . setFreemarkerSettings ( java.util.Properties ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurationFactoryBean . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FreeMarkerConfigurationFactoryBean org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurationFactoryBean = new FreeMarkerConfigurationFactoryBean ( ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurationFactoryBean . setTemplateLoaderPath ( STRING ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurationFactoryBean . afterPropertiesSet ( ) ; Configuration org.springframework.web.servlet.view.freemarker.Configuration = org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurationFactoryBean . getObject ( ) ; assertTrue ( org.springframework.web.servlet.view.freemarker.Configuration . getTemplateLoader ( ) instanceof SpringTemplateLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { FreeMarkerConfigurationFactoryBean org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurationFactoryBean = new FreeMarkerConfigurationFactoryBean ( ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurationFactoryBean . setTemplateLoaderPath ( STRING ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurationFactoryBean . setFreemarkerSettings ( java.util.Properties ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurationFactoryBean . setResourceLoader ( new ResourceLoader ( ) { @ java.lang.Override public org.springframework.web.servlet.view.freemarker.Resource org.springframework.web.servlet.view.freemarker.Resource ( java.lang.String java.lang.String ) { if ( ! ( STRING . boolean ( java.lang.String ) || STRING . boolean ( java.lang.String ) ) ) { throw new java.lang.IllegalArgumentException ( java.lang.String ) ; } return new ByteArrayResource ( STRING . byte[] ( ) , STRING ) ; } @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return java.lang.Class<? extends > ( ) . java.lang.ClassLoader ( ) ; } } ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurationFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurationFactoryBean . getObject ( ) , instanceOf ( Configuration .class ) ) ; Configuration org.springframework.web.servlet.view.freemarker.Configuration = org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurationFactoryBean . getObject ( ) ; Template org.springframework.web.servlet.view.freemarker.Template = org.springframework.web.servlet.view.freemarker.Configuration . getTemplate ( STRING ) ; assertEquals ( STRING , FreeMarkerTemplateUtils . processTemplateIntoString ( org.springframework.web.servlet.view.freemarker.Template , new java.util.HashMap ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.view.freemarker.Resource org.springframework.web.servlet.view.freemarker.Resource ( java.lang.String java.lang.String ) { if ( ! ( STRING . boolean ( java.lang.String ) || STRING . boolean ( java.lang.String ) ) ) { throw new java.lang.IllegalArgumentException ( java.lang.String ) ; } return new ByteArrayResource ( STRING . byte[] ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return java.lang.Class<? extends > ( ) . java.lang.ClassLoader ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.web.servlet.view.freemarker.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.web.servlet.view.freemarker.RootBeanDefinition = new RootBeanDefinition ( SpringTemplateLoader .class ) ; org.springframework.web.servlet.view.freemarker.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( new DefaultResourceLoader ( ) ) ; org.springframework.web.servlet.view.freemarker.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( STRING ) ; RootBeanDefinition org.springframework.web.servlet.view.freemarker.RootBeanDefinition = new RootBeanDefinition ( Configuration .class ) ; org.springframework.web.servlet.view.freemarker.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.view.freemarker.RootBeanDefinition ) ; org.springframework.web.servlet.view.freemarker.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.web.servlet.view.freemarker.RootBeanDefinition ) ; org.springframework.web.servlet.view.freemarker.DefaultListableBeanFactory . getBean ( Configuration .class ) ; }  <METHOD_END>
