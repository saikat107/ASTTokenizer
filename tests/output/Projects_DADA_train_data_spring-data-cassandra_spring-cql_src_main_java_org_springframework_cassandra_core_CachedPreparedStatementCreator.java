<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.PreparedStatement org.springframework.cassandra.core.PreparedStatement ( Session org.springframework.cassandra.core.Session ) throws org.springframework.cassandra.core.DriverException { java.lang.String java.lang.String = java.lang.String . java.lang.String ( org.springframework.cassandra.core.Session . getLoggedKeyspace ( ) ) . concat ( STRING ) . concat ( this . java.lang.String ) ; org.springframework.cassandra.core.Logger . debug ( STRING , org.springframework.cassandra.core.Session . getLoggedKeyspace ( ) ) ; java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> < java.lang.String , PreparedStatement > java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> = java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> ( org.springframework.cassandra.core.Session ) ; return org.springframework.cassandra.core.PreparedStatement ( org.springframework.cassandra.core.Session , java.lang.String , java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> < java.lang.String , PreparedStatement > java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> ( Session org.springframework.cassandra.core.Session ) { java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> < java.lang.String , PreparedStatement > java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> = java.util.Map<org.springframework.cassandra.core.Session,java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement>> . get ( org.springframework.cassandra.core.Session ) ; if ( java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> == null ) { synchronized ( org.springframework.cassandra.core.Session ) { if ( java.util.Map<org.springframework.cassandra.core.Session,java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement>> . containsKey ( org.springframework.cassandra.core.Session ) ) { java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> = java.util.Map<org.springframework.cassandra.core.Session,java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement>> . get ( org.springframework.cassandra.core.Session ) ; } else { java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,org.springframework.cassandra.core.PreparedStatement> < java.lang.String , PreparedStatement > ( ) ; java.util.Map<org.springframework.cassandra.core.Session,java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement>> . put ( org.springframework.cassandra.core.Session , java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> ) ; } } } return java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.cassandra.core.PreparedStatement org.springframework.cassandra.core.PreparedStatement ( Session org.springframework.cassandra.core.Session , java.lang.String java.lang.String , java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> < java.lang.String , PreparedStatement > java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> ) { PreparedStatement org.springframework.cassandra.core.PreparedStatement = java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> . get ( java.lang.String ) ; if ( org.springframework.cassandra.core.PreparedStatement == null ) { synchronized ( java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> ) { if ( java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> . containsKey ( java.lang.String ) ) { org.springframework.cassandra.core.Logger . debug ( STRING ) ; org.springframework.cassandra.core.PreparedStatement = java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> . get ( java.lang.String ) ; } else { org.springframework.cassandra.core.Logger . debug ( STRING ) ; org.springframework.cassandra.core.PreparedStatement = org.springframework.cassandra.core.Session . prepare ( this . java.lang.String ) ; java.util.Map<java.lang.String,org.springframework.cassandra.core.PreparedStatement> . put ( java.lang.String , org.springframework.cassandra.core.PreparedStatement ) ; } } } return org.springframework.cassandra.core.PreparedStatement ; }  <METHOD_END>
