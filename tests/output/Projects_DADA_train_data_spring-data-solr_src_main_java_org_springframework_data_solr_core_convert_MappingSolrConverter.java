<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return StringUtils . endsWith ( java.lang.String , java.lang.String ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . isTrue ( boolean ( java.lang.String , java.lang.String ) , STRING ) ; return StringUtils . removeEnd ( java.lang.String , java.lang.String ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.lang.String + java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return StringUtils . startsWith ( java.lang.String , java.lang.String ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . isTrue ( boolean ( java.lang.String , java.lang.String ) , STRING ) ; return StringUtils . removeStart ( java.lang.String , java.lang.String ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.lang.String ( java.lang.String ) + java.lang.String ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition ( java.lang.String java.lang.String ) { if ( StringUtils . startsWith ( java.lang.String , Criteria . WILDCARD ) ) { return org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition . org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition ; } else { return org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition . org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition ; } }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return StringUtils . remove ( java.lang.String , Criteria . WILDCARD ) ; }  <METHOD_END>
<METHOD_START> public abstract boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public abstract java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public abstract java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public void ( MappingContext < ? extends SolrPersistentEntity < ? > , SolrPersistentProperty > org.springframework.data.solr.core.convert.MappingContext<? extends org.springframework.data.solr.core.convert.SolrPersistentEntity<?>,org.springframework.data.solr.core.convert.SolrPersistentProperty> ) { Assert . notNull ( org.springframework.data.solr.core.convert.MappingContext<,org.springframework.data.solr.core.convert.SolrPersistentProperty> , STRING ) ; this . org.springframework.data.solr.core.convert.MappingContext<? extends org.springframework.data.solr.core.convert.SolrPersistentEntity<?>,org.springframework.data.solr.core.convert.SolrPersistentProperty> = org.springframework.data.solr.core.convert.MappingContext<,org.springframework.data.solr.core.convert.SolrPersistentProperty> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.convert.MappingContext<? extends org.springframework.data.solr.core.convert.SolrPersistentEntity<?>,org.springframework.data.solr.core.convert.SolrPersistentProperty> < ? extends SolrPersistentEntity < ? > , SolrPersistentProperty > org.springframework.data.solr.core.convert.MappingContext<? extends org.springframework.data.solr.core.convert.SolrPersistentEntity<?>,org.springframework.data.solr.core.convert.SolrPersistentProperty> ( ) { return org.springframework.data.solr.core.convert.MappingContext<,org.springframework.data.solr.core.convert.SolrPersistentProperty> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S , R > java.util.List<R> < R > java.util.List<R> ( SolrDocumentList org.springframework.data.solr.core.convert.SolrDocumentList , java.lang.Class<R> < R > java.lang.Class<R> ) { if ( org.springframework.data.solr.core.convert.SolrDocumentList == null ) { return java.util.Collections . java.util.List<R> ( ) ; } java.util.List<R> < R > java.util.List<R> = new java.util.ArrayList <> ( org.springframework.data.solr.core.convert.SolrDocumentList . size ( ) ) ; TypeInformation < R > org.springframework.data.solr.core.convert.TypeInformation<R> = ClassTypeInformation . from ( java.lang.Class<R> ) ; for ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> : org.springframework.data.solr.core.convert.SolrDocumentList ) { java.util.List<R> . boolean ( java.util.List ( org.springframework.data.solr.core.convert.TypeInformation<R> , java.util.Map<java.lang.String,> ) ) ; } return java.util.List<R> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < R > R R ( java.lang.Class<R> < R > java.lang.Class<R> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { return java.util.List ( ClassTypeInformation . from ( java.lang.Class<R> ) , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < S > S S ( TypeInformation < S > org.springframework.data.solr.core.convert.TypeInformation<S> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { if ( java.util.Map<java.lang.String,> == null ) { return null ; } Assert . notNull ( org.springframework.data.solr.core.convert.TypeInformation<S> , STRING ) ; java.lang.Class<S> < S > java.lang.Class<S> = org.springframework.data.solr.core.convert.TypeInformation<S> . getType ( ) ; if ( hasCustomReadTarget ( java.util.Map<java.lang.String,> . java.lang.Class<? extends java.util.Map> ( ) , java.lang.Class<S> ) ) { return convert ( java.util.Map<java.lang.String,> , java.lang.Class<S> ) ; } SolrPersistentEntity < S > org.springframework.data.solr.core.convert.SolrPersistentEntity<S> = ( SolrPersistentEntity < S > ) org.springframework.data.solr.core.convert.MappingContext<,org.springframework.data.solr.core.convert.SolrPersistentProperty> . getPersistentEntity ( java.lang.Class<S> ) . get ( ) ; return java.lang.Object ( org.springframework.data.solr.core.convert.SolrPersistentEntity<S> , java.util.Map<java.lang.String,> , null ) ; }  <METHOD_END>
<METHOD_START> private < S > S S ( final SolrPersistentEntity < S > org.springframework.data.solr.core.convert.SolrPersistentEntity<S> , final java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , java.lang.Object java.lang.Object ) { ParameterValueProvider < SolrPersistentProperty > org.springframework.data.solr.core.convert.ParameterValueProvider<org.springframework.data.solr.core.convert.SolrPersistentProperty> = org.springframework.data.solr.core.convert.ParameterValueProvider<org.springframework.data.solr.core.convert.SolrPersistentProperty> ( org.springframework.data.solr.core.convert.SolrPersistentEntity<S> , java.util.Map<java.lang.String,> , java.lang.Object ) ; EntityInstantiator org.springframework.data.solr.core.convert.EntityInstantiator = org.springframework.data.solr.core.convert.EntityInstantiators . getInstantiatorFor ( org.springframework.data.solr.core.convert.SolrPersistentEntity<S> ) ; final S S = org.springframework.data.solr.core.convert.EntityInstantiator . createInstance ( org.springframework.data.solr.core.convert.SolrPersistentEntity<S> , org.springframework.data.solr.core.convert.ParameterValueProvider<org.springframework.data.solr.core.convert.SolrPersistentProperty> ) ; final PersistentPropertyAccessor org.springframework.data.solr.core.convert.PersistentPropertyAccessor = new ConvertingPropertyAccessor ( org.springframework.data.solr.core.convert.SolrPersistentEntity<S> . getPropertyAccessor ( S ) , getConversionService ( ) ) ; org.springframework.data.solr.core.convert.SolrPersistentEntity<S> . doWithProperties ( ( PropertyHandler < SolrPersistentProperty > ) persistentProperty -> { if ( entity . isConstructorArgument ( persistentProperty ) ) { return; } Optional < Object > o = getValue ( persistentProperty , source , instance ) ; if ( o . isPresent ( ) ) { if ( o . get ( ) instanceof Collection && ! persistentProperty . isCollectionLike ( ) ) { Collection < ? > c = ( Collection < ? > ) o . get ( ) ; if ( ! c . isEmpty ( ) ) { if ( c . size ( ) == NUMBER ) { accessor . setProperty ( persistentProperty , Optional . ofNullable ( c . iterator ( ) . next ( ) ) ) ; } else { throw new MappingException ( String . format ( STRING , c , persistentProperty . getFieldName ( ) , persistentProperty . getName ( ) ) ) ; } } } else { accessor . setProperty ( persistentProperty , o ) ; } } } ) ; return S ; }  <METHOD_END>
<METHOD_START> protected java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( SolrPersistentProperty org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { org.springframework.data.solr.core.convert.MappingSolrConverter.SolrPropertyValueProvider org.springframework.data.solr.core.convert.MappingSolrConverter.SolrPropertyValueProvider = new org.springframework.data.solr.core.convert.MappingSolrConverter.SolrPropertyValueProvider ( java.lang.Object , java.lang.Object ) ; return org.springframework.data.solr.core.convert.MappingSolrConverter.SolrPropertyValueProvider . java.util.Optional ( org.springframework.data.solr.core.convert.SolrPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.core.convert.ParameterValueProvider<org.springframework.data.solr.core.convert.SolrPersistentProperty> < SolrPersistentProperty > org.springframework.data.solr.core.convert.ParameterValueProvider<org.springframework.data.solr.core.convert.SolrPersistentProperty> ( SolrPersistentEntity < ? > org.springframework.data.solr.core.convert.SolrPersistentEntity<?> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , java.lang.Object java.lang.Object ) { org.springframework.data.solr.core.convert.MappingSolrConverter.SolrPropertyValueProvider org.springframework.data.solr.core.convert.MappingSolrConverter.SolrPropertyValueProvider = new org.springframework.data.solr.core.convert.MappingSolrConverter.SolrPropertyValueProvider ( java.util.Map<java.lang.String,> , java.lang.Object ) ; return new PersistentEntityParameterValueProvider <> ( org.springframework.data.solr.core.convert.SolrPersistentEntity<> , org.springframework.data.solr.core.convert.MappingSolrConverter.SolrPropertyValueProvider , java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public void void ( java.lang.Object java.lang.Object , @ java.lang.SuppressWarnings ( STRING ) java.util.Map java.util.Map ) { if ( java.lang.Object == null ) { return; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( hasCustomWriteTarget ( java.lang.Class<> , SolrInputDocument .class ) && canConvert ( java.lang.Class<> , SolrInputDocument .class ) ) { SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = convert ( java.lang.Object , SolrInputDocument .class ) ; java.util.Map . void ( org.springframework.data.solr.core.convert.SolrInputDocument ) ; } else { SolrPersistentEntity < ? > org.springframework.data.solr.core.convert.SolrPersistentEntity<?> = org.springframework.data.solr.core.convert.MappingContext<,org.springframework.data.solr.core.convert.SolrPersistentProperty> . getPersistentEntity ( java.lang.Class<> ) . get ( ) ; void ( java.lang.Object , java.util.Map , org.springframework.data.solr.core.convert.SolrPersistentEntity<> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( java.lang.Object java.lang.Object , final java.util.Map java.util.Map , SolrPersistentEntity < ? > org.springframework.data.solr.core.convert.SolrPersistentEntity<?> ) { final PersistentPropertyAccessor org.springframework.data.solr.core.convert.PersistentPropertyAccessor = new ConvertingPropertyAccessor ( org.springframework.data.solr.core.convert.SolrPersistentEntity<> . getPropertyAccessor ( java.lang.Object ) , getConversionService ( ) ) ; org.springframework.data.solr.core.convert.SolrPersistentEntity<> . doWithProperties ( ( PropertyHandler < SolrPersistentProperty > ) persistentProperty -> { Optional < Object > value = accessor . getProperty ( persistentProperty ) ; if ( ! value . isPresent ( ) || persistentProperty . isReadonly ( ) ) { return; } if ( persistentProperty . containsWildcard ( ) && ! persistentProperty . isMap ( ) ) { throw new IllegalArgumentException ( STRING + persistentProperty . getFieldName ( ) + STRING ) ; } Collection < SolrInputField > fields ; if ( persistentProperty . isMap ( ) && persistentProperty . containsWildcard ( ) ) { fields = writeWildcardMapPropertyToTarget ( target , persistentProperty , ( Map < ? , ? > ) value . get ( ) ) ; } else { fields = writeRegularPropertyToTarget ( target , persistentProperty , value . get ( ) ) ; } if ( persistentProperty . isBoosted ( ) ) { for ( SolrInputField field : fields ) { field . setBoost ( persistentProperty . getBoost ( ) ) ; } } } ) ; if ( org.springframework.data.solr.core.convert.SolrPersistentEntity<> . isBoosted ( ) && java.util.Map instanceof SolrInputDocument ) { ( ( SolrInputDocument ) java.util.Map ) . setDocumentBoost ( org.springframework.data.solr.core.convert.SolrPersistentEntity<> . getBoost ( ) ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.data.solr.core.convert.SolrInputField> < SolrInputField > java.util.Collection<org.springframework.data.solr.core.convert.SolrInputField> ( java.util.Map<? super java.lang.Object,? super java.lang.Object> < ? super java.lang.Object , ? super java.lang.Object > java.util.Map<? super java.lang.Object,? super java.lang.Object> , SolrPersistentProperty org.springframework.data.solr.core.convert.SolrPersistentProperty , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { TypeInformation < ? > org.springframework.data.solr.core.convert.TypeInformation<?> = org.springframework.data.solr.core.convert.SolrPersistentProperty . getTypeInformation ( ) . getMapValueType ( ) . get ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.solr.core.convert.TypeInformation<> . getType ( ) ; java.lang.String java.lang.String = org.springframework.data.solr.core.convert.SolrPersistentProperty . getFieldName ( ) ; java.util.Collection<org.springframework.data.solr.core.convert.SolrInputField> < SolrInputField > java.util.Collection<org.springframework.data.solr.core.convert.SolrInputField> = new java.util.ArrayList<org.springframework.data.solr.core.convert.SolrInputField> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> : java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<,> . getValue ( ) ; java.lang.String java.lang.String = java.util.Map.Entry<,> . getKey ( ) . java.lang.String ( ) ; if ( org.springframework.data.solr.core.convert.SolrPersistentProperty . isDynamicProperty ( ) ) { java.lang.String = org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition . org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition ( java.lang.String ) . java.lang.String ( java.lang.String , java.lang.String ) ; } SolrInputField org.springframework.data.solr.core.convert.SolrInputField = new SolrInputField ( java.lang.String ) ; if ( java.lang.Object instanceof java.lang.Iterable ) { for ( java.lang.Object java.lang.Object : ( java.lang.Iterable<?> < ? > ) java.lang.Object ) { org.springframework.data.solr.core.convert.SolrInputField . addValue ( java.lang.Object ( java.lang.Class<> , java.lang.Object ) , NUMBER ) ; } } else { if ( java.lang.Class<> . boolean ( ) ) { for ( java.lang.Object java.lang.Object : ( java.lang.Object [] ) java.lang.Object ) { org.springframework.data.solr.core.convert.SolrInputField . addValue ( java.lang.Object ( java.lang.Class<> , java.lang.Object ) , NUMBER ) ; } } else { org.springframework.data.solr.core.convert.SolrInputField . addValue ( java.lang.Object ( java.lang.Class<> , java.lang.Object ) , NUMBER ) ; } } java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.String , org.springframework.data.solr.core.convert.SolrInputField ) ; java.util.Collection<org.springframework.data.solr.core.convert.SolrInputField> . add ( org.springframework.data.solr.core.convert.SolrInputField ) ; } return java.util.Collection<org.springframework.data.solr.core.convert.SolrInputField> ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.data.solr.core.convert.SolrInputField> < SolrInputField > java.util.Collection<org.springframework.data.solr.core.convert.SolrInputField> ( final java.util.Map<? super java.lang.Object,? super java.lang.Object> < ? super java.lang.Object , ? super java.lang.Object > java.util.Map<? super java.lang.Object,? super java.lang.Object> , SolrPersistentProperty org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object java.lang.Object ) { SolrInputField org.springframework.data.solr.core.convert.SolrInputField = new SolrInputField ( org.springframework.data.solr.core.convert.SolrPersistentProperty . getFieldName ( ) ) ; if ( org.springframework.data.solr.core.convert.SolrPersistentProperty . isCollectionLike ( ) ) { java.util.Collection<?> < ? > java.util.Collection<?> = java.util.Collection<?> ( java.lang.Object ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { if ( java.lang.Object != null ) { org.springframework.data.solr.core.convert.SolrInputField . addValue ( java.lang.Object ( org.springframework.data.solr.core.convert.SolrPersistentProperty . getType ( ) , java.lang.Object ) , NUMBER ) ; } } } else { org.springframework.data.solr.core.convert.SolrInputField . setValue ( java.lang.Object ( org.springframework.data.solr.core.convert.SolrPersistentProperty . getType ( ) , java.lang.Object ) , NUMBER ) ; } java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( org.springframework.data.solr.core.convert.SolrPersistentProperty . getFieldName ( ) , org.springframework.data.solr.core.convert.SolrInputField ) ; return java.util.Collections . java.util.Set ( org.springframework.data.solr.core.convert.SolrInputField ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object java.lang.Object ) { if ( java.lang.Class<> == null || java.lang.Object == null ) { return java.lang.Object ; } if ( isSimpleType ( java.lang.Class<> ) ) { return java.lang.Object ; } else if ( hasCustomWriteTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = getCustomWriteTargetType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; if ( canConvert ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<> ) ) { return convert ( java.lang.Object , java.lang.Class<> ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private static java.util.Collection<?> < ? > java.util.Collection<?> ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.util.Collection ) { return ( java.util.Collection<?> < ? > ) java.lang.Object ; } return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ? CollectionUtils . arrayToList ( java.lang.Object ) : java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.data.solr.core.convert.ApplicationContext ) throws org.springframework.data.solr.core.convert.BeansException { this . org.springframework.data.solr.core.convert.ApplicationContext = org.springframework.data.solr.core.convert.ApplicationContext ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < T > java.util.Optional<T> < T > java.util.Optional<T> ( SolrPersistentProperty org.springframework.data.solr.core.convert.SolrPersistentProperty ) { if ( java.lang.Object instanceof java.util.Map<?,?> < ? , ? > ) { return java.util.Optional . java.util.Optional ( java.lang.Object ( ( java.util.Map<java.lang.String,?> < java.lang.String , ? > ) java.lang.Object , org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object ) ) ; } return java.util.Optional . java.util.Optional ( java.lang.Object ( java.lang.Object , org.springframework.data.solr.core.convert.SolrPersistentProperty . getTypeInformation ( ) , this . java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > T T ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , SolrPersistentProperty org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object java.lang.Object ) { if ( java.util.Map<java.lang.String,> == null ) { return null ; } if ( org.springframework.data.solr.core.convert.SolrPersistentProperty . containsWildcard ( ) ) { return ( T ) java.lang.Object ( java.util.Map<java.lang.String,> , org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object ) ; } if ( org.springframework.data.solr.core.convert.SolrPersistentProperty . isScoreProperty ( ) ) { return ( T ) java.lang.Object ( java.util.Map<java.lang.String,> , org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object ) ; } return java.lang.Object ( java.util.Map<java.lang.String,> . get ( org.springframework.data.solr.core.convert.SolrPersistentProperty . getFieldName ( ) ) , org.springframework.data.solr.core.convert.SolrPersistentProperty . getTypeInformation ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > T T ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , SolrPersistentProperty org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object java.lang.Object ) { return ( T ) java.util.Map<java.lang.String,> . get ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > T T ( java.lang.Object java.lang.Object , TypeInformation < ? > org.springframework.data.solr.core.convert.TypeInformation<?> , java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return null ; } Assert . notNull ( org.springframework.data.solr.core.convert.TypeInformation<> , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.solr.core.convert.TypeInformation<> . getType ( ) ; if ( hasCustomReadTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<> ) ) { return ( T ) convert ( java.lang.Object , java.lang.Class<> ) ; } java.lang.Object java.lang.Object = null ; if ( java.lang.Object instanceof SolrInputField ) { java.lang.Object = ( ( SolrInputField ) java.lang.Object ) . getValue ( ) ; } else { java.lang.Object = java.lang.Object ; } if ( java.lang.Object instanceof java.util.Collection ) { return ( T ) java.lang.Object ( ( java.util.Collection<?> < ? > ) java.lang.Object , org.springframework.data.solr.core.convert.TypeInformation<> , java.lang.Object ) ; } else if ( canConvert ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<> ) ) { return ( T ) convert ( java.lang.Object , java.lang.Class<> ) ; } return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , SolrPersistentProperty org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object java.lang.Object ) { org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition = org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition . org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition ( org.springframework.data.solr.core.convert.SolrPersistentProperty . getFieldName ( ) ) ; if ( org.springframework.data.solr.core.convert.SolrPersistentProperty . isMap ( ) ) { return java.lang.Object ( java.util.Map<java.lang.String,> , org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object , org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition ) ; } else if ( org.springframework.data.solr.core.convert.SolrPersistentProperty . isCollectionLike ( ) ) { return java.lang.Object ( java.util.Map<java.lang.String,> , org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object , org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition ) ; } else { for ( java.util.Map . java.util.Map.Entry<java.lang.String,?> < java.lang.String , ? > java.util.Map.Entry<java.lang.String,?> : java.util.Map<java.lang.String,> . java.util.Set<java.util.Map.Entry<java.lang.String,>> ( ) ) { if ( org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition . boolean ( org.springframework.data.solr.core.convert.SolrPersistentProperty . getFieldName ( ) , java.util.Map.Entry<java.lang.String,> . java.lang.String ( ) ) ) { return java.util.Optional<java.lang.Object> ( org.springframework.data.solr.core.convert.SolrPersistentProperty , java.util.Map.Entry<java.lang.String,> . getValue ( ) , java.lang.Object ) . orElse ( null ) ; } } } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , SolrPersistentProperty org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object java.lang.Object , org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.solr.core.convert.SolrPersistentProperty . getComponentType ( ) . orElse ( java.lang.Object .class ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,?> < java.lang.String , ? > java.util.Map.Entry<java.lang.String,?> : java.util.Map<java.lang.String,> . java.util.Set<java.util.Map.Entry<java.lang.String,>> ( ) ) { if ( ! org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition . boolean ( org.springframework.data.solr.core.convert.SolrPersistentProperty . getFieldName ( ) , java.util.Map.Entry<java.lang.String,> . java.lang.String ( ) ) ) { continue; } java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,> . getValue ( ) ; if ( java.lang.Object instanceof java.lang.Iterable ) { for ( java.lang.Object java.lang.Object : ( java.lang.Iterable<?> < ? > ) java.lang.Object ) { java.util.List<java.lang.Object> . boolean ( java.lang.Object ( org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object , java.lang.Object , java.lang.Class<> ) ) ; } } else { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.data.solr.core.convert.SolrPersistentProperty , java.util.Map.Entry<java.lang.String,> . getValue ( ) , java.lang.Object , java.lang.Class<> ) ; if ( java.lang.Object instanceof java.util.Collection ) { java.util.List<java.lang.Object> . boolean ( ( java.util.Collection<?> < ? > ) java.lang.Object ) ; } else { java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; } } } return java.util.List<java.lang.Object> . boolean ( ) ? null : ( org.springframework.data.solr.core.convert.SolrPersistentProperty . isArray ( ) ? java.util.List<java.lang.Object> . java.lang.Object[] ( ) : java.util.List<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , SolrPersistentProperty org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object java.lang.Object , org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition ) { java.util.Optional<org.springframework.data.solr.core.convert.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.solr.core.convert.TypeInformation<?>> = org.springframework.data.solr.core.convert.SolrPersistentProperty . getTypeInformation ( ) . getMapValueType ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.util.Optional<org.springframework.data.solr.core.convert.TypeInformation<?>> . get ( ) . getType ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> ; if ( java.util.Optional<org.springframework.data.solr.core.convert.TypeInformation<?>> . get ( ) . getTypeArguments ( ) != null && ! java.util.Optional<org.springframework.data.solr.core.convert.TypeInformation<?>> . get ( ) . getTypeArguments ( ) . isEmpty ( ) ) { java.lang.Class<?> = java.util.Optional<org.springframework.data.solr.core.convert.TypeInformation<?>> . get ( ) . getTypeArguments ( ) . get ( NUMBER ) . getType ( ) ; } else { java.lang.Class<?> = java.lang.Object .class ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ; if ( java.util.LinkedHashMap .class . boolean ( org.springframework.data.solr.core.convert.SolrPersistentProperty . getActualType ( ) ) ) { java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; } else { java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; } for ( java.util.Map . java.util.Map.Entry<java.lang.String,?> < java.lang.String , ? > java.util.Map.Entry<java.lang.String,?> : java.util.Map<java.lang.String,> . java.util.Set<java.util.Map.Entry<java.lang.String,>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,> . java.lang.String ( ) ; if ( ! org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition . boolean ( org.springframework.data.solr.core.convert.SolrPersistentProperty . getFieldName ( ) , java.lang.String ) ) { continue; } if ( org.springframework.data.solr.core.convert.SolrPersistentProperty . isDynamicProperty ( ) ) { java.lang.String = org.springframework.data.solr.core.convert.MappingSolrConverter.WildcardPosition . java.lang.String ( org.springframework.data.solr.core.convert.SolrPersistentProperty . getFieldName ( ) , java.lang.String ) ; } java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,> . getValue ( ) ; if ( java.lang.Object instanceof java.lang.Iterable ) { if ( java.lang.Class<> . boolean ( ) || ClassUtils . isAssignable ( java.lang.Class<> , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; for ( java.lang.Object java.lang.Object : ( java.lang.Iterable<?> < ? > ) java.lang.Object ) { java.util.List<java.lang.Object> . boolean ( java.lang.Object ( org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object , java.lang.Object , java.lang.Class<> ) ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , ( java.lang.Class<> . boolean ( ) ? java.util.List<java.lang.Object> . java.lang.Object[] ( ) : java.util.List<java.lang.Object> ) ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> + STRING + org.springframework.data.solr.core.convert.SolrPersistentProperty . getName ( ) + STRING + org.springframework.data.solr.core.convert.SolrPersistentProperty . getFieldName ( ) + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } } else { if ( java.lang.Class<> . boolean ( ) || ClassUtils . isAssignable ( java.lang.Class<> , java.util.List .class ) ) { java.util.ArrayList<java.lang.Object> < java.lang.Object > java.util.ArrayList<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( NUMBER ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object , java.lang.Object , java.lang.Class<> ) ; java.util.ArrayList<java.lang.Object> . boolean ( java.lang.Object ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , ( java.lang.Class<> . boolean ( ) ? java.util.ArrayList<java.lang.Object> . java.lang.Object[] ( ) : java.util.ArrayList<java.lang.Object> ) ) ; } else { java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = java.util.Optional<java.lang.Object> ( org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object , java.lang.Object ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.util.Optional<java.lang.Object> . boolean ( ) ? java.util.Optional<java.lang.Object> . java.lang.Object ( ) : null ) ; } } } return java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) ? null : java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( SolrPersistentProperty org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = java.util.Optional<java.lang.Object> ( org.springframework.data.solr.core.convert.SolrPersistentProperty , java.lang.Object , java.lang.Object ) ; if ( ! java.util.Optional<java.lang.Object> . boolean ( ) ) { return null ; } if ( java.lang.Class<> == null || java.lang.Class<> . boolean ( java.lang.Object .class ) ) { return java.util.Optional<java.lang.Object> . java.lang.Object ( ) ; } if ( canConvert ( java.util.Optional<java.lang.Object> . java.lang.Object ( ) . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<> ) ) { return convert ( java.util.Optional<java.lang.Object> . java.lang.Object ( ) , java.lang.Class<> ) ; } return java.util.Optional<java.lang.Object> . java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.util.Collection<?> < ? > java.util.Collection<?> , TypeInformation < ? > org.springframework.data.solr.core.convert.TypeInformation<?> , java.lang.Object java.lang.Object ) { Assert . notNull ( org.springframework.data.solr.core.convert.TypeInformation<> , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.solr.core.convert.TypeInformation<> . getType ( ) ; if ( CollectionUtils . isEmpty ( java.util.Collection<> ) ) { return java.util.Collection<> ; } java.lang.Class<?> = java.util.Collection .class . boolean ( java.lang.Class<> ) ? java.lang.Class<> : java.util.List .class ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ; if ( org.springframework.data.solr.core.convert.TypeInformation<> . getType ( ) . isArray ( ) ) { java.util.Collection<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; } else { java.util.Collection<java.lang.Object> = CollectionFactory . createCollection ( java.lang.Class<> , java.util.Collection<> . int ( ) ) ; } TypeInformation < ? > org.springframework.data.solr.core.convert.TypeInformation<?> = org.springframework.data.solr.core.convert.TypeInformation<> . isCollectionLike ( ) ? org.springframework.data.solr.core.convert.TypeInformation<> . getComponentType ( ) . get ( ) : org.springframework.data.solr.core.convert.TypeInformation<> ; for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { java.util.Collection<java.lang.Object> . boolean ( java.lang.Object ( java.lang.Object , org.springframework.data.solr.core.convert.TypeInformation<> , java.lang.Object ) ) ; } return org.springframework.data.solr.core.convert.TypeInformation<> . getType ( ) . isArray ( ) ? java.lang.Object ( org.springframework.data.solr.core.convert.TypeInformation<> , java.util.Collection<java.lang.Object> ) : java.util.Collection<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( TypeInformation < ? > org.springframework.data.solr.core.convert.TypeInformation<?> , java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ) { java.lang.Object [] java.lang.Object[] = ( java.lang.Object [] ) java . lang . reflect . java.lang.reflect.Array . java.lang.Object ( org.springframework.data.solr.core.convert.TypeInformation<> . getActualType ( ) . getType ( ) , java.util.Collection<java.lang.Object> . int ( ) ) ; java.lang.Object [] java.lang.Object[] = java.util.Collection<java.lang.Object> . java.lang.Object[] ( ) ; java.lang.System . void ( java.lang.Object[] , NUMBER , java.lang.Object[] , NUMBER , java.lang.Object[] . int ) ; return java.lang.Object[] ; }  <METHOD_END>
