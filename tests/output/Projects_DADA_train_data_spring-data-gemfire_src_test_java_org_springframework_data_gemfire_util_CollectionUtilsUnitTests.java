<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) ) ; java.util.Set<java.lang.Integer> < java.lang.Integer > java.util.Set<java.lang.Integer> = new java.util.HashSet<java.lang.Integer> <> ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) ) ; java.util.List<java.lang.Integer> = CollectionUtils . addAll ( java.util.List<java.lang.Integer> , java.util.Set<java.lang.Integer> ) ; assertThat ( java.util.List<java.lang.Integer> ) . isNotNull ( ) ; assertThat ( java.util.List<java.lang.Integer> . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<java.lang.Integer> ) . isEqualTo ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<java.lang.Integer> < java.lang.Integer > java.util.Set<java.lang.Integer> = new java.util.HashSet<java.lang.Integer> <> ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) ) ; java.util.Set<java.lang.Integer> < java.lang.Integer > java.util.Set<java.lang.Integer> = new java.util.HashSet<java.lang.Integer> <> ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; java.util.Set<java.lang.Integer> = CollectionUtils . addAll ( java.util.Set<java.lang.Integer> , java.util.Set<java.lang.Integer> ) ; assertThat ( java.util.Set<java.lang.Integer> ) . isNotNull ( ) ; assertThat ( java.util.Set<java.lang.Integer> . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Set<java.lang.Integer> ) . contains ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.util.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.util.ExpectedException . expectMessage ( STRING ) ; CollectionUtils . addAll ( null , java.util.Collections . java.util.Set<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) ) ; java.util.Collection<java.lang.Integer> = CollectionUtils . addAll ( java.util.Collection<java.lang.Integer> , java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; assertThat ( java.util.Collection<java.lang.Integer> ) . isNotNull ( ) ; assertThat ( java.util.Collection<java.lang.Integer> . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Collection<java.lang.Integer> ) . contains ( NUMBER , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) ) ; java.util.Collection<java.lang.Integer> = CollectionUtils . addAll ( java.util.Collection<java.lang.Integer> , null ) ; assertThat ( java.util.Collection<java.lang.Integer> ) . isNotNull ( ) ; assertThat ( java.util.Collection<java.lang.Integer> . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Collection<java.lang.Integer> ) . contains ( NUMBER , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = { STRING , STRING , STRING } ; java.util.Set<?> < ? > java.util.Set<?> = CollectionUtils . asSet ( java.lang.Object[] ) ; assertThat ( java.util.Set<> ) . isNotNull ( ) ; assertThat ( java.util.Set<> . int ( ) ) . isEqualTo ( java.lang.Object[] . int ) ; assertThat ( java.util.Set<> . boolean ( java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = { NUMBER , NUMBER , NUMBER } ; java.util.Set<?> < ? > java.util.Set<?> = CollectionUtils . asSet ( java.lang.Object[] ) ; assertThat ( java.util.Set<> ) . isNotNull ( ) ; assertThat ( java.util.Set<> . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Set<> . boolean ( java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.UnsupportedOperationException .class ) public void void ( ) { java.util.Set<java.lang.Integer> < java.lang.Integer > java.util.Set<java.lang.Integer> = CollectionUtils . asSet ( NUMBER , NUMBER , NUMBER ) ; assertThat ( java.util.Set<java.lang.Integer> ) . isNotNull ( ) ; assertThat ( java.util.Set<java.lang.Integer> . int ( ) ) . isEqualTo ( NUMBER ) ; try { java.util.Set<java.lang.Integer> . boolean ( NUMBER ) ; java.util.Set<java.lang.Integer> . boolean ( NUMBER ) ; java.util.Set<java.lang.Integer> . boolean ( NUMBER ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { assertThat ( java.util.Set<java.lang.Integer> . int ( ) ) . isEqualTo ( NUMBER ) ; throw java.lang.UnsupportedOperationException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( CollectionUtils . containsAny ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) , NUMBER , NUMBER ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( CollectionUtils . containsAny ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) , NUMBER ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( CollectionUtils . containsAny ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) , ( java.lang.Object [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( CollectionUtils . containsAny ( null , NUMBER ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Iterable<java.lang.Object> < java.lang.Object > java.lang.Iterable<java.lang.Object> = java.util.Collections . java.util.Set<java.lang.Object> ( NUMBER ) ; java.lang.Iterable<java.lang.Object> < java.lang.Object > java.lang.Iterable<java.lang.Object> = java.util.Collections . java.util.Set<java.lang.Object> ( NUMBER ) ; assertThat ( CollectionUtils . defaultIfEmpty ( java.lang.Iterable<java.lang.Object> , java.lang.Iterable<java.lang.Object> ) ) . isSameAs ( java.lang.Iterable<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Iterable<java.lang.Object> < java.lang.Object > java.lang.Iterable<java.lang.Object> = java.util.Collections . java.util.Set<java.lang.Object> ( ) ; java.lang.Iterable<java.lang.Object> < java.lang.Object > java.lang.Iterable<java.lang.Object> = java.util.Collections . java.util.Set<java.lang.Object> ( NUMBER ) ; assertThat ( CollectionUtils . defaultIfEmpty ( java.lang.Iterable<java.lang.Object> , java.lang.Iterable<java.lang.Object> ) ) . isSameAs ( java.lang.Iterable<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Iterable<?> < ? > java.lang.Iterable<?> = java.util.Collections . java.util.Set<java.lang.Integer> ( NUMBER ) ; assertThat ( CollectionUtils . defaultIfEmpty ( null , java.lang.Iterable<> ) ) . isSameAs ( java.lang.Iterable<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( CollectionUtils . defaultIfEmpty ( ( java.lang.Iterable<?> < ? > ) null , null ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Iterable<?> < ? > java.lang.Iterable<?> = CollectionUtils . emptyIterable ( ) ; assertThat ( java.lang.Iterable<> ) . isNotNull ( ) ; assertThat ( java.lang.Iterable<> . java.util.Iterator<> ( ) ) . isNotNull ( ) ; assertThat ( java.lang.Iterable<> . java.util.Iterator<> ( ) . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = mock ( java.util.Enumeration .class , STRING ) ; when ( java.util.Enumeration<java.lang.String> . boolean ( ) ) . thenReturn ( true ) . thenReturn ( true ) . thenReturn ( true ) . thenReturn ( false ) ; when ( java.util.Enumeration<java.lang.String> . java.lang.String ( ) ) . thenReturn ( STRING ) . thenReturn ( STRING ) . thenReturn ( STRING ) . thenThrow ( new java.util.NoSuchElementException ( STRING ) ) ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = CollectionUtils . iterable ( java.util.Enumeration<java.lang.String> ) ; assertThat ( java.lang.Iterable<java.lang.String> ) . isNotNull ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( NUMBER ) ; for ( java.lang.String java.lang.String : java.lang.Iterable<java.lang.String> ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } assertThat ( java.util.List<java.lang.String> ) . isEqualTo ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; verify ( java.util.Enumeration<java.lang.String> , times ( NUMBER ) ) . hasMoreElements ( ) ; verify ( java.util.Enumeration<java.lang.String> , times ( NUMBER ) ) . nextElement ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = mock ( java.util.Iterator .class , STRING ) ; when ( java.util.Iterator<java.lang.String> . boolean ( ) ) . thenReturn ( true ) . thenReturn ( true ) . thenReturn ( true ) . thenReturn ( false ) ; when ( java.util.Iterator<java.lang.String> . java.lang.String ( ) ) . thenReturn ( STRING ) . thenReturn ( STRING ) . thenReturn ( STRING ) . thenThrow ( new java.util.NoSuchElementException ( STRING ) ) ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = CollectionUtils . iterable ( java.util.Iterator<java.lang.String> ) ; assertThat ( java.lang.Iterable<java.lang.String> ) . isNotNull ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( NUMBER ) ; for ( java.lang.String java.lang.String : java.lang.Iterable<java.lang.String> ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } assertThat ( java.util.List<java.lang.String> ) . containsAll ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; verify ( java.util.Iterator<java.lang.String> , times ( NUMBER ) ) . hasNext ( ) ; verify ( java.util.Iterator<java.lang.String> , times ( NUMBER ) ) . next ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<?> < ? > java.util.Collection<?> = mock ( java.util.Collection .class ) ; assertThat ( CollectionUtils . nullSafeCollection ( java.util.Collection<> ) ) . isSameAs ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection java.util.Collection = CollectionUtils . nullSafeCollection ( null ) ; assertThat ( java.util.Collection ) . isNotNull ( ) ; assertThat ( java.util.Collection . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.lang.Iterable<java.lang.Object> < java.lang.Object > java.lang.Iterable<java.lang.Object> = mock ( java.lang.Iterable .class ) ; assertThat ( CollectionUtils . nullSafeIterable ( java.lang.Iterable<java.lang.Object> ) ) . isSameAs ( java.lang.Iterable<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Iterable<java.lang.Object> < java.lang.Object > java.lang.Iterable<java.lang.Object> = CollectionUtils . nullSafeIterable ( null ) ; assertThat ( java.lang.Iterable<java.lang.Object> ) . isNotNull ( ) ; assertThat ( java.lang.Iterable<java.lang.Object> . java.util.Iterator<java.lang.Object> ( ) ) . isNotNull ( ) ; assertThat ( java.lang.Iterable<java.lang.Object> . java.util.Iterator<java.lang.Object> ( ) . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { java.lang.Iterable<java.lang.Object> < java.lang.Object > java.lang.Iterable<java.lang.Object> = CollectionUtils . nullSafeIterable ( null ) ; assertThat ( java.lang.Iterable<java.lang.Object> ) . isNotNull ( ) ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.lang.Iterable<java.lang.Object> . java.util.Iterator<java.lang.Object> ( ) ; assertThat ( java.util.Iterator<java.lang.Object> ) . isNotNull ( ) ; assertThat ( java.util.Iterator<java.lang.Object> . boolean ( ) ) . isFalse ( ) ; try { java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; } catch ( java.util.NoSuchElementException java.util.NoSuchElementException ) { assertThat ( java.util.NoSuchElementException . java.lang.Throwable ( ) ) . isNull ( ) ; try { java.util.Iterator<java.lang.Object> . void ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertThat ( java.lang.IllegalStateException . java.lang.Throwable ( ) ) . isNull ( ) ; throw java.lang.IllegalStateException ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<?> < ? > java.util.List<?> = mock ( java.util.List .class ) ; assertThat ( CollectionUtils . nullSafeList ( java.util.List<> ) ) . isSameAs ( java.util.List<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<?> < ? > java.util.List<?> = CollectionUtils . nullSafeList ( null ) ; assertThat ( java.util.List<> ) . isNotNull ( ) ; assertThat ( java.util.List<> . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = mock ( java.util.Map .class ) ; assertThat ( CollectionUtils . nullSafeMap ( java.util.Map<,> ) ) . isSameAs ( java.util.Map<,> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = CollectionUtils . nullSafeMap ( null ) ; assertThat ( java.util.Map<,> ) . isNotNull ( ) ; assertThat ( java.util.Map<,> . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<?> < ? > java.util.Set<?> = mock ( java.util.Set .class ) ; assertThat ( CollectionUtils . nullSafeSet ( java.util.Set<> ) ) . isSameAs ( java.util.Set<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<?> < ? > java.util.Set<?> = CollectionUtils . nullSafeSet ( null ) ; assertThat ( java.util.Set<> ) . isNotNull ( ) ; assertThat ( java.util.Set<> . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> < java.lang.Integer > ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = CollectionUtils . sort ( java.util.List<java.lang.Integer> ) ; assertThat ( java.util.List<java.lang.Integer> ) . isSameAs ( java.util.List<java.lang.Integer> ) ; assertThat ( java.util.List<java.lang.Integer> ) . isEqualTo ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER , NUMBER ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = CollectionUtils . subList ( java.util.List<java.lang.Integer> , NUMBER , NUMBER ) ; assertThat ( java.util.List<java.lang.Integer> ) . isNotNull ( ) ; assertThat ( java.util.List<java.lang.Integer> ) . isNotSameAs ( java.util.List<java.lang.Integer> ) ; assertThat ( java.util.List<java.lang.Integer> . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<java.lang.Integer> ) . containsAll ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = CollectionUtils . subList ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) ) ; assertThat ( java.util.List<java.lang.Integer> ) . isNotNull ( ) ; assertThat ( java.util.List<java.lang.Integer> . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IndexOutOfBoundsException .class ) public void void ( ) { CollectionUtils . subList ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.util.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.util.ExpectedException . expectMessage ( STRING ) ; CollectionUtils . subList ( null , NUMBER , NUMBER , NUMBER ) ; }  <METHOD_END>
