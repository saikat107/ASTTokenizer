<METHOD_START> void ( WebApplicationContext org.springframework.boot.test.autoconfigure.web.servlet.WebApplicationContext , WebMvcProperties org.springframework.boot.test.autoconfigure.web.servlet.WebMvcProperties ) { this . org.springframework.boot.test.autoconfigure.web.servlet.WebApplicationContext = org.springframework.boot.test.autoconfigure.web.servlet.WebApplicationContext ; this . org.springframework.boot.test.autoconfigure.web.servlet.WebMvcProperties = org.springframework.boot.test.autoconfigure.web.servlet.WebMvcProperties ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( MockMvcBuilder .class ) public org.springframework.boot.test.autoconfigure.web.servlet.DefaultMockMvcBuilder org.springframework.boot.test.autoconfigure.web.servlet.DefaultMockMvcBuilder ( java.util.List<org.springframework.boot.test.autoconfigure.web.servlet.MockMvcBuilderCustomizer> < MockMvcBuilderCustomizer > java.util.List<org.springframework.boot.test.autoconfigure.web.servlet.MockMvcBuilderCustomizer> ) { DefaultMockMvcBuilder org.springframework.boot.test.autoconfigure.web.servlet.DefaultMockMvcBuilder = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.test.autoconfigure.web.servlet.WebApplicationContext ) ; org.springframework.boot.test.autoconfigure.web.servlet.DefaultMockMvcBuilder . addDispatcherServletCustomizer ( new org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration.MockMvcDispatcherServletCustomizer ( this . org.springframework.boot.test.autoconfigure.web.servlet.WebMvcProperties ) ) ; for ( MockMvcBuilderCustomizer org.springframework.boot.test.autoconfigure.web.servlet.MockMvcBuilderCustomizer : java.util.List<org.springframework.boot.test.autoconfigure.web.servlet.MockMvcBuilderCustomizer> ) { org.springframework.boot.test.autoconfigure.web.servlet.MockMvcBuilderCustomizer . customize ( org.springframework.boot.test.autoconfigure.web.servlet.DefaultMockMvcBuilder ) ; } return org.springframework.boot.test.autoconfigure.web.servlet.DefaultMockMvcBuilder ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConfigurationProperties ( prefix = STRING ) public org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer ( ) { return new SpringBootMockMvcBuilderCustomizer ( this . org.springframework.boot.test.autoconfigure.web.servlet.WebApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.test.autoconfigure.web.servlet.MockMvc org.springframework.boot.test.autoconfigure.web.servlet.MockMvc ( MockMvcBuilder org.springframework.boot.test.autoconfigure.web.servlet.MockMvcBuilder ) { return org.springframework.boot.test.autoconfigure.web.servlet.MockMvcBuilder . build ( ) ; }  <METHOD_END>
<METHOD_START> void ( WebMvcProperties org.springframework.boot.test.autoconfigure.web.servlet.WebMvcProperties ) { this . org.springframework.boot.test.autoconfigure.web.servlet.WebMvcProperties = org.springframework.boot.test.autoconfigure.web.servlet.WebMvcProperties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( DispatcherServlet org.springframework.boot.test.autoconfigure.web.servlet.DispatcherServlet ) { org.springframework.boot.test.autoconfigure.web.servlet.DispatcherServlet . setDispatchOptionsRequest ( this . org.springframework.boot.test.autoconfigure.web.servlet.WebMvcProperties . isDispatchOptionsRequest ( ) ) ; org.springframework.boot.test.autoconfigure.web.servlet.DispatcherServlet . setDispatchTraceRequest ( this . org.springframework.boot.test.autoconfigure.web.servlet.WebMvcProperties . isDispatchTraceRequest ( ) ) ; org.springframework.boot.test.autoconfigure.web.servlet.DispatcherServlet . setThrowExceptionIfNoHandlerFound ( this . org.springframework.boot.test.autoconfigure.web.servlet.WebMvcProperties . isThrowExceptionIfNoHandlerFound ( ) ) ; }  <METHOD_END>
