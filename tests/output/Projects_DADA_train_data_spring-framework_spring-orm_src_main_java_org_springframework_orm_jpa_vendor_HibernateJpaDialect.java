<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( EntityManager org.springframework.orm.jpa.vendor.EntityManager , TransactionDefinition org.springframework.orm.jpa.vendor.TransactionDefinition )			throws org.springframework.orm.jpa.vendor.PersistenceException , java.sql.SQLException , org.springframework.orm.jpa.vendor.TransactionException { Session org.springframework.orm.jpa.vendor.Session = org.springframework.orm.jpa.vendor.Session ( org.springframework.orm.jpa.vendor.EntityManager ) ; if ( org.springframework.orm.jpa.vendor.TransactionDefinition . getTimeout ( ) != TransactionDefinition . TIMEOUT_DEFAULT ) { org.springframework.orm.jpa.vendor.Session . getTransaction ( ) . setTimeout ( org.springframework.orm.jpa.vendor.TransactionDefinition . getTimeout ( ) ) ; } boolean boolean = ( org.springframework.orm.jpa.vendor.TransactionDefinition . getIsolationLevel ( ) != TransactionDefinition . ISOLATION_DEFAULT ) ; java.lang.Integer java.lang.Integer = null ; java.sql.Connection java.sql.Connection = null ; if ( boolean || org.springframework.orm.jpa.vendor.TransactionDefinition . isReadOnly ( ) ) { if ( this . boolean ) { java.sql.Connection = org.springframework.orm.jpa.vendor.HibernateJpaDialect.HibernateConnectionHandle . java.sql.Connection ( org.springframework.orm.jpa.vendor.Session ) ; java.lang.Integer = DataSourceUtils . prepareConnectionForTransaction ( java.sql.Connection , org.springframework.orm.jpa.vendor.TransactionDefinition ) ; } else if ( boolean ) { throw new InvalidIsolationLevelException ( java.lang.Class<? extends org.springframework.orm.jpa.vendor.HibernateJpaDialect> ( ) . java.lang.String ( ) + STRING ) ; } } org.springframework.orm.jpa.vendor.EntityManager . getTransaction ( ) . begin ( ) ; FlushMode org.springframework.orm.jpa.vendor.FlushMode = org.springframework.orm.jpa.vendor.FlushMode ( org.springframework.orm.jpa.vendor.Session , org.springframework.orm.jpa.vendor.TransactionDefinition . isReadOnly ( ) ) ; return new org.springframework.orm.jpa.vendor.HibernateJpaDialect.SessionTransactionData ( org.springframework.orm.jpa.vendor.Session , org.springframework.orm.jpa.vendor.FlushMode , java.sql.Connection , java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( EntityManager org.springframework.orm.jpa.vendor.EntityManager , boolean boolean , java.lang.String java.lang.String )			throws org.springframework.orm.jpa.vendor.PersistenceException { Session org.springframework.orm.jpa.vendor.Session = org.springframework.orm.jpa.vendor.Session ( org.springframework.orm.jpa.vendor.EntityManager ) ; FlushMode org.springframework.orm.jpa.vendor.FlushMode = org.springframework.orm.jpa.vendor.FlushMode ( org.springframework.orm.jpa.vendor.Session , boolean ) ; return new org.springframework.orm.jpa.vendor.HibernateJpaDialect.SessionTransactionData ( org.springframework.orm.jpa.vendor.Session , org.springframework.orm.jpa.vendor.FlushMode , null , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.orm.jpa.vendor.FlushMode org.springframework.orm.jpa.vendor.FlushMode ( Session org.springframework.orm.jpa.vendor.Session , boolean boolean ) throws org.springframework.orm.jpa.vendor.PersistenceException { FlushMode org.springframework.orm.jpa.vendor.FlushMode = ( FlushMode ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , org.springframework.orm.jpa.vendor.Session ) ; if ( boolean ) { if ( ! org.springframework.orm.jpa.vendor.FlushMode . equals ( FlushMode . MANUAL ) ) { org.springframework.orm.jpa.vendor.Session . setFlushMode ( FlushMode . MANUAL ) ; return org.springframework.orm.jpa.vendor.FlushMode ; } } else { if ( org.springframework.orm.jpa.vendor.FlushMode . lessThan ( FlushMode . COMMIT ) ) { org.springframework.orm.jpa.vendor.Session . setFlushMode ( FlushMode . AUTO ) ; return org.springframework.orm.jpa.vendor.FlushMode ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { ( ( org.springframework.orm.jpa.vendor.HibernateJpaDialect.SessionTransactionData ) java.lang.Object ) . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.orm.jpa.vendor.ConnectionHandle org.springframework.orm.jpa.vendor.ConnectionHandle ( EntityManager org.springframework.orm.jpa.vendor.EntityManager , boolean boolean )			throws org.springframework.orm.jpa.vendor.PersistenceException , java.sql.SQLException { Session org.springframework.orm.jpa.vendor.Session = org.springframework.orm.jpa.vendor.Session ( org.springframework.orm.jpa.vendor.EntityManager ) ; return new org.springframework.orm.jpa.vendor.HibernateJpaDialect.HibernateConnectionHandle ( org.springframework.orm.jpa.vendor.Session ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.orm.jpa.vendor.DataAccessException org.springframework.orm.jpa.vendor.DataAccessException ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( java.lang.RuntimeException instanceof HibernateException ) { return org.springframework.orm.jpa.vendor.DataAccessException ( ( HibernateException ) java.lang.RuntimeException ) ; } if ( java.lang.RuntimeException instanceof PersistenceException && java.lang.RuntimeException . java.lang.Throwable ( ) instanceof HibernateException ) { return org.springframework.orm.jpa.vendor.DataAccessException ( ( HibernateException ) java.lang.RuntimeException . java.lang.Throwable ( ) ) ; } return EntityManagerFactoryUtils . convertJpaAccessExceptionIfPossible ( java.lang.RuntimeException ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.orm.jpa.vendor.DataAccessException org.springframework.orm.jpa.vendor.DataAccessException ( HibernateException org.springframework.orm.jpa.vendor.HibernateException ) { if ( org.springframework.orm.jpa.vendor.HibernateException instanceof JDBCConnectionException ) { return new DataAccessResourceFailureException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof SQLGrammarException ) { SQLGrammarException org.springframework.orm.jpa.vendor.SQLGrammarException = ( SQLGrammarException ) org.springframework.orm.jpa.vendor.HibernateException ; return new InvalidDataAccessResourceUsageException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) + STRING + org.springframework.orm.jpa.vendor.SQLGrammarException . getSQL ( ) + STRING , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof QueryTimeoutException ) { QueryTimeoutException org.springframework.orm.jpa.vendor.QueryTimeoutException = ( QueryTimeoutException ) org.springframework.orm.jpa.vendor.HibernateException ; return new org . springframework . org.springframework.dao . org.springframework.dao ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) + STRING + org.springframework.orm.jpa.vendor.QueryTimeoutException . getSQL ( ) + STRING , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof LockAcquisitionException ) { LockAcquisitionException org.springframework.orm.jpa.vendor.LockAcquisitionException = ( LockAcquisitionException ) org.springframework.orm.jpa.vendor.HibernateException ; return new CannotAcquireLockException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) + STRING + org.springframework.orm.jpa.vendor.LockAcquisitionException . getSQL ( ) + STRING , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof PessimisticLockException ) { PessimisticLockException org.springframework.orm.jpa.vendor.PessimisticLockException = ( PessimisticLockException ) org.springframework.orm.jpa.vendor.HibernateException ; return new PessimisticLockingFailureException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) + STRING + org.springframework.orm.jpa.vendor.PessimisticLockException . getSQL ( ) + STRING , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof ConstraintViolationException ) { ConstraintViolationException org.springframework.orm.jpa.vendor.ConstraintViolationException = ( ConstraintViolationException ) org.springframework.orm.jpa.vendor.HibernateException ; return new DataIntegrityViolationException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) + STRING + org.springframework.orm.jpa.vendor.ConstraintViolationException . getSQL ( ) + STRING + org.springframework.orm.jpa.vendor.ConstraintViolationException . getConstraintName ( ) + STRING , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof DataException ) { DataException org.springframework.orm.jpa.vendor.DataException = ( DataException ) org.springframework.orm.jpa.vendor.HibernateException ; return new DataIntegrityViolationException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) + STRING + org.springframework.orm.jpa.vendor.DataException . getSQL ( ) + STRING , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof QueryException ) { return new InvalidDataAccessResourceUsageException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof NonUniqueResultException ) { return new IncorrectResultSizeDataAccessException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) , NUMBER , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof NonUniqueObjectException ) { return new DuplicateKeyException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof PropertyValueException ) { return new DataIntegrityViolationException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof PersistentObjectException ) { return new InvalidDataAccessApiUsageException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof TransientObjectException ) { return new InvalidDataAccessApiUsageException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof ObjectDeletedException ) { return new InvalidDataAccessApiUsageException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof UnresolvableObjectException ) { UnresolvableObjectException org.springframework.orm.jpa.vendor.UnresolvableObjectException = ( UnresolvableObjectException ) org.springframework.orm.jpa.vendor.HibernateException ; return new ObjectRetrievalFailureException ( org.springframework.orm.jpa.vendor.UnresolvableObjectException . getEntityName ( ) , org.springframework.orm.jpa.vendor.UnresolvableObjectException . getIdentifier ( ) , org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof WrongClassException ) { WrongClassException org.springframework.orm.jpa.vendor.WrongClassException = ( WrongClassException ) org.springframework.orm.jpa.vendor.HibernateException ; return new ObjectRetrievalFailureException ( org.springframework.orm.jpa.vendor.WrongClassException . getEntityName ( ) , org.springframework.orm.jpa.vendor.WrongClassException . getIdentifier ( ) , org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof StaleObjectStateException ) { StaleObjectStateException org.springframework.orm.jpa.vendor.StaleObjectStateException = ( StaleObjectStateException ) org.springframework.orm.jpa.vendor.HibernateException ; return new ObjectOptimisticLockingFailureException ( org.springframework.orm.jpa.vendor.StaleObjectStateException . getEntityName ( ) , org.springframework.orm.jpa.vendor.StaleObjectStateException . getIdentifier ( ) , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof StaleStateException ) { return new ObjectOptimisticLockingFailureException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof OptimisticEntityLockException ) { return new ObjectOptimisticLockingFailureException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) , org.springframework.orm.jpa.vendor.HibernateException ) ; } if ( org.springframework.orm.jpa.vendor.HibernateException instanceof PessimisticEntityLockException ) { if ( org.springframework.orm.jpa.vendor.HibernateException . getCause ( ) instanceof LockAcquisitionException ) { return new CannotAcquireLockException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) , org.springframework.orm.jpa.vendor.HibernateException . getCause ( ) ) ; } return new PessimisticLockingFailureException ( org.springframework.orm.jpa.vendor.HibernateException . getMessage ( ) , org.springframework.orm.jpa.vendor.HibernateException ) ; } return new JpaSystemException ( org.springframework.orm.jpa.vendor.HibernateException ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.orm.jpa.vendor.Session org.springframework.orm.jpa.vendor.Session ( EntityManager org.springframework.orm.jpa.vendor.EntityManager ) { return org.springframework.orm.jpa.vendor.EntityManager . unwrap ( Session .class ) ; }  <METHOD_END>
<METHOD_START> public void ( Session org.springframework.orm.jpa.vendor.Session , FlushMode org.springframework.orm.jpa.vendor.FlushMode , java.sql.Connection java.sql.Connection , java.lang.Integer java.lang.Integer ) { this . org.springframework.orm.jpa.vendor.Session = org.springframework.orm.jpa.vendor.Session ; this . org.springframework.orm.jpa.vendor.FlushMode = org.springframework.orm.jpa.vendor.FlushMode ; this . java.sql.Connection = java.sql.Connection ; this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { if ( this . org.springframework.orm.jpa.vendor.FlushMode != null ) { this . org.springframework.orm.jpa.vendor.Session . setFlushMode ( this . org.springframework.orm.jpa.vendor.FlushMode ) ; } if ( this . java.sql.Connection != null && this . org.springframework.orm.jpa.vendor.Session . isConnected ( ) ) { java.sql.Connection java.sql.Connection = org.springframework.orm.jpa.vendor.HibernateJpaDialect.HibernateConnectionHandle . java.sql.Connection ( this . org.springframework.orm.jpa.vendor.Session ) ; if ( java.sql.Connection != this . java.sql.Connection ) { LogFactory . getLog ( org.springframework.orm.jpa.vendor.HibernateJpaDialect .class ) . warn ( STRING + STRING + STRING ) ; } DataSourceUtils . resetConnectionAfterTransaction ( java.sql.Connection , this . java.lang.Integer ) ; } }  <METHOD_END>
<METHOD_START> public void ( Session org.springframework.orm.jpa.vendor.Session ) { this . org.springframework.orm.jpa.vendor.Session = org.springframework.orm.jpa.vendor.Session ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.Connection java.sql.Connection ( ) { return java.sql.Connection ( this . org.springframework.orm.jpa.vendor.Session ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.Connection java.sql.Connection ) {		}  <METHOD_END>
<METHOD_START> public static java.sql.Connection java.sql.Connection ( Session org.springframework.orm.jpa.vendor.Session ) { try { if ( java.lang.reflect.Method == null ) { java.lang.reflect.Method = org.springframework.orm.jpa.vendor.Session . getClass ( ) . getMethod ( STRING ) ; } return ( java.sql.Connection ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , org.springframework.orm.jpa.vendor.Session ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new java.lang.IllegalStateException ( STRING , java.lang.NoSuchMethodException ) ; } }  <METHOD_END>
