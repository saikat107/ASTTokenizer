<METHOD_START> public void ( ) { java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( STRING , true ) ; java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( STRING , true ) ; java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( STRING , true ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { demo.tasks.StateMachine<demo.tasks.States,demo.tasks.Events> . sendEvent ( Events . RUN ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( STRING , true ) ; java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( STRING , true ) ; java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( STRING , true ) ; demo.tasks.StateMachine<demo.tasks.States,demo.tasks.Events> . sendEvent ( Events . FIX ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { if ( java.util.Map<java.lang.String,java.lang.Boolean> . boolean ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( java.lang.String , false ) ; } }  <METHOD_END>
<METHOD_START> @ StatesOnTransition ( target = States . T1 ) public void void ( ExtendedState demo.tasks.ExtendedState ) { void ( STRING , demo.tasks.ExtendedState ) ; }  <METHOD_END>
<METHOD_START> @ StatesOnTransition ( target = States . T2 ) public void void ( ExtendedState demo.tasks.ExtendedState ) { void ( STRING , demo.tasks.ExtendedState ) ; }  <METHOD_END>
<METHOD_START> @ StatesOnTransition ( target = States . T3 ) public void void ( ExtendedState demo.tasks.ExtendedState ) { void ( STRING , demo.tasks.ExtendedState ) ; }  <METHOD_END>
<METHOD_START> @ StatesOnTransition ( target = States . AUTOMATIC ) public void void ( ExtendedState demo.tasks.ExtendedState ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = demo.tasks.ExtendedState . getVariables ( ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , true ) ; java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( STRING , true ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , ExtendedState demo.tasks.ExtendedState ) { demo.tasks.Log . info ( STRING + java.lang.String ) ; void ( NUMBER ) ; demo.tasks.ExtendedState . getVariables ( ) . put ( java.lang.String , java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( java.lang.String ) ) ; demo.tasks.Log . info ( STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> private static void void ( long long ) { try { java.lang.Thread . void ( long ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {		} }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.util.Map<java.lang.String,java.lang.Boolean> ; }  <METHOD_END>
