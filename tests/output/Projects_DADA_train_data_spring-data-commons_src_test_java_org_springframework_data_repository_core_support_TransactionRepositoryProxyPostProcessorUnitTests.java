<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new TransactionalRepositoryProxyPostProcessor ( null , STRING , true ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new TransactionalRepositoryProxyPostProcessor ( org.springframework.data.repository.core.support.ListableBeanFactory , null , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RepositoryProxyPostProcessor org.springframework.data.repository.core.support.RepositoryProxyPostProcessor = new TransactionalRepositoryProxyPostProcessor ( org.springframework.data.repository.core.support.ListableBeanFactory , STRING , true ) ; org.springframework.data.repository.core.support.RepositoryProxyPostProcessor . postProcess ( org.springframework.data.repository.core.support.ProxyFactory , org.springframework.data.repository.core.support.RepositoryInformation ) ; verify ( org.springframework.data.repository.core.support.ProxyFactory ) . addAdvice ( Mockito . any ( TransactionInterceptor .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.data.repository.core.support.TransactionRepositoryProxyPostProcessorUnitTests.SampleImplementation .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.data.repository.core.support.TransactionRepositoryProxyPostProcessorUnitTests.SampleImplementationWithClassAnnotation .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.TransactionRepositoryProxyPostProcessorUnitTests.SampleRepository .class . java.lang.reflect.Method ( STRING ) ; TransactionAttributeSource org.springframework.data.repository.core.support.TransactionAttributeSource = new CustomAnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.data.repository.core.support.TransactionAttribute = org.springframework.data.repository.core.support.TransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.data.repository.core.support.TransactionRepositoryProxyPostProcessorUnitTests.SampleRepository .class ) ; assertThat ( org.springframework.data.repository.core.support.TransactionAttribute ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.TransactionRepositoryProxyPostProcessorUnitTests.SampleRepository .class . java.lang.reflect.Method ( STRING , org.springframework.data.repository.core.support.TransactionRepositoryProxyPostProcessorUnitTests.Sample .class ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; when ( org.springframework.data.repository.core.support.RepositoryInformation . getTargetClassMethod ( java.lang.reflect.Method ) ) . thenReturn ( java.lang.reflect.Method ) ; CustomAnnotationTransactionAttributeSource org.springframework.data.repository.core.support.CustomAnnotationTransactionAttributeSource = new CustomAnnotationTransactionAttributeSource ( ) ; org.springframework.data.repository.core.support.CustomAnnotationTransactionAttributeSource . setRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryInformation ) ; TransactionAttribute org.springframework.data.repository.core.support.TransactionAttribute = org.springframework.data.repository.core.support.CustomAnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.data.repository.core.support.TransactionRepositoryProxyPostProcessorUnitTests.SampleImplementation .class ) ; assertThat ( org.springframework.data.repository.core.support.TransactionAttribute ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.repository.core.support.TransactionRepositoryProxyPostProcessorUnitTests.Sample org.springframework.data.repository.core.support.TransactionRepositoryProxyPostProcessorUnitTests.Sample ( org.springframework.data.repository.core.support.TransactionRepositoryProxyPostProcessorUnitTests.Sample org.springframework.data.repository.core.support.TransactionRepositoryProxyPostProcessorUnitTests.Sample );  <METHOD_END>
<METHOD_START> @ javax . transaction . javax.transaction.Transactional void void ( )  <METHOD_END>
<METHOD_START> @ Transactional public < S extends T > S S ( S S ) { return null ; }  <METHOD_END>
<METHOD_START> public < S extends T > S S ( S S ) { return null ; }  <METHOD_END>
