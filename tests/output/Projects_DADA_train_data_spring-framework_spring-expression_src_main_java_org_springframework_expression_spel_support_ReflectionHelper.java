<METHOD_START> static org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchInfo org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchInfo ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.support.TypeDescriptor> , java.util.List<org.springframework.expression.spel.support.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.support.TypeDescriptor> , TypeConverter org.springframework.expression.spel.support.TypeConverter ) { Assert . isTrue ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) == java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) , STRING ) ; org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind = org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ; for ( int int = NUMBER ; int < java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) && org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind != null ; int ++ ) { TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor = java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . get ( int ) ; TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor = java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . get ( int ) ; if ( ! org.springframework.expression.spel.support.TypeDescriptor . equals ( org.springframework.expression.spel.support.TypeDescriptor ) ) { if ( org.springframework.expression.spel.support.TypeDescriptor == null ) { if ( org.springframework.expression.spel.support.TypeDescriptor . isPrimitive ( ) ) { org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind = null ; } } else { if ( org.springframework.expression.spel.support.TypeDescriptor . isAssignableTo ( org.springframework.expression.spel.support.TypeDescriptor ) ) { if ( org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind != org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ) { org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind = org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ; } } else if ( org.springframework.expression.spel.support.TypeConverter . canConvert ( org.springframework.expression.spel.support.TypeDescriptor , org.springframework.expression.spel.support.TypeDescriptor ) ) { org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind = org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ; } else { org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind = null ; } } } } return ( org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind != null ? new org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchInfo ( org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ) : null ) ; }  <METHOD_END>
<METHOD_START> public static int int ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.support.TypeDescriptor> , java.util.List<org.springframework.expression.spel.support.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.support.TypeDescriptor> ) { int int = NUMBER ; for ( int int = NUMBER ; int < java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) ; int ++ ) { TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor = java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . get ( int ) ; TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor = ( int < java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) ? java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . get ( int ) : null ) ; if ( org.springframework.expression.spel.support.TypeDescriptor == null ) { if ( org.springframework.expression.spel.support.TypeDescriptor . isPrimitive ( ) ) { return java.lang.Integer . int ; } } else { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.expression.spel.support.TypeDescriptor . getType ( ) ; if ( ! ClassUtils . isAssignable ( java.lang.Class<> , org.springframework.expression.spel.support.TypeDescriptor . getType ( ) ) ) { return java.lang.Integer . int ; } if ( java.lang.Class<> . boolean ( ) ) { java.lang.Class<?> = java.lang.Object .class ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.expression.spel.support.TypeDescriptor . getType ( ) . getSuperclass ( ) ; while ( java.lang.Class<> != null ) { if ( java.lang.Class<> . boolean ( java.lang.Class<> ) ) { int = int + NUMBER ; java.lang.Class<?> = null ; } else if ( ClassUtils . isAssignable ( java.lang.Class<> , java.lang.Class<> ) ) { int = int + NUMBER ; java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; } else { java.lang.Class<?> = null ; } } if ( java.lang.Class<> . boolean ( ) ) { int = int + NUMBER ; } } } return int ; }  <METHOD_END>
<METHOD_START> static org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchInfo org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchInfo ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.support.TypeDescriptor> , java.util.List<org.springframework.expression.spel.support.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.support.TypeDescriptor> , TypeConverter org.springframework.expression.spel.support.TypeConverter ) { Assert . isTrue ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> != null && java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) > NUMBER , STRING ) ; Assert . isTrue ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . get ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) - NUMBER ) . isArray ( ) , STRING ) ; org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind = org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ; int int = java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) - NUMBER ; for ( int int = NUMBER ; int < int && org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind != null ; int ++ ) { TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor = java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . get ( int ) ; TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor = java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . get ( int ) ; if ( org.springframework.expression.spel.support.TypeDescriptor == null ) { if ( org.springframework.expression.spel.support.TypeDescriptor . isPrimitive ( ) ) { org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind = null ; } } else { if ( ! org.springframework.expression.spel.support.TypeDescriptor . equals ( org.springframework.expression.spel.support.TypeDescriptor ) ) { if ( org.springframework.expression.spel.support.TypeDescriptor . isAssignableTo ( org.springframework.expression.spel.support.TypeDescriptor ) ) { if ( org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind != org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ) { org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind = org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ; } } else if ( org.springframework.expression.spel.support.TypeConverter . canConvert ( org.springframework.expression.spel.support.TypeDescriptor , org.springframework.expression.spel.support.TypeDescriptor ) ) { org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind = org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ; } else { org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind = null ; } } } } if ( org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind == null ) { return null ; } if ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) == java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) && java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . get ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) - NUMBER ) . equals ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . get ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) - NUMBER ) ) ) { } else { TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor = java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . get ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) - NUMBER ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.expression.spel.support.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ; for ( int int = java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) - NUMBER ; int < java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) ; int ++ ) { TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor = java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . get ( int ) ; if ( org.springframework.expression.spel.support.TypeDescriptor == null ) { if ( java.lang.Class<> . boolean ( ) ) { org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind = null ; } } else { if ( java.lang.Class<> != org.springframework.expression.spel.support.TypeDescriptor . getType ( ) ) { if ( ClassUtils . isAssignable ( java.lang.Class<> , org.springframework.expression.spel.support.TypeDescriptor . getType ( ) ) ) { if ( org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind != org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ) { org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind = org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ; } } else if ( org.springframework.expression.spel.support.TypeConverter . canConvert ( org.springframework.expression.spel.support.TypeDescriptor , TypeDescriptor . valueOf ( java.lang.Class<> ) ) ) { org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind = org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ; } else { org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind = null ; } } } } } return ( org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind != null ? new org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchInfo ( org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ) : null ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( TypeConverter org.springframework.expression.spel.support.TypeConverter , java.lang.Object [] java.lang.Object[] , java.lang.reflect.Method java.lang.reflect.Method )			throws org.springframework.expression.spel.support.SpelEvaluationException { java.lang.Integer java.lang.Integer = ( java.lang.reflect.Method . boolean ( ) ? java.lang.reflect.Method . int ( ) - NUMBER : null ) ; return boolean ( org.springframework.expression.spel.support.TypeConverter , java.lang.Object[] , java.lang.reflect.Method , java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> static boolean boolean ( TypeConverter org.springframework.expression.spel.support.TypeConverter , java.lang.Object [] java.lang.Object[] , java.lang.reflect.Executable java.lang.reflect.Executable , java.lang.Integer java.lang.Integer ) throws org.springframework.expression.spel.support.EvaluationException { boolean boolean = false ; if ( java.lang.Integer == null ) { for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor = new TypeDescriptor ( MethodParameter . forExecutable ( java.lang.reflect.Executable , int ) ) ; java.lang.Object java.lang.Object = java.lang.Object[] [ int ] ; java.lang.Object[] [ int ] = org.springframework.expression.spel.support.TypeConverter . convertValue ( java.lang.Object , TypeDescriptor . forObject ( java.lang.Object ) , org.springframework.expression.spel.support.TypeDescriptor ) ; boolean |= ( java.lang.Object != java.lang.Object[] [ int ] ) ; } } else { for ( int int = NUMBER ; int < java.lang.Integer ; int ++ ) { TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor = new TypeDescriptor ( MethodParameter . forExecutable ( java.lang.reflect.Executable , int ) ) ; java.lang.Object java.lang.Object = java.lang.Object[] [ int ] ; java.lang.Object[] [ int ] = org.springframework.expression.spel.support.TypeConverter . convertValue ( java.lang.Object , TypeDescriptor . forObject ( java.lang.Object ) , org.springframework.expression.spel.support.TypeDescriptor ) ; boolean |= ( java.lang.Object != java.lang.Object[] [ int ] ) ; } MethodParameter org.springframework.expression.spel.support.MethodParameter = MethodParameter . forExecutable ( java.lang.reflect.Executable , java.lang.Integer ) ; if ( java.lang.Integer == java.lang.Object[] . int - NUMBER ) { TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor = new TypeDescriptor ( org.springframework.expression.spel.support.MethodParameter ) ; java.lang.Object java.lang.Object = java.lang.Object[] [ java.lang.Integer ] ; TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor = TypeDescriptor . forObject ( java.lang.Object ) ; java.lang.Object[] [ java.lang.Integer ] = org.springframework.expression.spel.support.TypeConverter . convertValue ( java.lang.Object , org.springframework.expression.spel.support.TypeDescriptor , org.springframework.expression.spel.support.TypeDescriptor ) ; if ( java.lang.Object != java.lang.Object[] [ java.lang.Integer ] && ! boolean ( java.lang.Object , java.lang.Object[] [ java.lang.Integer ] ) ) { boolean = true ; } } else { TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor = new TypeDescriptor ( org.springframework.expression.spel.support.MethodParameter ) . getElementTypeDescriptor ( ) ; for ( int int = java.lang.Integer ; int < java.lang.Object[] . int ; int ++ ) { java.lang.Object java.lang.Object = java.lang.Object[] [ int ] ; java.lang.Object[] [ int ] = org.springframework.expression.spel.support.TypeConverter . convertValue ( java.lang.Object , TypeDescriptor . forObject ( java.lang.Object ) , org.springframework.expression.spel.support.TypeDescriptor ) ; boolean |= ( java.lang.Object != java.lang.Object[] [ int ] ) ; } } } return boolean ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return false ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( ! java.lang.Class<> . boolean ( ) || java.lang.reflect.Array . int ( java.lang.Object ) == NUMBER || ! ClassUtils . isAssignableValue ( java.lang.Class<> . java.lang.Class<?> ( ) , java.lang.Object ) ) { return false ; } java.lang.Object java.lang.Object = java.lang.reflect.Array . java.lang.Object ( java.lang.Object , NUMBER ) ; return ( java.lang.Class<> . java.lang.Class<?> ( ) . boolean ( ) ? java.lang.Object . boolean ( java.lang.Object ) : java.lang.Object == java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object [] java.lang.Object[] ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.Object ... java.lang.Object[] ) { int int = java.lang.Class<?>[] . int ; int int = java.lang.Object[] . int ; if ( int != java.lang.Object[] . int || java.lang.Class<?>[] [ int - NUMBER ] != ( java.lang.Object[] [ int - NUMBER ] != null ? java.lang.Object[] [ int - NUMBER ] . java.lang.Class<? extends java.lang.Object> ( ) : null ) ) { int int = NUMBER ; if ( int >= int ) { int = int - ( int - NUMBER ) ; } java.lang.Object [] java.lang.Object[] = new java.lang.Object [ int ] ; java.lang.System . void ( java.lang.Object[] , NUMBER , java.lang.Object[] , NUMBER , java.lang.Object[] . int - NUMBER ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?>[] [ int - NUMBER ] . java.lang.Class<?> ( ) ; java.lang.Object java.lang.Object = java.lang.reflect.Array . java.lang.Object ( java.lang.Class<> , int ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.lang.reflect.Array . void ( java.lang.Object , int , java.lang.Object[] [ int - NUMBER + int ] ) ; } java.lang.Object[] [ java.lang.Object[] . int - NUMBER ] = java.lang.Object ; return java.lang.Object[] ; } return java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> void ( org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ) { this . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind = org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind == org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind == org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind == org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . org.springframework.expression.spel.support.ReflectionHelper.ArgumentsMatchKind ; }  <METHOD_END>
