<METHOD_START> public static void void ( TestGroup org.springframework.tests.TestGroup ) { java.util.Set<org.springframework.tests.TestGroup> < TestGroup > java.util.Set<org.springframework.tests.TestGroup> = java.util.Set<org.springframework.tests.TestGroup> ( ) ; if ( ! java.util.Set<org.springframework.tests.TestGroup> . contains ( org.springframework.tests.TestGroup ) ) { throw new AssumptionViolatedException ( STRING + org.springframework.tests.TestGroup + STRING + java.util.Set<org.springframework.tests.TestGroup> ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( TestGroup org.springframework.tests.TestGroup , org.springframework.tests.Assume.Executable org.springframework.tests.Assume.Executable ) throws java.lang.Exception { java.util.Set<org.springframework.tests.TestGroup> < TestGroup > java.util.Set<org.springframework.tests.TestGroup> = java.util.Set<org.springframework.tests.TestGroup> ( ) ; if ( java.util.Set<org.springframework.tests.TestGroup> . contains ( org.springframework.tests.TestGroup ) ) { org.springframework.tests.Assume.Executable . void ( ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( Log org.springframework.tests.Log ) { assumeFalse ( org.springframework.tests.Log . isTraceEnabled ( ) ) ; assumeFalse ( org.springframework.tests.Log . isDebugEnabled ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Set<org.springframework.tests.TestGroup> < TestGroup > java.util.Set<org.springframework.tests.TestGroup> ( ) { try { return TestGroup . parse ( java.lang.System . java.lang.String ( java.lang.String ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> void void ( ) java.lang.Exception ;  <METHOD_END>
