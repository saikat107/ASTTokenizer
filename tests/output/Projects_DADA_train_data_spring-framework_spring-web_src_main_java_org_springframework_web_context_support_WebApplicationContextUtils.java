<METHOD_START> public static org.springframework.web.context.support.WebApplicationContext org.springframework.web.context.support.WebApplicationContext ( ServletContext org.springframework.web.context.support.ServletContext ) throws java.lang.IllegalStateException { WebApplicationContext org.springframework.web.context.support.WebApplicationContext = org.springframework.web.context.support.WebApplicationContext ( org.springframework.web.context.support.ServletContext ) ; if ( org.springframework.web.context.support.WebApplicationContext == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } return org.springframework.web.context.support.WebApplicationContext ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.context.support.WebApplicationContext org.springframework.web.context.support.WebApplicationContext ( ServletContext org.springframework.web.context.support.ServletContext ) { return org.springframework.web.context.support.WebApplicationContext ( org.springframework.web.context.support.ServletContext , WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.context.support.WebApplicationContext org.springframework.web.context.support.WebApplicationContext ( ServletContext org.springframework.web.context.support.ServletContext , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.web.context.support.ServletContext , STRING ) ; java.lang.Object java.lang.Object = org.springframework.web.context.support.ServletContext . getAttribute ( java.lang.String ) ; if ( java.lang.Object == null ) { return null ; } if ( java.lang.Object instanceof java.lang.RuntimeException ) { throw ( java.lang.RuntimeException ) java.lang.Object ; } if ( java.lang.Object instanceof java.lang.Error ) { throw ( java.lang.Error ) java.lang.Object ; } if ( java.lang.Object instanceof java.lang.Exception ) { throw new java.lang.IllegalStateException ( ( java.lang.Exception ) java.lang.Object ) ; } if ( ! ( java.lang.Object instanceof WebApplicationContext ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Object ) ; } return ( WebApplicationContext ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.context.support.WebApplicationContext org.springframework.web.context.support.WebApplicationContext ( ServletContext org.springframework.web.context.support.ServletContext ) { WebApplicationContext org.springframework.web.context.support.WebApplicationContext = org.springframework.web.context.support.WebApplicationContext ( org.springframework.web.context.support.ServletContext ) ; if ( org.springframework.web.context.support.WebApplicationContext == null ) { java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = org.springframework.web.context.support.ServletContext . getAttributeNames ( ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; java.lang.Object java.lang.Object = org.springframework.web.context.support.ServletContext . getAttribute ( java.lang.String ) ; if ( java.lang.Object instanceof WebApplicationContext ) { if ( org.springframework.web.context.support.WebApplicationContext != null ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } org.springframework.web.context.support.WebApplicationContext = ( WebApplicationContext ) java.lang.Object ; } } } return org.springframework.web.context.support.WebApplicationContext ; }  <METHOD_END>
<METHOD_START> public static void void ( ConfigurableListableBeanFactory org.springframework.web.context.support.ConfigurableListableBeanFactory ) { void ( org.springframework.web.context.support.ConfigurableListableBeanFactory , null ) ; }  <METHOD_END>
<METHOD_START> public static void void ( ConfigurableListableBeanFactory org.springframework.web.context.support.ConfigurableListableBeanFactory , ServletContext org.springframework.web.context.support.ServletContext ) { org.springframework.web.context.support.ConfigurableListableBeanFactory . registerScope ( WebApplicationContext . SCOPE_REQUEST , new RequestScope ( ) ) ; org.springframework.web.context.support.ConfigurableListableBeanFactory . registerScope ( WebApplicationContext . SCOPE_SESSION , new SessionScope ( ) ) ; if ( org.springframework.web.context.support.ServletContext != null ) { ServletContextScope org.springframework.web.context.support.ServletContextScope = new ServletContextScope ( org.springframework.web.context.support.ServletContext ) ; org.springframework.web.context.support.ConfigurableListableBeanFactory . registerScope ( WebApplicationContext . SCOPE_APPLICATION , org.springframework.web.context.support.ServletContextScope ) ; org.springframework.web.context.support.ServletContext . setAttribute ( ServletContextScope .class . java.lang.String ( ) , org.springframework.web.context.support.ServletContextScope ) ; } org.springframework.web.context.support.ConfigurableListableBeanFactory . registerResolvableDependency ( ServletRequest .class , new org.springframework.web.context.support.WebApplicationContextUtils.RequestObjectFactory ( ) ) ; org.springframework.web.context.support.ConfigurableListableBeanFactory . registerResolvableDependency ( ServletResponse .class , new org.springframework.web.context.support.WebApplicationContextUtils.ResponseObjectFactory ( ) ) ; org.springframework.web.context.support.ConfigurableListableBeanFactory . registerResolvableDependency ( HttpSession .class , new org.springframework.web.context.support.WebApplicationContextUtils.SessionObjectFactory ( ) ) ; org.springframework.web.context.support.ConfigurableListableBeanFactory . registerResolvableDependency ( WebRequest .class , new org.springframework.web.context.support.WebApplicationContextUtils.WebRequestObjectFactory ( ) ) ; if ( boolean ) { org.springframework.web.context.support.WebApplicationContextUtils.FacesDependencyRegistrar . void ( org.springframework.web.context.support.ConfigurableListableBeanFactory ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( ConfigurableListableBeanFactory org.springframework.web.context.support.ConfigurableListableBeanFactory , ServletContext org.springframework.web.context.support.ServletContext ) { void ( org.springframework.web.context.support.ConfigurableListableBeanFactory , org.springframework.web.context.support.ServletContext , null ) ; }  <METHOD_END>
<METHOD_START> public static void void ( ConfigurableListableBeanFactory org.springframework.web.context.support.ConfigurableListableBeanFactory , ServletContext org.springframework.web.context.support.ServletContext , ServletConfig org.springframework.web.context.support.ServletConfig ) { if ( org.springframework.web.context.support.ServletContext != null && ! org.springframework.web.context.support.ConfigurableListableBeanFactory . containsBean ( WebApplicationContext . SERVLET_CONTEXT_BEAN_NAME ) ) { org.springframework.web.context.support.ConfigurableListableBeanFactory . registerSingleton ( WebApplicationContext . SERVLET_CONTEXT_BEAN_NAME , org.springframework.web.context.support.ServletContext ) ; } if ( org.springframework.web.context.support.ServletConfig != null && ! org.springframework.web.context.support.ConfigurableListableBeanFactory . containsBean ( ConfigurableWebApplicationContext . SERVLET_CONFIG_BEAN_NAME ) ) { org.springframework.web.context.support.ConfigurableListableBeanFactory . registerSingleton ( ConfigurableWebApplicationContext . SERVLET_CONFIG_BEAN_NAME , org.springframework.web.context.support.ServletConfig ) ; } if ( ! org.springframework.web.context.support.ConfigurableListableBeanFactory . containsBean ( WebApplicationContext . CONTEXT_PARAMETERS_BEAN_NAME ) ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; if ( org.springframework.web.context.support.ServletContext != null ) { java.util.Enumeration<?> < ? > java.util.Enumeration<?> = org.springframework.web.context.support.ServletContext . getInitParameterNames ( ) ; while ( java.util.Enumeration<> . boolean ( ) ) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Enumeration<> . nextElement ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , org.springframework.web.context.support.ServletContext . getInitParameter ( java.lang.String ) ) ; } } if ( org.springframework.web.context.support.ServletConfig != null ) { java.util.Enumeration<?> < ? > java.util.Enumeration<?> = org.springframework.web.context.support.ServletConfig . getInitParameterNames ( ) ; while ( java.util.Enumeration<> . boolean ( ) ) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Enumeration<> . nextElement ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , org.springframework.web.context.support.ServletConfig . getInitParameter ( java.lang.String ) ) ; } } org.springframework.web.context.support.ConfigurableListableBeanFactory . registerSingleton ( WebApplicationContext . CONTEXT_PARAMETERS_BEAN_NAME , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( java.util.Map<java.lang.String,java.lang.String> ) ) ; } if ( ! org.springframework.web.context.support.ConfigurableListableBeanFactory . containsBean ( WebApplicationContext . CONTEXT_ATTRIBUTES_BEAN_NAME ) ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; if ( org.springframework.web.context.support.ServletContext != null ) { java.util.Enumeration<?> < ? > java.util.Enumeration<?> = org.springframework.web.context.support.ServletContext . getAttributeNames ( ) ; while ( java.util.Enumeration<> . boolean ( ) ) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Enumeration<> . nextElement ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , org.springframework.web.context.support.ServletContext . getAttribute ( java.lang.String ) ) ; } } org.springframework.web.context.support.ConfigurableListableBeanFactory . registerSingleton ( WebApplicationContext . CONTEXT_ATTRIBUTES_BEAN_NAME , java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( MutablePropertySources org.springframework.web.context.support.MutablePropertySources , ServletContext org.springframework.web.context.support.ServletContext ) { void ( org.springframework.web.context.support.MutablePropertySources , org.springframework.web.context.support.ServletContext , null ) ; }  <METHOD_END>
<METHOD_START> public static void void ( MutablePropertySources org.springframework.web.context.support.MutablePropertySources , ServletContext org.springframework.web.context.support.ServletContext , ServletConfig org.springframework.web.context.support.ServletConfig ) { Assert . notNull ( org.springframework.web.context.support.MutablePropertySources , STRING ) ; if ( org.springframework.web.context.support.ServletContext != null && org.springframework.web.context.support.MutablePropertySources . contains ( StandardServletEnvironment . SERVLET_CONTEXT_PROPERTY_SOURCE_NAME ) && org.springframework.web.context.support.MutablePropertySources . get ( StandardServletEnvironment . SERVLET_CONTEXT_PROPERTY_SOURCE_NAME ) instanceof StubPropertySource ) { org.springframework.web.context.support.MutablePropertySources . replace ( StandardServletEnvironment . SERVLET_CONTEXT_PROPERTY_SOURCE_NAME , new ServletContextPropertySource ( StandardServletEnvironment . SERVLET_CONTEXT_PROPERTY_SOURCE_NAME , org.springframework.web.context.support.ServletContext ) ) ; } if ( org.springframework.web.context.support.ServletConfig != null && org.springframework.web.context.support.MutablePropertySources . contains ( StandardServletEnvironment . SERVLET_CONFIG_PROPERTY_SOURCE_NAME ) && org.springframework.web.context.support.MutablePropertySources . get ( StandardServletEnvironment . SERVLET_CONFIG_PROPERTY_SOURCE_NAME ) instanceof StubPropertySource ) { org.springframework.web.context.support.MutablePropertySources . replace ( StandardServletEnvironment . SERVLET_CONFIG_PROPERTY_SOURCE_NAME , new ServletConfigPropertySource ( StandardServletEnvironment . SERVLET_CONFIG_PROPERTY_SOURCE_NAME , org.springframework.web.context.support.ServletConfig ) ) ; } }  <METHOD_END>
<METHOD_START> private static org.springframework.web.context.support.ServletRequestAttributes org.springframework.web.context.support.ServletRequestAttributes ( ) { RequestAttributes org.springframework.web.context.support.RequestAttributes = RequestContextHolder . currentRequestAttributes ( ) ; if ( ! ( org.springframework.web.context.support.RequestAttributes instanceof ServletRequestAttributes ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } return ( ServletRequestAttributes ) org.springframework.web.context.support.RequestAttributes ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.context.support.ServletRequest org.springframework.web.context.support.ServletRequest ( ) { return org.springframework.web.context.support.ServletRequestAttributes ( ) . getRequest ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.context.support.ServletResponse org.springframework.web.context.support.ServletResponse ( ) { ServletResponse org.springframework.web.context.support.ServletResponse = org.springframework.web.context.support.ServletRequestAttributes ( ) . getResponse ( ) ; if ( org.springframework.web.context.support.ServletResponse == null ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } return org.springframework.web.context.support.ServletResponse ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.context.support.HttpSession org.springframework.web.context.support.HttpSession ( ) { return org.springframework.web.context.support.ServletRequestAttributes ( ) . getRequest ( ) . getSession ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.context.support.WebRequest org.springframework.web.context.support.WebRequest ( ) { ServletRequestAttributes org.springframework.web.context.support.ServletRequestAttributes = org.springframework.web.context.support.ServletRequestAttributes ( ) ; return new ServletWebRequest ( org.springframework.web.context.support.ServletRequestAttributes . getRequest ( ) , org.springframework.web.context.support.ServletRequestAttributes . getResponse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public static void void ( ConfigurableListableBeanFactory org.springframework.web.context.support.ConfigurableListableBeanFactory ) { org.springframework.web.context.support.ConfigurableListableBeanFactory . registerResolvableDependency ( FacesContext .class , new ObjectFactory < FacesContext > ( ) { @ java.lang.Override public org.springframework.web.context.support.FacesContext org.springframework.web.context.support.FacesContext ( ) { return FacesContext . getCurrentInstance ( ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ) ; org.springframework.web.context.support.ConfigurableListableBeanFactory . registerResolvableDependency ( ExternalContext .class , new ObjectFactory < ExternalContext > ( ) { @ java.lang.Override public org.springframework.web.context.support.ExternalContext org.springframework.web.context.support.ExternalContext ( ) { return FacesContext . getCurrentInstance ( ) . getExternalContext ( ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.context.support.FacesContext org.springframework.web.context.support.FacesContext ( ) { return FacesContext . getCurrentInstance ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.context.support.ExternalContext org.springframework.web.context.support.ExternalContext ( ) { return FacesContext . getCurrentInstance ( ) . getExternalContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
