<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; Assert . assertFalse ( org.springframework.data.solr.core.query.FacetOptions . hasFacets ( ) ) ; Assert . assertFalse ( org.springframework.data.solr.core.query.FacetOptions . hasFields ( ) ) ; Assert . assertFalse ( org.springframework.data.solr.core.query.FacetOptions . hasFacetQueries ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( new SimpleField ( STRING ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasFacets ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasFields ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.FacetOptions . getFacetOnFields ( ) . size ( ) ) ; Assert . assertFalse ( org.springframework.data.solr.core.query.FacetOptions . hasFacetQueries ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new FacetOptions ( ( SimpleField ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( STRING ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasFacets ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasFields ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.FacetOptions . getFacetOnFields ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new FacetOptions ( ( java.lang.String ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; org.springframework.data.solr.core.query.FacetOptions . addFacetOnField ( new SimpleField ( STRING ) ) ; org.springframework.data.solr.core.query.FacetOptions . addFacetOnField ( new SimpleField ( STRING ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.FacetOptions . getFacetOnFields ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new FacetOptions ( ) . addFacetOnField ( ( Field ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new FacetOptions ( ) . addFacetOnField ( new SimpleField ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; org.springframework.data.solr.core.query.FacetOptions . addFacetOnPivot ( STRING , STRING ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasFacets ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasPivotFields ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.FacetOptions . getFacetOnPivots ( ) . size ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasFields ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.query.FacetOptions . getFacetOnPivots ( ) . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; org.springframework.data.solr.core.query.FacetOptions . addFacetOnPivot ( new SimpleField ( STRING ) , new SimpleField ( STRING ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasFacets ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasPivotFields ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.FacetOptions . getFacetOnPivots ( ) . size ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasFields ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.query.FacetOptions . getFacetOnPivots ( ) . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; org.springframework.data.solr.core.query.FacetOptions . addFacetOnPivot ( new SimpleField ( STRING ) , new SimpleField ( STRING ) ) ; org.springframework.data.solr.core.query.FacetOptions . addFacetOnPivot ( new SimpleField ( STRING ) , new SimpleField ( STRING ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasFacets ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasPivotFields ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.FacetOptions . getFacetOnPivots ( ) . size ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasFields ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.query.FacetOptions . getFacetOnPivots ( ) . get ( NUMBER ) . getName ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.query.FacetOptions . getFacetOnPivots ( ) . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; org.springframework.data.solr.core.query.FacetOptions . addFacetOnPivot ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; org.springframework.data.solr.core.query.FacetOptions . addFacetOnPivot ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; org.springframework.data.solr.core.query.FacetOptions . addFacetOnPivot ( new SimpleField ( STRING ) , new SimpleField ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; org.springframework.data.solr.core.query.FacetOptions . addFacetOnPivot ( new SimpleField ( STRING ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasFacets ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasFacetQueries ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.FacetOptions . getFacetQueries ( ) . size ( ) ) ; Assert . assertFalse ( org.springframework.data.solr.core.query.FacetOptions . hasFields ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new FacetOptions ( ( SolrDataQuery ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; org.springframework.data.solr.core.query.FacetOptions . addFacetQuery ( new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ) ; org.springframework.data.solr.core.query.FacetOptions . addFacetQuery ( new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasFacets ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasFacetQueries ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.FacetOptions . getFacetQueries ( ) . size ( ) ) ; Assert . assertFalse ( org.springframework.data.solr.core.query.FacetOptions . hasFields ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; org.springframework.data.solr.core.query.FacetOptions . addFacetQuery ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; Assert . assertNotNull ( org.springframework.data.solr.core.query.FacetOptions . getFacetSort ( ) ) ; Assert . assertEquals ( FacetOptions . DEFAULT_FACET_SORT , org.springframework.data.solr.core.query.FacetOptions . getFacetSort ( ) ) ; org.springframework.data.solr.core.query.FacetOptions . setFacetSort ( FacetSort . INDEX ) ; Assert . assertEquals ( FacetSort . INDEX , org.springframework.data.solr.core.query.FacetOptions . getFacetSort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new FacetOptions ( ) . setFacetSort ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; Assert . assertEquals ( FacetOptions . DEFAULT_FACET_LIMIT , org.springframework.data.solr.core.query.FacetOptions . getFacetLimit ( ) ) ; org.springframework.data.solr.core.query.FacetOptions . setFacetLimit ( NUMBER ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.FacetOptions . getFacetLimit ( ) ) ; org.springframework.data.solr.core.query.FacetOptions . setFacetLimit ( - NUMBER ) ; Assert . assertEquals ( - NUMBER , org.springframework.data.solr.core.query.FacetOptions . getFacetLimit ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; Assert . assertEquals ( FacetOptions . DEFAULT_FACET_MIN_COUNT , org.springframework.data.solr.core.query.FacetOptions . getFacetMinCount ( ) ) ; org.springframework.data.solr.core.query.FacetOptions . setFacetMinCount ( NUMBER ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.FacetOptions . getFacetMinCount ( ) ) ; org.springframework.data.solr.core.query.FacetOptions . setFacetMinCount ( - NUMBER ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.FacetOptions . getFacetMinCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; org.springframework.data.solr.core.query.FacetOptions . addFacetOnField ( new SimpleField ( STRING ) ) ; org.springframework.data.solr.core.query.FacetOptions . addFacetOnField ( new FieldWithFacetParameters ( STRING ) . setPrefix ( STRING ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.FacetOptions . getFacetOnFields ( ) . size ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.FacetOptions . getFieldsWithParameters ( ) . size ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.query.FacetOptions . getFieldsWithParameters ( ) . iterator ( ) . next ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; org.springframework.data.solr.core.query.FacetOptions . addFacetOnField ( new SimpleField ( STRING ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.FacetOptions . getFacetOnFields ( ) . size ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . getFieldsWithParameters ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; org.springframework.data.solr.core.query.FacetOptions . setFacetPrefix ( STRING ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.FacetOptions . hasFacetPrefix ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; org.springframework.data.solr.core.query.FacetOptions . setFacetPrefix ( STRING ) ; Assert . assertFalse ( org.springframework.data.solr.core.query.FacetOptions . hasFacetPrefix ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) ; org.springframework.data.solr.core.query.FacetOptions . setFacetPrefix ( null ) ; Assert . assertFalse ( org.springframework.data.solr.core.query.FacetOptions . hasFacetPrefix ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final FieldWithDateRangeParameters org.springframework.data.solr.core.query.FieldWithDateRangeParameters = new FieldWithDateRangeParameters ( STRING , new java.util.GregorianCalendar ( NUMBER , java.util.Calendar . int , NUMBER ) . java.util.Date ( ) , new java.util.GregorianCalendar ( NUMBER , java.util.Calendar . int , NUMBER ) . java.util.Date ( ) , STRING ) ; final FieldWithNumericRangeParameters org.springframework.data.solr.core.query.FieldWithNumericRangeParameters = new FieldWithNumericRangeParameters ( STRING , NUMBER , NUMBER , NUMBER ) ; FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( ) . addFacetByRange ( org.springframework.data.solr.core.query.FieldWithDateRangeParameters ) . addFacetByRange ( org.springframework.data.solr.core.query.FieldWithNumericRangeParameters ) ; java.util.Collection<org.springframework.data.solr.core.query.FieldWithRangeParameters<?,?,?>> < FieldWithRangeParameters < ? , ? , ? > > java.util.Collection<org.springframework.data.solr.core.query.FieldWithRangeParameters<?,?,?>> = org.springframework.data.solr.core.query.FacetOptions . getFieldsWithRangeParameters ( ) ; Assert . assertThat ( java.util.Collection<org.springframework.data.solr.core.query.FieldWithRangeParameters<?,?,?>> , IsIterableContainingInOrder .< java.lang.Object > contains ( org.springframework.data.solr.core.query.FieldWithDateRangeParameters , org.springframework.data.solr.core.query.FieldWithNumericRangeParameters ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Date java.util.Date = new java.util.Date ( NUMBER ) ; java.util.Date java.util.Date = new java.util.Date ( NUMBER ) ; java.lang.String java.lang.String = STRING ; boolean boolean = true ; FacetRangeInclude org.springframework.data.solr.core.query.FacetRangeInclude = FacetRangeInclude . LOWER ; FacetRangeOther org.springframework.data.solr.core.query.FacetRangeOther = FacetRangeOther . BEFORE ; FieldWithDateRangeParameters org.springframework.data.solr.core.query.FieldWithDateRangeParameters = new FieldWithDateRangeParameters ( STRING , java.util.Date , java.util.Date , java.lang.String ) . setHardEnd ( boolean ) . setInclude ( org.springframework.data.solr.core.query.FacetRangeInclude ) . setOther ( org.springframework.data.solr.core.query.FacetRangeOther ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.query.FieldWithDateRangeParameters . getName ( ) ) ; Assert . assertEquals ( java.util.Date , org.springframework.data.solr.core.query.FieldWithDateRangeParameters . getStart ( ) ) ; Assert . assertEquals ( java.util.Date , org.springframework.data.solr.core.query.FieldWithDateRangeParameters . getEnd ( ) ) ; Assert . assertEquals ( java.lang.String , org.springframework.data.solr.core.query.FieldWithDateRangeParameters . getGap ( ) ) ; Assert . assertEquals ( boolean , org.springframework.data.solr.core.query.FieldWithDateRangeParameters . getHardEnd ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.FacetRangeInclude , org.springframework.data.solr.core.query.FieldWithDateRangeParameters . getInclude ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.FacetRangeOther , org.springframework.data.solr.core.query.FieldWithDateRangeParameters . getOther ( ) ) ; Assert . assertEquals ( java.util.Date , org.springframework.data.solr.core.query.FieldWithDateRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_START ) . getValue ( ) ) ; Assert . assertEquals ( java.util.Date , org.springframework.data.solr.core.query.FieldWithDateRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_END ) . getValue ( ) ) ; Assert . assertEquals ( java.lang.String , org.springframework.data.solr.core.query.FieldWithDateRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_GAP ) . getValue ( ) ) ; Assert . assertEquals ( boolean , org.springframework.data.solr.core.query.FieldWithDateRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_HARD_END ) . getValue ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.FacetRangeInclude , org.springframework.data.solr.core.query.FieldWithDateRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_INCLUDE ) . getValue ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.FacetRangeOther , org.springframework.data.solr.core.query.FieldWithDateRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_OTHER ) . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; int int = NUMBER ; int int = NUMBER ; boolean boolean = true ; FacetRangeInclude org.springframework.data.solr.core.query.FacetRangeInclude = FacetRangeInclude . LOWER ; FacetRangeOther org.springframework.data.solr.core.query.FacetRangeOther = FacetRangeOther . BEFORE ; FieldWithNumericRangeParameters org.springframework.data.solr.core.query.FieldWithNumericRangeParameters = new FieldWithNumericRangeParameters ( STRING , int , int , int ) . setHardEnd ( boolean ) . setInclude ( org.springframework.data.solr.core.query.FacetRangeInclude ) . setOther ( org.springframework.data.solr.core.query.FacetRangeOther ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . getName ( ) ) ; Assert . assertEquals ( int , org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . getStart ( ) ) ; Assert . assertEquals ( int , org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . getEnd ( ) ) ; Assert . assertEquals ( int , org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . getGap ( ) ) ; Assert . assertEquals ( boolean , org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . getHardEnd ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.FacetRangeInclude , org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . getInclude ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.FacetRangeOther , org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . getOther ( ) ) ; Assert . assertEquals ( int , org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_START ) . getValue ( ) ) ; Assert . assertEquals ( int , org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_END ) . getValue ( ) ) ; Assert . assertEquals ( int , org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_GAP ) . getValue ( ) ) ; Assert . assertEquals ( boolean , org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_HARD_END ) . getValue ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.FacetRangeInclude , org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_INCLUDE ) . getValue ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.FacetRangeOther , org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_OTHER ) . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FieldWithDateRangeParameters org.springframework.data.solr.core.query.FieldWithDateRangeParameters = new FieldWithDateRangeParameters ( STRING , new java.util.Date ( NUMBER ) , new java.util.Date ( NUMBER ) , STRING ) . setHardEnd ( true ) . setInclude ( FacetRangeInclude . LOWER ) . setOther ( FacetRangeOther . BEFORE ) ; org.springframework.data.solr.core.query.FieldWithDateRangeParameters . setHardEnd ( null ) ; org.springframework.data.solr.core.query.FieldWithDateRangeParameters . setInclude ( null ) ; org.springframework.data.solr.core.query.FieldWithDateRangeParameters . setOther ( null ) ; Assert . assertNull ( org.springframework.data.solr.core.query.FieldWithDateRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_HARD_END ) ) ; Assert . assertNull ( org.springframework.data.solr.core.query.FieldWithDateRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_INCLUDE ) ) ; Assert . assertNull ( org.springframework.data.solr.core.query.FieldWithDateRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_OTHER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FieldWithNumericRangeParameters org.springframework.data.solr.core.query.FieldWithNumericRangeParameters = new FieldWithNumericRangeParameters ( STRING , NUMBER , NUMBER , NUMBER ) . setHardEnd ( true ) . setInclude ( FacetRangeInclude . LOWER ) . setOther ( FacetRangeOther . BEFORE ) ; org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . setHardEnd ( null ) ; org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . setInclude ( null ) ; org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . setOther ( null ) ; Assert . assertNull ( org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_HARD_END ) ) ; Assert . assertNull ( org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_INCLUDE ) ) ; Assert . assertNull ( org.springframework.data.solr.core.query.FieldWithNumericRangeParameters . getQueryParameter ( FacetParams . FACET_RANGE_OTHER ) ) ; }  <METHOD_END>
