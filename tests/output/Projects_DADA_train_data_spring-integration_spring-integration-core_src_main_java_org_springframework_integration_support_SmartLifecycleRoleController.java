<METHOD_START> public void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.util.List<org.springframework.integration.support.SmartLifecycle> < SmartLifecycle > java.util.List<org.springframework.integration.support.SmartLifecycle> ) { Assert . notNull ( java.util.List<java.lang.String> , STRING ) ; Assert . notNull ( java.util.List<org.springframework.integration.support.SmartLifecycle> , STRING ) ; Assert . isTrue ( java.util.List<java.lang.String> . int ( ) == java.util.List<org.springframework.integration.support.SmartLifecycle> . size ( ) , STRING ) ; java.util.Iterator<org.springframework.integration.support.SmartLifecycle> < SmartLifecycle > java.util.Iterator<org.springframework.integration.support.SmartLifecycle> = java.util.List<org.springframework.integration.support.SmartLifecycle> . iterator ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { SmartLifecycle org.springframework.integration.support.SmartLifecycle = java.util.Iterator<org.springframework.integration.support.SmartLifecycle> . next ( ) ; void ( java.lang.String , org.springframework.integration.support.SmartLifecycle ) ; } }  <METHOD_END>
<METHOD_START> public void ( MultiValueMap < java.lang.String , SmartLifecycle > org.springframework.integration.support.MultiValueMap<java.lang.String,org.springframework.integration.support.SmartLifecycle> ) { for ( java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.integration.support.SmartLifecycle>> < java.lang.String , java.util.List<org.springframework.integration.support.SmartLifecycle> < SmartLifecycle > > java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.integration.support.SmartLifecycle>> : org.springframework.integration.support.MultiValueMap<java.lang.String,org.springframework.integration.support.SmartLifecycle> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.integration.support.SmartLifecycle>> . getKey ( ) ; for ( SmartLifecycle org.springframework.integration.support.SmartLifecycle : java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.integration.support.SmartLifecycle>> . getValue ( ) ) { void ( java.lang.String , org.springframework.integration.support.SmartLifecycle ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.integration.support.ApplicationContext ) throws org.springframework.integration.support.BeansException { this . org.springframework.integration.support.ApplicationContext = org.springframework.integration.support.ApplicationContext ; }  <METHOD_END>
<METHOD_START> public final void void ( java.lang.String java.lang.String , SmartLifecycle org.springframework.integration.support.SmartLifecycle ) { this . org.springframework.integration.support.MultiValueMap<java.lang.String,org.springframework.integration.support.SmartLifecycle> . add ( java.lang.String , org.springframework.integration.support.SmartLifecycle ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . state ( this . org.springframework.integration.support.ApplicationContext != null , STRING ) ; this . org.springframework.integration.support.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { Assert . state ( this . org.springframework.integration.support.ApplicationContext != null , STRING ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { this . org.springframework.integration.support.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { if ( this . org.springframework.integration.support.MultiValueMap<java.lang.String,java.lang.String> . size ( ) > NUMBER ) { void ( ) ; } java.util.List<org.springframework.integration.support.SmartLifecycle> < SmartLifecycle > java.util.List<org.springframework.integration.support.SmartLifecycle> = this . org.springframework.integration.support.MultiValueMap<java.lang.String,org.springframework.integration.support.SmartLifecycle> . get ( java.lang.String ) ; if ( java.util.List<org.springframework.integration.support.SmartLifecycle> != null ) { java.util.List<org.springframework.integration.support.SmartLifecycle> = new java.util.ArrayList<org.springframework.integration.support.SmartLifecycle> < SmartLifecycle > ( java.util.List<org.springframework.integration.support.SmartLifecycle> ) ; java.util.Collections . void ( java.util.List<org.springframework.integration.support.SmartLifecycle> , ( o1 , o2 ) -> o1 . getPhase ( ) < o2 . getPhase ( ) ? - NUMBER : o1 . getPhase ( ) > o2 . getPhase ( ) ? NUMBER : NUMBER ) ; if ( org.springframework.integration.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.support.Log . debug ( STRING + java.util.List<org.springframework.integration.support.SmartLifecycle> + STRING + java.lang.String ) ; } for ( SmartLifecycle org.springframework.integration.support.SmartLifecycle : java.util.List<org.springframework.integration.support.SmartLifecycle> ) { try { org.springframework.integration.support.SmartLifecycle . start ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.support.Log . error ( STRING + org.springframework.integration.support.SmartLifecycle + STRING + java.lang.String , java.lang.Exception ) ; } } } else { if ( org.springframework.integration.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.support.Log . debug ( STRING + java.lang.String + STRING ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { if ( this . org.springframework.integration.support.MultiValueMap<java.lang.String,java.lang.String> . size ( ) > NUMBER ) { void ( ) ; } java.util.List<org.springframework.integration.support.SmartLifecycle> < SmartLifecycle > java.util.List<org.springframework.integration.support.SmartLifecycle> = this . org.springframework.integration.support.MultiValueMap<java.lang.String,org.springframework.integration.support.SmartLifecycle> . get ( java.lang.String ) ; if ( java.util.List<org.springframework.integration.support.SmartLifecycle> != null ) { java.util.List<org.springframework.integration.support.SmartLifecycle> = new java.util.ArrayList<org.springframework.integration.support.SmartLifecycle> < SmartLifecycle > ( java.util.List<org.springframework.integration.support.SmartLifecycle> ) ; java.util.Collections . void ( java.util.List<org.springframework.integration.support.SmartLifecycle> , ( o1 , o2 ) -> o1 . getPhase ( ) < o2 . getPhase ( ) ? NUMBER : o1 . getPhase ( ) > o2 . getPhase ( ) ? - NUMBER : NUMBER ) ; if ( org.springframework.integration.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.support.Log . debug ( STRING + java.util.List<org.springframework.integration.support.SmartLifecycle> + STRING + java.lang.String ) ; } for ( SmartLifecycle org.springframework.integration.support.SmartLifecycle : java.util.List<org.springframework.integration.support.SmartLifecycle> ) { try { org.springframework.integration.support.SmartLifecycle . stop ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.support.Log . error ( STRING + org.springframework.integration.support.SmartLifecycle + STRING + java.lang.String , java.lang.Exception ) ; } } } else { if ( org.springframework.integration.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.support.Log . debug ( STRING + java.lang.String + STRING ) ; } } }  <METHOD_END>
<METHOD_START> public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { if ( this . org.springframework.integration.support.MultiValueMap<java.lang.String,java.lang.String> . size ( ) > NUMBER ) { void ( ) ; } return new java.util.ArrayList <> ( this . org.springframework.integration.support.MultiValueMap<java.lang.String,org.springframework.integration.support.SmartLifecycle> . keySet ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.lang.Boolean> < java.lang.String , java.lang.Boolean > java.util.Map<java.lang.String,java.lang.Boolean> = java.util.Map<java.lang.String,java.lang.Boolean> ( java.lang.String ) ; return ! java.util.Map<java.lang.String,java.lang.Boolean> . boolean ( ) && java.util.Map<java.lang.String,java.lang.Boolean> . java.util.Collection<java.lang.Boolean> ( ) . java.util.stream.Stream<java.lang.Boolean> ( ) . boolean ( java.lang.Boolean -> java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.lang.Boolean> < java.lang.String , java.lang.Boolean > java.util.Map<java.lang.String,java.lang.Boolean> = java.util.Map<java.lang.String,java.lang.Boolean> ( java.lang.String ) ; return java.util.Map<java.lang.String,java.lang.Boolean> . boolean ( ) || java.util.Map<java.lang.String,java.lang.Boolean> . java.util.Collection<java.lang.Boolean> ( ) . java.util.stream.Stream<java.lang.Boolean> ( ) . boolean ( java.lang.Boolean -> java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Boolean> < java.lang.String , java.lang.Boolean > java.util.Map<java.lang.String,java.lang.Boolean> ( java.lang.String java.lang.String ) { if ( this . org.springframework.integration.support.MultiValueMap<java.lang.String,java.lang.String> . size ( ) > NUMBER ) { void ( ) ; } if ( ! this . org.springframework.integration.support.MultiValueMap<java.lang.String,org.springframework.integration.support.SmartLifecycle> . containsKey ( java.lang.String ) ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Boolean> ( ) ; } java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; return this . org.springframework.integration.support.MultiValueMap<java.lang.String,org.springframework.integration.support.SmartLifecycle> . get ( java.lang.String ) . stream ( ) . collect ( java.util.stream.Collectors . java.util.stream.Collector ( e -> ( e instanceof NamedComponent ) ? ( ( NamedComponent ) e ) . getComponentName ( ) : ( e . getClass ( ) . getSimpleName ( ) + STRING + index . getAndIncrement ( ) ) , Lifecycle :: isRunning ) ) ; }  <METHOD_END>
<METHOD_START> private synchronized void void ( ) { for ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : this . org.springframework.integration.support.MultiValueMap<java.lang.String,java.lang.String> . entrySet ( ) ) { void ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ) ; } this . org.springframework.integration.support.MultiValueMap<java.lang.String,java.lang.String> . clear ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { try { SmartLifecycle org.springframework.integration.support.SmartLifecycle = this . org.springframework.integration.support.ApplicationContext . getBean ( java.lang.String , SmartLifecycle .class ) ; void ( java.lang.String , org.springframework.integration.support.SmartLifecycle ) ; } catch ( NoSuchBeanDefinitionException org.springframework.integration.support.NoSuchBeanDefinitionException ) { org.springframework.integration.support.Log . warn ( STRING + java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AbstractLeaderEvent org.springframework.integration.support.AbstractLeaderEvent ) { if ( org.springframework.integration.support.AbstractLeaderEvent instanceof OnGrantedEvent ) { void ( org.springframework.integration.support.AbstractLeaderEvent . getRole ( ) ) ; } else if ( org.springframework.integration.support.AbstractLeaderEvent instanceof OnRevokedEvent ) { void ( org.springframework.integration.support.AbstractLeaderEvent . getRole ( ) ) ; } }  <METHOD_END>
