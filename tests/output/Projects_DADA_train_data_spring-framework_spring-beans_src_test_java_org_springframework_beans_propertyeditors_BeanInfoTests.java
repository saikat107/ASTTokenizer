<METHOD_START> @ Test public void void ( ) { org.springframework.beans.propertyeditors.BeanInfoTests.ValueBean org.springframework.beans.propertyeditors.BeanInfoTests.ValueBean = new org.springframework.beans.propertyeditors.BeanInfoTests.ValueBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.BeanInfoTests.ValueBean ) ; java.lang.Integer java.lang.Integer = new java.lang.Integer ( NUMBER ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , java.lang.Integer ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanInfoTests.ValueBean . java.lang.Integer ( ) , java.lang.Integer ) ; java.lang.Integer = new java.lang.Integer ( NUMBER ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , java.lang.Integer . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanInfoTests.ValueBean . java.lang.Integer ( ) , java.lang.Integer ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , null ) ; assertNull ( STRING , org.springframework.beans.propertyeditors.BeanInfoTests.ValueBean . java.lang.Integer ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertNull ( STRING , org.springframework.beans.propertyeditors.BeanInfoTests.ValueBean . java.lang.Integer ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] ( ) { try { java.beans.PropertyDescriptor java.beans.PropertyDescriptor = new java.beans.PropertyDescriptor ( STRING , org.springframework.beans.propertyeditors.BeanInfoTests.ValueBean .class ) ; java.beans.PropertyDescriptor . void ( org.springframework.beans.propertyeditors.BeanInfoTests.MyNumberEditor .class ) ; return new java.beans.PropertyDescriptor [] { java.beans.PropertyDescriptor } ; } catch ( java.beans.IntrospectionException java.beans.IntrospectionException ) { throw new FatalBeanException ( STRING , java.beans.IntrospectionException ) ; } }  <METHOD_END>
<METHOD_START> public void ( ) java.lang.IllegalArgumentException { super( java.lang.Integer .class , true ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) throws java.lang.IllegalArgumentException { super( java.lang.Integer .class , true ); this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { Assert . isTrue ( this . java.lang.Object instanceof org.springframework.beans.propertyeditors.BeanInfoTests.ValueBean , STRING ) ; super. setAsText ( java.lang.String ) ; }  <METHOD_END>
