<METHOD_START> protected void ( java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) { super( AmqpHeaders . PREFIX , java.util.List<java.lang.String> , java.util.List<java.lang.String> ); if ( java.lang.String[] != null ) { setRequestHeaderNames ( java.lang.String[] ) ; } if ( java.lang.String[] != null ) { setReplyHeaderNames ( java.lang.String[] ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( MessageProperties org.springframework.integration.amqp.support.MessageProperties ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; try { java.lang.String java.lang.String = org.springframework.integration.amqp.support.MessageProperties . getAppId ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . APP_ID , java.lang.String ) ; } java.lang.String java.lang.String = org.springframework.integration.amqp.support.MessageProperties . getClusterId ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CLUSTER_ID , java.lang.String ) ; } java.lang.String java.lang.String = org.springframework.integration.amqp.support.MessageProperties . getContentEncoding ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CONTENT_ENCODING , java.lang.String ) ; } long long = org.springframework.integration.amqp.support.MessageProperties . getContentLength ( ) ; if ( long > NUMBER ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CONTENT_LENGTH , long ) ; } java.lang.String java.lang.String = org.springframework.integration.amqp.support.MessageProperties . getContentType ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CONTENT_TYPE , java.lang.String ) ; } java.lang.String java.lang.String = org.springframework.integration.amqp.support.MessageProperties . getCorrelationId ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CORRELATION_ID , java.lang.String ) ; } MessageDeliveryMode org.springframework.integration.amqp.support.MessageDeliveryMode = org.springframework.integration.amqp.support.MessageProperties . getReceivedDeliveryMode ( ) ; if ( org.springframework.integration.amqp.support.MessageDeliveryMode != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . RECEIVED_DELIVERY_MODE , org.springframework.integration.amqp.support.MessageDeliveryMode ) ; } long long = org.springframework.integration.amqp.support.MessageProperties . getDeliveryTag ( ) ; if ( long > NUMBER ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . DELIVERY_TAG , long ) ; } java.lang.String java.lang.String = org.springframework.integration.amqp.support.MessageProperties . getExpiration ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . EXPIRATION , java.lang.String ) ; } java.lang.Integer java.lang.Integer = org.springframework.integration.amqp.support.MessageProperties . getMessageCount ( ) ; if ( java.lang.Integer != null && java.lang.Integer > NUMBER ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . MESSAGE_COUNT , java.lang.Integer ) ; } java.lang.String java.lang.String = org.springframework.integration.amqp.support.MessageProperties . getMessageId ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . MESSAGE_ID , java.lang.String ) ; } java.lang.Integer java.lang.Integer = org.springframework.integration.amqp.support.MessageProperties . getPriority ( ) ; if ( java.lang.Integer != null && java.lang.Integer > NUMBER ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( IntegrationMessageHeaderAccessor . PRIORITY , java.lang.Integer ) ; } java.lang.Integer java.lang.Integer = org.springframework.integration.amqp.support.MessageProperties . getReceivedDelay ( ) ; if ( java.lang.Integer != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . RECEIVED_DELAY , java.lang.Integer ) ; } java.lang.String java.lang.String = org.springframework.integration.amqp.support.MessageProperties . getReceivedExchange ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . RECEIVED_EXCHANGE , java.lang.String ) ; } java.lang.String java.lang.String = org.springframework.integration.amqp.support.MessageProperties . getReceivedRoutingKey ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . RECEIVED_ROUTING_KEY , java.lang.String ) ; } java.lang.Boolean java.lang.Boolean = org.springframework.integration.amqp.support.MessageProperties . isRedelivered ( ) ; if ( java.lang.Boolean != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . REDELIVERED , java.lang.Boolean ) ; } java.lang.String java.lang.String = org.springframework.integration.amqp.support.MessageProperties . getReplyTo ( ) ; if ( java.lang.String != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . REPLY_TO , java.lang.String ) ; } java.util.Date java.util.Date = org.springframework.integration.amqp.support.MessageProperties . getTimestamp ( ) ; if ( java.util.Date != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . TIMESTAMP , java.util.Date ) ; } java.lang.String java.lang.String = org.springframework.integration.amqp.support.MessageProperties . getType ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . TYPE , java.lang.String ) ; } java.lang.String java.lang.String = org.springframework.integration.amqp.support.MessageProperties . getReceivedUserId ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . RECEIVED_USER_ID , java.lang.String ) ; } for ( java.lang.String java.lang.String : JsonHeaders . HEADERS ) { java.lang.Object java.lang.Object = org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) . get ( java.lang.String . java.lang.String ( JsonHeaders . PREFIX , STRING ) ) ; if ( java.lang.Object instanceof java.lang.String && StringUtils . hasText ( ( java.lang.String ) java.lang.Object ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING , java.lang.Exception ) ; } } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( MessageProperties org.springframework.integration.amqp.support.MessageProperties ) { return org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , MessageProperties org.springframework.integration.amqp.support.MessageProperties ) { java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . APP_ID , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.amqp.support.MessageProperties . setAppId ( java.lang.String ) ; } java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . CLUSTER_ID , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.amqp.support.MessageProperties . setClusterId ( java.lang.String ) ; } java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . CONTENT_ENCODING , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.amqp.support.MessageProperties . setContentEncoding ( java.lang.String ) ; } java.lang.Long java.lang.Long = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . CONTENT_LENGTH , java.lang.Long .class ) ; if ( java.lang.Long != null ) { org.springframework.integration.amqp.support.MessageProperties . setContentLength ( java.lang.Long ) ; } java.lang.String java.lang.String = this . java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.amqp.support.MessageProperties . setContentType ( java.lang.String ) ; } java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . CORRELATION_ID , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.amqp.support.MessageProperties . setCorrelationId ( java.lang.String ) ; } java.lang.Integer java.lang.Integer = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . DELAY , java.lang.Integer .class ) ; if ( java.lang.Integer != null ) { org.springframework.integration.amqp.support.MessageProperties . setDelay ( java.lang.Integer ) ; } MessageDeliveryMode org.springframework.integration.amqp.support.MessageDeliveryMode = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . DELIVERY_MODE , MessageDeliveryMode .class ) ; if ( org.springframework.integration.amqp.support.MessageDeliveryMode != null ) { org.springframework.integration.amqp.support.MessageProperties . setDeliveryMode ( org.springframework.integration.amqp.support.MessageDeliveryMode ) ; } java.lang.Long java.lang.Long = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . DELIVERY_TAG , java.lang.Long .class ) ; if ( java.lang.Long != null ) { org.springframework.integration.amqp.support.MessageProperties . setDeliveryTag ( java.lang.Long ) ; } java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . EXPIRATION , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.amqp.support.MessageProperties . setExpiration ( java.lang.String ) ; } java.lang.Integer java.lang.Integer = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . MESSAGE_COUNT , java.lang.Integer .class ) ; if ( java.lang.Integer != null ) { org.springframework.integration.amqp.support.MessageProperties . setMessageCount ( java.lang.Integer ) ; } java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . MESSAGE_ID , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.amqp.support.MessageProperties . setMessageId ( java.lang.String ) ; } java.lang.Integer java.lang.Integer = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , IntegrationMessageHeaderAccessor . PRIORITY , java.lang.Integer .class ) ; if ( java.lang.Integer != null ) { org.springframework.integration.amqp.support.MessageProperties . setPriority ( java.lang.Integer ) ; } java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . RECEIVED_EXCHANGE , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.amqp.support.MessageProperties . setReceivedExchange ( java.lang.String ) ; } java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . RECEIVED_ROUTING_KEY , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.amqp.support.MessageProperties . setReceivedRoutingKey ( java.lang.String ) ; } java.lang.Boolean java.lang.Boolean = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . REDELIVERED , java.lang.Boolean .class ) ; if ( java.lang.Boolean != null ) { org.springframework.integration.amqp.support.MessageProperties . setRedelivered ( java.lang.Boolean ) ; } java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . REPLY_TO , java.lang.String .class ) ; if ( java.lang.String != null ) { org.springframework.integration.amqp.support.MessageProperties . setReplyTo ( java.lang.String ) ; } java.util.Date java.util.Date = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . TIMESTAMP , java.util.Date .class ) ; if ( java.util.Date != null ) { org.springframework.integration.amqp.support.MessageProperties . setTimestamp ( java.util.Date ) ; } java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . TYPE , java.lang.String .class ) ; if ( java.lang.String != null ) { org.springframework.integration.amqp.support.MessageProperties . setType ( java.lang.String ) ; } java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . USER_ID , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.amqp.support.MessageProperties . setUserId ( java.lang.String ) ; } java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; for ( java.lang.String java.lang.String : JsonHeaders . HEADERS ) { java.lang.Object java.lang.Object = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.String , java.lang.Object .class ) ; if ( java.lang.Object != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object instanceof java.lang.Class<?> < ? > ) { java.lang.Object = ( ( java.lang.Class<?> < ? > ) java.lang.Object ) . java.lang.String ( ) ; } java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String . java.lang.String ( JsonHeaders . PREFIX , STRING ) , java.lang.Object . java.lang.String ( ) ) ; } } if ( ! org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) . containsKey ( JsonHeaders . TYPE_ID . replaceFirst ( JsonHeaders . PREFIX , STRING ) ) ) { org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) . putAll ( java.util.Map<java.lang.String,java.lang.String> ) ; } java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . SPRING_REPLY_CORRELATION , java.lang.String .class ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { org.springframework.integration.amqp.support.MessageProperties . setHeader ( STRING , java.lang.String ) ; } java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . SPRING_REPLY_TO_STACK , java.lang.String .class ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { org.springframework.integration.amqp.support.MessageProperties . setHeader ( STRING , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , MessageProperties org.springframework.integration.amqp.support.MessageProperties ) { if ( ! org.springframework.integration.amqp.support.MessageProperties . getHeaders ( ) . containsKey ( java.lang.String ) ) { org.springframework.integration.amqp.support.MessageProperties . setHeader ( java.lang.String , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.lang.String java.lang.String = null ; java.lang.Object java.lang.Object = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , AmqpHeaders . CONTENT_TYPE , java.lang.Object .class ) ; if ( java.lang.Object != null ) { java.lang.String java.lang.String = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ; if ( java.lang.Object instanceof MimeType ) { java.lang.String = java.lang.Object . java.lang.String ( ) ; } else if ( java.lang.Object instanceof java.lang.String ) { java.lang.String = ( java.lang.String ) java.lang.Object ; } else { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + AmqpHeaders . CONTENT_TYPE + STRING + java.lang.String + STRING ) ; } } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( MessageProperties org.springframework.integration.amqp.support.MessageProperties ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = super. toHeadersFromRequest ( org.springframework.integration.amqp.support.MessageProperties ) ; void ( org.springframework.integration.amqp.support.MessageProperties , java.util.Map<java.lang.String,java.lang.Object> ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private void void ( MessageProperties org.springframework.integration.amqp.support.MessageProperties , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.lang.String java.lang.String = org.springframework.integration.amqp.support.MessageProperties . getConsumerTag ( ) ; if ( java.lang.String != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CONSUMER_TAG , java.lang.String ) ; } java.lang.String java.lang.String = org.springframework.integration.amqp.support.MessageProperties . getConsumerQueue ( ) ; if ( java.lang.String != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . CONSUMER_QUEUE , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper ( ) { return new org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper ( java.lang.String[] ( ) , java.lang.String[] ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper ( ) { return new org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper ( java.lang.String[] ( ) , java.lang.String[] ( ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
<METHOD_START> public static java.lang.String [] java.lang.String[] ( ) { return java.lang.String[] ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String [] java.lang.String[] ( ) { return java.lang.String[] ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
<METHOD_START> private static java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING , STRING } ; }  <METHOD_END>
