<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpSocketFactorySupport org.springframework.integration.ip.tcp.connection.TcpSocketFactorySupport = mock ( TcpSocketFactorySupport .class ) ; javax.net.SocketFactory javax.net.SocketFactory = Mockito . mock ( javax.net.SocketFactory .class ) ; when ( org.springframework.integration.ip.tcp.connection.TcpSocketFactorySupport . getSocketFactory ( ) ) . thenReturn ( javax.net.SocketFactory ) ; java.net.Socket java.net.Socket = mock ( java.net.Socket .class ) ; java.io.InputStream java.io.InputStream = mock ( java.io.InputStream .class ) ; when ( java.io.InputStream . int ( ) ) . thenReturn ( - NUMBER ) ; when ( java.net.Socket . java.io.InputStream ( ) ) . thenReturn ( java.io.InputStream ) ; java.net.InetAddress java.net.InetAddress = java.net.InetAddress . java.net.InetAddress ( ) ; when ( java.net.Socket . java.net.InetAddress ( ) ) . thenReturn ( java.net.InetAddress ) ; when ( javax.net.SocketFactory . java.net.Socket ( STRING , NUMBER ) ) . thenReturn ( java.net.Socket ) ; TcpSocketSupport org.springframework.integration.ip.tcp.connection.TcpSocketSupport = Mockito . mock ( TcpSocketSupport .class ) ; TcpNetClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . setTcpSocketFactorySupport ( org.springframework.integration.ip.tcp.connection.TcpSocketFactorySupport ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . setTcpSocketSupport ( org.springframework.integration.ip.tcp.connection.TcpSocketSupport ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . start ( ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . getConnection ( ) ; verify ( org.springframework.integration.ip.tcp.connection.TcpSocketSupport ) . postProcessSocket ( java.net.Socket ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpSocketFactorySupport org.springframework.integration.ip.tcp.connection.TcpSocketFactorySupport = mock ( TcpSocketFactorySupport .class ) ; javax.net.ServerSocketFactory javax.net.ServerSocketFactory = mock ( javax.net.ServerSocketFactory .class ) ; when ( org.springframework.integration.ip.tcp.connection.TcpSocketFactorySupport . getServerSocketFactory ( ) ) . thenReturn ( javax.net.ServerSocketFactory ) ; java.net.Socket java.net.Socket = mock ( java.net.Socket .class ) ; java.io.InputStream java.io.InputStream = mock ( java.io.InputStream .class ) ; when ( java.io.InputStream . int ( ) ) . thenReturn ( - NUMBER ) ; when ( java.net.Socket . java.io.InputStream ( ) ) . thenReturn ( java.io.InputStream ) ; java.net.InetAddress java.net.InetAddress = java.net.InetAddress . java.net.InetAddress ( ) ; when ( java.net.Socket . java.net.InetAddress ( ) ) . thenReturn ( java.net.InetAddress ) ; java.net.ServerSocket java.net.ServerSocket = mock ( java.net.ServerSocket .class ) ; when ( java.net.ServerSocket . java.net.InetAddress ( ) ) . thenReturn ( java.net.InetAddress ) ; when ( javax.net.ServerSocketFactory . java.net.ServerSocket ( NUMBER , NUMBER ) ) . thenReturn ( java.net.ServerSocket ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; when ( java.net.ServerSocket . java.net.Socket ( ) ) . thenReturn ( java.net.Socket ) . then ( invocation -> { latch1 . countDown ( ) ; latch2 . await ( NUMBER , TimeUnit . SECONDS ) ; return null ; } ) ; TcpSocketSupport org.springframework.integration.ip.tcp.connection.TcpSocketSupport = mock ( TcpSocketSupport .class ) ; TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . setTcpSocketFactorySupport ( org.springframework.integration.ip.tcp.connection.TcpSocketFactorySupport ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . setTcpSocketSupport ( org.springframework.integration.ip.tcp.connection.TcpSocketSupport ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . registerListener ( mock ( TcpListener .class ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . start ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; verify ( org.springframework.integration.ip.tcp.connection.TcpSocketSupport ) . postProcessServerSocket ( java.net.ServerSocket ) ; verify ( org.springframework.integration.ip.tcp.connection.TcpSocketSupport ) . postProcessSocket ( java.net.Socket ) ; java.util.concurrent.CountDownLatch . void ( ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNioServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . registerListener ( message -> false ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; TcpSocketSupport org.springframework.integration.ip.tcp.connection.TcpSocketSupport = new TcpSocketSupport ( ) { @ java.lang.Override public void void ( java.net.Socket java.net.Socket ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; } @ java.lang.Override public void void ( java.net.ServerSocket java.net.ServerSocket ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } } ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . setTcpSocketSupport ( org.springframework.integration.ip.tcp.connection.TcpSocketSupport ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory , null ) ; TcpNioClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory = new TcpNioClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . getPort ( ) ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; TcpSocketSupport org.springframework.integration.ip.tcp.connection.TcpSocketSupport = new TcpSocketSupport ( ) { @ java.lang.Override public void void ( java.net.Socket java.net.Socket ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } @ java.lang.Override public void void ( java.net.ServerSocket java.net.ServerSocket ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } } ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . setTcpSocketSupport ( org.springframework.integration.ip.tcp.connection.TcpSocketSupport ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . start ( ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . getConnection ( ) . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . stop ( ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.net.Socket java.net.Socket ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.net.ServerSocket java.net.ServerSocket ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.net.Socket java.net.Socket ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.net.ServerSocket java.net.ServerSocket ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; TcpSSLContextSupport org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport = new DefaultTcpSSLContextSupport ( STRING , STRING , STRING , STRING ) ; DefaultTcpNetSSLSocketFactorySupport org.springframework.integration.ip.tcp.connection.DefaultTcpNetSSLSocketFactorySupport = new DefaultTcpNetSSLSocketFactorySupport ( org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . setTcpSocketFactorySupport ( org.springframework.integration.ip.tcp.connection.DefaultTcpNetSSLSocketFactorySupport ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . registerListener ( message -> { messages . add ( message ) ; latch . countDown ( ) ; return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . setMapper ( new org.springframework.integration.ip.tcp.connection.SocketSupportTests.SSLMapper ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , null ) ; TcpNetClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . setTcpSocketFactorySupport ( org.springframework.integration.ip.tcp.connection.DefaultTcpNetSSLSocketFactorySupport ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( NUMBER ) . getPayload ( ) ) ) ; assertNotNull ( java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( NUMBER ) . getHeaders ( ) . get ( STRING ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . stop ( ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false ) ; try { void ( true ) ; fail ( STRING ) ; } catch ( javax.net.ssl.SSLException | java.net.SocketException java.io.IOException ) { } }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) throws java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; TcpSSLContextSupport org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport = new DefaultTcpSSLContextSupport ( STRING , STRING , STRING , STRING ) ; DefaultTcpNetSSLSocketFactorySupport org.springframework.integration.ip.tcp.connection.DefaultTcpNetSSLSocketFactorySupport = new DefaultTcpNetSSLSocketFactorySupport ( org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . setTcpSocketFactorySupport ( org.springframework.integration.ip.tcp.connection.DefaultTcpNetSSLSocketFactorySupport ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . registerListener ( message -> { messages . add ( message ) ; latch . countDown ( ) ; return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . setTcpSocketSupport ( new DefaultTcpSocketSupport ( ) { @ java.lang.Override public void void ( java.net.ServerSocket java.net.ServerSocket ) { ( ( javax.net.ssl.SSLServerSocket ) java.net.ServerSocket ) . void ( true ) ; } } ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , null ) ; TcpNetClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ) ; TcpSSLContextSupport org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport = new DefaultTcpSSLContextSupport ( boolean ? STRING : STRING , STRING , STRING , STRING ) ; DefaultTcpNetSSLSocketFactorySupport org.springframework.integration.ip.tcp.connection.DefaultTcpNetSSLSocketFactorySupport = new DefaultTcpNetSSLSocketFactorySupport ( org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . setTcpSocketFactorySupport ( org.springframework.integration.ip.tcp.connection.DefaultTcpNetSSLSocketFactorySupport ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( NUMBER ) . getPayload ( ) ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . stop ( ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.net.ServerSocket java.net.ServerSocket ) { ( ( javax.net.ssl.SSLServerSocket ) java.net.ServerSocket ) . void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; TcpNioServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . setSslHandshakeTimeout ( NUMBER ) ; DefaultTcpSSLContextSupport org.springframework.integration.ip.tcp.connection.DefaultTcpSSLContextSupport = new DefaultTcpSSLContextSupport ( STRING , STRING , STRING , STRING ) ; org.springframework.integration.ip.tcp.connection.DefaultTcpSSLContextSupport . setProtocol ( STRING ) ; DefaultTcpNioSSLConnectionSupport org.springframework.integration.ip.tcp.connection.DefaultTcpNioSSLConnectionSupport = new DefaultTcpNioSSLConnectionSupport ( org.springframework.integration.ip.tcp.connection.DefaultTcpSSLContextSupport ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . setTcpNioConnectionSupport ( org.springframework.integration.ip.tcp.connection.DefaultTcpNioSSLConnectionSupport ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . registerListener ( message -> { messages . add ( message ) ; latch . countDown ( ) ; return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . setMapper ( new org.springframework.integration.ip.tcp.connection.SocketSupportTests.SSLMapper ( ) ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference<java.lang.String> <> ( ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . setApplicationEventPublisher ( e -> { if ( e instanceof TcpConnectionOpenEvent ) { serverConnectionId . set ( ( ( TcpConnectionEvent ) e ) . getConnectionId ( ) ) ; } } ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory , null ) ; TcpNioClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory = new TcpNioClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . getPort ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . setSslHandshakeTimeout ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . setTcpNioConnectionSupport ( org.springframework.integration.ip.tcp.connection.DefaultTcpNioSSLConnectionSupport ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . registerListener ( message -> false ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . setApplicationEventPublisher ( e -> { } ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . getConnection ( ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( NUMBER ) . getPayload ( ) ) ) ; assertNotNull ( java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( NUMBER ) . getHeaders ( ) . get ( STRING ) ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory , STRING , java.util.Map .class ) ; java.lang.Object java.lang.Object = java.util.Map<,> . get ( java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . stop ( ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false ) ; try { void ( true ) ; fail ( STRING ) ; } catch ( java.io.IOException java.io.IOException ) { if ( ! ( java.io.IOException instanceof java.nio.channels.ClosedChannelException ) ) { assertThat ( java.io.IOException . java.lang.String ( ) , anyOf ( containsString ( STRING ) , containsString ( STRING ) ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) throws java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; TcpNioServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; TcpSSLContextSupport org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport = new DefaultTcpSSLContextSupport ( STRING , STRING , STRING , STRING ) ; DefaultTcpNioSSLConnectionSupport org.springframework.integration.ip.tcp.connection.DefaultTcpNioSSLConnectionSupport = new DefaultTcpNioSSLConnectionSupport ( org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport ) { @ java.lang.Override protected void void ( javax.net.ssl.SSLEngine javax.net.ssl.SSLEngine ) { javax.net.ssl.SSLEngine . void ( true ) ; } } ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . setTcpNioConnectionSupport ( org.springframework.integration.ip.tcp.connection.DefaultTcpNioSSLConnectionSupport ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . registerListener ( message -> { messages . add ( message ) ; latch . countDown ( ) ; return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory , null ) ; TcpNioClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory = new TcpNioClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . getPort ( ) ) ; TcpSSLContextSupport org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport = new DefaultTcpSSLContextSupport ( boolean ? STRING : STRING , STRING , STRING , STRING ) ; DefaultTcpNioSSLConnectionSupport org.springframework.integration.ip.tcp.connection.DefaultTcpNioSSLConnectionSupport = new DefaultTcpNioSSLConnectionSupport ( org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . setTcpNioConnectionSupport ( org.springframework.integration.ip.tcp.connection.DefaultTcpNioSSLConnectionSupport ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( NUMBER ) . getPayload ( ) ) ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . stop ( ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( javax.net.ssl.SSLEngine javax.net.ssl.SSLEngine ) { javax.net.ssl.SSLEngine . void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; TcpNioServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; TcpSSLContextSupport org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport = new DefaultTcpSSLContextSupport ( STRING , STRING , STRING , STRING ) ; DefaultTcpNioSSLConnectionSupport org.springframework.integration.ip.tcp.connection.DefaultTcpNioSSLConnectionSupport = new DefaultTcpNioSSLConnectionSupport ( org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . setTcpNioConnectionSupport ( org.springframework.integration.ip.tcp.connection.DefaultTcpNioSSLConnectionSupport ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final org.springframework.integration.ip.tcp.connection.SocketSupportTests.Replier org.springframework.integration.ip.tcp.connection.SocketSupportTests.Replier = new org.springframework.integration.ip.tcp.connection.SocketSupportTests.Replier ( ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . registerSender ( org.springframework.integration.ip.tcp.connection.SocketSupportTests.Replier ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . registerListener ( message -> { messages . add ( message ) ; try { replier . send ( message ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } latch . countDown ( ) ; return false ; } ) ; ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer . setMaxMessageSize ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference<java.lang.String> <> ( ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . setApplicationEventPublisher ( e -> { if ( e instanceof TcpConnectionOpenEvent ) { serverConnectionId . set ( ( ( TcpConnectionEvent ) e ) . getConnectionId ( ) ) ; } } ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory , null ) ; TcpNioClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory = new TcpNioClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . getPort ( ) ) ; TcpSSLContextSupport org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport = new DefaultTcpSSLContextSupport ( STRING , STRING , STRING , STRING ) ; DefaultTcpNioSSLConnectionSupport org.springframework.integration.ip.tcp.connection.DefaultTcpNioSSLConnectionSupport = new DefaultTcpNioSSLConnectionSupport ( org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . setTcpNioConnectionSupport ( org.springframework.integration.ip.tcp.connection.DefaultTcpNioSSLConnectionSupport ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . registerListener ( message -> { messages . add ( message ) ; latch . countDown ( ) ; return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . setApplicationEventPublisher ( e -> { } ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . getConnection ( ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING ) ) ; byte [] byte[] = new byte [ NUMBER ] ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( new GenericMessage < java.lang.String > ( STRING + new java.lang.String ( byte[] ) ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; byte [] byte[] = ( byte [] ) java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( NUMBER ) . getPayload ( ) ; assertEquals ( NUMBER + byte[] . int , byte[] . int ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) . java.lang.String ( NUMBER , NUMBER ) ) ; byte[] = ( byte [] ) java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( NUMBER ) . getPayload ( ) ; assertEquals ( NUMBER + byte[] . int , byte[] . int ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) . java.lang.String ( NUMBER , NUMBER ) ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory , STRING , java.util.Map .class ) ; java.lang.Object java.lang.Object = java.util.Map<,> . get ( java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . stop ( ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { this . org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.TcpConnection ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) {		}  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> ) throws java.lang.Exception { javax.net.ssl.SSLEngine javax.net.ssl.SSLEngine = TestUtils . getPropertyValue ( this . org.springframework.integration.ip.tcp.connection.TcpConnection , STRING , javax.net.ssl.SSLEngine .class ) ; javax.net.ssl.SSLEngine . javax.net.ssl.SSLSession ( ) . void ( ) ; javax.net.ssl.SSLEngine . void ( ) ; this . org.springframework.integration.ip.tcp.connection.TcpConnection . send ( org.springframework.integration.ip.tcp.connection.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { return java.util.Collections . java.util.Map ( STRING , org.springframework.integration.ip.tcp.connection.TcpConnection . getSslSession ( ) . getCipherSuite ( ) ) ; }  <METHOD_END>
