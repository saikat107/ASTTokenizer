<METHOD_START> public void ( StompSessionManager org.springframework.integration.stomp.inbound.StompSessionManager , java.lang.String ... java.lang.String[] ) { Assert . notNull ( org.springframework.integration.stomp.inbound.StompSessionManager , STRING ) ; if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } this . org.springframework.integration.stomp.inbound.StompSessionManager = org.springframework.integration.stomp.inbound.StompSessionManager ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageChannel org.springframework.integration.stomp.inbound.MessageChannel ) { super. setErrorChannel ( org.springframework.integration.stomp.inbound.MessageChannel ) ; this . org.springframework.integration.stomp.inbound.MessageChannel = org.springframework.integration.stomp.inbound.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( HeaderMapper < StompHeaders > org.springframework.integration.stomp.inbound.HeaderMapper<org.springframework.integration.stomp.inbound.StompHeaders> ) { Assert . notNull ( org.springframework.integration.stomp.inbound.HeaderMapper<org.springframework.integration.stomp.inbound.StompHeaders> , STRING ) ; this . org.springframework.integration.stomp.inbound.HeaderMapper<org.springframework.integration.stomp.inbound.StompHeaders> = org.springframework.integration.stomp.inbound.HeaderMapper<org.springframework.integration.stomp.inbound.StompHeaders> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.integration.stomp.inbound.ApplicationEventPublisher ) { this . org.springframework.integration.stomp.inbound.ApplicationEventPublisher = org.springframework.integration.stomp.inbound.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> @ ManagedAttribute public java.lang.String [] java.lang.String[] ( ) { this . java.util.concurrent.locks.Lock . void ( ) ; try { return this . java.util.Set<java.lang.String> . java.lang.String[] ( new java.lang.String [ this . java.util.Set<java.lang.String> . int ( ) ] ) ; } finally { this . java.util.concurrent.locks.Lock . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ ManagedOperation public void void ( java.lang.String ... java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; this . java.util.concurrent.locks.Lock . void ( ) ; try { for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { if ( this . logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } void ( java.lang.String ) ; } } } finally { this . java.util.concurrent.locks.Lock . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ ManagedOperation public void void ( java.lang.String ... java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; this . java.util.concurrent.locks.Lock . void ( ) ; try { for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { if ( this . logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } StompSession . StompSession StompSession.Subscription = this . java.util.Map<java.lang.String,StompSession.Subscription> . get ( java.lang.String ) ; if ( StompSession.Subscription != null ) { StompSession.Subscription . unsubscribe ( ) ; } else { if ( this . logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } } } } } finally { this . java.util.concurrent.locks.Lock . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . org.springframework.integration.stomp.inbound.StompSessionManager instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.stomp.inbound.StompSessionManager ) . start ( ) ; } this . org.springframework.integration.stomp.inbound.StompSessionManager . connect ( this . org.springframework.integration.stomp.inbound.StompSessionHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.integration.stomp.inbound.StompSessionManager . disconnect ( this . org.springframework.integration.stomp.inbound.StompSessionHandler ) ; try { for ( StompSession . StompSession StompSession.Subscription : this . java.util.Map<java.lang.String,StompSession.Subscription> . values ( ) ) { StompSession.Subscription . unsubscribe ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { logger . warn ( STRING , java.lang.Exception ) ; } this . java.util.Map<java.lang.String,StompSession.Subscription> . clear ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( final java.lang.String java.lang.String ) { if ( this . org.springframework.integration.stomp.inbound.StompSession != null ) { final StompSession . StompSession StompSession.Subscription = this . org.springframework.integration.stomp.inbound.StompSession . subscribe ( java.lang.String , new StompFrameHandler ( ) { @ java.lang.Override public java.lang.reflect.Type java.lang.reflect.Type ( StompHeaders org.springframework.integration.stomp.inbound.StompHeaders ) { return org.springframework.integration.stomp.inbound.StompInboundChannelAdapter .this . java.lang.Class<> ; } @ java.lang.Override public void void ( StompHeaders org.springframework.integration.stomp.inbound.StompHeaders , java.lang.Object java.lang.Object ) { Message < ? > org.springframework.integration.stomp.inbound.Message<?> ; if ( java.lang.Object instanceof Message ) { org.springframework.integration.stomp.inbound.Message<?> = ( Message < ? > ) java.lang.Object ; } else { org.springframework.integration.stomp.inbound.Message<?> = getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . copyHeaders ( org.springframework.integration.stomp.inbound.StompInboundChannelAdapter .this . org.springframework.integration.stomp.inbound.HeaderMapper<org.springframework.integration.stomp.inbound.StompHeaders> . toHeaders ( org.springframework.integration.stomp.inbound.StompHeaders ) ) . build ( ) ; } sendMessage ( org.springframework.integration.stomp.inbound.Message<> ) ; } } ) ; if ( this . org.springframework.integration.stomp.inbound.StompSessionManager . isAutoReceiptEnabled ( ) ) { final ApplicationEventPublisher org.springframework.integration.stomp.inbound.ApplicationEventPublisher = this . org.springframework.integration.stomp.inbound.ApplicationEventPublisher ; if ( org.springframework.integration.stomp.inbound.ApplicationEventPublisher != null ) { StompSession.Subscription . addReceiptTask ( ( ) { StompReceiptEvent event = new StompReceiptEvent ( StompInboundChannelAdapter .this , destination , subscription . getReceiptId ( ) , StompCommand . SUBSCRIBE , false ) ; applicationEventPublisher . publishEvent ( event ) ; } ) ; } StompSession.Subscription . addReceiptLostTask ( ( ) { if ( applicationEventPublisher != null ) { StompReceiptEvent event = new StompReceiptEvent ( StompInboundChannelAdapter .this , destination , subscription . getReceiptId ( ) , StompCommand . SUBSCRIBE , true ) ; applicationEventPublisher . publishEvent ( event ) ; } else { logger . error ( STRING + subscription . getReceiptId ( ) + STRING + subscription . getSubscriptionId ( ) + STRING + destination + STRING ) ; } } ) ; } this . java.util.Map<java.lang.String,StompSession.Subscription> . put ( java.lang.String , StompSession.Subscription ) ; } else { logger . warn ( STRING + getComponentName ( ) + STRING + this . org.springframework.integration.stomp.inbound.StompSessionManager + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Type java.lang.reflect.Type ( StompHeaders org.springframework.integration.stomp.inbound.StompHeaders ) { return org.springframework.integration.stomp.inbound.StompInboundChannelAdapter .this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompHeaders org.springframework.integration.stomp.inbound.StompHeaders , java.lang.Object java.lang.Object ) { Message < ? > org.springframework.integration.stomp.inbound.Message<?> ; if ( java.lang.Object instanceof Message ) { org.springframework.integration.stomp.inbound.Message<?> = ( Message < ? > ) java.lang.Object ; } else { org.springframework.integration.stomp.inbound.Message<?> = getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . copyHeaders ( org.springframework.integration.stomp.inbound.StompInboundChannelAdapter .this . org.springframework.integration.stomp.inbound.HeaderMapper<org.springframework.integration.stomp.inbound.StompHeaders> . toHeaders ( org.springframework.integration.stomp.inbound.StompHeaders ) ) . build ( ) ; } sendMessage ( org.springframework.integration.stomp.inbound.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSession org.springframework.integration.stomp.inbound.StompSession , StompHeaders org.springframework.integration.stomp.inbound.StompHeaders ) { org.springframework.integration.stomp.inbound.StompInboundChannelAdapter .this . org.springframework.integration.stomp.inbound.StompSession = org.springframework.integration.stomp.inbound.StompSession ; for ( java.lang.String java.lang.String : org.springframework.integration.stomp.inbound.StompInboundChannelAdapter .this . java.util.Set<java.lang.String> ) { void ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSession org.springframework.integration.stomp.inbound.StompSession , StompCommand org.springframework.integration.stomp.inbound.StompCommand , StompHeaders org.springframework.integration.stomp.inbound.StompHeaders , byte [] byte[] , java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.integration.stomp.inbound.StompInboundChannelAdapter .this . org.springframework.integration.stomp.inbound.MessageChannel != null ) { StompHeaderAccessor org.springframework.integration.stomp.inbound.StompHeaderAccessor = StompHeaderAccessor . create ( org.springframework.integration.stomp.inbound.StompCommand ) ; org.springframework.integration.stomp.inbound.StompHeaderAccessor . copyHeaders ( org.springframework.integration.stomp.inbound.StompInboundChannelAdapter .this . org.springframework.integration.stomp.inbound.HeaderMapper<org.springframework.integration.stomp.inbound.StompHeaders> . toHeaders ( org.springframework.integration.stomp.inbound.StompHeaders ) ) ; Message < byte [] > org.springframework.integration.stomp.inbound.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.integration.stomp.inbound.StompHeaderAccessor . getMessageHeaders ( ) ) ; getMessagingTemplate ( ) . send ( org.springframework.integration.stomp.inbound.StompInboundChannelAdapter .this . org.springframework.integration.stomp.inbound.MessageChannel , new ErrorMessage ( new MessageHandlingException ( org.springframework.integration.stomp.inbound.Message<byte[]> , java.lang.Throwable ) ) ) ; } else { logger . error ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSession org.springframework.integration.stomp.inbound.StompSession , java.lang.Throwable java.lang.Throwable ) { org.springframework.integration.stomp.inbound.StompInboundChannelAdapter .this . org.springframework.integration.stomp.inbound.StompSession = null ; }  <METHOD_END>
