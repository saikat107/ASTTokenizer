<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.reactive.server.samples.WebTestClient . get ( ) . uri ( STRING ) . header ( STRING , STRING ) . exchange ( ) . expectStatus ( ) . isOk ( ) . expectHeader ( ) . valueEquals ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.reactive.server.samples.WebTestClient . get ( ) . uri ( STRING ) . exchange ( ) . expectStatus ( ) . isOk ( ) . expectHeader ( ) . valueEquals ( STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) org.springframework.test.web.reactive.server.samples.ResponseEntity<java.lang.Void> < java.lang.Void > org.springframework.test.web.reactive.server.samples.ResponseEntity<java.lang.Void> ( @ RequestHeader ( STRING ) java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String + STRING ; return ResponseEntity . ok ( ) . header ( STRING , java.lang.String ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) org.springframework.test.web.reactive.server.samples.ResponseEntity<java.lang.Void> < java.lang.Void > org.springframework.test.web.reactive.server.samples.ResponseEntity<java.lang.Void> ( ) { return ResponseEntity . ok ( ) . header ( STRING , STRING , STRING , STRING ) . build ( ) ; }  <METHOD_END>
