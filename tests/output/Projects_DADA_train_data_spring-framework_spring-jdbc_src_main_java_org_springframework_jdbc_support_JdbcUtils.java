<METHOD_START> public static void void ( java.sql.Connection java.sql.Connection ) { if ( java.sql.Connection != null ) { try { java.sql.Connection . void ( ) ; } catch ( java.sql.SQLException java.sql.SQLException ) { org.springframework.jdbc.support.Log . debug ( STRING , java.sql.SQLException ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.jdbc.support.Log . debug ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> public static void void ( java.sql.Statement java.sql.Statement ) { if ( java.sql.Statement != null ) { try { java.sql.Statement . void ( ) ; } catch ( java.sql.SQLException java.sql.SQLException ) { org.springframework.jdbc.support.Log . trace ( STRING , java.sql.SQLException ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.jdbc.support.Log . trace ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> public static void void ( java.sql.ResultSet java.sql.ResultSet ) { if ( java.sql.ResultSet != null ) { try { java.sql.ResultSet . void ( ) ; } catch ( java.sql.SQLException java.sql.SQLException ) { org.springframework.jdbc.support.Log . trace ( STRING , java.sql.SQLException ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.jdbc.support.Log . trace ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.sql.ResultSet java.sql.ResultSet , int int , java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.sql.SQLException { if ( java.lang.Class<> == null ) { return java.lang.Object ( java.sql.ResultSet , int ) ; } java.lang.Object java.lang.Object ; if ( java.lang.String .class == java.lang.Class<> ) { return java.sql.ResultSet . java.lang.String ( int ) ; } else if ( boolean .class == java.lang.Class<> || java.lang.Boolean .class == java.lang.Class<> ) { java.lang.Object = java.sql.ResultSet . boolean ( int ) ; } else if ( byte .class == java.lang.Class<> || java.lang.Byte .class == java.lang.Class<> ) { java.lang.Object = java.sql.ResultSet . byte ( int ) ; } else if ( short .class == java.lang.Class<> || java.lang.Short .class == java.lang.Class<> ) { java.lang.Object = java.sql.ResultSet . short ( int ) ; } else if ( int .class == java.lang.Class<> || java.lang.Integer .class == java.lang.Class<> ) { java.lang.Object = java.sql.ResultSet . int ( int ) ; } else if ( long .class == java.lang.Class<> || java.lang.Long .class == java.lang.Class<> ) { java.lang.Object = java.sql.ResultSet . long ( int ) ; } else if ( float .class == java.lang.Class<> || java.lang.Float .class == java.lang.Class<> ) { java.lang.Object = java.sql.ResultSet . float ( int ) ; } else if ( double .class == java.lang.Class<> || java.lang.Double .class == java.lang.Class<> || java.lang.Number .class == java.lang.Class<> ) { java.lang.Object = java.sql.ResultSet . double ( int ) ; } else if ( java.math.BigDecimal .class == java.lang.Class<> ) { return java.sql.ResultSet . java.math.BigDecimal ( int ) ; } else if ( java . sql . java.sql.Date .class == java.lang.Class<> ) { return java.sql.ResultSet . java.sql.Date ( int ) ; } else if ( java . sql . java.sql.Time .class == java.lang.Class<> ) { return java.sql.ResultSet . java.sql.Time ( int ) ; } else if ( java . sql . java.sql.Timestamp .class == java.lang.Class<> || java . util . java.util.Date .class == java.lang.Class<> ) { return java.sql.ResultSet . java.sql.Timestamp ( int ) ; } else if ( byte [] .class == java.lang.Class<> ) { return java.sql.ResultSet . byte[] ( int ) ; } else if ( java.sql.Blob .class == java.lang.Class<> ) { return java.sql.ResultSet . java.sql.Blob ( int ) ; } else if ( java.sql.Clob .class == java.lang.Class<> ) { return java.sql.ResultSet . java.sql.Clob ( int ) ; } else if ( java.lang.Class<> . boolean ( ) ) { java.lang.Object java.lang.Object = java.sql.ResultSet . java.lang.Object ( int ) ; if ( java.lang.Object instanceof java.lang.String ) { return java.lang.Object ; } else if ( java.lang.Object instanceof java.lang.Number ) { return NumberUtils . convertNumberToTargetClass ( ( java.lang.Number ) java.lang.Object , java.lang.Integer .class ) ; } else { return java.sql.ResultSet . java.lang.String ( int ) ; } } else { try { return java.sql.ResultSet . getObject ( int , java.lang.Class<> ) ; } catch ( java.lang.AbstractMethodError java.lang.AbstractMethodError ) { org.springframework.jdbc.support.Log . debug ( STRING , java.lang.AbstractMethodError ) ; } catch ( java.sql.SQLFeatureNotSupportedException java.sql.SQLFeatureNotSupportedException ) { org.springframework.jdbc.support.Log . debug ( STRING , java.sql.SQLFeatureNotSupportedException ) ; } catch ( java.sql.SQLException java.sql.SQLException ) { org.springframework.jdbc.support.Log . debug ( STRING , java.sql.SQLException ) ; } java.lang.String java.lang.String = java.lang.Class<> . java.lang.String ( ) ; if ( STRING . boolean ( java.lang.String ) ) { return java.sql.ResultSet . java.sql.Date ( int ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return java.sql.ResultSet . java.sql.Time ( int ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return java.sql.ResultSet . java.sql.Timestamp ( int ) ; } return java.lang.Object ( java.sql.ResultSet , int ) ; } return ( java.sql.ResultSet . boolean ( ) ? null : java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { java.lang.Object java.lang.Object = java.sql.ResultSet . java.lang.Object ( int ) ; java.lang.String java.lang.String = null ; if ( java.lang.Object != null ) { java.lang.String = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ; } if ( java.lang.Object instanceof java.sql.Blob ) { java.sql.Blob java.sql.Blob = ( java.sql.Blob ) java.lang.Object ; java.lang.Object = java.sql.Blob . byte[] ( NUMBER , ( int ) java.sql.Blob . long ( ) ) ; } else if ( java.lang.Object instanceof java.sql.Clob ) { java.sql.Clob java.sql.Clob = ( java.sql.Clob ) java.lang.Object ; java.lang.Object = java.sql.Clob . java.lang.String ( NUMBER , ( int ) java.sql.Clob . long ( ) ) ; } else if ( STRING . boolean ( java.lang.String ) || STRING . boolean ( java.lang.String ) ) { java.lang.Object = java.sql.ResultSet . java.sql.Timestamp ( int ) ; } else if ( java.lang.String != null && java.lang.String . boolean ( STRING ) ) { java.lang.String java.lang.String = java.sql.ResultSet . java.sql.ResultSetMetaData ( ) . java.lang.String ( int ) ; if ( STRING . boolean ( java.lang.String ) || STRING . boolean ( java.lang.String ) ) { java.lang.Object = java.sql.ResultSet . java.sql.Timestamp ( int ) ; } else { java.lang.Object = java.sql.ResultSet . java.sql.Date ( int ) ; } } else if ( java.lang.Object instanceof java . sql . java.sql.Date ) { if ( STRING . boolean ( java.sql.ResultSet . java.sql.ResultSetMetaData ( ) . java.lang.String ( int ) ) ) { java.lang.Object = java.sql.ResultSet . java.sql.Timestamp ( int ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( javax.sql.DataSource javax.sql.DataSource , DatabaseMetaDataCallback org.springframework.jdbc.support.DatabaseMetaDataCallback )			throws org.springframework.jdbc.support.MetaDataAccessException { java.sql.Connection java.sql.Connection = null ; try { java.sql.Connection = DataSourceUtils . getConnection ( javax.sql.DataSource ) ; if ( java.sql.Connection == null ) { throw new MetaDataAccessException ( STRING + javax.sql.DataSource + STRING ) ; } java.sql.DatabaseMetaData java.sql.DatabaseMetaData = java.sql.Connection . java.sql.DatabaseMetaData ( ) ; if ( java.sql.DatabaseMetaData == null ) { throw new MetaDataAccessException ( STRING + java.sql.Connection + STRING ) ; } return org.springframework.jdbc.support.DatabaseMetaDataCallback . processMetaData ( java.sql.DatabaseMetaData ) ; } catch ( CannotGetJdbcConnectionException org.springframework.jdbc.support.CannotGetJdbcConnectionException ) { throw new MetaDataAccessException ( STRING , org.springframework.jdbc.support.CannotGetJdbcConnectionException ) ; } catch ( java.sql.SQLException java.sql.SQLException ) { throw new MetaDataAccessException ( STRING , java.sql.SQLException ) ; } catch ( java.lang.AbstractMethodError java.lang.AbstractMethodError ) { throw new MetaDataAccessException ( STRING , java.lang.AbstractMethodError ) ; } finally { DataSourceUtils . releaseConnection ( java.sql.Connection , javax.sql.DataSource ) ; } }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( javax.sql.DataSource javax.sql.DataSource , final java.lang.String java.lang.String )			throws org.springframework.jdbc.support.MetaDataAccessException { return java.lang.Object ( javax.sql.DataSource , new DatabaseMetaDataCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.DatabaseMetaData java.sql.DatabaseMetaData ) throws java.sql.SQLException , org.springframework.jdbc.support.MetaDataAccessException { try { java.lang.reflect.Method java.lang.reflect.Method = java.sql.DatabaseMetaData .class . java.lang.reflect.Method ( java.lang.String , ( java.lang.Class [] ) null ) ; return java.lang.reflect.Method . java.lang.Object ( java.sql.DatabaseMetaData , ( java.lang.Object [] ) null ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new MetaDataAccessException ( STRING + java.lang.String + STRING + java.sql.DatabaseMetaData + STRING , java.lang.NoSuchMethodException ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { throw new MetaDataAccessException ( STRING + java.lang.String + STRING , java.lang.IllegalAccessException ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { if ( java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) instanceof java.sql.SQLException ) { throw ( java.sql.SQLException ) java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } throw new MetaDataAccessException ( STRING + java.lang.String + STRING , java.lang.reflect.InvocationTargetException ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.DatabaseMetaData java.sql.DatabaseMetaData ) throws java.sql.SQLException , org.springframework.jdbc.support.MetaDataAccessException { try { java.lang.reflect.Method java.lang.reflect.Method = java.sql.DatabaseMetaData .class . java.lang.reflect.Method ( java.lang.String , ( java.lang.Class [] ) null ) ; return java.lang.reflect.Method . java.lang.Object ( java.sql.DatabaseMetaData , ( java.lang.Object [] ) null ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new MetaDataAccessException ( STRING + java.lang.String + STRING + java.sql.DatabaseMetaData + STRING , java.lang.NoSuchMethodException ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { throw new MetaDataAccessException ( STRING + java.lang.String + STRING , java.lang.IllegalAccessException ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { if ( java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) instanceof java.sql.SQLException ) { throw ( java.sql.SQLException ) java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } throw new MetaDataAccessException ( STRING + java.lang.String + STRING , java.lang.reflect.InvocationTargetException ) ; } }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.sql.Connection java.sql.Connection ) { try { java.sql.DatabaseMetaData java.sql.DatabaseMetaData = java.sql.Connection . java.sql.DatabaseMetaData ( ) ; if ( java.sql.DatabaseMetaData != null ) { if ( java.sql.DatabaseMetaData . boolean ( ) ) { org.springframework.jdbc.support.Log . debug ( STRING ) ; return true ; } else { org.springframework.jdbc.support.Log . debug ( STRING ) ; } } } catch ( java.sql.SQLException java.sql.SQLException ) { org.springframework.jdbc.support.Log . debug ( STRING , java.sql.SQLException ) ; } return false ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String ; if ( java.lang.String != null && java.lang.String . boolean ( STRING ) ) { java.lang.String = STRING ; } else if ( STRING . boolean ( java.lang.String ) || STRING . boolean ( java.lang.String ) || STRING . boolean ( java.lang.String ) || STRING . boolean ( java.lang.String ) ) { java.lang.String = STRING ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( int int ) { return java.sql.Types . int == int || java.sql.Types . int == int || java.sql.Types . int == int || java.sql.Types . int == int || java.sql.Types . int == int || java.sql.Types . int == int || java.sql.Types . int == int || java.sql.Types . int == int || java.sql.Types . int == int || java.sql.Types . int == int ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.sql.ResultSetMetaData java.sql.ResultSetMetaData , int int ) throws java.sql.SQLException { java.lang.String java.lang.String = java.sql.ResultSetMetaData . java.lang.String ( int ) ; if ( java.lang.String == null || java.lang.String . int ( ) < NUMBER ) { java.lang.String = java.sql.ResultSetMetaData . java.lang.String ( int ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; boolean boolean = false ; if ( java.lang.String != null && java.lang.String . int ( ) > NUMBER ) { if ( java.lang.String . int ( ) > NUMBER && java.lang.String . java.lang.String ( NUMBER , NUMBER ) . boolean ( STRING ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( NUMBER , NUMBER ) . java.lang.String ( ) ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( NUMBER , NUMBER ) . java.lang.String ( ) ) ; } for ( int int = NUMBER ; int < java.lang.String . int ( ) ; int ++ ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( int , int + NUMBER ) ; if ( java.lang.String . boolean ( STRING ) ) { boolean = true ; } else { if ( boolean ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( ) ) ; boolean = false ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( ) ) ; } } } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
