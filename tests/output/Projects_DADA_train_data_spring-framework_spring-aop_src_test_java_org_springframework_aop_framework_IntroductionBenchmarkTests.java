<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> int int ( )  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StopWatch org.springframework.aop.framework.StopWatch = new StopWatch ( ) ; TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . setProxyTargetClass ( false ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new org.springframework.aop.framework.IntroductionBenchmarkTests.SimpleCounterIntroduction ( ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.ProxyFactory . getProxy ( ) ; org.springframework.aop.framework.IntroductionBenchmarkTests.Counter org.springframework.aop.framework.IntroductionBenchmarkTests.Counter = ( org.springframework.aop.framework.IntroductionBenchmarkTests.Counter ) org.springframework.aop.framework.ITestBean ; org.springframework.aop.framework.StopWatch . start ( int + STRING ) ; for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.aop.framework.ITestBean . getAge ( ) ; } org.springframework.aop.framework.StopWatch . stop ( ) ; org.springframework.aop.framework.StopWatch . start ( int + STRING ) ; for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.aop.framework.IntroductionBenchmarkTests.Counter . int ( ) ; } org.springframework.aop.framework.StopWatch . stop ( ) ; org.springframework.aop.framework.StopWatch . start ( int + STRING ) ; for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.aop.framework.TestBean . getAge ( ) ; } org.springframework.aop.framework.StopWatch . stop ( ) ; java.lang.System . java.io.PrintStream . void ( org.springframework.aop.framework.StopWatch . prettyPrint ( ) ) ; }  <METHOD_END>
