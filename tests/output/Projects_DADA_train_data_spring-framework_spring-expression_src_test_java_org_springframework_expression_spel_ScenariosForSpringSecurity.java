<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new org.springframework.expression.spel.ScenariosForSpringSecurity.Person ( STRING ) ) ; java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertFalse ( java.lang.Boolean ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new org.springframework.expression.spel.ScenariosForSpringSecurity.Manager ( STRING ) ) ; java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertTrue ( java.lang.Boolean ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { org.springframework.expression.spel.EvaluationException . printStackTrace ( ) ; fail ( STRING + org.springframework.expression.spel.EvaluationException . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.ScenariosForSpringSecurity.SecurityPrincipalAccessor ( ) ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new org.springframework.expression.spel.ScenariosForSpringSecurity.Person ( STRING ) ) ; java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertTrue ( java.lang.Boolean ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new org.springframework.expression.spel.ScenariosForSpringSecurity.Person ( STRING ) ) ; java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertFalse ( java.lang.Boolean ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; org.springframework.expression.spel.ScenariosForSpringSecurity.PersonAccessor org.springframework.expression.spel.ScenariosForSpringSecurity.PersonAccessor = new org.springframework.expression.spel.ScenariosForSpringSecurity.PersonAccessor ( ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( org.springframework.expression.spel.ScenariosForSpringSecurity.PersonAccessor ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( null ) ; org.springframework.expression.spel.ScenariosForSpringSecurity.PersonAccessor . void ( new org.springframework.expression.spel.ScenariosForSpringSecurity.Person ( STRING ) ) ; java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertTrue ( java.lang.Boolean ) ; org.springframework.expression.spel.ScenariosForSpringSecurity.PersonAccessor . void ( new org.springframework.expression.spel.ScenariosForSpringSecurity.Person ( STRING ) ) ; java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertFalse ( java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Boolean java.lang.Boolean = null ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , NUMBER ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new org.springframework.expression.spel.ScenariosForSpringSecurity.Supervisor ( STRING ) ) ; java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertTrue ( java.lang.Boolean ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new org.springframework.expression.spel.ScenariosForSpringSecurity.Manager ( STRING ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , NUMBER ) ; java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertFalse ( java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new org.springframework.expression.spel.ScenariosForSpringSecurity.Supervisor ( STRING ) ) ; org.springframework.expression.spel.StandardEvaluationContext . addMethodResolver ( new org.springframework.expression.spel.ScenariosForSpringSecurity.MyMethodResolver ( ) ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Boolean java.lang.Boolean = null ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , NUMBER ) ; java.lang.Boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertTrue ( java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String ... java.lang.String[] ) { if ( java.lang.String[] == null ) return true ; java.lang.String [] java.lang.String[] = java.lang.String[] ( ) ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { if ( java.lang.String[] [ int ] . boolean ( java.lang.String[] [ int ] ) ) return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { return boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { return true ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return new TypedValue ( new org.springframework.expression.spel.ScenariosForSpringSecurity.SecurityPrincipalAccessor.Principal ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object java.lang.Object )				throws org.springframework.expression.spel.AccessException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return null ; }  <METHOD_END>
<METHOD_START> void void ( org.springframework.expression.spel.ScenariosForSpringSecurity.Person org.springframework.expression.spel.ScenariosForSpringSecurity.Person ) { this . org.springframework.expression.spel.ScenariosForSpringSecurity.Person = org.springframework.expression.spel.ScenariosForSpringSecurity.Person ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return new TypedValue ( org.springframework.expression.spel.ScenariosForSpringSecurity.Person ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object java.lang.Object )				throws org.springframework.expression.spel.AccessException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return null ; }  <METHOD_END>
<METHOD_START> public void ( TypeConverter org.springframework.expression.spel.TypeConverter ) { this . org.springframework.expression.spel.TypeConverter = org.springframework.expression.spel.TypeConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.Object ... java.lang.Object[] )					throws org.springframework.expression.spel.AccessException { try { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.expression.spel.ScenariosForSpringSecurity.MyMethodResolver.HasRoleExecutor .class . java.lang.reflect.Method ( STRING , java.lang.String [] .class ) ; java.lang.Object [] java.lang.Object[] = java.lang.Object[] ; if ( java.lang.Object[] != null ) { ReflectionHelper . convertAllArguments ( org.springframework.expression.spel.TypeConverter , java.lang.Object[] , java.lang.reflect.Method ) ; } if ( java.lang.reflect.Method . boolean ( ) ) { java.lang.Object[] = ReflectionHelper . setupArgumentsForVarargsInvocation ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) , java.lang.Object[] ) ; } return new TypedValue ( java.lang.reflect.Method . java.lang.Object ( null , java.lang.Object[] ) , new TypeDescriptor ( new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new AccessException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.String ... java.lang.String[] ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.MethodExecutor org.springframework.expression.spel.MethodExecutor ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.util.List<org.springframework.expression.spel.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.TypeDescriptor> )				throws org.springframework.expression.spel.AccessException { if ( java.lang.String . boolean ( STRING ) ) { return new org.springframework.expression.spel.ScenariosForSpringSecurity.MyMethodResolver.HasRoleExecutor ( org.springframework.expression.spel.EvaluationContext . getTypeConverter ( ) ) ; } return null ; }  <METHOD_END>
