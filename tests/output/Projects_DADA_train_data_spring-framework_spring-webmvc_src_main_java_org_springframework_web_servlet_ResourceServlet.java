<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.web.servlet.PathMatcher = org.springframework.web.servlet.PathMatcher ( ) ; this . long = java.lang.System . long ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.PathMatcher org.springframework.web.servlet.PathMatcher ( ) { return new AntPathMatcher ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse )		throws org.springframework.web.servlet.ServletException , java.io.IOException { java.lang.String java.lang.String = java.lang.String ( org.springframework.web.servlet.HttpServletRequest ) ; if ( java.lang.String != null ) { try { void ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse , java.lang.String ) ; } catch ( ServletException org.springframework.web.servlet.ServletException ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + java.lang.String + STRING , org.springframework.web.servlet.ServletException ) ; } if ( ! boolean ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse ) ) { throw org.springframework.web.servlet.ServletException ; } } catch ( java.io.IOException java.io.IOException ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + java.lang.String + STRING , java.io.IOException ) ; } if ( ! boolean ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse ) ) { throw java.io.IOException ; } } } else if ( ! boolean ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse ) ) { throw new ServletException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest ) { return org.springframework.web.servlet.HttpServletRequest . getParameter ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse )		throws org.springframework.web.servlet.ServletException , java.io.IOException { if ( this . java.lang.String == null ) { return false ; } void ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse , this . java.lang.String ) ; return true ; }  <METHOD_END>
<METHOD_START> private void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse , java.lang.String java.lang.String )		throws org.springframework.web.servlet.ServletException , java.io.IOException { if ( this . java.lang.String != null ) { org.springframework.web.servlet.HttpServletResponse . setContentType ( this . java.lang.String ) ; } java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , java.lang.String ) ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { if ( this . java.lang.String != null && ! this . org.springframework.web.servlet.PathMatcher . match ( this . java.lang.String , java.lang.String[] [ int ] ) ) { throw new ServletException ( STRING + java.lang.String[] [ int ] + STRING + this . java.lang.String + STRING ) ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String[] [ int ] + STRING ) ; } RequestDispatcher org.springframework.web.servlet.RequestDispatcher = org.springframework.web.servlet.HttpServletRequest . getRequestDispatcher ( java.lang.String[] [ int ] ) ; org.springframework.web.servlet.RequestDispatcher . include ( org.springframework.web.servlet.HttpServletRequest , org.springframework.web.servlet.HttpServletResponse ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final long long ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest ) { if ( this . boolean ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.web.servlet.HttpServletRequest ) ; if ( java.lang.String == null ) { java.lang.String = this . java.lang.String ; } if ( java.lang.String != null ) { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , java.lang.String ) ; long long = - NUMBER ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { long long = long ( java.lang.String[] [ int ] ) ; if ( long > long ) { long = long ; } } return ( long > this . long ? long : this . long ) ; } } return - NUMBER ; }  <METHOD_END>
<METHOD_START> protected long long ( java.lang.String java.lang.String ) { ServletContextResource org.springframework.web.servlet.ServletContextResource = new ServletContextResource ( getServletContext ( ) , java.lang.String ) ; try { long long = org.springframework.web.servlet.ServletContextResource . lastModified ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.web.servlet.ServletContextResource + STRING + long ) ; } return long ; } catch ( java.io.IOException java.io.IOException ) { logger . warn ( STRING + org.springframework.web.servlet.ServletContextResource + STRING ) ; return - NUMBER ; } }  <METHOD_END>
