<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.restart.server.ExpectedException . expectMessage ( STRING ) ; new HttpRestartServerHandler ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRestartServer org.springframework.boot.devtools.restart.server.HttpRestartServer = mock ( HttpRestartServer .class ) ; HttpRestartServerHandler org.springframework.boot.devtools.restart.server.HttpRestartServerHandler = new HttpRestartServerHandler ( org.springframework.boot.devtools.restart.server.HttpRestartServer ) ; ServerHttpRequest org.springframework.boot.devtools.restart.server.ServerHttpRequest = mock ( ServerHttpRequest .class ) ; ServerHttpResponse org.springframework.boot.devtools.restart.server.ServerHttpResponse = mock ( ServerHttpResponse .class ) ; org.springframework.boot.devtools.restart.server.HttpRestartServerHandler . handle ( org.springframework.boot.devtools.restart.server.ServerHttpRequest , org.springframework.boot.devtools.restart.server.ServerHttpResponse ) ; verify ( org.springframework.boot.devtools.restart.server.HttpRestartServer ) . handle ( org.springframework.boot.devtools.restart.server.ServerHttpRequest , org.springframework.boot.devtools.restart.server.ServerHttpResponse ) ; }  <METHOD_END>
