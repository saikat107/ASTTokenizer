<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected void void ( ) { this . org.springframework.web.servlet.tags.form.RadioButtonTag = new RadioButtonTag ( ) { @ java.lang.Override protected org.springframework.web.servlet.tags.form.TagWriter org.springframework.web.servlet.tags.form.TagWriter ( ) { return new TagWriter ( getWriter ( ) ) ; } } ; this . org.springframework.web.servlet.tags.form.RadioButtonTag . setPageContext ( getPageContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.tags.form.TagWriter org.springframework.web.servlet.tags.form.TagWriter ( ) { return new TagWriter ( getWriter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.tags.form.RadioButtonTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.RadioButtonTag . setValue ( STRING ) ; this . org.springframework.web.servlet.tags.form.RadioButtonTag . setDynamicAttribute ( null , java.lang.String , java.lang.String ) ; this . org.springframework.web.servlet.tags.form.RadioButtonTag . setDynamicAttribute ( null , java.lang.String , java.lang.String ) ; int int = this . org.springframework.web.servlet.tags.form.RadioButtonTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; void ( java.lang.String ) ; void ( java.lang.String ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , java.lang.String , java.lang.String ) ; assertContainsAttribute ( java.lang.String , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.RadioButtonTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.RadioButtonTag . setValue ( STRING ) ; int int = this . org.springframework.web.servlet.tags.form.RadioButtonTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; void ( java.lang.String ) ; void ( java.lang.String ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.RadioButtonTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.RadioButtonTag . setValue ( java.lang.Float ( ) ) ; int int = this . org.springframework.web.servlet.tags.form.RadioButtonTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; void ( java.lang.String ) ; void ( java.lang.String ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , java.lang.Float ( ) . java.lang.String ( ) ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.RadioButtonTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.RadioButtonTag . setValue ( STRING ) ; BeanPropertyBindingResult org.springframework.web.servlet.tags.form.BeanPropertyBindingResult = new BeanPropertyBindingResult ( this . org.springframework.web.servlet.tags.form.TestBean , COMMAND_NAME ) ; org.springframework.web.servlet.tags.form.RadioButtonTagTests.MyFloatEditor org.springframework.web.servlet.tags.form.RadioButtonTagTests.MyFloatEditor = new org.springframework.web.servlet.tags.form.RadioButtonTagTests.MyFloatEditor ( ) ; org.springframework.web.servlet.tags.form.BeanPropertyBindingResult . getPropertyEditorRegistry ( ) . registerCustomEditor ( java.lang.Float .class , org.springframework.web.servlet.tags.form.RadioButtonTagTests.MyFloatEditor ) ; getPageContext ( ) . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + COMMAND_NAME , org.springframework.web.servlet.tags.form.BeanPropertyBindingResult ) ; int int = this . org.springframework.web.servlet.tags.form.RadioButtonTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; void ( java.lang.String ) ; void ( java.lang.String ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , STRING + java.lang.Float ( ) . java.lang.String ( ) ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Float java.lang.Float = new java.lang.Float ( STRING ) ; this . org.springframework.web.servlet.tags.form.RadioButtonTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.RadioButtonTag . setValue ( java.lang.Float ) ; int int = this . org.springframework.web.servlet.tags.form.RadioButtonTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; void ( java.lang.String ) ; void ( java.lang.String ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , java.lang.Float . java.lang.String ( ) ) ; assertAttributeNotPresent ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.RadioButtonTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.RadioButtonTag . setValue ( STRING ) ; int int = this . org.springframework.web.servlet.tags.form.RadioButtonTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; void ( java.lang.String ) ; void ( java.lang.String ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertAttributeNotPresent ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.RadioButtonTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.RadioButtonTag . setValue ( new Pet ( STRING ) ) ; int int = this . org.springframework.web.servlet.tags.form.RadioButtonTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.String = STRING + java.lang.String + STRING ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Document . getRootElement ( ) . elements ( ) . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.RadioButtonTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.RadioButtonTag . setValue ( new Pet ( STRING ) ) ; int int = this . org.springframework.web.servlet.tags.form.RadioButtonTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.String = STRING + java.lang.String + STRING ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Document . getRootElement ( ) . elements ( ) . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertNull ( org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.RadioButtonTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.RadioButtonTag . setValue ( new ItemPet ( STRING ) ) ; BeanPropertyBindingResult org.springframework.web.servlet.tags.form.BeanPropertyBindingResult = new BeanPropertyBindingResult ( this . org.springframework.web.servlet.tags.form.TestBean , COMMAND_NAME ) ; java.beans.PropertyEditorSupport java.beans.PropertyEditorSupport = new ItemPet . ItemPet ( ) ; org.springframework.web.servlet.tags.form.BeanPropertyBindingResult . getPropertyEditorRegistry ( ) . registerCustomEditor ( ItemPet .class , java.beans.PropertyEditorSupport ) ; getPageContext ( ) . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + COMMAND_NAME , org.springframework.web.servlet.tags.form.BeanPropertyBindingResult ) ; int int = this . org.springframework.web.servlet.tags.form.RadioButtonTag . doStartTag ( ) ; assertEquals ( Tag . SKIP_BODY , int ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.String = STRING + java.lang.String + STRING ; SAXReader org.springframework.web.servlet.tags.form.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.tags.form.Document = org.springframework.web.servlet.tags.form.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; Element org.springframework.web.servlet.tags.form.Element = ( Element ) org.springframework.web.servlet.tags.form.Document . getRootElement ( ) . elements ( ) . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . getName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.form.Element . attribute ( STRING ) . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.form.JspException { try { this . org.springframework.web.servlet.tags.form.RadioButtonTag . setDynamicAttribute ( null , STRING , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { assertTrue ( java.lang.String . int ( STRING ) > - NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { assertTrue ( java.lang.String . int ( STRING ) > - NUMBER ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Float java.lang.Float ( ) { return new java.lang.Float ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.tags.form.TestBean org.springframework.web.servlet.tags.form.TestBean ( ) { this . org.springframework.web.servlet.tags.form.TestBean = new TestBean ( ) ; org.springframework.web.servlet.tags.form.TestBean . setSex ( STRING ) ; org.springframework.web.servlet.tags.form.TestBean . setMyFloat ( java.lang.Float ( ) ) ; org.springframework.web.servlet.tags.form.TestBean . setPets ( java.util.Collections . java.util.List ( new Pet ( STRING ) ) ) ; return org.springframework.web.servlet.tags.form.TestBean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( java.lang.String . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.lang.Object ( ) ; }  <METHOD_END>
