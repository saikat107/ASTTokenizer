<METHOD_START> @ Test public void void ( ) { java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> = createApproximateCollection ( java.util.EnumSet . java.util.EnumSet<org.springframework.core.CollectionFactoryTests.Color> ( org.springframework.core.CollectionFactoryTests.Color . org.springframework.core.CollectionFactoryTests.Color ) , NUMBER ) ; try { java.util.Collection<java.lang.Integer> . boolean ( NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.ClassCastException java.lang.ClassCastException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> = createCollection ( java.util.EnumSet .class , org.springframework.core.CollectionFactoryTests.Color .class , NUMBER ) ; try { java.util.Collection<java.lang.Integer> . boolean ( NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.ClassCastException java.lang.ClassCastException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.EnumMap<org.springframework.core.CollectionFactoryTests.Color,java.lang.Integer> < org.springframework.core.CollectionFactoryTests.Color , java.lang.Integer > java.util.EnumMap<org.springframework.core.CollectionFactoryTests.Color,java.lang.Integer> = new java.util.EnumMap<org.springframework.core.CollectionFactoryTests.Color,java.lang.Integer> <> ( org.springframework.core.CollectionFactoryTests.Color .class ) ; java.util.EnumMap<org.springframework.core.CollectionFactoryTests.Color,java.lang.Integer> . java.lang.Integer ( org.springframework.core.CollectionFactoryTests.Color . org.springframework.core.CollectionFactoryTests.Color , NUMBER ) ; java.util.EnumMap<org.springframework.core.CollectionFactoryTests.Color,java.lang.Integer> . java.lang.Integer ( org.springframework.core.CollectionFactoryTests.Color . org.springframework.core.CollectionFactoryTests.Color , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = createApproximateMap ( java.util.EnumMap<org.springframework.core.CollectionFactoryTests.Color,java.lang.Integer> , NUMBER ) ; try { java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.ClassCastException java.lang.ClassCastException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = createMap ( java.util.EnumMap .class , org.springframework.core.CollectionFactoryTests.Color .class , NUMBER ) ; try { java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.ClassCastException java.lang.ClassCastException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = createMap ( MultiValueMap .class , null , NUMBER ) ; try { java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.ClassCastException java.lang.ClassCastException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = createApproximateCollection ( new java.util.HashSet<java.lang.String> < java.lang.String > ( ) , NUMBER ) ; assertThat ( java.util.Collection<java.lang.String> , is ( empty ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.HashSet<java.lang.String> < java.lang.String > java.util.HashSet<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.HashSet<java.lang.String> . boolean ( STRING ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = createApproximateCollection ( java.util.HashSet<java.lang.String> , NUMBER ) ; assertThat ( java.util.Collection<java.lang.String> , is ( empty ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.core.CollectionFactoryTests.Color> < org.springframework.core.CollectionFactoryTests.Color > java.util.Collection<org.springframework.core.CollectionFactoryTests.Color> = createApproximateCollection ( java.util.EnumSet . java.util.EnumSet<org.springframework.core.CollectionFactoryTests.Color> ( org.springframework.core.CollectionFactoryTests.Color .class ) , NUMBER ) ; assertThat ( java.util.Collection<org.springframework.core.CollectionFactoryTests.Color> , is ( empty ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.core.CollectionFactoryTests.Color> < org.springframework.core.CollectionFactoryTests.Color > java.util.Collection<org.springframework.core.CollectionFactoryTests.Color> = createApproximateCollection ( java.util.EnumSet . java.util.EnumSet<org.springframework.core.CollectionFactoryTests.Color> ( org.springframework.core.CollectionFactoryTests.Color . org.springframework.core.CollectionFactoryTests.Color ) , NUMBER ) ; assertThat ( java.util.Collection<org.springframework.core.CollectionFactoryTests.Color> , is ( empty ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = createApproximateMap ( new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) , NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = createApproximateMap ( java.util.Map<java.lang.String,java.lang.String> , NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<org.springframework.core.CollectionFactoryTests.Color,java.lang.String> < org.springframework.core.CollectionFactoryTests.Color , java.lang.String > java.util.Map<org.springframework.core.CollectionFactoryTests.Color,java.lang.String> = createApproximateMap ( new java.util.EnumMap<org.springframework.core.CollectionFactoryTests.Color,java.lang.String> < org.springframework.core.CollectionFactoryTests.Color , java.lang.String > ( org.springframework.core.CollectionFactoryTests.Color .class ) , NUMBER ) ; assertThat ( java.util.Map<org.springframework.core.CollectionFactoryTests.Color,java.lang.String> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.EnumMap<org.springframework.core.CollectionFactoryTests.Color,java.lang.String> < org.springframework.core.CollectionFactoryTests.Color , java.lang.String > java.util.EnumMap<org.springframework.core.CollectionFactoryTests.Color,java.lang.String> = new java.util.EnumMap<org.springframework.core.CollectionFactoryTests.Color,java.lang.String> <> ( org.springframework.core.CollectionFactoryTests.Color .class ) ; java.util.EnumMap<org.springframework.core.CollectionFactoryTests.Color,java.lang.String> . java.lang.String ( org.springframework.core.CollectionFactoryTests.Color . org.springframework.core.CollectionFactoryTests.Color , STRING ) ; java.util.Map<org.springframework.core.CollectionFactoryTests.Color,java.lang.String> < org.springframework.core.CollectionFactoryTests.Color , java.lang.String > java.util.Map<org.springframework.core.CollectionFactoryTests.Color,java.lang.String> = createApproximateMap ( java.util.EnumMap<org.springframework.core.CollectionFactoryTests.Color,java.lang.String> , NUMBER ) ; assertThat ( java.util.Map<org.springframework.core.CollectionFactoryTests.Color,java.lang.String> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( createCollection ( java.util.List .class , NUMBER ) , is ( instanceOf ( java.util.ArrayList .class ) ) ) ; assertThat ( createCollection ( java.util.Set .class , NUMBER ) , is ( instanceOf ( java.util.LinkedHashSet .class ) ) ) ; assertThat ( createCollection ( java.util.Collection .class , NUMBER ) , is ( instanceOf ( java.util.LinkedHashSet .class ) ) ) ; assertThat ( createCollection ( java.util.SortedSet .class , NUMBER ) , is ( instanceOf ( java.util.TreeSet .class ) ) ) ; assertThat ( createCollection ( java.util.NavigableSet .class , NUMBER ) , is ( instanceOf ( java.util.TreeSet .class ) ) ) ; assertThat ( createCollection ( java.util.List .class , java.lang.String .class , NUMBER ) , is ( instanceOf ( java.util.ArrayList .class ) ) ) ; assertThat ( createCollection ( java.util.Set .class , java.lang.String .class , NUMBER ) , is ( instanceOf ( java.util.LinkedHashSet .class ) ) ) ; assertThat ( createCollection ( java.util.Collection .class , java.lang.String .class , NUMBER ) , is ( instanceOf ( java.util.LinkedHashSet .class ) ) ) ; assertThat ( createCollection ( java.util.SortedSet .class , java.lang.String .class , NUMBER ) , is ( instanceOf ( java.util.TreeSet .class ) ) ) ; assertThat ( createCollection ( java.util.NavigableSet .class , java.lang.String .class , NUMBER ) , is ( instanceOf ( java.util.TreeSet .class ) ) ) ; assertThat ( createCollection ( java.util.HashSet .class , NUMBER ) , is ( instanceOf ( java.util.HashSet .class ) ) ) ; assertThat ( createCollection ( java.util.HashSet .class , java.lang.String .class , NUMBER ) , is ( instanceOf ( java.util.HashSet .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( createCollection ( java.util.EnumSet .class , org.springframework.core.CollectionFactoryTests.Color .class , NUMBER ) , is ( instanceOf ( java.util.EnumSet .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { createCollection ( java.util.EnumSet .class , java.lang.Object .class , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { createCollection ( java.util.EnumSet .class , null , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { createCollection ( null , java.lang.Object .class , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( createMap ( java.util.Map .class , NUMBER ) , is ( instanceOf ( java.util.LinkedHashMap .class ) ) ) ; assertThat ( createMap ( java.util.SortedMap .class , NUMBER ) , is ( instanceOf ( java.util.TreeMap .class ) ) ) ; assertThat ( createMap ( java.util.NavigableMap .class , NUMBER ) , is ( instanceOf ( java.util.TreeMap .class ) ) ) ; assertThat ( createMap ( MultiValueMap .class , NUMBER ) , is ( instanceOf ( LinkedMultiValueMap .class ) ) ) ; assertThat ( createMap ( java.util.Map .class , java.lang.String .class , NUMBER ) , is ( instanceOf ( java.util.LinkedHashMap .class ) ) ) ; assertThat ( createMap ( java.util.SortedMap .class , java.lang.String .class , NUMBER ) , is ( instanceOf ( java.util.TreeMap .class ) ) ) ; assertThat ( createMap ( java.util.NavigableMap .class , java.lang.String .class , NUMBER ) , is ( instanceOf ( java.util.TreeMap .class ) ) ) ; assertThat ( createMap ( MultiValueMap .class , java.lang.String .class , NUMBER ) , is ( instanceOf ( LinkedMultiValueMap .class ) ) ) ; assertThat ( createMap ( java.util.HashMap .class , NUMBER ) , is ( instanceOf ( java.util.HashMap .class ) ) ) ; assertThat ( createMap ( java.util.HashMap .class , java.lang.String .class , NUMBER ) , is ( instanceOf ( java.util.HashMap .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( createMap ( java.util.EnumMap .class , org.springframework.core.CollectionFactoryTests.Color .class , NUMBER ) , is ( instanceOf ( java.util.EnumMap .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { createMap ( java.util.EnumMap .class , java.lang.Object .class , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { createMap ( java.util.EnumMap .class , null , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { createMap ( null , java.lang.Object .class , NUMBER ) ; }  <METHOD_END>
