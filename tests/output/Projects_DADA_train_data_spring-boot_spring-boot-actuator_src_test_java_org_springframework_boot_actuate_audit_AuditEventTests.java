<METHOD_START> @ Test public void void ( ) java.lang.Exception { AuditEvent org.springframework.boot.actuate.audit.AuditEvent = new AuditEvent ( STRING , STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , ( java.lang.Object ) STRING ) ) ; assertThat ( org.springframework.boot.actuate.audit.AuditEvent . getData ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.actuate.audit.AuditEvent . getType ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.actuate.audit.AuditEvent . getPrincipal ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.actuate.audit.AuditEvent . getTimestamp ( ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AuditEvent org.springframework.boot.actuate.audit.AuditEvent = new AuditEvent ( STRING , STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.actuate.audit.AuditEvent . getData ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.actuate.audit.AuditEvent . getData ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.audit.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.actuate.audit.ExpectedException . expectMessage ( STRING ) ; new AuditEvent ( null , STRING , STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.audit.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.actuate.audit.ExpectedException . expectMessage ( STRING ) ; new AuditEvent ( null , STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.audit.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.actuate.audit.ExpectedException . expectMessage ( STRING ) ; new AuditEvent ( STRING , null , java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AuditEvent org.springframework.boot.actuate.audit.AuditEvent = new AuditEvent ( STRING , STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , ( java.lang.Object ) STRING ) ) ; java.lang.String java.lang.String = Jackson2ObjectMapperBuilder . json ( ) . build ( ) . writeValueAsString ( org.springframework.boot.actuate.audit.AuditEvent ) ; JSONObject org.springframework.boot.actuate.audit.JSONObject = new JSONObject ( java.lang.String ) ; assertThat ( org.springframework.boot.actuate.audit.JSONObject . getString ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.actuate.audit.JSONObject . getJSONObject ( STRING ) . getString ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
