<METHOD_START> public static java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> , boolean boolean ) { int int = java.lang.Integer . int ; java.lang.Class<?> < ? > java.lang.Class<?> = null ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.Set<java.lang.Class<?>> ) { int int = int ( java.lang.Class<> , java.lang.Class<> ) ; if ( int < int ) { int = int ; java.lang.Class<?> = java.lang.Class<> ; } else if ( boolean && int < java.lang.Integer . int && ( int == int ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + java.lang.Class<> . java.lang.String ( ) + STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } } return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> private static int int ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { int int = NUMBER ; if ( ! org . springframework . util . ClassUtils . isAssignable ( java.lang.Class<> , java.lang.Class<> ) ) { return java.lang.Integer . int ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; while ( java.lang.Class<> != null ) { if ( java.lang.Class<> . boolean ( java.lang.Class<> ) ) { int = int + NUMBER ; java.lang.Class<?> = null ; } else if ( org . springframework . util . ClassUtils . isAssignable ( java.lang.Class<> , java.lang.Class<> ) ) { int = int + NUMBER ; java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; } else { java.lang.Class<?> = null ; } } if ( java.lang.Class<> . boolean ( ) ) { int = int + NUMBER ; } return int ; }  <METHOD_END>
<METHOD_START> public static java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Map<java.lang.Class<?>,java.lang.Class<?>> . java.lang.Class<?> ( java.lang.Class<> ) ; }  <METHOD_END>
