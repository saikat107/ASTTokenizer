<METHOD_START> @ Test public void void ( ) { org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; void ( org.springframework.web.util.patterns.PathPattern , SingleCharWildcardedPathElement .class ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; void ( org.springframework.web.util.patterns.PathPattern , WildcardTheRestPathElement .class ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; void ( org.springframework.web.util.patterns.PathPattern , SeparatorPathElement .class , RegexPathElement .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . toChainString ( ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . toChainString ( ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . toChainString ( ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . toChainString ( ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . toChainString ( ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . toChainString ( ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . toChainString ( ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . toChainString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , NUMBER , PatternMessage . NO_MORE_DATA_EXPECTED_AFTER_CAPTURE_THE_REST ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; void ( org.springframework.web.util.patterns.PathPattern , CaptureTheRestPathElement .class ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; void ( org.springframework.web.util.patterns.PathPattern , CaptureTheRestPathElement .class ) ; void ( STRING , NUMBER , PatternMessage . NO_MORE_DATA_EXPECTED_AFTER_CAPTURE_THE_REST ) ; void ( STRING , NUMBER , PatternMessage . NO_MORE_DATA_EXPECTED_AFTER_CAPTURE_THE_REST ) ; void ( STRING , NUMBER , PatternMessage . ILLEGAL_CHARACTER_IN_CAPTURE_DESCRIPTOR ) ; void ( STRING , NUMBER , PatternMessage . NO_MORE_DATA_EXPECTED_AFTER_CAPTURE_THE_REST ) ; void ( STRING , NUMBER , PatternMessage . ILLEGAL_CHARACTER_IN_CAPTURE_DESCRIPTOR ) ; void ( STRING , NUMBER , PatternMessage . NO_MORE_DATA_EXPECTED_AFTER_CAPTURE_THE_REST ) ; void ( STRING , NUMBER , PatternMessage . CAPTURE_ALL_IS_STANDALONE_CONSTRUCT ) ; void ( STRING , NUMBER , PatternMessage . NO_MORE_DATA_EXPECTED_AFTER_CAPTURE_THE_REST ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; org.springframework.web.util.patterns.PathPatternParser . setCaseSensitive ( false ) ; PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; PathPattern org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; PathPattern org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; PathPattern org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertEquals ( org.springframework.web.util.patterns.PathPattern , org.springframework.web.util.patterns.PathPattern ) ; assertEquals ( org.springframework.web.util.patterns.PathPattern . hashCode ( ) , org.springframework.web.util.patterns.PathPattern . hashCode ( ) ) ; assertNotEquals ( org.springframework.web.util.patterns.PathPattern , org.springframework.web.util.patterns.PathPattern ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . equals ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . equals ( org.springframework.web.util.patterns.PathPattern ) ) ; assertNotEquals ( org.springframework.web.util.patterns.PathPattern . hashCode ( ) , org.springframework.web.util.patterns.PathPattern . hashCode ( ) ) ; PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ':' ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . equals ( org.springframework.web.util.patterns.PathPattern ) ) ; assertNotEquals ( org.springframework.web.util.patterns.PathPattern . hashCode ( ) , org.springframework.web.util.patterns.PathPattern . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , NUMBER , PatternMessage . MISSING_CLOSE_CAPTURE ) ; void ( STRING , NUMBER , PatternMessage . MISSING_CLOSE_CAPTURE ) ; void ( STRING , NUMBER , PatternMessage . JDK_PATTERN_SYNTAX_EXCEPTION ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertEquals ( CaptureVariablePathElement .class . java.lang.String ( ) , org.springframework.web.util.patterns.PathPattern . getHeadSection ( ) . next . getClass ( ) . getName ( ) ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertEquals ( CaptureVariablePathElement .class . java.lang.String ( ) , org.springframework.web.util.patterns.PathPattern . getHeadSection ( ) . next . getClass ( ) . getName ( ) ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING , NUMBER ) ; assertEquals ( CaptureVariablePathElement .class . java.lang.String ( ) , org.springframework.web.util.patterns.PathPattern . getHeadSection ( ) . next . getClass ( ) . getName ( ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING , NUMBER ) ; assertEquals ( CaptureVariablePathElement .class . java.lang.String ( ) , org.springframework.web.util.patterns.PathPattern . getHeadSection ( ) . next . getClass ( ) . getName ( ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.web.util.patterns.PathPattern . matchAndExtract ( STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING , NUMBER ) ; assertEquals ( CaptureVariablePathElement .class . java.lang.String ( ) , org.springframework.web.util.patterns.PathPattern . getHeadSection ( ) . next . getClass ( ) . getName ( ) ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.web.util.patterns.PathPattern . matchAndExtract ( STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING , NUMBER ) ; assertEquals ( CaptureVariablePathElement .class . java.lang.String ( ) , org.springframework.web.util.patterns.PathPattern . getHeadSection ( ) . next . getClass ( ) . getName ( ) ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.web.util.patterns.PathPattern . matchAndExtract ( STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING , NUMBER ) ; assertEquals ( CaptureVariablePathElement .class . java.lang.String ( ) , org.springframework.web.util.patterns.PathPattern . getHeadSection ( ) . next . getClass ( ) . getName ( ) ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.web.util.patterns.PathPattern . matchAndExtract ( STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertEquals ( WildcardPathElement .class . java.lang.String ( ) , org.springframework.web.util.patterns.PathPattern . getHeadSection ( ) . getClass ( ) . getName ( ) ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING STRING ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING STRING ) ; assertEquals ( RegexPathElement .class . java.lang.String ( ) , org.springframework.web.util.patterns.PathPattern . getHeadSection ( ) . next . getClass ( ) . getName ( ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertEquals ( WildcardPathElement .class . java.lang.String ( ) , org.springframework.web.util.patterns.PathPattern . getHeadSection ( ) . getClass ( ) . getName ( ) ) ; void ( STRING , NUMBER , PatternMessage . ILLEGAL_DOUBLE_CAPTURE , STRING ) ; void ( STRING , NUMBER , PatternMessage . ILLEGAL_DOUBLE_CAPTURE , STRING ) ; void ( STRING , NUMBER , PatternMessage . ILLEGAL_DOUBLE_CAPTURE , STRING ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertEquals ( RegexPathElement .class . java.lang.String ( ) , org.springframework.web.util.patterns.PathPattern . getHeadSection ( ) . getClass ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertEquals ( CaptureVariablePathElement .class . java.lang.String ( ) , org.springframework.web.util.patterns.PathPattern . getHeadSection ( ) . getClass ( ) . getName ( ) ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; void ( org.springframework.web.util.patterns.PathPattern , CaptureVariablePathElement .class ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; void ( org.springframework.web.util.patterns.PathPattern , CaptureVariablePathElement .class ) ; void ( STRING , NUMBER , PatternMessage . MISSING_REGEX_CONSTRAINT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertEquals ( RegexPathElement .class . java.lang.String ( ) , org.springframework.web.util.patterns.PathPattern . getHeadSection ( ) . getClass ( ) . getName ( ) ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , NUMBER , PatternMessage . MISSING_CLOSE_CAPTURE ) ; void ( STRING , NUMBER , PatternMessage . MISSING_REGEX_CONSTRAINT ) ; void ( STRING , NUMBER , PatternMessage . MISSING_CLOSE_CAPTURE ) ; void ( STRING , NUMBER , PatternMessage . MISSING_CLOSE_CAPTURE ) ; void ( STRING , NUMBER , PatternMessage . MISSING_CLOSE_CAPTURE ) ; void ( STRING , NUMBER , PatternMessage . MISSING_CLOSE_CAPTURE ) ; void ( STRING , NUMBER , PatternMessage . MISSING_OPEN_CAPTURE ) ; void ( STRING , NUMBER , PatternMessage . MISSING_OPEN_CAPTURE ) ; void ( STRING , NUMBER , PatternMessage . MISSING_OPEN_CAPTURE ) ; void ( STRING , NUMBER , PatternMessage . MISSING_CLOSE_CAPTURE ) ; void ( STRING , NUMBER , PatternMessage . ILLEGAL_NESTED_CAPTURE ) ; void ( STRING , NUMBER , PatternMessage . ILLEGAL_NESTED_CAPTURE ) ; void ( STRING , NUMBER , PatternMessage . ILLEGAL_CHARACTER_AT_START_OF_CAPTURE_DESCRIPTOR ) ; void ( STRING , NUMBER , PatternMessage . ILLEGAL_CHARACTER_IN_CAPTURE_DESCRIPTOR ) ; void ( STRING , NUMBER , PatternMessage . ILLEGAL_DOUBLE_CAPTURE ) ; void ( STRING , NUMBER , PatternMessage . ILLEGAL_DOUBLE_CAPTURE ) ; void ( STRING , NUMBER , PatternMessage . ILLEGAL_DOUBLE_CAPTURE ) ; PathPattern org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; try { org.springframework.web.util.patterns.PathPattern . matchAndExtract ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } try { org.springframework.web.util.patterns.PathPattern . matchAndExtract ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , NUMBER , PatternMessage . ILLEGAL_CHARACTER_AT_START_OF_CAPTURE_DESCRIPTOR , STRING ) ; void ( STRING , NUMBER , PatternMessage . ILLEGAL_CHARACTER_IN_CAPTURE_DESCRIPTOR , STRING ) ; void ( STRING , NUMBER , PatternMessage . ILLEGAL_CHARACTER_AT_START_OF_CAPTURE_DESCRIPTOR , STRING ) ; void ( STRING , NUMBER , PatternMessage . ILLEGAL_CHARACTER_AT_START_OF_CAPTURE_DESCRIPTOR , STRING ) ; void ( STRING , NUMBER , PatternMessage . ILLEGAL_CHARACTER_AT_START_OF_CAPTURE_DESCRIPTOR , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getCapturedVariableCount ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getCapturedVariableCount ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getCapturedVariableCount ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getCapturedVariableCount ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getCapturedVariableCount ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getCapturedVariableCount ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getCapturedVariableCount ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getCapturedVariableCount ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getCapturedVariableCount ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getCapturedVariableCount ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getCapturedVariableCount ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getCapturedVariableCount ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getCapturedVariableCount ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getCapturedVariableCount ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getCapturedVariableCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( int ( NUMBER , NUMBER ) , org.springframework.web.util.patterns.PathPattern ( STRING ) . getScore ( ) ) ; assertEquals ( int ( NUMBER , NUMBER ) , org.springframework.web.util.patterns.PathPattern ( STRING ) . getScore ( ) ) ; assertEquals ( int ( NUMBER , NUMBER ) , org.springframework.web.util.patterns.PathPattern ( STRING ) . getScore ( ) ) ; assertEquals ( int ( NUMBER , NUMBER ) , org.springframework.web.util.patterns.PathPattern ( STRING ) . getScore ( ) ) ; assertEquals ( int ( NUMBER , NUMBER ) , org.springframework.web.util.patterns.PathPattern ( STRING ) . getScore ( ) ) ; assertEquals ( int ( NUMBER , NUMBER ) , org.springframework.web.util.patterns.PathPattern ( STRING ) . getScore ( ) ) ; assertEquals ( int ( NUMBER , NUMBER ) , org.springframework.web.util.patterns.PathPattern ( STRING ) . getScore ( ) ) ; assertEquals ( int ( NUMBER , NUMBER ) , org.springframework.web.util.patterns.PathPattern ( STRING ) . getScore ( ) ) ; assertEquals ( int ( NUMBER , NUMBER ) , org.springframework.web.util.patterns.PathPattern ( STRING ) . getScore ( ) ) ; assertEquals ( int ( NUMBER , NUMBER ) , org.springframework.web.util.patterns.PathPattern ( STRING ) . getScore ( ) ) ; assertEquals ( int ( NUMBER , NUMBER ) , org.springframework.web.util.patterns.PathPattern ( STRING ) . getScore ( ) ) ; assertEquals ( int ( NUMBER , NUMBER ) , org.springframework.web.util.patterns.PathPattern ( STRING ) . getScore ( ) ) ; assertEquals ( int ( NUMBER , NUMBER ) , org.springframework.web.util.patterns.PathPattern ( STRING ) . getScore ( ) ) ; assertEquals ( int ( NUMBER , NUMBER ) , org.springframework.web.util.patterns.PathPattern ( STRING STRING ) . getScore ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern . getNormalizedLength ( ) ) ; void ( org.springframework.web.util.patterns.PathPattern , SeparatorPathElement .class , LiteralPathElement .class ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern . getNormalizedLength ( ) ) ; void ( org.springframework.web.util.patterns.PathPattern , SeparatorPathElement .class , LiteralPathElement .class , SeparatorPathElement .class , LiteralPathElement .class , SeparatorPathElement .class , LiteralPathElement .class ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern . getNormalizedLength ( ) ) ; void ( org.springframework.web.util.patterns.PathPattern , WildcardTheRestPathElement .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getNormalizedLength ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getNormalizedLength ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getNormalizedLength ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getNormalizedLength ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getNormalizedLength ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getNormalizedLength ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getNormalizedLength ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getNormalizedLength ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getNormalizedLength ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getNormalizedLength ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getNormalizedLength ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getNormalizedLength ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getNormalizedLength ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getNormalizedLength ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern ( STRING ) . getNormalizedLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PathPattern org.springframework.web.util.patterns.PathPattern , org.springframework.web.util.patterns.PathPattern , org.springframework.web.util.patterns.PathPattern ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertEquals ( - NUMBER , org.springframework.web.util.patterns.PathPattern . compareTo ( org.springframework.web.util.patterns.PathPattern ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> < PathPattern > java.util.List<org.springframework.web.util.patterns.PathPattern> = new java.util.ArrayList<org.springframework.web.util.patterns.PathPattern> <> ( ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPattern ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPattern ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPattern ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> , new PathPatternComparator ( ) ) ; assertEquals ( org.springframework.web.util.patterns.PathPattern , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern . compareTo ( org.springframework.web.util.patterns.PathPattern ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> = new java.util.ArrayList <> ( ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPattern ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPattern ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPattern ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> , new PathPatternComparator ( ) ) ; assertEquals ( org.springframework.web.util.patterns.PathPattern , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING STRING ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING STRING ) ; assertEquals ( - NUMBER , org.springframework.web.util.patterns.PathPattern . compareTo ( org.springframework.web.util.patterns.PathPattern ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> = new java.util.ArrayList <> ( ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPattern ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPattern ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPattern ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> , new PathPatternComparator ( ) ) ; assertEquals ( org.springframework.web.util.patterns.PathPattern , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPattern . compareTo ( org.springframework.web.util.patterns.PathPattern ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertEquals ( + NUMBER , org.springframework.web.util.patterns.PathPattern . compareTo ( org.springframework.web.util.patterns.PathPattern ) ) ; assertEquals ( - NUMBER , org.springframework.web.util.patterns.PathPattern . compareTo ( org.springframework.web.util.patterns.PathPattern ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . isCatchAll ( ) ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . isCatchAll ( ) ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . isCatchAll ( ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> = new java.util.ArrayList <> ( ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPattern ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPattern ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPattern ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> , new PathPatternComparator ( ) ) ; assertEquals ( org.springframework.web.util.patterns.PathPattern , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) ) ; assertEquals ( org.springframework.web.util.patterns.PathPattern , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> = new java.util.ArrayList <> ( ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPattern ( STRING ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( null ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPattern ( STRING ) ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> , new PathPatternComparator ( ) ) ; assertNull ( java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.util.patterns.PathPattern org.springframework.web.util.patterns.PathPattern ( java.lang.String java.lang.String ) { PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; return org.springframework.web.util.patterns.PathPatternParser . parse ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.util.patterns.PathPattern org.springframework.web.util.patterns.PathPattern ( java.lang.String java.lang.String ) { int int = NUMBER ; for ( int int = NUMBER ; int < java.lang.String . int ( ) ; int ++ ) { if ( java.lang.String . char ( int ) == '/' ) { int ++ ; } } return org.springframework.web.util.patterns.PathPattern ( java.lang.String , int ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.util.patterns.PathPattern org.springframework.web.util.patterns.PathPattern ( java.lang.String java.lang.String , int int ) { org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.web.util.patterns.PathPattern . getPatternString ( ) ) ; return org.springframework.web.util.patterns.PathPattern ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , int int , PatternMessage org.springframework.web.util.patterns.PatternMessage , java.lang.String ... java.lang.String[] ) { try { org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( java.lang.String ) ; fail ( STRING ) ; } catch ( PatternParseException org.springframework.web.util.patterns.PatternParseException ) { assertEquals ( org.springframework.web.util.patterns.PatternParseException . toDetailedString ( ) , int , org.springframework.web.util.patterns.PatternParseException . getPosition ( ) ) ; assertEquals ( org.springframework.web.util.patterns.PatternParseException . toDetailedString ( ) , org.springframework.web.util.patterns.PatternMessage , org.springframework.web.util.patterns.PatternParseException . getMessageType ( ) ) ; if ( java.lang.String[] . int != NUMBER ) { assertEquals ( org.springframework.web.util.patterns.PatternParseException . getInserts ( ) . length , java.lang.String[] . int ) ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { assertEquals ( STRING + int + STRING , java.lang.String[] [ int ] , org.springframework.web.util.patterns.PatternParseException . getInserts ( ) [ int ] ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.SafeVarargs private final void void ( PathPattern org.springframework.web.util.patterns.PathPattern , java.lang.Class<? extends org.springframework.web.util.patterns.PathElement> < ? extends PathElement > ... java.lang.Class<? extends org.springframework.web.util.patterns.PathElement>[] ) { PathElement org.springframework.web.util.patterns.PathElement = org.springframework.web.util.patterns.PathPattern . getHeadSection ( ) ; for ( int int = NUMBER ; int < sectionClasses . length ; int ++ ) { if ( org.springframework.web.util.patterns.PathElement == null ) { fail ( STRING + org.springframework.web.util.patterns.PathPattern . toChainString ( ) ) ; } assertEquals ( STRING + org.springframework.web.util.patterns.PathPattern . toChainString ( ) , java.lang.Class<? extends org.springframework.web.util.patterns.PathElement>[] [ int ] . getSimpleName ( ) , org.springframework.web.util.patterns.PathElement . getClass ( ) . getSimpleName ( ) ) ; org.springframework.web.util.patterns.PathElement = head . next ; } }  <METHOD_END>
<METHOD_START> private int int ( int int , int int ) { return int + int * NUMBER ; }  <METHOD_END>
