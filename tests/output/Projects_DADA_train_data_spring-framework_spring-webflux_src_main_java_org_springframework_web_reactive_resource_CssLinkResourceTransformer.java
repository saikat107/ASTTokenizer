<METHOD_START> public void ( ) { this . java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.LinkParser> . boolean ( new org.springframework.web.reactive.resource.CssLinkResourceTransformer.ImportLinkParser ( ) ) ; this . java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.LinkParser> . boolean ( new org.springframework.web.reactive.resource.CssLinkResourceTransformer.UrlFunctionLinkParser ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> < Resource > org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> ( ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange , Resource org.springframework.web.reactive.resource.Resource , ResourceTransformerChain org.springframework.web.reactive.resource.ResourceTransformerChain ) { return org.springframework.web.reactive.resource.ResourceTransformerChain . transform ( org.springframework.web.reactive.resource.ServerWebExchange , org.springframework.web.reactive.resource.Resource ) . then ( newResource -> { String filename = newResource . getFilename ( ) ; if ( ! STRING . equals ( StringUtils . getFilenameExtension ( filename ) ) || resource instanceof GzipResourceResolver . GzippedResource ) { return Mono . just ( newResource ) ; } if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + newResource ) ; } byte [] bytes = new byte [ NUMBER ] ; try { bytes = FileCopyUtils . copyToByteArray ( newResource . getInputStream ( ) ) ; } catch ( IOException ex ) { return Mono . error ( Exceptions . propagate ( ex ) ) ; } String fullContent = new String ( bytes , DEFAULT_CHARSET ) ; List < Segment > segments = parseContent ( fullContent ) ; if ( segments . isEmpty ( ) ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING ) ; } return Mono . just ( newResource ) ; } return Flux . fromIterable ( segments ) . concatMap ( segment -> { String segmentContent = segment . getContent ( fullContent ) ; if ( segment . isLink ( ) && ! hasScheme ( segmentContent ) ) { String link = toAbsolutePath ( segmentContent , exchange ) ; return resolveUrlPath ( link , exchange , newResource , transformerChain ) . defaultIfEmpty ( segmentContent ) ; } else { return Mono . just ( segmentContent ) ; } } ) . reduce ( new StringWriter ( ) , ( writer , chunk ) -> { writer . write ( chunk ) ; return writer ; } ) . then ( writer -> { byte [] newContent = writer . toString ( ) . getBytes ( DEFAULT_CHARSET ) ; return Mono . just ( new TransformedResource ( resource , newContent ) ) ; } ) ; } ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> < org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment > java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ( java.lang.String java.lang.String ) { java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> < org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment > java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> = new java.util.ArrayList<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> <> ( ) ; for ( org.springframework.web.reactive.resource.CssLinkResourceTransformer.LinkParser org.springframework.web.reactive.resource.CssLinkResourceTransformer.LinkParser : this . java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.LinkParser> ) { java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> . boolean ( org.springframework.web.reactive.resource.CssLinkResourceTransformer.LinkParser . java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ( java.lang.String ) ) ; } if ( java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> . boolean ( ) ) { return java.util.Collections . java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ( ) ; } java.util.Collections . void ( java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ) ; int int = NUMBER ; java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> < org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment > java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> = new java.util.ArrayList<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> <> ( java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ) ; for ( org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment : java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ) { java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> . boolean ( new org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment ( int , org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment . int ( ) , false ) ) ; int = org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment . int ( ) ; } if ( int < java.lang.String . int ( ) ) { java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> . boolean ( new org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment ( int , java.lang.String . int ( ) , false ) ) ; } java.util.Collections . void ( java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ) ; return java.util.List<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { int int = java.lang.String . int ( STRING ) ; return ( int > NUMBER && ! java.lang.String . java.lang.String ( NUMBER , int ) . boolean ( STRING ) ) || java.lang.String . int ( STRING ) == NUMBER ; }  <METHOD_END>
<METHOD_START> java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> < org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment > java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> protected abstract java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> < org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment > java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ( java.lang.String java.lang.String ) { java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> < org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment > java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> = new java.util.HashSet<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> <> ( NUMBER ) ; int int = NUMBER ; do { int = java.lang.String . int ( java.lang.String ( ) , int ) ; if ( int == - NUMBER ) { break; } int = int ( java.lang.String , int + java.lang.String ( ) . int ( ) ) ; if ( java.lang.String . char ( int ) == '\'' ) { int = int ( int , STRING , java.lang.String , java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ) ; } else if ( java.lang.String . char ( int ) == '"' ) { int = int ( int , STRING , java.lang.String , java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ) ; } else { int = int ( int , java.lang.String , java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ) ; } } while ( true ); return java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.String java.lang.String , int int ) { while ( true ) { if ( java.lang.Character . boolean ( java.lang.String . char ( int ) ) ) { int ++ ; continue; } return int ; } }  <METHOD_END>
<METHOD_START> protected int int ( int int , java.lang.String java.lang.String , java.lang.String java.lang.String , java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> < org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment > java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ) { int int = int + NUMBER ; int int = java.lang.String . int ( java.lang.String , int ) ; java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> . boolean ( new org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment ( int , int , true ) ) ; return int + java.lang.String . int ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract int int ( int int , java.lang.String java.lang.String , java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> < org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment > java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> );  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected int int ( int int , java.lang.String java.lang.String , java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> < org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment > java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ) { if ( java.lang.String . java.lang.String ( int , int + NUMBER ) . boolean ( STRING ) ) { } else if ( org.springframework.web.reactive.resource.Log . isErrorEnabled ( ) ) { org.springframework.web.reactive.resource.Log . error ( STRING + int ) ; } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected int int ( int int , java.lang.String java.lang.String , java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> < org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment > java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ) { return int ( int - NUMBER , STRING , java.lang.String , java.util.Set<org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment> ) ; }  <METHOD_END>
<METHOD_START> public void ( int int , int int , boolean boolean ) { this . int = int ; this . int = int ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( this . int , this . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment ) { return ( this . int < org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment . int ? - NUMBER : ( this . int == org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment . int ? NUMBER : NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object != null && java.lang.Object instanceof org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment ) { org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment = ( org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment ) java.lang.Object ; return ( this . int == org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment . int && this . int == org.springframework.web.reactive.resource.CssLinkResourceTransformer.Segment . int ) ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int * NUMBER + this . int ; }  <METHOD_END>
