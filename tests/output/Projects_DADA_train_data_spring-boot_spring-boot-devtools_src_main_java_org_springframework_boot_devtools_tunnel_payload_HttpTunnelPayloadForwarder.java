<METHOD_START> public void ( java.nio.channels.WritableByteChannel java.nio.channels.WritableByteChannel ) { Assert . notNull ( java.nio.channels.WritableByteChannel , STRING ) ; this . java.nio.channels.WritableByteChannel = java.nio.channels.WritableByteChannel ; }  <METHOD_END>
<METHOD_START> public void void ( HttpTunnelPayload org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ) throws java.io.IOException { synchronized ( this . java.lang.Object ) { long long = org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload . getSequence ( ) ; if ( this . long != long - NUMBER ) { Assert . state ( this . java.util.Map<java.lang.Long,org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload> . size ( ) < int , STRING ) ; this . java.util.Map<java.lang.Long,org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload> . put ( long , org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ) ; return; } org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload . logOutgoing ( ) ; org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload . writeTo ( this . java.nio.channels.WritableByteChannel ) ; this . long = long ; HttpTunnelPayload org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload = this . java.util.Map<java.lang.Long,org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload> . get ( long + NUMBER ) ; if ( org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload != null ) { void ( org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ) ; } } }  <METHOD_END>
