<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter . canRead ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; assertFalse ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter . canRead ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; assertFalse ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter . canRead ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter . canWrite ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; assertFalse ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter . canWrite ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; assertFalse ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter . canWrite ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean = new org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean ( ) ; org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . void ( STRING ) ; org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . void ( NUMBER ) ; org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . void ( NUMBER ) ; org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . void ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . void ( true ) ; org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . void ( new byte [] { NUMBER , NUMBER } ) ; MockHttpInputMessage org.springframework.http.converter.smile.MockHttpInputMessage = new MockHttpInputMessage ( org.springframework.http.converter.smile.ObjectMapper . writeValueAsBytes ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean ) ) ; org.springframework.http.converter.smile.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean = ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean ) org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter . read ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean .class , org.springframework.http.converter.smile.MockHttpInputMessage ) ; assertEquals ( STRING , org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . int ( ) ) ; assertEquals ( NUMBER , org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . float ( ) , NUMBER ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . java.lang.String[] ( ) ) ; assertTrue ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . boolean ( ) ) ; assertArrayEquals ( new byte [] { NUMBER , NUMBER } , org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MockHttpOutputMessage org.springframework.http.converter.smile.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean = new org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean ( ) ; org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . void ( STRING ) ; org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . void ( NUMBER ) ; org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . void ( NUMBER ) ; org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . void ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . void ( true ) ; org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean . void ( new byte [] { NUMBER , NUMBER } ) ; org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter . write ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean , null , org.springframework.http.converter.smile.MockHttpOutputMessage ) ; assertArrayEquals ( org.springframework.http.converter.smile.ObjectMapper . writeValueAsBytes ( org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverterTests.MyBean ) , org.springframework.http.converter.smile.MockHttpOutputMessage . getBodyAsBytes ( ) ) ; assertEquals ( STRING , new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , org.springframework.http.converter.smile.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { return byte[] ; }  <METHOD_END>
<METHOD_START> public void void ( byte [] byte[] ) { this . byte[] = byte[] ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public float float ( ) { return float ; }  <METHOD_END>
<METHOD_START> public void void ( float float ) { this . float = float ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
