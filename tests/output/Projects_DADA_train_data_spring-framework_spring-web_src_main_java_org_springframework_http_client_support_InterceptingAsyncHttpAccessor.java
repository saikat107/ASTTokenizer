<METHOD_START> public void void ( java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> < org . springframework . http . client . org.springframework.http.client.AsyncClientHttpRequestInterceptor > java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> ) { this . java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> = java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> < org . springframework . http . client . org.springframework.http.client.AsyncClientHttpRequestInterceptor > java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> ( ) { return this . java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org . springframework . http . client . org.springframework.http.client.AsyncClientHttpRequestFactory org.springframework.http.client.AsyncClientHttpRequestFactory ( ) { org . springframework . http . client . org.springframework.http.client.AsyncClientHttpRequestFactory org.springframework.http.client.AsyncClientHttpRequestFactory = super. getAsyncRequestFactory ( ) ; if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> ( ) ) ) { return new org . springframework . http . client . org.springframework.http.client.InterceptingAsyncClientHttpRequestFactory ( org.springframework.http.client.AsyncClientHttpRequestFactory , java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> ( ) ) ; } else { return org.springframework.http.client.AsyncClientHttpRequestFactory ; } }  <METHOD_END>
