<METHOD_START> protected org.springframework.aop.framework.autoproxy.BeanFactory org.springframework.aop.framework.autoproxy.BeanFactory ( ) java.io.IOException { return new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultAdvisorAutoProxyCreator org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator = ( DefaultAdvisorAutoProxyCreator ) org.springframework.aop.framework.autoproxy.BeanFactory ( ) . getBean ( java.lang.String ) ; assertEquals ( java.lang.String + DefaultAdvisorAutoProxyCreator . SEPARATOR , org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator . getAdvisorBeanNamePrefix ( ) ) ; assertFalse ( org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator . isUsePrefix ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanFactory org.springframework.aop.framework.autoproxy.BeanFactory = org.springframework.aop.framework.autoproxy.BeanFactory ( ) ; java.lang.Object java.lang.Object = org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanFactory org.springframework.aop.framework.autoproxy.BeanFactory = org.springframework.aop.framework.autoproxy.BeanFactory ( ) ; ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.framework.autoproxy.ITestBean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanFactory org.springframework.aop.framework.autoproxy.BeanFactory = org.springframework.aop.framework.autoproxy.BeanFactory ( ) ; ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; MethodCounter org.springframework.aop.framework.autoproxy.MethodCounter = ( MethodCounter ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.MethodCounter . getCalls ( ) ) ; org.springframework.aop.framework.autoproxy.ITestBean . getName ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.MethodCounter . getCalls ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanFactory org.springframework.aop.framework.autoproxy.BeanFactory = org.springframework.aop.framework.autoproxy.BeanFactory ( ) ; ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; CallCountingTransactionManager org.springframework.aop.framework.autoproxy.CallCountingTransactionManager = ( CallCountingTransactionManager ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( java.lang.String ) ; org.springframework.aop.framework.autoproxy.OrderedTxCheckAdvisor org.springframework.aop.framework.autoproxy.OrderedTxCheckAdvisor = ( org.springframework.aop.framework.autoproxy.OrderedTxCheckAdvisor ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.OrderedTxCheckAdvisor . org.springframework.aop.framework.autoproxy.CountingBeforeAdvice ( ) . getCalls ( ) ) ; assertEquals ( NUMBER , txMan . commits ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.autoproxy.ITestBean . getAge ( ) ) ; int int = NUMBER ; org.springframework.aop.framework.autoproxy.ITestBean . setAge ( int ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.OrderedTxCheckAdvisor . org.springframework.aop.framework.autoproxy.CountingBeforeAdvice ( ) . getCalls ( ) ) ; assertEquals ( STRING , int , org.springframework.aop.framework.autoproxy.ITestBean . getAge ( ) ) ; assertEquals ( STRING , NUMBER , txMan . commits ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanFactory org.springframework.aop.framework.autoproxy.BeanFactory = org.springframework.aop.framework.autoproxy.BeanFactory ( ) ; org.springframework.aop.framework.autoproxy.Rollback org.springframework.aop.framework.autoproxy.Rollback = ( org.springframework.aop.framework.autoproxy.Rollback ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; CallCountingTransactionManager org.springframework.aop.framework.autoproxy.CallCountingTransactionManager = ( CallCountingTransactionManager ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( java.lang.String ) ; org.springframework.aop.framework.autoproxy.OrderedTxCheckAdvisor org.springframework.aop.framework.autoproxy.OrderedTxCheckAdvisor = ( org.springframework.aop.framework.autoproxy.OrderedTxCheckAdvisor ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.OrderedTxCheckAdvisor . org.springframework.aop.framework.autoproxy.CountingBeforeAdvice ( ) . getCalls ( ) ) ; assertEquals ( NUMBER , txMan . commits ) ; org.springframework.aop.framework.autoproxy.Rollback . void ( null ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.OrderedTxCheckAdvisor . org.springframework.aop.framework.autoproxy.CountingBeforeAdvice ( ) . getCalls ( ) ) ; assertEquals ( STRING , NUMBER , txMan . commits ) ; assertEquals ( NUMBER , txMan . rollbacks ) ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; try { org.springframework.aop.framework.autoproxy.Rollback . void ( java.lang.Exception ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( java.lang.Exception , java.lang.Exception ) ; } assertEquals ( STRING , NUMBER , txMan . rollbacks ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanFactory org.springframework.aop.framework.autoproxy.BeanFactory = org.springframework.aop.framework.autoproxy.BeanFactory ( ) ; org.springframework.aop.framework.autoproxy.Rollback org.springframework.aop.framework.autoproxy.Rollback = ( org.springframework.aop.framework.autoproxy.Rollback ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; CallCountingTransactionManager org.springframework.aop.framework.autoproxy.CallCountingTransactionManager = ( CallCountingTransactionManager ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( java.lang.String ) ; assertEquals ( NUMBER , txMan . commits ) ; try { org.springframework.aop.framework.autoproxy.Rollback . void ( new ServletException ( ) ) ; } catch ( ServletException org.springframework.aop.framework.autoproxy.ServletException ) {		} assertEquals ( STRING , NUMBER , txMan . commits ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanFactory org.springframework.aop.framework.autoproxy.BeanFactory = org.springframework.aop.framework.autoproxy.BeanFactory ( ) ; java.lang.Object java.lang.Object = org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( java.lang.String ) ; assertTrue ( java.lang.Object instanceof CallCountingTransactionManager ) ; CallCountingTransactionManager org.springframework.aop.framework.autoproxy.CallCountingTransactionManager = ( CallCountingTransactionManager ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( java.lang.String ) ; org.springframework.aop.framework.autoproxy.Rollback org.springframework.aop.framework.autoproxy.Rollback = ( org.springframework.aop.framework.autoproxy.Rollback ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , txMan . commits ) ; org.springframework.aop.framework.autoproxy.Rollback . void ( false ) ; assertEquals ( STRING , NUMBER , txMan . commits ) ; assertEquals ( NUMBER , txMan . rollbacks ) ; org.springframework.aop.framework.autoproxy.Rollback . void ( true ) ; assertEquals ( NUMBER , txMan . rollbacks ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( new NopInterceptor ( ) ); }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<?> < ? > java.util.List<?> ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return false ; }  <METHOD_END>
<METHOD_START> public void void ( ) {	}  <METHOD_END>
<METHOD_START> public int int ( ) { return - NUMBER ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public org.springframework.aop.framework.autoproxy.CountingBeforeAdvice org.springframework.aop.framework.autoproxy.CountingBeforeAdvice ( ) { return ( CountingBeforeAdvice ) getAdvice ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { setAdvice ( new org.springframework.aop.framework.autoproxy.OrderedTxCheckAdvisor.TxCountingBeforeAdvice ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { if ( boolean ) { TransactionInterceptor . currentTransactionStatus ( ) ; } else { try { TransactionInterceptor . currentTransactionStatus ( ) ; throw new java.lang.RuntimeException ( STRING ) ; } catch ( NoTransactionException org.springframework.aop.framework.autoproxy.NoTransactionException ) { } } super. before ( java.lang.reflect.Method , java.lang.Object[] , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { if ( boolean ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { TransactionInterceptor . currentTransactionStatus ( ) . setRollbackOnly ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Exception java.lang.Exception ) throws java.lang.Exception { if ( java.lang.Exception != null ) throw java.lang.Exception ; }  <METHOD_END>
