<METHOD_START> public void ( GroovyClassLoader org.springframework.boot.cli.compiler.GroovyClassLoader , DependencyResolutionContext org.springframework.boot.cli.compiler.DependencyResolutionContext , java.lang.Iterable<org.springframework.boot.cli.compiler.CompilerAutoConfiguration> < CompilerAutoConfiguration > java.lang.Iterable<org.springframework.boot.cli.compiler.CompilerAutoConfiguration> ) { this . org.springframework.boot.cli.compiler.GroovyClassLoader = org.springframework.boot.cli.compiler.GroovyClassLoader ; this . org.springframework.boot.cli.compiler.DependencyResolutionContext = org.springframework.boot.cli.compiler.DependencyResolutionContext ; this . java.lang.Iterable<org.springframework.boot.cli.compiler.CompilerAutoConfiguration> = java.lang.Iterable<org.springframework.boot.cli.compiler.CompilerAutoConfiguration> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ASTNode [] org.springframework.boot.cli.compiler.ASTNode[] , SourceUnit org.springframework.boot.cli.compiler.SourceUnit ) { for ( ASTNode org.springframework.boot.cli.compiler.ASTNode : org.springframework.boot.cli.compiler.ASTNode[] ) { if ( org.springframework.boot.cli.compiler.ASTNode instanceof ModuleNode ) { void ( ( ModuleNode ) org.springframework.boot.cli.compiler.ASTNode ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ModuleNode org.springframework.boot.cli.compiler.ModuleNode ) { DependencyCustomizer org.springframework.boot.cli.compiler.DependencyCustomizer = new DependencyCustomizer ( this . org.springframework.boot.cli.compiler.GroovyClassLoader , org.springframework.boot.cli.compiler.ModuleNode , this . org.springframework.boot.cli.compiler.DependencyResolutionContext ) ; for ( ClassNode org.springframework.boot.cli.compiler.ClassNode : org.springframework.boot.cli.compiler.ModuleNode . getClasses ( ) ) { for ( CompilerAutoConfiguration org.springframework.boot.cli.compiler.CompilerAutoConfiguration : this . java.lang.Iterable<org.springframework.boot.cli.compiler.CompilerAutoConfiguration> ) { if ( org.springframework.boot.cli.compiler.CompilerAutoConfiguration . matches ( org.springframework.boot.cli.compiler.ClassNode ) ) { org.springframework.boot.cli.compiler.CompilerAutoConfiguration . applyDependencies ( org.springframework.boot.cli.compiler.DependencyCustomizer ) ; } } } }  <METHOD_END>
