<METHOD_START> @ Autowired public void void ( javax.sql.DataSource javax.sql.DataSource ) { this . org.springframework.test.context.transaction.programmatic.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ BeforeTransaction public void void ( ) { int ( STRING ) ; void ( STRING , false ) ; }  <METHOD_END>
<METHOD_START> @ AfterTransaction public void void ( ) { java.lang.String java.lang.String = org.springframework.test.context.transaction.programmatic.TestName . getMethodName ( ) ; switch ( java.lang.String ) { case STRING : case STRING : { void ( STRING ) ; break; } case STRING : case STRING : case STRING : { void ( STRING ) ; break; } case STRING : { void ( STRING , STRING ) ; break; } default: { fail ( STRING + java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ Test @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public void void ( ) { assertFalse ( TestTransaction . isActive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public void void ( ) { TestTransaction . flagForRollback ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public void void ( ) { TestTransaction . flagForCommit ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public void void ( ) { TestTransaction . isFlaggedForRollback ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public void void ( ) { TestTransaction . start ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { TestTransaction . start ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public void void ( ) { TestTransaction . end ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertInTransaction ( true ) ; assertTrue ( TestTransaction . isActive ( ) ) ; void ( STRING ) ; int ( STRING ) ; void ( ) ; TestTransaction . flagForCommit ( ) ; assertFalse ( TestTransaction . isFlaggedForRollback ( ) ) ; TestTransaction . end ( ) ; assertInTransaction ( false ) ; assertFalse ( TestTransaction . isActive ( ) ) ; void ( ) ; void ( STRING , false ) ; void ( STRING ) ; TestTransaction . start ( ) ; assertInTransaction ( true ) ; assertTrue ( TestTransaction . isActive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertInTransaction ( true ) ; assertTrue ( TestTransaction . isActive ( ) ) ; void ( STRING ) ; int ( STRING ) ; void ( ) ; TestTransaction . flagForCommit ( ) ; assertFalse ( TestTransaction . isFlaggedForRollback ( ) ) ; TestTransaction . end ( ) ; assertFalse ( TestTransaction . isActive ( ) ) ; assertInTransaction ( false ) ; void ( ) ; void ( STRING , false ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertInTransaction ( true ) ; assertTrue ( TestTransaction . isActive ( ) ) ; void ( STRING ) ; int ( STRING ) ; void ( ) ; assertTrue ( TestTransaction . isFlaggedForRollback ( ) ) ; TestTransaction . end ( ) ; assertFalse ( TestTransaction . isActive ( ) ) ; assertInTransaction ( false ) ; void ( STRING ) ; TestTransaction . start ( ) ; assertInTransaction ( true ) ; assertTrue ( TestTransaction . isFlaggedForRollback ( ) ) ; assertTrue ( TestTransaction . isActive ( ) ) ; void ( STRING , false ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertInTransaction ( true ) ; assertTrue ( TestTransaction . isActive ( ) ) ; void ( STRING ) ; int ( STRING ) ; void ( ) ; assertTrue ( TestTransaction . isFlaggedForRollback ( ) ) ; TestTransaction . end ( ) ; assertFalse ( TestTransaction . isActive ( ) ) ; assertInTransaction ( false ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Commit public void void ( ) { assertInTransaction ( true ) ; assertTrue ( TestTransaction . isActive ( ) ) ; void ( STRING ) ; int ( STRING ) ; void ( ) ; TestTransaction . flagForRollback ( ) ; assertTrue ( TestTransaction . isFlaggedForRollback ( ) ) ; TestTransaction . end ( ) ; assertFalse ( TestTransaction . isActive ( ) ) ; assertInTransaction ( false ) ; void ( STRING ) ; TestTransaction . start ( ) ; assertInTransaction ( true ) ; assertFalse ( TestTransaction . isFlaggedForRollback ( ) ) ; assertTrue ( TestTransaction . isActive ( ) ) ; void ( STRING , false ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> protected int int ( java.lang.String ... java.lang.String[] ) { return JdbcTestUtils . deleteFromTables ( this . org.springframework.test.context.transaction.programmatic.JdbcTemplate , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , boolean boolean ) throws org.springframework.test.context.transaction.programmatic.DataAccessException { Resource org.springframework.test.context.transaction.programmatic.Resource = this . org.springframework.test.context.transaction.programmatic.ApplicationContext . getResource ( java.lang.String ) ; new ResourceDatabasePopulator ( boolean , false , this . java.lang.String , org.springframework.test.context.transaction.programmatic.Resource ) . execute ( org.springframework.test.context.transaction.programmatic.JdbcTemplate . getDataSource ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ; java.util.Collections . void ( java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.test.context.transaction.programmatic.JdbcTemplate . queryForList ( STRING , java.lang.String .class ) ; java.util.Collections . void ( java.util.List<java.lang.String> ) ; assertEquals ( STRING , java.util.List<java.lang.String> , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.test.context.transaction.programmatic.PlatformTransactionManager org.springframework.test.context.transaction.programmatic.PlatformTransactionManager ( ) { return new DataSourceTransactionManager ( javax.sql.DataSource ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return new EmbeddedDatabaseBuilder ( ) . generateUniqueName ( true ) . addScript ( STRING ) . build ( ) ; }  <METHOD_END>
