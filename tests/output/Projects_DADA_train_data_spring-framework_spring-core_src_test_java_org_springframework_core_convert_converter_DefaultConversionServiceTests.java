<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Character . java.lang.Character ( '1' ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Character .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( null , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Character .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConversionFailedException .class ) public void void ( ) { org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Character .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.core.convert.converter.DefaultConversionService . convert ( '3' , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( true , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Boolean .class ) ) ; assertEquals ( true , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Boolean .class ) ) ; assertEquals ( true , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Boolean .class ) ) ; assertEquals ( true , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Boolean .class ) ) ; assertEquals ( true , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Boolean .class ) ) ; assertEquals ( true , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Boolean .class ) ) ; assertEquals ( true , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( false , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Boolean .class ) ) ; assertEquals ( false , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Boolean .class ) ) ; assertEquals ( false , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Boolean .class ) ) ; assertEquals ( false , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Boolean .class ) ) ; assertEquals ( false , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Boolean .class ) ) ; assertEquals ( false , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Boolean .class ) ) ; assertEquals ( false , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( null , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConversionFailedException .class ) public void void ( ) { org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.core.convert.converter.DefaultConversionService . convert ( true , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( java.lang.Byte . java.lang.Byte ( STRING ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Byte .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING . byte[] ( ) [ NUMBER ] , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Short . java.lang.Short ( STRING ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Short .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { short short = NUMBER ; assertEquals ( STRING , org.springframework.core.convert.converter.DefaultConversionService . convert ( short , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Integer . java.lang.Integer ( STRING ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.core.convert.converter.DefaultConversionService . convert ( NUMBER , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Long . java.lang.Long ( STRING ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Long .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.core.convert.converter.DefaultConversionService . convert ( NUMBER , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Float . java.lang.Float ( STRING ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Float .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.core.convert.converter.DefaultConversionService . convert ( new java.lang.Float ( STRING ) , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Double . java.lang.Double ( STRING ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Double .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.core.convert.converter.DefaultConversionService . convert ( new java.lang.Double ( STRING ) , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( new java.math.BigInteger ( STRING ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.math.BigInteger .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.core.convert.converter.DefaultConversionService . convert ( new java.math.BigInteger ( STRING ) , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( new java.math.BigDecimal ( STRING ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.math.BigDecimal .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.core.convert.converter.DefaultConversionService . convert ( new java.math.BigDecimal ( STRING ) , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( new java.math.BigDecimal ( STRING ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Number .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( null , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Number .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( org.springframework.core.convert.converter.DefaultConversionServiceTests.Foo . org.springframework.core.convert.converter.DefaultConversionServiceTests.Foo , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , org.springframework.core.convert.converter.DefaultConversionServiceTests.Foo .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( org.springframework.core.convert.converter.DefaultConversionServiceTests.SubFoo . org.springframework.core.convert.converter.DefaultConversionServiceTests.SubFoo , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , org.springframework.core.convert.converter.DefaultConversionServiceTests.SubFoo . org.springframework.core.convert.converter.DefaultConversionServiceTests.SubFoo . java.lang.Class<? extends org.springframework.core.convert.converter.DefaultConversionServiceTests.SubFoo> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( null , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , org.springframework.core.convert.converter.DefaultConversionServiceTests.Foo .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.core.convert.converter.DefaultConversionService . convert ( org.springframework.core.convert.converter.DefaultConversionServiceTests.Foo . org.springframework.core.convert.converter.DefaultConversionServiceTests.Foo , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( org.springframework.core.convert.converter.DefaultConversionServiceTests.Foo . org.springframework.core.convert.converter.DefaultConversionServiceTests.Foo , org.springframework.core.convert.converter.DefaultConversionService . convert ( NUMBER , org.springframework.core.convert.converter.DefaultConversionServiceTests.Foo .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( org.springframework.core.convert.converter.DefaultConversionServiceTests.SubFoo . org.springframework.core.convert.converter.DefaultConversionServiceTests.SubFoo , org.springframework.core.convert.converter.DefaultConversionService . convert ( NUMBER , org.springframework.core.convert.converter.DefaultConversionServiceTests.SubFoo . org.springframework.core.convert.converter.DefaultConversionServiceTests.SubFoo . java.lang.Class<? extends org.springframework.core.convert.converter.DefaultConversionServiceTests.SubFoo> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( null , org.springframework.core.convert.converter.DefaultConversionService . convert ( null , org.springframework.core.convert.converter.DefaultConversionServiceTests.Foo .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( org.springframework.core.convert.converter.DefaultConversionServiceTests.Foo . org.springframework.core.convert.converter.DefaultConversionServiceTests.Foo , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( java.util.EnumSet . java.util.EnumSet<org.springframework.core.convert.converter.DefaultConversionServiceTests.Foo> ( org.springframework.core.convert.converter.DefaultConversionServiceTests.Foo . org.springframework.core.convert.converter.DefaultConversionServiceTests.Foo ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.converter.DefaultConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.util.Locale . java.util.Locale , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.util.Locale .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.nio.charset.StandardCharsets . java.nio.charset.Charset , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.nio.charset.Charset .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.core.convert.converter.DefaultConversionService . convert ( java.nio.charset.StandardCharsets . java.nio.charset.Charset , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.util.Currency . java.util.Currency ( STRING ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.util.Currency .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.Currency . java.util.Currency ( STRING ) , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; assertSame ( java.lang.String , org.springframework.core.convert.converter.DefaultConversionService . convert ( java.lang.String , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; java.lang.String java.lang.String = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.UUID , java.lang.String .class ) ; java.util.UUID java.util.UUID = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.lang.String , java.util.UUID .class ) ; assertEquals ( java.util.UUID , java.util.UUID ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( NUMBER , java.lang.Long .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConversionFailedException .class ) public void void ( ) { org.springframework.core.convert.converter.DefaultConversionService . convert ( NUMBER , org.springframework.core.convert.converter.DefaultConversionServiceTests.CustomNumber .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Character . java.lang.Character ( 'A' ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( NUMBER , java.lang.Character .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( 'A' , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<?> < ? > java.util.List<?> = org.springframework.core.convert.converter.DefaultConversionService . convert ( new java.lang.String [] { STRING , STRING , STRING } , java.util.List .class ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = ( java.util.List<java.lang.Integer> < java.lang.Integer > ) org.springframework.core.convert.converter.DefaultConversionService . convert ( new java.lang.String [] { STRING , STRING , STRING } , TypeDescriptor . valueOf ( java.lang.String [] .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.converter.DefaultConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ; assertEquals ( new java.lang.Integer ( STRING ) , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( STRING ) , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( STRING ) , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = { STRING , STRING , STRING } ; @ java.lang.SuppressWarnings ( STRING ) java.util.stream.Stream<java.lang.Integer> < java.lang.Integer > java.util.stream.Stream<java.lang.Integer> = ( java.util.stream.Stream<java.lang.Integer> < java.lang.Integer > ) this . org.springframework.core.convert.converter.DefaultConversionService . convert ( java.lang.String[] , TypeDescriptor . valueOf ( java.lang.String [] .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.converter.DefaultConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.stream.Stream<java.lang.Integer> . java.util.stream.IntStream ( ( java.lang.Integer ) -> java.lang.Integer ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConverterRegistry org.springframework.core.convert.converter.ConverterRegistry = ( org.springframework.core.convert.converter.DefaultConversionService ) ; org.springframework.core.convert.converter.ConverterRegistry . addConverter ( new org.springframework.core.convert.converter.DefaultConversionServiceTests.ColorConverter ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.awt.Color> < java.awt.Color > java.util.List<java.awt.Color> = ( java.util.List<java.awt.Color> < java.awt.Color > ) org.springframework.core.convert.converter.DefaultConversionService . convert ( new java.lang.String [] { STRING , STRING } , TypeDescriptor . valueOf ( java.lang.String [] .class ) , new TypeDescriptor ( new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.converter.DefaultConversionServiceTests> ( ) . java.lang.reflect.Method ( STRING , java.util.List .class ) , NUMBER ) ) ) ; assertEquals ( NUMBER , java.util.List<java.awt.Color> . int ( ) ) ; assertEquals ( java.awt.Color . java.awt.Color , java.util.List<java.awt.Color> . java.awt.Color ( NUMBER ) ) ; assertEquals ( java.awt.Color . java.awt.Color , java.util.List<java.awt.Color> . java.awt.Color ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.LinkedList<?> < ? > java.util.LinkedList<?> = org.springframework.core.convert.converter.DefaultConversionService . convert ( new java.lang.String [] { STRING , STRING , STRING } , java.util.LinkedList .class ) ; assertEquals ( STRING , java.util.LinkedList<> . get ( NUMBER ) ) ; assertEquals ( STRING , java.util.LinkedList<> . get ( NUMBER ) ) ; assertEquals ( STRING , java.util.LinkedList<> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConversionFailedException .class ) public void void ( ) { org.springframework.core.convert.converter.DefaultConversionService . convert ( new java.lang.String [] { STRING , STRING , STRING } , java.util.AbstractList .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.core.convert.converter.DefaultConversionService . convert ( new java.lang.String [] { STRING , STRING , STRING } , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.core.convert.converter.DefaultConversionService . convert ( new java.lang.Integer [] { NUMBER , NUMBER , NUMBER } , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.core.convert.converter.DefaultConversionService . convert ( new java.lang.String [ NUMBER ] , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.String [] .class ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer [] java.lang.Integer[] = org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.Integer [] .class ) ; assertEquals ( NUMBER , java.lang.Integer[] . int ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int [] int[] = org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , int [] .class ) ; assertEquals ( NUMBER , int[] . int ) ; assertEquals ( NUMBER , int[] [ NUMBER ] ) ; assertEquals ( NUMBER , int[] [ NUMBER ] ) ; assertEquals ( NUMBER , int[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.lang.String [] .class ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = new java.lang.Object [] { NUMBER } ; java.lang.Object java.lang.Object = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.lang.Object[] , java.lang.Long .class ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING } ; java.lang.Integer java.lang.Integer = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.lang.String[] , java.lang.Integer .class ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Long [] java.lang.Long[] = new java.lang.Long [] { NUMBER } ; java.lang.Long [] java.lang.Long[] = ( java.lang.Long [] ) org.springframework.core.convert.converter.DefaultConversionService . convert ( java.lang.Long[] , java.lang.Object .class ) ; assertArrayEquals ( java.lang.Long[] , java.lang.Long[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = org.springframework.core.convert.converter.DefaultConversionService . convert ( NUMBER , java.lang.Object [] .class ) ; assertEquals ( NUMBER , java.lang.Object[] . int ) ; assertEquals ( NUMBER , java.lang.Object[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer [] java.lang.Integer[] = org.springframework.core.convert.converter.DefaultConversionService . convert ( NUMBER , java.lang.Integer [] .class ) ; assertEquals ( NUMBER , java.lang.Integer[] . int ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.lang.String [] java.lang.String[] = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.List<java.lang.String> , java.lang.String [] .class ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.lang.Integer [] java.lang.Integer[] = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.List<java.lang.String> , java.lang.Integer [] .class ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; java.lang.String java.lang.String = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.List<java.lang.String> , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.List<java.lang.Integer> , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.converter.DefaultConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) , TypeDescriptor . valueOf ( java.lang.String .class ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.List java.util.List = org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.util.List .class ) ; assertEquals ( NUMBER , java.util.List . int ( ) ) ; assertEquals ( STRING , java.util.List . java.lang.Object ( NUMBER ) ) ; assertEquals ( STRING , java.util.List . java.lang.Object ( NUMBER ) ) ; assertEquals ( STRING , java.util.List . java.lang.Object ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.util.List java.util.List = ( java.util.List ) org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.converter.DefaultConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.List . int ( ) ) ; assertEquals ( NUMBER , java.util.List . java.lang.Object ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List . java.lang.Object ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List . java.lang.Object ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.Collection java.util.Collection = org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.util.Collection .class ) ; assertEquals ( NUMBER , java.util.Collection . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Long> < java.lang.Long > java.util.List<java.lang.Long> = java.util.Collections . java.util.List<java.lang.Long> ( NUMBER ) ; java.lang.Long java.lang.Long = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.List<java.lang.Long> , java.lang.Long .class ) ; assertEquals ( new java.lang.Long ( NUMBER ) , java.lang.Long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; java.lang.Integer java.lang.Integer = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.List<java.lang.String> , java.lang.Integer .class ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.Collection<java.lang.String> . boolean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.Collection<java.lang.String> , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.converter.DefaultConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ; assertEquals ( java.util.Collection<java.lang.String> , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.core.convert.converter.DefaultConversionService . addConverter ( new Converter < java.util.List , org.springframework.core.convert.converter.DefaultConversionServiceTests.ListWrapper > ( ) { @ java.lang.Override public org.springframework.core.convert.converter.DefaultConversionServiceTests.ListWrapper org.springframework.core.convert.converter.DefaultConversionServiceTests.ListWrapper ( java.util.List java.util.List ) { return new org.springframework.core.convert.converter.DefaultConversionServiceTests.ListWrapper ( java.util.List ) ; } } ) ; org.springframework.core.convert.converter.DefaultConversionServiceTests.ListWrapper org.springframework.core.convert.converter.DefaultConversionServiceTests.ListWrapper = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.List<java.lang.String> , org.springframework.core.convert.converter.DefaultConversionServiceTests.ListWrapper .class ) ; assertSame ( java.util.List<java.lang.String> , org.springframework.core.convert.converter.DefaultConversionServiceTests.ListWrapper . java.util.List<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.convert.converter.DefaultConversionServiceTests.ListWrapper org.springframework.core.convert.converter.DefaultConversionServiceTests.ListWrapper ( java.util.List java.util.List ) { return new org.springframework.core.convert.converter.DefaultConversionServiceTests.ListWrapper ( java.util.List ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.List java.util.List = org.springframework.core.convert.converter.DefaultConversionService . convert ( NUMBER , java.util.List .class ) ; assertEquals ( NUMBER , java.util.List . int ( ) ) ; assertEquals ( NUMBER , java.util.List . java.lang.Object ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = ( java.util.List<java.lang.Integer> < java.lang.Integer > ) org.springframework.core.convert.converter.DefaultConversionService . convert ( NUMBER , TypeDescriptor . valueOf ( java.lang.Long .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.converter.DefaultConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . int ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer [] java.lang.Integer[] = org.springframework.core.convert.converter.DefaultConversionService . convert ( new java.lang.String [] { STRING , STRING , STRING } , java.lang.Integer [] .class ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int [] int[] = org.springframework.core.convert.converter.DefaultConversionService . convert ( new java.lang.String [] { STRING , STRING , STRING } , int [] .class ) ; assertEquals ( NUMBER , int[] [ NUMBER ] ) ; assertEquals ( NUMBER , int[] [ NUMBER ] ) ; assertEquals ( NUMBER , int[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { byte [] byte[] = new byte [] { NUMBER , NUMBER , NUMBER } ; java.lang.Byte [] java.lang.Byte[] = org.springframework.core.convert.converter.DefaultConversionService . convert ( byte[] , java.lang.Byte [] .class ) ; assertThat ( java.lang.Byte[] , equalTo ( new java.lang.Byte [] { NUMBER , NUMBER , NUMBER } ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int [] int[] = org.springframework.core.convert.converter.DefaultConversionService . convert ( new int [] { NUMBER , NUMBER , NUMBER } , int [] .class ) ; assertEquals ( NUMBER , int[] [ NUMBER ] ) ; assertEquals ( NUMBER , int[] [ NUMBER ] ) ; assertEquals ( NUMBER , int[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Arrays . java.util.List<java.lang.Object> ( new org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity ( NUMBER ) , new org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity ( NUMBER ) ) ; assertTrue ( org.springframework.core.convert.converter.DefaultConversionService . canConvert ( java.util.List<java.lang.Object> . java.lang.Class<? extends java.util.List> ( ) , java.lang.String .class ) ) ; try { org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.List<java.lang.Object> , java.lang.String .class ) ; } catch ( ConversionFailedException org.springframework.core.convert.converter.ConversionFailedException ) { assertTrue ( org.springframework.core.convert.converter.ConversionFailedException . getMessage ( ) . contains ( java.util.List<java.lang.Object> . java.lang.Class<? extends java.util.List> ( ) . java.lang.String ( ) ) ) ; assertTrue ( org.springframework.core.convert.converter.ConversionFailedException . getCause ( ) instanceof ConverterNotFoundException ) ; assertTrue ( org.springframework.core.convert.converter.ConversionFailedException . getCause ( ) . getMessage ( ) . contains ( org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity .class . java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; assertTrue ( org.springframework.core.convert.converter.DefaultConversionService . canConvert ( java.util.List<java.lang.String> . java.lang.Class<? extends java.util.List> ( ) , java.lang.String .class ) ) ; java.lang.String java.lang.String = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.List<java.lang.String> , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; java.util.List<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > java.util.List<java.util.List<java.lang.String>> = java.util.Arrays . java.util.List<java.util.List<java.lang.String>> ( java.util.List<java.lang.String> , java.util.List<java.lang.String> ) ; assertTrue ( org.springframework.core.convert.converter.DefaultConversionService . canConvert ( java.util.List<java.util.List<java.lang.String>> . java.lang.Class<? extends java.util.List> ( ) , java.lang.String .class ) ) ; java.lang.String java.lang.String = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.List<java.util.List<java.lang.String>> , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = ( java.util.List<java.lang.Integer> < java.lang.Integer > ) org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.Set<java.lang.String> , TypeDescriptor . forObject ( java.util.Set<java.lang.String> ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.converter.DefaultConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = ( java.util.List<java.lang.Integer> < java.lang.Integer > ) org.springframework.core.convert.converter.DefaultConversionService . convert ( null , TypeDescriptor . valueOf ( java.util.LinkedHashSet .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.converter.DefaultConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ; assertNull ( java.util.List<java.lang.Integer> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.List java.util.List = ( java.util.List ) org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.Set<java.lang.String> , TypeDescriptor . valueOf ( java.util.LinkedHashSet .class ) , TypeDescriptor . valueOf ( java.util.List .class ) ) ; assertEquals ( STRING , java.util.List . java.lang.Object ( NUMBER ) ) ; assertEquals ( STRING , java.util.List . java.lang.Object ( NUMBER ) ) ; assertEquals ( STRING , java.util.List . java.lang.Object ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { java.util.Map java.util.Map = new java.util.LinkedHashMap ( ) ; java.util.Map . java.lang.Object ( STRING , STRING ) ; java.util.Map . java.lang.Object ( STRING , STRING ) ; java.util.Map . java.lang.Object ( STRING , STRING ) ; java.util.Collection java.util.Collection = java.util.Map . java.util.Collection ( ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = ( java.util.List<java.lang.Integer> < java.lang.Integer > ) org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.Collection , TypeDescriptor . forObject ( java.util.Collection ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.converter.DefaultConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . int ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = ( java.util.List<java.lang.Integer> < java.lang.Integer > ) org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.List<java.lang.String> , TypeDescriptor . collection ( java.util.List .class , TypeDescriptor . valueOf ( java.lang.Integer .class ) ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.Integer,org.springframework.core.convert.converter.DefaultConversionServiceTests.FooEnum> < java.lang.Integer , org.springframework.core.convert.converter.DefaultConversionServiceTests.FooEnum > java.util.Map<java.lang.Integer,org.springframework.core.convert.converter.DefaultConversionServiceTests.FooEnum> = ( java.util.Map<java.lang.Integer,org.springframework.core.convert.converter.DefaultConversionServiceTests.FooEnum> < java.lang.Integer , org.springframework.core.convert.converter.DefaultConversionServiceTests.FooEnum > ) org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.Map<java.lang.String,java.lang.String> , TypeDescriptor . forObject ( java.util.Map<java.lang.String,java.lang.String> ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.converter.DefaultConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ; assertEquals ( org.springframework.core.convert.converter.DefaultConversionServiceTests.FooEnum . org.springframework.core.convert.converter.DefaultConversionServiceTests.FooEnum , java.util.Map<java.lang.Integer,org.springframework.core.convert.converter.DefaultConversionServiceTests.FooEnum> . org.springframework.core.convert.converter.DefaultConversionServiceTests.FooEnum ( NUMBER ) ) ; assertEquals ( org.springframework.core.convert.converter.DefaultConversionServiceTests.FooEnum . org.springframework.core.convert.converter.DefaultConversionServiceTests.FooEnum , java.util.Map<java.lang.Integer,org.springframework.core.convert.converter.DefaultConversionServiceTests.FooEnum> . org.springframework.core.convert.converter.DefaultConversionServiceTests.FooEnum ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.LinkedHashMap<java.lang.String,java.lang.Integer> <> ( ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; java.util.List java.util.List = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.Map<java.lang.String,java.lang.Integer> . java.util.Collection<java.lang.Integer> ( ) , java.util.List .class ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) , java.util.List ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.Integer,java.lang.Integer> < java.lang.Integer , java.lang.Integer > java.util.Map<java.lang.Integer,java.lang.Integer> = ( java.util.Map<java.lang.Integer,java.lang.Integer> < java.lang.Integer , java.lang.Integer > ) org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.Map<java.lang.String,java.lang.String> , TypeDescriptor . map ( java.util.Map .class , TypeDescriptor . valueOf ( java.lang.Integer .class ) , TypeDescriptor . valueOf ( java.lang.Integer .class ) ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.Map<java.lang.Integer,java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.Map<java.lang.Integer,java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.lang.String java.lang.String = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.Properties , java.lang.String .class ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.util.Properties .class ) ; assertEquals ( NUMBER , java.util.Properties . int ( ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.util.Properties .class ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN . void ( ) ; assertEquals ( STRING , org.springframework.core.convert.converter.DefaultConversionService . convert ( new org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN ( STRING ) , java.lang.String .class ) ) ; assertEquals ( STRING , NUMBER , org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN . int ) ; assertEquals ( STRING , NUMBER , org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN . int ) ; assertEquals ( STRING , NUMBER , org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN . void ( ) ; assertEquals ( new org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN ( STRING ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN .class ) ) ; assertEquals ( STRING , NUMBER , org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN . int ) ; assertEquals ( STRING , NUMBER , org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN . int ) ; assertEquals ( STRING , NUMBER , org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.converter.DefaultConversionServiceTests.SSN . void ( ) ; assertEquals ( STRING , org.springframework.core.convert.converter.DefaultConversionService . convert ( new org.springframework.core.convert.converter.DefaultConversionServiceTests.SSN ( STRING ) , java.lang.String .class ) ) ; assertEquals ( STRING , NUMBER , org.springframework.core.convert.converter.DefaultConversionServiceTests.SSN . int ) ; assertEquals ( STRING , NUMBER , org.springframework.core.convert.converter.DefaultConversionServiceTests.SSN . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.converter.DefaultConversionServiceTests.SSN . void ( ) ; assertEquals ( new org.springframework.core.convert.converter.DefaultConversionServiceTests.SSN ( STRING ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , org.springframework.core.convert.converter.DefaultConversionServiceTests.SSN .class ) ) ; assertEquals ( STRING , NUMBER , org.springframework.core.convert.converter.DefaultConversionServiceTests.SSN . int ) ; assertEquals ( STRING , NUMBER , org.springframework.core.convert.converter.DefaultConversionServiceTests.SSN . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.util.TimeZone .class ) . getID ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.core.convert.converter.DefaultConversionService . convert ( java.time.ZoneId . java.time.ZoneId ( STRING ) , java.lang.String .class ) . startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.core.convert.converter.DefaultConversionService . canConvert ( org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity .class , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.time.ZoneId . java.time.ZoneId ( STRING ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , java.time.ZoneId .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConverterNotFoundException .class ) public void void ( ) { org.springframework.core.convert.converter.DefaultConversionService . convert ( new java.lang.Long ( NUMBER ) , org.springframework.core.convert.converter.DefaultConversionServiceTests.SSN .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity = org.springframework.core.convert.converter.DefaultConversionService . convert ( NUMBER , org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity .class ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity . java.lang.Long ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity = ( org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity ) org.springframework.core.convert.converter.DefaultConversionService . convert ( null , TypeDescriptor . valueOf ( java.lang.String .class ) , TypeDescriptor . valueOf ( org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity .class ) ) ; assertNull ( org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity = org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity .class ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity . java.lang.Long ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = org.springframework.core.convert.converter.DefaultConversionService . convert ( new char [] { 'a' , 'b' , 'c' } , java.lang.String .class ) ; assertThat ( java.lang.String , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { char [] char[] = org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , char [] .class ) ; assertThat ( char[] , equalTo ( new char [] { 'a' , 'b' , 'c' } ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.convert.converter.DefaultConversionService . addConverter ( new Converter < java.lang.String , char [] > ( ) { @ java.lang.Override public char [] char[] ( java.lang.String java.lang.String ) { return java.lang.String . char[] ( ) ; } } ) ; char [] char[] = org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , char [] .class ) ; assertThat ( char[] , equalTo ( new char [] { 'a' , 'b' , 'c' } ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public char [] char[] ( java.lang.String java.lang.String ) { return java.lang.String . char[] ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.lang.String [] [] java.lang.String[][] = new java.lang.String [] [] { new java.lang.String [] { STRING , STRING , STRING , STRING } , new java.lang.String [] { STRING , STRING , STRING , STRING } , new java.lang.String [] { STRING , STRING , STRING , STRING } } ; java.util.List<java.lang.String[]> < java.lang.String [] > java.util.List<java.lang.String[]> = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.lang.String[][] , java.util.List .class ) ; java.lang.String [] [] java.lang.String[][] = org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.List<java.lang.String[]> , java.lang.String [] [] .class ) ; assertArrayEquals ( java.lang.String[][] , java.lang.String[][] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.converter.DefaultConversionService . addConverter ( new Converter < java.lang.Byte , java.lang.Byte > ( ) { @ java.lang.Override public java.lang.Byte java.lang.Byte ( java.lang.Byte java.lang.Byte ) { return ( byte ) ( java.lang.Byte + NUMBER ) ; } } ) ; byte [] byte[] = new byte [] { NUMBER , NUMBER , NUMBER } ; byte [] byte[] = org.springframework.core.convert.converter.DefaultConversionService . convert ( byte[] , byte [] .class ) ; assertNotSame ( byte[] , byte[] ) ; assertTrue ( java.util.Arrays . boolean ( new byte [] { NUMBER , NUMBER , NUMBER } , byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Byte java.lang.Byte ( java.lang.Byte java.lang.Byte ) { return ( byte ) ( java.lang.Byte + NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getMethod ( org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity .class , STRING , java.util.Optional .class ) ; MethodParameter org.springframework.core.convert.converter.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; TypeDescriptor org.springframework.core.convert.converter.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.converter.MethodParameter ) ; java.lang.Object java.lang.Object = org.springframework.core.convert.converter.DefaultConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , org.springframework.core.convert.converter.TypeDescriptor ) ; assertEquals ( java.util.Optional .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) , ( ( java.util.Optional<java.util.List<java.lang.Integer>> < java.util.List<java.lang.Integer> < java.lang.Integer > > ) java.lang.Object ) . java.util.List<java.lang.Integer> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertSame ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( null , TypeDescriptor . valueOf ( java.lang.Object .class ) , TypeDescriptor . valueOf ( java.util.Optional .class ) ) ) ; assertSame ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( null , java.util.Optional .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertSame ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , TypeDescriptor . valueOf ( java.lang.Object .class ) , TypeDescriptor . valueOf ( java.util.Optional .class ) ) ) ; assertSame ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , org.springframework.core.convert.converter.DefaultConversionService . convert ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.util.Optional .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assume . group ( TestGroup . PERFORMANCE ) ; StopWatch org.springframework.core.convert.converter.StopWatch = new StopWatch ( STRING ) ; org.springframework.core.convert.converter.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.core.convert.converter.DefaultConversionService . convert ( NUMBER , java.lang.String .class ) ; } org.springframework.core.convert.converter.StopWatch . stop ( ) ; org.springframework.core.convert.converter.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { new java.lang.Integer ( NUMBER ) . java.lang.String ( ) ; } org.springframework.core.convert.converter.StopWatch . stop ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.awt.Color> < java.awt.Color > java.util.List<java.awt.Color> ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> abstract java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.awt.Color java.awt.Color ( java.lang.String java.lang.String ) { if ( ! java.lang.String . boolean ( STRING ) ) { java.lang.String = STRING + java.lang.String ; } return java.awt.Color . java.awt.Color ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public float float ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return java.lang.Long ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity ( java.lang.Long java.lang.Long ) { return new org.springframework.core.convert.converter.DefaultConversionServiceTests.TestEntity ( java.lang.Long ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Optional<java.util.List<java.lang.Integer>> < java.util.List<java.lang.Integer> < java.lang.Integer > > java.util.Optional<java.util.List<java.lang.Integer>> ) {		}  <METHOD_END>
<METHOD_START> public void ( java.util.List<?> < ? > java.util.List<?> ) { this . java.util.List<?> = java.util.List<> ; }  <METHOD_END>
<METHOD_START> public java.util.List<?> < ? > java.util.List<?> ( ) { return java.util.List<> ; }  <METHOD_END>
<METHOD_START> static void void ( ) { int = NUMBER ; int = NUMBER ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { int ++ ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof org.springframework.core.convert.converter.DefaultConversionServiceTests.SSN ) ) { return false ; } org.springframework.core.convert.converter.DefaultConversionServiceTests.SSN org.springframework.core.convert.converter.DefaultConversionServiceTests.SSN = ( org.springframework.core.convert.converter.DefaultConversionServiceTests.SSN ) java.lang.Object ; return this . java.lang.String . boolean ( org.springframework.core.convert.converter.DefaultConversionServiceTests.SSN . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.String . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { int ++ ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> static void void ( ) { int = NUMBER ; int = NUMBER ; int = NUMBER ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { int ++ ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN ) ) { return false ; } org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN = ( org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN ) java.lang.Object ; return this . java.lang.String . boolean ( org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.String . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { int ++ ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN ( java.lang.String java.lang.String ) { int ++ ; return new org.springframework.core.convert.converter.DefaultConversionServiceTests.ISBN ( java.lang.String ) ; }  <METHOD_END>
