<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.http.codec.FormHttpMessageReader . canRead ( ResolvableType . forClassWithGenerics ( MultiValueMap .class , java.lang.String .class , java.lang.String .class ) , MediaType . APPLICATION_FORM_URLENCODED ) ) ; assertFalse ( this . org.springframework.http.codec.FormHttpMessageReader . canRead ( ResolvableType . forClassWithGenerics ( MultiValueMap .class , java.lang.String .class , java.lang.Object .class ) , MediaType . APPLICATION_FORM_URLENCODED ) ) ; assertFalse ( this . org.springframework.http.codec.FormHttpMessageReader . canRead ( ResolvableType . forClassWithGenerics ( MultiValueMap .class , java.lang.Object .class , java.lang.String .class ) , MediaType . APPLICATION_FORM_URLENCODED ) ) ; assertFalse ( this . org.springframework.http.codec.FormHttpMessageReader . canRead ( ResolvableType . forClassWithGenerics ( java.util.Map .class , java.lang.String .class , java.lang.String .class ) , MediaType . APPLICATION_FORM_URLENCODED ) ) ; assertFalse ( this . org.springframework.http.codec.FormHttpMessageReader . canRead ( ResolvableType . forClassWithGenerics ( MultiValueMap .class , java.lang.String .class , java.lang.String .class ) , MediaType . MULTIPART_FORM_DATA ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; MockServerHttpRequest org.springframework.http.codec.MockServerHttpRequest = org.springframework.http.codec.MockServerHttpRequest ( java.lang.String ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.http.codec.FormHttpMessageReader . readMono ( null , org.springframework.http.codec.MockServerHttpRequest , null ) . block ( ) ; assertEquals ( STRING , NUMBER , org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertNull ( STRING , org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; MockServerHttpRequest org.springframework.http.codec.MockServerHttpRequest = org.springframework.http.codec.MockServerHttpRequest ( java.lang.String ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.http.codec.FormHttpMessageReader . read ( null , org.springframework.http.codec.MockServerHttpRequest , null ) . single ( ) . block ( ) ; assertEquals ( STRING , NUMBER , org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertNull ( STRING , org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.http.codec.MockServerHttpRequest org.springframework.http.codec.MockServerHttpRequest ( java.lang.String java.lang.String ) { return MockServerHttpRequest . method ( HttpMethod . GET , STRING ) . header ( HttpHeaders . CONTENT_TYPE , MediaType . APPLICATION_FORM_URLENCODED_VALUE ) . body ( java.lang.String ) ; }  <METHOD_END>
