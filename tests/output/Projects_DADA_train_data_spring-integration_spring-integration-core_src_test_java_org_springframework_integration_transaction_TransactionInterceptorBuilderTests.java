<METHOD_START> @ Test public void void ( ) java.lang.Throwable { void ( this . org.springframework.integration.transaction.TransactionInterceptor , this . org.springframework.integration.transaction.PlatformTransactionManager ) ; void ( this . org.springframework.integration.transaction.TransactionInterceptor , null ) ; }  <METHOD_END>
<METHOD_START> private void void ( TransactionInterceptor org.springframework.integration.transaction.TransactionInterceptor , PlatformTransactionManager org.springframework.integration.transaction.PlatformTransactionManager ) { assertSame ( org.springframework.integration.transaction.PlatformTransactionManager , org.springframework.integration.transaction.TransactionInterceptor . getTransactionManager ( ) ) ; TransactionAttribute org.springframework.integration.transaction.TransactionAttribute = org.springframework.integration.transaction.TransactionInterceptor . getTransactionAttributeSource ( ) . getTransactionAttribute ( null , null ) ; Assert . assertThat ( org.springframework.integration.transaction.TransactionAttribute . getPropagationBehavior ( ) , equalTo ( Propagation . REQUIRES_NEW . value ( ) ) ) ; Assert . assertThat ( org.springframework.integration.transaction.TransactionAttribute . getIsolationLevel ( ) , equalTo ( Isolation . SERIALIZABLE . value ( ) ) ) ; Assert . assertThat ( org.springframework.integration.transaction.TransactionAttribute . getTimeout ( ) , equalTo ( NUMBER ) ) ; assertTrue ( org.springframework.integration.transaction.TransactionAttribute . isReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.transaction.PseudoTransactionManager org.springframework.integration.transaction.PseudoTransactionManager ( ) { return new PseudoTransactionManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.transaction.TransactionInterceptor org.springframework.integration.transaction.TransactionInterceptor ( PlatformTransactionManager org.springframework.integration.transaction.PlatformTransactionManager ) { return new TransactionInterceptorBuilder ( ) . propagation ( Propagation . REQUIRES_NEW ) . isolation ( Isolation . SERIALIZABLE ) . timeout ( NUMBER ) . readOnly ( true ) . transactionManager ( org.springframework.integration.transaction.PlatformTransactionManager ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.transaction.TransactionInterceptor org.springframework.integration.transaction.TransactionInterceptor ( ) { return new TransactionInterceptorBuilder ( ) . propagation ( Propagation . REQUIRES_NEW ) . isolation ( Isolation . SERIALIZABLE ) . timeout ( NUMBER ) . readOnly ( true ) . build ( ) ; }  <METHOD_END>
