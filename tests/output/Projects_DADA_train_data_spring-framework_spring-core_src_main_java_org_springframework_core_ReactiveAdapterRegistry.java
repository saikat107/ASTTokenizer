<METHOD_START> public void ( ) { if ( boolean ) { new org.springframework.core.ReactiveAdapterRegistry.ReactorRegistrar ( ) . void ( this ) ; } if ( boolean && boolean ) { new org.springframework.core.ReactiveAdapterRegistry.RxJava1Registrar ( ) . void ( this ) ; } if ( boolean ) { new org.springframework.core.ReactiveAdapterRegistry.RxJava2Registrar ( ) . void ( this ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ! this . java.util.List<org.springframework.core.ReactiveAdapter> . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ReactiveTypeDescriptor org.springframework.core.ReactiveTypeDescriptor , java.util.function.Function<java.lang.Object,org.springframework.core.Publisher<?>> < java.lang.Object , Publisher < ? > > java.util.function.Function<java.lang.Object,org.springframework.core.Publisher<?>> , java.util.function.Function<org.springframework.core.Publisher<?>,java.lang.Object> < Publisher < ? > , java.lang.Object > java.util.function.Function<org.springframework.core.Publisher<?>,java.lang.Object> ) { if ( boolean ) { this . java.util.List<org.springframework.core.ReactiveAdapter> . add ( new org.springframework.core.ReactiveAdapterRegistry.ReactorAdapter ( org.springframework.core.ReactiveTypeDescriptor , java.util.function.Function<java.lang.Object,org.springframework.core.Publisher<?>> , java.util.function.Function<org.springframework.core.Publisher<?>,java.lang.Object> ) ) ; } else { this . java.util.List<org.springframework.core.ReactiveAdapter> . add ( new ReactiveAdapter ( org.springframework.core.ReactiveTypeDescriptor , java.util.function.Function<java.lang.Object,org.springframework.core.Publisher<?>> , java.util.function.Function<org.springframework.core.Publisher<?>,java.lang.Object> ) ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.core.ReactiveAdapter org.springframework.core.ReactiveAdapter ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.core.ReactiveAdapter ( java.lang.Class<> , null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.ReactiveAdapter org.springframework.core.ReactiveAdapter ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object java.lang.Object ) { java.lang.Object java.lang.Object = ( java.lang.Object instanceof java.util.Optional ? ( ( java.util.Optional<?> < ? > ) java.lang.Object ) . orElse ( null ) : java.lang.Object ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : java.lang.Class<> ) ; if ( java.lang.Class<> == null ) { return null ; } Assert . isTrue ( ! boolean || boolean || ! java.lang.Class<> . java.lang.String ( ) . boolean ( STRING ) , STRING + STRING + java.lang.Class<> . java.lang.String ( ) ) ; return this . java.util.List<org.springframework.core.ReactiveAdapter> . stream ( ) . filter ( adapter -> adapter . getReactiveType ( ) == clazz ) . findFirst ( ) . orElseGet ( ( ) this . adapters . stream ( ) . filter ( adapter -> adapter . getReactiveType ( ) . isAssignableFrom ( clazz ) ) . findFirst ( ) . orElse ( null ) ) ; }  <METHOD_END>
<METHOD_START> void void ( org.springframework.core.ReactiveAdapterRegistry org.springframework.core.ReactiveAdapterRegistry ) { org.springframework.core.ReactiveAdapterRegistry . void ( singleOptionalValue ( Mono .class , Mono :: empty ) , source -> ( Mono < ? > ) source , Mono :: from ) ; org.springframework.core.ReactiveAdapterRegistry . void ( multiValue ( Flux .class , Flux :: empty ) , source -> ( Flux < ? > ) source , Flux :: from ) ; org.springframework.core.ReactiveAdapterRegistry . void ( multiValue ( Publisher .class , Flux :: empty ) , source -> ( Publisher < ? > ) source , source -> source ) ; org.springframework.core.ReactiveAdapterRegistry . void ( singleOptionalValue ( java.util.concurrent.CompletableFuture .class , ( ) { CompletableFuture < ? > empty = new CompletableFuture <> ( ) ; empty . complete ( null ) ; return empty ; } ) , source -> Mono . fromFuture ( ( CompletableFuture < ? > ) source ) , source -> Mono . from ( source ) . toFuture ( ) ) ; }  <METHOD_END>
<METHOD_START> void void ( org.springframework.core.ReactiveAdapterRegistry org.springframework.core.ReactiveAdapterRegistry ) { org.springframework.core.ReactiveAdapterRegistry . void ( multiValue ( rx . rx .class , rx . Observable :: empty ) , source -> RxReactiveStreams . toPublisher ( ( rx . Observable < ? > ) source ) , RxReactiveStreams :: toObservable ) ; org.springframework.core.ReactiveAdapterRegistry . void ( singleRequiredValue ( rx . rx .class ) , source -> RxReactiveStreams . toPublisher ( ( rx . Single < ? > ) source ) , RxReactiveStreams :: toSingle ) ; org.springframework.core.ReactiveAdapterRegistry . void ( noValue ( rx . rx .class , rx . Completable :: complete ) , source -> RxReactiveStreams . toPublisher ( ( rx . Completable ) source ) , RxReactiveStreams :: toCompletable ) ; }  <METHOD_END>
<METHOD_START> void void ( org.springframework.core.ReactiveAdapterRegistry org.springframework.core.ReactiveAdapterRegistry ) { org.springframework.core.ReactiveAdapterRegistry . void ( multiValue ( io . io . io .class , io . reactivex . Flowable :: empty ) , source -> ( io . reactivex . Flowable < ? > ) source , source -> io . reactivex . Flowable . fromPublisher ( source ) ) ; org.springframework.core.ReactiveAdapterRegistry . void ( multiValue ( io . io . io .class , io . reactivex . Observable :: empty ) , source -> ( ( io . reactivex . Observable < ? > ) source ) . toFlowable ( BackpressureStrategy . BUFFER ) , source -> io . reactivex . Flowable . fromPublisher ( source ) . toObservable ( ) ) ; org.springframework.core.ReactiveAdapterRegistry . void ( singleRequiredValue ( io . io . io .class ) , source -> ( ( io . reactivex . Single < ? > ) source ) . toFlowable ( ) , source -> io . reactivex . Flowable . fromPublisher ( source ) . toObservable ( ) . singleElement ( ) . toSingle ( ) ) ; org.springframework.core.ReactiveAdapterRegistry . void ( singleOptionalValue ( io . io . io .class , io . reactivex . Maybe :: empty ) , source -> ( ( io . reactivex . Maybe < ? > ) source ) . toFlowable ( ) , source -> io . reactivex . Flowable . fromPublisher ( source ) . toObservable ( ) . singleElement ( ) ) ; org.springframework.core.ReactiveAdapterRegistry . void ( noValue ( io . io . io .class , io . reactivex . Completable :: complete ) , source -> ( ( io . reactivex . Completable ) source ) . toFlowable ( ) , source -> io . reactivex . Flowable . fromPublisher ( source ) . toObservable ( ) . ignoreElements ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( ReactiveTypeDescriptor org.springframework.core.ReactiveTypeDescriptor , java.util.function.Function<java.lang.Object,org.springframework.core.Publisher<?>> < java.lang.Object , Publisher < ? > > java.util.function.Function<java.lang.Object,org.springframework.core.Publisher<?>> , java.util.function.Function<org.springframework.core.Publisher<?>,java.lang.Object> < Publisher < ? > , java.lang.Object > java.util.function.Function<org.springframework.core.Publisher<?>,java.lang.Object> ) { super( org.springframework.core.ReactiveTypeDescriptor , java.util.function.Function<java.lang.Object,org.springframework.core.Publisher<?>> , java.util.function.Function<org.springframework.core.Publisher<?>,java.lang.Object> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.core.Publisher<T> < T > org.springframework.core.Publisher<T> ( java.lang.Object java.lang.Object ) { Publisher < T > org.springframework.core.Publisher<T> = super. toPublisher ( java.lang.Object ) ; return ( isMultiValue ( ) ? Flux . from ( org.springframework.core.Publisher<T> ) : Mono . from ( org.springframework.core.Publisher<T> ) ) ; }  <METHOD_END>
