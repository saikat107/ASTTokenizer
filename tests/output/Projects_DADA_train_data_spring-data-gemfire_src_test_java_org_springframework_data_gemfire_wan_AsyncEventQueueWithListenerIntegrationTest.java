<METHOD_START> @ Test public void void ( ) { assertNotNull ( org.springframework.data.gemfire.wan.AsyncEventQueue ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueue . getId ( ) ) ; assertFalse ( org.springframework.data.gemfire.wan.AsyncEventQueue . isPersistent ( ) ) ; assertFalse ( org.springframework.data.gemfire.wan.AsyncEventQueue . isParallel ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.wan.AsyncEventQueue . getMaximumQueueMemory ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.wan.AsyncEventQueue . getDispatcherThreads ( ) ) ; assertTrue ( org.springframework.data.gemfire.wan.AsyncEventQueue . getAsyncEventListener ( ) instanceof org.springframework.data.gemfire.wan.AsyncEventQueueWithListenerIntegrationTest.TestAsyncEventListener ) ; assertSame ( org.springframework.data.gemfire.wan.AsyncEventQueue , ( ( org.springframework.data.gemfire.wan.AsyncEventQueueWithListenerIntegrationTest.TestAsyncEventListener ) org.springframework.data.gemfire.wan.AsyncEventQueue . getAsyncEventListener ( ) ) . org.springframework.data.gemfire.wan.AsyncEventQueue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( org.springframework.data.gemfire.wan.AsyncEventQueue ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueue . getId ( ) ) ; assertFalse ( org.springframework.data.gemfire.wan.AsyncEventQueue . isPersistent ( ) ) ; assertTrue ( org.springframework.data.gemfire.wan.AsyncEventQueue . isParallel ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.wan.AsyncEventQueue . getMaximumQueueMemory ( ) ) ; assertEquals ( GatewaySender . DEFAULT_DISPATCHER_THREADS , org.springframework.data.gemfire.wan.AsyncEventQueue . getDispatcherThreads ( ) ) ; assertTrue ( org.springframework.data.gemfire.wan.AsyncEventQueue . getAsyncEventListener ( ) instanceof org.springframework.data.gemfire.wan.AsyncEventQueueWithListenerIntegrationTest.TestAsyncEventListener ) ; assertEquals ( STRING , ( ( org.springframework.data.gemfire.wan.AsyncEventQueueWithListenerIntegrationTest.TestAsyncEventListener ) org.springframework.data.gemfire.wan.AsyncEventQueue . getAsyncEventListener ( ) ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( org.springframework.data.gemfire.wan.AsyncEventQueue ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueue . getId ( ) ) ; assertFalse ( org.springframework.data.gemfire.wan.AsyncEventQueue . isPersistent ( ) ) ; assertFalse ( org.springframework.data.gemfire.wan.AsyncEventQueue . isParallel ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.wan.AsyncEventQueue . getMaximumQueueMemory ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.wan.AsyncEventQueue . getDispatcherThreads ( ) ) ; assertTrue ( org.springframework.data.gemfire.wan.AsyncEventQueue . getAsyncEventListener ( ) instanceof org.springframework.data.gemfire.wan.AsyncEventQueueWithListenerIntegrationTest.TestAsyncEventListener ) ; assertSame ( org.springframework.data.gemfire.wan.AsyncEventQueue , ( ( org.springframework.data.gemfire.wan.AsyncEventQueueWithListenerIntegrationTest.TestAsyncEventListener ) org.springframework.data.gemfire.wan.AsyncEventQueue . getAsyncEventListener ( ) ) . org.springframework.data.gemfire.wan.AsyncEventQueue ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { this . org.springframework.data.gemfire.wan.AsyncEventQueue = null ; }  <METHOD_END>
<METHOD_START> public void ( final AsyncEventQueue org.springframework.data.gemfire.wan.AsyncEventQueue ) { this . org.springframework.data.gemfire.wan.AsyncEventQueue = org.springframework.data.gemfire.wan.AsyncEventQueue ; }  <METHOD_END>
<METHOD_START> public void void ( ) { org.springframework.data.gemfire.wan.AsyncEventQueue ( ) ; java.lang.System . java.io.PrintStream . java.io.PrintStream ( STRING , this ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.wan.AsyncEventQueue org.springframework.data.gemfire.wan.AsyncEventQueue ( ) { Assert . state ( org.springframework.data.gemfire.wan.AsyncEventQueue != null , java.lang.String . java.lang.String ( STRING + STRING , this ) ) ; return org.springframework.data.gemfire.wan.AsyncEventQueue ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( final AsyncEventQueue org.springframework.data.gemfire.wan.AsyncEventQueue ) { this . org.springframework.data.gemfire.wan.AsyncEventQueue = org.springframework.data.gemfire.wan.AsyncEventQueue ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( final java.util.List<org.springframework.data.gemfire.wan.AsyncEvent> < AsyncEvent > java.util.List<org.springframework.data.gemfire.wan.AsyncEvent> ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( StringUtils . hasText ( java.lang.String ( ) ) ? java.lang.String ( ) : java.lang.Class<? extends org.springframework.data.gemfire.wan.AsyncEventQueueWithListenerIntegrationTest.TestAsyncEventListener> ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
