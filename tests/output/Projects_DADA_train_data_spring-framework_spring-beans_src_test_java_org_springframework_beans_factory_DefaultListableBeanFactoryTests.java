<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.DefaultListableBeanFactoryTests.KnowsIfInstantiated . void ( ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , org.springframework.beans.factory.DefaultListableBeanFactoryTests.KnowsIfInstantiated .class . java.lang.String ( ) ) ; assertTrue ( STRING , ! org.springframework.beans.factory.DefaultListableBeanFactoryTests.KnowsIfInstantiated . boolean ( ) ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; assertTrue ( STRING , org.springframework.beans.factory.DefaultListableBeanFactoryTests.KnowsIfInstantiated . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.DefaultListableBeanFactoryTests.KnowsIfInstantiated . void ( ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , org.springframework.beans.factory.DefaultListableBeanFactoryTests.KnowsIfInstantiated .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; assertTrue ( STRING , ! org.springframework.beans.factory.DefaultListableBeanFactoryTests.KnowsIfInstantiated . boolean ( ) ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; assertTrue ( STRING , ! org.springframework.beans.factory.DefaultListableBeanFactoryTests.KnowsIfInstantiated . boolean ( ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; assertTrue ( STRING , ! org.springframework.beans.factory.DefaultListableBeanFactoryTests.KnowsIfInstantiated . boolean ( ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.DefaultListableBeanFactoryTests.KnowsIfInstantiated . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , DummyFactory .class . java.lang.String ( ) ) ; DummyFactory . reset ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; assertTrue ( STRING , ! DummyFactory . wasPrototypeCreated ( ) ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; assertTrue ( STRING , ! DummyFactory . wasPrototypeCreated ( ) ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; assertTrue ( STRING , ! DummyFactory . wasPrototypeCreated ( ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( STRING , DummyFactory . wasPrototypeCreated ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , DummyFactory .class . java.lang.String ( ) ) ; DummyFactory . reset ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; assertTrue ( STRING , ! DummyFactory . wasPrototypeCreated ( ) ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( TestBean .class , true , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForAnnotation ( java.lang.SuppressWarnings .class ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , DummyFactory .class ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , ResolvableType . forClass ( DummyFactory .class ) ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , ResolvableType . forClassWithGenerics ( FactoryBean .class , java.lang.Object .class ) ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , ResolvableType . forClassWithGenerics ( FactoryBean .class , java.lang.String .class ) ) ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertEquals ( DummyFactory .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertTrue ( STRING , ! DummyFactory . wasPrototypeCreated ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , DummyFactory .class . java.lang.String ( ) ) ; DummyFactory . reset ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; assertTrue ( STRING , ! DummyFactory . wasPrototypeCreated ( ) ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( TestBean .class , true , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForAnnotation ( java.lang.SuppressWarnings .class ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , DummyFactory .class ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , ResolvableType . forClass ( DummyFactory .class ) ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , ResolvableType . forClassWithGenerics ( FactoryBean .class , java.lang.Object .class ) ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , ResolvableType . forClassWithGenerics ( FactoryBean .class , java.lang.String .class ) ) ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertEquals ( DummyFactory .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertTrue ( STRING , ! DummyFactory . wasPrototypeCreated ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , DummyFactory .class . java.lang.String ( ) ) ; DummyFactory . reset ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; assertTrue ( STRING , ! DummyFactory . wasPrototypeCreated ( ) ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( TestBean .class , true , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForAnnotation ( java.lang.SuppressWarnings .class ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , DummyFactory .class ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , ResolvableType . forClass ( DummyFactory .class ) ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , ResolvableType . forClassWithGenerics ( FactoryBean .class , java.lang.Object .class ) ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , ResolvableType . forClassWithGenerics ( FactoryBean .class , java.lang.String .class ) ) ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertEquals ( DummyFactory .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertTrue ( STRING , ! DummyFactory . wasPrototypeCreated ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , DummyFactory .class . java.lang.String ( ) ) ; DummyFactory . reset ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; assertTrue ( STRING , ! DummyFactory . wasPrototypeCreated ( ) ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( TestBean .class , true , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsLocalBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsLocalBean ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , DummyFactory .class ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , java.lang.Object .class ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , java.lang.Object .class ) ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertEquals ( DummyFactory .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertTrue ( STRING , ! DummyFactory . wasPrototypeCreated ( ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsLocalBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsLocalBean ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , DummyFactory .class ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , java.lang.Object .class ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , java.lang.Object .class ) ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertEquals ( DummyFactory .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) . length ) ; assertEquals ( STRING , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) [ NUMBER ] ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) . length ) ; assertEquals ( STRING , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) [ NUMBER ] ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) . length ) ; assertEquals ( STRING , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) [ NUMBER ] ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) . length ) ; assertEquals ( STRING , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestBeanFactory .class ) ; org.springframework.beans.factory.RootBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestBeanFactory . boolean = false ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( TestBean .class , true , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertEquals ( null , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestBeanFactory . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestBeanFactory .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.RootBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestBeanFactory . boolean = false ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( TestBean .class , true , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertEquals ( null , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestBeanFactory . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestBeanFactory .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestBeanFactory .class ) ; org.springframework.beans.factory.RootBeanDefinition . setFactoryBeanName ( STRING ) ; org.springframework.beans.factory.RootBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestBeanFactory . boolean = false ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( TestBean .class , true , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertEquals ( null , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestBeanFactory . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestBeanFactory .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.beans.factory.RootBeanDefinition . setFactoryBeanName ( STRING ) ; org.springframework.beans.factory.RootBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestBeanFactory . boolean = false ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( TestBean .class , true , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsLocalBean ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsLocalBean ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , java.lang.Object .class ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , java.lang.Object .class ) ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertEquals ( null , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestBeanFactory . boolean ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsLocalBean ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsLocalBean ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isPrototype ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , TestBean .class ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , java.lang.Object .class ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isTypeMatch ( STRING , java.lang.Object .class ) ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertEquals ( null , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) . length ) ; assertEquals ( STRING , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) [ NUMBER ] ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) . length ) ; assertEquals ( STRING , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) [ NUMBER ] ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) . length ) ; assertEquals ( STRING , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) [ NUMBER ] ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) . length ) ; assertEquals ( STRING , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ListableBeanFactory org.springframework.beans.factory.ListableBeanFactory = new DefaultListableBeanFactory ( ) ; assertTrue ( STRING , org.springframework.beans.factory.ListableBeanFactory . getBeanDefinitionNames ( ) != null ) ; assertTrue ( STRING , org.springframework.beans.factory.ListableBeanFactory . getBeanDefinitionNames ( ) . length == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.factory.ListableBeanFactory . getBeanDefinitionCount ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; assertTrue ( STRING , org.springframework.beans.factory.DefaultListableBeanFactory . getBeanDefinitionCount ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties , STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.DefaultListableBeanFactory . getBeanDefinitionCount ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; int int = ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; assertTrue ( STRING + int , int == NUMBER ) ; void ( org.springframework.beans.factory.DefaultListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( java.lang.String + STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( java.lang.String + STRING , STRING ) ; java.util.Properties . java.lang.Object ( java.lang.String + STRING , STRING ) ; int int = ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties , java.lang.String ) ; assertTrue ( STRING + int , int == NUMBER ) ; void ( org.springframework.beans.factory.DefaultListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( java.lang.String + STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( java.lang.String + STRING , STRING ) ; java.util.Properties . java.lang.Object ( java.lang.String + STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( java.lang.String + STRING , STRING ) ; java.util.Properties . java.lang.Object ( java.lang.String + STRING , STRING ) ; java.util.Properties . java.lang.Object ( java.lang.String + STRING , STRING ) ; int int = ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties , java.lang.String ) ; assertTrue ( STRING + int , int == NUMBER ) ; TestBean org.springframework.beans.factory.TestBean = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING , TestBean .class ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.beans.factory.TestBean . getName ( ) ) ) ; ITestBean org.springframework.beans.factory.ITestBean = org.springframework.beans.factory.TestBean . getSpouse ( ) ; assertTrue ( STRING , org.springframework.beans.factory.ITestBean != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.beans.factory.ITestBean . getName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; int int = ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; assertTrue ( STRING + int , int == NUMBER ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getBeanDefinitionCount ( ) ) ; TestBean org.springframework.beans.factory.TestBean = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING , TestBean .class ) ; assertEquals ( STRING , org.springframework.beans.factory.TestBean . getSomeMap ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; try { java.util.Properties . java.lang.Object ( java.lang.String + STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( java.lang.String + STRING , STRING ) ; java.util.Properties . java.lang.Object ( java.lang.String + STRING , STRING ) ; java.util.Properties . java.lang.Object ( java.lang.String + STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties , java.lang.String ) ; org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeansException org.springframework.beans.factory.BeansException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , new RuntimeBeanReference ( STRING ) ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.MutablePropertyValues ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.TestBean , org.springframework.beans.factory.TestBean . getSpouse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.MutablePropertyValues ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.BeanCreationException . getCause ( ) instanceof NotWritablePropertyException ) ; NotWritablePropertyException org.springframework.beans.factory.NotWritablePropertyException = ( NotWritablePropertyException ) org.springframework.beans.factory.BeanCreationException . getCause ( ) ; assertEquals ( NUMBER , org.springframework.beans.factory.NotWritablePropertyException . getPossibleMatches ( ) . length ) ; assertEquals ( STRING , org.springframework.beans.factory.NotWritablePropertyException . getPossibleMatches ( ) [ NUMBER ] ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.TestBean != null ) ; assertTrue ( STRING , org.springframework.beans.factory.TestBean == org.springframework.beans.factory.TestBean ) ; org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.TestBean != null ) ; assertTrue ( STRING , org.springframework.beans.factory.TestBean != org.springframework.beans.factory.TestBean ) ; org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.TestBean != null ) ; assertTrue ( STRING , org.springframework.beans.factory.TestBean == org.springframework.beans.factory.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.BeanCreationException . contains ( BeanCurrentlyInCreationException .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.TestBean . getName ( ) ) ; assertNotNull ( STRING , org.springframework.beans.factory.TestBean ) ; assertTrue ( STRING , org.springframework.beans.factory.TestBean == org.springframework.beans.factory.TestBean ) ; org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.TestBean != null ) ; assertTrue ( STRING , org.springframework.beans.factory.TestBean != org.springframework.beans.factory.TestBean ) ; org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.TestBean != null ) ; assertTrue ( STRING , org.springframework.beans.factory.TestBean == org.springframework.beans.factory.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.String java.lang.String = STRING ; final int int = NUMBER ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setAbstract ( true ) ; org.springframework.beans.factory.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.lang.String ) ; org.springframework.beans.factory.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , int ) ; ChildBeanDefinition org.springframework.beans.factory.ChildBeanDefinition = new ChildBeanDefinition ( STRING ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.ChildBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.TestBean . getName ( ) ) ; assertEquals ( int , org.springframework.beans.factory.TestBean . getAge ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.DefaultListableBeanFactory . getMergedBeanDefinition ( STRING ) , org.springframework.beans.factory.DefaultListableBeanFactory . getMergedBeanDefinition ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; ChildBeanDefinition org.springframework.beans.factory.ChildBeanDefinition = new ChildBeanDefinition ( STRING , DerivedTestBean .class , null , null ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.ChildBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . freezeConfiguration ( ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertEquals ( DerivedTestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; try { ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; } catch ( BeanDefinitionStoreException org.springframework.beans.factory.BeanDefinitionStoreException ) { assertEquals ( STRING , org.springframework.beans.factory.BeanDefinitionStoreException . getBeanName ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ListableBeanFactory org.springframework.beans.factory.ListableBeanFactory ) { assertTrue ( STRING , org.springframework.beans.factory.ListableBeanFactory . getBeanDefinitionCount ( ) == NUMBER ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.ListableBeanFactory . getBeanDefinitionNames ( ) ; assertTrue ( java.lang.String[] != org.springframework.beans.factory.ListableBeanFactory . getBeanDefinitionNames ( ) ) ; assertTrue ( STRING , java.lang.String[] . int == NUMBER ) ; assertTrue ( STRING , java.lang.String[] [ NUMBER ] . boolean ( STRING ) ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.ListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.TestBean != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.beans.factory.TestBean . getName ( ) ) ) ; assertTrue ( STRING , org.springframework.beans.factory.TestBean . getAge ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } try { org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( NestedTestBean .class ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) instanceof NestedTestBean ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) instanceof NestedTestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . setAllowBeanDefinitionOverriding ( false ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . removeBeanDefinition ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . removeAlias ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( NestedTestBean .class ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) instanceof NestedTestBean ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) instanceof NestedTestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . setAllowBeanDefinitionOverriding ( false ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( NestedTestBean .class ) ) ; fail ( STRING ) ; } catch ( BeanDefinitionStoreException org.springframework.beans.factory.BeanDefinitionStoreException ) { assertEquals ( STRING , org.springframework.beans.factory.BeanDefinitionStoreException . getBeanName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( NestedTestBean .class ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) instanceof NestedTestBean ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) instanceof NestedTestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( NestedTestBean .class ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( java.lang.Object , org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ) ; assertSame ( java.lang.Object , org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ) ; assertSame ( java.lang.Object , org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.TestBean . getSpouse ( ) == org.springframework.beans.factory.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING + java.lang.String ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.TestBean . getName ( ) . equals ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . addPropertyEditorRegistrar ( new PropertyEditorRegistrar ( ) { @ java.lang.Override public void void ( PropertyEditorRegistry org.springframework.beans.factory.PropertyEditorRegistry ) { java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; org.springframework.beans.factory.PropertyEditorRegistry . registerCustomEditor ( java.lang.Float .class , new CustomNumberEditor ( java.lang.Float .class , java.text.NumberFormat , true ) ) ; } } ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.MutablePropertyValues ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.TestBean . getMyFloat ( ) . floatValue ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PropertyEditorRegistry org.springframework.beans.factory.PropertyEditorRegistry ) { java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; org.springframework.beans.factory.PropertyEditorRegistry . registerCustomEditor ( java.lang.Float .class , new CustomNumberEditor ( java.lang.Float .class , java.text.NumberFormat , true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; GenericConversionService org.springframework.beans.factory.GenericConversionService = new DefaultConversionService ( ) ; org.springframework.beans.factory.GenericConversionService . addConverter ( new Converter < java.lang.String , java.lang.Float > ( ) { @ java.lang.Override public java.lang.Float java.lang.Float ( java.lang.String java.lang.String ) { try { java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; return java.text.NumberFormat . java.lang.Number ( java.lang.String ) . float ( ) ; } catch ( java.text.ParseException java.text.ParseException ) { throw new java.lang.IllegalArgumentException ( java.text.ParseException ) ; } } } ) ; org.springframework.beans.factory.DefaultListableBeanFactory . setConversionService ( org.springframework.beans.factory.GenericConversionService ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.MutablePropertyValues ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.TestBean . getMyFloat ( ) . floatValue ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Float java.lang.Float ( java.lang.String java.lang.String ) { try { java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; return java.text.NumberFormat . java.lang.Number ( java.lang.String ) . float ( ) ; } catch ( java.text.ParseException java.text.ParseException ) { throw new java.lang.IllegalArgumentException ( java.text.ParseException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . addPropertyEditorRegistrar ( new PropertyEditorRegistrar ( ) { @ java.lang.Override public void void ( PropertyEditorRegistry org.springframework.beans.factory.PropertyEditorRegistry ) { java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; org.springframework.beans.factory.PropertyEditorRegistry . registerCustomEditor ( java.lang.Float .class , new CustomNumberEditor ( java.lang.Float .class , java.text.NumberFormat , true ) ) ; } } ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , new RuntimeBeanReference ( STRING ) ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.MutablePropertyValues ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , STRING ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.TestBean . getMyFloat ( ) . floatValue ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PropertyEditorRegistry org.springframework.beans.factory.PropertyEditorRegistry ) { java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; org.springframework.beans.factory.PropertyEditorRegistry . registerCustomEditor ( java.lang.Float .class , new CustomNumberEditor ( java.lang.Float .class , java.text.NumberFormat , true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; org.springframework.beans.factory.DefaultListableBeanFactory . setTypeConverter ( new org.springframework.beans.factory.DefaultListableBeanFactoryTests.CustomTypeConverter ( java.text.NumberFormat ) ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , STRING ) ; ConstructorArgumentValues org.springframework.beans.factory.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , STRING ) ; org.springframework.beans.factory.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class , org.springframework.beans.factory.ConstructorArgumentValues , org.springframework.beans.factory.MutablePropertyValues ) ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.TestBean . getAge ( ) ) ; assertTrue ( org.springframework.beans.factory.TestBean . getMyFloat ( ) . floatValue ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; org.springframework.beans.factory.DefaultListableBeanFactory . setTypeConverter ( new org.springframework.beans.factory.DefaultListableBeanFactoryTests.CustomTypeConverter ( java.text.NumberFormat ) ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , new RuntimeBeanReference ( STRING ) ) ; ConstructorArgumentValues org.springframework.beans.factory.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , STRING ) ; org.springframework.beans.factory.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class , org.springframework.beans.factory.ConstructorArgumentValues , org.springframework.beans.factory.MutablePropertyValues ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , STRING ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.TestBean . getAge ( ) ) ; assertTrue ( org.springframework.beans.factory.TestBean . getMyFloat ( ) . floatValue ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; java.lang.Object java.lang.Object = new TestBean ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , java.lang.Object ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( java.lang.Object , org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ) ; assertEquals ( java.lang.Object , org.springframework.beans.factory.TestBean . getSpouse ( ) ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.beans.factory.DefaultListableBeanFactory . getBeansOfType ( TestBean .class , false , true ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; assertTrue ( java.util.Map<,> . boolean ( org.springframework.beans.factory.TestBean ) ) ; assertTrue ( java.util.Map<,> . boolean ( java.lang.Object ) ) ; java.util.Map<?,?> = org.springframework.beans.factory.DefaultListableBeanFactory . getBeansOfType ( null , false , true ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesIterator ( ) ; assertEquals ( STRING , java.util.Iterator<java.lang.String> . java.lang.String ( ) ) ; assertEquals ( STRING , java.util.Iterator<java.lang.String> . java.lang.String ( ) ) ; assertFalse ( java.util.Iterator<java.lang.String> . boolean ( ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBeanDefinition ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBeanDefinition ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , TestBean .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; ( new PropertiesBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) ) . registerBeanDefinitions ( java.util.Properties ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( PropertiesFactoryBean .class ) ) ; java.lang.Object java.lang.Object = new TestBean ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , java.lang.Object ) ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( java.lang.Object , org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ) ; assertEquals ( java.lang.Object , org.springframework.beans.factory.TestBean . getSpouse ( ) ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.beans.factory.DefaultListableBeanFactory . getBeansOfType ( TestBean .class , false , true ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; assertTrue ( java.util.Map<,> . boolean ( org.springframework.beans.factory.TestBean ) ) ; assertTrue ( java.util.Map<,> . boolean ( java.lang.Object ) ) ; java.util.Map<?,?> = org.springframework.beans.factory.DefaultListableBeanFactory . getBeansOfType ( null , false , true ) ; java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesIterator ( ) ; assertEquals ( STRING , java.util.Iterator<java.lang.String> . java.lang.String ( ) ) ; assertEquals ( STRING , java.util.Iterator<java.lang.String> . java.lang.String ( ) ) ; assertFalse ( java.util.Iterator<java.lang.String> . boolean ( ) ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBeanDefinition ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBeanDefinition ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( DependenciesBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.MutablePropertyValues ) ; org.springframework.beans.factory.RootBeanDefinition . setDependencyCheck ( RootBeanDefinition . DEPENDENCY_CHECK_OBJECTS ) ; org.springframework.beans.factory.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_BY_TYPE ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; java.lang.Object java.lang.Object = new TestBean ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , java.lang.Object ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getAliases ( STRING ) . length ) ; DependenciesBean org.springframework.beans.factory.DependenciesBean = ( DependenciesBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( java.lang.Object , org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ) ; assertEquals ( java.lang.Object , org.springframework.beans.factory.DependenciesBean . getSpouse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.lang.Object java.lang.Object = new TestBean ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , java.lang.Object ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , java.lang.Object ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) instanceof TestBean ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( NestedTestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) instanceof NestedTestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , new UrlResource ( STRING ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , new UrlResource ( STRING ) ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_BY_TYPE ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean = ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean . org.springframework.beans.factory.Resource[] ( ) [ NUMBER ] ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean . org.springframework.beans.factory.Resource[] ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_BY_TYPE ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean = ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertNull ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean . org.springframework.beans.factory.Resource[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , new java.lang.Integer ( NUMBER ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , new java.lang.Integer ( NUMBER ) ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean = ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean . java.lang.Integer[] ( ) [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean . java.lang.Integer[] ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean = ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertNull ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean . java.lang.Integer[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , new java.lang.Integer ( NUMBER ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , new java.lang.Integer ( NUMBER ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , new UrlResource ( STRING ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , new UrlResource ( STRING ) ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean = ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean . java.lang.Integer[] ( ) [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean . java.lang.Integer[] ( ) [ NUMBER ] ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean . org.springframework.beans.factory.Resource[] ( ) [ NUMBER ] ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean . org.springframework.beans.factory.Resource[] ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , new UrlResource ( STRING ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , new UrlResource ( STRING ) ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean = ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertNull ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean . java.lang.Integer[] ( ) ) ; assertNull ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ArrayBean . org.springframework.beans.factory.Resource[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; BeanExpressionResolver org.springframework.beans.factory.BeanExpressionResolver = mock ( BeanExpressionResolver .class ) ; when ( org.springframework.beans.factory.BeanExpressionResolver . evaluate ( eq ( STRING ) , ArgumentMatchers . any ( BeanExpressionContext .class ) ) ) . thenReturn ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . setBeanExpressionResolver ( org.springframework.beans.factory.BeanExpressionResolver ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( PropertiesFactoryBean .class ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , new java.lang.String [] { STRING } ) ; org.springframework.beans.factory.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.MutablePropertyValues ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; java.util.Properties java.util.Properties = ( java.util.Properties ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getBeanDefinitionCount ( ) ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.NoDependencies .class , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , false ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getBeanDefinitionCount ( ) ) ; assertTrue ( java.lang.Object instanceof org.springframework.beans.factory.DefaultListableBeanFactoryTests.NoDependencies ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.MutablePropertyValues ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getBeanDefinitionCount ( ) ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( DependenciesBean .class , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , true ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getBeanDefinitionCount ( ) ) ; DependenciesBean org.springframework.beans.factory.DependenciesBean = ( DependenciesBean ) java.lang.Object ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.TestBean , org.springframework.beans.factory.DependenciesBean . getSpouse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.MutablePropertyValues ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getBeanDefinitionCount ( ) ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency .class , AutowireCapableBeanFactory . AUTOWIRE_CONSTRUCTOR , false ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getBeanDefinitionCount ( ) ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency = ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency ) java.lang.Object ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.TestBean , org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency . org.springframework.beans.factory.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency .class , AutowireCapableBeanFactory . AUTOWIRE_CONSTRUCTOR , false ) ; fail ( STRING ) ; } catch ( UnsatisfiedDependencyException org.springframework.beans.factory.UnsatisfiedDependencyException ) { assertTrue ( org.springframework.beans.factory.UnsatisfiedDependencyException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.UnsatisfiedDependencyException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , STRING ) ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.MutablePropertyValues ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getBeanDefinitionCount ( ) ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.UnsatisfiedConstructorDependency .class , AutowireCapableBeanFactory . AUTOWIRE_CONSTRUCTOR , true ) ; fail ( STRING ) ; } catch ( UnsatisfiedDependencyException org.springframework.beans.factory.UnsatisfiedDependencyException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; ConstructorDependenciesBean org.springframework.beans.factory.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( ConstructorDependenciesBean .class , AutowireCapableBeanFactory . AUTOWIRE_CONSTRUCTOR , true ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.ConstructorDependenciesBean . getSpouse1 ( ) == java.lang.Object ) ; assertTrue ( BeanFactoryUtils . beanOfType ( org.springframework.beans.factory.DefaultListableBeanFactory , TestBean .class ) == java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; DependenciesBean org.springframework.beans.factory.DependenciesBean = ( DependenciesBean ) org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( DependenciesBean .class , AutowireCapableBeanFactory . AUTOWIRE_BY_NAME , true ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.TestBean , org.springframework.beans.factory.DependenciesBean . getSpouse ( ) ) ; assertTrue ( BeanFactoryUtils . beanOfType ( org.springframework.beans.factory.DefaultListableBeanFactory , TestBean .class ) == org.springframework.beans.factory.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( DependenciesBean .class , AutowireCapableBeanFactory . AUTOWIRE_BY_NAME , true ) ; fail ( STRING ) ; } catch ( UnsatisfiedDependencyException org.springframework.beans.factory.UnsatisfiedDependencyException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; DependenciesBean org.springframework.beans.factory.DependenciesBean = ( DependenciesBean ) org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( DependenciesBean .class , AutowireCapableBeanFactory . AUTOWIRE_BY_NAME , false ) ; assertNull ( org.springframework.beans.factory.DependenciesBean . getSpouse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setDependsOn ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setDependsOn ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setDependsOn ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setDependsOn ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setDependsOn ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = NoSuchBeanDefinitionException .class ) public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( TestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( org.springframework.beans.factory.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.TestBean = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( TestBean .class ) ; assertThat ( org.springframework.beans.factory.TestBean . getBeanName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NoUniqueBeanDefinitionException .class ) public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( TestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setLazyInit ( true ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPrimary ( true ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.TestBean = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( TestBean .class ) ; assertThat ( org.springframework.beans.factory.TestBean . getBeanName ( ) , equalTo ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPrimary ( true ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPrimary ( true ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.ExpectedException . expect ( NoUniqueBeanDefinitionException .class ) ; org.springframework.beans.factory.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( TestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . setDependencyComparator ( AnnotationAwareOrderComparator . INSTANCE ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.HighPriorityTestBean .class ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.LowPriorityTestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.TestBean = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( TestBean .class ) ; assertThat ( org.springframework.beans.factory.TestBean . getBeanName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . setDependencyComparator ( AnnotationAwareOrderComparator . INSTANCE ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.HighPriorityTestBean .class ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.HighPriorityTestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.ExpectedException . expect ( NoUniqueBeanDefinitionException .class ) ; org.springframework.beans.factory.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.beans.factory.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( TestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . setDependencyComparator ( AnnotationAwareOrderComparator . INSTANCE ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.HighPriorityTestBean .class ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.NullTestBeanFactoryBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.TestBean = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( TestBean .class ) ; assertThat ( org.springframework.beans.factory.TestBean . getBeanName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . setDependencyComparator ( AnnotationAwareOrderComparator . INSTANCE ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.HighPriorityTestBean .class ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPrimary ( true ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.TestBean = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( TestBean .class ) ; assertThat ( org.springframework.beans.factory.TestBean . getBeanName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setAutowireCandidate ( false ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.TestBean = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( TestBean .class ) ; assertSame ( org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING , TestBean .class ) , org.springframework.beans.factory.TestBean ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( TestBean .class ) ; fail ( STRING ) ; } catch ( NoSuchBeanDefinitionException org.springframework.beans.factory.NoSuchBeanDefinitionException ) { } }  <METHOD_END>
<METHOD_START> @ Test ( expected = NoSuchBeanDefinitionException .class ) public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency .class , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = org.springframework.beans.factory.RootBeanDefinition ( NUMBER ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( org.springframework.beans.factory.DefaultListableBeanFactory ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency .class , NUMBER ) ; assertThat ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency . java.lang.String , equalTo ( STRING ) ) ; assertThat ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency . int , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = org.springframework.beans.factory.RootBeanDefinition ( NUMBER ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.ExpectedException . expect ( NoUniqueBeanDefinitionException .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency .class , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = org.springframework.beans.factory.RootBeanDefinition ( NUMBER ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = org.springframework.beans.factory.RootBeanDefinition ( NUMBER ) ; org.springframework.beans.factory.RootBeanDefinition . setPrimary ( true ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency .class , NUMBER ) ; assertThat ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency . java.lang.String , equalTo ( STRING ) ) ; assertThat ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency . int , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = org.springframework.beans.factory.RootBeanDefinition ( NUMBER ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = org.springframework.beans.factory.RootBeanDefinition ( NUMBER ) ; org.springframework.beans.factory.RootBeanDefinition . setPrimary ( true ) ; org.springframework.beans.factory.RootBeanDefinition . setPrimary ( true ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.ExpectedException . expect ( NoUniqueBeanDefinitionException .class ) ; org.springframework.beans.factory.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency .class , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = org.springframework.beans.factory.RootBeanDefinition ( NUMBER ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = org.springframework.beans.factory.RootBeanDefinition ( NUMBER ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = org.springframework.beans.factory.RootBeanDefinition ( NUMBER ) ; org.springframework.beans.factory.RootBeanDefinition . setAutowireCandidate ( false ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency .class , NUMBER ) ; assertThat ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency . java.lang.String , equalTo ( STRING ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( TestBean .class , NUMBER ) ; fail ( STRING ) ; } catch ( NoSuchBeanDefinitionException org.springframework.beans.factory.NoSuchBeanDefinitionException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependencyFactoryBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency .class , NUMBER ) ; assertThat ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency . java.lang.String , equalTo ( STRING ) ) ; assertThat ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency . int , equalTo ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency .class ) . length ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependencyFactoryBean .class ) . length ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( ResolvableType . forClassWithGenerics ( FactoryBean .class , java.lang.Object .class ) ) . length ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( ResolvableType . forClassWithGenerics ( FactoryBean .class , java.lang.String .class ) ) . length ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.beans.factory.RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition ( int int ) { RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependency .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.lang.String . java.lang.String ( int ) ) ; return org.springframework.beans.factory.RootBeanDefinition ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; DependenciesBean org.springframework.beans.factory.DependenciesBean = ( DependenciesBean ) org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( DependenciesBean .class , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , true ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.TestBean , org.springframework.beans.factory.DependenciesBean . getSpouse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.LazyInitFactory .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.LazyInitFactory org.springframework.beans.factory.DefaultListableBeanFactoryTests.LazyInitFactory = ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.LazyInitFactory ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( STRING , org.springframework.beans.factory.DefaultListableBeanFactoryTests.LazyInitFactory ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.FactoryBeanDependentBean org.springframework.beans.factory.DefaultListableBeanFactoryTests.FactoryBeanDependentBean = ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.FactoryBeanDependentBean ) org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.FactoryBeanDependentBean .class , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , true ) ; assertEquals ( STRING , org.springframework.beans.factory.DefaultListableBeanFactoryTests.LazyInitFactory , org.springframework.beans.factory.DefaultListableBeanFactoryTests.FactoryBeanDependentBean . org.springframework.beans.factory.FactoryBean<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.FactoryBeanThatShouldntBeCalled .class ) ; org.springframework.beans.factory.RootBeanDefinition . setAbstract ( true ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; assertNull ( org.springframework.beans.factory.DefaultListableBeanFactory . getType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.FactoryBeanThatShouldntBeCalled .class ) ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( java.lang.Runnable .class , false , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( java.util.concurrent.Callable .class , false , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.RepositoryFactoryInformation .class , false , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( FactoryBean .class , false , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.FactoryBeanThatShouldntBeCalled .class ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( java.lang.Runnable .class , false , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( java.util.concurrent.Callable .class , false , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.RepositoryFactoryInformation .class , false , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; java.lang.String[] = org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( FactoryBean .class , false , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = TypeMismatchException .class ) public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.LazyInitFactory .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.LazyInitFactory org.springframework.beans.factory.DefaultListableBeanFactoryTests.LazyInitFactory = ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.LazyInitFactory ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( STRING , org.springframework.beans.factory.DefaultListableBeanFactoryTests.LazyInitFactory ) ; org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.FactoryBeanDependentBean .class , AutowireCapableBeanFactory . AUTOWIRE_BY_NAME , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( DependenciesBean .class , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , true ) ; fail ( STRING ) ; } catch ( UnsatisfiedDependencyException org.springframework.beans.factory.UnsatisfiedDependencyException ) { assertTrue ( org.springframework.beans.factory.UnsatisfiedDependencyException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.UnsatisfiedDependencyException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( DependenciesBean .class , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , true ) ; fail ( STRING ) ; } catch ( UnsatisfiedDependencyException org.springframework.beans.factory.UnsatisfiedDependencyException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; DependenciesBean org.springframework.beans.factory.DependenciesBean = ( DependenciesBean ) org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( DependenciesBean .class , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , false ) ; assertNull ( org.springframework.beans.factory.DependenciesBean . getSpouse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPrimary ( true ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; DependenciesBean org.springframework.beans.factory.DependenciesBean = ( DependenciesBean ) org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( DependenciesBean .class , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , true ) ; assertThat ( org.springframework.beans.factory.DependenciesBean . getSpouse ( ) , equalTo ( org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPrimary ( true ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPrimary ( true ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( DependenciesBean .class , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , true ) ; fail ( STRING ) ; } catch ( UnsatisfiedDependencyException org.springframework.beans.factory.UnsatisfiedDependencyException ) { assertNotNull ( STRING , org.springframework.beans.factory.UnsatisfiedDependencyException . getCause ( ) ) ; assertEquals ( STRING , NoUniqueBeanDefinitionException .class , org.springframework.beans.factory.UnsatisfiedDependencyException . getCause ( ) . getClass ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . setDependencyComparator ( AnnotationAwareOrderComparator . INSTANCE ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.HighPriorityTestBean .class ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.LowPriorityTestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; DependenciesBean org.springframework.beans.factory.DependenciesBean = ( DependenciesBean ) org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( DependenciesBean .class , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , true ) ; assertThat ( org.springframework.beans.factory.DependenciesBean . getSpouse ( ) , equalTo ( org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . setDependencyComparator ( AnnotationAwareOrderComparator . INSTANCE ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.HighPriorityTestBean .class ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.HighPriorityTestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( DependenciesBean .class , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , true ) ; fail ( STRING ) ; } catch ( UnsatisfiedDependencyException org.springframework.beans.factory.UnsatisfiedDependencyException ) { assertNotNull ( STRING , org.springframework.beans.factory.UnsatisfiedDependencyException . getCause ( ) ) ; assertEquals ( STRING , NoUniqueBeanDefinitionException .class , org.springframework.beans.factory.UnsatisfiedDependencyException . getCause ( ) . getClass ( ) ) ; assertTrue ( org.springframework.beans.factory.UnsatisfiedDependencyException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . setDependencyComparator ( AnnotationAwareOrderComparator . INSTANCE ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.HighPriorityTestBean .class ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPrimary ( true ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; DependenciesBean org.springframework.beans.factory.DependenciesBean = ( DependenciesBean ) org.springframework.beans.factory.DefaultListableBeanFactory . autowire ( DependenciesBean .class , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , true ) ; assertThat ( org.springframework.beans.factory.DependenciesBean . getSpouse ( ) , equalTo ( org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; DependenciesBean org.springframework.beans.factory.DependenciesBean = new DependenciesBean ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . autowireBeanProperties ( org.springframework.beans.factory.DependenciesBean , AutowireCapableBeanFactory . AUTOWIRE_BY_NAME , true ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.DependenciesBean . getSpouse ( ) , org.springframework.beans.factory.TestBean ) ; assertSame ( org.springframework.beans.factory.TestBean , BeanFactoryUtils . beanOfType ( org.springframework.beans.factory.DefaultListableBeanFactory , TestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; DependenciesBean org.springframework.beans.factory.DependenciesBean = new DependenciesBean ( ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . autowireBeanProperties ( org.springframework.beans.factory.DependenciesBean , AutowireCapableBeanFactory . AUTOWIRE_BY_NAME , true ) ; fail ( STRING ) ; } catch ( UnsatisfiedDependencyException org.springframework.beans.factory.UnsatisfiedDependencyException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; DependenciesBean org.springframework.beans.factory.DependenciesBean = new DependenciesBean ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . autowireBeanProperties ( org.springframework.beans.factory.DependenciesBean , AutowireCapableBeanFactory . AUTOWIRE_BY_NAME , false ) ; assertNull ( org.springframework.beans.factory.DependenciesBean . getSpouse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; DependenciesBean org.springframework.beans.factory.DependenciesBean = new DependenciesBean ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . autowireBeanProperties ( org.springframework.beans.factory.DependenciesBean , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , true ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.DependenciesBean . getSpouse ( ) , org.springframework.beans.factory.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; DependenciesBean org.springframework.beans.factory.DependenciesBean = new DependenciesBean ( ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . autowireBeanProperties ( org.springframework.beans.factory.DependenciesBean , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , true ) ; fail ( STRING ) ; } catch ( UnsatisfiedDependencyException org.springframework.beans.factory.UnsatisfiedDependencyException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; DependenciesBean org.springframework.beans.factory.DependenciesBean = new DependenciesBean ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . autowireBeanProperties ( org.springframework.beans.factory.DependenciesBean , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , false ) ; assertNull ( org.springframework.beans.factory.DependenciesBean . getSpouse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . autowireBeanProperties ( new TestBean ( ) , AutowireCapableBeanFactory . AUTOWIRE_CONSTRUCTOR , false ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.MutablePropertyValues ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.TestBean = new TestBean ( ) ; assertEquals ( NUMBER , org.springframework.beans.factory.TestBean . getAge ( ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . applyBeanPropertyValues ( org.springframework.beans.factory.TestBean , STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.beans.factory.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.MutablePropertyValues ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.TestBean = new TestBean ( ) ; assertEquals ( NUMBER , org.springframework.beans.factory.TestBean . getAge ( ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . applyBeanPropertyValues ( org.springframework.beans.factory.TestBean , STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.TestBean . getAge ( ) ) ; assertNull ( org.springframework.beans.factory.TestBean . getBeanFactory ( ) ) ; assertNull ( org.springframework.beans.factory.TestBean . getSpouse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; TestBean org.springframework.beans.factory.TestBean = org.springframework.beans.factory.DefaultListableBeanFactory . createBean ( TestBean .class ) ; assertSame ( org.springframework.beans.factory.DefaultListableBeanFactory , org.springframework.beans.factory.TestBean . getBeanFactory ( ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . destroyBean ( org.springframework.beans.factory.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; DerivedTestBean org.springframework.beans.factory.DerivedTestBean = org.springframework.beans.factory.DefaultListableBeanFactory . createBean ( DerivedTestBean .class ) ; assertSame ( org.springframework.beans.factory.DefaultListableBeanFactory , org.springframework.beans.factory.DerivedTestBean . getBeanFactory ( ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . destroyBean ( org.springframework.beans.factory.DerivedTestBean ) ; assertTrue ( org.springframework.beans.factory.DerivedTestBean . wasDestroyed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.MutablePropertyValues ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.TestBean = new TestBean ( ) ; assertEquals ( NUMBER , org.springframework.beans.factory.TestBean . getAge ( ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . configureBean ( org.springframework.beans.factory.TestBean , STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.TestBean . getAge ( ) ) ; assertSame ( org.springframework.beans.factory.DefaultListableBeanFactory , org.springframework.beans.factory.TestBean . getBeanFactory ( ) ) ; assertNull ( org.springframework.beans.factory.TestBean . getSpouse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_BY_NAME ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.TestBean = new TestBean ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . configureBean ( org.springframework.beans.factory.TestBean , STRING ) ; assertSame ( org.springframework.beans.factory.DefaultListableBeanFactory , org.springframework.beans.factory.TestBean . getBeanFactory ( ) ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.TestBean , org.springframework.beans.factory.TestBean . getSpouse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , new RuntimeBeanReference ( STRING + ( int < NUMBER ? int + NUMBER : NUMBER ) ) ) ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.MutablePropertyValues ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING + int , org.springframework.beans.factory.RootBeanDefinition ) ; } org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING + int ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING + ( int < NUMBER ? int + NUMBER : NUMBER ) ) ; assertTrue ( org.springframework.beans.factory.TestBean . getSpouse ( ) == org.springframework.beans.factory.TestBean ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependencyBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; fail ( STRING ) ; } catch ( UnsatisfiedDependencyException org.springframework.beans.factory.UnsatisfiedDependencyException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependencyFactoryBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; fail ( STRING ) ; } catch ( UnsatisfiedDependencyException org.springframework.beans.factory.UnsatisfiedDependencyException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependencyFactoryBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . getBeansOfType ( java.lang.String .class ) ; fail ( STRING ) ; } catch ( UnsatisfiedDependencyException org.springframework.beans.factory.UnsatisfiedDependencyException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependencyFactoryBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( java.lang.String .class ) ; org.springframework.beans.factory.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependencyWithClassResolution .class ) ; org.springframework.beans.factory.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependencyWithClassResolution .class ) ; org.springframework.beans.factory.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; fail ( STRING ) ; } catch ( UnsatisfiedDependencyException org.springframework.beans.factory.UnsatisfiedDependencyException ) { assertTrue ( org.springframework.beans.factory.UnsatisfiedDependencyException . toString ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( ITestBean .class ) ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.BeanCreationException ) { assertEquals ( STRING , org.springframework.beans.factory.BeanCreationException . getBeanName ( ) ) ; assertTrue ( org.springframework.beans.factory.BeanCreationException . getMessage ( ) . toLowerCase ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( AbstractBeanFactory .class ) ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.BeanCreationException ) { assertEquals ( STRING , org.springframework.beans.factory.BeanCreationException . getBeanName ( ) ) ; assertTrue ( org.springframework.beans.factory.BeanCreationException . getMessage ( ) . toLowerCase ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.FactoryBeanThatShouldntBeCalled .class ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.LazyInitFactory .class ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.LazyInitFactory org.springframework.beans.factory.DefaultListableBeanFactoryTests.LazyInitFactory = ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.LazyInitFactory ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.LazyInitFactory . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.EagerInitFactory .class ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.EagerInitFactory org.springframework.beans.factory.DefaultListableBeanFactoryTests.EagerInitFactory = ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.EagerInitFactory ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.EagerInitFactory . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.FactoryBeanThatShouldntBeCalled .class . java.lang.String ( ) , null , null ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( java.lang.String .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( new TypedStringValue ( STRING ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; java.lang.String java.lang.String = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING , java.lang.String .class ) ; java.lang.String java.lang.String = org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; assertNotSame ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new ManagedList <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( DerivedTestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.List<java.lang.String> ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; DerivedTestBean org.springframework.beans.factory.DerivedTestBean = ( DerivedTestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.DerivedTestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.DerivedTestBean . getBeanName ( ) ) ; DerivedTestBean org.springframework.beans.factory.DerivedTestBean = ( DerivedTestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.DerivedTestBean != org.springframework.beans.factory.DerivedTestBean ) ; assertEquals ( STRING , org.springframework.beans.factory.DerivedTestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.DerivedTestBean . getBeanName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new ManagedList <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( DerivedTestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.RootBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.beans.factory.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.List<java.lang.String> ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; DerivedTestBean org.springframework.beans.factory.DerivedTestBean = ( DerivedTestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.DerivedTestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.DerivedTestBean . getBeanName ( ) ) ; DerivedTestBean org.springframework.beans.factory.DerivedTestBean = ( DerivedTestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.DerivedTestBean != org.springframework.beans.factory.DerivedTestBean ) ; assertEquals ( STRING , org.springframework.beans.factory.DerivedTestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.DerivedTestBean . getBeanName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assume . group ( TestGroup . PERFORMANCE ) ; Assume . notLogging ( org.springframework.beans.factory.Log ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; StopWatch org.springframework.beans.factory.StopWatch = new StopWatch ( ) ; org.springframework.beans.factory.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; } org.springframework.beans.factory.StopWatch . stop ( ) ; assertTrue ( STRING + org.springframework.beans.factory.StopWatch . getTotalTimeMillis ( ) , org.springframework.beans.factory.StopWatch . getTotalTimeMillis ( ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assume . group ( TestGroup . PERFORMANCE ) ; Assume . notLogging ( org.springframework.beans.factory.Log ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( LifecycleBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.RootBeanDefinition . setDependencyCheck ( RootBeanDefinition . DEPENDENCY_CHECK_OBJECTS ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . addBeanPostProcessor ( new LifecycleBean . LifecycleBean ( ) ) ; StopWatch org.springframework.beans.factory.StopWatch = new StopWatch ( ) ; org.springframework.beans.factory.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; } org.springframework.beans.factory.StopWatch . stop ( ) ; assertTrue ( STRING + org.springframework.beans.factory.StopWatch . getTotalTimeMillis ( ) , org.springframework.beans.factory.StopWatch . getTotalTimeMillis ( ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { Assume . group ( TestGroup . PERFORMANCE ) ; Assume . notLogging ( org.springframework.beans.factory.Log ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( STRING ) ; org.springframework.beans.factory.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; StopWatch org.springframework.beans.factory.StopWatch = new StopWatch ( ) ; org.springframework.beans.factory.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.TestBean . getAge ( ) ) ; } org.springframework.beans.factory.StopWatch . stop ( ) ; assertTrue ( STRING + org.springframework.beans.factory.StopWatch . getTotalTimeMillis ( ) , org.springframework.beans.factory.StopWatch . getTotalTimeMillis ( ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assume . group ( TestGroup . PERFORMANCE ) ; Assume . notLogging ( org.springframework.beans.factory.Log ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( new RuntimeBeanReference ( STRING ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; StopWatch org.springframework.beans.factory.StopWatch = new StopWatch ( ) ; org.springframework.beans.factory.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.TestBean , org.springframework.beans.factory.TestBean . getSpouse ( ) ) ; } org.springframework.beans.factory.StopWatch . stop ( ) ; assertTrue ( STRING + org.springframework.beans.factory.StopWatch . getTotalTimeMillis ( ) , org.springframework.beans.factory.StopWatch . getTotalTimeMillis ( ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assume . group ( TestGroup . PERFORMANCE ) ; Assume . notLogging ( org.springframework.beans.factory.Log ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.beans.factory.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; StopWatch org.springframework.beans.factory.StopWatch = new StopWatch ( ) ; org.springframework.beans.factory.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.TestBean . getAge ( ) ) ; } org.springframework.beans.factory.StopWatch . stop ( ) ; assertTrue ( STRING + org.springframework.beans.factory.StopWatch . getTotalTimeMillis ( ) , org.springframework.beans.factory.StopWatch . getTotalTimeMillis ( ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assume . group ( TestGroup . PERFORMANCE ) ; Assume . notLogging ( org.springframework.beans.factory.Log ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new RuntimeBeanReference ( STRING ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; StopWatch org.springframework.beans.factory.StopWatch = new StopWatch ( ) ; org.springframework.beans.factory.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.TestBean , org.springframework.beans.factory.TestBean . getSpouse ( ) ) ; } org.springframework.beans.factory.StopWatch . stop ( ) ; assertTrue ( STRING + org.springframework.beans.factory.StopWatch . getTotalTimeMillis ( ) , org.springframework.beans.factory.StopWatch . getTotalTimeMillis ( ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDisposableBean .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . addBeanPostProcessor ( new BeanPostProcessor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return new TestBean ( ) ; } @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.Object ; } } ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDisposableBean . boolean = false ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( STRING , org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDisposableBean . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithCloseable .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . addBeanPostProcessor ( new BeanPostProcessor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return new TestBean ( ) ; } @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.Object ; } } ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDisposableBean . boolean = false ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( STRING , org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithCloseable . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod .class ) ; org.springframework.beans.factory.RootBeanDefinition . setDestroyMethodName ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . addBeanPostProcessor ( new BeanPostProcessor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return new TestBean ( ) ; } @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.Object ; } } ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod . int = NUMBER ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . destroySingletons ( ) ; assertEquals ( STRING , NUMBER , org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod .class ) ; org.springframework.beans.factory.RootBeanDefinition . setDestroyMethodName ( STRING ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod .class ) ; org.springframework.beans.factory.RootBeanDefinition . setDestroyMethodName ( STRING ) ; org.springframework.beans.factory.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod . int = NUMBER ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . destroySingletons ( ) ; assertEquals ( STRING , NUMBER , org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.RootBeanDefinition . setDestroyMethodName ( STRING ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod .class ) ; org.springframework.beans.factory.RootBeanDefinition . setDestroyMethodName ( STRING ) ; org.springframework.beans.factory.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod . int = NUMBER ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . destroySingletons ( ) ; assertEquals ( STRING , NUMBER , org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( false ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithFactoryMethod .class ) ; MutablePropertyValues org.springframework.beans.factory.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.MutablePropertyValues . add ( STRING , java.lang.String ) ; org.springframework.beans.factory.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.MutablePropertyValues ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.beans.factory.RootBeanDefinition . setFactoryBeanName ( STRING ) ; org.springframework.beans.factory.RootBeanDefinition . setFactoryMethodName ( STRING ) ; if ( ! boolean ) { org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; } org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.beans.factory.RootBeanDefinition . setFactoryBeanName ( STRING ) ; org.springframework.beans.factory.RootBeanDefinition . setFactoryMethodName ( STRING ) ; if ( ! boolean ) { org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; } org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.beans.factory.RootBeanDefinition . setFactoryBeanName ( STRING ) ; org.springframework.beans.factory.RootBeanDefinition . setFactoryMethodName ( STRING ) ; ConstructorArgumentValues org.springframework.beans.factory.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; org.springframework.beans.factory.RootBeanDefinition . setConstructorArgumentValues ( org.springframework.beans.factory.ConstructorArgumentValues ) ; if ( ! boolean ) { org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; } org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; assertEquals ( NUMBER , org.springframework.beans.factory.DefaultListableBeanFactory . getBeanDefinitionCount ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( TestBean .class ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; if ( boolean ) { assertSame ( org.springframework.beans.factory.TestBean , org.springframework.beans.factory.TestBean ) ; } else { assertNotSame ( org.springframework.beans.factory.TestBean , org.springframework.beans.factory.TestBean ) ; } assertEquals ( java.lang.String , org.springframework.beans.factory.TestBean . getName ( ) ) ; org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; if ( boolean ) { assertSame ( org.springframework.beans.factory.TestBean , org.springframework.beans.factory.TestBean ) ; } else { assertNotSame ( org.springframework.beans.factory.TestBean , org.springframework.beans.factory.TestBean ) ; } assertEquals ( java.lang.String , org.springframework.beans.factory.TestBean . getName ( ) ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; if ( boolean ) { assertSame ( org.springframework.beans.factory.TestBean , org.springframework.beans.factory.TestBean ) ; } else { assertNotSame ( org.springframework.beans.factory.TestBean , org.springframework.beans.factory.TestBean ) ; } assertEquals ( java.lang.String , org.springframework.beans.factory.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { BeanDefinitionBuilder org.springframework.beans.factory.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( TestBean .class ) ; AbstractBeanDefinition org.springframework.beans.factory.AbstractBeanDefinition = org.springframework.beans.factory.BeanDefinitionBuilder . getBeanDefinition ( ) ; org.springframework.beans.factory.AbstractBeanDefinition . setScope ( STRING ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.AbstractBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; AbstractBeanDefinition org.springframework.beans.factory.AbstractBeanDefinition = BeanDefinitionBuilder . childBeanDefinition ( STRING ) . getBeanDefinition ( ) ; org.springframework.beans.factory.AbstractBeanDefinition . setBeanClass ( TestBean .class ) ; org.springframework.beans.factory.AbstractBeanDefinition . setScope ( java.lang.String ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.AbstractBeanDefinition ) ; AbstractBeanDefinition org.springframework.beans.factory.AbstractBeanDefinition = ( AbstractBeanDefinition ) org.springframework.beans.factory.DefaultListableBeanFactory . getBeanDefinition ( STRING ) ; assertEquals ( STRING , java.lang.String , org.springframework.beans.factory.AbstractBeanDefinition . getScope ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( STRING ) ; AbstractBeanDefinition org.springframework.beans.factory.AbstractBeanDefinition = new ChildBeanDefinition ( STRING ) ; org.springframework.beans.factory.AbstractBeanDefinition . setBeanClass ( TestBean .class ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.AbstractBeanDefinition ) ; BeanDefinition org.springframework.beans.factory.BeanDefinition = org.springframework.beans.factory.DefaultListableBeanFactory . getMergedBeanDefinition ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.beans.factory.BeanDefinition . getScope ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> private void void ( final boolean boolean ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; int int = NUMBER ; org.springframework.beans.factory.RootBeanDefinition . getPropertyValues ( ) . addPropertyValue ( new PropertyValue ( STRING , new java.lang.Integer ( int ) ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; final java.lang.String java.lang.String = STRING ; org.springframework.beans.factory.DefaultListableBeanFactory . addBeanPostProcessor ( new InstantiationAwareBeanPostProcessorAdapter ( ) { @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.beans.factory.BeansException { TestBean org.springframework.beans.factory.TestBean = ( TestBean ) java.lang.Object ; try { java.lang.reflect.Field java.lang.reflect.Field = TestBean .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; java.lang.reflect.Field . void ( org.springframework.beans.factory.TestBean , java.lang.String ) ; return ! boolean ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( STRING + java.lang.Exception ) ; throw new java.lang.IllegalStateException ( ) ; } } } ) ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; TestBean org.springframework.beans.factory.TestBean = ( TestBean ) org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , java.lang.String , org.springframework.beans.factory.TestBean . getName ( ) ) ; if ( ! boolean ) { assertEquals ( STRING , int , org.springframework.beans.factory.TestBean . getAge ( ) ) ; } else { assertEquals ( STRING , NUMBER , org.springframework.beans.factory.TestBean . getAge ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.beans.factory.BeansException { TestBean org.springframework.beans.factory.TestBean = ( TestBean ) java.lang.Object ; try { java.lang.reflect.Field java.lang.reflect.Field = TestBean .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; java.lang.reflect.Field . void ( org.springframework.beans.factory.TestBean , java.lang.String ) ; return ! boolean ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( STRING + java.lang.Exception ) ; throw new java.lang.IllegalStateException ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { final DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestSecuredBean .class ) ; org.springframework.beans.factory.RootBeanDefinition . setScope ( ConfigurableBeanFactory . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.RootBeanDefinition . setInitMethodName ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; final javax.security.auth.Subject javax.security.auth.Subject = new javax.security.auth.Subject ( ) ; javax.security.auth.Subject . java.util.Set<java.security.Principal> ( ) . boolean ( new org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestPrincipal ( STRING ) ) ; org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestSecuredBean org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestSecuredBean = ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestSecuredBean ) javax.security.auth.Subject . java.lang.Object ( javax.security.auth.Subject , new java.security.PrivilegedAction ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; } } , null ) ; assertNotNull ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestSecuredBean ) ; assertEquals ( STRING , org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestSecuredBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , BeanDefinitionBuilder . rootBeanDefinition ( TestBean .class ) . setAbstract ( true ) . getBeanDefinition ( ) ) ; assertThat ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) , equalTo ( true ) ) ; assertThat ( org.springframework.beans.factory.DefaultListableBeanFactory . containsBean ( STRING ) , equalTo ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; StringValueResolver org.springframework.beans.factory.StringValueResolver = mock ( StringValueResolver .class ) ; StringValueResolver org.springframework.beans.factory.StringValueResolver = mock ( StringValueResolver .class ) ; StringValueResolver org.springframework.beans.factory.StringValueResolver = mock ( StringValueResolver .class ) ; org.springframework.beans.factory.DefaultListableBeanFactory . addEmbeddedValueResolver ( org.springframework.beans.factory.StringValueResolver ) ; org.springframework.beans.factory.DefaultListableBeanFactory . addEmbeddedValueResolver ( org.springframework.beans.factory.StringValueResolver ) ; org.springframework.beans.factory.DefaultListableBeanFactory . addEmbeddedValueResolver ( org.springframework.beans.factory.StringValueResolver ) ; given ( org.springframework.beans.factory.StringValueResolver . resolveStringValue ( STRING ) ) . willReturn ( STRING ) ; given ( org.springframework.beans.factory.StringValueResolver . resolveStringValue ( STRING ) ) . willReturn ( null ) ; given ( org.springframework.beans.factory.StringValueResolver . resolveStringValue ( isNull ( ) ) ) . willThrow ( new java.lang.IllegalArgumentException ( ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . resolveEmbeddedValue ( STRING ) ; verify ( org.springframework.beans.factory.StringValueResolver ) . resolveStringValue ( STRING ) ; verify ( org.springframework.beans.factory.StringValueResolver ) . resolveStringValue ( STRING ) ; verify ( org.springframework.beans.factory.StringValueResolver , never ( ) ) . resolveStringValue ( isNull ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( java.util.Optional .class ) ; org.springframework.beans.factory.RootBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.beans.factory.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.String> ( STRING ) , org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( java.util.Optional .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( java.util.Optional .class ) ; org.springframework.beans.factory.RootBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.RootBeanDefinition ) ; assertSame ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( java.util.Optional .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( timeout = NUMBER ) public void void ( ) { Assume . group ( TestGroup . PERFORMANCE ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING + int , new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.A .class ) ) ; } org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.B .class ) ) ; org.springframework.beans.factory.DefaultListableBeanFactory . freezeConfiguration ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.B .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( timeout = NUMBER ) public void void ( ) { Assume . group ( TestGroup . PERFORMANCE ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.B .class ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING + int , new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.A .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( timeout = NUMBER ) public void void ( ) { Assume . group ( TestGroup . PERFORMANCE ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.B .class ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING + int , new org.springframework.beans.factory.DefaultListableBeanFactoryTests.A ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( TestBean org.springframework.beans.factory.TestBean ) { this . org.springframework.beans.factory.TestBean = org.springframework.beans.factory.TestBean ; }  <METHOD_END>
<METHOD_START> public void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void ( TestBean org.springframework.beans.factory.TestBean , TestBean org.springframework.beans.factory.TestBean ) { throw new java.lang.IllegalArgumentException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( TestBean org.springframework.beans.factory.TestBean , SideEffectBean org.springframework.beans.factory.SideEffectBean ) {		}  <METHOD_END>
<METHOD_START> public void ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependencyBean org.springframework.beans.factory.DefaultListableBeanFactoryTests.ConstructorDependencyBean ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.String .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) {		}  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { boolean = true ; }  <METHOD_END>
<METHOD_START> public abstract org.springframework.beans.factory.DefaultListableBeanFactoryTests.BaseClassWithDestroyMethod org.springframework.beans.factory.DefaultListableBeanFactoryTests.BaseClassWithDestroyMethod ( )  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod ) { this . org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod = org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod org.springframework.beans.factory.DefaultListableBeanFactoryTests.BeanWithDestroyMethod ( ) { int ++ ; return this ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.TestBean org.springframework.beans.factory.TestBean ( ) { TestBean org.springframework.beans.factory.TestBean = new TestBean ( ) ; org.springframework.beans.factory.TestBean . setName ( this . java.lang.String ) ; return org.springframework.beans.factory.TestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.TestBean org.springframework.beans.factory.TestBean ( java.lang.String java.lang.String ) { TestBean org.springframework.beans.factory.TestBean = new TestBean ( ) ; org.springframework.beans.factory.TestBean . setName ( java.lang.String ) ; return org.springframework.beans.factory.TestBean ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return org.springframework.beans.factory.TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) { throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) java.lang.Exception { throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { this . boolean = true ; return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.String .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { this . boolean = true ; return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.String .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public void ( ) { boolean = true ; }  <METHOD_END>
<METHOD_START> public static org.springframework.beans.factory.TestBean org.springframework.beans.factory.TestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.TestBean org.springframework.beans.factory.TestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.Integer [] java.lang.Integer[] ) { this . java.lang.Integer[] = java.lang.Integer[] ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Integer [] java.lang.Integer[] , Resource [] org.springframework.beans.factory.Resource[] ) { this . java.lang.Integer[] = java.lang.Integer[] ; this . org.springframework.beans.factory.Resource[] = org.springframework.beans.factory.Resource[] ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer [] java.lang.Integer[] ( ) { return this . java.lang.Integer[] ; }  <METHOD_END>
<METHOD_START> public void void ( Resource [] org.springframework.beans.factory.Resource[] ) { this . org.springframework.beans.factory.Resource[] = org.springframework.beans.factory.Resource[] ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.Resource [] org.springframework.beans.factory.Resource[] ( ) { return this . org.springframework.beans.factory.Resource[] ; }  <METHOD_END>
<METHOD_START> public final org.springframework.beans.factory.FactoryBean<?> < ? > org.springframework.beans.factory.FactoryBean<?> ( ) { return this . org.springframework.beans.factory.FactoryBean<> ; }  <METHOD_END>
<METHOD_START> public final void void ( final FactoryBean < ? > org.springframework.beans.factory.FactoryBean<?> ) { this . org.springframework.beans.factory.FactoryBean<?> = org.springframework.beans.factory.FactoryBean<> ; }  <METHOD_END>
<METHOD_START> public void ( java.text.NumberFormat java.text.NumberFormat ) { this . java.text.NumberFormat = java.text.NumberFormat ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.Class java.lang.Class ) { if ( java.lang.Object instanceof java.lang.String && java.lang.Float .class . boolean ( java.lang.Class ) ) { try { return new java.lang.Float ( this . java.text.NumberFormat . java.lang.Number ( ( java.lang.String ) java.lang.Object ) . float ( ) ) ; } catch ( java.text.ParseException java.text.ParseException ) { throw new TypeMismatchException ( java.lang.Object , java.lang.Class , java.text.ParseException ) ; } } else if ( java.lang.Object instanceof java.lang.String && int .class . boolean ( java.lang.Class ) ) { return new java.lang.Integer ( NUMBER ) ; } else { return java.lang.Object ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.Class java.lang.Class , MethodParameter org.springframework.beans.factory.MethodParameter ) { return java.lang.Object ( java.lang.Object , java.lang.Class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.Class java.lang.Class , java.lang.reflect.Field java.lang.reflect.Field ) { return java.lang.Object ( java.lang.Object , java.lang.Class ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == this ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestPrincipal ) ) { return false ; } org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestPrincipal org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestPrincipal = ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestPrincipal ) java.lang.Object ; return this . java.lang.String . boolean ( org.springframework.beans.factory.DefaultListableBeanFactoryTests.TestPrincipal . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.String . int ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.security.AccessControlContext java.security.AccessControlContext = java.security.AccessController . java.security.AccessControlContext ( ) ; javax.security.auth.Subject javax.security.auth.Subject = javax.security.auth.Subject . javax.security.auth.Subject ( java.security.AccessControlContext ) ; if ( javax.security.auth.Subject == null ) { return; } void ( javax.security.auth.Subject . java.util.Set<java.security.Principal> ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Set<java.security.Principal> < java.security.Principal > java.util.Set<java.security.Principal> ) { if ( java.util.Set<java.security.Principal> == null ) { return; } for ( java.util.Iterator<java.security.Principal> < java.security.Principal > java.util.Iterator<java.security.Principal> = java.util.Set<java.security.Principal> . java.util.Iterator<java.security.Principal> ( ) ; java.util.Iterator<java.security.Principal> . boolean ( ) ;) { java.security.Principal java.security.Principal = java.util.Iterator<java.security.Principal> . java.security.Principal ( ) ; this . java.lang.String = java.security.Principal . java.lang.String ( ) ; return; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public static void void ( ) { boolean = false ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void ( ) { boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.TestBean org.springframework.beans.factory.TestBean ( ) java.lang.Exception { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return TestBean .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
