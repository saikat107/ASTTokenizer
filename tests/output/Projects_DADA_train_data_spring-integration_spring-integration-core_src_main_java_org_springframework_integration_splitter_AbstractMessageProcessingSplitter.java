<METHOD_START> protected void ( MessageProcessor < java.util.Collection<?> < ? > > org.springframework.integration.splitter.MessageProcessor<java.util.Collection<?>> ) { Assert . notNull ( org.springframework.integration.splitter.MessageProcessor<java.util.Collection<?>> , STRING ) ; this . org.springframework.integration.splitter.MessageProcessor<java.util.Collection<?>> = org.springframework.integration.splitter.MessageProcessor<java.util.Collection<?>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { ConversionService org.springframework.integration.splitter.ConversionService = getConversionService ( ) ; if ( org.springframework.integration.splitter.ConversionService != null && this . org.springframework.integration.splitter.MessageProcessor<java.util.Collection<?>> instanceof AbstractMessageProcessor ) { ( ( AbstractMessageProcessor < ? > ) this . org.springframework.integration.splitter.MessageProcessor<java.util.Collection<?>> ) . setConversionService ( org.springframework.integration.splitter.ConversionService ) ; } if ( this . org.springframework.integration.splitter.MessageProcessor<java.util.Collection<?>> instanceof BeanFactoryAware && this . getBeanFactory ( ) != null ) { ( ( BeanFactoryAware ) this . org.springframework.integration.splitter.MessageProcessor<java.util.Collection<?>> ) . setBeanFactory ( this . getBeanFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.splitter.Message<?> ) { return this . org.springframework.integration.splitter.MessageProcessor<java.util.Collection<?>> . processMessage ( org.springframework.integration.splitter.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.splitter.MessageProcessor<java.util.Collection<?>> instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.splitter.MessageProcessor<java.util.Collection<?>> ) . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.splitter.MessageProcessor<java.util.Collection<?>> instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.splitter.MessageProcessor<java.util.Collection<?>> ) . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! ( this . org.springframework.integration.splitter.MessageProcessor<java.util.Collection<?>> instanceof Lifecycle ) || ( ( Lifecycle ) this . org.springframework.integration.splitter.MessageProcessor<java.util.Collection<?>> ) . isRunning ( ) ; }  <METHOD_END>
