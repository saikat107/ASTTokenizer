<METHOD_START> @ org . org.junit . org.junit @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.aspectj.BeanNamePointcutAtAspectTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.aspectj.BeanNamePointcutAtAspectTests> ( ) ) ; org.springframework.aop.aspectj.CounterAspect = ( org.springframework.aop.aspectj.CounterAspect ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.aop.aspectj.ITestBean instanceof Advised ) ; org.springframework.aop.aspectj.ITestBean . setAge ( NUMBER ) ; org.springframework.aop.aspectj.ITestBean . setName ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.CounterAspect . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( STRING , org.springframework.aop.aspectj.ITestBean instanceof Advised ) ; org.springframework.aop.aspectj.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.CounterAspect . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.aspectj.ITestBean = new TestBean ( ) ; AspectJProxyFactory org.springframework.aop.aspectj.AspectJProxyFactory = new AspectJProxyFactory ( ) ; org.springframework.aop.aspectj.AspectJProxyFactory . setTarget ( org.springframework.aop.aspectj.ITestBean ) ; org.springframework.aop.aspectj.CounterAspect org.springframework.aop.aspectj.CounterAspect = new org.springframework.aop.aspectj.CounterAspect ( ) ; org.springframework.aop.aspectj.AspectJProxyFactory . addAspect ( org.springframework.aop.aspectj.CounterAspect ) ; ITestBean org.springframework.aop.aspectj.ITestBean = org.springframework.aop.aspectj.AspectJProxyFactory . getProxy ( ) ; assertTrue ( STRING , org.springframework.aop.aspectj.ITestBean instanceof Advised ) ; org.springframework.aop.aspectj.ITestBean . setAge ( NUMBER ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.CounterAspect . int ) ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { int ++ ; }  <METHOD_END>
