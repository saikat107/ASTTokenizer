<METHOD_START> @ Parameters ( name = STRING ) public static java.lang.Object [] [] java.lang.Object[][] ( ) { return new java.lang.Object [] [] { { new JettyWebSocketTestServer ( ) , new JettyWebSocketClient ( ) } , { new TomcatWebSocketTestServer ( ) , new StandardWebSocketClient ( ) } , { new UndertowTestServer ( ) , new StandardWebSocketClient ( ) } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class<?> < ? > [] { org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestMessageBrokerConfiguration .class , org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestMessageBrokerConfigurer .class } ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TextMessage org.springframework.web.socket.messaging.TextMessage = create ( StompCommand . SEND ) . headers ( STRING ) . build ( ) ; WebSocketSession org.springframework.web.socket.messaging.WebSocketSession = doHandshake ( new org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler ( NUMBER , org.springframework.web.socket.messaging.TextMessage ) , STRING ) . get ( ) ; org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.SimpleController org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.SimpleController = this . wac . getBean ( org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.SimpleController .class ) ; try { assertTrue ( org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.SimpleController . java.util.concurrent.CountDownLatch . boolean ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; } finally { org.springframework.web.socket.messaging.WebSocketSession . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TextMessage org.springframework.web.socket.messaging.TextMessage = create ( StompCommand . SUBSCRIBE ) . headers ( STRING , STRING ) . build ( ) ; TextMessage org.springframework.web.socket.messaging.TextMessage = create ( StompCommand . SEND ) . headers ( STRING ) . body ( STRING ) . build ( ) ; org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler = new org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler ( NUMBER , org.springframework.web.socket.messaging.TextMessage , org.springframework.web.socket.messaging.TextMessage ) ; WebSocketSession org.springframework.web.socket.messaging.WebSocketSession = doHandshake ( org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler , STRING ) . get ( ) ; try { assertTrue ( org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler . java.util.concurrent.CountDownLatch . boolean ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; } finally { org.springframework.web.socket.messaging.WebSocketSession . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TextMessage org.springframework.web.socket.messaging.TextMessage = create ( StompCommand . SUBSCRIBE ) . headers ( STRING , STRING ) . build ( ) ; TextMessage org.springframework.web.socket.messaging.TextMessage = create ( StompCommand . SEND ) . headers ( STRING ) . body ( STRING ) . build ( ) ; org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler = new org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler ( NUMBER , org.springframework.web.socket.messaging.TextMessage , org.springframework.web.socket.messaging.TextMessage ) ; WebSocketSession org.springframework.web.socket.messaging.WebSocketSession = doHandshake ( org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler , STRING ) . get ( ) ; try { assertTrue ( org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler . java.util.concurrent.CountDownLatch . boolean ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; java.lang.String java.lang.String = org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler . java.util.List<org.springframework.web.socket.messaging.TextMessage> . get ( NUMBER ) . getPayload ( ) ; assertTrue ( STRING + java.lang.String , java.lang.String . boolean ( STRING ) ) ; } finally { org.springframework.web.socket.messaging.WebSocketSession . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; TextMessage org.springframework.web.socket.messaging.TextMessage = create ( StompCommand . SUBSCRIBE ) . headers ( STRING , java.lang.String ) . build ( ) ; org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler = new org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler ( NUMBER , org.springframework.web.socket.messaging.TextMessage ) ; WebSocketSession org.springframework.web.socket.messaging.WebSocketSession = doHandshake ( org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler , STRING ) . get ( ) ; try { assertTrue ( org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler . java.util.concurrent.CountDownLatch . boolean ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; java.lang.String java.lang.String = org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler . java.util.List<org.springframework.web.socket.messaging.TextMessage> . get ( NUMBER ) . getPayload ( ) ; assertTrue ( STRING + java.lang.String , java.lang.String . boolean ( java.lang.String ) ) ; assertTrue ( STRING + java.lang.String , java.lang.String . boolean ( STRING ) ) ; } finally { org.springframework.web.socket.messaging.WebSocketSession . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; TextMessage org.springframework.web.socket.messaging.TextMessage = create ( StompCommand . SUBSCRIBE ) . headers ( STRING , java.lang.String ) . build ( ) ; TextMessage org.springframework.web.socket.messaging.TextMessage = create ( StompCommand . SEND ) . headers ( STRING ) . build ( ) ; org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler = new org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler ( NUMBER , org.springframework.web.socket.messaging.TextMessage , org.springframework.web.socket.messaging.TextMessage ) ; WebSocketSession org.springframework.web.socket.messaging.WebSocketSession = doHandshake ( org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler , STRING ) . get ( ) ; try { assertTrue ( org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler . java.util.concurrent.CountDownLatch . boolean ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; java.lang.String java.lang.String = org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler . java.util.List<org.springframework.web.socket.messaging.TextMessage> . get ( NUMBER ) . getPayload ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; } finally { org.springframework.web.socket.messaging.WebSocketSession . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TextMessage org.springframework.web.socket.messaging.TextMessage = create ( StompCommand . SUBSCRIBE ) . headers ( STRING , STRING ) . build ( ) ; TextMessage org.springframework.web.socket.messaging.TextMessage = create ( StompCommand . SEND ) . headers ( STRING ) . build ( ) ; org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler = new org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler ( NUMBER , org.springframework.web.socket.messaging.TextMessage , org.springframework.web.socket.messaging.TextMessage ) ; WebSocketSession org.springframework.web.socket.messaging.WebSocketSession = doHandshake ( org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler , STRING ) . get ( ) ; try { assertTrue ( org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler . java.util.concurrent.CountDownLatch . boolean ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; java.lang.String java.lang.String = org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.TestClientWebSocketHandler . java.util.List<org.springframework.web.socket.messaging.TextMessage> . get ( NUMBER ) . getPayload ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; } finally { org.springframework.web.socket.messaging.WebSocketSession . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public void void ( ) { this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public void void ( ) { throw new java.lang.IllegalArgumentException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ MessageExceptionHandler @ SendToUser ( STRING ) public java.lang.String java.lang.String ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { return STRING + java.lang.IllegalArgumentException . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public int int ( int int ) { return int + NUMBER ; }  <METHOD_END>
<METHOD_START> @ SubscribeMapping ( STRING ) public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Autowired public void ( org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.ScopedBean org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.ScopedBean ) { this . org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.ScopedBean = org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.ScopedBean ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public java.lang.String java.lang.String ( ) { return this . org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.ScopedBean . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( int int , TextMessage ... org.springframework.web.socket.messaging.TextMessage[] ) { this . org.springframework.web.socket.messaging.TextMessage[] = org.springframework.web.socket.messaging.TextMessage[] ; this . int = int ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( this . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.messaging.WebSocketSession ) throws java.lang.Exception { for ( TextMessage org.springframework.web.socket.messaging.TextMessage : this . org.springframework.web.socket.messaging.TextMessage[] ) { org.springframework.web.socket.messaging.WebSocketSession . sendMessage ( org.springframework.web.socket.messaging.TextMessage ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( WebSocketSession org.springframework.web.socket.messaging.WebSocketSession , TextMessage org.springframework.web.socket.messaging.TextMessage ) throws java.lang.Exception { this . java.util.List<org.springframework.web.socket.messaging.TextMessage> . add ( org.springframework.web.socket.messaging.TextMessage ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompEndpointRegistry org.springframework.web.socket.messaging.StompEndpointRegistry ) { org.springframework.web.socket.messaging.StompEndpointRegistry . addEndpoint ( STRING ) . setHandshakeHandler ( this . org.springframework.web.socket.messaging.HandshakeHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageBrokerRegistry org.springframework.web.socket.messaging.MessageBrokerRegistry ) { org.springframework.web.socket.messaging.MessageBrokerRegistry . setApplicationDestinationPrefixes ( STRING ) ; org.springframework.web.socket.messaging.MessageBrokerRegistry . enableSimpleBroker ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( scopeName = STRING , proxyMode = ScopedProxyMode . INTERFACES ) public org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.ScopedBean org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.ScopedBean ( ) { return new org.springframework.web.socket.messaging.StompWebSocketIntegrationTests.ScopedBeanImpl ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.web.socket.messaging.AbstractSubscribableChannel org.springframework.web.socket.messaging.AbstractSubscribableChannel ( ) { return new ExecutorSubscribableChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.web.socket.messaging.AbstractSubscribableChannel org.springframework.web.socket.messaging.AbstractSubscribableChannel ( ) { return new ExecutorSubscribableChannel ( ) ; }  <METHOD_END>
